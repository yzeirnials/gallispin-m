
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | struct StringAccum::rep_t
         0 |   unsigned char * s
         8 |   int len
        12 |   int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55fb1f6ea9b8 prev 0x55fb1f6e2158 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55fb1f6eaab0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55fb1f6eab40 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55fb1f6eabb8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55fb1f6eac78 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55fb1f6ead40 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55fb1f6eaeb8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55fb1f6eadf0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55fb1f6eaf60 <col:24>
| `-OptimizeNoneAttr 0x55fb1f6eafb8 <col:34>
|-CXXMethodDecl 0x55fb1f6eb000 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55fb1f6eb2b8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55fb1f6eb0b0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55fb1f6eb128 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55fb1f6eb1a8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55fb1f6eb370 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55fb1f6eb3a8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55fb1f6eb410 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55fb1f6eb498 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55fb1f6eb7b8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55fb1f6eb550 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55fb1f6eb5c8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55fb1f6eb640 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55fb1f6eb6c0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55fb1f6eb8d0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55fb1f6f3248 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55fb1f6f3248
| `-ParmVarDecl 0x55fb1f6f3358 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55fb1f6f33f8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55fb1f6f33f8
| `-ParmVarDecl 0x55fb1f6f3508 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55fb1f7ef128 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55fb1f6dd9d0 prev 0x55fb1f6dd750 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55fb1f6ddac8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55fb1f6ddb58 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55fb1f6ddbb8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55fb1f6ddca8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55fb1f6ddda8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55fb1f6ddf78 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55fb1f6dde28 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55fb1f6ddea0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55fb1f6de108 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55fb1f6de040 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55fb1f6de1b0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55fb1f6de2e8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55fb1f6de220 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55fb1f6de488 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55fb1f6de3c8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55fb1f6de628 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55fb1f6de568 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55fb1f6de6d0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55fb1f6de7d0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55fb1f6de8b0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f6de7b0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55fb1f6de790 <col:26> 'int' 1
| `-EnumConstantDecl 0x55fb1f6de860 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55fb1f6de8c8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55fb1f6de840 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55fb1f6de820 <col:44> 'int' 2
|-CXXMethodDecl 0x55fb1f6dea10 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55fb1f6de8f8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55fb1f6de978 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55fb1f6deb68 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55fb1f6dead8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55fb1f6deda8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55fb1f6dec28 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55fb1f6deca0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55fb1f6dee58 <col:20>
| `-OptimizeNoneAttr 0x55fb1f6deeb0 <col:30>
|-CXXMethodDecl 0x55fb1f6defb8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55fb1f6deef0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55fb1f6df060 <col:20>
| `-OptimizeNoneAttr 0x55fb1f6df0b8 <col:30>
|-CXXMethodDecl 0x55fb1f6df108 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55fb1f6df1d0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55fb1f6df2e8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55fb1f6df370 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55fb1f6df3f8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55fb1f6df480 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x55fb1f6df508 <line:59:5, col:35> col:23 used PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55fb1f6df598 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55fb1f6df658 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55fb1f6df6e0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55fb1f6df768 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55fb1f6df7f0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55fb1f6df878 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55fb1f6df900 <line:67:5, col:39> col:23 used PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55fb1f6df990 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55fb1f6dfa50 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55fb1f6dfae0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55fb1f6dfc30 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55fb1f6dfb98 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55fb1f6dfdc0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55fb1f6dfcf0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55fb1f6e0070 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55fb1f6dfe78 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55fb1f6dfef8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55fb1f6dff78 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55fb1f6e0128 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55fb1f6e0230 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55fb1f6e04c0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f6e0210 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55fb1f6e01f0 <col:33> 'int' 0
| |-EnumConstantDecl 0x55fb1f6e02c0 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55fb1f6e04d8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f6e02a0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55fb1f6e0280 <col:32> 'int' 20
| |-EnumConstantDecl 0x55fb1f6e0350 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55fb1f6e04f0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f6e0330 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55fb1f6e0310 <col:38> 'int' 90
| |-EnumConstantDecl 0x55fb1f6e03e0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55fb1f6e0508 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f6e03c0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55fb1f6e03a0 <col:35> 'int' 100
| `-EnumConstantDecl 0x55fb1f6e0470 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55fb1f6e0520 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55fb1f6e0450 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55fb1f6e0430 <col:32> 'int' 2000
|-CXXMethodDecl 0x55fb1f6e0560 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55fb1f6e09a0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55fb1f6e0810 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55fb1f6e0888 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55fb1f6e0a70 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55fb1f6e0bf0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55fb1f6e0b20 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55fb1f6e0df8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55fb1f6e0ca8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55fb1f6e0d20 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55fb1f6e0ef8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55fb1f6e0f98 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55fb1f6e1060 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55fb1f6e10f0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55fb1f6e1320 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f6e10d0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55fb1f6e10b0 <col:36> 'int' EnumConstant 0x55fb1f6e1060 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55fb1f6e1140 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55fb1f6e1190 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55fb1f6e11e0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55fb1f6e1230 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55fb1f6e1280 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55fb1f6e12d0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55fb1f6e1408 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55fb1f6e1348 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55fb1f6e14d0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55fb1f6e1590 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55fb1f6e1650 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55fb1f6e1710 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55fb1f6e1828 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55fb1f6e18f0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55fb1f6e1a70 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55fb1f6e19a0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55fb1f6e1b98 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55fb1f6e1d98 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55fb1f6e1c48 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55fb1f6e1cc8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55fb1f6ef6e8 <col:54, line:127:5>
|   |-ParenExpr 0x55fb1f6ef598 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55fb1f6ef568 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55fb1f6ef258 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55fb1f6ef230 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55fb1f6ef218 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55fb1f6ef200 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55fb1f6ef1d0 <col:31> 'Router *' lvalue ->_router 0x55fb1f6ed0b0
|   |   |         `-CXXThisExpr 0x55fb1f6ef1c0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55fb1f6ef2b8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55fb1f6ef298 <col:48> 'int' 0
|   |   `-CallExpr 0x55fb1f6ef4c8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55fb1f6ef4b0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55fb1f6ef490 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55fb1f2180a0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55fb1f6ef508 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55fb1f6ef328 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55fb1f6ef520 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55fb1f6ef348 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55fb1f6ef538 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55fb1f6ef380 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55fb1f6ef550 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55fb1f6ef478 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55fb1f6ef460 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55fb1f6ef418 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55fb1f6ef630 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55fb1f6ef5c8 <col:9> 'Router *' lvalue ->_router 0x55fb1f6ed0b0
|   | | `-CXXThisExpr 0x55fb1f6ef5b8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55fb1f6ef618 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55fb1f6ef5f8 <col:19> 'Router *' lvalue ParmVar 0x55fb1f6e1c48 'r' 'Router *'
|   `-BinaryOperator 0x55fb1f6ef6c8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55fb1f6ef660 <col:9> 'int' lvalue ->_eindex 0x55fb1f6ed118
|     | `-CXXThisExpr 0x55fb1f6ef650 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55fb1f6ef6b0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55fb1f6ef690 <col:19> 'int' lvalue ParmVar 0x55fb1f6e1cc8 'eindex' 'int'
|-CXXMethodDecl 0x55fb1f6e1f20 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55fb1f6e1e58 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55fb1f6e1ff0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55fb1f6e20b8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55fb1f6e2158 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55fb1f6e23a8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55fb1f6e2220 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55fb1f6e22a0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55fb1f6e2458 <col:20>
| `-OptimizeNoneAttr 0x55fb1f6e24b0 <col:30>
|-CXXMethodDecl 0x55fb1f6e25b8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55fb1f6e24f0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55fb1f6e2660 <col:20>
| `-OptimizeNoneAttr 0x55fb1f6e26b8 <col:30>
|-CXXMethodDecl 0x55fb1f6e2788 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55fb1f6e26f8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55fb1f6e2830 <col:20>
| `-OptimizeNoneAttr 0x55fb1f6e2888 <col:30>
|-CXXMethodDecl 0x55fb1f6e2a18 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55fb1f6e28c0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55fb1f6e2940 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55fb1f6e2ba8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55fb1f6e2ae0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55fb1f6e2cf8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55fb1f6e2c68 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55fb1f6e2e48 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55fb1f6e2db8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55fb1f6e2f98 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55fb1f6e2f08 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55fb1f6e3258 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55fb1f6e3050 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55fb1f6e30d0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55fb1f6e3178 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55fb1f6e3330 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55fb1f6e33f0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55fb1f6e36c0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55fb1f6e3570 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55fb1f6e35e8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55fb1f6e37e8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55fb1f6e39c0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55fb1f6e38a0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55fb1f6e3920 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55fb1f6e3ba8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55fb1f6e3a88 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55fb1f6e3b08 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55fb1f6e3f18 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55fb1f6e3c68 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55fb1f6e3ce0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55fb1f6e3d60 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55fb1f6eecd0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55fb1f6eecb0 <col:106> 'int' 0
| `-ParmVarDecl 0x55fb1f6e3dd8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55fb1f6eed08 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55fb1f6eece8 <col:126> 'int' 0
|-CXXMethodDecl 0x55fb1f6e42b8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55fb1f6e3fe8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55fb1f6e4080 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55fb1f6e4100 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55fb1f6e4178 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55fb1f6eed40 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55fb1f6eed20 <col:114> 'int' 0
|-CXXMethodDecl 0x55fb1f6e4648 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55fb1f6e4390 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55fb1f6e4408 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55fb1f6e4488 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55fb1f6eed58 <col:96> 'int' 0
| `-ParmVarDecl 0x55fb1f6e4500 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55fb1f6eed98 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55fb1f6eed78 <col:116> 'int' 0
|-CXXMethodDecl 0x55fb1f6e49c8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55fb1f6e4718 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55fb1f6e4790 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55fb1f6e4810 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55fb1f6eedd0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55fb1f6eedb0 <col:109> 'int' 0
| `-ParmVarDecl 0x55fb1f6e4888 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55fb1f6eee08 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55fb1f6eede8 <col:129> 'int' 0
|-CXXMethodDecl 0x55fb1f6e4d48 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55fb1f6e4a98 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55fb1f6e4b10 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55fb1f6e4b90 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55fb1f6e4c08 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55fb1f6eee40 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55fb1f6eee20 <col:117> 'int' 0
|-CXXMethodDecl 0x55fb1f6e50d8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55fb1f6e4e20 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55fb1f6e4e98 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55fb1f6e4f18 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55fb1f6eee58 <col:99> 'int' 0
| `-ParmVarDecl 0x55fb1f6e4f90 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55fb1f6eee98 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55fb1f6eee78 <col:119> 'int' 0
|-CXXMethodDecl 0x55fb1f6e54f8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55fb1f6e51a8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55fb1f6e5228 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55fb1f6e52a0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55fb1f6e5320 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55fb1f6eeed0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55fb1f6eeeb0 <col:108> 'int' 0
| `-ParmVarDecl 0x55fb1f6e53a0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55fb1f6eef08 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55fb1f6eeee8 <col:141> 'int' 0
|-CXXMethodDecl 0x55fb1f6e5918 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55fb1f6e55d0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55fb1f6e5650 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55fb1f6e56c8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55fb1f6e5748 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55fb1f6e57c8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55fb1f6eef20 <col:121> 'int' 0
|-CXXMethodDecl 0x55fb1f6e5d48 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55fb1f6e59f8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55fb1f6e5a78 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55fb1f6e5af0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55fb1f6e5b70 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55fb1f6eef40 <col:98> 'int' 0
| `-ParmVarDecl 0x55fb1f6e5bf0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55fb1f6eef60 <col:123> 'int' 0
|-CXXMethodDecl 0x55fb1f6e6010 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55fb1f6e5e20 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55fb1f6e5ea0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55fb1f6e5f20 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55fb1f6eef80 <col:80> 'int' 0
|-EnumDecl 0x55fb1f6e60c8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55fb1f6e61d0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55fb1f6e6460 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f6e61b0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55fb1f6e6190 <col:42> 'int' 1
| |-EnumConstantDecl 0x55fb1f6e6260 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55fb1f6e6478 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f6e6240 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55fb1f6e6220 <col:40> 'int' 2
| |-EnumConstantDecl 0x55fb1f6e62f0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55fb1f6e6490 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f6e62d0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55fb1f6e62b0 <col:44> 'int' 4
| |-EnumConstantDecl 0x55fb1f6e6380 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55fb1f6e64a8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f6e6360 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55fb1f6e6340 <col:36> 'int' 7
| `-EnumConstantDecl 0x55fb1f6e6410 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55fb1f6e64c0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55fb1f6e63f0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55fb1f6e63d0 <col:34> 'int' 6
|-CXXMethodDecl 0x55fb1f6e6778 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55fb1f6e64e8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55fb1f6e6588 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55fb1f6e6608 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55fb1f6e6680 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55fb1f6ef038 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55fb1f6ef020 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55fb1f6ef008 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55fb1f6eefe8 <col:98, col:105> 'String' (CXXTemporary 0x55fb1f6eefe8)
|           `-CXXTemporaryObjectExpr 0x55fb1f6eefb0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55fb1f6e6a18 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55fb1f6e6848 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55fb1f6e68c0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55fb1f6e6938 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55fb1f6ef0e8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55fb1f6ef0d0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55fb1f6ef0b8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55fb1f6ef098 <col:94, col:101> 'String' (CXXTemporary 0x55fb1f6ef098)
| |         `-CXXTemporaryObjectExpr 0x55fb1f6ef060 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55fb1f6ef8d0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55fb1f6ef848 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55fb1f6ef818 <col:9> '<bound member function type>' ->add_task_handlers 0x55fb1f6e6778
|     | `-CXXThisExpr 0x55fb1f6ef808 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55fb1f6ef888 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55fb1f6ef788 <col:27> 'Task *' lvalue ParmVar 0x55fb1f6e6848 'task' 'Task *'
|     |-ImplicitCastExpr 0x55fb1f6ef8a0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55fb1f6ef7a8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55fb1f6e68c0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55fb1f6ef8b8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55fb1f6ef7c8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55fb1f6e6410 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55fb1f6ef7e8 <col:62> 'const String' lvalue ParmVar 0x55fb1f6e6938 'prefix' 'const String &'
|-CXXMethodDecl 0x55fb1f6e6c28 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55fb1f6e6ae0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55fb1f6e6b58 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55fb1f6ef198 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55fb1f6ef180 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55fb1f6ef168 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55fb1f6ef148 <col:70, col:77> 'String' (CXXTemporary 0x55fb1f6ef148)
| |         `-CXXTemporaryObjectExpr 0x55fb1f6ef110 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55fb1f6efaa8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55fb1f6efa20 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55fb1f6ef9f0 <col:9> '<bound member function type>' ->add_task_handlers 0x55fb1f6e6778
|     | `-CXXThisExpr 0x55fb1f6ef9e0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55fb1f6efa60 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55fb1f6ef960 <col:27> 'Task *' lvalue ParmVar 0x55fb1f6e6ae0 'task' 'Task *'
|     |-ImplicitCastExpr 0x55fb1f6efa78 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55fb1f6ef980 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55fb1f6efa90 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55fb1f6ef9a0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55fb1f6e6410 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55fb1f6ef9c0 <col:57> 'const String' lvalue ParmVar 0x55fb1f6e6b58 'prefix' 'const String &'
|-CXXMethodDecl 0x55fb1f6e6f08 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55fb1f6e6cf0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55fb1f6e6d70 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55fb1f6e6de8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55fb1f6e71b8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55fb1f6e6fd8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55fb1f6e7058 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55fb1f6e70d8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55fb1f6e74a8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55fb1f6e7288 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55fb1f6e7308 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55fb1f6e7380 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55fb1f6e7758 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55fb1f6e7578 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55fb1f6e75f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55fb1f6e7678 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55fb1f6e7a08 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55fb1f6e7828 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55fb1f6e78a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55fb1f6e7928 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55fb1f6e7cb8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55fb1f6e7ad8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55fb1f6e7b58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55fb1f6e7bd0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55fb1f6e7f68 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55fb1f6e7d88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55fb1f6e7e08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55fb1f6e7e88 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55fb1f6e8278 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55fb1f6e8090 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55fb1f6e8110 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55fb1f6e8190 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55fb1f6e8558 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55fb1f6e8348 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55fb1f6e83c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55fb1f6e8470 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55fb1f6e8838 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55fb1f6e8628 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55fb1f6e86a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55fb1f6e8750 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55fb1f6e8aa0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55fb1f6e8908 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55fb1f6e8988 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55fb1f6e8a00 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55fb1f6e8d48 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55fb1f6e8b70 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55fb1f6e8bf0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55fb1f6e8c68 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55fb1f6e8ff8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55fb1f6e8e18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55fb1f6e8e98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55fb1f6e8f18 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55fb1f6e92a8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55fb1f6e90c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55fb1f6e9148 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55fb1f6e91c0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55fb1f6e9558 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55fb1f6e9378 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55fb1f6e93f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55fb1f6e9470 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55fb1f6e9828 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55fb1f6e9628 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55fb1f6e96a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55fb1f6e9748 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55fb1f6e9b58 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55fb1f6e98f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55fb1f6e9978 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55fb1f6e99f0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55fb1f6e9a68 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55fb1f6ef1b0 <col:93> 'bool' false
|-CXXMethodDecl 0x55fb1f6e9d40 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55fb1f6e9c28 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55fb1f6e9ca8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55fb1f6e9f18 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55fb1f6e9e00 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55fb1f6e9e80 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55fb1f6ea1f8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55fb1f6e9fd8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55fb1f6ea050 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55fb1f6ea0d0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55fb1f6ea148 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55fb1f6ea4e8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55fb1f6ea2c8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55fb1f6ea340 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55fb1f6ea3c0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55fb1f6ea438 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55fb1f6ea720 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55fb1f6ea5c0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55fb1f6ea640 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55fb1f6ea908 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55fb1f6ea7e8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55fb1f6ea868 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55fb1f6ea9b8 prev 0x55fb1f6e2158 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55fb1f6eaab0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55fb1f6eab40 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55fb1f6eabb8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55fb1f6eac78 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55fb1f6ead40 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55fb1f6eaeb8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55fb1f6eadf0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55fb1f6eaf60 <col:24>
| | `-OptimizeNoneAttr 0x55fb1f6eafb8 <col:34>
| |-CXXMethodDecl 0x55fb1f6eb000 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55fb1f6eb2b8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55fb1f6eb0b0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55fb1f6eb128 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55fb1f6eb1a8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55fb1f6eb370 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55fb1f6eb3a8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55fb1f6eb410 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55fb1f6eb498 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55fb1f6eb7b8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55fb1f6eb550 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55fb1f6eb5c8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55fb1f6eb640 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55fb1f6eb6c0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55fb1f6eb8d0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55fb1f6f3248 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55fb1f6f3248
| | `-ParmVarDecl 0x55fb1f6f3358 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55fb1f6f33f8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55fb1f6f33f8
| | `-ParmVarDecl 0x55fb1f6f3508 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55fb1f7ef128 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55fb1f6eb948 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55fb1f6eb9e8 <col:38> "" ""
|-CXXMethodDecl 0x55fb1f6eba78 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55fb1f6ebb18 <col:44> "" ""
|-AccessSpecDecl 0x55fb1f6ebb88 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55fb1f6ebbb0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55fb1f6ebcb0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55fb1f6ebd00 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55fb1f6ebc90 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55fb1f6ebc70 <col:27> 'int' 4
|-FieldDecl 0x55fb1f6ebdb8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55fb1f6ebf68 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55fb1f6ec020 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55fb1f6ed0b0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55fb1f6ed118 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55fb1f6ed268 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55fb1f6ed1a8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55fb1f6ed418 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55fb1f6ed328 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55fb1f6ed5f8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55fb1f6ed4d8 <col:20> col:23 'int'
| `-ParmVarDecl 0x55fb1f6ed558 <col:25> col:28 'int'
|-CXXMethodDecl 0x55fb1f6ed8a0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55fb1f6ed6c0 <col:23> col:26 'int'
| |-ParmVarDecl 0x55fb1f6ed740 <col:28> col:31 'int'
| `-ParmVarDecl 0x55fb1f6ed7b8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55fb1f6ed958 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55fb1f6eda20 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55fb1f6eda70 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55fb1f6edac0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55fb1f6edca0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55fb1f6edb50 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55fb1f6edbc8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55fb1f6edf48 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55fb1f6edd68 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55fb1f6edde8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55fb1f6ede60 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55fb1f6ee168 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55fb1f6ee018 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55fb1f6ee098 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55fb1f6ee4a0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55fb1f6ee228 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55fb1f6ee2a8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55fb1f6ee320 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55fb1f6ee3a0 <col:57> col:60 'int'
|-CXXMethodDecl 0x55fb1f6ee688 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55fb1f6ee570 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55fb1f6ee5f0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55fb1f6ee7d8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55fb1f6ee748 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55fb1f6eeb58 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55fb1f6ee898 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55fb1f6ee918 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55fb1f6ee990 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55fb1f6eea10 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55fb1f6eec70 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | class CheckICMPHeader
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
   108:0-0 |   _Bool _verbose
       112 |   class atomic_uint32_t _drops
       112 |     uint32_t _val
       120 |   class atomic_uint32_t * _reason_drops
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55fb1f49c480 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55fb1f49c598 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55fb1f49c628 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55fb1f49c6f8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55fb1f49c7e0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55fb1f49c9f8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55fb1f49c8a0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55fb1f49cba8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55fb1f49cab0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55fb1f49ccf0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55fb1f49cc60 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55fb1f49ce38 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55fb1f49cda8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55fb1f49cf80 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55fb1f49cef0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55fb1f49d048 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55fb1f49d190 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55fb1f49d100 <col:28> col:31 'int'
|-CXXMethodDecl 0x55fb1f49d258 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55fb1f49d3a0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55fb1f49d310 <col:28> col:31 'int'
|-CXXMethodDecl 0x55fb1f49d518 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55fb1f49d458 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55fb1f49d660 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55fb1f49d5d0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55fb1f49d728 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55fb1f49d8e8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55fb1f49d7d8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55fb1f49d850 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55fb1f49db38 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55fb1f49d9a8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55fb1f49da20 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55fb1f49dbe8 <col:86> "" ""
|-CXXMethodDecl 0x55fb1f49de58 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55fb1f49dcc8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55fb1f49dd40 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55fb1f49e008 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55fb1f49df18 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55fb1f49e1b8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55fb1f49e0c0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55fb1f49e488 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55fb1f49e270 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55fb1f49e2e8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55fb1f49e360 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55fb1f49e768 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55fb1f49e550 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55fb1f49e5c8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55fb1f49e640 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55fb1f49e820 <col:115> "" ""
|-AccessSpecDecl 0x55fb1f49e890 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55fb1f49e8c8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55fb1f49fde0 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55fb1f49fde0
| `-ParmVarDecl 0x55fb1f49fee8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55fb1f49ff88 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55fb1f49ff88
| `-ParmVarDecl 0x55fb1f4a0098 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55fb1f4d56c8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55fb1f6c74c0 <col:7>
|-CXXConstructorDecl 0x55fb1f4d57a0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55fb1f4d57a0
| `-ParmVarDecl 0x55fb1f4d58b8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55fb1f4d5928 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55fb1f4d5928
| `-ParmVarDecl 0x55fb1f4d5a38 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55fb1f6c9ec0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55fb1f6f63b8 <../elements/icmp/checkicmpheader.hh:52:1, line:83:1> line:52:7 class CheckICMPHeader definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55fb1f6f6518 <col:1, col:7> col:7 implicit referenced class CheckICMPHeader
|-AccessSpecDecl 0x55fb1f6f65a8 <col:42, col:48> col:42 public
|-CXXConstructorDecl 0x55fb1f6f6630 <line:54:3, col:19> col:3 CheckICMPHeader 'void ()'
|-CXXDestructorDecl 0x55fb1f6f6720 <line:55:3, col:20> col:3 ~CheckICMPHeader 'void ()' noexcept-unevaluated 0x55fb1f6f6720
| `-Overrides: [ 0x55fb1f6ddca8 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55fb1f6f6850 <line:57:3, col:62> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x55fb1f6df108 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55fb1f6f7b88 <col:34, col:62>
|   `-ReturnStmt 0x55fb1f6f7b78 <col:36, col:43>
|     `-ImplicitCastExpr 0x55fb1f6f7b60 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55fb1f6f7b38 <col:43> 'const char [16]' lvalue "CheckICMPHeader"
|-CXXMethodDecl 0x55fb1f6f6918 <line:58:3, col:56> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x55fb1f6df1d0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55fb1f6f7be8 <col:34, col:56>
|   `-ReturnStmt 0x55fb1f6f7bd8 <col:36, col:43>
|     `-ImplicitCastExpr 0x55fb1f6f7bc0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55fb1f6f7ba0 <col:43> 'const char []' lvalue Var 0x55fb1f6df508 'PORTS_1_1X2' 'const char []'
|-CXXMethodDecl 0x55fb1f6f69e0 <line:59:3, col:60> col:15 processing 'const char *() const'
| |-Overrides: [ 0x55fb1f6df598 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x55fb1f6f7c48 <col:34, col:60>
|   `-ReturnStmt 0x55fb1f6f7c38 <col:36, col:43>
|     `-ImplicitCastExpr 0x55fb1f6f7c20 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55fb1f6f7c00 <col:43> 'const char []' lvalue Var 0x55fb1f6df900 'PROCESSING_A_AH' 'const char []'
|-CXXMethodDecl 0x55fb1f6f6cb0 <line:61:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55fb1f6e09a0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55fb1f6f6b60 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x55fb1f6f6bd8 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x55fb1f6f6d80 <line:62:3, col:21> col:8 add_handlers 'void ()'
| `-Overrides: [ 0x55fb1f6e0a70 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x55fb1f6f6ec0 <line:64:3, col:33> col:11 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x55fb1f6de2e8 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x55fb1f6f6e30 <col:25, col:32> col:33 'Packet *'
|-AccessSpecDecl 0x55fb1f6f6f68 <line:66:2, col:9> col:2 private
|-FieldDecl 0x55fb1f6f6fe0 <line:68:3, col:19> col:8 _verbose 'bool'
| `-ConstantExpr 0x55fb1f6f6fc0 <col:19> 'int' Int: 1
|   `-IntegerLiteral 0x55fb1f6f6f90 <col:19> 'int' 1
|-FieldDecl 0x55fb1f6f7040 <line:69:3, col:19> col:19 referenced _drops 'atomic_uint32_t'
|-FieldDecl 0x55fb1f6f70a0 <line:70:3, col:20> col:20 _reason_drops 'atomic_uint32_t *'
|-EnumDecl 0x55fb1f6f70f0 <line:72:3, line:77:3> line:72:8 referenced Reason
| |-EnumConstantDecl 0x55fb1f6f71b0 <line:73:5> col:5 NOT_ICMP 'CheckICMPHeader::Reason'
| |-EnumConstantDecl 0x55fb1f6f7200 <line:74:5> col:5 BAD_LENGTH 'CheckICMPHeader::Reason'
| |-EnumConstantDecl 0x55fb1f6f7250 <line:75:5> col:5 BAD_CHECKSUM 'CheckICMPHeader::Reason'
| `-EnumConstantDecl 0x55fb1f6f72a0 <line:76:5> col:5 referenced NREASONS 'CheckICMPHeader::Reason'
|-VarDecl 0x55fb1f6f7390 <line:78:3, col:43> col:22 reason_texts 'const char *[3]' static
|-CXXMethodDecl 0x55fb1f6f7558 <line:80:3, col:32> col:11 drop 'Packet *(CheckICMPHeader::Reason, Packet *)'
| |-ParmVarDecl 0x55fb1f6f7408 <col:16> col:22 'CheckICMPHeader::Reason'
| `-ParmVarDecl 0x55fb1f6f7480 <col:24, col:31> col:32 'Packet *'
|-CXXMethodDecl 0x55fb1f6f7730 <line:81:3, col:47> col:17 read_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55fb1f6f7618 <col:30, col:38> col:39 'Element *'
| `-ParmVarDecl 0x55fb1f6f7698 <col:41, col:46> col:47 'void *'
|-CXXConstructorDecl 0x55fb1f6f7808 <line:52:7> col:7 implicit CheckICMPHeader 'void (const CheckICMPHeader &)' inline default_delete noexcept-unevaluated 0x55fb1f6f7808
| `-ParmVarDecl 0x55fb1f6f7918 <col:7> col:7 'const CheckICMPHeader &'
`-CXXMethodDecl 0x55fb1f6f79b8 <col:7> col:7 implicit operator= 'CheckICMPHeader &(const CheckICMPHeader &)' inline default_delete noexcept-unevaluated 0x55fb1f6f79b8
  `-ParmVarDecl 0x55fb1f6f7ac8 <col:7> col:7 'const CheckICMPHeader &'

Layout: <CGRecordLayout
  LLVMType:%class.CheckICMPHeader = type { %class.Element.base, i8, %class.atomic_uint32_t, %class.atomic_uint32_t* }
  NonVirtualBaseLLVMType:%class.CheckICMPHeader = type { %class.Element.base, i8, %class.atomic_uint32_t, %class.atomic_uint32_t* }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:1 IsSigned:0 StorageSize:8 StorageOffset:108>
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55fb1f4b1870 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55fb1f4b1988 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55fb1f4b1a28 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55fb1f4b1a88 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55fb1f4b1ae8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55fb1f4b1b98 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55fb1f4b1ea0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55fb1f4b1fb8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55fb1f4b2060 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55fb1f4b20c8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55fb1f4b2158 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55fb1f4b81f0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55fb1f4b8628 <col:12>
|-CXXConstructorDecl 0x55fb1f4b82f8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55fb1f4b8408 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55fb1f4b2060 'data' 'const char *'
| | `-ImplicitCastExpr 0x55fb1f4babb0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55fb1f4bab80 <col:12> 'const char *const' lvalue .data 0x55fb1f4b2060
| |     `-DeclRefExpr 0x55fb1f4bab60 <col:12> 'const String::rep_t' lvalue ParmVar 0x55fb1f4b8408 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55fb1f4b20c8 'length' 'int'
| | `-ImplicitCastExpr 0x55fb1f4bac40 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55fb1f4bac10 <col:12> 'const int' lvalue .length 0x55fb1f4b20c8
| |     `-DeclRefExpr 0x55fb1f4babf0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55fb1f4b8408 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55fb1f4b2158 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55fb1f4bacd0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55fb1f4baca0 <col:12> 'String::memo_t *const' lvalue .memo 0x55fb1f4b2158
| |     `-DeclRefExpr 0x55fb1f4bac80 <col:12> 'const String::rep_t' lvalue ParmVar 0x55fb1f4b8408 '' 'const String::rep_t &'
| `-CompoundStmt 0x55fb1f4bad28 <col:12>
|-CXXConstructorDecl 0x55fb1f4b84a8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55fb1f4b84a8
| `-ParmVarDecl 0x55fb1f4b85b8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55fb1f4bdb10 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55fb1f4c9528 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55fb1f4c9638 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55fb1f4c9b50 <col:12>
|   |-BinaryOperator 0x55fb1f4c9968 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55fb1f4c9920 <col:12> 'const char *' lvalue ->data 0x55fb1f4b2060
|   | | `-CXXThisExpr 0x55fb1f4c9910 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55fb1f4c9950 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55fb1f4c98e0 <col:12> 'const char *const' lvalue .data 0x55fb1f4b2060
|   |     `-DeclRefExpr 0x55fb1f4c98c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55fb1f4c9638 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55fb1f4c9a30 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55fb1f4c99e8 <col:12> 'int' lvalue ->length 0x55fb1f4b20c8
|   | | `-CXXThisExpr 0x55fb1f4c99d8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55fb1f4c9a18 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55fb1f4c99a8 <col:12> 'const int' lvalue .length 0x55fb1f4b20c8
|   |     `-DeclRefExpr 0x55fb1f4c9988 <col:12> 'const String::rep_t' lvalue ParmVar 0x55fb1f4c9638 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55fb1f4c9af8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55fb1f4c9ab0 <col:12> 'String::memo_t *' lvalue ->memo 0x55fb1f4b2158
|   | | `-CXXThisExpr 0x55fb1f4c9aa0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55fb1f4c9ae0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55fb1f4c9a70 <col:12> 'String::memo_t *const' lvalue .memo 0x55fb1f4b2158
|   |     `-DeclRefExpr 0x55fb1f4c9a50 <col:12> 'const String::rep_t' lvalue ParmVar 0x55fb1f4c9638 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55fb1f4c9b40 <col:12>
|     `-UnaryOperator 0x55fb1f4c9b28 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55fb1f4c9b18 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55fb1f4c96a8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55fb1f4c96a8
  `-ParmVarDecl 0x55fb1f4c97b8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55fb1f4a8de0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55fb1f4a8ef8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55fb1f4a8f88 <col:16, col:22> col:16 public
|-TypedefDecl 0x55fb1f4a8fc8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55fb1f17bdc0 'const char *'
|   `-QualType 0x55fb1f17b311 'const char' const
|     `-BuiltinType 0x55fb1f17b310 'char'
|-TypedefDecl 0x55fb1f4a9050 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55fb1f4a9020 'String::const_iterator' sugar
|   |-Typedef 0x55fb1f4a8fc8 'const_iterator'
|   `-PointerType 0x55fb1f17bdc0 'const char *'
|     `-QualType 0x55fb1f17b311 'const char' const
|       `-BuiltinType 0x55fb1f17b310 'char'
|-TypedefDecl 0x55fb1f4a91c0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55fb1f4a9130 'int (String::*)() const'
|   |-RecordType 0x55fb1f4a8e70 'String'
|   | `-CXXRecord 0x55fb1f4a8de0 'String'
|   `-ParenType 0x55fb1f4a90d0 'int () const' sugar
|     `-FunctionProtoType 0x55fb1f47cc60 'int () const' const cdecl
|       `-BuiltinType 0x55fb1f17b370 'int'
|-TypedefDecl 0x55fb1f4a9228 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55fb1f2d1840 'int64_t' sugar
|   |-Typedef 0x55fb1f1e42d0 'int64_t'
|   `-TypedefType 0x55fb1f1bd4d0 '__int64_t' sugar
|     |-Typedef 0x55fb1f1bd0a8 '__int64_t'
|     `-BuiltinType 0x55fb1f17b390 'long'
|-TypedefDecl 0x55fb1f4a9290 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55fb1f2d1760 'uint64_t' sugar
|   |-Typedef 0x55fb1f1e4470 'uint64_t'
|   `-TypedefType 0x55fb1f1bd560 '__uint64_t' sugar
|     |-Typedef 0x55fb1f1bd118 '__uint64_t'
|     `-BuiltinType 0x55fb1f17b430 'unsigned long'
|-TypedefDecl 0x55fb1f4a9320 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55fb1f4a92f0 'String::intmax_t' sugar
|   |-Typedef 0x55fb1f4a9228 'intmax_t'
|   `-TypedefType 0x55fb1f2d1840 'int64_t' sugar
|     |-Typedef 0x55fb1f1e42d0 'int64_t'
|     `-TypedefType 0x55fb1f1bd4d0 '__int64_t' sugar
|       |-Typedef 0x55fb1f1bd0a8 '__int64_t'
|       `-BuiltinType 0x55fb1f17b390 'long'
|-TypedefDecl 0x55fb1f4a93b0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55fb1f4a9380 'String::uintmax_t' sugar
|   |-Typedef 0x55fb1f4a9290 'uintmax_t'
|   `-TypedefType 0x55fb1f2d1760 'uint64_t' sugar
|     |-Typedef 0x55fb1f1e4470 'uint64_t'
|     `-TypedefType 0x55fb1f1bd560 '__uint64_t' sugar
|       |-Typedef 0x55fb1f1bd118 '__uint64_t'
|       `-BuiltinType 0x55fb1f17b430 'unsigned long'
|-CXXConstructorDecl 0x55fb1f4a9470 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55fb1f4a9618 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55fb1f4a9558 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55fb1f4a97c8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55fb1f4a9708 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55fb1f4a9920 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55fb1f4a9890 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55fb1f4a9b38 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55fb1f4a99e8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55fb1f4a9a68 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55fb1f4a9d58 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55fb1f4a9c08 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55fb1f4a9c88 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55fb1f4a9f78 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55fb1f4a9e28 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55fb1f4a9ea8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55fb1f4aa198 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55fb1f4aa048 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55fb1f4aa0c8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55fb1f4aa328 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55fb1f4aa260 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55fb1f4aa4a8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55fb1f4aa3e8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55fb1f4aa638 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55fb1f4aa570 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55fb1f4aa790 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55fb1f4aa700 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55fb1f4aa8e8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55fb1f4aa858 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55fb1f4aaa40 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55fb1f4aa9b0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55fb1f4aabc8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55fb1f4aab08 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55fb1f4aad58 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55fb1f4aac90 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55fb1f4aaee8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55fb1f4aae20 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55fb1f4ab078 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55fb1f4aafb0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55fb1f4ab170 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55fb1f4ab298 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55fb1f4ab418 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55fb1f4ab350 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55fb1f4ab568 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55fb1f4ab4d8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55fb1f4ab620 <col:63> "" ""
|-CXXMethodDecl 0x55fb1f4ab768 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55fb1f4ab6a8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55fb1f4ab978 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55fb1f4ab828 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55fb1f4ab8a8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55fb1f4abb98 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55fb1f4aba40 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55fb1f4abac0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55fb1f4abe78 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55fb1f4abc58 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55fb1f4abcd8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55fb1f4b7cc0 <col:55> 'int' 10
| `-ParmVarDecl 0x55fb1f4abd50 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55fb1f4b7ce0 <col:76> 'bool' true
|-CXXMethodDecl 0x55fb1f4ac158 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55fb1f4abf40 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55fb1f4abfc0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55fb1f4b7cf0 <col:56> 'int' 10
| `-ParmVarDecl 0x55fb1f4ac038 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55fb1f4b7d10 <col:77> 'bool' true
|-CXXMethodDecl 0x55fb1f4ac260 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55fb1f4ac328 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55fb1f4ac3f0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55fb1f4ac490 <col:20>
| `-OptimizeNoneAttr 0x55fb1f4ac4e8 <col:30>
|-CXXConversionDecl 0x55fb1f4ac5d8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55fb1f4ac6a8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55fb1f4ac768 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55fb1f4ac858 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55fb1f4ac918 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55fb1f4aca98 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55fb1f4ac9d0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55fb1f4acbe8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55fb1f4acb58 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55fb1f4accd8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55fb1f4acd98 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55fb1f4acfe8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55fb1f4ace50 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55fb1f4aced0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55fb1f4ad248 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55fb1f4ad0b0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55fb1f4ad130 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55fb1f4ad318 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55fb1f4ad528 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55fb1f4ad3d0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55fb1f4ad450 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55fb1f4ad748 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55fb1f4ad5f0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55fb1f4ad670 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55fb1f4ad8d8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55fb1f4ad810 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55fb1f4ad9c8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55fb1f4adb38 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55fb1f4ada78 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55fb1f4add48 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55fb1f4adbf8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55fb1f4adc78 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55fb1f4adf60 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55fb1f4ade08 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55fb1f4ade80 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55fb1f4ae0f0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55fb1f4ae020 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55fb1f4ae310 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55fb1f4ae1b0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55fb1f4ae230 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55fb1f4ae460 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55fb1f4ae3d0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55fb1f4ae638 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55fb1f4ae520 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55fb1f4ae5a0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55fb1f4ae788 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55fb1f4ae6f8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55fb1f4ae9a0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55fb1f4ae840 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55fb1f4ae8c0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55fb1f4b7d20 <col:39> 'int' 0
|-CXXMethodDecl 0x55fb1f4aebc0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55fb1f4aea60 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55fb1f4aeae0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55fb1f4b7d40 <col:48> 'int' 0
|-CXXMethodDecl 0x55fb1f4aeda0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55fb1f4aec80 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55fb1f4aed00 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55fb1f4b7d60 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55fb1f4aee70 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55fb1f4aef30 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55fb1f4aeff0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55fb1f4af0b0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55fb1f4af170 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55fb1f4af318 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55fb1f4af220 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55fb1f4af498 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55fb1f4af3d0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55fb1f4af670 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55fb1f4af558 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55fb1f4af7e8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55fb1f4af728 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55fb1f4af930 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55fb1f4af8a0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55fb1f4afa80 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55fb1f4af9f0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55fb1f4afc58 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55fb1f4afb40 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55fb1f4afbc0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55fb1f4afe38 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55fb1f4afd20 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55fb1f4afda0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55fb1f4aff88 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55fb1f4afef8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55fb1f4b0198 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55fb1f4b0048 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55fb1f4b00c8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55fb1f4b02f8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55fb1f4b0260 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55fb1f4b0450 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55fb1f4b03b8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55fb1f4b04f8 <col:57> "" ""
|-CXXMethodDecl 0x55fb1f4b0608 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55fb1f4b0578 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55fb1f4b0758 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55fb1f4b06c8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55fb1f4b08d8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55fb1f4b0810 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55fb1f4b09a0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55fb1f4b0a60 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55fb1f4b0b20 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55fb1f4b0bc0 <col:49> "" ""
|-CXXMethodDecl 0x55fb1f4b0c50 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55fb1f4b0d10 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55fb1f4b0e00 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55fb1f4b0ec8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55fb1f4b0f88 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55fb1f4b1048 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55fb1f4b1140 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55fb1f4b1208 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55fb1f4b12d0 <line:174:5, col:42> col:31 used empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55fb1f4b14a8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55fb1f4b1388 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55fb1f4b1408 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55fb1f4b16d0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55fb1f4b1570 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55fb1f4b15f0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55fb1f4b17e0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55fb1f4b1848 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55fb1f4b1870 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55fb1f4b1988 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55fb1f4b1a28 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55fb1f4b1a88 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55fb1f4b1ae8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55fb1f4b1b98 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55fb1f4b1c00 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55fb1f4b1e38 <line:201:2, col:32> col:2 referenced MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55fb1f4b1e88 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55fb1f4b1e18 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55fb1f4b1d28 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55fb1f4b1cd0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55fb1f4b1d10 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55fb1f4b1cf0 <col:32> 'int' 8
|-CXXRecordDecl 0x55fb1f4b1ea0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55fb1f4b1fb8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55fb1f4b2060 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55fb1f4b20c8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55fb1f4b2158 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55fb1f4b81f0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55fb1f4b8628 <col:12>
| |-CXXConstructorDecl 0x55fb1f4b82f8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55fb1f4b8408 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55fb1f4b2060 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55fb1f4babb0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55fb1f4bab80 <col:12> 'const char *const' lvalue .data 0x55fb1f4b2060
| | |     `-DeclRefExpr 0x55fb1f4bab60 <col:12> 'const String::rep_t' lvalue ParmVar 0x55fb1f4b8408 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55fb1f4b20c8 'length' 'int'
| | | `-ImplicitCastExpr 0x55fb1f4bac40 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55fb1f4bac10 <col:12> 'const int' lvalue .length 0x55fb1f4b20c8
| | |     `-DeclRefExpr 0x55fb1f4babf0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55fb1f4b8408 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55fb1f4b2158 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55fb1f4bacd0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55fb1f4baca0 <col:12> 'String::memo_t *const' lvalue .memo 0x55fb1f4b2158
| | |     `-DeclRefExpr 0x55fb1f4bac80 <col:12> 'const String::rep_t' lvalue ParmVar 0x55fb1f4b8408 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55fb1f4bad28 <col:12>
| |-CXXConstructorDecl 0x55fb1f4b84a8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55fb1f4b84a8
| | `-ParmVarDecl 0x55fb1f4b85b8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55fb1f4bdb10 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55fb1f4c9528 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55fb1f4c9638 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55fb1f4c9b50 <col:12>
| |   |-BinaryOperator 0x55fb1f4c9968 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55fb1f4c9920 <col:12> 'const char *' lvalue ->data 0x55fb1f4b2060
| |   | | `-CXXThisExpr 0x55fb1f4c9910 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55fb1f4c9950 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55fb1f4c98e0 <col:12> 'const char *const' lvalue .data 0x55fb1f4b2060
| |   |     `-DeclRefExpr 0x55fb1f4c98c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55fb1f4c9638 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55fb1f4c9a30 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55fb1f4c99e8 <col:12> 'int' lvalue ->length 0x55fb1f4b20c8
| |   | | `-CXXThisExpr 0x55fb1f4c99d8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55fb1f4c9a18 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55fb1f4c99a8 <col:12> 'const int' lvalue .length 0x55fb1f4b20c8
| |   |     `-DeclRefExpr 0x55fb1f4c9988 <col:12> 'const String::rep_t' lvalue ParmVar 0x55fb1f4c9638 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55fb1f4c9af8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55fb1f4c9ab0 <col:12> 'String::memo_t *' lvalue ->memo 0x55fb1f4b2158
| |   | | `-CXXThisExpr 0x55fb1f4c9aa0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55fb1f4c9ae0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55fb1f4c9a70 <col:12> 'String::memo_t *const' lvalue .memo 0x55fb1f4b2158
| |   |     `-DeclRefExpr 0x55fb1f4c9a50 <col:12> 'const String::rep_t' lvalue ParmVar 0x55fb1f4c9638 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55fb1f4c9b40 <col:12>
| |     `-UnaryOperator 0x55fb1f4c9b28 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55fb1f4c9b18 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55fb1f4c96a8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55fb1f4c96a8
|   `-ParmVarDecl 0x55fb1f4c97b8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55fb1f4b21d0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55fb1f4b2418 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55fb1f4b2238 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55fb1f4b22b8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55fb1f4b2330 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55fb1f4b81b0 <col:79, line:261:5>
|   |-BinaryOperator 0x55fb1f4b7e28 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55fb1f4b7dc0 <col:2, col:5> 'const char *' lvalue .data 0x55fb1f4b2060
|   | | `-MemberExpr 0x55fb1f4b7d90 <col:2> 'String::rep_t' lvalue ->_r 0x55fb1f4b21d0
|   | |   `-CXXThisExpr 0x55fb1f4b7d80 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55fb1f4b7e10 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55fb1f4b7df0 <col:12> 'const char *' lvalue ParmVar 0x55fb1f4b2238 'data' 'const char *'
|   |-BinaryOperator 0x55fb1f4b7ef0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55fb1f4b7e88 <col:2, col:5> 'int' lvalue .length 0x55fb1f4b20c8
|   | | `-MemberExpr 0x55fb1f4b7e58 <col:2> 'String::rep_t' lvalue ->_r 0x55fb1f4b21d0
|   | |   `-CXXThisExpr 0x55fb1f4b7e48 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55fb1f4b7ed8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55fb1f4b7eb8 <col:14> 'int' lvalue ParmVar 0x55fb1f4b22b8 'length' 'int'
|   `-IfStmt 0x55fb1f4b8198 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55fb1f4b8010 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55fb1f4b7ff8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55fb1f4b7fd8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55fb1f4b7fb8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55fb1f4b7f50 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55fb1f4b2158
|     |       | `-MemberExpr 0x55fb1f4b7f20 <col:7> 'String::rep_t' lvalue ->_r 0x55fb1f4b21d0
|     |       |   `-CXXThisExpr 0x55fb1f4b7f10 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55fb1f4b7fa0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55fb1f4b7f80 <col:17> 'String::memo_t *' lvalue ParmVar 0x55fb1f4b2330 'memo' 'String::memo_t *'
|     `-CallExpr 0x55fb1f4b8170 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55fb1f4b8158 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55fb1f4b8060 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55fb1f4a0e48 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55fb1f4b80c8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55fb1f4b1a28
|         `-ImplicitCastExpr 0x55fb1f4b80b0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55fb1f4b8090 <col:27> 'String::memo_t *' lvalue ParmVar 0x55fb1f4b2330 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55fb1f4b26c8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55fb1f4b24e8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55fb1f4b2568 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55fb1f4b25e0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55fb1f4b21d0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55fb1f4b8638 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55fb1f4b87c8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55fb1f4b8730 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55fb1f4b86a0 <col:2> '<bound member function type>' ->assign_memo 0x55fb1f4b2418
|     | `-ImplicitCastExpr 0x55fb1f4b8768 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55fb1f4b8690 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55fb1f4b8780 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55fb1f4b86d0 <col:14> 'const char *' lvalue ParmVar 0x55fb1f4b24e8 'data' 'const char *'
|     |-ImplicitCastExpr 0x55fb1f4b8798 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55fb1f4b86f0 <col:20> 'int' lvalue ParmVar 0x55fb1f4b2568 'length' 'int'
|     `-ImplicitCastExpr 0x55fb1f4b87b0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55fb1f4b8710 <col:28> 'String::memo_t *' lvalue ParmVar 0x55fb1f4b25e0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55fb1f4b2858 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55fb1f4b2798 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55fb1f4b8a20 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55fb1f4b89a0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55fb1f4b87f0 <col:2> '<bound member function type>' ->assign_memo 0x55fb1f4b2418
|     | `-CXXThisExpr 0x55fb1f4b87e0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55fb1f4b89d8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55fb1f4b8870 <col:14, col:19> 'const char *' lvalue .data 0x55fb1f4b2060
|     |   `-MemberExpr 0x55fb1f4b8840 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55fb1f4b21d0
|     |     `-DeclRefExpr 0x55fb1f4b8820 <col:14> 'const String' lvalue ParmVar 0x55fb1f4b2798 'x' 'const String &'
|     |-ImplicitCastExpr 0x55fb1f4b89f0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55fb1f4b88f0 <col:25, col:30> 'int' lvalue .length 0x55fb1f4b20c8
|     |   `-MemberExpr 0x55fb1f4b88c0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55fb1f4b21d0
|     |     `-DeclRefExpr 0x55fb1f4b88a0 <col:25> 'const String' lvalue ParmVar 0x55fb1f4b2798 'x' 'const String &'
|     `-ImplicitCastExpr 0x55fb1f4b8a08 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55fb1f4b8970 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55fb1f4b2158
|         `-MemberExpr 0x55fb1f4b8940 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55fb1f4b21d0
|           `-DeclRefExpr 0x55fb1f4b8920 <col:38> 'const String' lvalue ParmVar 0x55fb1f4b2798 'x' 'const String &'
|-CXXMethodDecl 0x55fb1f4b2920 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55fb1f4b93e0 <col:31, line:278:5>
|   `-IfStmt 0x55fb1f4b93c8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55fb1f4b8ac0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55fb1f4b8aa8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55fb1f4b8a78 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55fb1f4b2158
|     |     `-MemberExpr 0x55fb1f4b8a48 <col:6> 'String::rep_t' lvalue ->_r 0x55fb1f4b21d0
|     |       `-CXXThisExpr 0x55fb1f4b8a38 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55fb1f4b93a0 <col:15, line:277:2>
|       |-ParenExpr 0x55fb1f4b8f70 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55fb1f4b8f40 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55fb1f4b8bd0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55fb1f4b8bb8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55fb1f4b8ba0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55fb1f4b8b60 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55fb1f4b1a28
|       |   |       `-ImplicitCastExpr 0x55fb1f4b8b48 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55fb1f4b8b18 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55fb1f4b2158
|       |   |           `-MemberExpr 0x55fb1f4b8ae8 <col:27> 'String::rep_t' lvalue ->_r 0x55fb1f4b21d0
|       |   |             `-CXXThisExpr 0x55fb1f4b8ad8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55fb1f4b8c30 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55fb1f4b8c10 <col:54> 'int' 0
|       |   `-CallExpr 0x55fb1f4b8ea0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55fb1f4b8e88 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55fb1f4b8e08 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55fb1f2180a0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55fb1f4b8ee0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55fb1f4b8d18 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55fb1f4b8ef8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55fb1f4b8d48 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55fb1f4b8f10 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55fb1f4b8d80 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55fb1f4b8f28 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55fb1f4b8df0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55fb1f4b8dd8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55fb1f4b8da0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55fb1f4b92c0 <line:274:6, line:275:22>
|       | |-CallExpr 0x55fb1f4b9180 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55fb1f4b9168 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55fb1f4b90e0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55fb1f4a2290 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55fb1f4b90b0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55fb1f4b1a28
|       | |   `-ImplicitCastExpr 0x55fb1f4b9098 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55fb1f4b9068 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55fb1f4b2158
|       | |       `-MemberExpr 0x55fb1f4b9038 <col:40> 'String::rep_t' lvalue ->_r 0x55fb1f4b21d0
|       | |         `-CXXThisExpr 0x55fb1f4b9028 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55fb1f4b9280 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55fb1f4b9268 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55fb1f4b91a8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55fb1f4b7100 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55fb1f4b92a8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55fb1f4b9208 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55fb1f4b2158
|       |       `-MemberExpr 0x55fb1f4b91d8 <col:15> 'String::rep_t' lvalue ->_r 0x55fb1f4b21d0
|       |         `-CXXThisExpr 0x55fb1f4b91c8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55fb1f4b9380 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55fb1f4b9318 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55fb1f4b2158
|         | `-MemberExpr 0x55fb1f4b92e8 <col:6> 'String::rep_t' lvalue ->_r 0x55fb1f4b21d0
|         |   `-CXXThisExpr 0x55fb1f4b92d8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55fb1f4b9368 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55fb1f4b9348 <col:16> 'int' 0
|-CXXMethodDecl 0x55fb1f4b2bb8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55fb1f4b29d8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55fb1f4b2a58 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55fb1f4b2ad0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55fb1f4b2c90 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55fb1f4b2ee0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55fb1f4b2d48 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55fb1f4b2dc8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55fb1f4b2e40 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55fb1f4b30c8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55fb1f4b2fb0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55fb1f4b3030 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55fb1f4b31c8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55fb1f4b94b8 <col:41, line:286:5>
|   `-ReturnStmt 0x55fb1f4b94a8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55fb1f4b9478 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55fb1f4b9440 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55fb1f4b9428 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55fb1f4b9408 <col:46> 'int' 1
|-CXXMethodDecl 0x55fb1f4b3468 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55fb1f4b3280 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55fb1f4b3300 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55fb1f4b3380 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55fb1f4b7100 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55fb1f4b3530 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55fb1f4b71d0 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55fb1f4b73a0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55fb1f4b7288 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55fb1f4b7308 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55fb1f4b7460 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55fb1f4b7528 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55fb1f4b7628 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55fb1f4b76a0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55fb1f4b7718 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55fb1f4b7780 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55fb1f4b7880 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55fb1f4b78d0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55fb1f4b7860 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55fb1f4b7840 <col:22> 'int' 14
|-CXXMethodDecl 0x55fb1f4b7ae8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55fb1f4b7900 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55fb1f4b7980 <col:38> col:41 'int'
| `-ParmVarDecl 0x55fb1f4b7a00 <col:43> col:46 'int'
|-FriendDecl 0x55fb1f4b7bf0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55fb1f4b7c80 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55fb1f727c20 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55fb1f727df8 prev 0x55fb1f727c20 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55fb1f727e88 <col:46, col:52> col:46 public
|-TypedefDecl 0x55fb1f727eb0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55fb1f17b370 'int'
|-TypedefDecl 0x55fb1f729850 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55fb1f729800 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55fb1f7297e0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55fb1f7280c8 'type'
|     `-SubstTemplateTypeParmType 0x55fb1f728090 'String' sugar
|       |-TemplateTypeParmType 0x55fb1f46c680 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55fb1f46c630 'T'
|       `-RecordType 0x55fb1f4a8e70 'String'
|         `-CXXRecord 0x55fb1f4a8de0 'String'
|-TypedefDecl 0x55fb1f729908 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55fb1f7298d0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55fb1f7298b0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55fb1f729850 'type'
|     `-ElaboratedType 0x55fb1f729800 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55fb1f7297e0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55fb1f7280c8 'type'
|         `-SubstTemplateTypeParmType 0x55fb1f728090 'String' sugar
|           |-TemplateTypeParmType 0x55fb1f46c680 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55fb1f46c630 'T'
|           `-RecordType 0x55fb1f4a8e70 'String'
|             `-CXXRecord 0x55fb1f4a8de0 'String'
|-CXXMethodDecl 0x55fb1f729a88 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55fb1f729998 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55fb1f729b78 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55fb1f729c58 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55fb1f729c58
|-CXXMethodDecl 0x55fb1f729f28 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55fb1f729e30 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55fb1f72a168 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55fb1f729fe0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55fb1f72a058 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55fb1f72a338 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55fb1f72a228 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55fb1f72a2a0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55fb1f72a498 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55fb1f72a568 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55fb1f72a7b8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55fb1f72a628 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55fb1f72a6a0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55fb1f72aa18 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55fb1f72a888 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55fb1f72a900 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55fb1f72abd8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55fb1f72aae8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55fb1f72ad98 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55fb1f72aca0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55fb1f72ae50 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55fb1f72af00 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55fb1f72b138 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55fb1f72afb0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55fb1f72b028 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55fb1f72b3d8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55fb1f72b2e0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55fb1f72b4a0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55fb1f72b4f0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55fb1f72b540 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55fb1f6e0610 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55fb1f726688 prev 0x55fb1f6e0610 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55fb1f727b90 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55fb1f727b40 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55fb1f727b20 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55fb1f7279d0 'type'
|     `-SubstTemplateTypeParmType 0x55fb1f727860 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55fb1f442430 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55fb1f4423d8 'F'
|       `-RecordType 0x55fb1f7274c0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55fb1f7273e0 'typed_array_memory'
|-FieldDecl 0x55fb1f72b590 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55fb1f72b5e0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55fb1f72b618 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55fb1f726720 'String' sugar
|   |-TemplateTypeParmType 0x55fb1f4799a0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55fb1f479948 'T'
|   `-RecordType 0x55fb1f4a8e70 'String'
|     `-CXXRecord 0x55fb1f4a8de0 'String'
|-TypedefDecl 0x55fb1f72b6a8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55fb1f72b670 'String &'
|   `-SubstTemplateTypeParmType 0x55fb1f726720 'String' sugar
|     |-TemplateTypeParmType 0x55fb1f4799a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55fb1f479948 'T'
|     `-RecordType 0x55fb1f4a8e70 'String'
|       `-CXXRecord 0x55fb1f4a8de0 'String'
|-TypedefDecl 0x55fb1f72b738 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55fb1f72b700 'const String &'
|   `-QualType 0x55fb1f726721 'const String' const
|     `-SubstTemplateTypeParmType 0x55fb1f726720 'String' sugar
|       |-TemplateTypeParmType 0x55fb1f4799a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55fb1f479948 'T'
|       `-RecordType 0x55fb1f4a8e70 'String'
|         `-CXXRecord 0x55fb1f4a8de0 'String'
|-TypedefDecl 0x55fb1f72b7c8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55fb1f72b790 'String *'
|   `-SubstTemplateTypeParmType 0x55fb1f726720 'String' sugar
|     |-TemplateTypeParmType 0x55fb1f4799a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55fb1f479948 'T'
|     `-RecordType 0x55fb1f4a8e70 'String'
|       `-CXXRecord 0x55fb1f4a8de0 'String'
|-TypedefDecl 0x55fb1f72b858 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55fb1f72b820 'const String *'
|   `-QualType 0x55fb1f726721 'const String' const
|     `-SubstTemplateTypeParmType 0x55fb1f726720 'String' sugar
|       |-TemplateTypeParmType 0x55fb1f4799a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55fb1f479948 'T'
|       `-RecordType 0x55fb1f4a8e70 'String'
|         `-CXXRecord 0x55fb1f4a8de0 'String'
|-TypedefDecl 0x55fb1f72c4b0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55fb1f72c460 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55fb1f72c440 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55fb1f72c378 'type'
|     `-LValueReferenceType 0x55fb1f72c340 'const String &'
|       `-QualType 0x55fb1f72c0e1 'const String' const
|         `-SubstTemplateTypeParmType 0x55fb1f72c0e0 'String' sugar
|           |-TemplateTypeParmType 0x55fb1f44c380 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55fb1f44c328 'T'
|           `-RecordType 0x55fb1f4a8e70 'String'
|             `-CXXRecord 0x55fb1f4a8de0 'String'
|-TypedefDecl 0x55fb1f72c518 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55fb1f72b700 'const String &'
|   `-QualType 0x55fb1f726721 'const String' const
|     `-SubstTemplateTypeParmType 0x55fb1f726720 'String' sugar
|       |-TemplateTypeParmType 0x55fb1f4799a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55fb1f479948 'T'
|       `-RecordType 0x55fb1f4a8e70 'String'
|         `-CXXRecord 0x55fb1f4a8de0 'String'
|-TypedefDecl 0x55fb1f72c570 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55fb1f17b370 'int'
|-TypedefDecl 0x55fb1f72c5d8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55fb1f72b790 'String *'
|   `-SubstTemplateTypeParmType 0x55fb1f726720 'String' sugar
|     |-TemplateTypeParmType 0x55fb1f4799a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55fb1f479948 'T'
|     `-RecordType 0x55fb1f4a8e70 'String'
|       `-CXXRecord 0x55fb1f4a8de0 'String'
|-TypedefDecl 0x55fb1f72c640 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55fb1f72b820 'const String *'
|   `-QualType 0x55fb1f726721 'const String' const
|     `-SubstTemplateTypeParmType 0x55fb1f726720 'String' sugar
|       |-TemplateTypeParmType 0x55fb1f4799a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55fb1f479948 'T'
|       `-RecordType 0x55fb1f4a8e70 'String'
|         `-CXXRecord 0x55fb1f4a8de0 'String'
|-EnumDecl 0x55fb1f72c698 <line:134:5> col:5
| `-EnumConstantDecl 0x55fb1f72c790 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55fb1f72c770 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55fb1f47b028 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55fb1f47b000 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55fb1f47afe0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55fb1f72c818 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55fb1f72caa8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55fb1f72c8d0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55fb1f72c970 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55fb1f72cd38 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55fb1f72cc20 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55fb1f72cff8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55fb1f72cee0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55fb1f72d310 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55fb1f72d1f0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55fb1f72d620 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55fb1f72d500 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55fb1f72d910 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55fb1f72d758 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55fb1f72d7d0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55fb1f72da38 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55fb1f72dae8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55fb1f72db40 <col:30> Inherited
|-CXXMethodDecl 0x55fb1f72db88 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55fb1f72dc38 <col:20> Inherited
| `-OptimizeNoneAttr 0x55fb1f72dc90 <col:30> Inherited
|-CXXMethodDecl 0x55fb1f72dd58 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55fb1f72de08 <col:20> Inherited
| `-OptimizeNoneAttr 0x55fb1f72de60 <col:30> Inherited
|-CXXMethodDecl 0x55fb1f72dea8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55fb1f72df58 <col:20> Inherited
| `-OptimizeNoneAttr 0x55fb1f72dfb0 <col:30> Inherited
|-CXXMethodDecl 0x55fb1f72dff8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55fb1f72e0a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55fb1f72e100 <col:30> Inherited
|-CXXMethodDecl 0x55fb1f72e148 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55fb1f72e1f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55fb1f72e250 <col:30> Inherited
|-CXXMethodDecl 0x55fb1f72e278 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55fb1f72e328 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55fb1f72e3d8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55fb1f72e598 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55fb1f72e488 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55fb1f72e500 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55fb1f72e6e8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55fb1f72e658 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55fb1f72e898 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55fb1f72e7a0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55fb1f72e950 <col:20>
| `-OptimizeNoneAttr 0x55fb1f72e9a8 <col:30>
|-CXXMethodDecl 0x55fb1f72eac8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55fb1f72e9d0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55fb1f72eb80 <col:20>
| `-OptimizeNoneAttr 0x55fb1f72ebd8 <col:30>
|-CXXMethodDecl 0x55fb1f72ec90 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55fb1f72ec00 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55fb1f72edd8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55fb1f72ed48 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55fb1f72ef08 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55fb1f72f008 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55fb1f72f0d8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55fb1f72f1a8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55fb1f72f2e8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55fb1f72f258 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55fb1f72f430 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55fb1f72f3a0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55fb1f72f578 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55fb1f72f4e8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55fb1f72f630 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55fb1f72f730 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55fb1f72f6a0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55fb1f72f7e8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55fb1f72f8a8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55fb1f72f9a8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55fb1f72fb28 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55fb1f72fa68 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55fb1f7302e8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55fb1f72fbe0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55fb1f730248 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55fb1f730148 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55fb1f7303c8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55fb1f730540 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55fb1f730488 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55fb1f7305f8 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55fb1f730848 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55fb1f7306b8 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55fb1f730730 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55fb1f7309d8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55fb1f730918 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55fb1f730be8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55fb1f730aa0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55fb1f730b18 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55fb1f730ca8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55fb1f730f08 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55fb1f730e10 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55fb1f730fd8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55fb1f730fd8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55fb1f7b2098 prev 0x55fb1f6601c8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55fb1f7b2190 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55fb1f7b2220 <col:22, col:28> col:22 public
|-EnumDecl 0x55fb1f7b2248 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55fb1f7b2368 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55fb1f7b2348 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55fb1f7b2330 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55fb1f7b2310 <col:14> 'int' 999
| |-EnumConstantDecl 0x55fb1f7b2410 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55fb1f7b23f0 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55fb1f7b23d8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55fb1f7b23b8 <col:14> 'int' 1
| |-EnumConstantDecl 0x55fb1f7b24a0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55fb1f7b2480 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55fb1f7b2460 <col:17> 'int' 0
| |-EnumConstantDecl 0x55fb1f7b2530 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55fb1f7b2510 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55fb1f7b24f0 <col:13> 'int' 1
| |-EnumConstantDecl 0x55fb1f7b25c0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55fb1f7b25a0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55fb1f7b2580 <col:16> 'int' 2
| |-EnumConstantDecl 0x55fb1f7b2650 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55fb1f7b2630 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55fb1f7b2610 <col:13> 'int' 3
| |-EnumConstantDecl 0x55fb1f7b26e0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55fb1f7b26c0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55fb1f7b26a0 <col:15> 'int' 4
| |-EnumConstantDecl 0x55fb1f7b2770 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55fb1f7b2750 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55fb1f7b2730 <col:14> 'int' 5
| |-EnumConstantDecl 0x55fb1f7b2800 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55fb1f7b27e0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55fb1f7b27c0 <col:12> 'int' 6
| `-EnumConstantDecl 0x55fb1f7b2890 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55fb1f7b2870 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55fb1f7b2850 <col:13> 'int' 7
|-VarDecl 0x55fb1f7b2900 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55fb1f7b2988 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55fb1f7b2a10 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55fb1f7b2a98 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55fb1f7b2b20 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55fb1f7b2ba8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55fb1f7b2c30 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55fb1f7b2cb8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55fb1f7b2d40 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55fb1f7b2dc8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55fb1f7b2e50 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55fb1f7b2f50 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55fb1f7b8278 '_nerrors' 'int'
| | `-IntegerLiteral 0x55fb1f7b8a08 <line:128:13> 'int' 0
| `-CompoundStmt 0x55fb1f7b8a78 <col:16, line:129:5>
|-CXXDestructorDecl 0x55fb1f7b3040 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55fb1f7b8a88 <col:29, line:132:5>
|-CXXMethodDecl 0x55fb1f7b31f8 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55fb1f7b3130 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55fb1f7b32c0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55fb1f7b33a8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55fb1f7b8ae0 <col:44, line:161:5>
|   `-ReturnStmt 0x55fb1f7b8ad0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55fb1f7b8ab8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55fb1f7b8a98 <col:9> 'ErrorHandler *' lvalue Var 0x55fb1f7b82d8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55fb1f7b34e8 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55fb1f7b3458 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55fb1f7b35b0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55fb1f7b8b40 <col:43, line:173:5>
|   `-ReturnStmt 0x55fb1f7b8b30 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55fb1f7b8b18 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55fb1f7b8af8 <col:9> 'ErrorHandler *' lvalue Var 0x55fb1f7b8350 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55fb1f7b3668 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55fb1f7b36e8 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55fb1f7b37f8 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55fb1f7b3768 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55fb1f7b3948 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55fb1f7b38b8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55fb1f7b3aa0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55fb1f7b3a08 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55fb1f7b3bf8 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x55fb1f7b3b60 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55fb1f7b3d50 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55fb1f7b3cb8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55fb1f7b3f60 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55fb1f7b3e08 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55fb1f7b3e88 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55fb1f7b4138 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55fb1f7b4020 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55fb1f7b40a0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55fb1f7b4358 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55fb1f7b41f8 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55fb1f7b4278 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55fb1f7b4538 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55fb1f7b4418 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55fb1f7b4498 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55fb1f7b4718 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55fb1f7b45f8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55fb1f7b4678 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55fb1f7b48a0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55fb1f7b47d8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55fb1f7b4a70 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55fb1f7b4958 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55fb1f7b49d0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55fb1f7b8d98 <col:57, line:234:5>
|   `-ReturnStmt 0x55fb1f7b8d88 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55fb1f7b8d70 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55fb1f7b8d18 <col:9, col:41> 'int'
|         |-MemberExpr 0x55fb1f7b8ce8 <col:9> '<bound member function type>' ->xmessage 0x55fb1f7b48a0
|         | `-CXXThisExpr 0x55fb1f7b8cd8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55fb1f7b8d58 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55fb1f7b8d40 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55fb1f7b8cb8 <col:18, col:40> 'String' (CXXTemporary 0x55fb1f7b8cb8)
|               `-CallExpr 0x55fb1f7b8c80 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55fb1f7b8c68 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55fb1f7b8be0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55fb1f7b6aa8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55fb1f7b8c00 <col:31> 'const String' lvalue ParmVar 0x55fb1f7b49d0 'str' 'const String &'
|                 `-DeclRefExpr 0x55fb1f7b8c20 <col:36> 'const String' lvalue ParmVar 0x55fb1f7b4958 'anno' 'const String &'
|-CXXMethodDecl 0x55fb1f7b4d50 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55fb1f7b4b30 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55fb1f7b4bb0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55fb1f7b4c28 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55fb1f7b9028 <col:68, line:243:5>
|   `-ReturnStmt 0x55fb1f7b9018 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55fb1f7b9000 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55fb1f7b8fa0 <col:9, col:41> 'int'
|         |-MemberExpr 0x55fb1f7b8f70 <col:9> '<bound member function type>' ->xmessage 0x55fb1f7b4a70
|         | `-CXXThisExpr 0x55fb1f7b8f60 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55fb1f7b8e38 <col:18> 'const String' lvalue ParmVar 0x55fb1f7b4b30 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55fb1f7b8fe8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55fb1f7b8fd0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55fb1f7b8f40 <col:24, col:40> 'String' (CXXTemporary 0x55fb1f7b8f40)
|               `-CXXMemberCallExpr 0x55fb1f7b8ed8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55fb1f7b8e68 <col:24> '<bound member function type>' ->vformat 0x55fb1f7b5f70
|                 | `-CXXThisExpr 0x55fb1f7b8e58 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55fb1f7b8f08 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55fb1f7b8e98 <col:32> 'const char *' lvalue ParmVar 0x55fb1f7b4bb0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55fb1f7b8f20 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55fb1f7b8eb8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55fb1f7b4c28 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55fb1f7b4ff0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55fb1f7b4e18 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55fb1f7b4e90 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55fb1f7b4f08 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55fb1f7b9368 <col:23, line:254:5>
|   `-ReturnStmt 0x55fb1f7b9358 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55fb1f7b9340 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55fb1f7b92e0 <col:9, col:71> 'int'
|         |-MemberExpr 0x55fb1f7b92b0 <col:9> '<bound member function type>' ->xmessage 0x55fb1f7b4a70
|         | `-CXXThisExpr 0x55fb1f7b92a0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55fb1f7b9328 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55fb1f7b9310 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55fb1f7b9260 <col:18, col:65> 'String' (CXXTemporary 0x55fb1f7b9260)
|         |     `-CallExpr 0x55fb1f7b91f8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55fb1f7b91e0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55fb1f7b90c8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55fb1f7b6aa8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55fb1f7b90e8 <col:31> 'const String' lvalue ParmVar 0x55fb1f7b4e90 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55fb1f7b9240 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55fb1f7b9228 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55fb1f7b91c0 <col:37, col:64> 'String' (CXXTemporary 0x55fb1f7b91c0)
|         |             `-CallExpr 0x55fb1f7b9190 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55fb1f7b9178 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55fb1f7b9108 <col:37> 'String (const String &)' lvalue CXXMethod 0x55fb1f7b70f8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55fb1f7b9128 <col:56> 'const String' lvalue ParmVar 0x55fb1f7b4e18 'landmark' 'const String &'
|         `-DeclRefExpr 0x55fb1f7b9280 <col:68> 'const String' lvalue ParmVar 0x55fb1f7b4f08 'str' 'const String &'
|-CXXMethodDecl 0x55fb1f7b5370 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55fb1f7b50b8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55fb1f7b5130 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55fb1f7b51b0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55fb1f7b5228 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55fb1f7b9620 <col:34, line:267:5>
|   `-ReturnStmt 0x55fb1f7b9610 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55fb1f7b95f8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55fb1f7b9590 <col:9, col:51> 'int'
|         |-MemberExpr 0x55fb1f7b9560 <col:9> '<bound member function type>' ->xmessage 0x55fb1f7b4ff0
|         | `-CXXThisExpr 0x55fb1f7b9550 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55fb1f7b9408 <col:18> 'const String' lvalue ParmVar 0x55fb1f7b50b8 'landmark' 'const String &'
|         |-DeclRefExpr 0x55fb1f7b9428 <col:28> 'const String' lvalue ParmVar 0x55fb1f7b5130 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55fb1f7b95e0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55fb1f7b95c8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55fb1f7b9530 <col:34, col:50> 'String' (CXXTemporary 0x55fb1f7b9530)
|               `-CXXMemberCallExpr 0x55fb1f7b94c8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55fb1f7b9458 <col:34> '<bound member function type>' ->vformat 0x55fb1f7b5f70
|                 | `-CXXThisExpr 0x55fb1f7b9448 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55fb1f7b94f8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55fb1f7b9488 <col:42> 'const char *' lvalue ParmVar 0x55fb1f7b51b0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55fb1f7b9510 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55fb1f7b94a8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55fb1f7b5228 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55fb1f7b5480 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55fb1f7b96a0 <col:25, line:288:5>
|   `-ReturnStmt 0x55fb1f7b9690 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55fb1f7b9678 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55fb1f7b9648 <col:9> 'const int' lvalue ->_nerrors 0x55fb1f7b8278
|         `-CXXThisExpr 0x55fb1f7b9638 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55fb1f7b5690 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55fb1f7b5538 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55fb1f7b55b8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55fb1f7b59b0 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55fb1f7b5758 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55fb1f7b57d8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55fb1f7b5850 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55fb1f7b5b50 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55fb1f7b5a80 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55fb1f7b5d98 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55fb1f7b5c10 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55fb1f7b5c88 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55fb1f7b9900 <col:58, line:357:5>
|   `-ReturnStmt 0x55fb1f7b98f0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55fb1f7b98d8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55fb1f7b98a8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55fb1f7b9890 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55fb1f7b9870 <col:9, col:29> 'String' (CXXTemporary 0x55fb1f7b9870)
|             `-CallExpr 0x55fb1f7b9800 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55fb1f7b97e8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55fb1f7b9768 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55fb1f7b59b0 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55fb1f7b9708 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55fb1f7b9838 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55fb1f7b9728 <col:21> 'const char *' lvalue ParmVar 0x55fb1f7b5c10 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55fb1f7b9850 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55fb1f7b9748 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55fb1f7b5c88 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55fb1f7b5f70 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55fb1f7b5e60 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55fb1f7b5ed8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55fb1f7b60c8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55fb1f7b6038 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55fb1f7b6210 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55fb1f7b6180 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55fb1f7b64b0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55fb1f7b62c8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55fb1f7b6348 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55fb1f7b63c0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55fb1f7b6610 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55fb1f7b6580 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55fb1f7b9a18 <col:37, line:441:5>
|   `-IfStmt 0x55fb1f7b9a00 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55fb1f7b9988 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55fb1f7b9958 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55fb1f7b9918 <col:6> 'int' lvalue ParmVar 0x55fb1f7b6580 'level' 'int'
|     | `-ImplicitCastExpr 0x55fb1f7b9970 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55fb1f7b9938 <col:15> 'ErrorHandler::Level' EnumConstant 0x55fb1f7b2650 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55fb1f7b99e8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55fb1f7b99b8 <col:8> 'int' lvalue ->_nerrors 0x55fb1f7b8278
|         `-CXXThisExpr 0x55fb1f7b99a8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55fb1f7b66d8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55fb1f7b9ab0 <col:26, line:448:5>
|   `-BinaryOperator 0x55fb1f7b9a90 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55fb1f7b9a40 <col:2> 'int' lvalue ->_nerrors 0x55fb1f7b8278
|     | `-CXXThisExpr 0x55fb1f7b9a30 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55fb1f7b9a70 <col:13> 'int' 0
|-CXXMethodDecl 0x55fb1f7b68a0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55fb1f7b6790 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55fb1f7b6808 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55fb1f7b6aa8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55fb1f7b6960 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55fb1f7b69d8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55fb1f7b6d58 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55fb1f7b6b68 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55fb1f7b6be8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55fb1f7b6c68 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55fb1f7b6e10 <col:59> 0 0
|-CXXMethodDecl 0x55fb1f7b6fa8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55fb1f7b6e88 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55fb1f7b6f08 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55fb1f7ba120 <col:70, line:534:5>
|   |-DeclStmt 0x55fb1f7b9c20 <line:528:2, col:20>
|   | |-VarDecl 0x55fb1f7b9ad8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55fb1f7b9b40 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55fb1f7b9b78 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55fb1f7b9be0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55fb1f7b9cf0 <line:529:2, col:23>
|   | `-VarDecl 0x55fb1f7b9c50 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55fb1f7b9cd8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55fb1f7b9cb8 <col:18> 'const char *' lvalue ParmVar 0x55fb1f7b6e88 'begin' 'const char *'
|   |-DoStmt 0x55fb1f7ba0b8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55fb1f7b9fe8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55fb1f7b9fd0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55fb1f7b9fb0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55fb1f7b9d08 <col:6> 'const char *' lvalue Var 0x55fb1f7b9c50 'x' 'const char *'
|   | |     `-CallExpr 0x55fb1f7b9f00 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55fb1f7b9ee8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55fb1f7b9ea0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55fb1f7b8750 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55fb1f7b9f68 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55fb1f7b9f50 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55fb1f7b9dc0 <col:20, col:27> 'String' (CXXTemporary 0x55fb1f7b9dc0)
|   | |       |     `-CXXTemporaryObjectExpr 0x55fb1f7b9d88 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55fb1f7b9f80 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55fb1f7b9de0 <col:30> 'const char *' lvalue Var 0x55fb1f7b9c50 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55fb1f7b9f98 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55fb1f7b9e00 <col:33> 'const char *' lvalue ParmVar 0x55fb1f7b6f08 'end' 'const char *'
|   | |       |-UnaryOperator 0x55fb1f7b9e40 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55fb1f7b9e20 <col:39> 'String' lvalue Var 0x55fb1f7b9ad8 'name' 'String'
|   | |       |-UnaryOperator 0x55fb1f7b9e78 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55fb1f7b9e58 <col:46> 'String' lvalue Var 0x55fb1f7b9b78 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55fb1f7b9e90 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55fb1f7ba0a0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55fb1f7ba088 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55fb1f7ba068 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55fb1f7ba038 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55fb1f4ac5d8
|   |         `-ImplicitCastExpr 0x55fb1f7ba020 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55fb1f7ba000 <col:11> 'String' lvalue Var 0x55fb1f7b9ad8 'name' 'String'
|   `-ReturnStmt 0x55fb1f7ba110 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55fb1f7ba0f8 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55fb1f7ba0d8 <col:9> 'const char *' lvalue Var 0x55fb1f7b9c50 'x' 'const char *'
|-CXXMethodDecl 0x55fb1f7b70f8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55fb1f7b7068 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55fb1f7ba728 <col:55, line:550:5>
|   `-IfStmt 0x55fb1f7ba700 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55fb1f7ba360 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55fb1f7ba348 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55fb1f7ba330 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55fb1f7ba310 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55fb1f7ba2e0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55fb1f4ac5d8
|     | |       `-DeclRefExpr 0x55fb1f7ba180 <col:6> 'const String' lvalue ParmVar 0x55fb1f7b7068 'x' 'const String &'
|     | `-BinaryOperator 0x55fb1f7ba2c0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55fb1f7ba290 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55fb1f7ba240 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55fb1f7ba228 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55fb1f7ba1e0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55fb1f4c5e10 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55fb1f7ba1a0 <col:11> 'const String' lvalue ParmVar 0x55fb1f7b7068 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55fb1f7ba1c0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55fb1f7ba2a8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55fb1f7ba278 <col:19> 'char' 123
|     |-ReturnStmt 0x55fb1f7ba3d0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55fb1f7ba3a0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55fb1f7ba380 <col:13> 'const String' lvalue ParmVar 0x55fb1f7b7068 'x' 'const String &'
|     `-IfStmt 0x55fb1f7ba6d8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55fb1f7ba468 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55fb1f7ba450 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55fb1f7ba430 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55fb1f7ba400 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55fb1f4ac5d8
|       |       `-DeclRefExpr 0x55fb1f7ba3e0 <col:11> 'const String' lvalue ParmVar 0x55fb1f7b7068 'x' 'const String &'
|       |-ReturnStmt 0x55fb1f7ba5f0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55fb1f7ba5d8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55fb1f7ba5a8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55fb1f7ba590 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55fb1f7ba570 <col:13, col:29> 'String' (CXXTemporary 0x55fb1f7ba570)
|       |         `-CallExpr 0x55fb1f7ba520 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55fb1f7ba508 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55fb1f7ba480 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55fb1f7b68a0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55fb1f7ba550 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55fb1f7ba4a0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55fb1f7ba4c0 <col:28> 'const String' lvalue ParmVar 0x55fb1f7b7068 'x' 'const String &'
|       `-ReturnStmt 0x55fb1f7ba6c8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55fb1f7ba6b0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55fb1f7ba680 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55fb1f7ba668 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55fb1f7ba648 <col:13, col:20> 'String' (CXXTemporary 0x55fb1f7ba648)
|                 `-CXXTemporaryObjectExpr 0x55fb1f7ba610 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55fb1f7b72c0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55fb1f7b71b0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55fb1f7b7228 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55fb1f7b89f8 <col:71> 'bool' false
|-CXXRecordDecl 0x55fb1f7b7370 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55fb1f7b7668 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55fb1f7b7600 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55fb1f7b75a0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55fb1f7b7560 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55fb1f4a8e70 'String'
|       | `-CXXRecord 0x55fb1f4a8de0 'String'
|       |-BuiltinType 0x55fb1f17b370 'int'
|       `-DecayedType 0x55fb1f661210 '__va_list_tag *' sugar
|         |-TypedefType 0x55fb1f6611e0 'va_list' sugar
|         | |-Typedef 0x55fb1f399f20 'va_list'
|         | `-TypedefType 0x55fb1f399ed0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55fb1f2d1af8 '__gnuc_va_list'
|         |   `-TypedefType 0x55fb1f2d1a60 '__builtin_va_list' sugar
|         |     |-Typedef 0x55fb1f1bcbd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55fb1f1bcb80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55fb1f17c0c0 '__va_list_tag'
|         |         `-CXXRecord 0x55fb1f17c028 '__va_list_tag'
|         `-PointerType 0x55fb1f39f7c0 '__va_list_tag *'
|           `-RecordType 0x55fb1f17c0c0 '__va_list_tag'
|             `-CXXRecord 0x55fb1f17c028 '__va_list_tag'
|-EnumDecl 0x55fb1f7b76c0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55fb1f7b77c0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55fb1f7b7d20 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f7b77a0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55fb1f7b7780 <col:16> 'int' 1
| |-EnumConstantDecl 0x55fb1f7b7850 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55fb1f7b7d38 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f7b7830 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55fb1f7b7810 <col:21> 'int' 2
| |-EnumConstantDecl 0x55fb1f7b78e0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55fb1f7b7d50 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f7b78c0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55fb1f7b78a0 <col:22> 'int' 4
| |-EnumConstantDecl 0x55fb1f7b7970 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55fb1f7b7d68 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f7b7950 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55fb1f7b7930 <col:17> 'int' 8
| |-EnumConstantDecl 0x55fb1f7b7a00 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55fb1f7b7d80 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f7b79e0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55fb1f7b79c0 <col:22> 'int' 16
| |-EnumConstantDecl 0x55fb1f7b7a90 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55fb1f7b7d98 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f7b7a70 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55fb1f7b7a50 <col:19> 'int' 32
| |-EnumConstantDecl 0x55fb1f7b7b20 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55fb1f7b7db0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f7b7b00 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55fb1f7b7ae0 <col:17> 'int' 64
| |-EnumConstantDecl 0x55fb1f7b7bb0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55fb1f7b7dc8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f7b7b90 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55fb1f7b7b70 <col:14> 'int' 128
| |-EnumConstantDecl 0x55fb1f7b7c40 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55fb1f7b7de0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f7b7c20 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55fb1f7b7c00 <col:16> 'int' 256
| `-EnumConstantDecl 0x55fb1f7b7cd0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55fb1f7b7df8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55fb1f7b7cb0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55fb1f7b7c90 <col:12> 'int' 1024
|-CXXMethodDecl 0x55fb1f7b8008 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55fb1f7b7e20 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55fb1f7b7ec0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55fb1f7b8190 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55fb1f7b80c8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55fb1f7b8238 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55fb1f7b8278 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55fb1f7b82d8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55fb1f7b8350 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55fb1f7b8750 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55fb1f7b83c8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55fb1f7b8448 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55fb1f7b84c8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55fb1f7b8540 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55fb1f7b85b8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55fb1f7b8630 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55fb1f7b8878 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55fb1f7b8878
| `-ParmVarDecl 0x55fb1f7b8988 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55fb1f7baa88 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55fb1f7baa88
  `-ParmVarDecl 0x55fb1f7bab98 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55fb1f660258 prev 0x55fb1f6a30b8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55fb1f660350 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55fb1f6603e0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55fb1f660518 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55fb1f660418 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55fb1f661940 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55fb1f661920 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55fb1f6614b8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55fb1f6619d0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55fb1f661990 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55fb1f660418 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55fb1f661520 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55fb1f661a50 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55fb1f661a10 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55fb1f661580 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55fb1f661a90 <col:54> 'bool' false
| `-CompoundStmt 0x55fb1f661b98 <col:61, line:38:5>
|   `-BinaryOperator 0x55fb1f661b78 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55fb1f661b10 <col:9> 'const Element *' lvalue ->_context 0x55fb1f661458
|     | `-CXXThisExpr 0x55fb1f661b00 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55fb1f661b60 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55fb1f661b40 <col:20> 'int' 0
|-CXXConstructorDecl 0x55fb1f660728 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55fb1f6605d8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55fb1f660650 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55fb1f661978 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55fb1f661958 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55fb1f661458 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55fb1f661bf0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55fb1f661bb0 <col:20> 'const Element *' lvalue ParmVar 0x55fb1f6605d8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55fb1f6614b8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55fb1f661c70 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55fb1f661c30 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55fb1f660650 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55fb1f661520 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55fb1f661cf0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55fb1f661cb0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55fb1f661580 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55fb1f661d30 <col:73> 'bool' false
| `-CompoundStmt 0x55fb1f661da8 <col:80, line:46:5>
|-CXXMethodDecl 0x55fb1f660858 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55fb1f661e20 <col:36, line:51:5>
|   `-ReturnStmt 0x55fb1f661e10 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55fb1f661df8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55fb1f661dc8 <col:16> 'const Element *const' lvalue ->_context 0x55fb1f661458
|         `-CXXThisExpr 0x55fb1f661db8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55fb1f660948 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55fb1f661ea0 <col:32, line:57:5>
|   `-ReturnStmt 0x55fb1f661e90 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55fb1f661e78 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55fb1f661e48 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55fb1f6614b8
|         `-CXXThisExpr 0x55fb1f661e38 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55fb1f660a08 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55fb1f660b90 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55fb1f660ac0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55fb1f660ce0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55fb1f660c50 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55fb1f660e30 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55fb1f660da0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55fb1f661038 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55fb1f660ee8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55fb1f660f60 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55fb1f661368 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55fb1f6610f8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55fb1f661178 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55fb1f661240 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55fb1f661420 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55fb1f661458 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55fb1f6614b8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55fb1f661520 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55fb1f661580 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55fb1f6615d0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55fb1f6615d0
| `-ParmVarDecl 0x55fb1f6616e8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55fb1f661788 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55fb1f661788
| `-ParmVarDecl 0x55fb1f661898 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55fb1f7eff18 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55fb1f76b7a0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55fb1f76b978 prev 0x55fb1f76b7a0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55fb1f76ba08 <col:46, col:52> col:46 public
|-TypedefDecl 0x55fb1f76ba30 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55fb1f17b370 'int'
|-TypedefDecl 0x55fb1f778a30 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55fb1f7789e0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55fb1f76bee0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55fb1f76bde0 'type'
|     `-TemplateSpecializationType 0x55fb1f76bd70 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55fb1f76bc50 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55fb1f76bc30 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55fb1f76bc10 <col:24> 'unsigned long' 4
|       `-RecordType 0x55fb1f76bd50 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55fb1f76bc70 'char_array'
|-TypedefDecl 0x55fb1f778ae8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55fb1f778ab0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55fb1f778a90 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55fb1f778a30 'type'
|     `-ElaboratedType 0x55fb1f7789e0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55fb1f76bee0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55fb1f76bde0 'type'
|         `-TemplateSpecializationType 0x55fb1f76bd70 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55fb1f76bc50 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55fb1f76bc30 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55fb1f76bc10 <col:24> 'unsigned long' 4
|           `-RecordType 0x55fb1f76bd50 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55fb1f76bc70 'char_array'
|-CXXMethodDecl 0x55fb1f778c68 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55fb1f778b78 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55fb1f778d58 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55fb1f778e38 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55fb1f779108 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55fb1f779010 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55fb1f779348 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55fb1f7791c0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55fb1f779238 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55fb1f779518 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55fb1f779408 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55fb1f779480 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55fb1f779678 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55fb1f779748 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55fb1f779998 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55fb1f779808 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55fb1f779880 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55fb1f779bf8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55fb1f779a68 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55fb1f779ae0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55fb1f779db8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55fb1f779cc8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55fb1f779f78 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55fb1f779e80 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55fb1f77a030 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55fb1f77a0e0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55fb1f77a318 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55fb1f77a190 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55fb1f77a208 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55fb1f77a5b8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55fb1f77a4c0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55fb1f77a680 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55fb1f77a6d0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55fb1f77a720 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55fb1f76a1a8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55fb1f76a3b8 prev 0x55fb1f76a1a8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55fb1f76b710 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55fb1f76b6c0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55fb1f76b6a0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55fb1f76b550 'type'
|     `-SubstTemplateTypeParmType 0x55fb1f76b370 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55fb1f441cb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55fb1f441c58 'T'
|       `-RecordType 0x55fb1f76aec0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55fb1f76add8 'sized_array_memory'
|-FieldDecl 0x55fb1f77a770 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55fb1f77a7c0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55fb1f77a7f8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55fb1f76a450 'int' sugar
|   |-TemplateTypeParmType 0x55fb1f4799a0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55fb1f479948 'T'
|   `-BuiltinType 0x55fb1f17b370 'int'
|-TypedefDecl 0x55fb1f77a888 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55fb1f77a850 'int &'
|   `-SubstTemplateTypeParmType 0x55fb1f76a450 'int' sugar
|     |-TemplateTypeParmType 0x55fb1f4799a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55fb1f479948 'T'
|     `-BuiltinType 0x55fb1f17b370 'int'
|-TypedefDecl 0x55fb1f77a948 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55fb1f77a910 'const int &'
|   `-QualType 0x55fb1f76a451 'const int' const
|     `-SubstTemplateTypeParmType 0x55fb1f76a450 'int' sugar
|       |-TemplateTypeParmType 0x55fb1f4799a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55fb1f479948 'T'
|       `-BuiltinType 0x55fb1f17b370 'int'
|-TypedefDecl 0x55fb1f77a9d8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55fb1f77a9a0 'int *'
|   `-SubstTemplateTypeParmType 0x55fb1f76a450 'int' sugar
|     |-TemplateTypeParmType 0x55fb1f4799a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55fb1f479948 'T'
|     `-BuiltinType 0x55fb1f17b370 'int'
|-TypedefDecl 0x55fb1f77aa68 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55fb1f77aa30 'const int *'
|   `-QualType 0x55fb1f76a451 'const int' const
|     `-SubstTemplateTypeParmType 0x55fb1f76a450 'int' sugar
|       |-TemplateTypeParmType 0x55fb1f4799a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55fb1f479948 'T'
|       `-BuiltinType 0x55fb1f17b370 'int'
|-TypedefDecl 0x55fb1f77b650 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55fb1f77b600 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55fb1f77b5e0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55fb1f77b570 'type'
|     `-SubstTemplateTypeParmType 0x55fb1f77b330 'int' sugar
|       |-TemplateTypeParmType 0x55fb1f44cab0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55fb1f44ca60 'T'
|       `-BuiltinType 0x55fb1f17b370 'int'
|-TypedefDecl 0x55fb1f77b6b8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55fb1f77a910 'const int &'
|   `-QualType 0x55fb1f76a451 'const int' const
|     `-SubstTemplateTypeParmType 0x55fb1f76a450 'int' sugar
|       |-TemplateTypeParmType 0x55fb1f4799a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55fb1f479948 'T'
|       `-BuiltinType 0x55fb1f17b370 'int'
|-TypedefDecl 0x55fb1f77b710 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55fb1f17b370 'int'
|-TypedefDecl 0x55fb1f77b778 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55fb1f77a9a0 'int *'
|   `-SubstTemplateTypeParmType 0x55fb1f76a450 'int' sugar
|     |-TemplateTypeParmType 0x55fb1f4799a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55fb1f479948 'T'
|     `-BuiltinType 0x55fb1f17b370 'int'
|-TypedefDecl 0x55fb1f77b7e0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55fb1f77aa30 'const int *'
|   `-QualType 0x55fb1f76a451 'const int' const
|     `-SubstTemplateTypeParmType 0x55fb1f76a450 'int' sugar
|       |-TemplateTypeParmType 0x55fb1f4799a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55fb1f479948 'T'
|       `-BuiltinType 0x55fb1f17b370 'int'
|-EnumDecl 0x55fb1f77b838 <line:134:5> col:5
| `-EnumConstantDecl 0x55fb1f77b930 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55fb1f77b910 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55fb1f47b028 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55fb1f47b000 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55fb1f47afe0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55fb1f77b9b8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55fb1f77bc08 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55fb1f77ba70 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55fb1f77bb10 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55fb1f77bec8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55fb1f77bdb0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55fb1f77c188 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55fb1f77c070 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55fb1f77c4d0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55fb1f77c3b0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55fb1f77c7e0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55fb1f77c6c0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55fb1f77cad0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55fb1f77c918 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55fb1f77c990 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55fb1f77cbf8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55fb1f77ccd8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55fb1f77cd30 <col:30> Inherited
|-CXXMethodDecl 0x55fb1f77cd78 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55fb1f77ce28 <col:20> Inherited
| `-OptimizeNoneAttr 0x55fb1f77ce80 <col:30> Inherited
|-CXXMethodDecl 0x55fb1f77cf48 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55fb1f77cff8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55fb1f77d050 <col:30> Inherited
|-CXXMethodDecl 0x55fb1f77d098 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55fb1f77d148 <col:20> Inherited
| `-OptimizeNoneAttr 0x55fb1f77d1a0 <col:30> Inherited
|-CXXMethodDecl 0x55fb1f77d1e8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55fb1f77d298 <col:20> Inherited
| `-OptimizeNoneAttr 0x55fb1f77d2f0 <col:30> Inherited
|-CXXMethodDecl 0x55fb1f77d338 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55fb1f77d3e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55fb1f77d440 <col:30> Inherited
|-CXXMethodDecl 0x55fb1f77d468 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55fb1f77d518 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55fb1f77d5c8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55fb1f77d788 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55fb1f77d678 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55fb1f77d6f0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55fb1f77d8d8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55fb1f77d848 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55fb1f77da88 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55fb1f77d990 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55fb1f77db40 <col:20>
| `-OptimizeNoneAttr 0x55fb1f77db98 <col:30>
|-CXXMethodDecl 0x55fb1f77dcb8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55fb1f77dbc0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55fb1f77dd70 <col:20>
| `-OptimizeNoneAttr 0x55fb1f77ddc8 <col:30>
|-CXXMethodDecl 0x55fb1f77de80 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55fb1f77ddf0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55fb1f77dfc8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55fb1f77df38 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55fb1f77e0f8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55fb1f77e228 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55fb1f77e2f8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55fb1f77e3c8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55fb1f77e508 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55fb1f77e478 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55fb1f77e650 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55fb1f77e5c0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55fb1f77e798 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55fb1f77e708 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55fb1f77e850 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55fb1f77e950 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55fb1f77e8c0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55fb1f77ea08 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55fb1f77eac8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55fb1f77ebc8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55fb1f77ed48 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55fb1f77ec88 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55fb1f77f508 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55fb1f77ee00 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55fb1f77f468 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55fb1f77f368 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55fb1f77f5e8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55fb1f77f738 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55fb1f77f6a8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55fb1f77f7f0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55fb1f77fa38 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55fb1f77f8b0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55fb1f77f928 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55fb1f77fbf8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55fb1f77fb08 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55fb1f77fe48 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55fb1f77fcc0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55fb1f77fd38 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55fb1f77ff08 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55fb1f780168 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55fb1f780070 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55fb1f781230 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55fb1f768318 prev 0x55fb1f74dd38 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55fb1f768410 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55fb1f768500 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55fb1f791be0 <col:16, line:828:9>
|-CXXDestructorDecl 0x55fb1f7685f0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55fb1f791bf0 <col:25, line:830:9>
|-CXXMethodDecl 0x55fb1f7686f0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55fb1f7687a0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55fb1f768848 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55fb1f768848
| `-ParmVarDecl 0x55fb1f768958 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55fb1f769118 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55fb1f769118
  `-ParmVarDecl 0x55fb1f769228 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55fb1f74db48 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55fb1f74dca8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55fb1f74dd38 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55fb1f74ddf0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55fb1f74def8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55fb1f74de28 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55fb1f7827e8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55fb1f7827c8 <col:31> 'int' 0
|-CXXConstructorDecl 0x55fb1f74e218 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55fb1f74e090 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55fb1f74e108 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55fb1f782820 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55fb1f782800 <col:59> 'int' 0
|-CXXConstructorDecl 0x55fb1f74e3f0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55fb1f74e2e0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55fb1f74e358 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55fb1f782858 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55fb1f782838 <col:55> 'int' 0
|-CXXConstructorDecl 0x55fb1f74e7a8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55fb1f74e590 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55fb1f74e608 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55fb1f74e680 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55fb1f782890 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55fb1f782870 <col:31> 'int' 0
|-CXXConstructorDecl 0x55fb1f74e968 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55fb1f74e8a8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55fb1f74ea60 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55fb1f74ec48 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55fb1f74eb50 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55fb1f74ed38 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55fb1f782c40 <col:24, line:291:5>
|   `-ReturnStmt 0x55fb1f782c30 <line:290:9, col:79>
|     `-BinaryOperator 0x55fb1f782c10 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55fb1f782ae8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55fb1f782a40 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55fb1f782a20 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55fb1f782918 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55fb1f782900 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55fb1f7828e8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55fb1f7828b8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55fb1f76a140
|       | |   |       `-CXXThisExpr 0x55fb1f7828a8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55fb1f782a08 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55fb1f7829f0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55fb1f7829b8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55fb1f782988 <col:28, col:35> '<bound member function type>' ->size 0x55fb1f72e278
|       | |           `-ImplicitCastExpr 0x55fb1f7829d8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55fb1f782970 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55fb1f782940 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55fb1f76a140
|       | |                 `-CXXThisExpr 0x55fb1f782930 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55fb1f782ad0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55fb1f782ab8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55fb1f782aa0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55fb1f782a70 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55fb1f781370
|       |         `-CXXThisExpr 0x55fb1f782a60 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55fb1f782bf0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55fb1f782bd8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55fb1f782bc0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55fb1f782b80 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55fb1f782b68 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55fb1f782b18 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55fb1f781420
|         |     |   `-CXXThisExpr 0x55fb1f782b08 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55fb1f782b48 <col:73> 'int' 0
|         `-IntegerLiteral 0x55fb1f782ba0 <col:79> 'int' 0
|-CXXMethodDecl 0x55fb1f74edf8 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55fb1f782e18 <col:32, line:296:5>
|   `-ReturnStmt 0x55fb1f782e08 <line:295:9, col:49>
|     `-BinaryOperator 0x55fb1f782de8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55fb1f782cc8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55fb1f782cb0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55fb1f782c98 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55fb1f782c68 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55fb1f781370
|       |       `-CXXThisExpr 0x55fb1f782c58 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55fb1f782dc8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55fb1f782db0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55fb1f782d98 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55fb1f782d58 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55fb1f782d40 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55fb1f782cf0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55fb1f781420
|         |     |   `-CXXThisExpr 0x55fb1f782ce0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55fb1f782d20 <col:43> 'int' 0
|         `-IntegerLiteral 0x55fb1f782d78 <col:49> 'int' 0
|-CXXMethodDecl 0x55fb1f74eee8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55fb1f783028 <col:19, line:306:5>
|   |-IfStmt 0x55fb1f782f48 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55fb1f782e88 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55fb1f782e70 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55fb1f782e40 <col:13> 'Vector<String> *' lvalue ->_conf 0x55fb1f76a140
|   | |     `-CXXThisExpr 0x55fb1f782e30 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55fb1f782f28 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55fb1f782ef8 <col:13, col:20> '<bound member function type>' ->clear 0x55fb1f730ca8
|   |     `-ImplicitCastExpr 0x55fb1f782ee0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55fb1f782eb0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55fb1f76a140
|   |         `-CXXThisExpr 0x55fb1f782ea0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55fb1f782fd0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55fb1f782fa0 <col:9, col:16> '<bound member function type>' .clear 0x55fb1f77ff08
|   |   `-MemberExpr 0x55fb1f782f70 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55fb1f781310
|   |     `-CXXThisExpr 0x55fb1f782f60 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55fb1f783018 <line:305:9, col:17>
|     `-UnaryOperator 0x55fb1f783000 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55fb1f782ff0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55fb1f74f168 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55fb1f74f070 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55fb1f74f2e8 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55fb1f74f220 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55fb1f74f668 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55fb1f74f390 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55fb1f74f5c8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55fb1f74f438 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55fb1f74f4b0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55fb1f783348 <col:67, line:327:5>
|     |-WhileStmt 0x55fb1f7832f8 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55fb1f783110 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55fb1f783090 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55fb1f69b588 0x55fb1f4e4b68 0x55fb1f4e4840 0x55fb1f4d6020 0x55fb1f4d5cd0 0x55fb1f4d55c0 0x55fb1f4a7f30 0x55fb1f4343f0
|     | | |-DeclRefExpr 0x55fb1f783050 <col:16> 'Iter' lvalue ParmVar 0x55fb1f74f438 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55fb1f783070 <col:25> 'Iter' lvalue ParmVar 0x55fb1f74f4b0 'end' 'Iter'
|     | `-CompoundStmt 0x55fb1f7832d8 <col:30, line:325:9>
|     |   |-CallExpr 0x55fb1f783278 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55fb1f783158 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55fb1f783248 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55fb1f7831d8 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55fb1f6a0708 0x55fb1f6a0328 0x55fb1f69ff58 0x55fb1f69fb78 0x55fb1f69f798 0x55fb1f69f3c8
|     |   |   `-DeclRefExpr 0x55fb1f7831b8 <col:24> 'Iter' lvalue ParmVar 0x55fb1f74f438 'begin' 'Iter'
|     |   `-UnaryOperator 0x55fb1f7832c0 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55fb1f7832a0 <col:15> 'Iter' lvalue ParmVar 0x55fb1f74f438 'begin' 'Iter'
|     `-ReturnStmt 0x55fb1f783338 <line:326:9, col:17>
|       `-UnaryOperator 0x55fb1f783320 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55fb1f783310 <col:17> 'Args *' this
|-CXXMethodDecl 0x55fb1f74f770 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55fb1f74f6e0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55fb1f74f8b8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55fb1f74f828 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55fb1f74f980 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55fb1f783428 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55fb1f7833c8 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55fb1f783378 <col:9> '<bound member function type>' ->reset_from 0x55fb1f781798
|   | | `-CXXThisExpr 0x55fb1f783368 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55fb1f7833a8 <col:20> 'int' 0
|   `-ReturnStmt 0x55fb1f783418 <line:352:9, col:17>
|     `-UnaryOperator 0x55fb1f783400 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55fb1f7833f0 <col:17> 'Args *' this
|-VarDecl 0x55fb1f74fa38 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55fb1f74faa0 <col:38> 'int' 1
|-VarDecl 0x55fb1f74fb30 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55fb1f74fb98 <col:39> 'int' 2
|-VarDecl 0x55fb1f74fc28 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55fb1f74fc90 <col:39> 'int' 4
|-VarDecl 0x55fb1f74fd20 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55fb1f74fd88 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55fb1f750108 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55fb1f74fe00 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55fb1f750068 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55fb1f74feb0 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55fb1f74ff58 <col:37, col:40> col:40 referenced x 'T &'
| | `-CompoundStmt 0x55fb1f783580 <col:43, line:371:5>
| |   `-ReturnStmt 0x55fb1f783570 <line:370:9, col:34>
| |     `-CallExpr 0x55fb1f783538 <col:16, col:34> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55fb1f783458 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55fb1f7834d8 <col:21> 'const char *' lvalue ParmVar 0x55fb1f74feb0 'keyword' 'const char *'
| |       |-IntegerLiteral 0x55fb1f7834f8 <col:30> 'int' 0
| |       `-DeclRefExpr 0x55fb1f783518 <col:33> 'T' lvalue ParmVar 0x55fb1f74ff58 'x' 'T &'
| `-CXXMethodDecl 0x55fb1f7f0398 <line:369:5, line:371:5> line:369:11 used read 'Args &(const char *, bool &)'
|   |-TemplateArgument type 'bool'
|   |-ParmVarDecl 0x55fb1f7f01b8 <col:16, col:28> col:28 keyword 'const char *'
|   `-ParmVarDecl 0x55fb1f7f0288 <col:37, col:40> col:40 x 'bool &'
|-FunctionTemplateDecl 0x55fb1f750438 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55fb1f750170 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55fb1f750398 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55fb1f750220 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f7502c8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55fb1f7836d0 <col:45, line:375:5>
|     `-ReturnStmt 0x55fb1f7836c0 <line:374:9, col:42>
|       `-CallExpr 0x55fb1f783688 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55fb1f7835a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55fb1f783628 <col:21> 'const char *' lvalue ParmVar 0x55fb1f750220 'keyword' 'const char *'
|         |-DeclRefExpr 0x55fb1f783648 <col:30> 'const int' lvalue Var 0x55fb1f74fa38 'mandatory' 'const int'
|         `-DeclRefExpr 0x55fb1f783668 <col:41> 'T' lvalue ParmVar 0x55fb1f7502c8 'x' 'T &'
|-FunctionTemplateDecl 0x55fb1f750768 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55fb1f7504a0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55fb1f7506c8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55fb1f750550 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f7505f8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55fb1f783820 <col:45, line:379:5>
|     `-ReturnStmt 0x55fb1f783810 <line:378:9, col:43>
|       `-CallExpr 0x55fb1f7837d8 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55fb1f7836f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55fb1f783778 <col:21> 'const char *' lvalue ParmVar 0x55fb1f750550 'keyword' 'const char *'
|         |-DeclRefExpr 0x55fb1f783798 <col:30> 'const int' lvalue Var 0x55fb1f74fb30 'positional' 'const int'
|         `-DeclRefExpr 0x55fb1f7837b8 <col:42> 'T' lvalue ParmVar 0x55fb1f7505f8 'x' 'T &'
|-FunctionTemplateDecl 0x55fb1f750a98 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55fb1f7507d0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55fb1f7509f8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55fb1f750880 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f750928 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x55fb1f783a20 <col:46, line:383:5>
|     `-ReturnStmt 0x55fb1f783a10 <line:382:9, col:55>
|       `-CallExpr 0x55fb1f7839d8 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55fb1f783848 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55fb1f7838c8 <col:21> 'const char *' lvalue ParmVar 0x55fb1f750880 'keyword' 'const char *'
|         |-BinaryOperator 0x55fb1f783998 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55fb1f783948 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55fb1f783928 <col:30> 'const int' lvalue Var 0x55fb1f74fa38 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55fb1f783980 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55fb1f783960 <col:42> 'const int' lvalue Var 0x55fb1f74fb30 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55fb1f7839b8 <col:54> 'T' lvalue ParmVar 0x55fb1f750928 'x' 'T &'
|-FunctionTemplateDecl 0x55fb1f750e98 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55fb1f750b00 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55fb1f750df8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55fb1f750bb0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f750c30 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55fb1f750cd8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55fb1f783b60 <col:54, line:388:5>
|     |-CallExpr 0x55fb1f783ae8 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55fb1f783a38 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55fb1f783a78 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55fb1f783a88 <col:30> 'const char *' lvalue ParmVar 0x55fb1f750bb0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55fb1f783aa8 <col:39> 'int' lvalue ParmVar 0x55fb1f750c30 'flags' 'int'
|     | `-DeclRefExpr 0x55fb1f783ac8 <col:46> 'T' lvalue ParmVar 0x55fb1f750cd8 'x' 'T &'
|     `-ReturnStmt 0x55fb1f783b50 <line:387:9, col:17>
|       `-UnaryOperator 0x55fb1f783b38 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55fb1f783b28 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55fb1f751348 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55fb1f750f08 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55fb1f750f88 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55fb1f7512a8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55fb1f751048 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f7510e8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55fb1f751188 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55fb1f783cd0 <col:74, line:403:5>
|     `-ReturnStmt 0x55fb1f783cc0 <line:402:9, col:56>
|       `-CallExpr 0x55fb1f783c80 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55fb1f783b90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55fb1f783c00 <col:28> 'const char *' lvalue ParmVar 0x55fb1f751048 'keyword' 'const char *'
|         |-IntegerLiteral 0x55fb1f783c20 <col:37> 'int' 0
|         |-DeclRefExpr 0x55fb1f783c40 <col:40> 'T' lvalue ParmVar 0x55fb1f7510e8 'x' 'T &'
|         `-DeclRefExpr 0x55fb1f783c60 <col:43> 'const V' lvalue ParmVar 0x55fb1f751188 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55fb1f7517b8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55fb1f7513b8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55fb1f751438 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55fb1f751718 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55fb1f7514f8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f751598 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55fb1f751638 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55fb1f783e38 <col:76, line:407:5>
|     `-ReturnStmt 0x55fb1f783e28 <line:406:9, col:65>
|       `-CallExpr 0x55fb1f783de8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55fb1f783cf8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55fb1f783d68 <col:28> 'const char *' lvalue ParmVar 0x55fb1f7514f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55fb1f783d88 <col:37> 'const int' lvalue Var 0x55fb1f74fb30 'positional' 'const int'
|         |-DeclRefExpr 0x55fb1f783da8 <col:49> 'T' lvalue ParmVar 0x55fb1f751598 'x' 'T &'
|         `-DeclRefExpr 0x55fb1f783dc8 <col:52> 'const V' lvalue ParmVar 0x55fb1f751638 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55fb1f751d08 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55fb1f751828 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55fb1f7518a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55fb1f751c68 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55fb1f751968 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f7519e8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55fb1f751a88 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55fb1f751b28 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55fb1f783fa0 <col:85, line:412:5>
|     |-CallExpr 0x55fb1f783f20 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55fb1f783e50 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55fb1f783e90 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55fb1f783ea0 <col:37> 'const char *' lvalue ParmVar 0x55fb1f751968 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55fb1f783ec0 <col:46> 'int' lvalue ParmVar 0x55fb1f7519e8 'flags' 'int'
|     | |-DeclRefExpr 0x55fb1f783ee0 <col:53> 'T' lvalue ParmVar 0x55fb1f751a88 'x' 'T &'
|     | `-DeclRefExpr 0x55fb1f783f00 <col:56> 'const V' lvalue ParmVar 0x55fb1f751b28 'default_value' 'const V &'
|     `-ReturnStmt 0x55fb1f783f90 <line:411:9, col:17>
|       `-UnaryOperator 0x55fb1f783f78 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55fb1f783f68 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55fb1f752198 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55fb1f751d80 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55fb1f751df8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55fb1f7520f8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55fb1f751eb8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f751f30 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55fb1f751fd8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55fb1f784120 <col:53, line:425:5>
|     `-ReturnStmt 0x55fb1f784110 <line:424:9, col:42>
|       `-CallExpr 0x55fb1f7840d0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55fb1f783fd0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55fb1f784050 <col:21> 'const char *' lvalue ParmVar 0x55fb1f751eb8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55fb1f784070 <col:30> 'int' 0
|         |-DeclRefExpr 0x55fb1f784090 <col:33> 'P' lvalue ParmVar 0x55fb1f751f30 'parser' 'P'
|         `-DeclRefExpr 0x55fb1f7840b0 <col:41> 'T' lvalue ParmVar 0x55fb1f751fd8 'x' 'T &'
|-FunctionTemplateDecl 0x55fb1f7525e8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55fb1f752208 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55fb1f752288 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55fb1f752548 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55fb1f752348 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f7523c0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55fb1f752468 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55fb1f784298 <col:55, line:429:5>
|     `-ReturnStmt 0x55fb1f784288 <line:428:9, col:50>
|       `-CallExpr 0x55fb1f784248 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55fb1f784148 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55fb1f7841c8 <col:21> 'const char *' lvalue ParmVar 0x55fb1f752348 'keyword' 'const char *'
|         |-DeclRefExpr 0x55fb1f7841e8 <col:30> 'const int' lvalue Var 0x55fb1f74fa38 'mandatory' 'const int'
|         |-DeclRefExpr 0x55fb1f784208 <col:41> 'P' lvalue ParmVar 0x55fb1f7523c0 'parser' 'P'
|         `-DeclRefExpr 0x55fb1f784228 <col:49> 'T' lvalue ParmVar 0x55fb1f752468 'x' 'T &'
|-FunctionTemplateDecl 0x55fb1f752a38 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55fb1f752658 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55fb1f7526d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55fb1f752998 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55fb1f752798 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f752810 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55fb1f7528b8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55fb1f784410 <col:55, line:433:5>
|     `-ReturnStmt 0x55fb1f784400 <line:432:9, col:51>
|       `-CallExpr 0x55fb1f7843c0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55fb1f7842c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55fb1f784340 <col:21> 'const char *' lvalue ParmVar 0x55fb1f752798 'keyword' 'const char *'
|         |-DeclRefExpr 0x55fb1f784360 <col:30> 'const int' lvalue Var 0x55fb1f74fb30 'positional' 'const int'
|         |-DeclRefExpr 0x55fb1f784380 <col:42> 'P' lvalue ParmVar 0x55fb1f752810 'parser' 'P'
|         `-DeclRefExpr 0x55fb1f7843a0 <col:50> 'T' lvalue ParmVar 0x55fb1f7528b8 'x' 'T &'
|-FunctionTemplateDecl 0x55fb1f752e88 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55fb1f752aa8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55fb1f752b28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55fb1f752de8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55fb1f752be8 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f752c60 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55fb1f752d08 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55fb1f784638 <col:56, line:437:5>
|     `-ReturnStmt 0x55fb1f784628 <line:436:9, col:63>
|       `-CallExpr 0x55fb1f7845e8 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55fb1f784438 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55fb1f7844b8 <col:21> 'const char *' lvalue ParmVar 0x55fb1f752be8 'keyword' 'const char *'
|         |-BinaryOperator 0x55fb1f784588 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55fb1f784538 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55fb1f784518 <col:30> 'const int' lvalue Var 0x55fb1f74fa38 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55fb1f784570 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55fb1f784550 <col:42> 'const int' lvalue Var 0x55fb1f74fb30 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55fb1f7845a8 <col:54> 'P' lvalue ParmVar 0x55fb1f752c60 'parser' 'P'
|         `-DeclRefExpr 0x55fb1f7845c8 <col:62> 'T' lvalue ParmVar 0x55fb1f752d08 'x' 'T &'
|-FunctionTemplateDecl 0x55fb1f7533b8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55fb1f752ef8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55fb1f752f78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55fb1f753318 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55fb1f753038 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f7530b8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55fb1f753130 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55fb1f7531d8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55fb1f7847a0 <col:64, line:442:5>
|     |-CallExpr 0x55fb1f784720 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55fb1f784650 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55fb1f784690 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55fb1f7846a0 <col:30> 'const char *' lvalue ParmVar 0x55fb1f753038 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55fb1f7846c0 <col:39> 'int' lvalue ParmVar 0x55fb1f7530b8 'flags' 'int'
|     | |-DeclRefExpr 0x55fb1f7846e0 <col:46> 'P' lvalue ParmVar 0x55fb1f753130 'parser' 'P'
|     | `-DeclRefExpr 0x55fb1f784700 <col:54> 'T' lvalue ParmVar 0x55fb1f7531d8 'x' 'T &'
|     `-ReturnStmt 0x55fb1f784790 <line:441:9, col:17>
|       `-UnaryOperator 0x55fb1f784778 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55fb1f784768 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55fb1f7539b8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55fb1f753430 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55fb1f7534a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55fb1f753528 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55fb1f753918 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55fb1f7535f0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f753668 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55fb1f753708 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55fb1f7537d8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55fb1f784938 <col:84, line:458:5>
|     `-ReturnStmt 0x55fb1f784928 <line:457:9, col:64>
|       `-CallExpr 0x55fb1f7848e0 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55fb1f7847d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55fb1f784840 <col:28> 'const char *' lvalue ParmVar 0x55fb1f7535f0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55fb1f784860 <col:37> 'int' 0
|         |-DeclRefExpr 0x55fb1f784880 <col:40> 'P' lvalue ParmVar 0x55fb1f753668 'parser' 'P'
|         |-DeclRefExpr 0x55fb1f7848a0 <col:48> 'T' lvalue ParmVar 0x55fb1f753708 'x' 'T &'
|         `-DeclRefExpr 0x55fb1f7848c0 <col:51> 'const V' lvalue ParmVar 0x55fb1f7537d8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55fb1f757758 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55fb1f753a30 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55fb1f753aa8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55fb1f757348 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55fb1f7576b8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55fb1f757410 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f757488 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55fb1f757528 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55fb1f7575c8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55fb1f784ac8 <col:86, line:462:5>
|     `-ReturnStmt 0x55fb1f784ab8 <line:461:9, col:73>
|       `-CallExpr 0x55fb1f784a70 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55fb1f784960 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55fb1f7849d0 <col:28> 'const char *' lvalue ParmVar 0x55fb1f757410 'keyword' 'const char *'
|         |-DeclRefExpr 0x55fb1f7849f0 <col:37> 'const int' lvalue Var 0x55fb1f74fb30 'positional' 'const int'
|         |-DeclRefExpr 0x55fb1f784a10 <col:49> 'P' lvalue ParmVar 0x55fb1f757488 'parser' 'P'
|         |-DeclRefExpr 0x55fb1f784a30 <col:57> 'T' lvalue ParmVar 0x55fb1f757528 'x' 'T &'
|         `-DeclRefExpr 0x55fb1f784a50 <col:60> 'const V' lvalue ParmVar 0x55fb1f7575c8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55fb1f757db8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55fb1f7577d0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55fb1f757848 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55fb1f7578c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55fb1f757d18 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55fb1f757990 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f757a10 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55fb1f757a88 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55fb1f757b28 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55fb1f757bc8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55fb1f784c58 <col:95, line:467:5>
|     |-CallExpr 0x55fb1f784bd0 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55fb1f784ae0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55fb1f784b20 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55fb1f784b30 <col:37> 'const char *' lvalue ParmVar 0x55fb1f757990 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55fb1f784b50 <col:46> 'int' lvalue ParmVar 0x55fb1f757a10 'flags' 'int'
|     | |-DeclRefExpr 0x55fb1f784b70 <col:53> 'P' lvalue ParmVar 0x55fb1f757a88 'parser' 'P'
|     | |-DeclRefExpr 0x55fb1f784b90 <col:61> 'T' lvalue ParmVar 0x55fb1f757b28 'x' 'T &'
|     | `-DeclRefExpr 0x55fb1f784bb0 <col:64> 'const V' lvalue ParmVar 0x55fb1f757bc8 'default_value' 'const V &'
|     `-ReturnStmt 0x55fb1f784c48 <line:466:9, col:17>
|       `-UnaryOperator 0x55fb1f784c30 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55fb1f784c20 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55fb1f758398 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55fb1f757e38 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55fb1f757eb8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55fb1f757f38 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55fb1f7582f8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55fb1f758000 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f758078 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55fb1f758118 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55fb1f7581b8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55fb1f784e00 <col:63, line:481:5>
|     `-ReturnStmt 0x55fb1f784df0 <line:480:9, col:47>
|       `-CallExpr 0x55fb1f784da8 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55fb1f784c88 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55fb1f784d08 <col:21> 'const char *' lvalue ParmVar 0x55fb1f758000 'keyword' 'const char *'
|         |-IntegerLiteral 0x55fb1f784d28 <col:30> 'int' 0
|         |-DeclRefExpr 0x55fb1f784d48 <col:33> 'P' lvalue ParmVar 0x55fb1f758078 'parser' 'P'
|         |-DeclRefExpr 0x55fb1f784d68 <col:41> 'T1' lvalue ParmVar 0x55fb1f758118 'x1' 'T1 &'
|         `-DeclRefExpr 0x55fb1f784d88 <col:45> 'T2' lvalue ParmVar 0x55fb1f7581b8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55fb1f758918 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55fb1f758410 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55fb1f758488 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55fb1f758508 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55fb1f758878 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55fb1f7585d0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f758648 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55fb1f7586e8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55fb1f758788 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55fb1f784fa0 <col:65, line:485:5>
|     `-ReturnStmt 0x55fb1f784f90 <line:484:9, col:55>
|       `-CallExpr 0x55fb1f784f48 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55fb1f784e28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55fb1f784ea8 <col:21> 'const char *' lvalue ParmVar 0x55fb1f7585d0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55fb1f784ec8 <col:30> 'const int' lvalue Var 0x55fb1f74fa38 'mandatory' 'const int'
|         |-DeclRefExpr 0x55fb1f784ee8 <col:41> 'P' lvalue ParmVar 0x55fb1f758648 'parser' 'P'
|         |-DeclRefExpr 0x55fb1f784f08 <col:49> 'T1' lvalue ParmVar 0x55fb1f7586e8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55fb1f784f28 <col:53> 'T2' lvalue ParmVar 0x55fb1f758788 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55fb1f758e98 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55fb1f758990 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55fb1f758a08 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55fb1f758a88 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55fb1f758df8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55fb1f758b50 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f758bc8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55fb1f758c68 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55fb1f758d08 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55fb1f785140 <col:65, line:489:5>
|     `-ReturnStmt 0x55fb1f785130 <line:488:9, col:56>
|       `-CallExpr 0x55fb1f7850e8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55fb1f784fc8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55fb1f785048 <col:21> 'const char *' lvalue ParmVar 0x55fb1f758b50 'keyword' 'const char *'
|         |-DeclRefExpr 0x55fb1f785068 <col:30> 'const int' lvalue Var 0x55fb1f74fb30 'positional' 'const int'
|         |-DeclRefExpr 0x55fb1f785088 <col:42> 'P' lvalue ParmVar 0x55fb1f758bc8 'parser' 'P'
|         |-DeclRefExpr 0x55fb1f7850a8 <col:50> 'T1' lvalue ParmVar 0x55fb1f758c68 'x1' 'T1 &'
|         `-DeclRefExpr 0x55fb1f7850c8 <col:54> 'T2' lvalue ParmVar 0x55fb1f758d08 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55fb1f759418 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55fb1f758f10 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55fb1f758f88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55fb1f759008 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55fb1f759378 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55fb1f7590d0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f759148 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55fb1f7591e8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55fb1f759288 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55fb1f785390 <col:66, line:493:5>
|     `-ReturnStmt 0x55fb1f785380 <line:492:9, col:68>
|       `-CallExpr 0x55fb1f785338 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55fb1f785168 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55fb1f7851e8 <col:21> 'const char *' lvalue ParmVar 0x55fb1f7590d0 'keyword' 'const char *'
|         |-BinaryOperator 0x55fb1f7852b8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55fb1f785268 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55fb1f785248 <col:30> 'const int' lvalue Var 0x55fb1f74fa38 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55fb1f7852a0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55fb1f785280 <col:42> 'const int' lvalue Var 0x55fb1f74fb30 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55fb1f7852d8 <col:54> 'P' lvalue ParmVar 0x55fb1f759148 'parser' 'P'
|         |-DeclRefExpr 0x55fb1f7852f8 <col:62> 'T1' lvalue ParmVar 0x55fb1f7591e8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55fb1f785318 <col:66> 'T2' lvalue ParmVar 0x55fb1f759288 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55fb1f759a78 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55fb1f759490 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55fb1f759508 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55fb1f759588 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55fb1f7599d8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55fb1f759650 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f7596d0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55fb1f759748 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55fb1f7597e8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55fb1f759888 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55fb1f785520 <col:74, line:498:5>
|     |-CallExpr 0x55fb1f785498 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55fb1f7853a8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55fb1f7853e8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55fb1f7853f8 <col:30> 'const char *' lvalue ParmVar 0x55fb1f759650 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55fb1f785418 <col:39> 'int' lvalue ParmVar 0x55fb1f7596d0 'flags' 'int'
|     | |-DeclRefExpr 0x55fb1f785438 <col:46> 'P' lvalue ParmVar 0x55fb1f759748 'parser' 'P'
|     | |-DeclRefExpr 0x55fb1f785458 <col:54> 'T1' lvalue ParmVar 0x55fb1f7597e8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55fb1f785478 <col:58> 'T2' lvalue ParmVar 0x55fb1f759888 'x2' 'T2 &'
|     `-ReturnStmt 0x55fb1f785510 <line:497:9, col:17>
|       `-UnaryOperator 0x55fb1f7854f8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55fb1f7854e8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55fb1f759dd8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55fb1f759af8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55fb1f759d38 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55fb1f759bb0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f759c28 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55fb1f785668 <col:52, line:509:5>
|     `-ReturnStmt 0x55fb1f785658 <line:508:9, col:44>
|       `-CallExpr 0x55fb1f785620 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55fb1f785550 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55fb1f7855c0 <col:26> 'const char *' lvalue ParmVar 0x55fb1f759bb0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55fb1f7855e0 <col:35> 'int' 0
|         `-DeclRefExpr 0x55fb1f785600 <col:38> 'P' lvalue ParmVar 0x55fb1f759c28 'parser' 'P'
|-FunctionTemplateDecl 0x55fb1f75a0d8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55fb1f759e40 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55fb1f75a038 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55fb1f759ef0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f759f68 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55fb1f7857a8 <col:54, line:513:5>
|     `-ReturnStmt 0x55fb1f785798 <line:512:9, col:52>
|       `-CallExpr 0x55fb1f785760 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55fb1f785690 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55fb1f785700 <col:26> 'const char *' lvalue ParmVar 0x55fb1f759ef0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55fb1f785720 <col:35> 'const int' lvalue Var 0x55fb1f74fa38 'mandatory' 'const int'
|         `-DeclRefExpr 0x55fb1f785740 <col:46> 'P' lvalue ParmVar 0x55fb1f759f68 'parser' 'P'
|-FunctionTemplateDecl 0x55fb1f75a3d8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55fb1f75a140 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55fb1f75a338 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55fb1f75a1f0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f75a268 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55fb1f7858e8 <col:54, line:517:5>
|     `-ReturnStmt 0x55fb1f7858d8 <line:516:9, col:53>
|       `-CallExpr 0x55fb1f7858a0 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55fb1f7857d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55fb1f785840 <col:26> 'const char *' lvalue ParmVar 0x55fb1f75a1f0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55fb1f785860 <col:35> 'const int' lvalue Var 0x55fb1f74fb30 'positional' 'const int'
|         `-DeclRefExpr 0x55fb1f785880 <col:47> 'P' lvalue ParmVar 0x55fb1f75a268 'parser' 'P'
|-FunctionTemplateDecl 0x55fb1f75a6d8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55fb1f75a440 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55fb1f75a638 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55fb1f75a4f0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f75a568 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55fb1f785ad8 <col:55, line:521:5>
|     `-ReturnStmt 0x55fb1f785ac8 <line:520:9, col:65>
|       `-CallExpr 0x55fb1f785a90 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55fb1f785910 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55fb1f785980 <col:26> 'const char *' lvalue ParmVar 0x55fb1f75a4f0 'keyword' 'const char *'
|         |-BinaryOperator 0x55fb1f785a50 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55fb1f785a00 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55fb1f7859e0 <col:35> 'const int' lvalue Var 0x55fb1f74fa38 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55fb1f785a38 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55fb1f785a18 <col:47> 'const int' lvalue Var 0x55fb1f74fb30 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55fb1f785a70 <col:59> 'P' lvalue ParmVar 0x55fb1f75a568 'parser' 'P'
|-FunctionTemplateDecl 0x55fb1f75aaa8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55fb1f75a740 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55fb1f75aa08 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55fb1f75a7f0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f75a870 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55fb1f75a8e8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55fb1f785c18 <col:63, line:526:5>
|     |-CallExpr 0x55fb1f785ba0 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55fb1f785af0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55fb1f785b30 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55fb1f785b40 <col:35> 'const char *' lvalue ParmVar 0x55fb1f75a7f0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55fb1f785b60 <col:44> 'int' lvalue ParmVar 0x55fb1f75a870 'flags' 'int'
|     | `-DeclRefExpr 0x55fb1f785b80 <col:51> 'P' lvalue ParmVar 0x55fb1f75a8e8 'parser' 'P'
|     `-ReturnStmt 0x55fb1f785c08 <line:525:9, col:17>
|       `-UnaryOperator 0x55fb1f785bf0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55fb1f785be0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55fb1f75aef8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55fb1f75ab18 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55fb1f75ab98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55fb1f75ae58 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55fb1f75ac58 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f75acd0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55fb1f75ad78 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55fb1f785d70 <col:58, line:541:5>
|     `-ReturnStmt 0x55fb1f785d60 <line:540:9, col:39>
|       `-CallExpr 0x55fb1f785d28 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55fb1f785c48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55fb1f785cc8 <col:21> 'const char *' lvalue ParmVar 0x55fb1f75ac58 'keyword' 'const char *'
|         |-DeclRefExpr 0x55fb1f785ce8 <col:30> 'P' lvalue ParmVar 0x55fb1f75acd0 'parser' 'P'
|         `-DeclRefExpr 0x55fb1f785d08 <col:38> 'T' lvalue ParmVar 0x55fb1f75ad78 'x' 'T &'
|-FunctionTemplateDecl 0x55fb1f75b348 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55fb1f75af68 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55fb1f75afe8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55fb1f75b2a8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55fb1f75b0a8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f75b120 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55fb1f75b1c8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55fb1f785ea8 <col:60, line:545:5>
|     `-ReturnStmt 0x55fb1f785e98 <line:544:9, col:41>
|       `-CallExpr 0x55fb1f785e60 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55fb1f785d98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55fb1f785e00 <col:23> 'const char *' lvalue ParmVar 0x55fb1f75b0a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55fb1f785e20 <col:32> 'P' lvalue ParmVar 0x55fb1f75b120 'parser' 'P'
|         `-DeclRefExpr 0x55fb1f785e40 <col:40> 'T' lvalue ParmVar 0x55fb1f75b1c8 'x' 'T &'
|-FunctionTemplateDecl 0x55fb1f75b798 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55fb1f75b3b8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55fb1f75b438 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55fb1f75b6f8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55fb1f75b4f8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f75b570 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55fb1f75b618 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55fb1f785fe0 <col:60, line:549:5>
|     `-ReturnStmt 0x55fb1f785fd0 <line:548:9, col:41>
|       `-CallExpr 0x55fb1f785f98 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55fb1f785ed0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55fb1f785f38 <col:23> 'const char *' lvalue ParmVar 0x55fb1f75b4f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55fb1f785f58 <col:32> 'P' lvalue ParmVar 0x55fb1f75b570 'parser' 'P'
|         `-DeclRefExpr 0x55fb1f785f78 <col:40> 'T' lvalue ParmVar 0x55fb1f75b618 'x' 'T &'
|-FunctionTemplateDecl 0x55fb1f75bbe8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55fb1f75b808 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55fb1f75b888 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55fb1f75bb48 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55fb1f75b948 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f75b9c0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55fb1f75ba68 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55fb1f786118 <col:61, line:553:5>
|     `-ReturnStmt 0x55fb1f786108 <line:552:9, col:42>
|       `-CallExpr 0x55fb1f7860d0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55fb1f786008 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55fb1f786070 <col:24> 'const char *' lvalue ParmVar 0x55fb1f75b948 'keyword' 'const char *'
|         |-DeclRefExpr 0x55fb1f786090 <col:33> 'P' lvalue ParmVar 0x55fb1f75b9c0 'parser' 'P'
|         `-DeclRefExpr 0x55fb1f7860b0 <col:41> 'T' lvalue ParmVar 0x55fb1f75ba68 'x' 'T &'
|-FunctionTemplateDecl 0x55fb1f75c0c8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55fb1f75bc58 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55fb1f75bcd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55fb1f75c028 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55fb1f75bd98 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f75be18 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55fb1f75be90 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55fb1f75bf38 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55fb1f786290 <col:69, line:557:5>
|     `-ReturnStmt 0x55fb1f786280 <line:556:9, col:46>
|       `-CallExpr 0x55fb1f786240 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55fb1f786140 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55fb1f7861c0 <col:21> 'const char *' lvalue ParmVar 0x55fb1f75bd98 'keyword' 'const char *'
|         |-DeclRefExpr 0x55fb1f7861e0 <col:30> 'int' lvalue ParmVar 0x55fb1f75be18 'flags' 'int'
|         |-DeclRefExpr 0x55fb1f786200 <col:37> 'P' lvalue ParmVar 0x55fb1f75be90 'parser' 'P'
|         `-DeclRefExpr 0x55fb1f786220 <col:45> 'T' lvalue ParmVar 0x55fb1f75bf38 'x' 'T &'
|-FunctionTemplateDecl 0x55fb1f75c3d8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55fb1f75c140 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55fb1f75c338 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55fb1f75c1f0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f75c268 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55fb1f7863d0 <col:56, line:571:5>
|     `-ReturnStmt 0x55fb1f7863c0 <line:570:9, col:48>
|       `-CallExpr 0x55fb1f786388 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55fb1f7862b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55fb1f786328 <col:30> 'const char *' lvalue ParmVar 0x55fb1f75c1f0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55fb1f786348 <col:39> 'int' 0
|         `-DeclRefExpr 0x55fb1f786368 <col:42> 'P' lvalue ParmVar 0x55fb1f75c268 'parser' 'P'
|-FunctionTemplateDecl 0x55fb1f75c768 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55fb1f75c440 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55fb1f75c6c8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55fb1f75c4f0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f75c570 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55fb1f75c5e8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55fb1f7865a0 <col:67, line:576:5>
|     |-CallExpr 0x55fb1f786528 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55fb1f7863e8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55fb1f786428 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55fb1f786438 <col:39> 'const char *' lvalue ParmVar 0x55fb1f75c4f0 'keyword' 'const char *'
|     | |-BinaryOperator 0x55fb1f7864e8 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55fb1f786498 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55fb1f786458 <col:48> 'int' lvalue ParmVar 0x55fb1f75c570 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55fb1f7864d0 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55fb1f7864b0 <col:56> 'const int' lvalue Var 0x55fb1f74fd20 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55fb1f786508 <col:68> 'P' lvalue ParmVar 0x55fb1f75c5e8 'parser' 'P'
|     `-ReturnStmt 0x55fb1f786590 <line:575:9, col:17>
|       `-UnaryOperator 0x55fb1f786578 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55fb1f786568 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55fb1f75cbb8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55fb1f75c7d8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55fb1f75c858 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55fb1f75cb18 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55fb1f75c918 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f75c990 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55fb1f75ca38 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55fb1f786710 <col:62, line:592:5>
|     `-ReturnStmt 0x55fb1f786700 <line:591:9, col:51>
|       `-CallExpr 0x55fb1f7866c0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55fb1f7865d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55fb1f786640 <col:30> 'const char *' lvalue ParmVar 0x55fb1f75c918 'keyword' 'const char *'
|         |-IntegerLiteral 0x55fb1f786660 <col:39> 'int' 0
|         |-DeclRefExpr 0x55fb1f786680 <col:42> 'P' lvalue ParmVar 0x55fb1f75c990 'parser' 'P'
|         `-DeclRefExpr 0x55fb1f7866a0 <col:50> 'T' lvalue ParmVar 0x55fb1f75ca38 'x' 'T &'
|-FunctionTemplateDecl 0x55fb1f75d098 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55fb1f75cc28 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55fb1f75cca8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55fb1f75cff8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55fb1f75cd68 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f75cde8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55fb1f75ce60 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55fb1f75cf08 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55fb1f786908 <col:73, line:597:5>
|     |-CallExpr 0x55fb1f786888 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55fb1f786728 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55fb1f786768 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55fb1f786778 <col:39> 'const char *' lvalue ParmVar 0x55fb1f75cd68 'keyword' 'const char *'
|     | |-BinaryOperator 0x55fb1f786828 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55fb1f7867d8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55fb1f786798 <col:48> 'int' lvalue ParmVar 0x55fb1f75cde8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55fb1f786810 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55fb1f7867f0 <col:56> 'const int' lvalue Var 0x55fb1f74fd20 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55fb1f786848 <col:68> 'P' lvalue ParmVar 0x55fb1f75ce60 'parser' 'P'
|     | `-DeclRefExpr 0x55fb1f786868 <col:76> 'T' lvalue ParmVar 0x55fb1f75cf08 'x' 'T &'
|     `-ReturnStmt 0x55fb1f7868f8 <line:596:9, col:17>
|       `-UnaryOperator 0x55fb1f7868e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55fb1f7868d0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55fb1f75d648 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55fb1f75d110 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55fb1f75d188 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55fb1f75d5a8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55fb1f75d248 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f75d2c0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55fb1f75d480 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55fb1f786a78 <col:65, line:614:5>
|     `-ReturnStmt 0x55fb1f786a68 <line:613:9, col:46>
|       `-CallExpr 0x55fb1f786a28 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55fb1f786938 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55fb1f7869a8 <col:25> 'const char *' lvalue ParmVar 0x55fb1f75d248 'keyword' 'const char *'
|         |-IntegerLiteral 0x55fb1f7869c8 <col:34> 'int' 0
|         |-DeclRefExpr 0x55fb1f7869e8 <col:37> 'P' lvalue ParmVar 0x55fb1f75d2c0 'parser' 'P'
|         `-DeclRefExpr 0x55fb1f786a08 <col:45> 'Vector<T>' lvalue ParmVar 0x55fb1f75d480 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55fb1f75da78 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55fb1f75d6b8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55fb1f75d9d8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55fb1f75d770 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f75d8c0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55fb1f786c90 <col:55, line:618:5>
|     `-ReturnStmt 0x55fb1f786c80 <line:617:9, col:55>
|       `-CallExpr 0x55fb1f786c40 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55fb1f786aa0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55fb1f786b10 <col:25> 'const char *' lvalue ParmVar 0x55fb1f75d770 'keyword' 'const char *'
|         |-IntegerLiteral 0x55fb1f786b30 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55fb1f786c00 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55fb1f786c20 <col:54> 'Vector<T>' lvalue ParmVar 0x55fb1f75d8c0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55fb1f75e048 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55fb1f75dae0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55fb1f75db58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55fb1f75dfa8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55fb1f75dc18 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f75dc98 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55fb1f75dd10 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55fb1f75de60 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55fb1f786e88 <col:76, line:623:5>
|     |-CallExpr 0x55fb1f786e08 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55fb1f786ca8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55fb1f786ce8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55fb1f786cf8 <col:34> 'const char *' lvalue ParmVar 0x55fb1f75dc18 'keyword' 'const char *'
|     | |-BinaryOperator 0x55fb1f786da8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55fb1f786d58 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55fb1f786d18 <col:43> 'int' lvalue ParmVar 0x55fb1f75dc98 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55fb1f786d90 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55fb1f786d70 <col:51> 'const int' lvalue Var 0x55fb1f74fd20 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55fb1f786dc8 <col:63> 'P' lvalue ParmVar 0x55fb1f75dd10 'parser' 'P'
|     | `-DeclRefExpr 0x55fb1f786de8 <col:71> 'Vector<T>' lvalue ParmVar 0x55fb1f75de60 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55fb1f786e78 <line:622:9, col:17>
|       `-UnaryOperator 0x55fb1f786e60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55fb1f786e50 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55fb1f75e588 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55fb1f75e0c0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55fb1f75e138 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55fb1f75e4e8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55fb1f75e1f8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f75e278 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55fb1f75e3c0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55fb1f7870f0 <col:66, line:627:5>
|     `-ReturnStmt 0x55fb1f7870e0 <line:626:9, col:59>
|       `-CallExpr 0x55fb1f7870a0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55fb1f786eb8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55fb1f786f28 <col:25> 'const char *' lvalue ParmVar 0x55fb1f75e1f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55fb1f786f48 <col:34> 'int' lvalue ParmVar 0x55fb1f75e278 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55fb1f787060 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55fb1f787080 <col:58> 'Vector<T>' lvalue ParmVar 0x55fb1f75e3c0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55fb1f75e618 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55fb1f787170 <col:25, line:633:5>
|   `-ReturnStmt 0x55fb1f787160 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55fb1f787148 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55fb1f787118 <col:16> 'const bool' lvalue ->_status 0x55fb1f769fa8
|         `-CXXThisExpr 0x55fb1f787108 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55fb1f75e798 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55fb1f75e6d0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55fb1f787258 <col:27, line:639:5>
|   |-BinaryOperator 0x55fb1f787200 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55fb1f787188 <col:9> 'bool' lvalue ParmVar 0x55fb1f75e6d0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55fb1f7871e8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55fb1f7871b8 <col:13> 'bool' lvalue ->_status 0x55fb1f769fa8
|   |     `-CXXThisExpr 0x55fb1f7871a8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55fb1f787248 <line:638:9, col:17>
|     `-UnaryOperator 0x55fb1f787230 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55fb1f787220 <col:17> 'Args *' this
|-CXXMethodDecl 0x55fb1f75e918 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55fb1f75e858 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55fb1f787348 <col:39, line:644:5>
|   |-BinaryOperator 0x55fb1f7872f0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55fb1f787278 <col:9> 'bool' lvalue ParmVar 0x55fb1f75e858 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55fb1f7872d8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55fb1f7872a8 <col:13> 'const bool' lvalue ->_status 0x55fb1f769fa8
|   |     `-CXXThisExpr 0x55fb1f787298 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55fb1f787338 <line:643:9, col:17>
|     `-UnaryOperator 0x55fb1f787320 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55fb1f787310 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55fb1f75e9e0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55fb1f7873f0 <col:30, line:651:5>
|   `-ReturnStmt 0x55fb1f7873e0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55fb1f7873c8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55fb1f787398 <col:16> 'bool' lvalue ->_read_status 0x55fb1f661580
|         `-ImplicitCastExpr 0x55fb1f787378 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55fb1f787368 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55fb1f75eb28 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55fb1f75ea98 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55fb1f7874f8 <col:32, line:658:5>
|   |-BinaryOperator 0x55fb1f7874a0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55fb1f787408 <col:9> 'bool' lvalue ParmVar 0x55fb1f75ea98 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55fb1f787488 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55fb1f787458 <col:13> 'bool' lvalue ->_read_status 0x55fb1f661580
|   |     `-ImplicitCastExpr 0x55fb1f787438 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55fb1f787428 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55fb1f7874e8 <line:657:9, col:17>
|     `-UnaryOperator 0x55fb1f7874d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55fb1f7874c0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55fb1f75ec78 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55fb1f75ebe8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55fb1f787608 <col:44, line:663:5>
|   |-BinaryOperator 0x55fb1f7875b0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55fb1f787518 <col:9> 'bool' lvalue ParmVar 0x55fb1f75ebe8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55fb1f787598 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55fb1f787568 <col:13> 'bool' lvalue ->_read_status 0x55fb1f661580
|   |     `-ImplicitCastExpr 0x55fb1f787548 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55fb1f787538 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55fb1f7875f8 <line:662:9, col:17>
|     `-UnaryOperator 0x55fb1f7875e0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55fb1f7875d0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55fb1f75ed40 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55fb1f75ee08 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55fb1f75eed0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55fb1f75ef98 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55fb1f75f2a8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55fb1f75f038 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55fb1f75f208 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55fb1f75f118 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55fb1f7879c0 <col:19, line:706:5>
|     `-IfStmt 0x55fb1f787998 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55fb1f787708 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55fb1f7878c8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55fb1f787898 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55fb1f787858 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55fb1f787760 <col:42> '<bound member function type>' ->simple_slot 0x55fb1f782450
|       |     | `-CXXThisExpr 0x55fb1f787750 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55fb1f7877f8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55fb1f7877b0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55fb1f4e9608
|       |     | `-DeclRefExpr 0x55fb1f787790 <col:55> 'T' lvalue ParmVar 0x55fb1f75f118 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55fb1f787838 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55fb1f787988 <line:705:13, col:34>
|         `-CallExpr 0x55fb1f787960 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55fb1f7878e8 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55fb1f787940 <col:33> 'T' lvalue ParmVar 0x55fb1f75f118 'x' 'T &'
|-FunctionTemplateDecl 0x55fb1f7650c8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55fb1f764e60 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55fb1f765028 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55fb1f764f38 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55fb1f787da0 <col:31, line:717:5>
|     |-DeclStmt 0x55fb1f787b00 <line:713:9, col:23>
|     | `-VarDecl 0x55fb1f7879e8 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55fb1f787ad8 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55fb1f787a60 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55fb1f787ab8 <col:21> 'T' lvalue ParmVar 0x55fb1f764f38 'x' 'T &'
|     |-IfStmt 0x55fb1f787d50 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55fb1f787bf8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55fb1f787d30 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55fb1f787cd0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55fb1f787c60 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55fb1f6a0708 0x55fb1f6a0328 0x55fb1f69ff58 0x55fb1f69fb78 0x55fb1f69f798 0x55fb1f69f3c8
|     |   | `-DeclRefExpr 0x55fb1f787c40 <col:14> 'T *' lvalue Var 0x55fb1f7879e8 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55fb1f787d10 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55fb1f787d88 <line:716:9, col:16>
|       `-DeclRefExpr 0x55fb1f787d68 <col:16> 'T *' lvalue Var 0x55fb1f7879e8 's' 'T *'
|-FunctionTemplateDecl 0x55fb1f7654d8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55fb1f765128 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55fb1f7651a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55fb1f765438 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55fb1f765288 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55fb1f765328 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55fb1f7880b0 <col:37, line:726:5>
|     |-IfStmt 0x55fb1f788040 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55fb1f788060 <line:723:13, col:26>
|     | | `-VarDecl 0x55fb1f787e08 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55fb1f787ef8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55fb1f787e80 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55fb1f787ed8 <col:25> 'T' lvalue ParmVar 0x55fb1f765288 'x' 'T &'
|     | |-DeclRefExpr 0x55fb1f787f20 <col:16> 'T *' lvalue Var 0x55fb1f787e08 's' 'T *'
|     | `-BinaryOperator 0x55fb1f788020 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55fb1f787fd0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55fb1f787f60 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55fb1f6a0708 0x55fb1f6a0328 0x55fb1f69ff58 0x55fb1f69fb78 0x55fb1f69f798 0x55fb1f69f3c8
|     |   | `-DeclRefExpr 0x55fb1f787f40 <col:14> 'T *' lvalue Var 0x55fb1f787e08 's' 'T *'
|     |   `-DeclRefExpr 0x55fb1f788000 <col:18> 'const V' lvalue ParmVar 0x55fb1f765328 'value' 'const V &'
|     `-ReturnStmt 0x55fb1f7880a0 <line:725:9, col:17>
|       `-UnaryOperator 0x55fb1f788088 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55fb1f788078 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55fb1f7658d8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55fb1f765540 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55fb1f765838 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55fb1f7655f0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f765670 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55fb1f765718 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55fb1f788ed0 <col:65, line:737:5>
|     |-DeclStmt 0x55fb1f788148 <line:732:9, col:26>
|     | `-VarDecl 0x55fb1f7880e0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55fb1f788e98 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55fb1f788eb8 <line:733:13, col:58>
|       | `-VarDecl 0x55fb1f788170 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55fb1f788350 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55fb1f788320 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55fb1f788308 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55fb1f7882e8 <col:26, col:58> 'String' (CXXTemporary 0x55fb1f7882e8)
|       |           `-CXXMemberCallExpr 0x55fb1f788278 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55fb1f7881e8 <col:26> '<bound member function type>' ->find 0x55fb1f781a68
|       |             | `-CXXThisExpr 0x55fb1f7881d8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55fb1f7882b0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55fb1f788218 <col:31> 'const char *' lvalue ParmVar 0x55fb1f7655f0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55fb1f7882c8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55fb1f788238 <col:40> 'int' lvalue ParmVar 0x55fb1f765670 'flags' 'int'
|       |             `-DeclRefExpr 0x55fb1f788258 <col:47> 'Args::Slot *' lvalue Var 0x55fb1f7880e0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55fb1f788408 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55fb1f7883f0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55fb1f7883d0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55fb1f7883a0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55fb1f4ac5d8
|       |       `-ImplicitCastExpr 0x55fb1f788388 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55fb1f788368 <col:20> 'String' lvalue Var 0x55fb1f788170 'str' 'String'
|       `-CompoundStmt 0x55fb1f788e78 <col:61, line:736:9>
|         |-DeclStmt 0x55fb1f7888c0 <line:734:13, col:76>
|         | `-VarDecl 0x55fb1f788458 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55fb1f788890 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55fb1f788800 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55fb1f788848 <col:60> 'T' lvalue ParmVar 0x55fb1f765718 'variable' 'T &'
|         |     `-UnaryOperator 0x55fb1f788878 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55fb1f788868 <col:71> 'Args *' this
|         `-CallExpr 0x55fb1f788e48 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55fb1f7888e8 <col:13> '<bound member function type>' ->postparse 0x55fb1f781c78
|           | `-CXXThisExpr 0x55fb1f7888d8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55fb1f788e08 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55fb1f788918 <col:23> 'T *' lvalue Var 0x55fb1f788458 's' 'T *'
|           | `-CallExpr 0x55fb1f788dc8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55fb1f788ba0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55fb1f788ca0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55fb1f788cc0 <col:86> 'String' lvalue Var 0x55fb1f788170 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55fb1f788d70 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55fb1f788d00 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55fb1f6a0708 0x55fb1f6a0328 0x55fb1f69ff58 0x55fb1f69fb78 0x55fb1f69f798 0x55fb1f69f3c8
|           |   | `-DeclRefExpr 0x55fb1f788ce0 <col:92> 'T *' lvalue Var 0x55fb1f788458 's' 'T *'
|           |   `-UnaryOperator 0x55fb1f788db0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55fb1f788da0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55fb1f788e28 <col:103> 'Args::Slot *' lvalue Var 0x55fb1f7880e0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55fb1f765e28 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55fb1f765948 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55fb1f7659c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55fb1f765d88 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55fb1f765a88 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f765b08 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55fb1f765ba8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55fb1f765c48 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55fb1f78c620 <col:88, line:745:5>
|     |-DeclStmt 0x55fb1f788f68 <line:741:9, col:26>
|     | `-VarDecl 0x55fb1f788f00 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55fb1f789188 <line:742:9, col:55>
|     | `-VarDecl 0x55fb1f788f90 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55fb1f789170 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55fb1f789140 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55fb1f789128 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55fb1f789108 <col:22, col:54> 'String' (CXXTemporary 0x55fb1f789108)
|     |           `-CXXMemberCallExpr 0x55fb1f789098 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55fb1f789008 <col:22> '<bound member function type>' ->find 0x55fb1f781a68
|     |             | `-CXXThisExpr 0x55fb1f788ff8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55fb1f7890d0 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55fb1f789038 <col:27> 'const char *' lvalue ParmVar 0x55fb1f765a88 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55fb1f7890e8 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55fb1f789058 <col:36> 'int' lvalue ParmVar 0x55fb1f765b08 'flags' 'int'
|     |             `-DeclRefExpr 0x55fb1f789078 <col:43> 'Args::Slot *' lvalue Var 0x55fb1f788f00 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55fb1f78be10 <line:743:9, col:72>
|     | `-VarDecl 0x55fb1f78ba80 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55fb1f78bde0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55fb1f78bd50 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55fb1f78bd98 <col:56> 'T' lvalue ParmVar 0x55fb1f765ba8 'variable' 'T &'
|     |     `-UnaryOperator 0x55fb1f78bdc8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55fb1f78bdb8 <col:67> 'Args *' this
|     `-CallExpr 0x55fb1f78c5f0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55fb1f78be38 <col:9> '<bound member function type>' ->postparse 0x55fb1f781c78
|       | `-CXXThisExpr 0x55fb1f78be28 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55fb1f78c5b0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55fb1f78be68 <col:19> 'T *' lvalue Var 0x55fb1f78ba80 's' 'T *'
|       | `-ParenExpr 0x55fb1f78c590 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55fb1f78c560 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55fb1f78c548 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55fb1f78c530 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55fb1f78c510 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55fb1f78c4e0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55fb1f4ac5d8
|       |     |       `-ImplicitCastExpr 0x55fb1f78c4c8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55fb1f78be88 <col:25> 'String' lvalue Var 0x55fb1f788f90 'str' 'String'
|       |     |-CallExpr 0x55fb1f78c338 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55fb1f78c110 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55fb1f78c210 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55fb1f78c230 <col:89> 'String' lvalue Var 0x55fb1f788f90 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55fb1f78c2e0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55fb1f78c270 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55fb1f6a0708 0x55fb1f6a0328 0x55fb1f69ff58 0x55fb1f69fb78 0x55fb1f69f798 0x55fb1f69f3c8
|       |     | | `-DeclRefExpr 0x55fb1f78c250 <col:95> 'T *' lvalue Var 0x55fb1f78ba80 's' 'T *'
|       |     | `-UnaryOperator 0x55fb1f78c320 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55fb1f78c310 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55fb1f78c4a8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55fb1f78c488 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55fb1f78c458 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55fb1f78c408 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55fb1f78c398 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55fb1f6a0708 0x55fb1f6a0328 0x55fb1f69ff58 0x55fb1f69fb78 0x55fb1f69f798 0x55fb1f69f3c8
|       |         | | `-DeclRefExpr 0x55fb1f78c378 <col:109> 'T *' lvalue Var 0x55fb1f78ba80 's' 'T *'
|       |         | `-DeclRefExpr 0x55fb1f78c438 <col:113> 'const V' lvalue ParmVar 0x55fb1f765c48 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55fb1f78c478 <col:120> 'bool' true
|       `-DeclRefExpr 0x55fb1f78c5d0 <col:128> 'Args::Slot *' lvalue Var 0x55fb1f788f00 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55fb1f766358 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55fb1f765ea0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55fb1f765f18 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55fb1f7662b8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55fb1f765fd8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f766058 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55fb1f7660d0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55fb1f766178 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55fb1f78d218 <col:75, line:754:5>
|     |-DeclStmt 0x55fb1f78c6c8 <line:749:9, col:26>
|     | `-VarDecl 0x55fb1f78c660 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55fb1f78d1e0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55fb1f78d200 <line:750:13, col:58>
|       | `-VarDecl 0x55fb1f78c6f0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55fb1f78c8d0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55fb1f78c8a0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55fb1f78c888 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55fb1f78c868 <col:26, col:58> 'String' (CXXTemporary 0x55fb1f78c868)
|       |           `-CXXMemberCallExpr 0x55fb1f78c7f8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55fb1f78c768 <col:26> '<bound member function type>' ->find 0x55fb1f781a68
|       |             | `-CXXThisExpr 0x55fb1f78c758 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55fb1f78c830 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55fb1f78c798 <col:31> 'const char *' lvalue ParmVar 0x55fb1f765fd8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55fb1f78c848 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55fb1f78c7b8 <col:40> 'int' lvalue ParmVar 0x55fb1f766058 'flags' 'int'
|       |             `-DeclRefExpr 0x55fb1f78c7d8 <col:47> 'Args::Slot *' lvalue Var 0x55fb1f78c660 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55fb1f78c988 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55fb1f78c970 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55fb1f78c950 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55fb1f78c920 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55fb1f4ac5d8
|       |       `-ImplicitCastExpr 0x55fb1f78c908 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55fb1f78c8e8 <col:20> 'String' lvalue Var 0x55fb1f78c6f0 'str' 'String'
|       `-CompoundStmt 0x55fb1f78d1c0 <col:61, line:753:9>
|         |-DeclStmt 0x55fb1f78cd60 <line:751:13, col:63>
|         | `-VarDecl 0x55fb1f78c9d8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55fb1f78cd30 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55fb1f78cca0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55fb1f78cce8 <col:47> 'T' lvalue ParmVar 0x55fb1f766178 'variable' 'T &'
|         |     `-UnaryOperator 0x55fb1f78cd18 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55fb1f78cd08 <col:58> 'Args *' this
|         `-CallExpr 0x55fb1f78d190 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55fb1f78cd88 <col:13> '<bound member function type>' ->postparse 0x55fb1f781c78
|           | `-CXXThisExpr 0x55fb1f78cd78 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55fb1f78d150 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55fb1f78cdb8 <col:23> 'T *' lvalue Var 0x55fb1f78c9d8 's' 'T *'
|           | `-CallExpr 0x55fb1f78d110 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55fb1f78cfa0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55fb1f78cfe8 <col:56> 'P' lvalue ParmVar 0x55fb1f7660d0 'parser' 'P'
|           |   |-DeclRefExpr 0x55fb1f78d008 <col:64> 'String' lvalue Var 0x55fb1f78c6f0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55fb1f78d0b8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55fb1f78d048 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55fb1f6a0708 0x55fb1f6a0328 0x55fb1f69ff58 0x55fb1f69fb78 0x55fb1f69f798 0x55fb1f69f3c8
|           |   | `-DeclRefExpr 0x55fb1f78d028 <col:70> 'T *' lvalue Var 0x55fb1f78c9d8 's' 'T *'
|           |   `-UnaryOperator 0x55fb1f78d0f8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55fb1f78d0e8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55fb1f78d170 <col:81> 'Args::Slot *' lvalue Var 0x55fb1f78c660 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55fb1f7669b8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55fb1f7663d0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55fb1f766448 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55fb1f7664c8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55fb1f766918 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55fb1f766590 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f766610 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55fb1f766688 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55fb1f766728 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55fb1f7667c8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55fb1f78dfa8 <col:98, line:762:5>
|     |-DeclStmt 0x55fb1f78d2b0 <line:758:9, col:26>
|     | `-VarDecl 0x55fb1f78d248 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55fb1f78d4d0 <line:759:9, col:55>
|     | `-VarDecl 0x55fb1f78d2d8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55fb1f78d4b8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55fb1f78d488 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55fb1f78d470 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55fb1f78d450 <col:22, col:54> 'String' (CXXTemporary 0x55fb1f78d450)
|     |           `-CXXMemberCallExpr 0x55fb1f78d3e0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55fb1f78d350 <col:22> '<bound member function type>' ->find 0x55fb1f781a68
|     |             | `-CXXThisExpr 0x55fb1f78d340 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55fb1f78d418 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55fb1f78d380 <col:27> 'const char *' lvalue ParmVar 0x55fb1f766590 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55fb1f78d430 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55fb1f78d3a0 <col:36> 'int' lvalue ParmVar 0x55fb1f766610 'flags' 'int'
|     |             `-DeclRefExpr 0x55fb1f78d3c0 <col:43> 'Args::Slot *' lvalue Var 0x55fb1f78d248 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55fb1f78d8f0 <line:760:9, col:59>
|     | `-VarDecl 0x55fb1f78d528 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55fb1f78d8c0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55fb1f78d830 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55fb1f78d878 <col:43> 'T' lvalue ParmVar 0x55fb1f766728 'variable' 'T &'
|     |     `-UnaryOperator 0x55fb1f78d8a8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55fb1f78d898 <col:54> 'Args *' this
|     `-CallExpr 0x55fb1f78df78 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55fb1f78d918 <col:9> '<bound member function type>' ->postparse 0x55fb1f781c78
|       | `-CXXThisExpr 0x55fb1f78d908 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55fb1f78df38 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55fb1f78d948 <col:19> 'T *' lvalue Var 0x55fb1f78d528 's' 'T *'
|       | `-ParenExpr 0x55fb1f78df18 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55fb1f78dee8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55fb1f78ded0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55fb1f78deb8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55fb1f78de98 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55fb1f78de68 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55fb1f4ac5d8
|       |     |       `-ImplicitCastExpr 0x55fb1f78de50 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55fb1f78d968 <col:25> 'String' lvalue Var 0x55fb1f78d2d8 'str' 'String'
|       |     |-CallExpr 0x55fb1f78dcc0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55fb1f78db50 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55fb1f78db98 <col:59> 'P' lvalue ParmVar 0x55fb1f766688 'parser' 'P'
|       |     | |-DeclRefExpr 0x55fb1f78dbb8 <col:67> 'String' lvalue Var 0x55fb1f78d2d8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55fb1f78dc68 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55fb1f78dbf8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55fb1f6a0708 0x55fb1f6a0328 0x55fb1f69ff58 0x55fb1f69fb78 0x55fb1f69f798 0x55fb1f69f3c8
|       |     | | `-DeclRefExpr 0x55fb1f78dbd8 <col:73> 'T *' lvalue Var 0x55fb1f78d528 's' 'T *'
|       |     | `-UnaryOperator 0x55fb1f78dca8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55fb1f78dc98 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55fb1f78de30 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55fb1f78de10 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55fb1f78dde0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55fb1f78dd90 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55fb1f78dd20 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55fb1f6a0708 0x55fb1f6a0328 0x55fb1f69ff58 0x55fb1f69fb78 0x55fb1f69f798 0x55fb1f69f3c8
|       |         | | `-DeclRefExpr 0x55fb1f78dd00 <col:87> 'T *' lvalue Var 0x55fb1f78d528 's' 'T *'
|       |         | `-DeclRefExpr 0x55fb1f78ddc0 <col:91> 'const V' lvalue ParmVar 0x55fb1f7667c8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55fb1f78de00 <col:98> 'bool' true
|       `-DeclRefExpr 0x55fb1f78df58 <col:106> 'Args::Slot *' lvalue Var 0x55fb1f78d248 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55fb1f767028 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55fb1f766a38 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55fb1f766ab8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55fb1f766b38 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55fb1f766f88 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55fb1f766c00 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f766c80 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55fb1f766cf8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55fb1f766d98 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55fb1f766e38 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55fb1f78ef88 <col:60, line:773:5>
|     |-DeclStmt 0x55fb1f78e050 <line:767:9, col:26>
|     | `-VarDecl 0x55fb1f78dfe8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55fb1f78ef50 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55fb1f78ef70 <line:768:13, col:58>
|       | `-VarDecl 0x55fb1f78e078 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55fb1f78e258 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55fb1f78e228 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55fb1f78e210 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55fb1f78e1f0 <col:26, col:58> 'String' (CXXTemporary 0x55fb1f78e1f0)
|       |           `-CXXMemberCallExpr 0x55fb1f78e180 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55fb1f78e0f0 <col:26> '<bound member function type>' ->find 0x55fb1f781a68
|       |             | `-CXXThisExpr 0x55fb1f78e0e0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55fb1f78e1b8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55fb1f78e120 <col:31> 'const char *' lvalue ParmVar 0x55fb1f766c00 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55fb1f78e1d0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55fb1f78e140 <col:40> 'int' lvalue ParmVar 0x55fb1f766c80 'flags' 'int'
|       |             `-DeclRefExpr 0x55fb1f78e160 <col:47> 'Args::Slot *' lvalue Var 0x55fb1f78dfe8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55fb1f78e310 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55fb1f78e2f8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55fb1f78e2d8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55fb1f78e2a8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55fb1f4ac5d8
|       |       `-ImplicitCastExpr 0x55fb1f78e290 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55fb1f78e270 <col:20> 'String' lvalue Var 0x55fb1f78e078 'str' 'String'
|       `-CompoundStmt 0x55fb1f78ef28 <col:61, line:772:9>
|         |-DeclStmt 0x55fb1f78e650 <line:769:13, col:66>
|         | `-VarDecl 0x55fb1f78e368 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55fb1f78e620 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55fb1f78e590 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55fb1f78e5d8 <col:49> 'T1' lvalue ParmVar 0x55fb1f766d98 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55fb1f78e608 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55fb1f78e5f8 <col:61> 'Args *' this
|         |-DeclStmt 0x55fb1f78e9c0 <line:770:13, col:66>
|         | `-VarDecl 0x55fb1f78e6d8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55fb1f78e990 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55fb1f78e900 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55fb1f78e948 <col:49> 'T2' lvalue ParmVar 0x55fb1f766e38 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55fb1f78e978 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55fb1f78e968 <col:61> 'Args *' this
|         `-CallExpr 0x55fb1f78eef8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55fb1f78e9e8 <col:13> '<bound member function type>' ->postparse 0x55fb1f781c78
|           | `-CXXThisExpr 0x55fb1f78e9d8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55fb1f78eeb8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55fb1f78ea58 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55fb1f78ea18 <col:23> 'T1 *' lvalue Var 0x55fb1f78e368 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55fb1f78ea38 <col:29> 'T2 *' lvalue Var 0x55fb1f78e6d8 's2' 'T2 *'
|           | `-CallExpr 0x55fb1f78ee70 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55fb1f78ec40 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55fb1f78ec88 <col:63> 'P' lvalue ParmVar 0x55fb1f766cf8 'parser' 'P'
|           |   |-DeclRefExpr 0x55fb1f78eca8 <col:71> 'String' lvalue Var 0x55fb1f78e078 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55fb1f78ed58 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55fb1f78ece8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55fb1f6a0708 0x55fb1f6a0328 0x55fb1f69ff58 0x55fb1f69fb78 0x55fb1f69f798 0x55fb1f69f3c8
|           |   | `-DeclRefExpr 0x55fb1f78ecc8 <col:77> 'T1 *' lvalue Var 0x55fb1f78e368 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55fb1f78ee18 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55fb1f78eda8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55fb1f6a0708 0x55fb1f6a0328 0x55fb1f69ff58 0x55fb1f69fb78 0x55fb1f69f798 0x55fb1f69f3c8
|           |   | `-DeclRefExpr 0x55fb1f78ed88 <col:82> 'T2 *' lvalue Var 0x55fb1f78e6d8 's2' 'T2 *'
|           |   `-UnaryOperator 0x55fb1f78ee58 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55fb1f78ee48 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55fb1f78eed8 <col:94> 'Args::Slot *' lvalue Var 0x55fb1f78dfe8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55fb1f767418 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55fb1f7670a8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55fb1f767378 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55fb1f767160 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f7671e0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55fb1f767258 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55fb1f78f4a0 <col:67, line:780:5>
|     |-DeclStmt 0x55fb1f78f020 <line:777:9, col:26>
|     | `-VarDecl 0x55fb1f78efb8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55fb1f78f468 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55fb1f78f488 <line:778:13, col:58>
|       | `-VarDecl 0x55fb1f78f048 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55fb1f78f228 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55fb1f78f1f8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55fb1f78f1e0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55fb1f78f1c0 <col:26, col:58> 'String' (CXXTemporary 0x55fb1f78f1c0)
|       |           `-CXXMemberCallExpr 0x55fb1f78f150 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55fb1f78f0c0 <col:26> '<bound member function type>' ->find 0x55fb1f781a68
|       |             | `-CXXThisExpr 0x55fb1f78f0b0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55fb1f78f188 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55fb1f78f0f0 <col:31> 'const char *' lvalue ParmVar 0x55fb1f767160 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55fb1f78f1a0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55fb1f78f110 <col:40> 'int' lvalue ParmVar 0x55fb1f7671e0 'flags' 'int'
|       |             `-DeclRefExpr 0x55fb1f78f130 <col:47> 'Args::Slot *' lvalue Var 0x55fb1f78efb8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55fb1f78f2e0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55fb1f78f2c8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55fb1f78f2a8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55fb1f78f278 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55fb1f4ac5d8
|       |       `-ImplicitCastExpr 0x55fb1f78f260 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55fb1f78f240 <col:20> 'String' lvalue Var 0x55fb1f78f048 'str' 'String'
|       `-CallExpr 0x55fb1f78f438 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55fb1f78f308 <col:13> '<bound member function type>' ->postparse 0x55fb1f781c78
|         | `-CXXThisExpr 0x55fb1f78f2f8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55fb1f78f3e8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55fb1f78f358 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55fb1f78f338 <col:23> 'P' lvalue ParmVar 0x55fb1f767258 'parser' 'P'
|         | |-DeclRefExpr 0x55fb1f78f3a0 <col:36> 'String' lvalue Var 0x55fb1f78f048 'str' 'String'
|         | `-UnaryOperator 0x55fb1f78f3d0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55fb1f78f3c0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55fb1f78f418 <col:49> 'Args::Slot *' lvalue Var 0x55fb1f78efb8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55fb1f7677b8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55fb1f767488 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55fb1f767718 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55fb1f767540 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f7675c0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55fb1f767638 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55fb1f78fe10 <col:71, line:792:5>
|     |-DeclStmt 0x55fb1f78f538 <line:784:9, col:26>
|     | `-VarDecl 0x55fb1f78f4d0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55fb1f78f608 <line:785:9, col:29>
|     | `-VarDecl 0x55fb1f78f568 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55fb1f78f5f0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55fb1f78f5d0 <col:28> 'int' 1
|     |-WhileStmt 0x55fb1f78fcc0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55fb1f78fce0 <line:786:16, col:61>
|     | | `-VarDecl 0x55fb1f78f630 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55fb1f78f810 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55fb1f78f7e0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55fb1f78f7c8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55fb1f78f7a8 <col:29, col:61> 'String' (CXXTemporary 0x55fb1f78f7a8)
|     | |           `-CXXMemberCallExpr 0x55fb1f78f738 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55fb1f78f6a8 <col:29> '<bound member function type>' ->find 0x55fb1f781a68
|     | |             | `-CXXThisExpr 0x55fb1f78f698 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55fb1f78f770 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55fb1f78f6d8 <col:34> 'const char *' lvalue ParmVar 0x55fb1f767540 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55fb1f78f788 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55fb1f78f6f8 <col:43> 'int' lvalue ParmVar 0x55fb1f7675c0 'flags' 'int'
|     | |             `-DeclRefExpr 0x55fb1f78f718 <col:50> 'Args::Slot *' lvalue Var 0x55fb1f78f4d0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55fb1f78f8c8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55fb1f78f8b0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55fb1f78f890 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55fb1f78f860 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55fb1f4ac5d8
|     | |       `-ImplicitCastExpr 0x55fb1f78f848 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55fb1f78f828 <col:23> 'String' lvalue Var 0x55fb1f78f630 'str' 'String'
|     | `-CompoundStmt 0x55fb1f78fc98 <col:64, line:790:9>
|     |   |-CallExpr 0x55fb1f78fa20 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55fb1f78f8f0 <col:13> '<bound member function type>' ->postparse 0x55fb1f781c78
|     |   | | `-CXXThisExpr 0x55fb1f78f8e0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55fb1f78f9d0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55fb1f78f940 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55fb1f78f920 <col:23> 'P' lvalue ParmVar 0x55fb1f767638 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55fb1f78f988 <col:36> 'String' lvalue Var 0x55fb1f78f630 'str' 'String'
|     |   | | `-UnaryOperator 0x55fb1f78f9b8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55fb1f78f9a8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55fb1f78fa00 <col:49> 'Args::Slot *' lvalue Var 0x55fb1f78f4d0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55fb1f78fbb8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55fb1f78fa50 <col:13> 'int' lvalue Var 0x55fb1f78f568 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55fb1f78fba0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55fb1f78fb80 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55fb1f78fae8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55fb1f78fac8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55fb1f78fab0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55fb1f78fa70 <col:28> 'int' lvalue Var 0x55fb1f78f568 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55fb1f78fa90 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55fb1f78fb68 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55fb1f78fb38 <col:49> 'bool' lvalue ->_read_status 0x55fb1f661580
|     |   |         `-ImplicitCastExpr 0x55fb1f78fb18 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55fb1f78fb08 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55fb1f78fc68 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55fb1f78fbd8 <col:13> 'int' lvalue ParmVar 0x55fb1f7675c0 'flags' 'int'
|     |     `-UnaryOperator 0x55fb1f78fc50 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55fb1f78fc38 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55fb1f78fc18 <col:23> 'const int' lvalue Var 0x55fb1f74fa38 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55fb1f78fdf0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55fb1f78fd28 <col:9> 'bool' lvalue ->_read_status 0x55fb1f661580
|       | `-ImplicitCastExpr 0x55fb1f78fd08 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55fb1f78fcf8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55fb1f78fdd0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55fb1f78fdb0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55fb1f78fd98 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55fb1f78fd58 <col:25> 'int' lvalue Var 0x55fb1f78f568 'read_status' 'int'
|           `-IntegerLiteral 0x55fb1f78fd78 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55fb1f767c98 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55fb1f767828 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55fb1f7678a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55fb1f767bf8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55fb1f767968 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f7679e8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55fb1f767a60 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55fb1f767b08 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55fb1f790da0 <col:84, line:805:5>
|     |-DeclStmt 0x55fb1f78feb8 <line:796:9, col:26>
|     | `-VarDecl 0x55fb1f78fe50 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55fb1f78ff88 <line:797:9, col:29>
|     | `-VarDecl 0x55fb1f78fee8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55fb1f78ff70 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55fb1f78ff50 <col:28> 'int' 1
|     |-DeclStmt 0x55fb1f7902c0 <line:798:9, col:71>
|     | `-VarDecl 0x55fb1f78ffd8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55fb1f790290 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55fb1f790200 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55fb1f790248 <col:55> 'T' lvalue ParmVar 0x55fb1f767b08 'variable' 'T &'
|     |     `-UnaryOperator 0x55fb1f790278 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55fb1f790268 <col:66> 'Args *' this
|     |-WhileStmt 0x55fb1f790c50 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55fb1f790c70 <line:799:16, col:61>
|     | | `-VarDecl 0x55fb1f7902e8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55fb1f7904c8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55fb1f790498 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55fb1f790480 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55fb1f790460 <col:29, col:61> 'String' (CXXTemporary 0x55fb1f790460)
|     | |           `-CXXMemberCallExpr 0x55fb1f7903f0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55fb1f790360 <col:29> '<bound member function type>' ->find 0x55fb1f781a68
|     | |             | `-CXXThisExpr 0x55fb1f790350 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55fb1f790428 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55fb1f790390 <col:34> 'const char *' lvalue ParmVar 0x55fb1f767968 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55fb1f790440 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55fb1f7903b0 <col:43> 'int' lvalue ParmVar 0x55fb1f7679e8 'flags' 'int'
|     | |             `-DeclRefExpr 0x55fb1f7903d0 <col:50> 'Args::Slot *' lvalue Var 0x55fb1f78fe50 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55fb1f790580 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55fb1f790568 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55fb1f790548 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55fb1f790518 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55fb1f4ac5d8
|     | |       `-ImplicitCastExpr 0x55fb1f790500 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55fb1f7904e0 <col:23> 'String' lvalue Var 0x55fb1f7902e8 'str' 'String'
|     | `-CompoundStmt 0x55fb1f790c28 <col:64, line:803:9>
|     |   |-CallExpr 0x55fb1f7909b0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55fb1f7905a8 <col:13> '<bound member function type>' ->postparse 0x55fb1f781c78
|     |   | | `-CXXThisExpr 0x55fb1f790598 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55fb1f790970 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55fb1f7905d8 <col:23> 'T *' lvalue Var 0x55fb1f78ffd8 's' 'T *'
|     |   | | `-CallExpr 0x55fb1f790930 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55fb1f7907c0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55fb1f790808 <col:56> 'P' lvalue ParmVar 0x55fb1f767a60 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55fb1f790828 <col:64> 'String' lvalue Var 0x55fb1f7902e8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55fb1f7908d8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55fb1f790868 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55fb1f6a0708 0x55fb1f6a0328 0x55fb1f69ff58 0x55fb1f69fb78 0x55fb1f69f798 0x55fb1f69f3c8
|     |   | |   | `-DeclRefExpr 0x55fb1f790848 <col:70> 'T *' lvalue Var 0x55fb1f78ffd8 's' 'T *'
|     |   | |   `-UnaryOperator 0x55fb1f790918 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55fb1f790908 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55fb1f790990 <col:81> 'Args::Slot *' lvalue Var 0x55fb1f78fe50 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55fb1f790b48 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55fb1f7909e0 <col:13> 'int' lvalue Var 0x55fb1f78fee8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55fb1f790b30 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55fb1f790b10 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55fb1f790a78 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55fb1f790a58 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55fb1f790a40 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55fb1f790a00 <col:28> 'int' lvalue Var 0x55fb1f78fee8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55fb1f790a20 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55fb1f790af8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55fb1f790ac8 <col:49> 'bool' lvalue ->_read_status 0x55fb1f661580
|     |   |         `-ImplicitCastExpr 0x55fb1f790aa8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55fb1f790a98 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55fb1f790bf8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55fb1f790b68 <col:13> 'int' lvalue ParmVar 0x55fb1f7679e8 'flags' 'int'
|     |     `-UnaryOperator 0x55fb1f790be0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55fb1f790bc8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55fb1f790ba8 <col:23> 'const int' lvalue Var 0x55fb1f74fa38 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55fb1f790d80 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55fb1f790cb8 <col:9> 'bool' lvalue ->_read_status 0x55fb1f661580
|       | `-ImplicitCastExpr 0x55fb1f790c98 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55fb1f790c88 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55fb1f790d60 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55fb1f790d40 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55fb1f790d28 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55fb1f790ce8 <col:25> 'int' lvalue Var 0x55fb1f78fee8 'read_status' 'int'
|           `-IntegerLiteral 0x55fb1f790d08 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55fb1f768278 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55fb1f767d10 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55fb1f767d88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55fb1f7681d8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55fb1f767e48 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55fb1f767ec8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55fb1f767f40 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55fb1f768090 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55fb1f791ba8 <col:87, line:821:5>
|     |-DeclStmt 0x55fb1f790e50 <line:809:9, col:26>
|     | `-VarDecl 0x55fb1f790de8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55fb1f790f20 <line:810:9, col:29>
|     | `-VarDecl 0x55fb1f790e80 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55fb1f790f08 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55fb1f790ee8 <col:28> 'int' 1
|     |-DeclStmt 0x55fb1f791168 <line:811:9, col:38>
|     | `-VarDecl 0x55fb1f791050 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55fb1f791140 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55fb1f7910c8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55fb1f791120 <col:29> 'Vector<T>' lvalue ParmVar 0x55fb1f768090 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55fb1f791a58 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55fb1f791a78 <line:812:16, col:61>
|     | | `-VarDecl 0x55fb1f791190 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55fb1f791370 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55fb1f791340 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55fb1f791328 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55fb1f791308 <col:29, col:61> 'String' (CXXTemporary 0x55fb1f791308)
|     | |           `-CXXMemberCallExpr 0x55fb1f791298 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55fb1f791208 <col:29> '<bound member function type>' ->find 0x55fb1f781a68
|     | |             | `-CXXThisExpr 0x55fb1f7911f8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55fb1f7912d0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55fb1f791238 <col:34> 'const char *' lvalue ParmVar 0x55fb1f767e48 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55fb1f7912e8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55fb1f791258 <col:43> 'int' lvalue ParmVar 0x55fb1f767ec8 'flags' 'int'
|     | |             `-DeclRefExpr 0x55fb1f791278 <col:50> 'Args::Slot *' lvalue Var 0x55fb1f790de8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55fb1f791428 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55fb1f791410 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55fb1f7913f0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55fb1f7913c0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55fb1f4ac5d8
|     | |       `-ImplicitCastExpr 0x55fb1f7913a8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55fb1f791388 <col:23> 'String' lvalue Var 0x55fb1f791190 'str' 'String'
|     | `-CompoundStmt 0x55fb1f791a20 <col:64, line:819:9>
|     |   |-DeclStmt 0x55fb1f7914e8 <line:813:13, col:23>
|     |   | `-VarDecl 0x55fb1f791450 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55fb1f7914c8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55fb1f791668 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55fb1f791510 <col:13> '<bound member function type>' ->postparse 0x55fb1f781c78
|     |   | | `-CXXThisExpr 0x55fb1f791500 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55fb1f791610 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55fb1f791560 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55fb1f791540 <col:23> 'P' lvalue ParmVar 0x55fb1f767f40 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55fb1f7915a8 <col:36> 'String' lvalue Var 0x55fb1f791190 'str' 'String'
|     |   | | |-DeclRefExpr 0x55fb1f7915c8 <col:41> 'T' lvalue Var 0x55fb1f791450 'sx' 'T'
|     |   | | `-UnaryOperator 0x55fb1f7915f8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55fb1f7915e8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55fb1f791648 <col:53> 'Args::Slot *' lvalue Var 0x55fb1f790de8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55fb1f7917c0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55fb1f7916f8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55fb1f7916c8 <col:17> 'bool' lvalue ->_read_status 0x55fb1f661580
|     |   | |   `-ImplicitCastExpr 0x55fb1f7916a8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55fb1f791698 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55fb1f791798 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55fb1f791730 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55fb1f791710 <col:17> 'Vector<T> *' lvalue Var 0x55fb1f791050 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55fb1f791778 <col:30> 'T' lvalue Var 0x55fb1f791450 'sx' 'T'
|     |   |-BinaryOperator 0x55fb1f791940 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55fb1f7917d8 <col:13> 'int' lvalue Var 0x55fb1f790e80 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55fb1f791928 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55fb1f791908 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55fb1f791870 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55fb1f791850 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55fb1f791838 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55fb1f7917f8 <col:28> 'int' lvalue Var 0x55fb1f790e80 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55fb1f791818 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55fb1f7918f0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55fb1f7918c0 <col:49> 'bool' lvalue ->_read_status 0x55fb1f661580
|     |   |         `-ImplicitCastExpr 0x55fb1f7918a0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55fb1f791890 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55fb1f7919f0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55fb1f791960 <col:13> 'int' lvalue ParmVar 0x55fb1f767ec8 'flags' 'int'
|     |     `-UnaryOperator 0x55fb1f7919d8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55fb1f7919c0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55fb1f7919a0 <col:23> 'const int' lvalue Var 0x55fb1f74fa38 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55fb1f791b88 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55fb1f791ac0 <col:9> 'bool' lvalue ->_read_status 0x55fb1f661580
|       | `-ImplicitCastExpr 0x55fb1f791aa0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55fb1f791a90 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55fb1f791b68 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55fb1f791b48 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55fb1f791b30 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55fb1f791af0 <col:25> 'int' lvalue Var 0x55fb1f790e80 'read_status' 'int'
|           `-IntegerLiteral 0x55fb1f791b10 <col:40> 'int' 1
|-AccessSpecDecl 0x55fb1f7682f0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55fb1f768318 prev 0x55fb1f74dd38 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55fb1f768410 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55fb1f768500 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55fb1f791be0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55fb1f7685f0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55fb1f791bf0 <col:25, line:830:9>
| |-CXXMethodDecl 0x55fb1f7686f0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55fb1f7687a0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55fb1f768848 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55fb1f768848
| | `-ParmVarDecl 0x55fb1f768958 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55fb1f769118 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55fb1f769118
|   `-ParmVarDecl 0x55fb1f769228 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55fb1f7689c8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55fb1f768b28 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55fb1f768d20 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55fb1f768bd0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55fb1f768c48 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55fb1f791dd0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55fb1f768fd8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55fb1f791c40 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55fb1f791c00 <col:20> 'void *' lvalue ParmVar 0x55fb1f768bd0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55fb1f769040 '_slot' 'char *'
| | | `-CXXNewExpr 0x55fb1f791cc8 <col:32, col:45> 'char *' array Function 0x55fb1f2cf248 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55fb1f791cb0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55fb1f791c80 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55fb1f768c48 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55fb1f7690a0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55fb1f791d90 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55fb1f791d50 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55fb1f768c48 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55fb1f791e50 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55fb1f768e20 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55fb1f7685f0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55fb1f791ed8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55fb1f791eb8 <line:840:13, col:22> 'void' array Function 0x55fb1f2cf5a8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55fb1f791ea0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55fb1f791e70 <col:22> 'char *' lvalue ->_slot 0x55fb1f769040
| |         `-CXXThisExpr 0x55fb1f791e60 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55fb1f768f20 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55fb1f7686f0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55fb1f7920c8 <col:22, line:844:9>
| |   `-CallExpr 0x55fb1f792030 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55fb1f792018 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55fb1f791ff8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55fb1f3db028 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55fb1f792068 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55fb1f791f48 <col:20> 'void *' lvalue ->_ptr 0x55fb1f768fd8
| |     |   `-CXXThisExpr 0x55fb1f791f38 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55fb1f792098 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55fb1f792080 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55fb1f791f88 <col:26> 'char *' lvalue ->_slot 0x55fb1f769040
| |     |     `-CXXThisExpr 0x55fb1f791f78 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55fb1f7920b0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55fb1f791fc8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55fb1f7690a0
| |         `-CXXThisExpr 0x55fb1f791fb8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55fb1f768fd8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55fb1f769040 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55fb1f7690a0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55fb1f769298 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55fb1f769298
| | `-ParmVarDecl 0x55fb1f7693a8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55fb1f769448 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55fb1f769448
|   `-ParmVarDecl 0x55fb1f769558 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55fb1f7696f8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55fb1f7695c8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55fb1f769668 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55fb1f769990 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55fb1f769b88 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55fb1f769a58 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55fb1f769d08 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55fb1f792100 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55fb1f7920e0 <col:20> 'T *' lvalue ParmVar 0x55fb1f769a58 'ptr' 'T *'
|   | `-CompoundStmt 0x55fb1f792150 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55fb1f769c58 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55fb1f7686f0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55fb1f792300 <col:22, line:857:9>
|   |   `-CallExpr 0x55fb1f7922d0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55fb1f792160 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55fb1f493758 0x55fb1f43da88
|   |     |-CXXOperatorCallExpr 0x55fb1f792260 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55fb1f7921f0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55fb1f6a0708 0x55fb1f6a0328 0x55fb1f69ff58 0x55fb1f69fb78 0x55fb1f69f798 0x55fb1f69f3c8
|   |     | `-MemberExpr 0x55fb1f7921c0 <col:29> 'T *' lvalue ->_ptr 0x55fb1f769d08
|   |     |   `-CXXThisExpr 0x55fb1f7921b0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55fb1f7922a0 <col:35> 'T' lvalue ->_slot 0x55fb1f769d68
|   |       `-CXXThisExpr 0x55fb1f792290 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55fb1f769d08 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55fb1f769d68 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55fb1f769dd0 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55fb1f769ed0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55fb1f769f20 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55fb1f769eb0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55fb1f769e90 <col:31> 'int' 48
|-FieldDecl 0x55fb1f769f48 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55fb1f769fa8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55fb1f76a008 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55fb1f76a140 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55fb1f781310 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55fb1f781370 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55fb1f781420 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55fb1f781648 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55fb1f781550 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55fb1f781798 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55fb1f781708 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55fb1f781a68 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55fb1f781858 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55fb1f7818d8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55fb1f781980 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55fb1f781c78 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55fb1f781b30 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55fb1f781ba8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55fb1f781d48 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55fb1f781e98 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55fb1f781e00 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55fb1f782228 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55fb1f781f58 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55fb1f781fd8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55fb1f782080 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55fb1f782138 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55fb1f782450 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55fb1f782300 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55fb1f782378 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55fb1f782768 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55fb1f782500 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55fb1f7826c8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55fb1f7825d8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55fb1f6b6068 prev 0x55fb1f6ab270 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55fb1f6b6160 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55fb1f6b6250 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55fb1f6b6378 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55fb1f6b64f8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55fb1f6b6678 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55fb1f6b67f8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55fb1f6c7628 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55fb1f6c7e98 <col:11>
|-CXXDestructorDecl 0x55fb1f6c7700 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55fb1f6c7838 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55fb1f6c7838
| `-ParmVarDecl 0x55fb1f6c7948 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55fb1f6c79e8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55fb1f6c79e8
| `-ParmVarDecl 0x55fb1f6c7af8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55fb1f6ca8b8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55fb1f6ca9c8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55fb1f6cac48 <col:11>
|   `-ReturnStmt 0x55fb1f6cac38 <col:11>
|     `-UnaryOperator 0x55fb1f6cac20 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55fb1f6cac10 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55fb1f6caa38 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55fb1f6caa38
  `-ParmVarDecl 0x55fb1f6cab48 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55fb1f6b6860 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55fb1f6b6978 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55fb1f6b6a18 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55fb1f6b6a80 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55fb1f6b6ae8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55fb1f6b6b50 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55fb1f6b6bb0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55fb1f6b6c70 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55fb1f6b6cd0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55fb1f6b6d30 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55fb1f6c7538 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55fb1f6b6a18 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55fb1f6c7ea8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55fb1f6c7f00 <col:12>
|-CXXConstructorDecl 0x55fb1f6c7b68 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55fb1f6c7b68
| `-ParmVarDecl 0x55fb1f6c7c78 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55fb1f6c7d18 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55fb1f6c7d18
| `-ParmVarDecl 0x55fb1f6c7e28 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55fb1f6c9fa0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55fb1f6a4980 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55fb1f6a4a98 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55fb1f6a4b28 <col:16, col:22> col:16 public
|-EnumDecl 0x55fb1f6a4b50 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55fb1f6a4c50 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55fb1f6a4d30 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f6a4c30 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55fb1f6a4c10 <col:21> 'int' 28
| `-EnumConstantDecl 0x55fb1f6a4ce0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55fb1f6a4d48 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55fb1f6a4cc0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55fb1f6a4ca0 <col:22> 'int' 64
|-CXXMethodDecl 0x55fb1f6a5088 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55fb1f6a4d70 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55fb1f6a4df0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55fb1f6a4e68 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55fb1f6a4ee0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55fb1f6a5148 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55fb1f6a5348 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55fb1f6a51c0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55fb1f6a5238 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55fb1f6a53f8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55fb1f6a5558 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55fb1f6a5468 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55fb1f6a5600 <col:72> warn_unused_result ""
|-TypedefDecl 0x55fb1f6a5960 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55fb1f6a58f0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55fb1f6a5890 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55fb1f6a5850 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55fb1f17b2d0 'void'
|       |-PointerType 0x55fb1f424d20 'unsigned char *'
|       | `-BuiltinType 0x55fb1f17b3d0 'unsigned char'
|       |-TypedefType 0x55fb1f221290 'size_t' sugar
|       | |-Typedef 0x55fb1f1ebb20 'size_t'
|       | `-BuiltinType 0x55fb1f17b430 'unsigned long'
|       `-PointerType 0x55fb1f17bad0 'void *'
|         `-BuiltinType 0x55fb1f17b2d0 'void'
|-CXXMethodDecl 0x55fb1f6a5dd8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55fb1f6a59d0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55fb1f6a5a48 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55fb1f6a5ae0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55fb1f6a5b60 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55fb1f6c04d0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55fb1f6c04b8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55fb1f6c0480 <col:58> 'int' 0
| |-ParmVarDecl 0x55fb1f6a5be0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55fb1f6c04f8 <col:76> 'int' 0
| |-ParmVarDecl 0x55fb1f6a5c60 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55fb1f6c0518 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55fb1f6a5ea8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55fb1f6a5f28 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55fb1f6a5fe8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55fb1f6a6088 <col:20>
| `-OptimizeNoneAttr 0x55fb1f6a60e0 <col:30>
|-CXXMethodDecl 0x55fb1f6a6158 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55fb1f6a61f8 <col:20>
| `-OptimizeNoneAttr 0x55fb1f6a6250 <col:30>
|-CXXMethodDecl 0x55fb1f6a62c8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55fb1f6a6368 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55fb1f6a6418 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55fb1f6a64b8 <col:20>
| |-OptimizeNoneAttr 0x55fb1f6a6510 <col:30>
| `-WarnUnusedResultAttr 0x55fb1f6a6538 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55fb1f6a6590 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55fb1f6a6630 <col:20>
| `-OptimizeNoneAttr 0x55fb1f6a6688 <col:30>
|-CXXMethodDecl 0x55fb1f6a66d8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55fb1f6a6778 <col:20>
| `-OptimizeNoneAttr 0x55fb1f6a67d0 <col:30>
|-CXXMethodDecl 0x55fb1f6a6818 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55fb1f6a68b8 <col:20>
| `-OptimizeNoneAttr 0x55fb1f6a6910 <col:30>
|-CXXMethodDecl 0x55fb1f6a6958 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55fb1f6a6a18 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55fb1f6a6ae0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55fb1f6a6ba8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55fb1f6a6c68 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55fb1f6a6d88 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55fb1f6c05e0 <col:54, line:99:5>
|   `-ReturnStmt 0x55fb1f6c05d0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55fb1f6c05b8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55fb1f6c0588 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55fb1f6b7068
|         `-CXXThisExpr 0x55fb1f6c0578 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55fb1f6a6f28 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55fb1f6a6e38 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55fb1f6c0690 <col:67, line:103:5>
|   `-BinaryOperator 0x55fb1f6c0670 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55fb1f6c0608 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55fb1f6b7068
|     | `-CXXThisExpr 0x55fb1f6c05f8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55fb1f6c0658 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55fb1f6c0638 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55fb1f6a6e38 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55fb1f6a7020 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55fb1f6c0710 <col:33, line:107:5>
|   `-ReturnStmt 0x55fb1f6c0700 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55fb1f6c06e8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55fb1f6c06b8 <col:16> 'void *' lvalue ->_destructor_argument 0x55fb1f6b70d0
|         `-CXXThisExpr 0x55fb1f6c06a8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55fb1f6a70e0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55fb1f6c0d40 <col:25, line:113:5>
|   |-ParenExpr 0x55fb1f6c0a88 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55fb1f6c0a58 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55fb1f6c07c8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55fb1f6c07a0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55fb1f6c0768 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55fb1f6c0738 <col:24> '<bound member function type>' ->shared 0x55fb1f6a6158
|   |   |       `-ImplicitCastExpr 0x55fb1f6c0788 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55fb1f6c0728 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55fb1f6c0828 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55fb1f6c0808 <col:42> 'int' 0
|   |   `-CallExpr 0x55fb1f6c09b8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55fb1f6c09a0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55fb1f6c0980 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55fb1f2180a0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55fb1f6c09f8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55fb1f6c0898 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55fb1f6c0a10 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55fb1f6c08c0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55fb1f6c0a28 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55fb1f6c08f8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55fb1f6c0a40 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55fb1f6c0968 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55fb1f6c0950 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55fb1f6c0918 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55fb1f6c0c88 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55fb1f6c0ab8 <col:2> 'unsigned char *' lvalue ->_head 0x55fb1f6b6e70
|   | | `-CXXThisExpr 0x55fb1f6c0aa8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55fb1f6c0c70 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55fb1f6c0c50 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55fb1f6c0af8 <col:10> 'unsigned char *' lvalue ->_data 0x55fb1f6b6ed8
|   |     | `-CXXThisExpr 0x55fb1f6c0ae8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55fb1f6c0c38 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55fb1f6c0c18 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55fb1f6c0b38 <col:18> 'unsigned char *' lvalue ->_tail 0x55fb1f6b6f40
|   |         | `-CXXThisExpr 0x55fb1f6c0b28 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55fb1f6c0c00 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55fb1f6c0be0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55fb1f6c0b78 <col:26> 'unsigned char *' lvalue ->_end 0x55fb1f6b6fa8
|   |             | `-CXXThisExpr 0x55fb1f6c0b68 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55fb1f6c0bc8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55fb1f6c0ba8 <col:33> 'int' 0
|   `-BinaryOperator 0x55fb1f6c0d20 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55fb1f6c0cb8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55fb1f6b7068
|     | `-CXXThisExpr 0x55fb1f6c0ca8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55fb1f6c0d08 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55fb1f6c0ce8 <col:16> 'int' 0
|-CXXMethodDecl 0x55fb1f6a7220 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55fb1f6a7190 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55fb1f6a72c8 <col:20>
| |-OptimizeNoneAttr 0x55fb1f6a7320 <col:30>
| `-WarnUnusedResultAttr 0x55fb1f6a7348 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55fb1f6a7418 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55fb1f6a7388 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55fb1f6a74c0 <col:20>
| |-OptimizeNoneAttr 0x55fb1f6a7518 <col:30>
| `-WarnUnusedResultAttr 0x55fb1f6a7540 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55fb1f6a7678 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55fb1f6a7580 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55fb1f6a7720 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55fb1f6a7820 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55fb1f6a7790 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55fb1f6a78c8 <col:20>
| `-OptimizeNoneAttr 0x55fb1f6a7920 <col:30>
|-CXXMethodDecl 0x55fb1f6a79e8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55fb1f6a7958 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55fb1f6a7a90 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55fb1f6a7b90 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55fb1f6a7b00 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55fb1f6a7c38 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55fb1f6a7d38 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55fb1f6a7ca8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55fb1f6a7de0 <col:20>
| `-OptimizeNoneAttr 0x55fb1f6a7e38 <col:30>
|-CXXMethodDecl 0x55fb1f6a7fc8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55fb1f6a7e78 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55fb1f6a7ef0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55fb1f6c0538 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55fb1f6a8078 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55fb1f6a8278 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55fb1f6a80f0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55fb1f6a8168 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55fb1f6a8488 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55fb1f6a8338 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55fb1f6a83b0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55fb1f6a8698 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55fb1f6a8548 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55fb1f6a85c8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55fb1f6c0548 <col:39> 'int' 0
|-CXXMethodDecl 0x55fb1f6a8768 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55fb1f6a8830 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55fb1f6a88f8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55fb1f6a89b8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55fb1f6a8a80 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55fb1f6a8bc8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55fb1f6a8b38 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55fb1f6a8d98 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55fb1f6a8c88 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55fb1f6a8d00 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55fb1f6a8e68 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55fb1f6a8f28 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55fb1f6a8fc8 <col:20>
| `-OptimizeNoneAttr 0x55fb1f6a9020 <col:30>
|-CXXMethodDecl 0x55fb1f6a9070 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55fb1f6a9110 <col:20>
| `-OptimizeNoneAttr 0x55fb1f6a9168 <col:30>
|-CXXMethodDecl 0x55fb1f6a91b8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55fb1f6a9278 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55fb1f6a9340 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55fb1f6a93e0 <col:20>
| `-OptimizeNoneAttr 0x55fb1f6a9438 <col:30>
|-CXXMethodDecl 0x55fb1f6a9588 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55fb1f6a9478 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55fb1f6a94f0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55fb1f6a96d8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55fb1f6a9648 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55fb1f6a97b0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55fb1f6a9870 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55fb1f6a9910 <col:20>
| `-OptimizeNoneAttr 0x55fb1f6a9968 <col:30>
|-CXXMethodDecl 0x55fb1f6a99b8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55fb1f6a9a58 <col:20>
| `-OptimizeNoneAttr 0x55fb1f6a9ab0 <col:30>
|-CXXMethodDecl 0x55fb1f6a9b00 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55fb1f6a9bc8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55fb1f6a9c68 <col:20>
| `-OptimizeNoneAttr 0x55fb1f6a9cc0 <col:30>
|-CXXMethodDecl 0x55fb1f6a9d08 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55fb1f6a9e28 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55fb1f6a9f98 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55fb1f6a9ed8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55fb1f6aa088 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55fb1f6aa128 <col:20>
| `-OptimizeNoneAttr 0x55fb1f6aa180 <col:30>
|-CXXMethodDecl 0x55fb1f6aa1d0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55fb1f6aa290 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55fb1f6aa4c8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55fb1f6aa340 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55fb1f6aa3b8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55fb1f6aa578 <col:20>
| `-OptimizeNoneAttr 0x55fb1f6aa5d0 <col:30>
|-CXXMethodDecl 0x55fb1f6aa678 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55fb1f6aa718 <col:20>
| `-OptimizeNoneAttr 0x55fb1f6aa770 <col:30>
|-CXXMethodDecl 0x55fb1f6aa7c0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55fb1f6aa860 <col:20>
| `-OptimizeNoneAttr 0x55fb1f6aa8b8 <col:30>
|-CXXMethodDecl 0x55fb1f6aa900 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55fb1f6aa9a0 <col:20>
| `-OptimizeNoneAttr 0x55fb1f6aa9f8 <col:30>
|-CXXMethodDecl 0x55fb1f6aaaf8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55fb1f6aaa30 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55fb1f6aaba0 <col:20>
| `-OptimizeNoneAttr 0x55fb1f6aabf8 <col:30>
|-CXXMethodDecl 0x55fb1f6aadb8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55fb1f6aac30 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55fb1f6aaca8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55fb1f6aae68 <col:20>
| `-OptimizeNoneAttr 0x55fb1f6aaec0 <col:30>
|-CXXMethodDecl 0x55fb1f6aaf68 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55fb1f6ab088 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55fb1f6ab1a8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55fb1f6ab248 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55fb1f6ab270 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55fb1f6ab398 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55fb1f6ab438 <col:20>
| `-OptimizeNoneAttr 0x55fb1f6ab490 <col:30>
|-CXXMethodDecl 0x55fb1f6ab538 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55fb1f6ab5d8 <col:20>
| `-OptimizeNoneAttr 0x55fb1f6ab630 <col:30>
|-AccessSpecDecl 0x55fb1f6ab658 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55fb1f6ab680 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55fb1f6ab780 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55fb1f6ab7d0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55fb1f6ab760 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55fb1f6ab740 <col:14> 'int' 48
|-CXXMethodDecl 0x55fb1f6ab838 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55fb1f6ab8d8 <col:20>
| `-OptimizeNoneAttr 0x55fb1f6ab930 <col:30>
|-CXXMethodDecl 0x55fb1f6ab9a8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55fb1f6aba48 <col:20>
| `-OptimizeNoneAttr 0x55fb1f6abaa0 <col:30>
|-CXXMethodDecl 0x55fb1f6abb68 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55fb1f6abad8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55fb1f6abd08 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55fb1f6abea8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55fb1f6abdb8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55fb1f6abf50 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55fb1f6ac050 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55fb1f6ac400 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f6ac030 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55fb1f6ac010 <col:9> 'int' 0
| |-EnumConstantDecl 0x55fb1f6ac0e0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55fb1f6ac418 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f6ac0c0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55fb1f6ac0a0 <col:14> 'int' 1
| |-EnumConstantDecl 0x55fb1f6ac170 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55fb1f6ac430 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f6ac150 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55fb1f6ac130 <col:14> 'int' 2
| |-EnumConstantDecl 0x55fb1f6ac200 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55fb1f6ac448 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f6ac1e0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55fb1f6ac1c0 <col:14> 'int' 3
| |-EnumConstantDecl 0x55fb1f6ac290 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55fb1f6ac460 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f6ac270 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55fb1f6ac250 <col:13> 'int' 4
| |-EnumConstantDecl 0x55fb1f6ac320 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55fb1f6ac478 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f6ac300 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55fb1f6ac2e0 <col:13> 'int' 5
| `-EnumConstantDecl 0x55fb1f6ac3b0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55fb1f6ac490 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55fb1f6ac390 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55fb1f6ac370 <col:14> 'int' 6
|-CXXMethodDecl 0x55fb1f6ac4f8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55fb1f6ac598 <col:20>
| `-OptimizeNoneAttr 0x55fb1f6ac5f0 <col:30>
|-CXXMethodDecl 0x55fb1f6ac6e8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55fb1f6ac628 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55fb1f6ac790 <col:20>
| `-OptimizeNoneAttr 0x55fb1f6ac7e8 <col:30>
|-CXXMethodDecl 0x55fb1f6ac858 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55fb1f6ac980 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55fb1f6acaf8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55fb1f6aca30 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55fb1f6acbc0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55fb1f6acc88 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55fb1f6acdc8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55fb1f6acd38 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55fb1f6ace70 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55fb1f6acf70 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55fb1f6ad170 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f6acf50 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55fb1f6acf30 <col:23> 'int' 0
| |-EnumConstantDecl 0x55fb1f6ad000 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55fb1f6ad188 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f6acfe0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55fb1f6acfc0 <col:45> 'int' 4
| |-EnumConstantDecl 0x55fb1f6ad090 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55fb1f6ad1a0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f6ad070 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55fb1f6ad050 <col:24> 'int' 0
| `-EnumConstantDecl 0x55fb1f6ad120 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55fb1f6ad1b8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55fb1f6ad100 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55fb1f6ad0e0 <col:47> 'int' 16
|-CXXMethodDecl 0x55fb1f6ad218 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55fb1f6ad388 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55fb1f6ad2c8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55fb1f6ad430 <col:20>
| `-OptimizeNoneAttr 0x55fb1f6ad488 <col:30>
|-CXXMethodDecl 0x55fb1f6ad4d8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55fb1f6c0e60 <col:18, col:36>
|   `-ReturnStmt 0x55fb1f6c0e50 <col:20, col:33>
|     `-ImplicitCastExpr 0x55fb1f6c0e38 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55fb1f6c0e18 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55fb1f6c0de8 <col:27> '<bound member function type>' ->xanno 0x55fb1f6ab538
|           `-CXXThisExpr 0x55fb1f6c0dd8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55fb1f6ad5d0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55fb1f6c0f70 <col:30, col:48>
|   `-ReturnStmt 0x55fb1f6c0f60 <col:32, col:45>
|     `-ImplicitCastExpr 0x55fb1f6c0f48 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55fb1f6c0f28 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55fb1f6c0ef8 <col:39> '<bound member function type>' ->xanno 0x55fb1f6ab398
|           `-CXXThisExpr 0x55fb1f6c0ee8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55fb1f6ad6b8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55fb1f6c1108 <col:24, col:50>
|   `-ReturnStmt 0x55fb1f6c10f8 <col:26, col:47>
|     `-UnaryOperator 0x55fb1f6c10e0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55fb1f6c10c0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55fb1f6c10a8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55fb1f6c1058 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55fb1f6b6378
|         |   `-CXXMemberCallExpr 0x55fb1f6c1038 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55fb1f6c1008 <col:34> '<bound member function type>' ->xanno 0x55fb1f6ab538
|         |       `-CXXThisExpr 0x55fb1f6c0ff8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55fb1f6c1088 <col:46> 'int' 0
|-CXXMethodDecl 0x55fb1f6ad7c0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55fb1f6c12d8 <col:36, col:62>
|   `-ReturnStmt 0x55fb1f6c12c8 <col:38, col:59>
|     `-UnaryOperator 0x55fb1f6c12b0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55fb1f6c1290 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55fb1f6c1278 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55fb1f6c11f0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55fb1f6b6378
|         |   `-CXXMemberCallExpr 0x55fb1f6c11d0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55fb1f6c11a0 <col:46> '<bound member function type>' ->xanno 0x55fb1f6ab398
|         |       `-CXXThisExpr 0x55fb1f6c1190 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55fb1f6c1220 <col:58> 'int' 0
|-CXXMethodDecl 0x55fb1f6ad8d8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55fb1f6c1470 <col:26, col:53>
|   `-ReturnStmt 0x55fb1f6c1460 <col:28, col:50>
|     `-UnaryOperator 0x55fb1f6c1448 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55fb1f6c1428 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55fb1f6c1410 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55fb1f6c13c0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55fb1f6b6678
|         |   `-CXXMemberCallExpr 0x55fb1f6c13a0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55fb1f6c1370 <col:36> '<bound member function type>' ->xanno 0x55fb1f6ab538
|         |       `-CXXThisExpr 0x55fb1f6c1360 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55fb1f6c13f0 <col:49> 'int' 0
|-CXXMethodDecl 0x55fb1f6ad9f8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55fb1f6c1648 <col:38, col:65>
|   `-ReturnStmt 0x55fb1f6c1638 <col:40, col:62>
|     `-UnaryOperator 0x55fb1f6c1620 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55fb1f6c1600 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55fb1f6c15e8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55fb1f6c1558 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55fb1f6b6678
|         |   `-CXXMemberCallExpr 0x55fb1f6c1538 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55fb1f6c1508 <col:48> '<bound member function type>' ->xanno 0x55fb1f6ab398
|         |       `-CXXThisExpr 0x55fb1f6c14f8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55fb1f6c1588 <col:61> 'int' 0
|-CXXMethodDecl 0x55fb1f6adba8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55fb1f6adab0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55fb1f6c1d18 <col:34, line:463:5>
|   |-ParenExpr 0x55fb1f6c1b60 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55fb1f6c1b30 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55fb1f6c1798 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55fb1f6c1768 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55fb1f6c16b8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55fb1f6c16a0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55fb1f6c1660 <col:23> 'int' lvalue ParmVar 0x55fb1f6adab0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55fb1f6c1680 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55fb1f6c1748 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55fb1f6c1718 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55fb1f6c16d8 <col:33> 'int' lvalue ParmVar 0x55fb1f6adab0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55fb1f6c1730 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55fb1f6c16f8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55fb1f6ab780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55fb1f6c17f8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55fb1f6c17d8 <col:56> 'int' 0
|   |   `-CallExpr 0x55fb1f6c1a90 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55fb1f6c1a78 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55fb1f6c1a58 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55fb1f2180a0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55fb1f6c1ad0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55fb1f6c18e8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55fb1f6c1ae8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55fb1f6c1918 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55fb1f6c1b00 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55fb1f6c1950 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55fb1f6c1b18 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55fb1f6c1a40 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55fb1f6c1a28 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55fb1f6c19e8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55fb1f6c1d08 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55fb1f6c1cf0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55fb1f6c1cd0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55fb1f6c1ca0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55fb1f6c1c50 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55fb1f6b6378
|         |   `-CXXMemberCallExpr 0x55fb1f6c1c30 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55fb1f6c1c00 <col:9> '<bound member function type>' ->xanno 0x55fb1f6ab398
|         |       `-CXXThisExpr 0x55fb1f6c1bf0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55fb1f6c1cb8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55fb1f6c1c80 <col:21> 'int' lvalue ParmVar 0x55fb1f6adab0 'i' 'int'
|-CXXMethodDecl 0x55fb1f6addf8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55fb1f6adc68 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55fb1f6adce0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55fb1f6c23a8 <col:40, line:472:5>
|   |-ParenExpr 0x55fb1f6c21c0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55fb1f6c2190 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55fb1f6c1e70 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55fb1f6c1e40 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55fb1f6c1d90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55fb1f6c1d78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55fb1f6c1d38 <col:23> 'int' lvalue ParmVar 0x55fb1f6adc68 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55fb1f6c1d58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55fb1f6c1e20 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55fb1f6c1df0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55fb1f6c1db0 <col:33> 'int' lvalue ParmVar 0x55fb1f6adc68 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55fb1f6c1e08 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55fb1f6c1dd0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55fb1f6ab780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55fb1f6c1ed0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55fb1f6c1eb0 <col:56> 'int' 0
|   |   `-CallExpr 0x55fb1f6c20f0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55fb1f6c20d8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55fb1f6c20b8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55fb1f2180a0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55fb1f6c2130 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55fb1f6c1f40 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55fb1f6c2148 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55fb1f6c1f70 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55fb1f6c2160 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55fb1f6c1fa8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55fb1f6c2178 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55fb1f6c20a0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55fb1f6c2088 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55fb1f6c2048 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55fb1f6c2388 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55fb1f6c2330 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55fb1f6c2300 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55fb1f6c22b0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55fb1f6b6378
|     | |   `-CXXMemberCallExpr 0x55fb1f6c2290 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55fb1f6c2260 <col:2> '<bound member function type>' ->xanno 0x55fb1f6ab538
|     | |       `-CXXThisExpr 0x55fb1f6c2250 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55fb1f6c2318 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55fb1f6c22e0 <col:14> 'int' lvalue ParmVar 0x55fb1f6adc68 'i' 'int'
|     `-ImplicitCastExpr 0x55fb1f6c2370 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55fb1f6c2350 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55fb1f6adce0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55fb1f6adfb8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55fb1f6adec0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55fb1f6c2b28 <col:36, line:485:5>
|   |-ParenExpr 0x55fb1f6c2890 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55fb1f6c2860 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55fb1f6c2540 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55fb1f6c2510 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55fb1f6c2420 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55fb1f6c2408 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55fb1f6c23c8 <col:23> 'int' lvalue ParmVar 0x55fb1f6adec0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55fb1f6c23e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55fb1f6c24f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55fb1f6c24d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55fb1f6c2440 <col:33> 'int' lvalue ParmVar 0x55fb1f6adec0 'i' 'int'
|   |   |     `-BinaryOperator 0x55fb1f6c24b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55fb1f6c24a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55fb1f6c2460 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55fb1f6ab780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55fb1f6c2480 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55fb1f6c25a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55fb1f6c2580 <col:60> 'int' 0
|   |   `-CallExpr 0x55fb1f6c27c0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55fb1f6c27a8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55fb1f6c2788 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55fb1f2180a0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55fb1f6c2800 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55fb1f6c2610 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55fb1f6c2818 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55fb1f6c2648 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55fb1f6c2830 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55fb1f6c2680 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55fb1f6c2848 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55fb1f6c2770 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55fb1f6c2758 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55fb1f6c2718 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55fb1f6c2b18 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55fb1f6c2b00 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55fb1f6c2ae8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55fb1f6c2ab8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55fb1f6c2a58 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55fb1f6c2a28 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55fb1f6c29a0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55fb1f6b6250
|             |   `-CXXMemberCallExpr 0x55fb1f6c2980 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55fb1f6c2950 <col:61> '<bound member function type>' ->xanno 0x55fb1f6ab398
|             |       `-CXXThisExpr 0x55fb1f6c2940 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55fb1f6c2a40 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55fb1f6c29d0 <col:74> 'int' lvalue ParmVar 0x55fb1f6adec0 'i' 'int'
|-CXXMethodDecl 0x55fb1f6ae208 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55fb1f6ae078 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55fb1f6ae0f0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55fb1f6c3278 <col:42, line:500:5>
|   |-ParenExpr 0x55fb1f6c3010 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55fb1f6c2fe0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55fb1f6c2cc0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55fb1f6c2c90 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55fb1f6c2ba0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55fb1f6c2b88 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55fb1f6c2b48 <col:23> 'int' lvalue ParmVar 0x55fb1f6ae078 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55fb1f6c2b68 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55fb1f6c2c70 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55fb1f6c2c58 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55fb1f6c2bc0 <col:33> 'int' lvalue ParmVar 0x55fb1f6ae078 'i' 'int'
|   |   |     `-BinaryOperator 0x55fb1f6c2c38 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55fb1f6c2c20 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55fb1f6c2be0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55fb1f6ab780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55fb1f6c2c00 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55fb1f6c2d20 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55fb1f6c2d00 <col:60> 'int' 0
|   |   `-CallExpr 0x55fb1f6c2f40 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55fb1f6c2f28 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55fb1f6c2f08 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55fb1f2180a0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55fb1f6c2f80 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55fb1f6c2d90 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55fb1f6c2f98 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55fb1f6c2dc8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55fb1f6c2fb0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55fb1f6c2e00 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55fb1f6c2fc8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55fb1f6c2ef0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55fb1f6c2ed8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55fb1f6c2e98 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55fb1f6c3258 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55fb1f6c3208 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55fb1f6c31d8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55fb1f6c3180 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55fb1f6c3150 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55fb1f6c3100 <col:48, col:57> 'char [48]' lvalue ->c 0x55fb1f6b6250
|     |     |   `-CXXMemberCallExpr 0x55fb1f6c30e0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55fb1f6c30b0 <col:48> '<bound member function type>' ->xanno 0x55fb1f6ab538
|     |     |       `-CXXThisExpr 0x55fb1f6c30a0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55fb1f6c3168 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55fb1f6c3130 <col:61> 'int' lvalue ParmVar 0x55fb1f6ae078 'i' 'int'
|     `-ImplicitCastExpr 0x55fb1f6c3240 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55fb1f6c3220 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55fb1f6ae0f0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55fb1f6ae3c8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55fb1f6ae2d0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55fb1f6c39d8 <col:35, line:513:5>
|   |-ParenExpr 0x55fb1f6c36e8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55fb1f6c36b8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55fb1f6c3410 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55fb1f6c33e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55fb1f6c32f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55fb1f6c32d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55fb1f6c3298 <col:23> 'int' lvalue ParmVar 0x55fb1f6ae2d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55fb1f6c32b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55fb1f6c33c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55fb1f6c33a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55fb1f6c3310 <col:33> 'int' lvalue ParmVar 0x55fb1f6ae2d0 'i' 'int'
|   |   |     `-BinaryOperator 0x55fb1f6c3388 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55fb1f6c3370 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55fb1f6c3330 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55fb1f6ab780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55fb1f6c3350 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55fb1f6c3470 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55fb1f6c3450 <col:60> 'int' 0
|   |   `-CallExpr 0x55fb1f6c3618 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55fb1f6c3600 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55fb1f6c35e0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55fb1f2180a0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55fb1f6c3658 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55fb1f6c34e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55fb1f6c3670 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55fb1f6c3518 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55fb1f6c3688 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55fb1f6c3550 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55fb1f6c36a0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55fb1f6c35c8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55fb1f6c35b0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55fb1f6c3570 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55fb1f6c39c8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55fb1f6c39b0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55fb1f6c3998 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55fb1f6c3968 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55fb1f6c38e0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55fb1f6c38b0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55fb1f6c3860 <col:60, col:69> 'char const[48]' lvalue ->c 0x55fb1f6b6250
|             |   `-CXXMemberCallExpr 0x55fb1f6c3840 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55fb1f6c3810 <col:60> '<bound member function type>' ->xanno 0x55fb1f6ab398
|             |       `-CXXThisExpr 0x55fb1f6c3800 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55fb1f6c38c8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55fb1f6c3890 <col:73> 'int' lvalue ParmVar 0x55fb1f6ae2d0 'i' 'int'
|-CXXMethodDecl 0x55fb1f6ae618 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55fb1f6ae488 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55fb1f6ae500 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55fb1f6c40f8 <col:41, line:528:5>
|   |-ParenExpr 0x55fb1f6c3e80 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55fb1f6c3e50 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55fb1f6c3b70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55fb1f6c3b40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55fb1f6c3a50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55fb1f6c3a38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55fb1f6c39f8 <col:23> 'int' lvalue ParmVar 0x55fb1f6ae488 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55fb1f6c3a18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55fb1f6c3b20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55fb1f6c3b08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55fb1f6c3a70 <col:33> 'int' lvalue ParmVar 0x55fb1f6ae488 'i' 'int'
|   |   |     `-BinaryOperator 0x55fb1f6c3ae8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55fb1f6c3ad0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55fb1f6c3a90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55fb1f6ab780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55fb1f6c3ab0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55fb1f6c3bd0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55fb1f6c3bb0 <col:60> 'int' 0
|   |   `-CallExpr 0x55fb1f6c3db0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55fb1f6c3d98 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55fb1f6c3d78 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55fb1f2180a0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55fb1f6c3df0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55fb1f6c3c40 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55fb1f6c3e08 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55fb1f6c3c78 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55fb1f6c3e20 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55fb1f6c3cb0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55fb1f6c3e38 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55fb1f6c3d60 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55fb1f6c3d48 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55fb1f6c3d08 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55fb1f6c40d8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55fb1f6c4088 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55fb1f6c4058 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55fb1f6c4000 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55fb1f6c3fc0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55fb1f6c3f70 <col:47, col:56> 'char [48]' lvalue ->c 0x55fb1f6b6250
|     |     |   `-CXXMemberCallExpr 0x55fb1f6c3f50 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55fb1f6c3f20 <col:47> '<bound member function type>' ->xanno 0x55fb1f6ab538
|     |     |       `-CXXThisExpr 0x55fb1f6c3f10 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55fb1f6c3fd8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55fb1f6c3fa0 <col:60> 'int' lvalue ParmVar 0x55fb1f6ae488 'i' 'int'
|     `-ImplicitCastExpr 0x55fb1f6c40c0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55fb1f6c40a0 <col:65> 'int16_t':'short' lvalue ParmVar 0x55fb1f6ae500 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55fb1f6ae7d8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55fb1f6ae6e0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55fb1f6c47c8 <col:36, line:541:5>
|   |-ParenExpr 0x55fb1f6c4568 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55fb1f6c4538 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55fb1f6c4290 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55fb1f6c4260 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55fb1f6c4170 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55fb1f6c4158 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55fb1f6c4118 <col:23> 'int' lvalue ParmVar 0x55fb1f6ae6e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55fb1f6c4138 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55fb1f6c4240 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55fb1f6c4228 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55fb1f6c4190 <col:33> 'int' lvalue ParmVar 0x55fb1f6ae6e0 'i' 'int'
|   |   |     `-BinaryOperator 0x55fb1f6c4208 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55fb1f6c41f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55fb1f6c41b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55fb1f6ab780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55fb1f6c41d0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55fb1f6c42f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55fb1f6c42d0 <col:60> 'int' 0
|   |   `-CallExpr 0x55fb1f6c4498 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55fb1f6c4480 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55fb1f6c4460 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55fb1f2180a0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55fb1f6c44d8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55fb1f6c4360 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55fb1f6c44f0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55fb1f6c4398 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55fb1f6c4508 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55fb1f6c43d0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55fb1f6c4520 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55fb1f6c4448 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55fb1f6c4430 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55fb1f6c43f0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55fb1f6c47b8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55fb1f6c47a0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55fb1f6c4788 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55fb1f6c4758 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55fb1f6c4700 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55fb1f6c46d0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55fb1f6c4680 <col:61, col:70> 'char const[48]' lvalue ->c 0x55fb1f6b6250
|             |   `-CXXMemberCallExpr 0x55fb1f6c4660 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55fb1f6c4630 <col:61> '<bound member function type>' ->xanno 0x55fb1f6ab398
|             |       `-CXXThisExpr 0x55fb1f6c4620 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55fb1f6c46e8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55fb1f6c46b0 <col:74> 'int' lvalue ParmVar 0x55fb1f6ae6e0 'i' 'int'
|-CXXMethodDecl 0x55fb1f6ae9a8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55fb1f6ae898 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55fb1f6ae910 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55fb1f6aea58 <col:20>
| `-OptimizeNoneAttr 0x55fb1f6aeab0 <col:30>
|-CXXMethodDecl 0x55fb1f6aebe8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55fb1f6aeaf0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55fb1f6c4e98 <col:35, line:562:5>
|   |-ParenExpr 0x55fb1f6c4c38 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55fb1f6c4c08 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55fb1f6c4960 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55fb1f6c4930 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55fb1f6c4840 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55fb1f6c4828 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55fb1f6c47e8 <col:23> 'int' lvalue ParmVar 0x55fb1f6aeaf0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55fb1f6c4808 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55fb1f6c4910 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55fb1f6c48f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55fb1f6c4860 <col:33> 'int' lvalue ParmVar 0x55fb1f6aeaf0 'i' 'int'
|   |   |     `-BinaryOperator 0x55fb1f6c48d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55fb1f6c48c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55fb1f6c4880 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55fb1f6ab780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55fb1f6c48a0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55fb1f6c49c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55fb1f6c49a0 <col:60> 'int' 0
|   |   `-CallExpr 0x55fb1f6c4b68 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55fb1f6c4b50 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55fb1f6c4b30 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55fb1f2180a0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55fb1f6c4ba8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55fb1f6c4a30 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55fb1f6c4bc0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55fb1f6c4a68 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55fb1f6c4bd8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55fb1f6c4aa0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55fb1f6c4bf0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55fb1f6c4b18 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55fb1f6c4b00 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55fb1f6c4ac0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55fb1f6c4e88 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55fb1f6c4e70 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55fb1f6c4e58 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55fb1f6c4e28 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55fb1f6c4dd0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55fb1f6c4da0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55fb1f6c4d50 <col:60, col:69> 'char const[48]' lvalue ->c 0x55fb1f6b6250
|             |   `-CXXMemberCallExpr 0x55fb1f6c4d30 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55fb1f6c4d00 <col:60> '<bound member function type>' ->xanno 0x55fb1f6ab398
|             |       `-CXXThisExpr 0x55fb1f6c4cf0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55fb1f6c4db8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55fb1f6c4d80 <col:73> 'int' lvalue ParmVar 0x55fb1f6aeaf0 'i' 'int'
|-CXXMethodDecl 0x55fb1f6aedf8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55fb1f6aeca8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55fb1f6aed20 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55fb1f6c5578 <col:41, line:577:5>
|   |-ParenExpr 0x55fb1f6c5308 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55fb1f6c52d8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55fb1f6c5030 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55fb1f6c5000 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55fb1f6c4f10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55fb1f6c4ef8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55fb1f6c4eb8 <col:23> 'int' lvalue ParmVar 0x55fb1f6aeca8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55fb1f6c4ed8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55fb1f6c4fe0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55fb1f6c4fc8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55fb1f6c4f30 <col:33> 'int' lvalue ParmVar 0x55fb1f6aeca8 'i' 'int'
|   |   |     `-BinaryOperator 0x55fb1f6c4fa8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55fb1f6c4f90 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55fb1f6c4f50 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55fb1f6ab780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55fb1f6c4f70 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55fb1f6c5090 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55fb1f6c5070 <col:60> 'int' 0
|   |   `-CallExpr 0x55fb1f6c5238 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55fb1f6c5220 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55fb1f6c5200 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55fb1f2180a0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55fb1f6c5278 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55fb1f6c5100 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55fb1f6c5290 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55fb1f6c5138 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55fb1f6c52a8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55fb1f6c5170 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55fb1f6c52c0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55fb1f6c51e8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55fb1f6c51d0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55fb1f6c5190 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55fb1f6c5558 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55fb1f6c5508 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55fb1f6c54d8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55fb1f6c5478 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55fb1f6c5448 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55fb1f6c53f8 <col:47, col:56> 'char [48]' lvalue ->c 0x55fb1f6b6250
|     |     |   `-CXXMemberCallExpr 0x55fb1f6c53d8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55fb1f6c53a8 <col:47> '<bound member function type>' ->xanno 0x55fb1f6ab538
|     |     |       `-CXXThisExpr 0x55fb1f6c5398 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55fb1f6c5460 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55fb1f6c5428 <col:60> 'int' lvalue ParmVar 0x55fb1f6aeca8 'i' 'int'
|     `-ImplicitCastExpr 0x55fb1f6c5540 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55fb1f6c5520 <col:65> 'int32_t':'int' lvalue ParmVar 0x55fb1f6aed20 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55fb1f6aefb8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55fb1f6aeec0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55fb1f6c5ca8 <col:36, line:591:5>
|   |-ParenExpr 0x55fb1f6c59e8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55fb1f6c59b8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55fb1f6c5710 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55fb1f6c56e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55fb1f6c55f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55fb1f6c55d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55fb1f6c5598 <col:23> 'int' lvalue ParmVar 0x55fb1f6aeec0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55fb1f6c55b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55fb1f6c56c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55fb1f6c56a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55fb1f6c5610 <col:33> 'int' lvalue ParmVar 0x55fb1f6aeec0 'i' 'int'
|   |   |     `-BinaryOperator 0x55fb1f6c5688 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55fb1f6c5670 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55fb1f6c5630 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55fb1f6ab780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55fb1f6c5650 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55fb1f6c5770 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55fb1f6c5750 <col:60> 'int' 0
|   |   `-CallExpr 0x55fb1f6c5918 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55fb1f6c5900 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55fb1f6c58e0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55fb1f2180a0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55fb1f6c5958 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55fb1f6c57e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55fb1f6c5970 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55fb1f6c5818 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55fb1f6c5988 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55fb1f6c5850 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55fb1f6c59a0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55fb1f6c58c8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55fb1f6c58b0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55fb1f6c5870 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55fb1f6c5c98 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55fb1f6c5c80 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55fb1f6c5c68 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55fb1f6c5c38 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55fb1f6c5bb0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55fb1f6c5b80 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55fb1f6c5b30 <col:61, col:70> 'char const[48]' lvalue ->c 0x55fb1f6b6250
|             |   `-CXXMemberCallExpr 0x55fb1f6c5b10 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55fb1f6c5ae0 <col:61> '<bound member function type>' ->xanno 0x55fb1f6ab398
|             |       `-CXXThisExpr 0x55fb1f6c5ad0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55fb1f6c5b98 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55fb1f6c5b60 <col:74> 'int' lvalue ParmVar 0x55fb1f6aeec0 'i' 'int'
|-CXXMethodDecl 0x55fb1f6af208 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55fb1f6af078 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55fb1f6af0f0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55fb1f6c6388 <col:42, line:606:5>
|   |-ParenExpr 0x55fb1f6c6118 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55fb1f6c60e8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55fb1f6c5e40 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55fb1f6c5e10 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55fb1f6c5d20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55fb1f6c5d08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55fb1f6c5cc8 <col:23> 'int' lvalue ParmVar 0x55fb1f6af078 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55fb1f6c5ce8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55fb1f6c5df0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55fb1f6c5dd8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55fb1f6c5d40 <col:33> 'int' lvalue ParmVar 0x55fb1f6af078 'i' 'int'
|   |   |     `-BinaryOperator 0x55fb1f6c5db8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55fb1f6c5da0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55fb1f6c5d60 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55fb1f6ab780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55fb1f6c5d80 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55fb1f6c5ea0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55fb1f6c5e80 <col:60> 'int' 0
|   |   `-CallExpr 0x55fb1f6c6048 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55fb1f6c6030 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55fb1f6c6010 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55fb1f2180a0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55fb1f6c6088 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55fb1f6c5f10 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55fb1f6c60a0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55fb1f6c5f48 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55fb1f6c60b8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55fb1f6c5f80 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55fb1f6c60d0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55fb1f6c5ff8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55fb1f6c5fe0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55fb1f6c5fa0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55fb1f6c6368 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55fb1f6c6318 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55fb1f6c62e8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55fb1f6c6288 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55fb1f6c6258 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55fb1f6c6208 <col:48, col:57> 'char [48]' lvalue ->c 0x55fb1f6b6250
|     |     |   `-CXXMemberCallExpr 0x55fb1f6c61e8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55fb1f6c61b8 <col:48> '<bound member function type>' ->xanno 0x55fb1f6ab538
|     |     |       `-CXXThisExpr 0x55fb1f6c61a8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55fb1f6c6270 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55fb1f6c6238 <col:61> 'int' lvalue ParmVar 0x55fb1f6af078 'i' 'int'
|     `-ImplicitCastExpr 0x55fb1f6c6350 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55fb1f6c6330 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55fb1f6af0f0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55fb1f6af3a0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55fb1f6af2d0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55fb1f6c6bf8 <col:33, line:620:5>
|   |-ParenExpr 0x55fb1f6c6970 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55fb1f6c6940 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55fb1f6c6590 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55fb1f6c6560 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55fb1f6c6400 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55fb1f6c63e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55fb1f6c63a8 <col:23> 'int' lvalue ParmVar 0x55fb1f6af2d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55fb1f6c63c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55fb1f6c6540 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55fb1f6c6528 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55fb1f6c6420 <col:33> 'int' lvalue ParmVar 0x55fb1f6af2d0 'i' 'int'
|   |   |     `-BinaryOperator 0x55fb1f6c6508 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55fb1f6c64f0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55fb1f6c6440 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55fb1f6ab780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55fb1f6c64c8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55fb1f6c64b0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55fb1f6c6478 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55fb1f6c65f0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55fb1f6c65d0 <col:79> 'int' 0
|   |   `-CallExpr 0x55fb1f6c68a0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55fb1f6c6888 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55fb1f6c6868 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55fb1f2180a0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55fb1f6c68e0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55fb1f6c66d8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55fb1f6c68f8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55fb1f6c6720 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55fb1f6c6910 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55fb1f6c6758 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55fb1f6c6928 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55fb1f6c6850 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55fb1f6c6838 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55fb1f6c67f8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55fb1f6c6be8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55fb1f6c6bd0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55fb1f6c6bb8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55fb1f6c6b88 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55fb1f6c6b00 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55fb1f6c6ad0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55fb1f6c6a80 <col:67, col:76> 'char const[48]' lvalue ->c 0x55fb1f6b6250
|             |   `-CXXMemberCallExpr 0x55fb1f6c6a60 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55fb1f6c6a30 <col:67> '<bound member function type>' ->xanno 0x55fb1f6ab398
|             |       `-CXXThisExpr 0x55fb1f6c6a20 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55fb1f6c6ae8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55fb1f6c6ab0 <col:80> 'int' lvalue ParmVar 0x55fb1f6af2d0 'i' 'int'
|-CXXMethodDecl 0x55fb1f6af5b8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55fb1f6af460 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55fb1f6af4e0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55fb1f6c7420 <col:45, line:635:5>
|   |-ParenExpr 0x55fb1f6c7168 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55fb1f6c7138 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55fb1f6c6e00 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55fb1f6c6dd0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55fb1f6c6c70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55fb1f6c6c58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55fb1f6c6c18 <col:23> 'int' lvalue ParmVar 0x55fb1f6af460 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55fb1f6c6c38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55fb1f6c6db0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55fb1f6c6d98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55fb1f6c6c90 <col:33> 'int' lvalue ParmVar 0x55fb1f6af460 'i' 'int'
|   |   |     `-BinaryOperator 0x55fb1f6c6d78 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55fb1f6c6d60 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55fb1f6c6cb0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55fb1f6ab780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55fb1f6c6d38 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55fb1f6c6d20 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55fb1f6c6ce8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55fb1f6c6e60 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55fb1f6c6e40 <col:79> 'int' 0
|   |   `-CallExpr 0x55fb1f6c7098 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55fb1f6c7080 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55fb1f6c7060 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55fb1f2180a0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55fb1f6c70d8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55fb1f6c6ed0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55fb1f6c70f0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55fb1f6c6f18 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55fb1f6c7108 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55fb1f6c6f50 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55fb1f6c7120 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55fb1f6c7048 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55fb1f6c7030 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55fb1f6c6fe8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55fb1f6c7400 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55fb1f6c7368 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55fb1f6c7338 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55fb1f6c72d8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55fb1f6c72a8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55fb1f6c7258 <col:54, col:63> 'char [48]' lvalue ->c 0x55fb1f6b6250
|     |     |   `-CXXMemberCallExpr 0x55fb1f6c7238 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55fb1f6c7208 <col:54> '<bound member function type>' ->xanno 0x55fb1f6ab538
|     |     |       `-CXXThisExpr 0x55fb1f6c71f8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55fb1f6c72c0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55fb1f6c7288 <col:67> 'int' lvalue ParmVar 0x55fb1f6af460 'i' 'int'
|     `-CXXConstCastExpr 0x55fb1f6c73d0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55fb1f6c73b8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55fb1f6c7380 <col:91> 'const void *' lvalue ParmVar 0x55fb1f6af4e0 'x' 'const void *'
|-CXXMethodDecl 0x55fb1f6af688 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55fb1f6c74a8 <col:34, line:640:5>
|   `-ReturnStmt 0x55fb1f6c7498 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55fb1f6c7480 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55fb1f6c7450 <col:16> 'Packet *' lvalue ->_data_packet 0x55fb1f6b6e08
|         `-CXXThisExpr 0x55fb1f6c7440 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55fb1f6af7c8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55fb1f6af738 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55fb1f6c0568 <col:46> 'bool' true
|-CXXMethodDecl 0x55fb1f6af948 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55fb1f6af880 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55fb1f6af9f0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55fb1f6b01a0 <line:660:22> "" ""
| |-EnumConstantDecl 0x55fb1f6afaf0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55fb1f6b0210 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f6afad0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55fb1f6afab0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55fb1f6a4c50 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55fb1f6afb80 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55fb1f6b0228 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f6afb60 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55fb1f6afb40 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55fb1f6a4ce0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55fb1f6afc10 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55fb1f6b0240 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f6afbf0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55fb1f6afbd0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55fb1f6afca0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55fb1f6b0258 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f6afc80 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55fb1f6afc60 <col:19> 'int' 16
| |-EnumConstantDecl 0x55fb1f6afd30 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55fb1f6b0270 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f6afd10 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55fb1f6afcf0 <col:21> 'int' 16
| |-EnumConstantDecl 0x55fb1f6afdc0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55fb1f6b0288 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f6afda0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55fb1f6afd80 <col:19> 'int' 32
| |-EnumConstantDecl 0x55fb1f6afe50 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55fb1f6b02a0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f6afe30 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55fb1f6afe10 <col:19> 'int' EnumConstant 0x55fb1f6afca0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55fb1f6afee0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55fb1f6b02b8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f6afec0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55fb1f6afea0 <col:19> 'int' EnumConstant 0x55fb1f6afdc0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55fb1f6affb0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55fb1f6b02d0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f6aff90 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55fb1f6aff70 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55fb1f6aff30 <col:23> 'int' EnumConstant 0x55fb1f6afee0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55fb1f6aff50 <col:40> 'int' 2
| |-EnumConstantDecl 0x55fb1f6b0080 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55fb1f6b02e8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55fb1f6b0060 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55fb1f6b0040 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55fb1f6b0000 <col:23> 'int' EnumConstant 0x55fb1f6afee0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55fb1f6b0020 <col:40> 'int' 4
| `-EnumConstantDecl 0x55fb1f6b0150 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55fb1f6b0300 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55fb1f6b0130 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55fb1f6b0110 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55fb1f6b00d0 <col:23> 'int' EnumConstant 0x55fb1f6afee0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55fb1f6b00f0 <col:40> 'int' 8
|-CXXMethodDecl 0x55fb1f6b0340 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55fb1f6b03e0 <col:68> "" ""
|-CXXMethodDecl 0x55fb1f6b0478 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55fb1f6b0518 <col:45> "" ""
|-CXXMethodDecl 0x55fb1f6b05b0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55fb1f6b0650 <col:57> "" ""
|-CXXMethodDecl 0x55fb1f6b06e8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55fb1f6b0788 <col:45> "" ""
|-CXXMethodDecl 0x55fb1f6b0820 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55fb1f6b08c0 <col:57> "" ""
|-CXXMethodDecl 0x55fb1f6b0950 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55fb1f6b09f0 <col:51> "" ""
|-CXXMethodDecl 0x55fb1f6b0a80 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55fb1f6b0b20 <col:63> "" ""
|-CXXMethodDecl 0x55fb1f6b0bb0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55fb1f6b0c50 <col:53> "" ""
|-CXXMethodDecl 0x55fb1f6b0ce0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55fb1f6b0d80 <col:65> "" ""
|-CXXMethodDecl 0x55fb1f6b0e98 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55fb1f6b0e08 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55fb1f6b0f40 <col:61> "" ""
|-CXXMethodDecl 0x55fb1f6b10d8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55fb1f6b0fc8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55fb1f6b1040 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55fb1f6b1188 <col:67> "" ""
|-CXXMethodDecl 0x55fb1f6b12a0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55fb1f6b1210 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55fb1f6b1348 <col:63> "" ""
|-CXXMethodDecl 0x55fb1f6b14e0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55fb1f6b13d0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55fb1f6b1448 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55fb1f6b1590 <col:69> "" ""
|-CXXMethodDecl 0x55fb1f6b16a8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55fb1f6b1618 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55fb1f6b1750 <col:63> "" ""
|-CXXMethodDecl 0x55fb1f6b3e28 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55fb1f6b3d18 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55fb1f6b3d90 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55fb1f6b3ed8 <col:69> "" ""
|-CXXMethodDecl 0x55fb1f6b3ff0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55fb1f6b3f60 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55fb1f6b4098 <col:62> "" ""
|-CXXMethodDecl 0x55fb1f6b4230 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55fb1f6b4120 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55fb1f6b4198 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55fb1f6b42e0 <col:68> "" ""
|-CXXMethodDecl 0x55fb1f6b43f8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55fb1f6b4368 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55fb1f6b44a0 <col:63> "" ""
|-CXXMethodDecl 0x55fb1f6b4638 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55fb1f6b4528 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55fb1f6b45a0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55fb1f6b46e8 <col:69> "" ""
|-CXXMethodDecl 0x55fb1f6b4778 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55fb1f6b4818 <col:64> "" ""
|-CXXMethodDecl 0x55fb1f6b48a8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55fb1f6b4948 <col:52> "" ""
|-CXXMethodDecl 0x55fb1f6b49d8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55fb1f6b4a78 <col:67> "" ""
|-CXXMethodDecl 0x55fb1f6b4b08 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55fb1f6b4ba8 <col:55> "" ""
|-CXXMethodDecl 0x55fb1f6b4cc0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55fb1f6b4c30 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55fb1f6b4d68 <col:58> "" ""
|-CXXMethodDecl 0x55fb1f6b4f00 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55fb1f6b4df0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55fb1f6b4e68 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55fb1f6b4fb0 <col:62> "" ""
|-CXXMethodDecl 0x55fb1f6b50c8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55fb1f6b5038 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55fb1f6b5170 <col:58> "" ""
|-CXXMethodDecl 0x55fb1f6b5308 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55fb1f6b51f8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55fb1f6b5270 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55fb1f6b53b8 <col:62> "" ""
|-CXXMethodDecl 0x55fb1f6b54d0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55fb1f6b5440 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55fb1f6b5578 <col:60> "" ""
|-CXXMethodDecl 0x55fb1f6b5710 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55fb1f6b5600 <col:34> col:37 'int'
| |-ParmVarDecl 0x55fb1f6b5678 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55fb1f6b57c0 <col:64> "" ""
|-CXXMethodDecl 0x55fb1f6b58d8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55fb1f6b5848 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55fb1f6b5980 <col:58> "" ""
|-CXXMethodDecl 0x55fb1f6b5b18 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55fb1f6b5a08 <col:33> col:36 'int'
| |-ParmVarDecl 0x55fb1f6b5a80 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55fb1f6b5bc8 <col:62> "" ""
|-CXXMethodDecl 0x55fb1f6b5ce0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55fb1f6b5c50 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55fb1f6b5d88 <col:59> "" ""
|-CXXMethodDecl 0x55fb1f6b5f20 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55fb1f6b5e10 <col:33> col:36 'int'
| |-ParmVarDecl 0x55fb1f6b5e88 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55fb1f6b5fd0 <col:63> "" ""
|-AccessSpecDecl 0x55fb1f6b6040 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55fb1f6b6068 prev 0x55fb1f6ab270 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55fb1f6b6160 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55fb1f6b6250 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55fb1f6b6378 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55fb1f6b64f8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55fb1f6b6678 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55fb1f6b67f8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55fb1f6c7628 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55fb1f6c7e98 <col:11>
| |-CXXDestructorDecl 0x55fb1f6c7700 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55fb1f6c7838 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55fb1f6c7838
| | `-ParmVarDecl 0x55fb1f6c7948 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55fb1f6c79e8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55fb1f6c79e8
| | `-ParmVarDecl 0x55fb1f6c7af8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55fb1f6ca8b8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55fb1f6ca9c8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55fb1f6cac48 <col:11>
| |   `-ReturnStmt 0x55fb1f6cac38 <col:11>
| |     `-UnaryOperator 0x55fb1f6cac20 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55fb1f6cac10 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55fb1f6caa38 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55fb1f6caa38
|   `-ParmVarDecl 0x55fb1f6cab48 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55fb1f6b6860 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55fb1f6b6978 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55fb1f6b6a18 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55fb1f6b6a80 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55fb1f6b6ae8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55fb1f6b6b50 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55fb1f6b6bb0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55fb1f6b6c70 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55fb1f6b6cd0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55fb1f6b6d30 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55fb1f6c7538 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55fb1f6b6a18 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55fb1f6c7ea8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55fb1f6c7f00 <col:12>
| |-CXXConstructorDecl 0x55fb1f6c7b68 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55fb1f6c7b68
| | `-ParmVarDecl 0x55fb1f6c7c78 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55fb1f6c7d18 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55fb1f6c7d18
| | `-ParmVarDecl 0x55fb1f6c7e28 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55fb1f6c9fa0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55fb1f6b6da8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55fb1f6b6e08 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55fb1f6b6e70 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55fb1f6b6ed8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55fb1f6b6f40 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55fb1f6b6fa8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55fb1f6b7008 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55fb1f6b7068 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55fb1f6b70d0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55fb1f6b7158 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55fb1f6b6da8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55fb1f6c74d0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55fb1f6b7008 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55fb1f6c7f10 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55fb1f6c7f70 <col:21, line:755:5>
|-CXXConstructorDecl 0x55fb1f6b72f8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55fb1f6b7238 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55fb1f6b73f0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55fb1f6b75d8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55fb1f6b74e0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55fb1f6b78a8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55fb1f6b7690 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55fb1f6b7708 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55fb1f6b7780 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55fb1f6b7ac8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55fb1f6b7978 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55fb1f6b79f0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55fb1f6c00a8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55fb1f6b7b88 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55fb1f6b7c00 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55fb1f6b7c78 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55fb1f6c0200 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55fb1f6c0170 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55fb1f6c0348 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55fb1f6c02b8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55fb1f6c0440 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_icmp
         0 |   uint8_t icmp_type
         1 |   uint8_t icmp_code
         2 |   uint16_t icmp_cksum
         4 |   uint32_t padding
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct click_icmp_tstamp
         0 |   uint8_t icmp_type
         1 |   uint8_t icmp_code
         2 |   uint16_t icmp_cksum
         4 |   uint16_t icmp_identifier
         6 |   uint16_t icmp_sequence
         8 |   uint32_t icmp_originate
        12 |   uint32_t icmp_receive
        16 |   uint32_t icmp_transmit
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55fb1f4125a8 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55fb1f4126c8 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x55fb1f412790 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x55fb1f4e2d60 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55fb1f4e8078 <col:8>
|-CXXConstructorDecl 0x55fb1f4e2e68 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x55fb1f4e2e68
| `-ParmVarDecl 0x55fb1f4e2f78 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x55fb1f4e3018 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55fb1f4e3128 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x55fb1f412790 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x55fb1f4e8290 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55fb1f4e8260 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x55fb1f412790
| |     `-CXXStaticCastExpr 0x55fb1f4e8230 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x55fb1f4e8200 <col:8> 'in_addr' lvalue ParmVar 0x55fb1f4e3128 '' 'in_addr &&'
| `-CompoundStmt 0x55fb1f4e82d8 <col:8>
`-CXXDestructorDecl 0x55fb1f4e8510 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55fb1f4dba58 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55fb1f4dbb78 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x55fb1f4dbc60 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x55fb1f4dbc40 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x55fb1f4dbc08 <col:22> 'int' 4
|-FieldDecl 0x55fb1f4dbd08 <line:29:5, col:21> col:14 ip_v 'unsigned int'
| `-ConstantExpr 0x55fb1f4dbce8 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x55fb1f4dbcb0 <col:21> 'int' 4
|-FieldDecl 0x55fb1f4dbd68 <line:33:5, col:13> col:13 ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x55fb1f4dbdc8 <line:40:5, col:14> col:14 ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x55fb1f4dbe28 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x55fb1f4dbe88 <line:42:5, col:14> col:14 ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x55fb1f4dbee8 <line:47:5, col:13> col:13 ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x55fb1f4dbf48 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x55fb1f4dbfa8 <line:49:5, col:14> col:14 ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x55fb1f4dc018 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x55fb1f4dc088 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55fb1f6f7c60 prev 0x55fb1f6a4560 <../dummy_inc/clicknet/icmp.h:17:1, line:23:1> line:17:8 referenced struct click_icmp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55fb1f6f7d58 <col:1, col:8> col:8 implicit struct click_icmp
|-FieldDecl 0x55fb1f6f7df8 <line:18:5, col:13> col:13 referenced icmp_type 'uint8_t':'unsigned char'
|-FieldDecl 0x55fb1f6f7e58 <line:19:5, col:13> col:13 icmp_code 'uint8_t':'unsigned char'
|-FieldDecl 0x55fb1f6f7eb8 <line:20:5, col:14> col:14 icmp_cksum 'uint16_t':'unsigned short'
`-FieldDecl 0x55fb1f6f7f18 <line:21:5, col:14> col:14 padding 'uint32_t':'unsigned int'

Layout: <CGRecordLayout
  LLVMType:%struct.click_icmp = type { i8, i8, i16, i32 }
  NonVirtualBaseLLVMType:%struct.click_icmp = type { i8, i8, i16, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class StringAccum
         0 |   struct StringAccum::rep_t r_
         0 |     unsigned char * s
         8 |     int len
        12 |     int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55fb1f7d7620 <../dummy_inc/click/straccum.hh:112:5, line:122:5> line:112:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55fb1f7d7738 <col:5, col:12> col:12 implicit referenced struct rep_t
|-FieldDecl 0x55fb1f7d77e0 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
|-FieldDecl 0x55fb1f7d7848 <line:114:2, col:6> col:6 referenced len 'int'
|-FieldDecl 0x55fb1f7d78b0 <line:115:2, col:6> col:6 referenced cap 'int'
|-CXXConstructorDecl 0x55fb1f7d7960 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| |-CXXCtorInitializer Field 0x55fb1f7d77e0 's' 'unsigned char *'
| | `-CXXReinterpretCastExpr 0x55fb1f7d87e0 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| |   `-CXXConstCastExpr 0x55fb1f7d8798 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| |     `-CallExpr 0x55fb1f7d8760 <col:63, col:82> 'const char *'
| |       `-ImplicitCastExpr 0x55fb1f7d8748 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| |         `-DeclRefExpr 0x55fb1f7d86f0 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x55fb1f4cf0c0 'empty_data' 'const char *()'
| |-CXXCtorInitializer Field 0x55fb1f7d7848 'len' 'int'
| | `-IntegerLiteral 0x55fb1f7d8858 <line:118:12> 'int' 0
| |-CXXCtorInitializer Field 0x55fb1f7d78b0 'cap' 'int'
| | `-IntegerLiteral 0x55fb1f7d88c0 <col:20> 'int' 0
| `-CompoundStmt 0x55fb1f7d8940 <col:23, line:119:2>
|-CXXConstructorDecl 0x55fb1f7d7ad8 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| |-ParmVarDecl 0x55fb1f7d7a18 <col:17> col:35 'uninitialized_type'
| `-CompoundStmt 0x55fb1f7d8950 <col:37, line:121:2>
|-CXXConstructorDecl 0x55fb1f7dab68 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55fb1f7dac78 <col:12> col:12 used 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x55fb1f7d77e0 's' 'unsigned char *'
| | `-ImplicitCastExpr 0x55fb1f7dc630 <col:12> 'unsigned char *' <LValueToRValue>
| |   `-MemberExpr 0x55fb1f7dc600 <col:12> 'unsigned char *const' lvalue .s 0x55fb1f7d77e0
| |     `-DeclRefExpr 0x55fb1f7dc5e0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55fb1f7dac78 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x55fb1f7d7848 'len' 'int'
| | `-ImplicitCastExpr 0x55fb1f7dc6c0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55fb1f7dc690 <col:12> 'const int' lvalue .len 0x55fb1f7d7848
| |     `-DeclRefExpr 0x55fb1f7dc670 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55fb1f7dac78 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x55fb1f7d78b0 'cap' 'int'
| | `-ImplicitCastExpr 0x55fb1f7dc750 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55fb1f7dc720 <col:12> 'const int' lvalue .cap 0x55fb1f7d78b0
| |     `-DeclRefExpr 0x55fb1f7dc700 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55fb1f7dac78 '' 'const StringAccum::rep_t &'
| `-CompoundStmt 0x55fb1f7dc7a8 <col:12>
|-CXXConstructorDecl 0x55fb1f7dad18 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x55fb1f7dad18
| `-ParmVarDecl 0x55fb1f7dae28 <col:12> col:12 'StringAccum::rep_t &&'
`-CXXDestructorDecl 0x55fb1f7dca60 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  NonVirtualBaseLLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55fb1f7d2d60 prev 0x55fb1f6f98a0 <../dummy_inc/click/straccum.hh:28:1, line:137:1> line:28:7 referenced class StringAccum definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55fb1f7d2e58 <col:1, col:7> col:7 implicit referenced class StringAccum
|-AccessSpecDecl 0x55fb1f7d2ee8 <col:21, col:27> col:21 public
|-TypedefDecl 0x55fb1f7d2f28 <line:30:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55fb1f17bdc0 'const char *'
|   `-QualType 0x55fb1f17b311 'const char' const
|     `-BuiltinType 0x55fb1f17b310 'char'
|-TypedefDecl 0x55fb1f7d2f98 <line:31:5, col:19> col:19 referenced iterator 'char *'
| `-PointerType 0x55fb1f17bf90 'char *'
|   `-BuiltinType 0x55fb1f17b310 'char'
|-TypedefDecl 0x55fb1f7d30d0 <line:33:5, col:57> col:32 referenced unspecified_bool_type 'int (StringAccum::*)() const'
| `-MemberPointerType 0x55fb1f7d3040 'int (StringAccum::*)() const'
|   |-RecordType 0x55fb1f439980 'StringAccum'
|   | `-CXXRecord 0x55fb1f7d2d60 'StringAccum'
|   `-ParenType 0x55fb1f4a90d0 'int () const' sugar
|     `-FunctionProtoType 0x55fb1f47cc60 'int () const' const cdecl
|       `-BuiltinType 0x55fb1f17b370 'int'
|-CXXConstructorDecl 0x55fb1f7d3190 <line:35:5, col:24> col:12 used StringAccum 'void ()' inline
|-CXXConstructorDecl 0x55fb1f7d32e0 <line:36:5, col:45> col:21 StringAccum 'void (int)' inline
| `-ParmVarDecl 0x55fb1f7d3250 <col:33, col:37> col:37 capacity 'int'
|-CXXConstructorDecl 0x55fb1f7d3430 <line:37:5, col:41> col:12 StringAccum 'void (const String &)' inline
| `-ParmVarDecl 0x55fb1f7d33a0 <col:24, col:38> col:38 str 'const String &'
|-CXXConstructorDecl 0x55fb1f7d35d8 <line:38:5, col:44> col:12 StringAccum 'void (const StringAccum &)' inline
| `-ParmVarDecl 0x55fb1f7d3518 <col:24, col:43> col:43 x 'const StringAccum &'
|-CXXConstructorDecl 0x55fb1f7d3788 <line:40:5, col:39> col:12 StringAccum 'void (StringAccum &&)' inline
| `-ParmVarDecl 0x55fb1f7d36c8 <col:24, col:38> col:38 x 'StringAccum &&'
|-CXXDestructorDecl 0x55fb1f7d3880 <line:42:5, col:25> col:12 used ~StringAccum 'void () noexcept' inline
|-CXXMethodDecl 0x55fb1f7d3a38 <line:44:5, col:55> col:25 operator= 'StringAccum &(const StringAccum &)' inline
| `-ParmVarDecl 0x55fb1f7d3970 <col:35, col:54> col:54 x 'const StringAccum &'
|-CXXMethodDecl 0x55fb1f7d3bb8 <line:46:5, col:50> col:25 operator= 'StringAccum &(StringAccum &&)' inline
| `-ParmVarDecl 0x55fb1f7d3af0 <col:35, col:49> col:49 x 'StringAccum &&'
|-CXXMethodDecl 0x55fb1f7d3cb0 <line:49:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55fb1f7d3d78 <line:50:5, col:23> col:18 data 'char *()' inline
|-CXXMethodDecl 0x55fb1f7d3e40 <line:51:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55fb1f7d3f08 <line:52:5, col:27> col:16 used capacity 'int () const' inline
|-CXXMethodDecl 0x55fb1f7d3fd0 <line:54:5, col:23> col:17 c_str 'const char *()'
|-CXXConversionDecl 0x55fb1f7d4138 <line:56:5, col:45> col:12 operator int (StringAccum::*)() const 'StringAccum::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55fb1f7d4208 <line:57:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55fb1f7d42c8 <line:58:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55fb1f7d43d8 <line:60:5, col:35> col:27 used begin 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x55fb1f7d44e8 <line:61:5, col:27> col:21 begin 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x55fb1f7d45a8 <line:62:5, col:33> col:27 used end 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x55fb1f7d4668 <line:63:5, col:25> col:21 end 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x55fb1f7d47b0 <line:65:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55fb1f7d4720 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55fb1f7d4940 <line:66:5, col:34> col:18 operator[] 'char &(int)' inline
| `-ParmVarDecl 0x55fb1f7d4870 <col:29, col:33> col:33 i 'int'
|-CXXMethodDecl 0x55fb1f7d4a08 <line:67:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55fb1f7d4b00 <line:68:5, col:24> col:18 front 'char &()' inline
|-CXXMethodDecl 0x55fb1f7d4bc0 <line:69:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55fb1f7d4c88 <line:70:5, col:23> col:18 back 'char &()' inline
|-CXXMethodDecl 0x55fb1f7d4d48 <line:72:5, col:33> col:17 used out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55fb1f7d4e08 <line:73:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55fb1f7d4ec8 <line:75:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x55fb1f7d5018 <line:76:5, col:31> col:18 reserve 'char *(int)' inline
| `-ParmVarDecl 0x55fb1f7d4f80 <col:26, col:30> col:30 n 'int'
|-CXXMethodDecl 0x55fb1f7d5168 <line:77:5, col:35> col:17 set_length 'void (int)' inline
| `-ParmVarDecl 0x55fb1f7d50d8 <col:28, col:32> col:32 len 'int'
|-CXXMethodDecl 0x55fb1f7d52c0 <line:78:5, col:23> col:9 resize 'int (int)'
| `-ParmVarDecl 0x55fb1f7d5228 <col:16, col:20> col:20 len 'int'
|-CXXMethodDecl 0x55fb1f7d5410 <line:79:5, col:40> col:17 used adjust_length 'void (int)' inline
| `-ParmVarDecl 0x55fb1f7d5380 <col:31, col:35> col:35 delta 'int'
|-CXXMethodDecl 0x55fb1f7d5630 <line:80:5, col:54> col:18 extend 'char *(int, int)' inline
| |-ParmVarDecl 0x55fb1f7d54d0 <col:25, col:29> col:29 nadjust 'int'
| `-ParmVarDecl 0x55fb1f7d5550 <col:38, col:53> col:42 nreserve 'int' cinit
|   `-IntegerLiteral 0x55fb1f7d8618 <col:53> 'int' 0
|-CXXMethodDecl 0x55fb1f7d5788 <line:82:5, col:35> col:17 pop_back 'void (int)' inline
| `-ParmVarDecl 0x55fb1f7d56f8 <col:26, col:34> col:30 n 'int' cinit
|   `-IntegerLiteral 0x55fb1f7d8638 <col:34> 'int' 1
|-CXXMethodDecl 0x55fb1f7d58d0 <line:84:5, col:30> col:17 used append 'void (char)' inline
| `-ParmVarDecl 0x55fb1f7d5840 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55fb1f7d5a20 <line:85:5, col:39> col:17 used append 'void (unsigned char)' inline
| `-ParmVarDecl 0x55fb1f7d5990 <col:24, col:38> col:38 c 'unsigned char'
|-CXXMethodDecl 0x55fb1f7d5b70 <line:86:5, col:35> col:17 append_utf8 'bool (int)' inline
| `-ParmVarDecl 0x55fb1f7d5ae0 <col:29, col:33> col:33 ch 'int'
|-CXXMethodDecl 0x55fb1f7d5cc0 <line:87:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55fb1f7d5c30 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55fb1f7d5e98 <line:88:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55fb1f7d5d80 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55fb1f7d5e00 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55fb1f7d6078 <line:89:5, col:55> col:17 used append 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55fb1f7d5f60 <col:24, col:45> col:45 s 'const unsigned char *'
| `-ParmVarDecl 0x55fb1f7d5fe0 <col:48, col:52> col:52 len 'int'
|-CXXMethodDecl 0x55fb1f7d62d0 <line:90:5, col:59> col:17 used append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55fb1f7d6140 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55fb1f7d61c0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55fb1f7d64b0 <line:91:5, col:77> col:17 append 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55fb1f7d6398 <col:24, col:45> col:45 first 'const unsigned char *'
| `-ParmVarDecl 0x55fb1f7d6418 <col:52, col:73> col:73 last 'const unsigned char *'
|-CXXMethodDecl 0x55fb1f7d6690 <line:92:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55fb1f7d6578 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55fb1f7d65f8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55fb1f7d69e8 <line:93:5, col:81> col:10 used append_numeric 'void (String::intmax_t, int, bool)'
| |-ParmVarDecl 0x55fb1f7d67d0 <col:25, col:42> col:42 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55fb1f7d6850 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55fb1f7d8658 <col:56> 'int' 10
| `-ParmVarDecl 0x55fb1f7d68c8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55fb1f7d8678 <col:77> 'bool' true
|-CXXMethodDecl 0x55fb1f7d6d48 <line:94:5, col:82> col:10 used append_numeric 'void (String::uintmax_t, int, bool)'
| |-ParmVarDecl 0x55fb1f7d6b30 <col:25, col:43> col:43 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55fb1f7d6bb0 <col:46, col:57> col:50 base 'int' cinit
| | `-IntegerLiteral 0x55fb1f7d8688 <col:57> 'int' 10
| `-ParmVarDecl 0x55fb1f7d6c28 <col:61, col:78> col:66 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55fb1f7d86a8 <col:78> 'bool' true
|-CXXMethodDecl 0x55fb1f7d6f70 <line:96:5, col:57> col:18 snprintf 'StringAccum &(int, const char *, ...)'
| |-ParmVarDecl 0x55fb1f7d6e18 <col:27, col:31> col:31 n 'int'
| `-ParmVarDecl 0x55fb1f7d6e98 <col:34, col:46> col:46 format 'const char *'
|-CXXMethodDecl 0x55fb1f7d7068 <line:98:5, col:24> col:12 used take_string 'String ()'
|-CXXMethodDecl 0x55fb1f7d71d8 <line:100:5, col:29> col:10 used swap 'void (StringAccum &)'
| `-ParmVarDecl 0x55fb1f7d7118 <col:15, col:28> col:28 x 'StringAccum &'
|-CXXMethodDecl 0x55fb1f7d7328 <line:104:5, col:62> col:17 forward 'void (int)' inline
| |-ParmVarDecl 0x55fb1f7d7298 <col:25, col:29> col:29 delta 'int'
| `-DeprecatedAttr 0x55fb1f7d73d0 <col:51> "" ""
|-AccessSpecDecl 0x55fb1f7d7440 <line:106:3, col:10> col:3 private
|-EnumDecl 0x55fb1f7d7468 <line:108:5, line:110:5> line:108:5
| `-EnumConstantDecl 0x55fb1f7d75b8 <line:109:2, col:23> col:2 referenced MEMO_SPACE 'StringAccum::(anonymous enum at ../dummy_inc/click/straccum.hh:108:5)'
|   `-ImplicitCastExpr 0x55fb1f7d7608 <col:15, col:23> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55fb1f7d7598 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' Int: 12
|       `-DeclRefExpr 0x55fb1f7d7568 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' EnumConstant 0x55fb1f4b1e38 'MEMO_SPACE' 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|-CXXRecordDecl 0x55fb1f7d7620 <line:112:5, line:122:5> line:112:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55fb1f7d7738 <col:5, col:12> col:12 implicit referenced struct rep_t
| |-FieldDecl 0x55fb1f7d77e0 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
| |-FieldDecl 0x55fb1f7d7848 <line:114:2, col:6> col:6 referenced len 'int'
| |-FieldDecl 0x55fb1f7d78b0 <line:115:2, col:6> col:6 referenced cap 'int'
| |-CXXConstructorDecl 0x55fb1f7d7960 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| | |-CXXCtorInitializer Field 0x55fb1f7d77e0 's' 'unsigned char *'
| | | `-CXXReinterpretCastExpr 0x55fb1f7d87e0 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| | |   `-CXXConstCastExpr 0x55fb1f7d8798 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| | |     `-CallExpr 0x55fb1f7d8760 <col:63, col:82> 'const char *'
| | |       `-ImplicitCastExpr 0x55fb1f7d8748 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| | |         `-DeclRefExpr 0x55fb1f7d86f0 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x55fb1f4cf0c0 'empty_data' 'const char *()'
| | |-CXXCtorInitializer Field 0x55fb1f7d7848 'len' 'int'
| | | `-IntegerLiteral 0x55fb1f7d8858 <line:118:12> 'int' 0
| | |-CXXCtorInitializer Field 0x55fb1f7d78b0 'cap' 'int'
| | | `-IntegerLiteral 0x55fb1f7d88c0 <col:20> 'int' 0
| | `-CompoundStmt 0x55fb1f7d8940 <col:23, line:119:2>
| |-CXXConstructorDecl 0x55fb1f7d7ad8 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| | |-ParmVarDecl 0x55fb1f7d7a18 <col:17> col:35 'uninitialized_type'
| | `-CompoundStmt 0x55fb1f7d8950 <col:37, line:121:2>
| |-CXXConstructorDecl 0x55fb1f7dab68 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55fb1f7dac78 <col:12> col:12 used 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x55fb1f7d77e0 's' 'unsigned char *'
| | | `-ImplicitCastExpr 0x55fb1f7dc630 <col:12> 'unsigned char *' <LValueToRValue>
| | |   `-MemberExpr 0x55fb1f7dc600 <col:12> 'unsigned char *const' lvalue .s 0x55fb1f7d77e0
| | |     `-DeclRefExpr 0x55fb1f7dc5e0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55fb1f7dac78 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x55fb1f7d7848 'len' 'int'
| | | `-ImplicitCastExpr 0x55fb1f7dc6c0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55fb1f7dc690 <col:12> 'const int' lvalue .len 0x55fb1f7d7848
| | |     `-DeclRefExpr 0x55fb1f7dc670 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55fb1f7dac78 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x55fb1f7d78b0 'cap' 'int'
| | | `-ImplicitCastExpr 0x55fb1f7dc750 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55fb1f7dc720 <col:12> 'const int' lvalue .cap 0x55fb1f7d78b0
| | |     `-DeclRefExpr 0x55fb1f7dc700 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55fb1f7dac78 '' 'const StringAccum::rep_t &'
| | `-CompoundStmt 0x55fb1f7dc7a8 <col:12>
| |-CXXConstructorDecl 0x55fb1f7dad18 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x55fb1f7dad18
| | `-ParmVarDecl 0x55fb1f7dae28 <col:12> col:12 'StringAccum::rep_t &&'
| `-CXXDestructorDecl 0x55fb1f7dca60 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-FieldDecl 0x55fb1f7d7bb0 <line:124:5, col:11> col:11 referenced r_ 'StringAccum::rep_t'
|-CXXMethodDecl 0x55fb1f7d7cb0 <line:126:5, col:19> col:11 used grow 'char *(int)'
| `-ParmVarDecl 0x55fb1f7d7c18 <col:16> col:19 'int'
|-CXXMethodDecl 0x55fb1f7d7e90 <line:127:5, col:48> col:11 used hard_extend 'char *(int, int)'
| |-ParmVarDecl 0x55fb1f7d7d70 <col:23, col:27> col:27 nadjust 'int'
| `-ParmVarDecl 0x55fb1f7d7df0 <col:36, col:40> col:40 nreserve 'int'
|-CXXMethodDecl 0x55fb1f7d8070 <line:128:5, col:44> col:10 used hard_append 'void (const char *, int)'
| |-ParmVarDecl 0x55fb1f7d7f58 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55fb1f7d7fd8 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55fb1f7d81c8 <line:129:5, col:43> col:10 used hard_append_cstr 'void (const char *)'
| `-ParmVarDecl 0x55fb1f7d8138 <col:27, col:39> col:39 cstr 'const char *'
|-CXXMethodDecl 0x55fb1f7d8318 <line:130:5, col:33> col:10 used append_utf8_hard 'bool (int)'
| `-ParmVarDecl 0x55fb1f7d8288 <col:27, col:31> col:31 ch 'int'
`-FriendDecl 0x55fb1f7d85d8 <line:132:5, col:70> col:25
  `-FunctionDecl 0x55fb1f7d8518 parent 0x55fb1f17b278 <col:5, col:70> col:25 operator<< 'StringAccum &(StringAccum &, const String &)'
    |-ParmVarDecl 0x55fb1f7d83d0 <col:36, col:49> col:49 sa 'StringAccum &'
    `-ParmVarDecl 0x55fb1f7d8448 <col:53, col:67> col:67 str 'const String &'

Layout: <CGRecordLayout
  LLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  NonVirtualBaseLLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55fb1f7aa580 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55fb1f7aa698 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x55fb1f7aa728 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x55fb1f7aa968 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x55fb1f7aa760 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55fb1f7aa7e0 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x55fb1f7aa858 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55fb1f7aab80 <col:81> 'const ArgContext' lvalue Var 0x55fb1f792328 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55fb1f7aaac0 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x55fb1f7aaa30 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x55fb1f7aacd8 <col:35, line:1261:5>
|   `-ReturnStmt 0x55fb1f7aacc8 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x55fb1f7aacb0 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x55fb1f7aac80 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55fb1f7aac68 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x55fb1f7aac40 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x55fb1f7aac20 <col:16, col:24> 'String' (CXXTemporary 0x55fb1f7aac20)
|               `-CXXConstructExpr 0x55fb1f7aabe8 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x55fb1f7aabd0 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x55fb1f7aabb0 <col:23> 'bool' lvalue ParmVar 0x55fb1f7aaa30 'x' 'bool'
|-CXXConstructorDecl 0x55fb1f852768 <line:1257:7> col:7 implicit constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x55fb1f852840 <col:7> col:7 implicit ~BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55fb1f852978 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x55fb1f852978
| `-ParmVarDecl 0x55fb1f852a88 <col:7> col:7 'const BoolArg &'
`-CXXConstructorDecl 0x55fb1f852b28 <col:7> col:7 implicit used constexpr BoolArg 'void (BoolArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55fb1f852c38 <col:7> col:7 'BoolArg &&'
  `-CompoundStmt 0x55fb1f853890 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55fb1f7aad18 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x55fb1f7aaf78 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55fb1f852678 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55fb1f852ca8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x55fb1f852ca8
| `-ParmVarDecl 0x55fb1f852db8 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x55fb1f852e58 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55fb1f852f68 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x55fb1f8538a0 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55fb1f853870 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x55fb1f853840 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x55fb1f853810 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x55fb1f852f68 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x55fb1f853910 <col:19>
`-CXXDestructorDecl 0x55fb1f853008 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
