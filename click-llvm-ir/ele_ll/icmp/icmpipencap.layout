
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | struct StringAccum::rep_t
         0 |   unsigned char * s
         8 |   int len
        12 |   int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636a573d488 prev 0x5636a5734c28 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5636a573d580 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x5636a573d610 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x5636a573d688 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x5636a573d748 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x5636a573d810 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x5636a573d988 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x5636a573d8c0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x5636a573da30 <col:24>
| `-OptimizeNoneAttr 0x5636a573da88 <col:34>
|-CXXMethodDecl 0x5636a573dad0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x5636a573dd88 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x5636a573db80 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5636a573dbf8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x5636a573dc78 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x5636a573de40 <line:229:7, col:14> col:7 private
|-FieldDecl 0x5636a573de78 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x5636a573dee0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x5636a573df68 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x5636a573e288 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x5636a573e020 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5636a573e098 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x5636a573e110 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x5636a573e190 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x5636a573e3a0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x5636a5745d18 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5636a5745d18
| `-ParmVarDecl 0x5636a5745e28 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x5636a5745ec8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5636a5745ec8
| `-ParmVarDecl 0x5636a5745fd8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x5636a5866080 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636a57304a0 prev 0x5636a5730220 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5636a5730598 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x5636a5730628 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5636a5730688 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x5636a5730778 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x5636a5730878 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x5636a5730a48 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x5636a57308f8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x5636a5730970 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x5636a5730bd8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5636a5730b10 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x5636a5730c80 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x5636a5730db8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x5636a5730cf0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x5636a5730f58 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x5636a5730e98 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x5636a57310f8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x5636a5731038 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x5636a57311a0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x5636a57312a0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x5636a5731380 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a5731280 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x5636a5731260 <col:26> 'int' 1
| `-EnumConstantDecl 0x5636a5731330 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x5636a5731398 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5636a5731310 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x5636a57312f0 <col:44> 'int' 2
|-CXXMethodDecl 0x5636a57314e0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x5636a57313c8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5636a5731448 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x5636a5731638 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x5636a57315a8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x5636a5731878 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x5636a57316f8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x5636a5731770 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x5636a5731928 <col:20>
| `-OptimizeNoneAttr 0x5636a5731980 <col:30>
|-CXXMethodDecl 0x5636a5731a88 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x5636a57319c0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x5636a5731b30 <col:20>
| `-OptimizeNoneAttr 0x5636a5731b88 <col:30>
|-CXXMethodDecl 0x5636a5731bd8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x5636a5731ca0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x5636a5731db8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x5636a5731e40 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x5636a5731ec8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x5636a5731f50 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x5636a5731fd8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x5636a5732068 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x5636a5732128 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x5636a57321b0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x5636a5732238 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x5636a57322c0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x5636a5732348 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x5636a57323d0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x5636a5732460 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x5636a5732520 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x5636a57325b0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x5636a5732700 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x5636a5732668 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x5636a5732890 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x5636a57327c0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x5636a5732b40 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x5636a5732948 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x5636a57329c8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x5636a5732a48 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x5636a5732bf8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x5636a5732d00 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5636a5732f90 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a5732ce0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x5636a5732cc0 <col:33> 'int' 0
| |-EnumConstantDecl 0x5636a5732d90 <line:81:9, col:32> col:9 referenced CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5636a5732fa8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a5732d70 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x5636a5732d50 <col:32> 'int' 20
| |-EnumConstantDecl 0x5636a5732e20 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5636a5732fc0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a5732e00 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x5636a5732de0 <col:38> 'int' 90
| |-EnumConstantDecl 0x5636a5732eb0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5636a5732fd8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a5732e90 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x5636a5732e70 <col:35> 'int' 100
| `-EnumConstantDecl 0x5636a5732f40 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x5636a5732ff0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5636a5732f20 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x5636a5732f00 <col:32> 'int' 2000
|-CXXMethodDecl 0x5636a5733030 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x5636a5733470 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5636a57332e0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x5636a5733358 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5636a5733540 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x5636a57336c0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x5636a57335f0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5636a57338c8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5636a5733778 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x5636a57337f0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5636a57339c8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x5636a5733a68 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x5636a5733b30 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x5636a5733bc0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x5636a5733df0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a5733ba0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x5636a5733b80 <col:36> 'int' EnumConstant 0x5636a5733b30 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x5636a5733c10 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5636a5733c60 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5636a5733cb0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5636a5733d00 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5636a5733d50 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x5636a5733da0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x5636a5733ed8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x5636a5733e18 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5636a5733fa0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x5636a5734060 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x5636a5734120 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5636a57341e0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5636a57342f8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5636a57343c0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x5636a5734540 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x5636a5734470 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x5636a5734668 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5636a5734868 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x5636a5734718 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x5636a5734798 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x5636a57421b8 <col:54, line:127:5>
|   |-ParenExpr 0x5636a5742068 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x5636a5742038 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x5636a5741d28 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5636a5741d00 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x5636a5741ce8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x5636a5741cd0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x5636a5741ca0 <col:31> 'Router *' lvalue ->_router 0x5636a573fb80
|   |   |         `-CXXThisExpr 0x5636a5741c90 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5636a5741d88 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5636a5741d68 <col:48> 'int' 0
|   |   `-CallExpr 0x5636a5741f98 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x5636a5741f80 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5636a5741f60 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5636a526ab20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5636a5741fd8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636a5741df8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x5636a5741ff0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636a5741e18 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x5636a5742008 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5636a5741e50 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x5636a5742020 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5636a5741f48 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5636a5741f30 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5636a5741ee8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x5636a5742100 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x5636a5742098 <col:9> 'Router *' lvalue ->_router 0x5636a573fb80
|   | | `-CXXThisExpr 0x5636a5742088 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x5636a57420e8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5636a57420c8 <col:19> 'Router *' lvalue ParmVar 0x5636a5734718 'r' 'Router *'
|   `-BinaryOperator 0x5636a5742198 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x5636a5742130 <col:9> 'int' lvalue ->_eindex 0x5636a573fbe8
|     | `-CXXThisExpr 0x5636a5742120 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x5636a5742180 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5636a5742160 <col:19> 'int' lvalue ParmVar 0x5636a5734798 'eindex' 'int'
|-CXXMethodDecl 0x5636a57349f0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x5636a5734928 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x5636a5734ac0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x5636a5734b88 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x5636a5734c28 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x5636a5734e78 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x5636a5734cf0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x5636a5734d70 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x5636a5734f28 <col:20>
| `-OptimizeNoneAttr 0x5636a5734f80 <col:30>
|-CXXMethodDecl 0x5636a5735088 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5636a5734fc0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x5636a5735130 <col:20>
| `-OptimizeNoneAttr 0x5636a5735188 <col:30>
|-CXXMethodDecl 0x5636a5735258 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5636a57351c8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x5636a5735300 <col:20>
| `-OptimizeNoneAttr 0x5636a5735358 <col:30>
|-CXXMethodDecl 0x5636a57354e8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x5636a5735390 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5636a5735410 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x5636a5735678 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5636a57355b0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5636a57357c8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5636a5735738 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5636a5735918 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5636a5735888 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5636a5735a68 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5636a57359d8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5636a5735d28 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x5636a5735b20 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x5636a5735ba0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x5636a5735c48 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x5636a5735e00 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x5636a5735ec0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x5636a5736190 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5636a5736040 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x5636a57360b8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x5636a57362b8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x5636a5736490 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x5636a5736370 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5636a57363f0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x5636a5736678 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x5636a5736558 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x5636a57365d8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x5636a57369e8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5636a5736738 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5636a57367b0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5636a5736830 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5636a57417a0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5636a5741780 <col:106> 'int' 0
| `-ParmVarDecl 0x5636a57368a8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5636a57417d8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5636a57417b8 <col:126> 'int' 0
|-CXXMethodDecl 0x5636a5736d88 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5636a5736ab8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5636a5736b50 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5636a5736bd0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x5636a5736c48 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5636a5741810 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5636a57417f0 <col:114> 'int' 0
|-CXXMethodDecl 0x5636a5737118 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5636a5736e60 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x5636a5736ed8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5636a5736f58 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x5636a5741828 <col:96> 'int' 0
| `-ParmVarDecl 0x5636a5736fd0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5636a5741868 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5636a5741848 <col:116> 'int' 0
|-CXXMethodDecl 0x5636a5737498 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5636a57371e8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5636a5737260 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5636a57372e0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5636a57418a0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5636a5741880 <col:109> 'int' 0
| `-ParmVarDecl 0x5636a5737358 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5636a57418d8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5636a57418b8 <col:129> 'int' 0
|-CXXMethodDecl 0x5636a5737818 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5636a5737568 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5636a57375e0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5636a5737660 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x5636a57376d8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5636a5741910 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5636a57418f0 <col:117> 'int' 0
|-CXXMethodDecl 0x5636a5737ba8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5636a57378f0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5636a5737968 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5636a57379e8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x5636a5741928 <col:99> 'int' 0
| `-ParmVarDecl 0x5636a5737a60 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5636a5741968 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5636a5741948 <col:119> 'int' 0
|-CXXMethodDecl 0x5636a5737fc8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x5636a5737c78 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5636a5737cf8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5636a5737d70 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5636a5737df0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5636a57419a0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5636a5741980 <col:108> 'int' 0
| `-ParmVarDecl 0x5636a5737e70 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x5636a57419d8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x5636a57419b8 <col:141> 'int' 0
|-CXXMethodDecl 0x5636a57383e8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5636a57380a0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5636a5738120 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5636a5738198 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5636a5738218 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x5636a5738298 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5636a57419f0 <col:121> 'int' 0
|-CXXMethodDecl 0x5636a5738818 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5636a57384c8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x5636a5738548 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x5636a57385c0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5636a5738640 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x5636a5741a10 <col:98> 'int' 0
| `-ParmVarDecl 0x5636a57386c0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5636a5741a30 <col:123> 'int' 0
|-CXXMethodDecl 0x5636a5738ae0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x5636a57388f0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5636a5738970 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x5636a57389f0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x5636a5741a50 <col:80> 'int' 0
|-EnumDecl 0x5636a5738b98 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x5636a5738ca0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5636a5738f30 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a5738c80 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x5636a5738c60 <col:42> 'int' 1
| |-EnumConstantDecl 0x5636a5738d30 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5636a5738f48 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a5738d10 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x5636a5738cf0 <col:40> 'int' 2
| |-EnumConstantDecl 0x5636a5738dc0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5636a5738f60 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a5738da0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x5636a5738d80 <col:44> 'int' 4
| |-EnumConstantDecl 0x5636a5738e50 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5636a5738f78 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a5738e30 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x5636a5738e10 <col:36> 'int' 7
| `-EnumConstantDecl 0x5636a5738ee0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x5636a5738f90 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5636a5738ec0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x5636a5738ea0 <col:34> 'int' 6
|-CXXMethodDecl 0x5636a5739248 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x5636a5738fb8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x5636a5739058 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5636a57390d8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x5636a5739150 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x5636a5741b08 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5636a5741af0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x5636a5741ad8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5636a5741ab8 <col:98, col:105> 'String' (CXXTemporary 0x5636a5741ab8)
|           `-CXXTemporaryObjectExpr 0x5636a5741a80 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5636a57394e8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5636a5739318 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5636a5739390 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5636a5739408 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5636a5741bb8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5636a5741ba0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5636a5741b88 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5636a5741b68 <col:94, col:101> 'String' (CXXTemporary 0x5636a5741b68)
| |         `-CXXTemporaryObjectExpr 0x5636a5741b30 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x5636a57423a0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5636a5742318 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5636a57422e8 <col:9> '<bound member function type>' ->add_task_handlers 0x5636a5739248
|     | `-CXXThisExpr 0x5636a57422d8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5636a5742358 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5636a5742258 <col:27> 'Task *' lvalue ParmVar 0x5636a5739318 'task' 'Task *'
|     |-ImplicitCastExpr 0x5636a5742370 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x5636a5742278 <col:33> 'NotifierSignal *' lvalue ParmVar 0x5636a5739390 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x5636a5742388 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5636a5742298 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5636a5738ee0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5636a57422b8 <col:62> 'const String' lvalue ParmVar 0x5636a5739408 'prefix' 'const String &'
|-CXXMethodDecl 0x5636a57396f8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x5636a57395b0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5636a5739628 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5636a5741c68 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5636a5741c50 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5636a5741c38 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5636a5741c18 <col:70, col:77> 'String' (CXXTemporary 0x5636a5741c18)
| |         `-CXXTemporaryObjectExpr 0x5636a5741be0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x5636a5742578 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5636a57424f0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x5636a57424c0 <col:9> '<bound member function type>' ->add_task_handlers 0x5636a5739248
|     | `-CXXThisExpr 0x5636a57424b0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5636a5742530 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5636a5742430 <col:27> 'Task *' lvalue ParmVar 0x5636a57395b0 'task' 'Task *'
|     |-ImplicitCastExpr 0x5636a5742548 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x5636a5742450 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x5636a5742560 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5636a5742470 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5636a5738ee0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5636a5742490 <col:57> 'const String' lvalue ParmVar 0x5636a5739628 'prefix' 'const String &'
|-CXXMethodDecl 0x5636a57399d8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x5636a57397c0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5636a5739840 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5636a57398b8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x5636a5739c88 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x5636a5739aa8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5636a5739b28 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5636a5739ba8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x5636a5739f78 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5636a5739d58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5636a5739dd8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5636a5739e50 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x5636a573a228 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x5636a573a048 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5636a573a0c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5636a573a148 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x5636a573a4d8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x5636a573a2f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5636a573a378 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5636a573a3f8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x5636a573a788 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x5636a573a5a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5636a573a628 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5636a573a6a0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x5636a573aa38 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x5636a573a858 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5636a573a8d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5636a573a958 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x5636a573ad48 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x5636a573ab60 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5636a573abe0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5636a573ac60 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x5636a573b028 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x5636a573ae18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5636a573ae98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5636a573af40 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x5636a573b308 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x5636a573b0f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5636a573b178 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5636a573b220 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x5636a573b570 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5636a573b3d8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5636a573b458 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5636a573b4d0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x5636a573b818 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x5636a573b640 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5636a573b6c0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5636a573b738 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x5636a573bac8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x5636a573b8e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5636a573b968 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5636a573b9e8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x5636a573bd78 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x5636a573bb98 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5636a573bc18 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5636a573bc90 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x5636a573c028 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x5636a573be48 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5636a573bec8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5636a573bf40 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x5636a573c2f8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x5636a573c0f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5636a573c178 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5636a573c218 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x5636a573c628 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x5636a573c3c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5636a573c448 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x5636a573c4c0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x5636a573c538 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5636a5741c80 <col:93> 'bool' false
|-CXXMethodDecl 0x5636a573c810 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5636a573c6f8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x5636a573c778 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x5636a573c9e8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5636a573c8d0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x5636a573c950 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x5636a573ccc8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5636a573caa8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x5636a573cb20 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x5636a573cba0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x5636a573cc18 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x5636a573cfb8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5636a573cd98 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x5636a573ce10 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x5636a573ce90 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x5636a573cf08 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x5636a573d1f0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x5636a573d090 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x5636a573d110 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x5636a573d3d8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x5636a573d2b8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x5636a573d338 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x5636a573d488 prev 0x5636a5734c28 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5636a573d580 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x5636a573d610 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x5636a573d688 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x5636a573d748 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x5636a573d810 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x5636a573d988 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x5636a573d8c0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x5636a573da30 <col:24>
| | `-OptimizeNoneAttr 0x5636a573da88 <col:34>
| |-CXXMethodDecl 0x5636a573dad0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x5636a573dd88 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x5636a573db80 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5636a573dbf8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x5636a573dc78 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x5636a573de40 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x5636a573de78 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x5636a573dee0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x5636a573df68 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x5636a573e288 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x5636a573e020 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5636a573e098 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x5636a573e110 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x5636a573e190 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x5636a573e3a0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x5636a5745d18 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5636a5745d18
| | `-ParmVarDecl 0x5636a5745e28 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x5636a5745ec8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5636a5745ec8
| | `-ParmVarDecl 0x5636a5745fd8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x5636a5866080 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5636a573e418 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x5636a573e4b8 <col:38> "" ""
|-CXXMethodDecl 0x5636a573e548 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x5636a573e5e8 <col:44> "" ""
|-AccessSpecDecl 0x5636a573e658 <line:260:3, col:10> col:3 private
|-EnumDecl 0x5636a573e680 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x5636a573e780 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x5636a573e7d0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5636a573e760 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x5636a573e740 <col:27> 'int' 4
|-FieldDecl 0x5636a573e888 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x5636a573ea38 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x5636a573eaf0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x5636a573fb80 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x5636a573fbe8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x5636a573fd38 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x5636a573fc78 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x5636a573fee8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x5636a573fdf8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x5636a57400c8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x5636a573ffa8 <col:20> col:23 'int'
| `-ParmVarDecl 0x5636a5740028 <col:25> col:28 'int'
|-CXXMethodDecl 0x5636a5740370 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x5636a5740190 <col:23> col:26 'int'
| |-ParmVarDecl 0x5636a5740210 <col:28> col:31 'int'
| `-ParmVarDecl 0x5636a5740288 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x5636a5740428 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x5636a57404f0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x5636a5740540 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x5636a5740590 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x5636a5740770 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x5636a5740620 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x5636a5740698 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5636a5740a18 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x5636a5740838 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x5636a57408b8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x5636a5740930 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x5636a5740c38 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x5636a5740ae8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x5636a5740b68 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x5636a5740f70 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x5636a5740cf8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x5636a5740d78 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x5636a5740df0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x5636a5740e70 <col:57> col:60 'int'
|-CXXMethodDecl 0x5636a5741158 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5636a5741040 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5636a57410c0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x5636a57412a8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x5636a5741218 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x5636a5741628 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x5636a5741368 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x5636a57413e8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x5636a5741460 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5636a57414e0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x5636a5741740 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ICMPIPEncap
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   struct in_addr _src
       108 |     in_addr_t s_addr
       112 |   struct in_addr _dst
       112 |     in_addr_t s_addr
       116 |   uint16_t _icmp_id
       118 |   uint16_t _ip_id
       120 |   uint8_t _icmp_type
       121 |   uint8_t _icmp_code
           | [sizeof=128, dsize=122, align=8,
           |  nvsize=122, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636a5465078 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5636a5465198 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x5636a5465260 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x5636a5535830 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5636a553ab48 <col:8>
|-CXXConstructorDecl 0x5636a5535938 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x5636a5535938
| `-ParmVarDecl 0x5636a5535a48 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x5636a5535ae8 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5636a5535bf8 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x5636a5465260 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x5636a553ad60 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5636a553ad30 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x5636a5465260
| |     `-CXXStaticCastExpr 0x5636a553ad00 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x5636a553acd0 <col:8> 'in_addr' lvalue ParmVar 0x5636a5535bf8 '' 'in_addr &&'
| `-CompoundStmt 0x5636a553ada8 <col:8>
`-CXXDestructorDecl 0x5636a553afe0 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636a5767bc0 <../elements/icmp/icmpipencap.hh:48:1, line:77:1> line:48:7 class ICMPIPEncap definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x5636a5767d18 <col:1, col:7> col:7 implicit referenced class ICMPIPEncap
|-AccessSpecDecl 0x5636a5767da8 <col:38, col:44> col:38 public
|-CXXConstructorDecl 0x5636a5767e30 <line:50:5, col:17> col:5 ICMPIPEncap 'void ()'
|-CXXDestructorDecl 0x5636a5767f20 <line:51:5, col:18> col:5 ~ICMPIPEncap 'void ()' noexcept-unevaluated 0x5636a5767f20
| `-Overrides: [ 0x5636a5730778 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x5636a5768050 <line:53:5, col:60> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x5636a5731bd8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x5636a5769268 <col:36, col:60>
|   `-ReturnStmt 0x5636a5769258 <col:38, col:45>
|     `-ImplicitCastExpr 0x5636a5769240 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5636a5769218 <col:45> 'const char [12]' lvalue "ICMPIPEncap"
|-CXXMethodDecl 0x5636a5768118 <line:54:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x5636a5731ca0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x5636a57692c8 <col:36, col:56>
|   `-ReturnStmt 0x5636a57692b8 <col:38, col:45>
|     `-ImplicitCastExpr 0x5636a57692a0 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5636a5769280 <col:45> 'const char []' lvalue Var 0x5636a5731f50 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x5636a57681e0 <line:55:5, col:45> col:17 flags 'const char *() const'
| |-Overrides: [ 0x5636a57325b0 Element::flags 'const char *() const' ]
| `-CompoundStmt 0x5636a5769328 <col:31, col:45>
|   `-ReturnStmt 0x5636a5769318 <col:33, col:40>
|     `-ImplicitCastExpr 0x5636a5769300 <col:40> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5636a57692e0 <col:40> 'const char [2]' lvalue "A"
|-CXXMethodDecl 0x5636a57684b0 <line:57:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5636a5733470 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5636a5768360 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x5636a57683d8 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x5636a5768580 <line:58:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x5636a5733540 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x5636a57686c0 <line:60:5, col:35> col:13 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x5636a5730db8 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x5636a5768630 <col:27, col:34> col:35 'Packet *'
|-AccessSpecDecl 0x5636a5768768 <line:62:3, col:10> col:3 private
|-FieldDecl 0x5636a57687b0 <line:64:5, col:20> col:20 _src 'struct in_addr':'in_addr'
|-FieldDecl 0x5636a5768820 <line:65:5, col:20> col:20 _dst 'struct in_addr':'in_addr'
|-FieldDecl 0x5636a5768880 <line:66:5, col:14> col:14 _icmp_id 'uint16_t':'unsigned short'
|-FieldDecl 0x5636a57688e0 <line:67:5, col:14> col:14 _ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x5636a5768940 <line:68:5, col:13> col:13 _icmp_type 'uint8_t':'unsigned char'
|-FieldDecl 0x5636a57689a0 <line:69:5, col:13> col:13 _icmp_code 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5636a5768b18 <line:74:5, col:49> col:19 read_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5636a5768a00 <col:32, col:40> col:41 'Element *'
| `-ParmVarDecl 0x5636a5768a80 <col:43, col:48> col:49 'void *'
|-CXXMethodDecl 0x5636a5768df8 <line:75:5, col:79> col:16 write_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5636a5768bd8 <col:30, col:43> col:44 'const String &'
| |-ParmVarDecl 0x5636a5768c50 <col:46, col:54> col:55 'Element *'
| |-ParmVarDecl 0x5636a5768cd0 <col:57, col:62> col:63 'void *'
| `-ParmVarDecl 0x5636a5768d48 <col:65, col:78> col:79 'ErrorHandler *'
|-CXXConstructorDecl 0x5636a5768ee8 <line:48:7> col:7 implicit ICMPIPEncap 'void (const ICMPIPEncap &)' inline default_delete noexcept-unevaluated 0x5636a5768ee8
| `-ParmVarDecl 0x5636a5768ff8 <col:7> col:7 'const ICMPIPEncap &'
`-CXXMethodDecl 0x5636a5769098 <col:7> col:7 implicit operator= 'ICMPIPEncap &(const ICMPIPEncap &)' inline default_delete noexcept-unevaluated 0x5636a5769098
  `-ParmVarDecl 0x5636a57691a8 <col:7> col:7 'const ICMPIPEncap &'

Layout: <CGRecordLayout
  LLVMType:%class.ICMPIPEncap = type <{ %class.Element.base, %struct.in_addr, %struct.in_addr, i16, i16, i8, i8, [6 x i8] }>
  NonVirtualBaseLLVMType:%class.ICMPIPEncap.base = type <{ %class.Element.base, %struct.in_addr, %struct.in_addr, i16, i16, i8, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636a5503330 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5636a5503448 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x5636a55034e8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x5636a5503548 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x5636a55035a8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x5636a5503658 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636a5503960 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5636a5503a78 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x5636a5503b20 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x5636a5503b88 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x5636a5503c18 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x5636a5509cb0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5636a550a0e8 <col:12>
|-CXXConstructorDecl 0x5636a5509db8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5636a5509ec8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5636a5503b20 'data' 'const char *'
| | `-ImplicitCastExpr 0x5636a550c670 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5636a550c640 <col:12> 'const char *const' lvalue .data 0x5636a5503b20
| |     `-DeclRefExpr 0x5636a550c620 <col:12> 'const String::rep_t' lvalue ParmVar 0x5636a5509ec8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5636a5503b88 'length' 'int'
| | `-ImplicitCastExpr 0x5636a550c700 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5636a550c6d0 <col:12> 'const int' lvalue .length 0x5636a5503b88
| |     `-DeclRefExpr 0x5636a550c6b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5636a5509ec8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5636a5503c18 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x5636a550c790 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5636a550c760 <col:12> 'String::memo_t *const' lvalue .memo 0x5636a5503c18
| |     `-DeclRefExpr 0x5636a550c740 <col:12> 'const String::rep_t' lvalue ParmVar 0x5636a5509ec8 '' 'const String::rep_t &'
| `-CompoundStmt 0x5636a550c7e8 <col:12>
|-CXXConstructorDecl 0x5636a5509f68 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5636a5509f68
| `-ParmVarDecl 0x5636a550a078 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x5636a550f5d0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5636a551afe8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5636a551b0f8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x5636a551b610 <col:12>
|   |-BinaryOperator 0x5636a551b428 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5636a551b3e0 <col:12> 'const char *' lvalue ->data 0x5636a5503b20
|   | | `-CXXThisExpr 0x5636a551b3d0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5636a551b410 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x5636a551b3a0 <col:12> 'const char *const' lvalue .data 0x5636a5503b20
|   |     `-DeclRefExpr 0x5636a551b380 <col:12> 'const String::rep_t' lvalue ParmVar 0x5636a551b0f8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5636a551b4f0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x5636a551b4a8 <col:12> 'int' lvalue ->length 0x5636a5503b88
|   | | `-CXXThisExpr 0x5636a551b498 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5636a551b4d8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x5636a551b468 <col:12> 'const int' lvalue .length 0x5636a5503b88
|   |     `-DeclRefExpr 0x5636a551b448 <col:12> 'const String::rep_t' lvalue ParmVar 0x5636a551b0f8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5636a551b5b8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x5636a551b570 <col:12> 'String::memo_t *' lvalue ->memo 0x5636a5503c18
|   | | `-CXXThisExpr 0x5636a551b560 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5636a551b5a0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x5636a551b530 <col:12> 'String::memo_t *const' lvalue .memo 0x5636a5503c18
|   |     `-DeclRefExpr 0x5636a551b510 <col:12> 'const String::rep_t' lvalue ParmVar 0x5636a551b0f8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x5636a551b600 <col:12>
|     `-UnaryOperator 0x5636a551b5e8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5636a551b5d8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x5636a551b168 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5636a551b168
  `-ParmVarDecl 0x5636a551b278 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636a54fa8a0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5636a54fa9b8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x5636a54faa48 <col:16, col:22> col:16 public
|-TypedefDecl 0x5636a54faa88 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x5636a51cdfd0 'const char *'
|   `-QualType 0x5636a51cd521 'const char' const
|     `-BuiltinType 0x5636a51cd520 'char'
|-TypedefDecl 0x5636a54fab10 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x5636a54faae0 'String::const_iterator' sugar
|   |-Typedef 0x5636a54faa88 'const_iterator'
|   `-PointerType 0x5636a51cdfd0 'const char *'
|     `-QualType 0x5636a51cd521 'const char' const
|       `-BuiltinType 0x5636a51cd520 'char'
|-TypedefDecl 0x5636a54fac80 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x5636a54fabf0 'int (String::*)() const'
|   |-RecordType 0x5636a54fa930 'String'
|   | `-CXXRecord 0x5636a54fa8a0 'String'
|   `-ParenType 0x5636a54fab90 'int () const' sugar
|     `-FunctionProtoType 0x5636a54cf730 'int () const' const cdecl
|       `-BuiltinType 0x5636a51cd580 'int'
|-TypedefDecl 0x5636a54face8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x5636a5324310 'int64_t' sugar
|   |-Typedef 0x5636a5236390 'int64_t'
|   `-TypedefType 0x5636a520f630 '__int64_t' sugar
|     |-Typedef 0x5636a520f208 '__int64_t'
|     `-BuiltinType 0x5636a51cd5a0 'long'
|-TypedefDecl 0x5636a54fad50 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x5636a5324230 'uint64_t' sugar
|   |-Typedef 0x5636a5236530 'uint64_t'
|   `-TypedefType 0x5636a520f6c0 '__uint64_t' sugar
|     |-Typedef 0x5636a520f278 '__uint64_t'
|     `-BuiltinType 0x5636a51cd640 'unsigned long'
|-TypedefDecl 0x5636a54fade0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x5636a54fadb0 'String::intmax_t' sugar
|   |-Typedef 0x5636a54face8 'intmax_t'
|   `-TypedefType 0x5636a5324310 'int64_t' sugar
|     |-Typedef 0x5636a5236390 'int64_t'
|     `-TypedefType 0x5636a520f630 '__int64_t' sugar
|       |-Typedef 0x5636a520f208 '__int64_t'
|       `-BuiltinType 0x5636a51cd5a0 'long'
|-TypedefDecl 0x5636a54fae70 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x5636a54fae40 'String::uintmax_t' sugar
|   |-Typedef 0x5636a54fad50 'uintmax_t'
|   `-TypedefType 0x5636a5324230 'uint64_t' sugar
|     |-Typedef 0x5636a5236530 'uint64_t'
|     `-TypedefType 0x5636a520f6c0 '__uint64_t' sugar
|       |-Typedef 0x5636a520f278 '__uint64_t'
|       `-BuiltinType 0x5636a51cd640 'unsigned long'
|-CXXConstructorDecl 0x5636a54faf30 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x5636a54fb0d8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x5636a54fb018 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x5636a54fb288 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x5636a54fb1c8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x5636a54fb3e0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x5636a54fb350 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x5636a54fb5f8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x5636a54fb4a8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x5636a54fb528 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x5636a54fb818 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5636a54fb6c8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5636a54fb748 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x5636a54fba38 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5636a54fb8e8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x5636a54fb968 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x5636a54fbc58 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5636a54fbb08 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x5636a54fbb88 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x5636a54fbde8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x5636a54fbd20 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x5636a54fbf68 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x5636a54fbea8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x5636a54fc0f8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5636a54fc030 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x5636a54fc250 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x5636a54fc1c0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x5636a54fc3a8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x5636a54fc318 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x5636a54fc500 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x5636a54fc470 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x5636a54fc688 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x5636a54fc5c8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x5636a54fc818 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x5636a54fc750 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x5636a54fc9a8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x5636a54fc8e0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x5636a54fcb38 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x5636a54fca70 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x5636a54fcc30 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x5636a54fcd58 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x5636a54fced8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x5636a54fce10 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x5636a54fd028 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x5636a54fcf98 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x5636a54fd0e0 <col:63> "" ""
|-CXXMethodDecl 0x5636a54fd228 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x5636a54fd168 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x5636a54fd438 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x5636a54fd2e8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x5636a54fd368 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x5636a54fd658 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x5636a54fd500 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x5636a54fd580 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x5636a54fd938 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x5636a54fd718 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5636a54fd798 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x5636a5509780 <col:55> 'int' 10
| `-ParmVarDecl 0x5636a54fd810 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5636a55097a0 <col:76> 'bool' true
|-CXXMethodDecl 0x5636a54fdc18 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x5636a54fda00 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5636a54fda80 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5636a55097b0 <col:56> 'int' 10
| `-ParmVarDecl 0x5636a54fdaf8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5636a55097d0 <col:77> 'bool' true
|-CXXMethodDecl 0x5636a54fdd20 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5636a54fdde8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5636a54fdeb0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x5636a54fdf50 <col:20>
| `-OptimizeNoneAttr 0x5636a54fdfa8 <col:30>
|-CXXConversionDecl 0x5636a54fe098 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5636a54fe168 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5636a54fe228 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5636a54fe318 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5636a54fe3d8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5636a54fe558 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5636a54fe490 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5636a54fe6a8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x5636a54fe618 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x5636a54fe798 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5636a54fe858 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5636a54feaa8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x5636a54fe910 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x5636a54fe990 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x5636a54fed08 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x5636a54feb70 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x5636a54febf0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x5636a54fedd8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5636a54fefe8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x5636a54fee90 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x5636a54fef10 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x5636a54ff208 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x5636a54ff0b0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x5636a54ff130 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x5636a54ff398 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x5636a54ff2d0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x5636a54ff488 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x5636a54ff5f8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x5636a54ff538 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5636a54ff808 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x5636a54ff6b8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5636a54ff738 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5636a54ffa20 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x5636a54ff8c8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x5636a54ff940 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x5636a54ffbb0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x5636a54ffae0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5636a54ffdd0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x5636a54ffc70 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x5636a54ffcf0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5636a54fff20 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x5636a54ffe90 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x5636a55000f8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x5636a54fffe0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5636a5500060 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5636a5500248 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x5636a55001b8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x5636a5500460 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x5636a5500300 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x5636a5500380 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x5636a55097e0 <col:39> 'int' 0
|-CXXMethodDecl 0x5636a5500680 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x5636a5500520 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x5636a55005a0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x5636a5509800 <col:48> 'int' 0
|-CXXMethodDecl 0x5636a5500860 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x5636a5500740 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x5636a55007c0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x5636a5509820 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x5636a5500930 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x5636a55009f0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x5636a5500ab0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x5636a5500b70 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x5636a5500c30 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x5636a5500dd8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x5636a5500ce0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x5636a5500f58 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x5636a5500e90 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x5636a5501130 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x5636a5501018 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x5636a55012a8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x5636a55011e8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x5636a55013f0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x5636a5501360 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5636a5501540 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5636a55014b0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5636a5501718 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5636a5501600 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5636a5501680 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5636a55018f8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5636a55017e0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5636a5501860 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5636a5501a48 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x5636a55019b8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5636a5501c58 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5636a5501b08 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5636a5501b88 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5636a5501db8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x5636a5501d20 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5636a5501f10 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x5636a5501e78 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x5636a5501fb8 <col:57> "" ""
|-CXXMethodDecl 0x5636a55020c8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x5636a5502038 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x5636a5502218 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x5636a5502188 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x5636a5502398 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x5636a55022d0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x5636a5502460 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x5636a5502520 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x5636a55025e0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x5636a5502680 <col:49> "" ""
|-CXXMethodDecl 0x5636a5502710 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x5636a55027d0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x5636a55028c0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x5636a5502988 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x5636a5502a48 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x5636a5502b08 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5636a5502c00 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x5636a5502cc8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x5636a5502d90 <line:174:5, col:42> col:31 used empty_data 'const char *()' static inline
|-CXXMethodDecl 0x5636a5502f68 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x5636a5502e48 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x5636a5502ec8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x5636a5503190 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x5636a5503030 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x5636a55030b0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x5636a55032a0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x5636a5503308 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x5636a5503330 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5636a5503448 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x5636a55034e8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x5636a5503548 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x5636a55035a8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x5636a5503658 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x5636a55036c0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x5636a55038f8 <line:201:2, col:32> col:2 referenced MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x5636a5503948 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5636a55038d8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x5636a55037e8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x5636a5503790 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x5636a55037d0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x5636a55037b0 <col:32> 'int' 8
|-CXXRecordDecl 0x5636a5503960 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5636a5503a78 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x5636a5503b20 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x5636a5503b88 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x5636a5503c18 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x5636a5509cb0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5636a550a0e8 <col:12>
| |-CXXConstructorDecl 0x5636a5509db8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5636a5509ec8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5636a5503b20 'data' 'const char *'
| | | `-ImplicitCastExpr 0x5636a550c670 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x5636a550c640 <col:12> 'const char *const' lvalue .data 0x5636a5503b20
| | |     `-DeclRefExpr 0x5636a550c620 <col:12> 'const String::rep_t' lvalue ParmVar 0x5636a5509ec8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5636a5503b88 'length' 'int'
| | | `-ImplicitCastExpr 0x5636a550c700 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5636a550c6d0 <col:12> 'const int' lvalue .length 0x5636a5503b88
| | |     `-DeclRefExpr 0x5636a550c6b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5636a5509ec8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5636a5503c18 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x5636a550c790 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5636a550c760 <col:12> 'String::memo_t *const' lvalue .memo 0x5636a5503c18
| | |     `-DeclRefExpr 0x5636a550c740 <col:12> 'const String::rep_t' lvalue ParmVar 0x5636a5509ec8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x5636a550c7e8 <col:12>
| |-CXXConstructorDecl 0x5636a5509f68 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5636a5509f68
| | `-ParmVarDecl 0x5636a550a078 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x5636a550f5d0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5636a551afe8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5636a551b0f8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x5636a551b610 <col:12>
| |   |-BinaryOperator 0x5636a551b428 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x5636a551b3e0 <col:12> 'const char *' lvalue ->data 0x5636a5503b20
| |   | | `-CXXThisExpr 0x5636a551b3d0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5636a551b410 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x5636a551b3a0 <col:12> 'const char *const' lvalue .data 0x5636a5503b20
| |   |     `-DeclRefExpr 0x5636a551b380 <col:12> 'const String::rep_t' lvalue ParmVar 0x5636a551b0f8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5636a551b4f0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x5636a551b4a8 <col:12> 'int' lvalue ->length 0x5636a5503b88
| |   | | `-CXXThisExpr 0x5636a551b498 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5636a551b4d8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x5636a551b468 <col:12> 'const int' lvalue .length 0x5636a5503b88
| |   |     `-DeclRefExpr 0x5636a551b448 <col:12> 'const String::rep_t' lvalue ParmVar 0x5636a551b0f8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5636a551b5b8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x5636a551b570 <col:12> 'String::memo_t *' lvalue ->memo 0x5636a5503c18
| |   | | `-CXXThisExpr 0x5636a551b560 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5636a551b5a0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x5636a551b530 <col:12> 'String::memo_t *const' lvalue .memo 0x5636a5503c18
| |   |     `-DeclRefExpr 0x5636a551b510 <col:12> 'const String::rep_t' lvalue ParmVar 0x5636a551b0f8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x5636a551b600 <col:12>
| |     `-UnaryOperator 0x5636a551b5e8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5636a551b5d8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x5636a551b168 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5636a551b168
|   `-ParmVarDecl 0x5636a551b278 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x5636a5503c90 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x5636a5503ed8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x5636a5503cf8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x5636a5503d78 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x5636a5503df0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5636a5509c70 <col:79, line:261:5>
|   |-BinaryOperator 0x5636a55098e8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5636a5509880 <col:2, col:5> 'const char *' lvalue .data 0x5636a5503b20
|   | | `-MemberExpr 0x5636a5509850 <col:2> 'String::rep_t' lvalue ->_r 0x5636a5503c90
|   | |   `-CXXThisExpr 0x5636a5509840 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5636a55098d0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5636a55098b0 <col:12> 'const char *' lvalue ParmVar 0x5636a5503cf8 'data' 'const char *'
|   |-BinaryOperator 0x5636a55099b0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x5636a5509948 <col:2, col:5> 'int' lvalue .length 0x5636a5503b88
|   | | `-MemberExpr 0x5636a5509918 <col:2> 'String::rep_t' lvalue ->_r 0x5636a5503c90
|   | |   `-CXXThisExpr 0x5636a5509908 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5636a5509998 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5636a5509978 <col:14> 'int' lvalue ParmVar 0x5636a5503d78 'length' 'int'
|   `-IfStmt 0x5636a5509c58 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x5636a5509ad0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5636a5509ab8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5636a5509a98 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5636a5509a78 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x5636a5509a10 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x5636a5503c18
|     |       | `-MemberExpr 0x5636a55099e0 <col:7> 'String::rep_t' lvalue ->_r 0x5636a5503c90
|     |       |   `-CXXThisExpr 0x5636a55099d0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5636a5509a60 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5636a5509a40 <col:17> 'String::memo_t *' lvalue ParmVar 0x5636a5503df0 'memo' 'String::memo_t *'
|     `-CallExpr 0x5636a5509c30 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x5636a5509c18 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5636a5509b20 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x5636a54f2908 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x5636a5509b88 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5636a55034e8
|         `-ImplicitCastExpr 0x5636a5509b70 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5636a5509b50 <col:27> 'String::memo_t *' lvalue ParmVar 0x5636a5503df0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x5636a5504188 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x5636a5503fa8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x5636a5504028 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x5636a55040a0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x5636a5503c90 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x5636a550a0f8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5636a550a288 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x5636a550a1f0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x5636a550a160 <col:2> '<bound member function type>' ->assign_memo 0x5636a5503ed8
|     | `-ImplicitCastExpr 0x5636a550a228 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x5636a550a150 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x5636a550a240 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5636a550a190 <col:14> 'const char *' lvalue ParmVar 0x5636a5503fa8 'data' 'const char *'
|     |-ImplicitCastExpr 0x5636a550a258 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5636a550a1b0 <col:20> 'int' lvalue ParmVar 0x5636a5504028 'length' 'int'
|     `-ImplicitCastExpr 0x5636a550a270 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5636a550a1d0 <col:28> 'String::memo_t *' lvalue ParmVar 0x5636a55040a0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x5636a5504318 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x5636a5504258 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x5636a550a4e0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x5636a550a460 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x5636a550a2b0 <col:2> '<bound member function type>' ->assign_memo 0x5636a5503ed8
|     | `-CXXThisExpr 0x5636a550a2a0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x5636a550a498 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x5636a550a330 <col:14, col:19> 'const char *' lvalue .data 0x5636a5503b20
|     |   `-MemberExpr 0x5636a550a300 <col:14, col:16> 'String::rep_t' lvalue ._r 0x5636a5503c90
|     |     `-DeclRefExpr 0x5636a550a2e0 <col:14> 'const String' lvalue ParmVar 0x5636a5504258 'x' 'const String &'
|     |-ImplicitCastExpr 0x5636a550a4b0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x5636a550a3b0 <col:25, col:30> 'int' lvalue .length 0x5636a5503b88
|     |   `-MemberExpr 0x5636a550a380 <col:25, col:27> 'String::rep_t' lvalue ._r 0x5636a5503c90
|     |     `-DeclRefExpr 0x5636a550a360 <col:25> 'const String' lvalue ParmVar 0x5636a5504258 'x' 'const String &'
|     `-ImplicitCastExpr 0x5636a550a4c8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x5636a550a430 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x5636a5503c18
|         `-MemberExpr 0x5636a550a400 <col:38, col:40> 'String::rep_t' lvalue ._r 0x5636a5503c90
|           `-DeclRefExpr 0x5636a550a3e0 <col:38> 'const String' lvalue ParmVar 0x5636a5504258 'x' 'const String &'
|-CXXMethodDecl 0x5636a55043e0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x5636a550aea0 <col:31, line:278:5>
|   `-IfStmt 0x5636a550ae88 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x5636a550a580 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5636a550a568 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x5636a550a538 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5636a5503c18
|     |     `-MemberExpr 0x5636a550a508 <col:6> 'String::rep_t' lvalue ->_r 0x5636a5503c90
|     |       `-CXXThisExpr 0x5636a550a4f8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x5636a550ae60 <col:15, line:277:2>
|       |-ParenExpr 0x5636a550aa30 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x5636a550aa00 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x5636a550a690 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x5636a550a678 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x5636a550a660 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x5636a550a620 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5636a55034e8
|       |   |       `-ImplicitCastExpr 0x5636a550a608 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x5636a550a5d8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x5636a5503c18
|       |   |           `-MemberExpr 0x5636a550a5a8 <col:27> 'String::rep_t' lvalue ->_r 0x5636a5503c90
|       |   |             `-CXXThisExpr 0x5636a550a598 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x5636a550a6f0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x5636a550a6d0 <col:54> 'int' 0
|       |   `-CallExpr 0x5636a550a960 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x5636a550a948 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5636a550a8c8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5636a526ab20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x5636a550a9a0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5636a550a7d8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x5636a550a9b8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5636a550a808 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x5636a550a9d0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5636a550a840 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x5636a550a9e8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x5636a550a8b0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x5636a550a898 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5636a550a860 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x5636a550ad80 <line:274:6, line:275:22>
|       | |-CallExpr 0x5636a550ac40 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x5636a550ac28 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5636a550aba0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x5636a54f3d50 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5636a550ab70 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5636a55034e8
|       | |   `-ImplicitCastExpr 0x5636a550ab58 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x5636a550ab28 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x5636a5503c18
|       | |       `-MemberExpr 0x5636a550aaf8 <col:40> 'String::rep_t' lvalue ->_r 0x5636a5503c90
|       | |         `-CXXThisExpr 0x5636a550aae8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x5636a550ad40 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x5636a550ad28 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5636a550ac68 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x5636a5508bc0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x5636a550ad68 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x5636a550acc8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x5636a5503c18
|       |       `-MemberExpr 0x5636a550ac98 <col:15> 'String::rep_t' lvalue ->_r 0x5636a5503c90
|       |         `-CXXThisExpr 0x5636a550ac88 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x5636a550ae40 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x5636a550add8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5636a5503c18
|         | `-MemberExpr 0x5636a550ada8 <col:6> 'String::rep_t' lvalue ->_r 0x5636a5503c90
|         |   `-CXXThisExpr 0x5636a550ad98 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x5636a550ae28 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x5636a550ae08 <col:16> 'int' 0
|-CXXMethodDecl 0x5636a5504678 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x5636a5504498 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5636a5504518 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5636a5504590 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x5636a5504750 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5636a55049a0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x5636a5504808 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5636a5504888 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5636a5504900 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x5636a5504b88 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x5636a5504a70 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x5636a5504af0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x5636a5504c88 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x5636a550af78 <col:41, line:286:5>
|   `-ReturnStmt 0x5636a550af68 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x5636a550af38 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x5636a550af00 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x5636a550aee8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x5636a550aec8 <col:46> 'int' 1
|-CXXMethodDecl 0x5636a5504f28 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x5636a5504d40 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x5636a5504dc0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x5636a5504e40 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x5636a5508bc0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x5636a5504ff0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x5636a5508c90 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x5636a5508e60 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x5636a5508d48 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5636a5508dc8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x5636a5508f20 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x5636a5508fe8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x5636a55090e8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x5636a5509160 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x5636a55091d8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x5636a5509240 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x5636a5509340 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x5636a5509390 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5636a5509320 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x5636a5509300 <col:22> 'int' 14
|-CXXMethodDecl 0x5636a55095a8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x5636a55093c0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x5636a5509440 <col:38> col:41 'int'
| `-ParmVarDecl 0x5636a55094c0 <col:43> col:46 'int'
|-FriendDecl 0x5636a55096b0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x5636a5509740 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5636a57954f0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x5636a57956c8 prev 0x5636a57954f0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5636a5795758 <col:46, col:52> col:46 public
|-TypedefDecl 0x5636a5795780 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5636a51cd580 'int'
|-TypedefDecl 0x5636a57970e0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x5636a5797090 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x5636a5797070 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x5636a5795998 'type'
|     `-SubstTemplateTypeParmType 0x5636a5795960 'String' sugar
|       |-TemplateTypeParmType 0x5636a54bf150 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5636a54bf100 'T'
|       `-RecordType 0x5636a54fa930 'String'
|         `-CXXRecord 0x5636a54fa8a0 'String'
|-TypedefDecl 0x5636a5797198 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x5636a5797160 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x5636a5797140 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5636a57970e0 'type'
|     `-ElaboratedType 0x5636a5797090 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x5636a5797070 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x5636a5795998 'type'
|         `-SubstTemplateTypeParmType 0x5636a5795960 'String' sugar
|           |-TemplateTypeParmType 0x5636a54bf150 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5636a54bf100 'T'
|           `-RecordType 0x5636a54fa930 'String'
|             `-CXXRecord 0x5636a54fa8a0 'String'
|-CXXMethodDecl 0x5636a5797318 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x5636a5797228 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x5636a5797408 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5636a57974e8 <line:23:5, col:20> col:5 used ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x5636a57977b8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5636a57976c0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x5636a57979f8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5636a5797870 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5636a57978e8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5636a5797bc8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5636a5797ab8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5636a5797b30 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5636a5797d28 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5636a5797df8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5636a5798048 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5636a5797eb8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5636a5797f30 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5636a57982a8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x5636a5798118 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5636a5798190 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5636a5798468 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5636a5798378 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5636a5798628 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5636a5798530 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5636a57986e0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5636a5798790 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5636a57989c8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5636a5798840 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5636a57988b8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5636a5798c68 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5636a5798b70 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x5636a5798d30 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x5636a5798d80 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5636a5798dd0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5636a57330e0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5636a5793f58 prev 0x5636a57330e0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5636a5795460 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x5636a5795410 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x5636a57953f0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5636a57952a0 'type'
|     `-SubstTemplateTypeParmType 0x5636a5795130 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x5636a5494f00 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x5636a5494ea8 'F'
|       `-RecordType 0x5636a5794d90 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x5636a5794cb0 'typed_array_memory'
|-FieldDecl 0x5636a5798e20 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x5636a5798e70 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5636a5798ea8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x5636a5793ff0 'String' sugar
|   |-TemplateTypeParmType 0x5636a54cc470 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5636a54cc418 'T'
|   `-RecordType 0x5636a54fa930 'String'
|     `-CXXRecord 0x5636a54fa8a0 'String'
|-TypedefDecl 0x5636a5798f38 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x5636a5798f00 'String &'
|   `-SubstTemplateTypeParmType 0x5636a5793ff0 'String' sugar
|     |-TemplateTypeParmType 0x5636a54cc470 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5636a54cc418 'T'
|     `-RecordType 0x5636a54fa930 'String'
|       `-CXXRecord 0x5636a54fa8a0 'String'
|-TypedefDecl 0x5636a5798fc8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x5636a5798f90 'const String &'
|   `-QualType 0x5636a5793ff1 'const String' const
|     `-SubstTemplateTypeParmType 0x5636a5793ff0 'String' sugar
|       |-TemplateTypeParmType 0x5636a54cc470 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5636a54cc418 'T'
|       `-RecordType 0x5636a54fa930 'String'
|         `-CXXRecord 0x5636a54fa8a0 'String'
|-TypedefDecl 0x5636a5799058 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x5636a5799020 'String *'
|   `-SubstTemplateTypeParmType 0x5636a5793ff0 'String' sugar
|     |-TemplateTypeParmType 0x5636a54cc470 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5636a54cc418 'T'
|     `-RecordType 0x5636a54fa930 'String'
|       `-CXXRecord 0x5636a54fa8a0 'String'
|-TypedefDecl 0x5636a57990e8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x5636a57990b0 'const String *'
|   `-QualType 0x5636a5793ff1 'const String' const
|     `-SubstTemplateTypeParmType 0x5636a5793ff0 'String' sugar
|       |-TemplateTypeParmType 0x5636a54cc470 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5636a54cc418 'T'
|       `-RecordType 0x5636a54fa930 'String'
|         `-CXXRecord 0x5636a54fa8a0 'String'
|-TypedefDecl 0x5636a5799d40 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x5636a5799cf0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x5636a5799cd0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x5636a5799c08 'type'
|     `-LValueReferenceType 0x5636a5799bd0 'const String &'
|       `-QualType 0x5636a5799971 'const String' const
|         `-SubstTemplateTypeParmType 0x5636a5799970 'String' sugar
|           |-TemplateTypeParmType 0x5636a549ee50 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5636a549edf8 'T'
|           `-RecordType 0x5636a54fa930 'String'
|             `-CXXRecord 0x5636a54fa8a0 'String'
|-TypedefDecl 0x5636a5799da8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x5636a5798f90 'const String &'
|   `-QualType 0x5636a5793ff1 'const String' const
|     `-SubstTemplateTypeParmType 0x5636a5793ff0 'String' sugar
|       |-TemplateTypeParmType 0x5636a54cc470 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5636a54cc418 'T'
|       `-RecordType 0x5636a54fa930 'String'
|         `-CXXRecord 0x5636a54fa8a0 'String'
|-TypedefDecl 0x5636a5799e00 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5636a51cd580 'int'
|-TypedefDecl 0x5636a5799e68 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x5636a5799020 'String *'
|   `-SubstTemplateTypeParmType 0x5636a5793ff0 'String' sugar
|     |-TemplateTypeParmType 0x5636a54cc470 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5636a54cc418 'T'
|     `-RecordType 0x5636a54fa930 'String'
|       `-CXXRecord 0x5636a54fa8a0 'String'
|-TypedefDecl 0x5636a5799ed0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x5636a57990b0 'const String *'
|   `-QualType 0x5636a5793ff1 'const String' const
|     `-SubstTemplateTypeParmType 0x5636a5793ff0 'String' sugar
|       |-TemplateTypeParmType 0x5636a54cc470 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5636a54cc418 'T'
|       `-RecordType 0x5636a54fa930 'String'
|         `-CXXRecord 0x5636a54fa8a0 'String'
|-EnumDecl 0x5636a5799f28 <line:134:5> col:5
| `-EnumConstantDecl 0x5636a579a020 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5636a579a000 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5636a54cdaf8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5636a54cdad0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5636a54cdab0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5636a579a0a8 <line:137:5, col:28> col:21 used Vector 'void ()' inline
|-CXXConstructorDecl 0x5636a579a338 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5636a579a160 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5636a579a200 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x5636a579a5c8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x5636a579a4b0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x5636a579a888 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x5636a579a770 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x5636a579aba0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x5636a579aa80 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x5636a579aec0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x5636a579ada0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x5636a579b1b0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5636a579aff8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5636a579b070 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5636a579b2d8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5636a579b388 <col:20> Inherited
| `-OptimizeNoneAttr 0x5636a579b3e0 <col:30> Inherited
|-CXXMethodDecl 0x5636a579b428 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5636a579b4d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5636a579b530 <col:30> Inherited
|-CXXMethodDecl 0x5636a579b5f8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5636a579b6a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5636a579b700 <col:30> Inherited
|-CXXMethodDecl 0x5636a579b748 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5636a579b7f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5636a579b850 <col:30> Inherited
|-CXXMethodDecl 0x5636a579b898 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5636a579b948 <col:20> Inherited
| `-OptimizeNoneAttr 0x5636a579b9a0 <col:30> Inherited
|-CXXMethodDecl 0x5636a579b9e8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5636a579ba98 <col:20> Inherited
| `-OptimizeNoneAttr 0x5636a579baf0 <col:30> Inherited
|-CXXMethodDecl 0x5636a579bb18 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5636a579bbc8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5636a579bc78 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5636a579be38 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5636a579bd28 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5636a579bda0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5636a579bf88 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5636a579bef8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5636a579c138 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x5636a579c040 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5636a579c1f0 <col:20>
| `-OptimizeNoneAttr 0x5636a579c248 <col:30>
|-CXXMethodDecl 0x5636a579c368 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x5636a579c270 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5636a579c420 <col:20>
| `-OptimizeNoneAttr 0x5636a579c478 <col:30>
|-CXXMethodDecl 0x5636a579c530 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5636a579c4a0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5636a579c678 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5636a579c5e8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5636a579c7a8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x5636a579c8a8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x5636a579c978 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x5636a579ca48 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x5636a579cb88 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5636a579caf8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5636a579ccd0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5636a579cc40 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5636a579ce18 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x5636a579cd88 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5636a579ced0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5636a579cfd0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5636a579cf40 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5636a579d088 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5636a579d148 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x5636a579d248 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x5636a579d3c8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5636a579d308 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x5636a579db88 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5636a579d480 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x5636a579dae8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x5636a579d9e8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x5636a579dc68 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5636a579ddb8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5636a579dd28 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5636a579de70 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5636a579e0b8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5636a579df30 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5636a579dfa8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5636a579e248 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x5636a579e188 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5636a579e458 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x5636a579e310 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5636a579e388 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5636a579e518 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5636a579e778 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x5636a579e680 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x5636a579e848 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit used ~Vector 'void () noexcept' inline default
  `-CompoundStmt 0x5636a585df38 <col:29>

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636a5813de8 prev 0x5636a57acdd8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5636a5813ee0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x5636a5813f70 <col:22, col:28> col:22 public
|-EnumDecl 0x5636a5813f98 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x5636a58140b8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x5636a5814098 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x5636a5814080 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5636a5814060 <col:14> 'int' 999
| |-EnumConstantDecl 0x5636a5814160 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x5636a5814140 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x5636a5814128 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5636a5814108 <col:14> 'int' 1
| |-EnumConstantDecl 0x5636a58141f0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x5636a58141d0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x5636a58141b0 <col:17> 'int' 0
| |-EnumConstantDecl 0x5636a5814280 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x5636a5814260 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x5636a5814240 <col:13> 'int' 1
| |-EnumConstantDecl 0x5636a5814310 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x5636a58142f0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x5636a58142d0 <col:16> 'int' 2
| |-EnumConstantDecl 0x5636a58143a0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x5636a5814380 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x5636a5814360 <col:13> 'int' 3
| |-EnumConstantDecl 0x5636a5814430 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x5636a5814410 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x5636a58143f0 <col:15> 'int' 4
| |-EnumConstantDecl 0x5636a58144c0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x5636a58144a0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x5636a5814480 <col:14> 'int' 5
| |-EnumConstantDecl 0x5636a5814550 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x5636a5814530 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x5636a5814510 <col:12> 'int' 6
| `-EnumConstantDecl 0x5636a5814610 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x5636a58145c0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x5636a58145a0 <col:13> 'int' 7
|-VarDecl 0x5636a5814680 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x5636a5814708 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x5636a5814790 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x5636a5814818 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x5636a58148a0 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x5636a5814928 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x5636a58149b0 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x5636a5814a38 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x5636a5814ac0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x5636a5814b48 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x5636a5814bd0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x5636a5814cd0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x5636a5819fb8 '_nerrors' 'int'
| | `-IntegerLiteral 0x5636a581a748 <line:128:13> 'int' 0
| `-CompoundStmt 0x5636a581a7b8 <col:16, line:129:5>
|-CXXDestructorDecl 0x5636a5814dc0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x5636a581a7c8 <col:29, line:132:5>
|-CXXMethodDecl 0x5636a5814f78 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x5636a5814eb0 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5636a5815040 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5636a5815128 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5636a581a820 <col:44, line:161:5>
|   `-ReturnStmt 0x5636a581a810 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x5636a581a7f8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5636a581a7d8 <col:9> 'ErrorHandler *' lvalue Var 0x5636a581a018 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x5636a5815268 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x5636a58151d8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5636a5815330 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5636a581a880 <col:43, line:173:5>
|   `-ReturnStmt 0x5636a581a870 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x5636a581a858 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5636a581a838 <col:9> 'ErrorHandler *' lvalue Var 0x5636a581a090 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x5636a58153e8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x5636a5815468 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x5636a5815578 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x5636a58154e8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5636a58156c8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x5636a5815638 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5636a5815820 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x5636a5815788 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x5636a5815978 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x5636a58158e0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5636a5815ad0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x5636a5815a38 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5636a5815ce0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5636a5815b88 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x5636a5815c08 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x5636a5815eb8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5636a5815da0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x5636a5815e20 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x5636a58160d8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5636a5815f78 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x5636a5815ff8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x5636a58162b8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5636a5816198 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5636a5816218 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5636a5816498 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5636a5816378 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5636a58163f8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5636a5816620 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x5636a5816558 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x5636a58167f0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x5636a58166d8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5636a5816750 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x5636a581aad8 <col:57, line:234:5>
|   `-ReturnStmt 0x5636a581aac8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x5636a581aab0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5636a581aa58 <col:9, col:41> 'int'
|         |-MemberExpr 0x5636a581aa28 <col:9> '<bound member function type>' ->xmessage 0x5636a5816620
|         | `-CXXThisExpr 0x5636a581aa18 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x5636a581aa98 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5636a581aa80 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5636a581a9f8 <col:18, col:40> 'String' (CXXTemporary 0x5636a581a9f8)
|               `-CallExpr 0x5636a581a9c0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x5636a581a9a8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x5636a581a920 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5636a58187e8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x5636a581a940 <col:31> 'const String' lvalue ParmVar 0x5636a5816750 'str' 'const String &'
|                 `-DeclRefExpr 0x5636a581a960 <col:36> 'const String' lvalue ParmVar 0x5636a58166d8 'anno' 'const String &'
|-CXXMethodDecl 0x5636a5816ad0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5636a58168b0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5636a5816930 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x5636a58169a8 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5636a581ad68 <col:68, line:243:5>
|   `-ReturnStmt 0x5636a581ad58 <line:242:2, col:41>
|     `-ExprWithCleanups 0x5636a581ad40 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5636a581ace0 <col:9, col:41> 'int'
|         |-MemberExpr 0x5636a581acb0 <col:9> '<bound member function type>' ->xmessage 0x5636a58167f0
|         | `-CXXThisExpr 0x5636a581aca0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5636a581ab78 <col:18> 'const String' lvalue ParmVar 0x5636a58168b0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5636a581ad28 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5636a581ad10 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5636a581ac80 <col:24, col:40> 'String' (CXXTemporary 0x5636a581ac80)
|               `-CXXMemberCallExpr 0x5636a581ac18 <col:24, col:40> 'String'
|                 |-MemberExpr 0x5636a581aba8 <col:24> '<bound member function type>' ->vformat 0x5636a5817cb0
|                 | `-CXXThisExpr 0x5636a581ab98 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5636a581ac48 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5636a581abd8 <col:32> 'const char *' lvalue ParmVar 0x5636a5816930 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5636a581ac60 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5636a581abf8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5636a58169a8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5636a5816d70 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x5636a5816b98 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5636a5816c10 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5636a5816c88 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x5636a581b0a8 <col:23, line:254:5>
|   `-ReturnStmt 0x5636a581b098 <line:253:2, col:71>
|     `-ExprWithCleanups 0x5636a581b080 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x5636a581b020 <col:9, col:71> 'int'
|         |-MemberExpr 0x5636a581aff0 <col:9> '<bound member function type>' ->xmessage 0x5636a58167f0
|         | `-CXXThisExpr 0x5636a581afe0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x5636a581b068 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x5636a581b050 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x5636a581afa0 <col:18, col:65> 'String' (CXXTemporary 0x5636a581afa0)
|         |     `-CallExpr 0x5636a581af38 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x5636a581af20 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x5636a581ae08 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5636a58187e8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x5636a581ae28 <col:31> 'const String' lvalue ParmVar 0x5636a5816c10 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x5636a581af80 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x5636a581af68 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x5636a581af00 <col:37, col:64> 'String' (CXXTemporary 0x5636a581af00)
|         |             `-CallExpr 0x5636a581aed0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x5636a581aeb8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x5636a581ae48 <col:37> 'String (const String &)' lvalue CXXMethod 0x5636a5818e38 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x5636a581ae68 <col:56> 'const String' lvalue ParmVar 0x5636a5816b98 'landmark' 'const String &'
|         `-DeclRefExpr 0x5636a581afc0 <col:68> 'const String' lvalue ParmVar 0x5636a5816c88 'str' 'const String &'
|-CXXMethodDecl 0x5636a58170f0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5636a5816e38 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5636a5816eb0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5636a5816f30 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x5636a5816fa8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5636a581b360 <col:34, line:267:5>
|   `-ReturnStmt 0x5636a581b350 <line:266:2, col:51>
|     `-ExprWithCleanups 0x5636a581b338 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x5636a581b2d0 <col:9, col:51> 'int'
|         |-MemberExpr 0x5636a581b2a0 <col:9> '<bound member function type>' ->xmessage 0x5636a5816d70
|         | `-CXXThisExpr 0x5636a581b290 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5636a581b148 <col:18> 'const String' lvalue ParmVar 0x5636a5816e38 'landmark' 'const String &'
|         |-DeclRefExpr 0x5636a581b168 <col:28> 'const String' lvalue ParmVar 0x5636a5816eb0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5636a581b320 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x5636a581b308 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5636a581b270 <col:34, col:50> 'String' (CXXTemporary 0x5636a581b270)
|               `-CXXMemberCallExpr 0x5636a581b208 <col:34, col:50> 'String'
|                 |-MemberExpr 0x5636a581b198 <col:34> '<bound member function type>' ->vformat 0x5636a5817cb0
|                 | `-CXXThisExpr 0x5636a581b188 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5636a581b238 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5636a581b1c8 <col:42> 'const char *' lvalue ParmVar 0x5636a5816f30 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5636a581b250 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5636a581b1e8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5636a5816fa8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5636a5817200 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x5636a581b3e0 <col:25, line:288:5>
|   `-ReturnStmt 0x5636a581b3d0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x5636a581b3b8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x5636a581b388 <col:9> 'const int' lvalue ->_nerrors 0x5636a5819fb8
|         `-CXXThisExpr 0x5636a581b378 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x5636a5817410 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x5636a58172b8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x5636a5817338 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x5636a58176f8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5636a58174d8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x5636a5817558 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x5636a58175d0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5636a5817890 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x5636a58177c8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x5636a5817ad8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5636a5817950 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x5636a58179c8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5636a581b640 <col:58, line:357:5>
|   `-ReturnStmt 0x5636a581b630 <line:356:2, col:29>
|     `-ExprWithCleanups 0x5636a581b618 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x5636a581b5e8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5636a581b5d0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5636a581b5b0 <col:9, col:29> 'String' (CXXTemporary 0x5636a581b5b0)
|             `-CallExpr 0x5636a581b540 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x5636a581b528 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5636a581b4a8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x5636a58176f8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x5636a581b448 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x5636a581b578 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x5636a581b468 <col:21> 'const char *' lvalue ParmVar 0x5636a5817950 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x5636a581b590 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x5636a581b488 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5636a58179c8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5636a5817cb0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x5636a5817ba0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x5636a5817c18 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5636a5817e08 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x5636a5817d78 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x5636a5817f50 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x5636a5817ec0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x5636a58181f0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x5636a5818008 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x5636a5818088 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x5636a5818100 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x5636a5818350 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x5636a58182c0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x5636a581b758 <col:37, line:441:5>
|   `-IfStmt 0x5636a581b740 <line:439:2, line:440:8>
|     |-BinaryOperator 0x5636a581b6c8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x5636a581b698 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x5636a581b658 <col:6> 'int' lvalue ParmVar 0x5636a58182c0 'level' 'int'
|     | `-ImplicitCastExpr 0x5636a581b6b0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x5636a581b678 <col:15> 'ErrorHandler::Level' EnumConstant 0x5636a58143a0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x5636a581b728 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x5636a581b6f8 <col:8> 'int' lvalue ->_nerrors 0x5636a5819fb8
|         `-CXXThisExpr 0x5636a581b6e8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x5636a5818418 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x5636a581b7f0 <col:26, line:448:5>
|   `-BinaryOperator 0x5636a581b7d0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x5636a581b780 <col:2> 'int' lvalue ->_nerrors 0x5636a5819fb8
|     | `-CXXThisExpr 0x5636a581b770 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x5636a581b7b0 <col:13> 'int' 0
|-CXXMethodDecl 0x5636a58185e0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x5636a58184d0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5636a5818548 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x5636a58187e8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x5636a58186a0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x5636a5818718 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x5636a5818a98 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x5636a58188a8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x5636a5818928 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x5636a58189a8 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x5636a5818b50 <col:59> 0 0
|-CXXMethodDecl 0x5636a5818ce8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x5636a5818bc8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x5636a5818c48 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x5636a581be60 <col:70, line:534:5>
|   |-DeclStmt 0x5636a581b960 <line:528:2, col:20>
|   | |-VarDecl 0x5636a581b818 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x5636a581b880 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x5636a581b8b8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x5636a581b920 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x5636a581ba30 <line:529:2, col:23>
|   | `-VarDecl 0x5636a581b990 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x5636a581ba18 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5636a581b9f8 <col:18> 'const char *' lvalue ParmVar 0x5636a5818bc8 'begin' 'const char *'
|   |-DoStmt 0x5636a581bdf8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x5636a581bd28 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x5636a581bd10 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x5636a581bcf0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x5636a581ba48 <col:6> 'const char *' lvalue Var 0x5636a581b990 'x' 'const char *'
|   | |     `-CallExpr 0x5636a581bc40 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x5636a581bc28 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5636a581bbe0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x5636a581a490 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x5636a581bca8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x5636a581bc90 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x5636a581bb00 <col:20, col:27> 'String' (CXXTemporary 0x5636a581bb00)
|   | |       |     `-CXXTemporaryObjectExpr 0x5636a581bac8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x5636a581bcc0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5636a581bb20 <col:30> 'const char *' lvalue Var 0x5636a581b990 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x5636a581bcd8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5636a581bb40 <col:33> 'const char *' lvalue ParmVar 0x5636a5818c48 'end' 'const char *'
|   | |       |-UnaryOperator 0x5636a581bb80 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5636a581bb60 <col:39> 'String' lvalue Var 0x5636a581b818 'name' 'String'
|   | |       |-UnaryOperator 0x5636a581bbb8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5636a581bb98 <col:46> 'String' lvalue Var 0x5636a581b8b8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x5636a581bbd0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x5636a581bde0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x5636a581bdc8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x5636a581bda8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x5636a581bd78 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5636a54fe098
|   |         `-ImplicitCastExpr 0x5636a581bd60 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x5636a581bd40 <col:11> 'String' lvalue Var 0x5636a581b818 'name' 'String'
|   `-ReturnStmt 0x5636a581be50 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x5636a581be38 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x5636a581be18 <col:9> 'const char *' lvalue Var 0x5636a581b990 'x' 'const char *'
|-CXXMethodDecl 0x5636a5818e38 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x5636a5818da8 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x5636a581c468 <col:55, line:550:5>
|   `-IfStmt 0x5636a581c440 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x5636a581c0a0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x5636a581c088 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5636a581c070 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5636a581c050 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5636a581c020 <col:6> '<bound member function type>' .operator int (String::*)() const 0x5636a54fe098
|     | |       `-DeclRefExpr 0x5636a581bec0 <col:6> 'const String' lvalue ParmVar 0x5636a5818da8 'x' 'const String &'
|     | `-BinaryOperator 0x5636a581c000 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x5636a581bfd0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x5636a581bf80 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x5636a581bf68 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5636a581bf20 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x5636a55178d0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x5636a581bee0 <col:11> 'const String' lvalue ParmVar 0x5636a5818da8 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x5636a581bf00 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x5636a581bfe8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x5636a581bfb8 <col:19> 'char' 123
|     |-ReturnStmt 0x5636a581c110 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x5636a581c0e0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x5636a581c0c0 <col:13> 'const String' lvalue ParmVar 0x5636a5818da8 'x' 'const String &'
|     `-IfStmt 0x5636a581c418 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x5636a581c1a8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5636a581c190 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5636a581c170 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5636a581c140 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5636a54fe098
|       |       `-DeclRefExpr 0x5636a581c120 <col:11> 'const String' lvalue ParmVar 0x5636a5818da8 'x' 'const String &'
|       |-ReturnStmt 0x5636a581c330 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x5636a581c318 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x5636a581c2e8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x5636a581c2d0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x5636a581c2b0 <col:13, col:29> 'String' (CXXTemporary 0x5636a581c2b0)
|       |         `-CallExpr 0x5636a581c260 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x5636a581c248 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x5636a581c1c0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x5636a58185e0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x5636a581c290 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x5636a581c1e0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x5636a581c200 <col:28> 'const String' lvalue ParmVar 0x5636a5818da8 'x' 'const String &'
|       `-ReturnStmt 0x5636a581c408 <line:549:6, col:20>
|         `-ExprWithCleanups 0x5636a581c3f0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x5636a581c3c0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x5636a581c3a8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x5636a581c388 <col:13, col:20> 'String' (CXXTemporary 0x5636a581c388)
|                 `-CXXTemporaryObjectExpr 0x5636a581c350 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x5636a5819000 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x5636a5818ef0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x5636a5818f68 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5636a581a738 <col:71> 'bool' false
|-CXXRecordDecl 0x5636a58190b0 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x5636a58193a8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x5636a5819340 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x5636a58192e0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x5636a58192a0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x5636a54fa930 'String'
|       | `-CXXRecord 0x5636a54fa8a0 'String'
|       |-BuiltinType 0x5636a51cd580 'int'
|       `-DecayedType 0x5636a57ade20 '__va_list_tag *' sugar
|         |-TypedefType 0x5636a57addf0 'va_list' sugar
|         | |-Typedef 0x5636a53ec9f0 'va_list'
|         | `-TypedefType 0x5636a53ec9a0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x5636a53245c8 '__gnuc_va_list'
|         |   `-TypedefType 0x5636a5324530 '__builtin_va_list' sugar
|         |     |-Typedef 0x5636a520ed38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x5636a520ece0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x5636a51ce2d0 '__va_list_tag'
|         |         `-CXXRecord 0x5636a51ce238 '__va_list_tag'
|         `-PointerType 0x5636a53f2290 '__va_list_tag *'
|           `-RecordType 0x5636a51ce2d0 '__va_list_tag'
|             `-CXXRecord 0x5636a51ce238 '__va_list_tag'
|-EnumDecl 0x5636a5819400 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x5636a5819500 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5636a5819a60 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a58194e0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x5636a58194c0 <col:16> 'int' 1
| |-EnumConstantDecl 0x5636a5819590 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5636a5819a78 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a5819570 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x5636a5819550 <col:21> 'int' 2
| |-EnumConstantDecl 0x5636a5819620 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5636a5819a90 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a5819600 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x5636a58195e0 <col:22> 'int' 4
| |-EnumConstantDecl 0x5636a58196b0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5636a5819aa8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a5819690 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x5636a5819670 <col:17> 'int' 8
| |-EnumConstantDecl 0x5636a5819740 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5636a5819ac0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a5819720 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x5636a5819700 <col:22> 'int' 16
| |-EnumConstantDecl 0x5636a58197d0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5636a5819ad8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a58197b0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5636a5819790 <col:19> 'int' 32
| |-EnumConstantDecl 0x5636a5819860 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5636a5819af0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a5819840 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x5636a5819820 <col:17> 'int' 64
| |-EnumConstantDecl 0x5636a58198f0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5636a5819b08 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a58198d0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x5636a58198b0 <col:14> 'int' 128
| |-EnumConstantDecl 0x5636a5819980 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5636a5819b20 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a5819960 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x5636a5819940 <col:16> 'int' 256
| `-EnumConstantDecl 0x5636a5819a10 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x5636a5819b38 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5636a58199f0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x5636a58199d0 <col:12> 'int' 1024
|-CXXMethodDecl 0x5636a5819d48 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x5636a5819b60 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x5636a5819c00 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x5636a5819ed0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x5636a5819e08 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x5636a5819f78 <line:580:3, col:10> col:3 private
|-FieldDecl 0x5636a5819fb8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x5636a581a018 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x5636a581a090 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x5636a581a490 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x5636a581a108 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x5636a581a188 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x5636a581a208 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x5636a581a280 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x5636a581a2f8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x5636a581a370 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x5636a581a5b8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x5636a581a5b8
| `-ParmVarDecl 0x5636a581a6c8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x5636a581c818 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x5636a581c818
  `-ParmVarDecl 0x5636a581c928 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636a57ace68 prev 0x5636a56f5b88 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5636a57acf60 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x5636a57acff0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x5636a57ad128 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x5636a57ad028 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5636a57ae550 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5636a57ae530 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5636a57ae0c8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5636a57ae5e0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5636a57ae5a0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x5636a57ad028 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5636a57ae130 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5636a57ae660 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5636a57ae620 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5636a57ae190 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5636a57ae6b8 <col:54> 'bool' false
| `-CompoundStmt 0x5636a57ae7c0 <col:61, line:38:5>
|   `-BinaryOperator 0x5636a57ae7a0 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x5636a57ae738 <col:9> 'const Element *' lvalue ->_context 0x5636a57ae068
|     | `-CXXThisExpr 0x5636a57ae728 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x5636a57ae788 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x5636a57ae768 <col:20> 'int' 0
|-CXXConstructorDecl 0x5636a57ad338 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5636a57ad1e8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x5636a57ad260 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5636a57ae588 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5636a57ae568 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x5636a57ae068 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x5636a57ae818 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x5636a57ae7d8 <col:20> 'const Element *' lvalue ParmVar 0x5636a57ad1e8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x5636a57ae0c8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5636a57ae898 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5636a57ae858 <col:36> 'ErrorHandler *' lvalue ParmVar 0x5636a57ad260 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5636a57ae130 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5636a57ae918 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5636a57ae8d8 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x5636a57ae190 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5636a57ae958 <col:73> 'bool' false
| `-CompoundStmt 0x5636a57ae9d0 <col:80, line:46:5>
|-CXXMethodDecl 0x5636a57ad468 <line:49:5, line:51:5> line:49:20 used context 'const Element *() const'
| `-CompoundStmt 0x5636a57aea48 <col:36, line:51:5>
|   `-ReturnStmt 0x5636a57aea38 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x5636a57aea20 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x5636a57ae9f0 <col:16> 'const Element *const' lvalue ->_context 0x5636a57ae068
|         `-CXXThisExpr 0x5636a57ae9e0 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5636a57ad558 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x5636a57aeac8 <col:32, line:57:5>
|   `-ReturnStmt 0x5636a57aeab8 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x5636a57aeaa0 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x5636a57aea70 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x5636a57ae0c8
|         `-CXXThisExpr 0x5636a57aea60 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5636a57ad618 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x5636a57ad7a0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x5636a57ad6d0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5636a57ad8f0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x5636a57ad860 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5636a57ada40 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x5636a57ad9b0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5636a57adc48 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x5636a57adaf8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x5636a57adb70 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x5636a57adf78 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x5636a57add08 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x5636a57add88 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x5636a57ade50 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x5636a57ae030 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x5636a57ae068 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x5636a57ae0c8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x5636a57ae130 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x5636a57ae190 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x5636a57ae1e0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x5636a57ae1e0
| `-ParmVarDecl 0x5636a57ae2f8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x5636a57ae398 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x5636a57ae398
| `-ParmVarDecl 0x5636a57ae4a8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x5636a5866de0 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5636a57d65a0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x5636a57d6778 prev 0x5636a57d65a0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5636a57d6808 <col:46, col:52> col:46 public
|-TypedefDecl 0x5636a57d6830 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5636a51cd580 'int'
|-TypedefDecl 0x5636a57d8400 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x5636a57d83b0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x5636a57d6ce0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x5636a57d6be0 'type'
|     `-TemplateSpecializationType 0x5636a57d6b70 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5636a57d6a50 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x5636a57d6a30 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5636a57d6a10 <col:24> 'unsigned long' 4
|       `-RecordType 0x5636a57d6b50 'char_array<4>'
|         `-ClassTemplateSpecialization 0x5636a57d6a70 'char_array'
|-TypedefDecl 0x5636a57d84b8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x5636a57d8480 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x5636a57d8460 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x5636a57d8400 'type'
|     `-ElaboratedType 0x5636a57d83b0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x5636a57d6ce0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x5636a57d6be0 'type'
|         `-TemplateSpecializationType 0x5636a57d6b70 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5636a57d6a50 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x5636a57d6a30 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5636a57d6a10 <col:24> 'unsigned long' 4
|           `-RecordType 0x5636a57d6b50 'char_array<4>'
|             `-ClassTemplateSpecialization 0x5636a57d6a70 'char_array'
|-CXXMethodDecl 0x5636a57d8638 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x5636a57d8548 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x5636a57d8728 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5636a57d8808 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x5636a57d8ad8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5636a57d89e0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x5636a57d8d18 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5636a57d8b90 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5636a57d8c08 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5636a57d8ee8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5636a57d8dd8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5636a57d8e50 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5636a57d9048 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5636a57d9118 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5636a57d9368 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5636a57d91d8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5636a57d9250 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5636a57d95c8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x5636a57d9438 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5636a57d94b0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5636a57d9788 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5636a57d9698 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5636a57d9948 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5636a57d9850 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5636a57d9a00 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5636a57d9ab0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5636a57d9ce8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5636a57d9b60 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5636a57d9bd8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5636a57d9f88 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5636a57d9e90 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x5636a57da050 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x5636a57da0a0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5636a57da0f0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5636a57d4fa8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5636a57d51b8 prev 0x5636a57d4fa8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5636a57d6510 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x5636a57d64c0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x5636a57d64a0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x5636a57d6350 'type'
|     `-SubstTemplateTypeParmType 0x5636a57d6170 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x5636a5494780 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5636a5494728 'T'
|       `-RecordType 0x5636a57d5cc0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x5636a57d5bd8 'sized_array_memory'
|-FieldDecl 0x5636a57da140 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x5636a57da190 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5636a57da1c8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x5636a57d5250 'int' sugar
|   |-TemplateTypeParmType 0x5636a54cc470 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5636a54cc418 'T'
|   `-BuiltinType 0x5636a51cd580 'int'
|-TypedefDecl 0x5636a57da258 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x5636a57da220 'int &'
|   `-SubstTemplateTypeParmType 0x5636a57d5250 'int' sugar
|     |-TemplateTypeParmType 0x5636a54cc470 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5636a54cc418 'T'
|     `-BuiltinType 0x5636a51cd580 'int'
|-TypedefDecl 0x5636a57da318 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x5636a57da2e0 'const int &'
|   `-QualType 0x5636a57d5251 'const int' const
|     `-SubstTemplateTypeParmType 0x5636a57d5250 'int' sugar
|       |-TemplateTypeParmType 0x5636a54cc470 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5636a54cc418 'T'
|       `-BuiltinType 0x5636a51cd580 'int'
|-TypedefDecl 0x5636a57da3a8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x5636a57da370 'int *'
|   `-SubstTemplateTypeParmType 0x5636a57d5250 'int' sugar
|     |-TemplateTypeParmType 0x5636a54cc470 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5636a54cc418 'T'
|     `-BuiltinType 0x5636a51cd580 'int'
|-TypedefDecl 0x5636a57da438 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x5636a57da400 'const int *'
|   `-QualType 0x5636a57d5251 'const int' const
|     `-SubstTemplateTypeParmType 0x5636a57d5250 'int' sugar
|       |-TemplateTypeParmType 0x5636a54cc470 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5636a54cc418 'T'
|       `-BuiltinType 0x5636a51cd580 'int'
|-TypedefDecl 0x5636a57db020 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x5636a57dafd0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x5636a57dafb0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x5636a57daf40 'type'
|     `-SubstTemplateTypeParmType 0x5636a57dad00 'int' sugar
|       |-TemplateTypeParmType 0x5636a549f580 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5636a549f530 'T'
|       `-BuiltinType 0x5636a51cd580 'int'
|-TypedefDecl 0x5636a57db088 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x5636a57da2e0 'const int &'
|   `-QualType 0x5636a57d5251 'const int' const
|     `-SubstTemplateTypeParmType 0x5636a57d5250 'int' sugar
|       |-TemplateTypeParmType 0x5636a54cc470 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5636a54cc418 'T'
|       `-BuiltinType 0x5636a51cd580 'int'
|-TypedefDecl 0x5636a57db0e0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5636a51cd580 'int'
|-TypedefDecl 0x5636a57db148 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x5636a57da370 'int *'
|   `-SubstTemplateTypeParmType 0x5636a57d5250 'int' sugar
|     |-TemplateTypeParmType 0x5636a54cc470 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5636a54cc418 'T'
|     `-BuiltinType 0x5636a51cd580 'int'
|-TypedefDecl 0x5636a57db1b0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x5636a57da400 'const int *'
|   `-QualType 0x5636a57d5251 'const int' const
|     `-SubstTemplateTypeParmType 0x5636a57d5250 'int' sugar
|       |-TemplateTypeParmType 0x5636a54cc470 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5636a54cc418 'T'
|       `-BuiltinType 0x5636a51cd580 'int'
|-EnumDecl 0x5636a57db208 <line:134:5> col:5
| `-EnumConstantDecl 0x5636a57db300 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5636a57db2e0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5636a54cdaf8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5636a54cdad0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5636a54cdab0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5636a57db388 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5636a57db5d8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5636a57db440 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5636a57db4e0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x5636a57db898 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x5636a57db780 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x5636a57dbb58 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x5636a57dba40 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x5636a57dbea0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x5636a57dbd80 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x5636a57dc1b0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x5636a57dc090 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x5636a57dc4a0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5636a57dc2e8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5636a57dc360 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5636a57dc5c8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5636a57dc6a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5636a57dc700 <col:30> Inherited
|-CXXMethodDecl 0x5636a57dc748 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5636a57dc7f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5636a57dc850 <col:30> Inherited
|-CXXMethodDecl 0x5636a57dc918 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5636a57dc9c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5636a57dca20 <col:30> Inherited
|-CXXMethodDecl 0x5636a57de9f0 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5636a57deaa0 <col:20> Inherited
| `-OptimizeNoneAttr 0x5636a57deaf8 <col:30> Inherited
|-CXXMethodDecl 0x5636a57deb40 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5636a57debf0 <col:20> Inherited
| `-OptimizeNoneAttr 0x5636a57dec48 <col:30> Inherited
|-CXXMethodDecl 0x5636a57dec90 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5636a57ded40 <col:20> Inherited
| `-OptimizeNoneAttr 0x5636a57ded98 <col:30> Inherited
|-CXXMethodDecl 0x5636a57dedc0 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5636a57dee70 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5636a57def20 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5636a57df0e0 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5636a57defd0 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5636a57df048 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5636a57df230 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5636a57df1a0 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5636a57df3d8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x5636a57df2e8 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5636a57df490 <col:20>
| `-OptimizeNoneAttr 0x5636a57df4e8 <col:30>
|-CXXMethodDecl 0x5636a57df608 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x5636a57df510 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5636a57df6c0 <col:20>
| `-OptimizeNoneAttr 0x5636a57df718 <col:30>
|-CXXMethodDecl 0x5636a57df7d0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5636a57df740 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5636a57df918 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5636a57df888 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5636a57dfa48 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x5636a57dfb78 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x5636a57dfc48 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x5636a57dfd18 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x5636a57dfe58 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5636a57dfdc8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5636a57dffa0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5636a57dff10 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5636a57e00e8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x5636a57e0058 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5636a57e01a0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5636a57e02a0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5636a57e0210 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5636a57e0358 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5636a57e0418 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x5636a57e0518 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x5636a57e0698 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5636a57e05d8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x5636a57e0e58 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5636a57e0750 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x5636a57e0db8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x5636a57e0cb8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x5636a57e0f38 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5636a57e1088 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5636a57e0ff8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5636a57e1140 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5636a57e1388 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5636a57e1200 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5636a57e1278 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5636a57e1548 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x5636a57e1458 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5636a57e1798 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x5636a57e1610 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5636a57e1688 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5636a57e1858 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5636a57e1ab8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x5636a57e19c0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x5636a57e1b88 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636a57c7618 prev 0x5636a57b39d8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5636a57c7710 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x5636a57c7800 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x5636a57f5880 <col:16, line:828:9>
|-CXXDestructorDecl 0x5636a57c78f0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x5636a57f5890 <col:25, line:830:9>
|-CXXMethodDecl 0x5636a57c79f0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x5636a57c7aa0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x5636a57c7b48 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5636a57c7b48
| `-ParmVarDecl 0x5636a57c7c58 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x5636a57c8418 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5636a57c8418
  `-ParmVarDecl 0x5636a57c8528 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636a57b37e8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x5636a57b3948 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x5636a57b39d8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x5636a57b3a90 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x5636a57b3b98 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x5636a57b3ac8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5636a57e3148 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5636a57e3128 <col:31> 'int' 0
|-CXXConstructorDecl 0x5636a57b3eb8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x5636a57b3d30 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x5636a57b3da8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5636a57e3180 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5636a57e3160 <col:59> 'int' 0
|-CXXConstructorDecl 0x5636a57b4090 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5636a57b3f80 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x5636a57b3ff8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5636a57e31b8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5636a57e3198 <col:55> 'int' 0
|-CXXConstructorDecl 0x5636a57b4448 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5636a57b4230 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x5636a57b42a8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x5636a57b4320 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5636a57e31f0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5636a57e31d0 <col:31> 'int' 0
|-CXXConstructorDecl 0x5636a57b4608 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x5636a57b4548 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x5636a57b4700 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x5636a57b48e8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x5636a57b47f0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x5636a57b49d8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x5636a57e35a0 <col:24, line:291:5>
|   `-ReturnStmt 0x5636a57e3590 <line:290:9, col:79>
|     `-BinaryOperator 0x5636a57e3570 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x5636a57e3448 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x5636a57e33a0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x5636a57e3380 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x5636a57e3278 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x5636a57e3260 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x5636a57e3248 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x5636a57e3218 <col:18> 'Vector<String> *const' lvalue ->_conf 0x5636a57d4f40
|       | |   |       `-CXXThisExpr 0x5636a57e3208 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x5636a57e3368 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x5636a57e3350 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x5636a57e3318 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x5636a57e32e8 <col:28, col:35> '<bound member function type>' ->size 0x5636a579bb18
|       | |           `-ImplicitCastExpr 0x5636a57e3338 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x5636a57e32d0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x5636a57e32a0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x5636a57d4f40
|       | |                 `-CXXThisExpr 0x5636a57e3290 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x5636a57e3430 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x5636a57e3418 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x5636a57e3400 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x5636a57e33d0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x5636a57e1cd0
|       |         `-CXXThisExpr 0x5636a57e33c0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x5636a57e3550 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x5636a57e3538 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5636a57e3520 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5636a57e34e0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5636a57e34c8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5636a57e3478 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5636a57e1d80
|         |     |   `-CXXThisExpr 0x5636a57e3468 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5636a57e34a8 <col:73> 'int' 0
|         `-IntegerLiteral 0x5636a57e3500 <col:79> 'int' 0
|-CXXMethodDecl 0x5636a57b4a98 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x5636a57e3778 <col:32, line:296:5>
|   `-ReturnStmt 0x5636a57e3768 <line:295:9, col:49>
|     `-BinaryOperator 0x5636a57e3748 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x5636a57e3628 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x5636a57e3610 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x5636a57e35f8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x5636a57e35c8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x5636a57e1cd0
|       |       `-CXXThisExpr 0x5636a57e35b8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x5636a57e3728 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x5636a57e3710 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5636a57e36f8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5636a57e36b8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5636a57e36a0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5636a57e3650 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5636a57e1d80
|         |     |   `-CXXThisExpr 0x5636a57e3640 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5636a57e3680 <col:43> 'int' 0
|         `-IntegerLiteral 0x5636a57e36d8 <col:49> 'int' 0
|-CXXMethodDecl 0x5636a57b4b88 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x5636a57e3988 <col:19, line:306:5>
|   |-IfStmt 0x5636a57e38a8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x5636a57e37e8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x5636a57e37d0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x5636a57e37a0 <col:13> 'Vector<String> *' lvalue ->_conf 0x5636a57d4f40
|   | |     `-CXXThisExpr 0x5636a57e3790 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x5636a57e3888 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x5636a57e3858 <col:13, col:20> '<bound member function type>' ->clear 0x5636a579e518
|   |     `-ImplicitCastExpr 0x5636a57e3840 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x5636a57e3810 <col:13> 'Vector<String> *' lvalue ->_conf 0x5636a57d4f40
|   |         `-CXXThisExpr 0x5636a57e3800 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x5636a57e3930 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x5636a57e3900 <col:9, col:16> '<bound member function type>' .clear 0x5636a57e1858
|   |   `-MemberExpr 0x5636a57e38d0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x5636a57e1c70
|   |     `-CXXThisExpr 0x5636a57e38c0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x5636a57e3978 <line:305:9, col:17>
|     `-UnaryOperator 0x5636a57e3960 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5636a57e3950 <col:17> 'Args *' this
|-CXXMethodDecl 0x5636a57b4e08 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x5636a57b4d10 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x5636a57b4f88 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x5636a57b4ec0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x5636a57b5308 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x5636a57b5030 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x5636a57b5268 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x5636a57b50d8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x5636a57b5150 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x5636a57e3ca8 <col:67, line:327:5>
|     |-WhileStmt 0x5636a57e3c58 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x5636a57e3a70 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x5636a57e39f0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5636a56ee058 0x5636a5537638 0x5636a5537310 0x5636a5527ae0 0x5636a5527790 0x5636a5527080 0x5636a54f99f0 0x5636a5486ec0
|     | | |-DeclRefExpr 0x5636a57e39b0 <col:16> 'Iter' lvalue ParmVar 0x5636a57b50d8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x5636a57e39d0 <col:25> 'Iter' lvalue ParmVar 0x5636a57b5150 'end' 'Iter'
|     | `-CompoundStmt 0x5636a57e3c38 <col:30, line:325:9>
|     |   |-CallExpr 0x5636a57e3bd8 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x5636a57e3ab8 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x5636a57e3ba8 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x5636a57e3b38 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5636a56f31d8 0x5636a56f2df8 0x5636a56f2a28 0x5636a56f2648 0x5636a56f2268 0x5636a56f1e98
|     |   |   `-DeclRefExpr 0x5636a57e3b18 <col:24> 'Iter' lvalue ParmVar 0x5636a57b50d8 'begin' 'Iter'
|     |   `-UnaryOperator 0x5636a57e3c20 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x5636a57e3c00 <col:15> 'Iter' lvalue ParmVar 0x5636a57b50d8 'begin' 'Iter'
|     `-ReturnStmt 0x5636a57e3c98 <line:326:9, col:17>
|       `-UnaryOperator 0x5636a57e3c80 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5636a57e3c70 <col:17> 'Args *' this
|-CXXMethodDecl 0x5636a57b5410 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x5636a57b5380 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x5636a57b5558 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x5636a57b54c8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x5636a57b5620 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x5636a57e3d88 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x5636a57e3d28 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x5636a57e3cd8 <col:9> '<bound member function type>' ->reset_from 0x5636a57e20f8
|   | | `-CXXThisExpr 0x5636a57e3cc8 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x5636a57e3d08 <col:20> 'int' 0
|   `-ReturnStmt 0x5636a57e3d78 <line:352:9, col:17>
|     `-UnaryOperator 0x5636a57e3d60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5636a57e3d50 <col:17> 'Args *' this
|-VarDecl 0x5636a57b56d8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x5636a57b5740 <col:38> 'int' 1
|-VarDecl 0x5636a57b57d0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x5636a57b5838 <col:39> 'int' 2
|-VarDecl 0x5636a57b58c8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x5636a57b5930 <col:39> 'int' 4
|-VarDecl 0x5636a57b59c0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x5636a57b5a28 <col:39> 'int' 8
|-FunctionTemplateDecl 0x5636a57b5da8 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x5636a57b5aa0 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x5636a57b5d08 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x5636a57b5b50 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5636a57b5bf8 <col:37, col:40> col:40 referenced x 'T &'
| | `-CompoundStmt 0x5636a57e3ee0 <col:43, line:371:5>
| |   `-ReturnStmt 0x5636a57e3ed0 <line:370:9, col:34>
| |     `-CallExpr 0x5636a57e3e98 <col:16, col:34> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5636a57e3db8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5636a57e3e38 <col:21> 'const char *' lvalue ParmVar 0x5636a57b5b50 'keyword' 'const char *'
| |       |-IntegerLiteral 0x5636a57e3e58 <col:30> 'int' 0
| |       `-DeclRefExpr 0x5636a57e3e78 <col:33> 'T' lvalue ParmVar 0x5636a57b5bf8 'x' 'T &'
| `-CXXMethodDecl 0x5636a58691d8 <line:369:5, line:371:5> line:369:11 used read 'Args &(const char *, unsigned short &)'
|   |-TemplateArgument type 'unsigned short'
|   |-ParmVarDecl 0x5636a5868ff8 <col:16, col:28> col:28 keyword 'const char *'
|   `-ParmVarDecl 0x5636a58690c8 <col:37, col:40> col:40 x 'unsigned short &'
|-FunctionTemplateDecl 0x5636a57b60d8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x5636a57b5e10 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5636a57b6038 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5636a57b5ec0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57b5f68 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5636a57e4030 <col:45, line:375:5>
|     `-ReturnStmt 0x5636a57e4020 <line:374:9, col:42>
|       `-CallExpr 0x5636a57e3fe8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636a57e3f08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636a57e3f88 <col:21> 'const char *' lvalue ParmVar 0x5636a57b5ec0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5636a57e3fa8 <col:30> 'const int' lvalue Var 0x5636a57b56d8 'mandatory' 'const int'
|         `-DeclRefExpr 0x5636a57e3fc8 <col:41> 'T' lvalue ParmVar 0x5636a57b5f68 'x' 'T &'
|-FunctionTemplateDecl 0x5636a57b6408 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x5636a57b6140 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5636a57b6368 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5636a57b61f0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57b6298 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5636a57e4180 <col:45, line:379:5>
|     `-ReturnStmt 0x5636a57e4170 <line:378:9, col:43>
|       `-CallExpr 0x5636a57e4138 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636a57e4058 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636a57e40d8 <col:21> 'const char *' lvalue ParmVar 0x5636a57b61f0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5636a57e40f8 <col:30> 'const int' lvalue Var 0x5636a57b57d0 'positional' 'const int'
|         `-DeclRefExpr 0x5636a57e4118 <col:42> 'T' lvalue ParmVar 0x5636a57b6298 'x' 'T &'
|-FunctionTemplateDecl 0x5636a57b6770 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x5636a57b6470 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x5636a57b66d0 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x5636a57b6520 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5636a57b65c8 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x5636a57e4380 <col:46, line:383:5>
| |   `-ReturnStmt 0x5636a57e4370 <line:382:9, col:55>
| |     `-CallExpr 0x5636a57e4338 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5636a57e41a8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5636a57e4228 <col:21> 'const char *' lvalue ParmVar 0x5636a57b6520 'keyword' 'const char *'
| |       |-BinaryOperator 0x5636a57e42f8 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x5636a57e42a8 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x5636a57e4288 <col:30> 'const int' lvalue Var 0x5636a57b56d8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x5636a57e42e0 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5636a57e42c0 <col:42> 'const int' lvalue Var 0x5636a57b57d0 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x5636a57e4318 <col:54> 'T' lvalue ParmVar 0x5636a57b65c8 'x' 'T &'
| `-CXXMethodDecl 0x5636a5867268 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, in_addr &)'
|   |-TemplateArgument type 'in_addr'
|   |-ParmVarDecl 0x5636a5867080 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x5636a5867158 <col:40, col:43> col:43 x 'in_addr &'
|-FunctionTemplateDecl 0x5636a57b6b78 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x5636a57b67d8 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5636a57b6ad8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x5636a57b6890 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57b6910 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5636a57b69b8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x5636a57e44c0 <col:54, line:388:5>
|     |-CallExpr 0x5636a57e4448 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5636a57e4398 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5636a57e43d8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5636a57e43e8 <col:30> 'const char *' lvalue ParmVar 0x5636a57b6890 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5636a57e4408 <col:39> 'int' lvalue ParmVar 0x5636a57b6910 'flags' 'int'
|     | `-DeclRefExpr 0x5636a57e4428 <col:46> 'T' lvalue ParmVar 0x5636a57b69b8 'x' 'T &'
|     `-ReturnStmt 0x5636a57e44b0 <line:387:9, col:17>
|       `-UnaryOperator 0x5636a57e4498 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5636a57e4488 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5636a57b7028 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x5636a57b6be8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5636a57b6c68 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5636a57b6f88 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5636a57b6d28 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57b6dc8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x5636a57b6e68 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x5636a57e4630 <col:74, line:403:5>
|     `-ReturnStmt 0x5636a57e4620 <line:402:9, col:56>
|       `-CallExpr 0x5636a57e45e0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636a57e44f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636a57e4560 <col:28> 'const char *' lvalue ParmVar 0x5636a57b6d28 'keyword' 'const char *'
|         |-IntegerLiteral 0x5636a57e4580 <col:37> 'int' 0
|         |-DeclRefExpr 0x5636a57e45a0 <col:40> 'T' lvalue ParmVar 0x5636a57b6dc8 'x' 'T &'
|         `-DeclRefExpr 0x5636a57e45c0 <col:43> 'const V' lvalue ParmVar 0x5636a57b6e68 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5636a57b7498 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5636a57b7098 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5636a57b7118 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5636a57b73f8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5636a57b71d8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57b7278 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x5636a57b7318 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x5636a57e4798 <col:76, line:407:5>
|     `-ReturnStmt 0x5636a57e4788 <line:406:9, col:65>
|       `-CallExpr 0x5636a57e4748 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636a57e4658 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636a57e46c8 <col:28> 'const char *' lvalue ParmVar 0x5636a57b71d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5636a57e46e8 <col:37> 'const int' lvalue Var 0x5636a57b57d0 'positional' 'const int'
|         |-DeclRefExpr 0x5636a57e4708 <col:49> 'T' lvalue ParmVar 0x5636a57b7278 'x' 'T &'
|         `-DeclRefExpr 0x5636a57e4728 <col:52> 'const V' lvalue ParmVar 0x5636a57b7318 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5636a57b79e8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x5636a57b7508 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5636a57b7588 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5636a57b7948 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5636a57b7648 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57b76c8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5636a57b7768 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x5636a57b7808 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x5636a57e4900 <col:85, line:412:5>
|     |-CallExpr 0x5636a57e4880 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5636a57e47b0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5636a57e47f0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5636a57e4800 <col:37> 'const char *' lvalue ParmVar 0x5636a57b7648 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5636a57e4820 <col:46> 'int' lvalue ParmVar 0x5636a57b76c8 'flags' 'int'
|     | |-DeclRefExpr 0x5636a57e4840 <col:53> 'T' lvalue ParmVar 0x5636a57b7768 'x' 'T &'
|     | `-DeclRefExpr 0x5636a57e4860 <col:56> 'const V' lvalue ParmVar 0x5636a57b7808 'default_value' 'const V &'
|     `-ReturnStmt 0x5636a57e48f0 <line:411:9, col:17>
|       `-UnaryOperator 0x5636a57e48d8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5636a57e48c8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5636a57b7e78 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x5636a57b7a60 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5636a57b7ad8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5636a57b7dd8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5636a57b7b98 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57b7c10 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5636a57b7cb8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x5636a57e4a80 <col:53, line:425:5>
|     `-ReturnStmt 0x5636a57e4a70 <line:424:9, col:42>
|       `-CallExpr 0x5636a57e4a30 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636a57e4930 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636a57e49b0 <col:21> 'const char *' lvalue ParmVar 0x5636a57b7b98 'keyword' 'const char *'
|         |-IntegerLiteral 0x5636a57e49d0 <col:30> 'int' 0
|         |-DeclRefExpr 0x5636a57e49f0 <col:33> 'P' lvalue ParmVar 0x5636a57b7c10 'parser' 'P'
|         `-DeclRefExpr 0x5636a57e4a10 <col:41> 'T' lvalue ParmVar 0x5636a57b7cb8 'x' 'T &'
|-FunctionTemplateDecl 0x5636a57b82c8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x5636a57b7ee8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5636a57b7f68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5636a57b8228 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5636a57b8028 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57b80a0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5636a57b8148 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5636a57e4bf8 <col:55, line:429:5>
|     `-ReturnStmt 0x5636a57e4be8 <line:428:9, col:50>
|       `-CallExpr 0x5636a57e4ba8 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636a57e4aa8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636a57e4b28 <col:21> 'const char *' lvalue ParmVar 0x5636a57b8028 'keyword' 'const char *'
|         |-DeclRefExpr 0x5636a57e4b48 <col:30> 'const int' lvalue Var 0x5636a57b56d8 'mandatory' 'const int'
|         |-DeclRefExpr 0x5636a57e4b68 <col:41> 'P' lvalue ParmVar 0x5636a57b80a0 'parser' 'P'
|         `-DeclRefExpr 0x5636a57e4b88 <col:49> 'T' lvalue ParmVar 0x5636a57b8148 'x' 'T &'
|-FunctionTemplateDecl 0x5636a57b8718 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x5636a57b8338 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5636a57b83b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x5636a57b8678 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x5636a57b8478 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5636a57b84f0 <col:39, col:41> col:41 referenced parser 'P'
| | |-ParmVarDecl 0x5636a57b8598 <col:49, col:52> col:52 referenced x 'T &'
| | `-CompoundStmt 0x5636a57e4d70 <col:55, line:433:5>
| |   `-ReturnStmt 0x5636a57e4d60 <line:432:9, col:51>
| |     `-CallExpr 0x5636a57e4d20 <col:16, col:51> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5636a57e4c20 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5636a57e4ca0 <col:21> 'const char *' lvalue ParmVar 0x5636a57b8478 'keyword' 'const char *'
| |       |-DeclRefExpr 0x5636a57e4cc0 <col:30> 'const int' lvalue Var 0x5636a57b57d0 'positional' 'const int'
| |       |-DeclRefExpr 0x5636a57e4ce0 <col:42> 'P' lvalue ParmVar 0x5636a57b84f0 'parser' 'P'
| |       `-DeclRefExpr 0x5636a57e4d00 <col:50> 'T' lvalue ParmVar 0x5636a57b8598 'x' 'T &'
| `-CXXMethodDecl 0x5636a5868c08 <line:431:5, line:433:5> line:431:11 used read_p 'Args &(const char *, WordArg, String &)'
|   |-TemplateArgument type 'WordArg'
|   |-TemplateArgument type 'String'
|   |-ParmVarDecl 0x5636a5868970 <col:18, col:30> col:30 keyword 'const char *'
|   |-ParmVarDecl 0x5636a5868a18 <col:39, col:41> col:41 parser 'WordArg':'WordArg'
|   `-ParmVarDecl 0x5636a5868ae8 <col:49, col:52> col:52 x 'String &'
|-FunctionTemplateDecl 0x5636a57b8b68 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x5636a57b8788 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5636a57b8808 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x5636a57b8ac8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x5636a57b88c8 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5636a57b8940 <col:40, col:42> col:42 referenced parser 'P'
| | |-ParmVarDecl 0x5636a57b89e8 <col:50, col:53> col:53 referenced x 'T &'
| | `-CompoundStmt 0x5636a57e4f98 <col:56, line:437:5>
| |   `-ReturnStmt 0x5636a57e4f88 <line:436:9, col:63>
| |     `-CallExpr 0x5636a57e4f48 <col:16, col:63> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5636a57e4d98 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5636a57e4e18 <col:21> 'const char *' lvalue ParmVar 0x5636a57b88c8 'keyword' 'const char *'
| |       |-BinaryOperator 0x5636a57e4ee8 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x5636a57e4e98 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x5636a57e4e78 <col:30> 'const int' lvalue Var 0x5636a57b56d8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x5636a57e4ed0 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5636a57e4eb0 <col:42> 'const int' lvalue Var 0x5636a57b57d0 'positional' 'const int' non_odr_use_constant
| |       |-DeclRefExpr 0x5636a57e4f08 <col:54> 'P' lvalue ParmVar 0x5636a57b8940 'parser' 'P'
| |       `-DeclRefExpr 0x5636a57e4f28 <col:62> 'T' lvalue ParmVar 0x5636a57b89e8 'x' 'T &'
| `-CXXMethodDecl 0x5636a5867f58 <line:435:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, NamedIntArg, int &)'
|   |-TemplateArgument type 'NamedIntArg'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x5636a5867cc0 <col:19, col:31> col:31 keyword 'const char *'
|   |-ParmVarDecl 0x5636a5867d68 <col:40, col:42> col:42 parser 'NamedIntArg':'NamedIntArg'
|   `-ParmVarDecl 0x5636a5867e38 <col:50, col:53> col:53 x 'int &'
|-FunctionTemplateDecl 0x5636a57b9098 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x5636a57b8bd8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5636a57b8c58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5636a57b8ff8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5636a57b8d18 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57b8d98 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5636a57b8e10 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5636a57b8eb8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x5636a57e5100 <col:64, line:442:5>
|     |-CallExpr 0x5636a57e5080 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5636a57e4fb0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5636a57e4ff0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5636a57e5000 <col:30> 'const char *' lvalue ParmVar 0x5636a57b8d18 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5636a57e5020 <col:39> 'int' lvalue ParmVar 0x5636a57b8d98 'flags' 'int'
|     | |-DeclRefExpr 0x5636a57e5040 <col:46> 'P' lvalue ParmVar 0x5636a57b8e10 'parser' 'P'
|     | `-DeclRefExpr 0x5636a57e5060 <col:54> 'T' lvalue ParmVar 0x5636a57b8eb8 'x' 'T &'
|     `-ReturnStmt 0x5636a57e50f0 <line:441:9, col:17>
|       `-UnaryOperator 0x5636a57e50d8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5636a57e50c8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5636a57b9698 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x5636a57b9110 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5636a57b9188 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5636a57b9208 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5636a57b95f8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5636a57b92d0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57b9348 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5636a57b93e8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x5636a57b94b8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x5636a57e5298 <col:84, line:458:5>
|     `-ReturnStmt 0x5636a57e5288 <line:457:9, col:64>
|       `-CallExpr 0x5636a57e5240 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636a57e5130 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636a57e51a0 <col:28> 'const char *' lvalue ParmVar 0x5636a57b92d0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5636a57e51c0 <col:37> 'int' 0
|         |-DeclRefExpr 0x5636a57e51e0 <col:40> 'P' lvalue ParmVar 0x5636a57b9348 'parser' 'P'
|         |-DeclRefExpr 0x5636a57e5200 <col:48> 'T' lvalue ParmVar 0x5636a57b93e8 'x' 'T &'
|         `-DeclRefExpr 0x5636a57e5220 <col:51> 'const V' lvalue ParmVar 0x5636a57b94b8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5636a57b9c18 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5636a57b9710 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5636a57b9788 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5636a57b9808 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5636a57b9b78 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5636a57b98d0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57b9948 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5636a57b99e8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x5636a57b9a88 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x5636a57e5428 <col:86, line:462:5>
|     `-ReturnStmt 0x5636a57e5418 <line:461:9, col:73>
|       `-CallExpr 0x5636a57e53d0 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636a57e52c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636a57e5330 <col:28> 'const char *' lvalue ParmVar 0x5636a57b98d0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5636a57e5350 <col:37> 'const int' lvalue Var 0x5636a57b57d0 'positional' 'const int'
|         |-DeclRefExpr 0x5636a57e5370 <col:49> 'P' lvalue ParmVar 0x5636a57b9948 'parser' 'P'
|         |-DeclRefExpr 0x5636a57e5390 <col:57> 'T' lvalue ParmVar 0x5636a57b99e8 'x' 'T &'
|         `-DeclRefExpr 0x5636a57e53b0 <col:60> 'const V' lvalue ParmVar 0x5636a57b9a88 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5636a57ba278 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x5636a57b9c90 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5636a57b9d08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5636a57b9d88 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5636a57ba1d8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5636a57b9e50 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57b9ed0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5636a57b9f48 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x5636a57b9fe8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x5636a57ba088 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x5636a57e55b8 <col:95, line:467:5>
|     |-CallExpr 0x5636a57e5530 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5636a57e5440 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5636a57e5480 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5636a57e5490 <col:37> 'const char *' lvalue ParmVar 0x5636a57b9e50 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5636a57e54b0 <col:46> 'int' lvalue ParmVar 0x5636a57b9ed0 'flags' 'int'
|     | |-DeclRefExpr 0x5636a57e54d0 <col:53> 'P' lvalue ParmVar 0x5636a57b9f48 'parser' 'P'
|     | |-DeclRefExpr 0x5636a57e54f0 <col:61> 'T' lvalue ParmVar 0x5636a57b9fe8 'x' 'T &'
|     | `-DeclRefExpr 0x5636a57e5510 <col:64> 'const V' lvalue ParmVar 0x5636a57ba088 'default_value' 'const V &'
|     `-ReturnStmt 0x5636a57e55a8 <line:466:9, col:17>
|       `-UnaryOperator 0x5636a57e5590 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5636a57e5580 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5636a57ba858 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x5636a57ba2f8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5636a57ba378 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5636a57ba3f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5636a57ba7b8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5636a57ba4c0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57ba538 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5636a57ba5d8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5636a57ba678 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x5636a57e5760 <col:63, line:481:5>
|     `-ReturnStmt 0x5636a57e5750 <line:480:9, col:47>
|       `-CallExpr 0x5636a57e5708 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636a57e55e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636a57e5668 <col:21> 'const char *' lvalue ParmVar 0x5636a57ba4c0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5636a57e5688 <col:30> 'int' 0
|         |-DeclRefExpr 0x5636a57e56a8 <col:33> 'P' lvalue ParmVar 0x5636a57ba538 'parser' 'P'
|         |-DeclRefExpr 0x5636a57e56c8 <col:41> 'T1' lvalue ParmVar 0x5636a57ba5d8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5636a57e56e8 <col:45> 'T2' lvalue ParmVar 0x5636a57ba678 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5636a57badd8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x5636a57ba8d0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5636a57ba948 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5636a57ba9c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5636a57bad38 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5636a57baa90 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57bab08 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5636a57baba8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5636a57bac48 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5636a57e5900 <col:65, line:485:5>
|     `-ReturnStmt 0x5636a57e58f0 <line:484:9, col:55>
|       `-CallExpr 0x5636a57e58a8 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636a57e5788 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636a57e5808 <col:21> 'const char *' lvalue ParmVar 0x5636a57baa90 'keyword' 'const char *'
|         |-DeclRefExpr 0x5636a57e5828 <col:30> 'const int' lvalue Var 0x5636a57b56d8 'mandatory' 'const int'
|         |-DeclRefExpr 0x5636a57e5848 <col:41> 'P' lvalue ParmVar 0x5636a57bab08 'parser' 'P'
|         |-DeclRefExpr 0x5636a57e5868 <col:49> 'T1' lvalue ParmVar 0x5636a57baba8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5636a57e5888 <col:53> 'T2' lvalue ParmVar 0x5636a57bac48 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5636a57bb358 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x5636a57bae50 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5636a57baec8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5636a57baf48 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5636a57bb2b8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5636a57bb010 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57bb088 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5636a57bb128 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5636a57bb1c8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5636a57e5aa0 <col:65, line:489:5>
|     `-ReturnStmt 0x5636a57e5a90 <line:488:9, col:56>
|       `-CallExpr 0x5636a57e5a48 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636a57e5928 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636a57e59a8 <col:21> 'const char *' lvalue ParmVar 0x5636a57bb010 'keyword' 'const char *'
|         |-DeclRefExpr 0x5636a57e59c8 <col:30> 'const int' lvalue Var 0x5636a57b57d0 'positional' 'const int'
|         |-DeclRefExpr 0x5636a57e59e8 <col:42> 'P' lvalue ParmVar 0x5636a57bb088 'parser' 'P'
|         |-DeclRefExpr 0x5636a57e5a08 <col:50> 'T1' lvalue ParmVar 0x5636a57bb128 'x1' 'T1 &'
|         `-DeclRefExpr 0x5636a57e5a28 <col:54> 'T2' lvalue ParmVar 0x5636a57bb1c8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5636a57bb8d8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x5636a57bb3d0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5636a57bb448 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5636a57bb4c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5636a57bb838 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5636a57bb590 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57bb608 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5636a57bb6a8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5636a57bb748 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x5636a57e5cf0 <col:66, line:493:5>
|     `-ReturnStmt 0x5636a57e5ce0 <line:492:9, col:68>
|       `-CallExpr 0x5636a57e5c98 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636a57e5ac8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636a57e5b48 <col:21> 'const char *' lvalue ParmVar 0x5636a57bb590 'keyword' 'const char *'
|         |-BinaryOperator 0x5636a57e5c18 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5636a57e5bc8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5636a57e5ba8 <col:30> 'const int' lvalue Var 0x5636a57b56d8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5636a57e5c00 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5636a57e5be0 <col:42> 'const int' lvalue Var 0x5636a57b57d0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5636a57e5c38 <col:54> 'P' lvalue ParmVar 0x5636a57bb608 'parser' 'P'
|         |-DeclRefExpr 0x5636a57e5c58 <col:62> 'T1' lvalue ParmVar 0x5636a57bb6a8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5636a57e5c78 <col:66> 'T2' lvalue ParmVar 0x5636a57bb748 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5636a57bbf38 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x5636a57bb950 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5636a57bb9c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5636a57bba48 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5636a57bbe98 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5636a57bbb10 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57bbb90 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5636a57bbc08 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5636a57bbca8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5636a57bbd48 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x5636a57e5e80 <col:74, line:498:5>
|     |-CallExpr 0x5636a57e5df8 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5636a57e5d08 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5636a57e5d48 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5636a57e5d58 <col:30> 'const char *' lvalue ParmVar 0x5636a57bbb10 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5636a57e5d78 <col:39> 'int' lvalue ParmVar 0x5636a57bbb90 'flags' 'int'
|     | |-DeclRefExpr 0x5636a57e5d98 <col:46> 'P' lvalue ParmVar 0x5636a57bbc08 'parser' 'P'
|     | |-DeclRefExpr 0x5636a57e5db8 <col:54> 'T1' lvalue ParmVar 0x5636a57bbca8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x5636a57e5dd8 <col:58> 'T2' lvalue ParmVar 0x5636a57bbd48 'x2' 'T2 &'
|     `-ReturnStmt 0x5636a57e5e70 <line:497:9, col:17>
|       `-UnaryOperator 0x5636a57e5e58 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5636a57e5e48 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5636a57bc298 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x5636a57bbfb8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5636a57bc1f8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5636a57bc070 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57bc0e8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x5636a57e5fc8 <col:52, line:509:5>
|     `-ReturnStmt 0x5636a57e5fb8 <line:508:9, col:44>
|       `-CallExpr 0x5636a57e5f80 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636a57e5eb0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636a57e5f20 <col:26> 'const char *' lvalue ParmVar 0x5636a57bc070 'keyword' 'const char *'
|         |-IntegerLiteral 0x5636a57e5f40 <col:35> 'int' 0
|         `-DeclRefExpr 0x5636a57e5f60 <col:38> 'P' lvalue ParmVar 0x5636a57bc0e8 'parser' 'P'
|-FunctionTemplateDecl 0x5636a57bc598 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x5636a57bc300 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5636a57bc4f8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5636a57bc3b0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57bc428 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5636a57e6108 <col:54, line:513:5>
|     `-ReturnStmt 0x5636a57e60f8 <line:512:9, col:52>
|       `-CallExpr 0x5636a57e60c0 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636a57e5ff0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636a57e6060 <col:26> 'const char *' lvalue ParmVar 0x5636a57bc3b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5636a57e6080 <col:35> 'const int' lvalue Var 0x5636a57b56d8 'mandatory' 'const int'
|         `-DeclRefExpr 0x5636a57e60a0 <col:46> 'P' lvalue ParmVar 0x5636a57bc428 'parser' 'P'
|-FunctionTemplateDecl 0x5636a57bc898 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x5636a57bc600 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5636a57bc7f8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5636a57bc6b0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57bc728 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5636a57e6248 <col:54, line:517:5>
|     `-ReturnStmt 0x5636a57e6238 <line:516:9, col:53>
|       `-CallExpr 0x5636a57e6200 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636a57e6130 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636a57e61a0 <col:26> 'const char *' lvalue ParmVar 0x5636a57bc6b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5636a57e61c0 <col:35> 'const int' lvalue Var 0x5636a57b57d0 'positional' 'const int'
|         `-DeclRefExpr 0x5636a57e61e0 <col:47> 'P' lvalue ParmVar 0x5636a57bc728 'parser' 'P'
|-FunctionTemplateDecl 0x5636a57bcb98 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x5636a57bc900 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5636a57bcaf8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5636a57bc9b0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57bca28 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x5636a57e6438 <col:55, line:521:5>
|     `-ReturnStmt 0x5636a57e6428 <line:520:9, col:65>
|       `-CallExpr 0x5636a57e63f0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636a57e6270 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636a57e62e0 <col:26> 'const char *' lvalue ParmVar 0x5636a57bc9b0 'keyword' 'const char *'
|         |-BinaryOperator 0x5636a57e63b0 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x5636a57e6360 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5636a57e6340 <col:35> 'const int' lvalue Var 0x5636a57b56d8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5636a57e6398 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5636a57e6378 <col:47> 'const int' lvalue Var 0x5636a57b57d0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5636a57e63d0 <col:59> 'P' lvalue ParmVar 0x5636a57bca28 'parser' 'P'
|-FunctionTemplateDecl 0x5636a57bcf68 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x5636a57bcc00 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5636a57bcec8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5636a57bccb0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57bcd30 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5636a57bcda8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x5636a57e6578 <col:63, line:526:5>
|     |-CallExpr 0x5636a57e6500 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5636a57e6450 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x5636a57e6490 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x5636a57e64a0 <col:35> 'const char *' lvalue ParmVar 0x5636a57bccb0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5636a57e64c0 <col:44> 'int' lvalue ParmVar 0x5636a57bcd30 'flags' 'int'
|     | `-DeclRefExpr 0x5636a57e64e0 <col:51> 'P' lvalue ParmVar 0x5636a57bcda8 'parser' 'P'
|     `-ReturnStmt 0x5636a57e6568 <line:525:9, col:17>
|       `-UnaryOperator 0x5636a57e6550 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5636a57e6540 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5636a57bd3b8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x5636a57bcfd8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5636a57bd058 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5636a57bd318 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5636a57bd118 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57bd190 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x5636a57bd238 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x5636a57e66d0 <col:58, line:541:5>
|     `-ReturnStmt 0x5636a57e66c0 <line:540:9, col:39>
|       `-CallExpr 0x5636a57e6688 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636a57e65a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636a57e6628 <col:21> 'const char *' lvalue ParmVar 0x5636a57bd118 'keyword' 'const char *'
|         |-DeclRefExpr 0x5636a57e6648 <col:30> 'P' lvalue ParmVar 0x5636a57bd190 'parser' 'P'
|         `-DeclRefExpr 0x5636a57e6668 <col:38> 'T' lvalue ParmVar 0x5636a57bd238 'x' 'T &'
|-FunctionTemplateDecl 0x5636a57bd808 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x5636a57bd428 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5636a57bd4a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5636a57bd768 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5636a57bd568 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57bd5e0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5636a57bd688 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5636a57e6808 <col:60, line:545:5>
|     `-ReturnStmt 0x5636a57e67f8 <line:544:9, col:41>
|       `-CallExpr 0x5636a57e67c0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636a57e66f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636a57e6760 <col:23> 'const char *' lvalue ParmVar 0x5636a57bd568 'keyword' 'const char *'
|         |-DeclRefExpr 0x5636a57e6780 <col:32> 'P' lvalue ParmVar 0x5636a57bd5e0 'parser' 'P'
|         `-DeclRefExpr 0x5636a57e67a0 <col:40> 'T' lvalue ParmVar 0x5636a57bd688 'x' 'T &'
|-FunctionTemplateDecl 0x5636a57bdc58 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x5636a57bd878 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5636a57bd8f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5636a57bdbb8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5636a57bd9b8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57bda30 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5636a57bdad8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5636a57e6940 <col:60, line:549:5>
|     `-ReturnStmt 0x5636a57e6930 <line:548:9, col:41>
|       `-CallExpr 0x5636a57e68f8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636a57e6830 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636a57e6898 <col:23> 'const char *' lvalue ParmVar 0x5636a57bd9b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5636a57e68b8 <col:32> 'P' lvalue ParmVar 0x5636a57bda30 'parser' 'P'
|         `-DeclRefExpr 0x5636a57e68d8 <col:40> 'T' lvalue ParmVar 0x5636a57bdad8 'x' 'T &'
|-FunctionTemplateDecl 0x5636a57be0a8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x5636a57bdcc8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5636a57bdd48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5636a57be008 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5636a57bde08 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57bde80 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x5636a57bdf28 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x5636a57e8778 <col:61, line:553:5>
|     `-ReturnStmt 0x5636a57e8768 <line:552:9, col:42>
|       `-CallExpr 0x5636a57e8730 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636a57e6968 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636a57e69d0 <col:24> 'const char *' lvalue ParmVar 0x5636a57bde08 'keyword' 'const char *'
|         |-DeclRefExpr 0x5636a57e86f0 <col:33> 'P' lvalue ParmVar 0x5636a57bde80 'parser' 'P'
|         `-DeclRefExpr 0x5636a57e8710 <col:41> 'T' lvalue ParmVar 0x5636a57bdf28 'x' 'T &'
|-FunctionTemplateDecl 0x5636a57be588 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x5636a57be118 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5636a57be198 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5636a57be4e8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5636a57be258 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57be2d8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5636a57be350 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x5636a57be3f8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x5636a57e88f0 <col:69, line:557:5>
|     `-ReturnStmt 0x5636a57e88e0 <line:556:9, col:46>
|       `-CallExpr 0x5636a57e88a0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636a57e87a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636a57e8820 <col:21> 'const char *' lvalue ParmVar 0x5636a57be258 'keyword' 'const char *'
|         |-DeclRefExpr 0x5636a57e8840 <col:30> 'int' lvalue ParmVar 0x5636a57be2d8 'flags' 'int'
|         |-DeclRefExpr 0x5636a57e8860 <col:37> 'P' lvalue ParmVar 0x5636a57be350 'parser' 'P'
|         `-DeclRefExpr 0x5636a57e8880 <col:45> 'T' lvalue ParmVar 0x5636a57be3f8 'x' 'T &'
|-FunctionTemplateDecl 0x5636a57c1228 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x5636a57be600 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5636a57c1188 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5636a57c1038 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57c10b0 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x5636a57e8a30 <col:56, line:571:5>
|     `-ReturnStmt 0x5636a57e8a20 <line:570:9, col:48>
|       `-CallExpr 0x5636a57e89e8 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636a57e8918 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636a57e8988 <col:30> 'const char *' lvalue ParmVar 0x5636a57c1038 'keyword' 'const char *'
|         |-IntegerLiteral 0x5636a57e89a8 <col:39> 'int' 0
|         `-DeclRefExpr 0x5636a57e89c8 <col:42> 'P' lvalue ParmVar 0x5636a57c10b0 'parser' 'P'
|-FunctionTemplateDecl 0x5636a57c15b8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x5636a57c1290 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5636a57c1518 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5636a57c1340 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57c13c0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5636a57c1438 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5636a57e8c00 <col:67, line:576:5>
|     |-CallExpr 0x5636a57e8b88 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5636a57e8a48 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5636a57e8a88 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5636a57e8a98 <col:39> 'const char *' lvalue ParmVar 0x5636a57c1340 'keyword' 'const char *'
|     | |-BinaryOperator 0x5636a57e8b48 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5636a57e8af8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5636a57e8ab8 <col:48> 'int' lvalue ParmVar 0x5636a57c13c0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5636a57e8b30 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5636a57e8b10 <col:56> 'const int' lvalue Var 0x5636a57b59c0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x5636a57e8b68 <col:68> 'P' lvalue ParmVar 0x5636a57c1438 'parser' 'P'
|     `-ReturnStmt 0x5636a57e8bf0 <line:575:9, col:17>
|       `-UnaryOperator 0x5636a57e8bd8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5636a57e8bc8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5636a57c1a08 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x5636a57c1628 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5636a57c16a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5636a57c1968 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5636a57c1768 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57c17e0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5636a57c1888 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x5636a57e8d70 <col:62, line:592:5>
|     `-ReturnStmt 0x5636a57e8d60 <line:591:9, col:51>
|       `-CallExpr 0x5636a57e8d20 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636a57e8c30 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636a57e8ca0 <col:30> 'const char *' lvalue ParmVar 0x5636a57c1768 'keyword' 'const char *'
|         |-IntegerLiteral 0x5636a57e8cc0 <col:39> 'int' 0
|         |-DeclRefExpr 0x5636a57e8ce0 <col:42> 'P' lvalue ParmVar 0x5636a57c17e0 'parser' 'P'
|         `-DeclRefExpr 0x5636a57e8d00 <col:50> 'T' lvalue ParmVar 0x5636a57c1888 'x' 'T &'
|-FunctionTemplateDecl 0x5636a57c1ee8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x5636a57c1a78 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5636a57c1af8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5636a57c1e48 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5636a57c1bb8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57c1c38 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5636a57c1cb0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x5636a57c1d58 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x5636a57e8f68 <col:73, line:597:5>
|     |-CallExpr 0x5636a57e8ee8 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5636a57e8d88 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5636a57e8dc8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5636a57e8dd8 <col:39> 'const char *' lvalue ParmVar 0x5636a57c1bb8 'keyword' 'const char *'
|     | |-BinaryOperator 0x5636a57e8e88 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5636a57e8e38 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5636a57e8df8 <col:48> 'int' lvalue ParmVar 0x5636a57c1c38 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5636a57e8e70 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5636a57e8e50 <col:56> 'const int' lvalue Var 0x5636a57b59c0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5636a57e8ea8 <col:68> 'P' lvalue ParmVar 0x5636a57c1cb0 'parser' 'P'
|     | `-DeclRefExpr 0x5636a57e8ec8 <col:76> 'T' lvalue ParmVar 0x5636a57c1d58 'x' 'T &'
|     `-ReturnStmt 0x5636a57e8f58 <line:596:9, col:17>
|       `-UnaryOperator 0x5636a57e8f40 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5636a57e8f30 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5636a57c2498 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x5636a57c1f60 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5636a57c1fd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5636a57c23f8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x5636a57c2098 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57c2110 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x5636a57c22d0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5636a57e90d8 <col:65, line:614:5>
|     `-ReturnStmt 0x5636a57e90c8 <line:613:9, col:46>
|       `-CallExpr 0x5636a57e9088 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636a57e8f98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636a57e9008 <col:25> 'const char *' lvalue ParmVar 0x5636a57c2098 'keyword' 'const char *'
|         |-IntegerLiteral 0x5636a57e9028 <col:34> 'int' 0
|         |-DeclRefExpr 0x5636a57e9048 <col:37> 'P' lvalue ParmVar 0x5636a57c2110 'parser' 'P'
|         `-DeclRefExpr 0x5636a57e9068 <col:45> 'Vector<T>' lvalue ParmVar 0x5636a57c22d0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5636a57c28c8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x5636a57c2508 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5636a57c2828 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x5636a57c25c0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57c2710 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5636a57e92f0 <col:55, line:618:5>
|     `-ReturnStmt 0x5636a57e92e0 <line:617:9, col:55>
|       `-CallExpr 0x5636a57e92a0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636a57e9100 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636a57e9170 <col:25> 'const char *' lvalue ParmVar 0x5636a57c25c0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5636a57e9190 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x5636a57e9260 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5636a57e9280 <col:54> 'Vector<T>' lvalue ParmVar 0x5636a57c2710 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5636a57c2e98 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x5636a57c2930 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5636a57c29a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5636a57c2df8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5636a57c2a68 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57c2ae8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5636a57c2b60 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5636a57c2cb0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5636a57e94e8 <col:76, line:623:5>
|     |-CallExpr 0x5636a57e9468 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5636a57e9308 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x5636a57e9348 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x5636a57e9358 <col:34> 'const char *' lvalue ParmVar 0x5636a57c2a68 'keyword' 'const char *'
|     | |-BinaryOperator 0x5636a57e9408 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x5636a57e93b8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5636a57e9378 <col:43> 'int' lvalue ParmVar 0x5636a57c2ae8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5636a57e93f0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5636a57e93d0 <col:51> 'const int' lvalue Var 0x5636a57b59c0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5636a57e9428 <col:63> 'P' lvalue ParmVar 0x5636a57c2b60 'parser' 'P'
|     | `-DeclRefExpr 0x5636a57e9448 <col:71> 'Vector<T>' lvalue ParmVar 0x5636a57c2cb0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x5636a57e94d8 <line:622:9, col:17>
|       `-UnaryOperator 0x5636a57e94c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5636a57e94b0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5636a57c33d8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x5636a57c2f10 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5636a57c2f88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5636a57c3338 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x5636a57c3048 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57c30c8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5636a57c3210 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5636a57e9750 <col:66, line:627:5>
|     `-ReturnStmt 0x5636a57e9740 <line:626:9, col:59>
|       `-CallExpr 0x5636a57e9700 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636a57e9518 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636a57e9588 <col:25> 'const char *' lvalue ParmVar 0x5636a57c3048 'keyword' 'const char *'
|         |-DeclRefExpr 0x5636a57e95a8 <col:34> 'int' lvalue ParmVar 0x5636a57c30c8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x5636a57e96c0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5636a57e96e0 <col:58> 'Vector<T>' lvalue ParmVar 0x5636a57c3210 'x' 'Vector<T> &'
|-CXXMethodDecl 0x5636a57c3468 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x5636a57e97d0 <col:25, line:633:5>
|   `-ReturnStmt 0x5636a57e97c0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x5636a57e97a8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5636a57e9778 <col:16> 'const bool' lvalue ->_status 0x5636a57d4da8
|         `-CXXThisExpr 0x5636a57e9768 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5636a57c35e8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x5636a57c3520 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x5636a57e98b8 <col:27, line:639:5>
|   |-BinaryOperator 0x5636a57e9860 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5636a57e97e8 <col:9> 'bool' lvalue ParmVar 0x5636a57c3520 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5636a57e9848 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5636a57e9818 <col:13> 'bool' lvalue ->_status 0x5636a57d4da8
|   |     `-CXXThisExpr 0x5636a57e9808 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5636a57e98a8 <line:638:9, col:17>
|     `-UnaryOperator 0x5636a57e9890 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5636a57e9880 <col:17> 'Args *' this
|-CXXMethodDecl 0x5636a57c3768 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5636a57c36a8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x5636a57e99a8 <col:39, line:644:5>
|   |-BinaryOperator 0x5636a57e9950 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5636a57e98d8 <col:9> 'bool' lvalue ParmVar 0x5636a57c36a8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5636a57e9938 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5636a57e9908 <col:13> 'const bool' lvalue ->_status 0x5636a57d4da8
|   |     `-CXXThisExpr 0x5636a57e98f8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5636a57e9998 <line:643:9, col:17>
|     `-UnaryOperator 0x5636a57e9980 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5636a57e9970 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5636a57c3830 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x5636a57e9a50 <col:30, line:651:5>
|   `-ReturnStmt 0x5636a57e9a40 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x5636a57e9a28 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5636a57e99f8 <col:16> 'bool' lvalue ->_read_status 0x5636a57ae190
|         `-ImplicitCastExpr 0x5636a57e99d8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x5636a57e99c8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5636a57c3978 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x5636a57c38e8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x5636a57e9b58 <col:32, line:658:5>
|   |-BinaryOperator 0x5636a57e9b00 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5636a57e9a68 <col:9> 'bool' lvalue ParmVar 0x5636a57c38e8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5636a57e9ae8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5636a57e9ab8 <col:13> 'bool' lvalue ->_read_status 0x5636a57ae190
|   |     `-ImplicitCastExpr 0x5636a57e9a98 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5636a57e9a88 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5636a57e9b48 <line:657:9, col:17>
|     `-UnaryOperator 0x5636a57e9b30 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5636a57e9b20 <col:17> 'Args *' this
|-CXXMethodDecl 0x5636a57c3ac8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5636a57c3a38 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x5636a57e9c68 <col:44, line:663:5>
|   |-BinaryOperator 0x5636a57e9c10 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5636a57e9b78 <col:9> 'bool' lvalue ParmVar 0x5636a57c3a38 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5636a57e9bf8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5636a57e9bc8 <col:13> 'bool' lvalue ->_read_status 0x5636a57ae190
|   |     `-ImplicitCastExpr 0x5636a57e9ba8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5636a57e9b98 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5636a57e9c58 <line:662:9, col:17>
|     `-UnaryOperator 0x5636a57e9c40 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5636a57e9c30 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5636a57c3b90 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x5636a57c3c58 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x5636a57c3d20 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x5636a57c3de8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x5636a57c40f8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x5636a57c3e88 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5636a57c4058 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x5636a57c3f68 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x5636a57ea020 <col:19, line:706:5>
|     `-IfStmt 0x5636a57e9ff8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x5636a57e9d68 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x5636a57e9f28 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x5636a57e9ef8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x5636a57e9eb8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x5636a57e9dc0 <col:42> '<bound member function type>' ->simple_slot 0x5636a57e2db0
|       |     | `-CXXThisExpr 0x5636a57e9db0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x5636a57e9e58 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x5636a57e9e10 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x5636a553c0d8
|       |     | `-DeclRefExpr 0x5636a57e9df0 <col:55> 'T' lvalue ParmVar 0x5636a57c3f68 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x5636a57e9e98 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x5636a57e9fe8 <line:705:13, col:34>
|         `-CallExpr 0x5636a57e9fc0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x5636a57e9f48 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x5636a57e9fa0 <col:33> 'T' lvalue ParmVar 0x5636a57c3f68 'x' 'T &'
|-FunctionTemplateDecl 0x5636a57c43c8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x5636a57c4158 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5636a57c4328 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x5636a57c4238 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x5636a57ea400 <col:31, line:717:5>
|     |-DeclStmt 0x5636a57ea160 <line:713:9, col:23>
|     | `-VarDecl 0x5636a57ea048 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x5636a57ea138 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5636a57ea0c0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5636a57ea118 <col:21> 'T' lvalue ParmVar 0x5636a57c4238 'x' 'T &'
|     |-IfStmt 0x5636a57ea3b0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x5636a57ea258 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x5636a57ea390 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5636a57ea330 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5636a57ea2c0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5636a56f31d8 0x5636a56f2df8 0x5636a56f2a28 0x5636a56f2648 0x5636a56f2268 0x5636a56f1e98
|     |   | `-DeclRefExpr 0x5636a57ea2a0 <col:14> 'T *' lvalue Var 0x5636a57ea048 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x5636a57ea370 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x5636a57ea3e8 <line:716:9, col:16>
|       `-DeclRefExpr 0x5636a57ea3c8 <col:16> 'T *' lvalue Var 0x5636a57ea048 's' 'T *'
|-FunctionTemplateDecl 0x5636a57c47d8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x5636a57c4428 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5636a57c44a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5636a57c4738 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x5636a57c4588 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x5636a57c4628 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x5636a57ea710 <col:37, line:726:5>
|     |-IfStmt 0x5636a57ea6a0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x5636a57ea6c0 <line:723:13, col:26>
|     | | `-VarDecl 0x5636a57ea468 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x5636a57ea558 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x5636a57ea4e0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x5636a57ea538 <col:25> 'T' lvalue ParmVar 0x5636a57c4588 'x' 'T &'
|     | |-DeclRefExpr 0x5636a57ea580 <col:16> 'T *' lvalue Var 0x5636a57ea468 's' 'T *'
|     | `-BinaryOperator 0x5636a57ea680 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5636a57ea630 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5636a57ea5c0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5636a56f31d8 0x5636a56f2df8 0x5636a56f2a28 0x5636a56f2648 0x5636a56f2268 0x5636a56f1e98
|     |   | `-DeclRefExpr 0x5636a57ea5a0 <col:14> 'T *' lvalue Var 0x5636a57ea468 's' 'T *'
|     |   `-DeclRefExpr 0x5636a57ea660 <col:18> 'const V' lvalue ParmVar 0x5636a57c4628 'value' 'const V &'
|     `-ReturnStmt 0x5636a57ea700 <line:725:9, col:17>
|       `-UnaryOperator 0x5636a57ea6e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5636a57ea6d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5636a57c4bd8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x5636a57c4840 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5636a57c4b38 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x5636a57c48f0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57c4970 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5636a57c4a18 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x5636a57eb530 <col:65, line:737:5>
|     |-DeclStmt 0x5636a57ea7a8 <line:732:9, col:26>
|     | `-VarDecl 0x5636a57ea740 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5636a57eb4f8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x5636a57eb518 <line:733:13, col:58>
|       | `-VarDecl 0x5636a57ea7d0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5636a57ea9b0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5636a57ea980 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5636a57ea968 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5636a57ea948 <col:26, col:58> 'String' (CXXTemporary 0x5636a57ea948)
|       |           `-CXXMemberCallExpr 0x5636a57ea8d8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5636a57ea848 <col:26> '<bound member function type>' ->find 0x5636a57e23c8
|       |             | `-CXXThisExpr 0x5636a57ea838 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5636a57ea910 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5636a57ea878 <col:31> 'const char *' lvalue ParmVar 0x5636a57c48f0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5636a57ea928 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5636a57ea898 <col:40> 'int' lvalue ParmVar 0x5636a57c4970 'flags' 'int'
|       |             `-DeclRefExpr 0x5636a57ea8b8 <col:47> 'Args::Slot *' lvalue Var 0x5636a57ea740 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5636a57eaa68 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5636a57eaa50 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5636a57eaa30 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5636a57eaa00 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5636a54fe098
|       |       `-ImplicitCastExpr 0x5636a57ea9e8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5636a57ea9c8 <col:20> 'String' lvalue Var 0x5636a57ea7d0 'str' 'String'
|       `-CompoundStmt 0x5636a57eb4d8 <col:61, line:736:9>
|         |-DeclStmt 0x5636a57eaf20 <line:734:13, col:76>
|         | `-VarDecl 0x5636a57eaab8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5636a57eaef0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5636a57eae60 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5636a57eaea8 <col:60> 'T' lvalue ParmVar 0x5636a57c4a18 'variable' 'T &'
|         |     `-UnaryOperator 0x5636a57eaed8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5636a57eaec8 <col:71> 'Args *' this
|         `-CallExpr 0x5636a57eb4a8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x5636a57eaf48 <col:13> '<bound member function type>' ->postparse 0x5636a57e25d8
|           | `-CXXThisExpr 0x5636a57eaf38 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5636a57eb468 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5636a57eaf78 <col:23> 'T *' lvalue Var 0x5636a57eaab8 's' 'T *'
|           | `-CallExpr 0x5636a57eb428 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5636a57eb200 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x5636a57eb300 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x5636a57eb320 <col:86> 'String' lvalue Var 0x5636a57ea7d0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5636a57eb3d0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5636a57eb360 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5636a56f31d8 0x5636a56f2df8 0x5636a56f2a28 0x5636a56f2648 0x5636a56f2268 0x5636a56f1e98
|           |   | `-DeclRefExpr 0x5636a57eb340 <col:92> 'T *' lvalue Var 0x5636a57eaab8 's' 'T *'
|           |   `-UnaryOperator 0x5636a57eb410 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5636a57eb400 <col:96> 'Args *' this
|           `-DeclRefExpr 0x5636a57eb488 <col:103> 'Args::Slot *' lvalue Var 0x5636a57ea740 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5636a57c5128 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5636a57c4c48 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5636a57c4cc8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5636a57c5088 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5636a57c4d88 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57c4e08 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5636a57c4ea8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x5636a57c4f48 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x5636a57ec3d0 <col:88, line:745:5>
|     |-DeclStmt 0x5636a57eb5c8 <line:741:9, col:26>
|     | `-VarDecl 0x5636a57eb560 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5636a57eb7e8 <line:742:9, col:55>
|     | `-VarDecl 0x5636a57eb5f0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5636a57eb7d0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5636a57eb7a0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5636a57eb788 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5636a57eb768 <col:22, col:54> 'String' (CXXTemporary 0x5636a57eb768)
|     |           `-CXXMemberCallExpr 0x5636a57eb6f8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5636a57eb668 <col:22> '<bound member function type>' ->find 0x5636a57e23c8
|     |             | `-CXXThisExpr 0x5636a57eb658 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5636a57eb730 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5636a57eb698 <col:27> 'const char *' lvalue ParmVar 0x5636a57c4d88 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5636a57eb748 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5636a57eb6b8 <col:36> 'int' lvalue ParmVar 0x5636a57c4e08 'flags' 'int'
|     |             `-DeclRefExpr 0x5636a57eb6d8 <col:43> 'Args::Slot *' lvalue Var 0x5636a57eb560 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5636a57ebbc0 <line:743:9, col:72>
|     | `-VarDecl 0x5636a57eb838 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5636a57ebb90 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5636a57ebb00 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5636a57ebb48 <col:56> 'T' lvalue ParmVar 0x5636a57c4ea8 'variable' 'T &'
|     |     `-UnaryOperator 0x5636a57ebb78 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5636a57ebb68 <col:67> 'Args *' this
|     `-CallExpr 0x5636a57ec3a0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x5636a57ebbe8 <col:9> '<bound member function type>' ->postparse 0x5636a57e25d8
|       | `-CXXThisExpr 0x5636a57ebbd8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5636a57ec360 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5636a57ebc18 <col:19> 'T *' lvalue Var 0x5636a57eb838 's' 'T *'
|       | `-ParenExpr 0x5636a57ec340 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x5636a57ec310 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5636a57ec2f8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5636a57ec2e0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5636a57ec2c0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5636a57ec290 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5636a54fe098
|       |     |       `-ImplicitCastExpr 0x5636a57ec278 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5636a57ebc38 <col:25> 'String' lvalue Var 0x5636a57eb5f0 'str' 'String'
|       |     |-CallExpr 0x5636a57ec0e8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5636a57ebec0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x5636a57ebfc0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x5636a57ebfe0 <col:89> 'String' lvalue Var 0x5636a57eb5f0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5636a57ec090 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5636a57ec020 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5636a56f31d8 0x5636a56f2df8 0x5636a56f2a28 0x5636a56f2648 0x5636a56f2268 0x5636a56f1e98
|       |     | | `-DeclRefExpr 0x5636a57ec000 <col:95> 'T *' lvalue Var 0x5636a57eb838 's' 'T *'
|       |     | `-UnaryOperator 0x5636a57ec0d0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5636a57ec0c0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x5636a57ec258 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x5636a57ec238 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x5636a57ec208 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5636a57ec1b8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5636a57ec148 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5636a56f31d8 0x5636a56f2df8 0x5636a56f2a28 0x5636a56f2648 0x5636a56f2268 0x5636a56f1e98
|       |         | | `-DeclRefExpr 0x5636a57ec128 <col:109> 'T *' lvalue Var 0x5636a57eb838 's' 'T *'
|       |         | `-DeclRefExpr 0x5636a57ec1e8 <col:113> 'const V' lvalue ParmVar 0x5636a57c4f48 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5636a57ec228 <col:120> 'bool' true
|       `-DeclRefExpr 0x5636a57ec380 <col:128> 'Args::Slot *' lvalue Var 0x5636a57eb560 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5636a57c5658 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x5636a57c51a0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5636a57c5218 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5636a57c55b8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5636a57c52d8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57c5358 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5636a57c53d0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5636a57c5478 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x5636a57ecfc8 <col:75, line:754:5>
|     |-DeclStmt 0x5636a57ec478 <line:749:9, col:26>
|     | `-VarDecl 0x5636a57ec410 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5636a57ecf90 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x5636a57ecfb0 <line:750:13, col:58>
|       | `-VarDecl 0x5636a57ec4a0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5636a57ec680 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5636a57ec650 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5636a57ec638 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5636a57ec618 <col:26, col:58> 'String' (CXXTemporary 0x5636a57ec618)
|       |           `-CXXMemberCallExpr 0x5636a57ec5a8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5636a57ec518 <col:26> '<bound member function type>' ->find 0x5636a57e23c8
|       |             | `-CXXThisExpr 0x5636a57ec508 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5636a57ec5e0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5636a57ec548 <col:31> 'const char *' lvalue ParmVar 0x5636a57c52d8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5636a57ec5f8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5636a57ec568 <col:40> 'int' lvalue ParmVar 0x5636a57c5358 'flags' 'int'
|       |             `-DeclRefExpr 0x5636a57ec588 <col:47> 'Args::Slot *' lvalue Var 0x5636a57ec410 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5636a57ec738 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5636a57ec720 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5636a57ec700 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5636a57ec6d0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5636a54fe098
|       |       `-ImplicitCastExpr 0x5636a57ec6b8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5636a57ec698 <col:20> 'String' lvalue Var 0x5636a57ec4a0 'str' 'String'
|       `-CompoundStmt 0x5636a57ecf70 <col:61, line:753:9>
|         |-DeclStmt 0x5636a57ecb10 <line:751:13, col:63>
|         | `-VarDecl 0x5636a57ec788 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5636a57ecae0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5636a57eca50 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5636a57eca98 <col:47> 'T' lvalue ParmVar 0x5636a57c5478 'variable' 'T &'
|         |     `-UnaryOperator 0x5636a57ecac8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5636a57ecab8 <col:58> 'Args *' this
|         `-CallExpr 0x5636a57ecf40 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x5636a57ecb38 <col:13> '<bound member function type>' ->postparse 0x5636a57e25d8
|           | `-CXXThisExpr 0x5636a57ecb28 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5636a57ecf00 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5636a57ecb68 <col:23> 'T *' lvalue Var 0x5636a57ec788 's' 'T *'
|           | `-CallExpr 0x5636a57ecec0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5636a57ecd50 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5636a57ecd98 <col:56> 'P' lvalue ParmVar 0x5636a57c53d0 'parser' 'P'
|           |   |-DeclRefExpr 0x5636a57ecdb8 <col:64> 'String' lvalue Var 0x5636a57ec4a0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5636a57ece68 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5636a57ecdf8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5636a56f31d8 0x5636a56f2df8 0x5636a56f2a28 0x5636a56f2648 0x5636a56f2268 0x5636a56f1e98
|           |   | `-DeclRefExpr 0x5636a57ecdd8 <col:70> 'T *' lvalue Var 0x5636a57ec788 's' 'T *'
|           |   `-UnaryOperator 0x5636a57ecea8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5636a57ece98 <col:74> 'Args *' this
|           `-DeclRefExpr 0x5636a57ecf20 <col:81> 'Args::Slot *' lvalue Var 0x5636a57ec410 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5636a57c5cb8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5636a57c56d0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5636a57c5748 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x5636a57c57c8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5636a57c5c18 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5636a57c5890 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57c5910 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5636a57c5988 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x5636a57c5a28 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x5636a57c5ac8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x5636a57edd58 <col:98, line:762:5>
|     |-DeclStmt 0x5636a57ed060 <line:758:9, col:26>
|     | `-VarDecl 0x5636a57ecff8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5636a57ed280 <line:759:9, col:55>
|     | `-VarDecl 0x5636a57ed088 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5636a57ed268 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5636a57ed238 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5636a57ed220 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5636a57ed200 <col:22, col:54> 'String' (CXXTemporary 0x5636a57ed200)
|     |           `-CXXMemberCallExpr 0x5636a57ed190 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5636a57ed100 <col:22> '<bound member function type>' ->find 0x5636a57e23c8
|     |             | `-CXXThisExpr 0x5636a57ed0f0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5636a57ed1c8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5636a57ed130 <col:27> 'const char *' lvalue ParmVar 0x5636a57c5890 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5636a57ed1e0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5636a57ed150 <col:36> 'int' lvalue ParmVar 0x5636a57c5910 'flags' 'int'
|     |             `-DeclRefExpr 0x5636a57ed170 <col:43> 'Args::Slot *' lvalue Var 0x5636a57ecff8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5636a57ed6a0 <line:760:9, col:59>
|     | `-VarDecl 0x5636a57ed2d8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5636a57ed670 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5636a57ed5e0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5636a57ed628 <col:43> 'T' lvalue ParmVar 0x5636a57c5a28 'variable' 'T &'
|     |     `-UnaryOperator 0x5636a57ed658 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5636a57ed648 <col:54> 'Args *' this
|     `-CallExpr 0x5636a57edd28 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x5636a57ed6c8 <col:9> '<bound member function type>' ->postparse 0x5636a57e25d8
|       | `-CXXThisExpr 0x5636a57ed6b8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5636a57edce8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5636a57ed6f8 <col:19> 'T *' lvalue Var 0x5636a57ed2d8 's' 'T *'
|       | `-ParenExpr 0x5636a57edcc8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x5636a57edc98 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5636a57edc80 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5636a57edc68 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5636a57edc48 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5636a57edc18 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5636a54fe098
|       |     |       `-ImplicitCastExpr 0x5636a57edc00 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5636a57ed718 <col:25> 'String' lvalue Var 0x5636a57ed088 'str' 'String'
|       |     |-CallExpr 0x5636a57eda70 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5636a57ed900 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x5636a57ed948 <col:59> 'P' lvalue ParmVar 0x5636a57c5988 'parser' 'P'
|       |     | |-DeclRefExpr 0x5636a57ed968 <col:67> 'String' lvalue Var 0x5636a57ed088 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5636a57eda18 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5636a57ed9a8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5636a56f31d8 0x5636a56f2df8 0x5636a56f2a28 0x5636a56f2648 0x5636a56f2268 0x5636a56f1e98
|       |     | | `-DeclRefExpr 0x5636a57ed988 <col:73> 'T *' lvalue Var 0x5636a57ed2d8 's' 'T *'
|       |     | `-UnaryOperator 0x5636a57eda58 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5636a57eda48 <col:77> 'Args *' this
|       |     `-ParenExpr 0x5636a57edbe0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x5636a57edbc0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x5636a57edb90 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5636a57edb40 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5636a57edad0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5636a56f31d8 0x5636a56f2df8 0x5636a56f2a28 0x5636a56f2648 0x5636a56f2268 0x5636a56f1e98
|       |         | | `-DeclRefExpr 0x5636a57edab0 <col:87> 'T *' lvalue Var 0x5636a57ed2d8 's' 'T *'
|       |         | `-DeclRefExpr 0x5636a57edb70 <col:91> 'const V' lvalue ParmVar 0x5636a57c5ac8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5636a57edbb0 <col:98> 'bool' true
|       `-DeclRefExpr 0x5636a57edd08 <col:106> 'Args::Slot *' lvalue Var 0x5636a57ecff8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5636a57c6328 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x5636a57c5d38 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5636a57c5db8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5636a57c5e38 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5636a57c6288 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5636a57c5f00 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57c5f80 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5636a57c5ff8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x5636a57c6098 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x5636a57c6138 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x5636a57eed38 <col:60, line:773:5>
|     |-DeclStmt 0x5636a57ede00 <line:767:9, col:26>
|     | `-VarDecl 0x5636a57edd98 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5636a57eed00 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x5636a57eed20 <line:768:13, col:58>
|       | `-VarDecl 0x5636a57ede28 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5636a57ee008 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5636a57edfd8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5636a57edfc0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5636a57edfa0 <col:26, col:58> 'String' (CXXTemporary 0x5636a57edfa0)
|       |           `-CXXMemberCallExpr 0x5636a57edf30 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5636a57edea0 <col:26> '<bound member function type>' ->find 0x5636a57e23c8
|       |             | `-CXXThisExpr 0x5636a57ede90 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5636a57edf68 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5636a57eded0 <col:31> 'const char *' lvalue ParmVar 0x5636a57c5f00 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5636a57edf80 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5636a57edef0 <col:40> 'int' lvalue ParmVar 0x5636a57c5f80 'flags' 'int'
|       |             `-DeclRefExpr 0x5636a57edf10 <col:47> 'Args::Slot *' lvalue Var 0x5636a57edd98 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5636a57ee0c0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5636a57ee0a8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5636a57ee088 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5636a57ee058 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5636a54fe098
|       |       `-ImplicitCastExpr 0x5636a57ee040 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5636a57ee020 <col:20> 'String' lvalue Var 0x5636a57ede28 'str' 'String'
|       `-CompoundStmt 0x5636a57eecd8 <col:61, line:772:9>
|         |-DeclStmt 0x5636a57ee400 <line:769:13, col:66>
|         | `-VarDecl 0x5636a57ee118 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x5636a57ee3d0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5636a57ee340 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5636a57ee388 <col:49> 'T1' lvalue ParmVar 0x5636a57c6098 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x5636a57ee3b8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5636a57ee3a8 <col:61> 'Args *' this
|         |-DeclStmt 0x5636a57ee770 <line:770:13, col:66>
|         | `-VarDecl 0x5636a57ee488 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x5636a57ee740 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5636a57ee6b0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5636a57ee6f8 <col:49> 'T2' lvalue ParmVar 0x5636a57c6138 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x5636a57ee728 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5636a57ee718 <col:61> 'Args *' this
|         `-CallExpr 0x5636a57eeca8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x5636a57ee798 <col:13> '<bound member function type>' ->postparse 0x5636a57e25d8
|           | `-CXXThisExpr 0x5636a57ee788 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5636a57eec68 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x5636a57ee808 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x5636a57ee7c8 <col:23> 'T1 *' lvalue Var 0x5636a57ee118 's1' 'T1 *'
|           | | `-DeclRefExpr 0x5636a57ee7e8 <col:29> 'T2 *' lvalue Var 0x5636a57ee488 's2' 'T2 *'
|           | `-CallExpr 0x5636a57eec20 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5636a57ee9f0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5636a57eea38 <col:63> 'P' lvalue ParmVar 0x5636a57c5ff8 'parser' 'P'
|           |   |-DeclRefExpr 0x5636a57eea58 <col:71> 'String' lvalue Var 0x5636a57ede28 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5636a57eeb08 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5636a57eea98 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5636a56f31d8 0x5636a56f2df8 0x5636a56f2a28 0x5636a56f2648 0x5636a56f2268 0x5636a56f1e98
|           |   | `-DeclRefExpr 0x5636a57eea78 <col:77> 'T1 *' lvalue Var 0x5636a57ee118 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x5636a57eebc8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5636a57eeb58 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5636a56f31d8 0x5636a56f2df8 0x5636a56f2a28 0x5636a56f2648 0x5636a56f2268 0x5636a56f1e98
|           |   | `-DeclRefExpr 0x5636a57eeb38 <col:82> 'T2 *' lvalue Var 0x5636a57ee488 's2' 'T2 *'
|           |   `-UnaryOperator 0x5636a57eec08 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5636a57eebf8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x5636a57eec88 <col:94> 'Args::Slot *' lvalue Var 0x5636a57edd98 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5636a57c6718 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x5636a57c63a8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5636a57c6678 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5636a57c6460 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57c64e0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5636a57c6558 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5636a57ef250 <col:67, line:780:5>
|     |-DeclStmt 0x5636a57eedd0 <line:777:9, col:26>
|     | `-VarDecl 0x5636a57eed68 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5636a57ef218 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x5636a57ef238 <line:778:13, col:58>
|       | `-VarDecl 0x5636a57eedf8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5636a57eefd8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5636a57eefa8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5636a57eef90 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5636a57eef70 <col:26, col:58> 'String' (CXXTemporary 0x5636a57eef70)
|       |           `-CXXMemberCallExpr 0x5636a57eef00 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5636a57eee70 <col:26> '<bound member function type>' ->find 0x5636a57e23c8
|       |             | `-CXXThisExpr 0x5636a57eee60 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5636a57eef38 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5636a57eeea0 <col:31> 'const char *' lvalue ParmVar 0x5636a57c6460 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5636a57eef50 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5636a57eeec0 <col:40> 'int' lvalue ParmVar 0x5636a57c64e0 'flags' 'int'
|       |             `-DeclRefExpr 0x5636a57eeee0 <col:47> 'Args::Slot *' lvalue Var 0x5636a57eed68 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5636a57ef090 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5636a57ef078 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5636a57ef058 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5636a57ef028 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5636a54fe098
|       |       `-ImplicitCastExpr 0x5636a57ef010 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5636a57eeff0 <col:20> 'String' lvalue Var 0x5636a57eedf8 'str' 'String'
|       `-CallExpr 0x5636a57ef1e8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x5636a57ef0b8 <col:13> '<bound member function type>' ->postparse 0x5636a57e25d8
|         | `-CXXThisExpr 0x5636a57ef0a8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x5636a57ef198 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x5636a57ef108 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x5636a57ef0e8 <col:23> 'P' lvalue ParmVar 0x5636a57c6558 'parser' 'P'
|         | |-DeclRefExpr 0x5636a57ef150 <col:36> 'String' lvalue Var 0x5636a57eedf8 'str' 'String'
|         | `-UnaryOperator 0x5636a57ef180 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x5636a57ef170 <col:42> 'Args *' this
|         `-DeclRefExpr 0x5636a57ef1c8 <col:49> 'Args::Slot *' lvalue Var 0x5636a57eed68 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5636a57c6ab8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5636a57c6788 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5636a57c6a18 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5636a57c6840 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57c68c0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5636a57c6938 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x5636a57efbc0 <col:71, line:792:5>
|     |-DeclStmt 0x5636a57ef2e8 <line:784:9, col:26>
|     | `-VarDecl 0x5636a57ef280 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5636a57ef3b8 <line:785:9, col:29>
|     | `-VarDecl 0x5636a57ef318 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5636a57ef3a0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5636a57ef380 <col:28> 'int' 1
|     |-WhileStmt 0x5636a57efa70 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x5636a57efa90 <line:786:16, col:61>
|     | | `-VarDecl 0x5636a57ef3e0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5636a57ef5c0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5636a57ef590 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5636a57ef578 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5636a57ef558 <col:29, col:61> 'String' (CXXTemporary 0x5636a57ef558)
|     | |           `-CXXMemberCallExpr 0x5636a57ef4e8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5636a57ef458 <col:29> '<bound member function type>' ->find 0x5636a57e23c8
|     | |             | `-CXXThisExpr 0x5636a57ef448 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5636a57ef520 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5636a57ef488 <col:34> 'const char *' lvalue ParmVar 0x5636a57c6840 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5636a57ef538 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5636a57ef4a8 <col:43> 'int' lvalue ParmVar 0x5636a57c68c0 'flags' 'int'
|     | |             `-DeclRefExpr 0x5636a57ef4c8 <col:50> 'Args::Slot *' lvalue Var 0x5636a57ef280 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5636a57ef678 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5636a57ef660 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5636a57ef640 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5636a57ef610 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5636a54fe098
|     | |       `-ImplicitCastExpr 0x5636a57ef5f8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5636a57ef5d8 <col:23> 'String' lvalue Var 0x5636a57ef3e0 'str' 'String'
|     | `-CompoundStmt 0x5636a57efa48 <col:64, line:790:9>
|     |   |-CallExpr 0x5636a57ef7d0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x5636a57ef6a0 <col:13> '<bound member function type>' ->postparse 0x5636a57e25d8
|     |   | | `-CXXThisExpr 0x5636a57ef690 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5636a57ef780 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5636a57ef6f0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5636a57ef6d0 <col:23> 'P' lvalue ParmVar 0x5636a57c6938 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5636a57ef738 <col:36> 'String' lvalue Var 0x5636a57ef3e0 'str' 'String'
|     |   | | `-UnaryOperator 0x5636a57ef768 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5636a57ef758 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x5636a57ef7b0 <col:49> 'Args::Slot *' lvalue Var 0x5636a57ef280 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5636a57ef968 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5636a57ef800 <col:13> 'int' lvalue Var 0x5636a57ef318 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5636a57ef950 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5636a57ef930 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5636a57ef898 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5636a57ef878 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5636a57ef860 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5636a57ef820 <col:28> 'int' lvalue Var 0x5636a57ef318 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5636a57ef840 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5636a57ef918 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5636a57ef8e8 <col:49> 'bool' lvalue ->_read_status 0x5636a57ae190
|     |   |         `-ImplicitCastExpr 0x5636a57ef8c8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5636a57ef8b8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5636a57efa18 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5636a57ef988 <col:13> 'int' lvalue ParmVar 0x5636a57c68c0 'flags' 'int'
|     |     `-UnaryOperator 0x5636a57efa00 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5636a57ef9e8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5636a57ef9c8 <col:23> 'const int' lvalue Var 0x5636a57b56d8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5636a57efba0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5636a57efad8 <col:9> 'bool' lvalue ->_read_status 0x5636a57ae190
|       | `-ImplicitCastExpr 0x5636a57efab8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5636a57efaa8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5636a57efb80 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5636a57efb60 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5636a57efb48 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5636a57efb08 <col:25> 'int' lvalue Var 0x5636a57ef318 'read_status' 'int'
|           `-IntegerLiteral 0x5636a57efb28 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5636a57c6f98 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5636a57c6b28 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5636a57c6ba8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5636a57c6ef8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5636a57c6c68 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57c6ce8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5636a57c6d60 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x5636a57c6e08 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x5636a57f4a40 <col:84, line:805:5>
|     |-DeclStmt 0x5636a57efc68 <line:796:9, col:26>
|     | `-VarDecl 0x5636a57efc00 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5636a57efd38 <line:797:9, col:29>
|     | `-VarDecl 0x5636a57efc98 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5636a57efd20 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5636a57efd00 <col:28> 'int' 1
|     |-DeclStmt 0x5636a57f0070 <line:798:9, col:71>
|     | `-VarDecl 0x5636a57efd88 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5636a57f0040 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5636a57effb0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x5636a57efff8 <col:55> 'T' lvalue ParmVar 0x5636a57c6e08 'variable' 'T &'
|     |     `-UnaryOperator 0x5636a57f0028 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5636a57f0018 <col:66> 'Args *' this
|     |-WhileStmt 0x5636a57f48f0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x5636a57f4910 <line:799:16, col:61>
|     | | `-VarDecl 0x5636a57f0098 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5636a57f0278 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5636a57f0248 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5636a57f0230 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5636a57f0210 <col:29, col:61> 'String' (CXXTemporary 0x5636a57f0210)
|     | |           `-CXXMemberCallExpr 0x5636a57f01a0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5636a57f0110 <col:29> '<bound member function type>' ->find 0x5636a57e23c8
|     | |             | `-CXXThisExpr 0x5636a57f0100 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5636a57f01d8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5636a57f0140 <col:34> 'const char *' lvalue ParmVar 0x5636a57c6c68 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5636a57f01f0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5636a57f0160 <col:43> 'int' lvalue ParmVar 0x5636a57c6ce8 'flags' 'int'
|     | |             `-DeclRefExpr 0x5636a57f0180 <col:50> 'Args::Slot *' lvalue Var 0x5636a57efc00 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5636a57f0330 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5636a57f0318 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5636a57f02f8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5636a57f02c8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5636a54fe098
|     | |       `-ImplicitCastExpr 0x5636a57f02b0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5636a57f0290 <col:23> 'String' lvalue Var 0x5636a57f0098 'str' 'String'
|     | `-CompoundStmt 0x5636a57f48c8 <col:64, line:803:9>
|     |   |-CallExpr 0x5636a57f4650 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x5636a57f0358 <col:13> '<bound member function type>' ->postparse 0x5636a57e25d8
|     |   | | `-CXXThisExpr 0x5636a57f0348 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x5636a57f4610 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x5636a57f0388 <col:23> 'T *' lvalue Var 0x5636a57efd88 's' 'T *'
|     |   | | `-CallExpr 0x5636a57f45d0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x5636a57f0570 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x5636a57f05b8 <col:56> 'P' lvalue ParmVar 0x5636a57c6d60 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x5636a57f05d8 <col:64> 'String' lvalue Var 0x5636a57f0098 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x5636a57f0688 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x5636a57f0618 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5636a56f31d8 0x5636a56f2df8 0x5636a56f2a28 0x5636a56f2648 0x5636a56f2268 0x5636a56f1e98
|     |   | |   | `-DeclRefExpr 0x5636a57f05f8 <col:70> 'T *' lvalue Var 0x5636a57efd88 's' 'T *'
|     |   | |   `-UnaryOperator 0x5636a57f06c8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x5636a57f06b8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x5636a57f4630 <col:81> 'Args::Slot *' lvalue Var 0x5636a57efc00 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5636a57f47e8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5636a57f4680 <col:13> 'int' lvalue Var 0x5636a57efc98 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5636a57f47d0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5636a57f47b0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5636a57f4718 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5636a57f46f8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5636a57f46e0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5636a57f46a0 <col:28> 'int' lvalue Var 0x5636a57efc98 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5636a57f46c0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5636a57f4798 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5636a57f4768 <col:49> 'bool' lvalue ->_read_status 0x5636a57ae190
|     |   |         `-ImplicitCastExpr 0x5636a57f4748 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5636a57f4738 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5636a57f4898 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5636a57f4808 <col:13> 'int' lvalue ParmVar 0x5636a57c6ce8 'flags' 'int'
|     |     `-UnaryOperator 0x5636a57f4880 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5636a57f4868 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5636a57f4848 <col:23> 'const int' lvalue Var 0x5636a57b56d8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5636a57f4a20 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5636a57f4958 <col:9> 'bool' lvalue ->_read_status 0x5636a57ae190
|       | `-ImplicitCastExpr 0x5636a57f4938 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5636a57f4928 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5636a57f4a00 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5636a57f49e0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5636a57f49c8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5636a57f4988 <col:25> 'int' lvalue Var 0x5636a57efc98 'read_status' 'int'
|           `-IntegerLiteral 0x5636a57f49a8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5636a57c7578 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x5636a57c7010 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5636a57c7088 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5636a57c74d8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5636a57c7148 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636a57c71c8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x5636a57c7240 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x5636a57c7390 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x5636a57f5848 <col:87, line:821:5>
|     |-DeclStmt 0x5636a57f4af0 <line:809:9, col:26>
|     | `-VarDecl 0x5636a57f4a88 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5636a57f4bc0 <line:810:9, col:29>
|     | `-VarDecl 0x5636a57f4b20 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5636a57f4ba8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5636a57f4b88 <col:28> 'int' 1
|     |-DeclStmt 0x5636a57f4e08 <line:811:9, col:38>
|     | `-VarDecl 0x5636a57f4cf0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x5636a57f4de0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5636a57f4d68 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5636a57f4dc0 <col:29> 'Vector<T>' lvalue ParmVar 0x5636a57c7390 'variable' 'Vector<T> &'
|     |-WhileStmt 0x5636a57f56f8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x5636a57f5718 <line:812:16, col:61>
|     | | `-VarDecl 0x5636a57f4e30 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5636a57f5010 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5636a57f4fe0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5636a57f4fc8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5636a57f4fa8 <col:29, col:61> 'String' (CXXTemporary 0x5636a57f4fa8)
|     | |           `-CXXMemberCallExpr 0x5636a57f4f38 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5636a57f4ea8 <col:29> '<bound member function type>' ->find 0x5636a57e23c8
|     | |             | `-CXXThisExpr 0x5636a57f4e98 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5636a57f4f70 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5636a57f4ed8 <col:34> 'const char *' lvalue ParmVar 0x5636a57c7148 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5636a57f4f88 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5636a57f4ef8 <col:43> 'int' lvalue ParmVar 0x5636a57c71c8 'flags' 'int'
|     | |             `-DeclRefExpr 0x5636a57f4f18 <col:50> 'Args::Slot *' lvalue Var 0x5636a57f4a88 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5636a57f50c8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5636a57f50b0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5636a57f5090 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5636a57f5060 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5636a54fe098
|     | |       `-ImplicitCastExpr 0x5636a57f5048 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5636a57f5028 <col:23> 'String' lvalue Var 0x5636a57f4e30 'str' 'String'
|     | `-CompoundStmt 0x5636a57f56c0 <col:64, line:819:9>
|     |   |-DeclStmt 0x5636a57f5188 <line:813:13, col:23>
|     |   | `-VarDecl 0x5636a57f50f0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x5636a57f5168 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x5636a57f5308 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x5636a57f51b0 <col:13> '<bound member function type>' ->postparse 0x5636a57e25d8
|     |   | | `-CXXThisExpr 0x5636a57f51a0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5636a57f52b0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5636a57f5200 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5636a57f51e0 <col:23> 'P' lvalue ParmVar 0x5636a57c7240 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5636a57f5248 <col:36> 'String' lvalue Var 0x5636a57f4e30 'str' 'String'
|     |   | | |-DeclRefExpr 0x5636a57f5268 <col:41> 'T' lvalue Var 0x5636a57f50f0 'sx' 'T'
|     |   | | `-UnaryOperator 0x5636a57f5298 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5636a57f5288 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x5636a57f52e8 <col:53> 'Args::Slot *' lvalue Var 0x5636a57f4a88 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x5636a57f5460 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x5636a57f5398 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x5636a57f5368 <col:17> 'bool' lvalue ->_read_status 0x5636a57ae190
|     |   | |   `-ImplicitCastExpr 0x5636a57f5348 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x5636a57f5338 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x5636a57f5438 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x5636a57f53d0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x5636a57f53b0 <col:17> 'Vector<T> *' lvalue Var 0x5636a57f4cf0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x5636a57f5418 <col:30> 'T' lvalue Var 0x5636a57f50f0 'sx' 'T'
|     |   |-BinaryOperator 0x5636a57f55e0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5636a57f5478 <col:13> 'int' lvalue Var 0x5636a57f4b20 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5636a57f55c8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5636a57f55a8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5636a57f5510 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5636a57f54f0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5636a57f54d8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5636a57f5498 <col:28> 'int' lvalue Var 0x5636a57f4b20 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5636a57f54b8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5636a57f5590 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5636a57f5560 <col:49> 'bool' lvalue ->_read_status 0x5636a57ae190
|     |   |         `-ImplicitCastExpr 0x5636a57f5540 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5636a57f5530 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5636a57f5690 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5636a57f5600 <col:13> 'int' lvalue ParmVar 0x5636a57c71c8 'flags' 'int'
|     |     `-UnaryOperator 0x5636a57f5678 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5636a57f5660 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5636a57f5640 <col:23> 'const int' lvalue Var 0x5636a57b56d8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5636a57f5828 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5636a57f5760 <col:9> 'bool' lvalue ->_read_status 0x5636a57ae190
|       | `-ImplicitCastExpr 0x5636a57f5740 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5636a57f5730 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5636a57f5808 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5636a57f57e8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5636a57f57d0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5636a57f5790 <col:25> 'int' lvalue Var 0x5636a57f4b20 'read_status' 'int'
|           `-IntegerLiteral 0x5636a57f57b0 <col:40> 'int' 1
|-AccessSpecDecl 0x5636a57c75f0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x5636a57c7618 prev 0x5636a57b39d8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x5636a57c7710 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x5636a57c7800 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x5636a57f5880 <col:16, line:828:9>
| |-CXXDestructorDecl 0x5636a57c78f0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x5636a57f5890 <col:25, line:830:9>
| |-CXXMethodDecl 0x5636a57c79f0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x5636a57c7aa0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x5636a57c7b48 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5636a57c7b48
| | `-ParmVarDecl 0x5636a57c7c58 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x5636a57c8418 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5636a57c8418
|   `-ParmVarDecl 0x5636a57c8528 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x5636a57c7cc8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x5636a57c7e28 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x5636a57c8020 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x5636a57c7ed0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x5636a57c7f48 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x5636a57f5a70 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x5636a57c82d8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x5636a57f58e0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5636a57f58a0 <col:20> 'void *' lvalue ParmVar 0x5636a57c7ed0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x5636a57c8340 '_slot' 'char *'
| | | `-CXXNewExpr 0x5636a57f5968 <col:32, col:45> 'char *' array Function 0x5636a5321d18 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x5636a57f5950 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x5636a57f5920 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x5636a57c7f48 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x5636a57c83a0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x5636a57f5a30 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5636a57f59f0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x5636a57c7f48 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x5636a57f5af0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x5636a57c8120 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x5636a57c78f0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x5636a57f5b78 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x5636a57f5b58 <line:840:13, col:22> 'void' array Function 0x5636a5322078 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x5636a57f5b40 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x5636a57f5b10 <col:22> 'char *' lvalue ->_slot 0x5636a57c8340
| |         `-CXXThisExpr 0x5636a57f5b00 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x5636a57c8220 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x5636a57c79f0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x5636a57f5d68 <col:22, line:844:9>
| |   `-CallExpr 0x5636a57f5cd0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x5636a57f5cb8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5636a57f5c98 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x5636a542daf8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x5636a57f5d08 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x5636a57f5be8 <col:20> 'void *' lvalue ->_ptr 0x5636a57c82d8
| |     |   `-CXXThisExpr 0x5636a57f5bd8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x5636a57f5d38 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x5636a57f5d20 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x5636a57f5c28 <col:26> 'char *' lvalue ->_slot 0x5636a57c8340
| |     |     `-CXXThisExpr 0x5636a57f5c18 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x5636a57f5d50 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x5636a57f5c68 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x5636a57c83a0
| |         `-CXXThisExpr 0x5636a57f5c58 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x5636a57c82d8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x5636a57c8340 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x5636a57c83a0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x5636a57c8598 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5636a57c8598
| | `-ParmVarDecl 0x5636a57c86a8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x5636a57c8748 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5636a57c8748
|   `-ParmVarDecl 0x5636a57c8858 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x5636a57c89f8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x5636a57c88c8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x5636a57c8968 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x5636a57c8c90 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x5636a57c8e88 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x5636a57c8d58 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x5636a57d4b00 '_ptr' 'T *'
|   | | `-ParenListExpr 0x5636a57f5da0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x5636a57f5d80 <col:20> 'T *' lvalue ParmVar 0x5636a57c8d58 'ptr' 'T *'
|   | `-CompoundStmt 0x5636a57f5df0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x5636a57c8f58 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x5636a57c79f0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x5636a57f5fa0 <col:22, line:857:9>
|   |   `-CallExpr 0x5636a57f5f70 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x5636a57f5e00 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x5636a54e6228 0x5636a5490558
|   |     |-CXXOperatorCallExpr 0x5636a57f5f00 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x5636a57f5e90 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5636a56f31d8 0x5636a56f2df8 0x5636a56f2a28 0x5636a56f2648 0x5636a56f2268 0x5636a56f1e98
|   |     | `-MemberExpr 0x5636a57f5e60 <col:29> 'T *' lvalue ->_ptr 0x5636a57d4b00
|   |     |   `-CXXThisExpr 0x5636a57f5e50 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x5636a57f5f40 <col:35> 'T' lvalue ->_slot 0x5636a57d4b60
|   |       `-CXXThisExpr 0x5636a57f5f30 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x5636a57d4b00 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x5636a57d4b60 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x5636a57d4bc8 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x5636a57d4cd0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x5636a57d4d20 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5636a57d4cb0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x5636a57d4c90 <col:31> 'int' 48
|-FieldDecl 0x5636a57d4d48 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x5636a57d4da8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x5636a57d4e08 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x5636a57d4f40 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x5636a57e1c70 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5636a57e1cd0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x5636a57e1d80 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x5636a57e1fa8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x5636a57e1eb0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x5636a57e20f8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x5636a57e2068 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x5636a57e23c8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x5636a57e21b8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x5636a57e2238 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x5636a57e22e0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x5636a57e25d8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x5636a57e2490 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x5636a57e2508 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x5636a57e26a8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x5636a57e27f8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x5636a57e2760 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x5636a57e2b88 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x5636a57e28b8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x5636a57e2938 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x5636a57e29e0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x5636a57e2a98 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x5636a57e2db0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x5636a57e2c60 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x5636a57e2cd8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x5636a57e30c8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x5636a57e2e60 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x5636a57e3028 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x5636a57e2f38 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct NamedIntArg
         0 |   int _type
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636a5863068 <../dummy_inc/click/nameinfo.hh:515:1, line:525:1> line:515:8 referenced struct NamedIntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5636a5863188 <col:1, col:8> col:8 implicit referenced struct NamedIntArg
|-CXXConstructorDecl 0x5636a58632f8 <line:516:5, line:518:5> line:516:5 used NamedIntArg 'void (uint32_t)'
| |-ParmVarDecl 0x5636a5863228 <col:17, col:26> col:26 used type 'uint32_t':'unsigned int'
| |-CXXCtorInitializer Field 0x5636a5863620 '_type' 'int'
| | `-ImplicitCastExpr 0x5636a58636e0 <line:517:10> 'int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5636a58636c8 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
| |     `-DeclRefExpr 0x5636a5863688 <col:10> 'uint32_t':'unsigned int' lvalue ParmVar 0x5636a5863228 'type' 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5636a5863728 <col:16, line:518:5>
|-CXXMethodDecl 0x5636a5863550 <line:519:5, line:523:5> line:519:10 parse 'bool (const String &, int &, const ArgContext &)'
| |-ParmVarDecl 0x5636a58633b8 <col:16, col:30> col:30 used str 'const String &'
| |-ParmVarDecl 0x5636a5863438 <col:35, col:40> col:40 used value 'int &'
| |-ParmVarDecl 0x5636a58634b0 <col:47, col:65> col:65 used args 'const ArgContext &'
| `-CompoundStmt 0x5636a58640f0 <col:71, line:523:5>
|   `-ReturnStmt 0x5636a58640e0 <line:520:2, line:522:40>
|     `-ExprWithCleanups 0x5636a58640c8 <line:520:9, line:522:40> 'bool'
|       `-BinaryOperator 0x5636a58640a8 <line:520:9, line:522:40> 'bool' '||'
|         |-CallExpr 0x5636a5863980 <line:520:9, line:521:32> 'bool'
|         | |-ImplicitCastExpr 0x5636a5863968 <line:520:9, col:19> 'bool (*)(uint32_t, const Element *, const String &, void *, size_t)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x5636a5863770 <col:9, col:19> 'bool (uint32_t, const Element *, const String &, void *, size_t)' lvalue CXXMethod 0x5636a584b258 'query' 'bool (uint32_t, const Element *, const String &, void *, size_t)'
|         | |-ImplicitCastExpr 0x5636a58639e0 <col:25> 'uint32_t':'unsigned int' <IntegralCast>
|         | | `-ImplicitCastExpr 0x5636a58639c8 <col:25> 'int' <LValueToRValue>
|         | |   `-MemberExpr 0x5636a58637b0 <col:25> 'int' lvalue ->_type 0x5636a5863620
|         | |     `-CXXThisExpr 0x5636a58637a0 <col:25> 'NamedIntArg *' implicit this
|         | |-CXXMemberCallExpr 0x5636a5863830 <col:32, col:45> 'const Element *'
|         | | `-MemberExpr 0x5636a5863800 <col:32, col:37> '<bound member function type>' .context 0x5636a57ad468
|         | |   `-DeclRefExpr 0x5636a58637e0 <col:32> 'const ArgContext' lvalue ParmVar 0x5636a58634b0 'args' 'const ArgContext &'
|         | |-DeclRefExpr 0x5636a5863850 <col:48> 'const String' lvalue ParmVar 0x5636a58633b8 'str' 'const String &'
|         | |-ImplicitCastExpr 0x5636a58639f8 <line:521:11, col:12> 'void *' <BitCast>
|         | | `-UnaryOperator 0x5636a5863890 <col:11, col:12> 'int *' prefix '&' cannot overflow
|         | |   `-DeclRefExpr 0x5636a5863870 <col:12> 'int' lvalue ParmVar 0x5636a5863438 'value' 'int &'
|         | `-UnaryExprOrTypeTraitExpr 0x5636a58638e8 <col:19, col:31> 'unsigned long' sizeof
|         |   `-ParenExpr 0x5636a58638c8 <col:25, col:31> 'int' lvalue
|         |     `-DeclRefExpr 0x5636a58638a8 <col:26> 'int' lvalue ParmVar 0x5636a5863438 'value' 'int &' non_odr_use_unevaluated
|         `-CXXMemberCallExpr 0x5636a5864070 <line:522:9, col:40> 'bool'
|           |-MemberExpr 0x5636a5864028 <col:9, col:18> '<bound member function type>' .parse 0x5636a5863f18
|           | `-MaterializeTemporaryExpr 0x5636a5863b60 <col:9, col:16> 'IntArg' xvalue
|           |   `-CXXTemporaryObjectExpr 0x5636a5863a40 <col:9, col:16> 'IntArg' 'void (int)'
|           |     `-CXXDefaultArgExpr 0x5636a5863a20 <<invalid sloc>> 'int'
|           |-DeclRefExpr 0x5636a5863bd8 <col:24> 'const String' lvalue ParmVar 0x5636a58633b8 'str' 'const String &'
|           |-DeclRefExpr 0x5636a5863bf8 <col:29> 'int' lvalue ParmVar 0x5636a5863438 'value' 'int &'
|           `-DeclRefExpr 0x5636a5863c18 <col:36> 'const ArgContext' lvalue ParmVar 0x5636a58634b0 'args' 'const ArgContext &'
|-FieldDecl 0x5636a5863620 <line:524:5, col:9> col:9 referenced _type 'int'
|-CXXConstructorDecl 0x5636a5867738 <line:515:8> col:8 implicit constexpr NamedIntArg 'void (const NamedIntArg &)' inline default trivial noexcept-unevaluated 0x5636a5867738
| `-ParmVarDecl 0x5636a5867848 <col:8> col:8 'const NamedIntArg &'
|-CXXConstructorDecl 0x5636a58678e8 <col:8> col:8 implicit used constexpr NamedIntArg 'void (NamedIntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5636a58679f8 <col:8> col:8 used 'NamedIntArg &&'
| |-CXXCtorInitializer Field 0x5636a5863620 '_type' 'int'
| | `-ImplicitCastExpr 0x5636a58681f0 <col:8> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5636a58681c0 <col:8> 'int' xvalue ._type 0x5636a5863620
| |     `-CXXStaticCastExpr 0x5636a5868190 <col:8> 'NamedIntArg' xvalue static_cast<struct NamedIntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5636a5868160 <col:8> 'NamedIntArg' lvalue ParmVar 0x5636a58679f8 '' 'NamedIntArg &&'
| `-CompoundStmt 0x5636a5868238 <col:8>
`-CXXDestructorDecl 0x5636a5867ab0 <col:8> col:8 implicit referenced ~NamedIntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.NamedIntArg = type { i32 }
  NonVirtualBaseLLVMType:%struct.NamedIntArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WordArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636a5811a28 <../dummy_inc/click/args.hh:1369:1, line:1373:1> line:1369:7 referenced class WordArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5636a5811b48 <col:1, col:7> col:7 implicit class WordArg
|-AccessSpecDecl 0x5636a5811bd8 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x5636a5811dd0 <line:1370:5, line:1372:5> line:1370:17 parse 'bool (const String &, String &, const ArgContext &)' static
| |-ParmVarDecl 0x5636a5811c10 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x5636a5811c88 <col:42, col:50> col:50 used result 'String &'
| |-ParmVarDecl 0x5636a5811d00 <col:58, col:79> col:77 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5636a5811ea0 <col:79> 'const ArgContext' lvalue Var 0x5636a57f5fc8 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5636a5812018 <col:91, line:1372:5>
|   `-ReturnStmt 0x5636a5812008 <line:1371:9, col:39>
|     `-CallExpr 0x5636a5811fb8 <col:16, col:39> 'bool'
|       |-ImplicitCastExpr 0x5636a5811fa0 <col:16> 'bool (*)(const String &, String *, String *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5636a5811f80 <col:16> 'bool (const String &, String *, String *)' lvalue Function 0x5636a5811970 'cp_word' 'bool (const String &, String *, String *)'
|       |-DeclRefExpr 0x5636a5811f08 <col:24> 'const String' lvalue ParmVar 0x5636a5811c10 'str' 'const String &'
|       |-UnaryOperator 0x5636a5811f48 <col:29, col:30> 'String *' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x5636a5811f28 <col:30> 'String' lvalue ParmVar 0x5636a5811c88 'result' 'String &'
|       `-ImplicitCastExpr 0x5636a5811ff0 <col:38> 'String *' <NullToPointer>
|         `-IntegerLiteral 0x5636a5811f60 <col:38> 'int' 0
|-CXXConstructorDecl 0x5636a5868328 <line:1369:7> col:7 implicit referenced constexpr WordArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5636a5868428 <col:7> col:7 implicit constexpr WordArg 'void (const WordArg &)' inline default trivial noexcept-unevaluated 0x5636a5868428
| `-ParmVarDecl 0x5636a5868538 <col:7> col:7 'const WordArg &'
|-CXXConstructorDecl 0x5636a58685d8 <col:7> col:7 implicit used constexpr WordArg 'void (WordArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5636a58686e8 <col:7> col:7 'WordArg &&'
| `-CompoundStmt 0x5636a5868e10 <col:7>
`-CXXDestructorDecl 0x5636a5868788 <col:7> col:7 implicit referenced ~WordArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.WordArg = type { i8 }
  NonVirtualBaseLLVMType:%class.WordArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636a54eef50 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5636a54ef068 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x5636a54ef0f8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x5636a54ef1c8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x5636a54ef2b0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x5636a54ef4c8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5636a54ef370 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636a54ef678 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5636a54ef580 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5636a54ef7c0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5636a54ef730 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5636a54ef908 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5636a54ef878 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636a54efa50 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5636a54ef9c0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636a54efb18 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x5636a54efc60 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x5636a54efbd0 <col:28> col:31 'int'
|-CXXMethodDecl 0x5636a54efd28 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x5636a54efe70 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x5636a54efde0 <col:28> col:31 'int'
|-CXXMethodDecl 0x5636a54effe8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5636a54eff28 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636a54f0130 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5636a54f00a0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636a54f01f8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x5636a54f03b8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5636a54f02a8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5636a54f0320 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636a54f0608 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5636a54f0478 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5636a54f04f0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5636a54f06b8 <col:86> "" ""
|-CXXMethodDecl 0x5636a54f0928 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x5636a54f0798 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x5636a54f0810 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636a54f0ad8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5636a54f09e8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5636a54f0c88 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5636a54f0b90 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5636a54f0f58 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5636a54f0d40 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5636a54f0db8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5636a54f0e30 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636a54f1238 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5636a54f1020 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5636a54f1098 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5636a54f1110 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5636a54f12f0 <col:115> "" ""
|-AccessSpecDecl 0x5636a54f1360 <line:84:3, col:10> col:3 private
|-FieldDecl 0x5636a54f1398 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636a54f18a0 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5636a54f18a0
| `-ParmVarDecl 0x5636a54f19a8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x5636a54f1a48 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5636a54f1a48
| `-ParmVarDecl 0x5636a54f1b58 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x5636a5527188 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5636a5719f90 <col:7>
|-CXXConstructorDecl 0x5636a5527260 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5636a5527260
| `-ParmVarDecl 0x5636a5527378 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x5636a55273e8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5636a55273e8
| `-ParmVarDecl 0x5636a55274f8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x5636a571c990 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636a5708b38 prev 0x5636a56fdd40 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5636a5708c30 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5636a5708d20 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5636a5708e48 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5636a5708fc8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5636a5709148 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5636a57092c8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x5636a571a0f8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5636a571a968 <col:11>
|-CXXDestructorDecl 0x5636a571a1d0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5636a571a308 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5636a571a308
| `-ParmVarDecl 0x5636a571a418 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x5636a571a4b8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5636a571a4b8
| `-ParmVarDecl 0x5636a571a5c8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x5636a571d388 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x5636a571d498 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5636a571d718 <col:11>
|   `-ReturnStmt 0x5636a571d708 <col:11>
|     `-UnaryOperator 0x5636a571d6f0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5636a571d6e0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x5636a571d508 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5636a571d508
  `-ParmVarDecl 0x5636a571d618 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636a5709330 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5636a5709448 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5636a57094e8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5636a5709550 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5636a57095b8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5636a5709620 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5636a5709680 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5636a5709740 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5636a57097a0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5636a5709800 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x5636a571a008 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5636a57094e8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x5636a571a978 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x5636a571a9d0 <col:12>
|-CXXConstructorDecl 0x5636a571a638 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5636a571a638
| `-ParmVarDecl 0x5636a571a748 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x5636a571a7e8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5636a571a7e8
| `-ParmVarDecl 0x5636a571a8f8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x5636a571ca70 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636a56f7450 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5636a56f7568 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5636a56f75f8 <col:16, col:22> col:16 public
|-EnumDecl 0x5636a56f7620 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5636a56f7720 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5636a56f7800 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a56f7700 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5636a56f76e0 <col:21> 'int' 28
| `-EnumConstantDecl 0x5636a56f77b0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5636a56f7818 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5636a56f7790 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5636a56f7770 <col:22> 'int' 64
|-CXXMethodDecl 0x5636a56f7b58 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5636a56f7840 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5636a56f78c0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5636a56f7938 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5636a56f79b0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5636a56f7c18 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5636a56f7e18 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5636a56f7c90 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5636a56f7d08 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5636a56f7ec8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5636a56f8028 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5636a56f7f38 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5636a56f80d0 <col:72> warn_unused_result ""
|-TypedefDecl 0x5636a56f8430 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5636a56f83c0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5636a56f8360 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5636a56f8320 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x5636a51cd4e0 'void'
|       |-PointerType 0x5636a54777f0 'unsigned char *'
|       | `-BuiltinType 0x5636a51cd5e0 'unsigned char'
|       |-TypedefType 0x5636a5273dc0 'size_t' sugar
|       | |-Typedef 0x5636a523dbe0 'size_t'
|       | `-BuiltinType 0x5636a51cd640 'unsigned long'
|       `-PointerType 0x5636a51cdce0 'void *'
|         `-BuiltinType 0x5636a51cd4e0 'void'
|-CXXMethodDecl 0x5636a56f88a8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5636a56f84a0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5636a56f8518 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5636a56f85b0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5636a56f8630 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5636a5712fa0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x5636a5712f88 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x5636a5712f50 <col:58> 'int' 0
| |-ParmVarDecl 0x5636a56f86b0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5636a5712fc8 <col:76> 'int' 0
| |-ParmVarDecl 0x5636a56f8730 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x5636a5712fe8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5636a56f8978 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5636a56f89f8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5636a56f8ab8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5636a56f8b58 <col:20>
| `-OptimizeNoneAttr 0x5636a56f8bb0 <col:30>
|-CXXMethodDecl 0x5636a56f8c28 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5636a56f8cc8 <col:20>
| `-OptimizeNoneAttr 0x5636a56f8d20 <col:30>
|-CXXMethodDecl 0x5636a56f8d98 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5636a56f8e38 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5636a56f8ee8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5636a56f8f88 <col:20>
| |-OptimizeNoneAttr 0x5636a56f8fe0 <col:30>
| `-WarnUnusedResultAttr 0x5636a56f9008 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5636a56f9060 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5636a56f9100 <col:20>
| `-OptimizeNoneAttr 0x5636a56f9158 <col:30>
|-CXXMethodDecl 0x5636a56f91a8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5636a56f9248 <col:20>
| `-OptimizeNoneAttr 0x5636a56f92a0 <col:30>
|-CXXMethodDecl 0x5636a56f92e8 <line:81:5, col:58> col:49 used length 'uint32_t () const'
| |-NoInlineAttr 0x5636a56f9388 <col:20>
| `-OptimizeNoneAttr 0x5636a56f93e0 <col:30>
|-CXXMethodDecl 0x5636a56f9428 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5636a56f94e8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5636a56f95b0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5636a56f9678 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5636a56f9738 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5636a56f9858 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5636a57130b0 <col:54, line:99:5>
|   `-ReturnStmt 0x5636a57130a0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x5636a5713088 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x5636a5713058 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5636a5709b38
|         `-CXXThisExpr 0x5636a5713048 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5636a56f99f8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5636a56f9908 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x5636a5713160 <col:67, line:103:5>
|   `-BinaryOperator 0x5636a5713140 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5636a57130d8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5636a5709b38
|     | `-CXXThisExpr 0x5636a57130c8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5636a5713128 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x5636a5713108 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5636a56f9908 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5636a56f9af0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5636a57131e0 <col:33, line:107:5>
|   `-ReturnStmt 0x5636a57131d0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5636a57131b8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5636a5713188 <col:16> 'void *' lvalue ->_destructor_argument 0x5636a5709ba0
|         `-CXXThisExpr 0x5636a5713178 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5636a56f9bb0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5636a5713810 <col:25, line:113:5>
|   |-ParenExpr 0x5636a5713558 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5636a5713528 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x5636a5713298 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5636a5713270 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x5636a5713238 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x5636a5713208 <col:24> '<bound member function type>' ->shared 0x5636a56f8c28
|   |   |       `-ImplicitCastExpr 0x5636a5713258 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x5636a57131f8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5636a57132f8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5636a57132d8 <col:42> 'int' 0
|   |   `-CallExpr 0x5636a5713488 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x5636a5713470 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5636a5713450 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5636a526ab20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5636a57134c8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636a5713368 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5636a57134e0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636a5713390 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5636a57134f8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5636a57133c8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5636a5713510 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5636a5713438 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5636a5713420 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5636a57133e8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x5636a5713758 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x5636a5713588 <col:2> 'unsigned char *' lvalue ->_head 0x5636a5709940
|   | | `-CXXThisExpr 0x5636a5713578 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x5636a5713740 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5636a5713720 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x5636a57135c8 <col:10> 'unsigned char *' lvalue ->_data 0x5636a57099a8
|   |     | `-CXXThisExpr 0x5636a57135b8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x5636a5713708 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x5636a57136e8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x5636a5713608 <col:18> 'unsigned char *' lvalue ->_tail 0x5636a5709a10
|   |         | `-CXXThisExpr 0x5636a57135f8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x5636a57136d0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x5636a57136b0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x5636a5713648 <col:26> 'unsigned char *' lvalue ->_end 0x5636a5709a78
|   |             | `-CXXThisExpr 0x5636a5713638 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x5636a5713698 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x5636a5713678 <col:33> 'int' 0
|   `-BinaryOperator 0x5636a57137f0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5636a5713788 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5636a5709b38
|     | `-CXXThisExpr 0x5636a5713778 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5636a57137d8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x5636a57137b8 <col:16> 'int' 0
|-CXXMethodDecl 0x5636a56f9cf0 <line:141:5, col:109> col:56 used push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5636a56f9c60 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5636a56f9d98 <col:20>
| |-OptimizeNoneAttr 0x5636a56f9df0 <col:30>
| `-WarnUnusedResultAttr 0x5636a56f9e18 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5636a56f9ee8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5636a56f9e58 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5636a56f9f90 <col:20>
| |-OptimizeNoneAttr 0x5636a56f9fe8 <col:30>
| `-WarnUnusedResultAttr 0x5636a56fa010 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5636a56fa148 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5636a56fa050 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5636a56fa1f0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5636a56fa2f0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5636a56fa260 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5636a56fa398 <col:20>
| `-OptimizeNoneAttr 0x5636a56fa3f0 <col:30>
|-CXXMethodDecl 0x5636a56fa4b8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5636a56fa428 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5636a56fa560 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5636a56fa660 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5636a56fa5d0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5636a56fa708 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5636a56fa808 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x5636a56fa778 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5636a56fa8b0 <col:20>
| `-OptimizeNoneAttr 0x5636a56fa908 <col:30>
|-CXXMethodDecl 0x5636a56faa98 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5636a56fa948 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5636a56fa9c0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5636a5713008 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5636a56fab48 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5636a56fad48 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5636a56fabc0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5636a56fac38 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636a56faf58 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5636a56fae08 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5636a56fae80 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636a56fb168 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5636a56fb018 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5636a56fb098 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x5636a5713018 <col:39> 'int' 0
|-CXXMethodDecl 0x5636a56fb238 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5636a56fb300 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5636a56fb3c8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5636a56fb488 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5636a56fb550 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5636a56fb698 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5636a56fb608 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5636a56fb868 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5636a56fb758 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5636a56fb7d0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636a56fb938 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5636a56fb9f8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x5636a56fba98 <col:20>
| `-OptimizeNoneAttr 0x5636a56fbaf0 <col:30>
|-CXXMethodDecl 0x5636a56fbb40 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5636a56fbbe0 <col:20>
| `-OptimizeNoneAttr 0x5636a56fbc38 <col:30>
|-CXXMethodDecl 0x5636a56fbc88 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5636a56fbd48 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5636a56fbe10 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x5636a56fbeb0 <col:20>
| `-OptimizeNoneAttr 0x5636a56fbf08 <col:30>
|-CXXMethodDecl 0x5636a56fc058 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5636a56fbf48 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5636a56fbfc0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636a56fc1a8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5636a56fc118 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636a56fc280 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5636a56fc340 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x5636a56fc3e0 <col:20>
| `-OptimizeNoneAttr 0x5636a56fc438 <col:30>
|-CXXMethodDecl 0x5636a56fc488 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5636a56fc528 <col:20>
| `-OptimizeNoneAttr 0x5636a56fc580 <col:30>
|-CXXMethodDecl 0x5636a56fc5d0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5636a56fc698 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x5636a56fc738 <col:20>
| `-OptimizeNoneAttr 0x5636a56fc790 <col:30>
|-CXXMethodDecl 0x5636a56fc7d8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5636a56fc8f8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5636a56fca68 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5636a56fc9a8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5636a56fcb58 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5636a56fcbf8 <col:20>
| `-OptimizeNoneAttr 0x5636a56fcc50 <col:30>
|-CXXMethodDecl 0x5636a56fcca0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5636a56fcd60 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5636a56fcf98 <line:310:5, col:92> col:45 used set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5636a56fce10 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5636a56fce88 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5636a56fd048 <col:20>
| `-OptimizeNoneAttr 0x5636a56fd0a0 <col:30>
|-CXXMethodDecl 0x5636a56fd148 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5636a56fd1e8 <col:20>
| `-OptimizeNoneAttr 0x5636a56fd240 <col:30>
|-CXXMethodDecl 0x5636a56fd290 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5636a56fd330 <col:20>
| `-OptimizeNoneAttr 0x5636a56fd388 <col:30>
|-CXXMethodDecl 0x5636a56fd3d0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5636a56fd470 <col:20>
| `-OptimizeNoneAttr 0x5636a56fd4c8 <col:30>
|-CXXMethodDecl 0x5636a56fd5c8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5636a56fd500 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5636a56fd670 <col:20>
| `-OptimizeNoneAttr 0x5636a56fd6c8 <col:30>
|-CXXMethodDecl 0x5636a56fd888 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5636a56fd700 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5636a56fd778 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5636a56fd938 <col:20>
| `-OptimizeNoneAttr 0x5636a56fd990 <col:30>
|-CXXMethodDecl 0x5636a56fda38 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5636a56fdb58 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5636a56fdc78 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5636a56fdd18 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5636a56fdd40 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5636a56fde68 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5636a56fdf08 <col:20>
| `-OptimizeNoneAttr 0x5636a56fdf60 <col:30>
|-CXXMethodDecl 0x5636a56fe008 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5636a56fe0a8 <col:20>
| `-OptimizeNoneAttr 0x5636a56fe100 <col:30>
|-AccessSpecDecl 0x5636a56fe128 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5636a56fe150 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5636a56fe250 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5636a56fe2a0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5636a56fe230 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5636a56fe210 <col:14> 'int' 48
|-CXXMethodDecl 0x5636a56fe308 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5636a56fe3a8 <col:20>
| `-OptimizeNoneAttr 0x5636a56fe400 <col:30>
|-CXXMethodDecl 0x5636a56fe478 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5636a56fe518 <col:20>
| `-OptimizeNoneAttr 0x5636a56fe570 <col:30>
|-CXXMethodDecl 0x5636a56fe638 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5636a56fe5a8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5636a56fe7d8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5636a56fe978 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5636a56fe888 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5636a56fea20 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5636a56feb20 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5636a56feed0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a56feb00 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5636a56feae0 <col:9> 'int' 0
| |-EnumConstantDecl 0x5636a56febb0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5636a56feee8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a56feb90 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5636a56feb70 <col:14> 'int' 1
| |-EnumConstantDecl 0x5636a56fec40 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5636a56fef00 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a56fec20 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5636a56fec00 <col:14> 'int' 2
| |-EnumConstantDecl 0x5636a56fecd0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5636a56fef18 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a56fecb0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5636a56fec90 <col:14> 'int' 3
| |-EnumConstantDecl 0x5636a56fed60 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5636a56fef30 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a56fed40 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5636a56fed20 <col:13> 'int' 4
| |-EnumConstantDecl 0x5636a56fedf0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5636a56fef48 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a56fedd0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5636a56fedb0 <col:13> 'int' 5
| `-EnumConstantDecl 0x5636a56fee80 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5636a56fef60 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5636a56fee60 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5636a56fee40 <col:14> 'int' 6
|-CXXMethodDecl 0x5636a56fefc8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5636a56ff068 <col:20>
| `-OptimizeNoneAttr 0x5636a56ff0c0 <col:30>
|-CXXMethodDecl 0x5636a56ff1b8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5636a56ff0f8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5636a56ff260 <col:20>
| `-OptimizeNoneAttr 0x5636a56ff2b8 <col:30>
|-CXXMethodDecl 0x5636a56ff328 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5636a56ff450 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5636a56ff5c8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5636a56ff500 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5636a56ff690 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5636a56ff758 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5636a56ff898 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5636a56ff808 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5636a56ff940 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5636a56ffa40 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5636a56ffc40 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a56ffa20 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5636a56ffa00 <col:23> 'int' 0
| |-EnumConstantDecl 0x5636a56ffad0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5636a56ffc58 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a56ffab0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5636a56ffa90 <col:45> 'int' 4
| |-EnumConstantDecl 0x5636a56ffb60 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5636a56ffc70 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a56ffb40 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5636a56ffb20 <col:24> 'int' 0
| `-EnumConstantDecl 0x5636a56ffbf0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5636a56ffc88 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5636a56ffbd0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5636a56ffbb0 <col:47> 'int' 16
|-CXXMethodDecl 0x5636a56ffce8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5636a56ffe58 <line:436:5, col:75> col:45 used set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5636a56ffd98 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5636a56fff00 <col:20>
| `-OptimizeNoneAttr 0x5636a56fff58 <col:30>
|-CXXMethodDecl 0x5636a56fffa8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x5636a5713930 <col:18, col:36>
|   `-ReturnStmt 0x5636a5713920 <col:20, col:33>
|     `-ImplicitCastExpr 0x5636a5713908 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x5636a57138e8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x5636a57138b8 <col:27> '<bound member function type>' ->xanno 0x5636a56fe008
|           `-CXXThisExpr 0x5636a57138a8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5636a57000a0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x5636a5713a40 <col:30, col:48>
|   `-ReturnStmt 0x5636a5713a30 <col:32, col:45>
|     `-ImplicitCastExpr 0x5636a5713a18 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x5636a57139f8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x5636a57139c8 <col:39> '<bound member function type>' ->xanno 0x5636a56fde68
|           `-CXXThisExpr 0x5636a57139b8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5636a5700188 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x5636a5713bd8 <col:24, col:50>
|   `-ReturnStmt 0x5636a5713bc8 <col:26, col:47>
|     `-UnaryOperator 0x5636a5713bb0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5636a5713b90 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x5636a5713b78 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5636a5713b28 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5636a5708e48
|         |   `-CXXMemberCallExpr 0x5636a5713b08 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x5636a5713ad8 <col:34> '<bound member function type>' ->xanno 0x5636a56fe008
|         |       `-CXXThisExpr 0x5636a5713ac8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x5636a5713b58 <col:46> 'int' 0
|-CXXMethodDecl 0x5636a5700290 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x5636a5713da8 <col:36, col:62>
|   `-ReturnStmt 0x5636a5713d98 <col:38, col:59>
|     `-UnaryOperator 0x5636a5713d80 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5636a5713d60 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5636a5713d48 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5636a5713cc0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5636a5708e48
|         |   `-CXXMemberCallExpr 0x5636a5713ca0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5636a5713c70 <col:46> '<bound member function type>' ->xanno 0x5636a56fde68
|         |       `-CXXThisExpr 0x5636a5713c60 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5636a5713cf0 <col:58> 'int' 0
|-CXXMethodDecl 0x5636a57003a8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x5636a5713f40 <col:26, col:53>
|   `-ReturnStmt 0x5636a5713f30 <col:28, col:50>
|     `-UnaryOperator 0x5636a5713f18 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5636a5713ef8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x5636a5713ee0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5636a5713e90 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5636a5709148
|         |   `-CXXMemberCallExpr 0x5636a5713e70 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x5636a5713e40 <col:36> '<bound member function type>' ->xanno 0x5636a56fe008
|         |       `-CXXThisExpr 0x5636a5713e30 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5636a5713ec0 <col:49> 'int' 0
|-CXXMethodDecl 0x5636a57004c8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x5636a5714118 <col:38, col:65>
|   `-ReturnStmt 0x5636a5714108 <col:40, col:62>
|     `-UnaryOperator 0x5636a57140f0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5636a57140d0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5636a57140b8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5636a5714028 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5636a5709148
|         |   `-CXXMemberCallExpr 0x5636a5714008 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5636a5713fd8 <col:48> '<bound member function type>' ->xanno 0x5636a56fde68
|         |       `-CXXThisExpr 0x5636a5713fc8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5636a5714058 <col:61> 'int' 0
|-CXXMethodDecl 0x5636a5700678 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5636a5700580 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x5636a57147e8 <col:34, line:463:5>
|   |-ParenExpr 0x5636a5714630 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x5636a5714600 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5636a5714268 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5636a5714238 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5636a5714188 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5636a5714170 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5636a5714130 <col:23> 'int' lvalue ParmVar 0x5636a5700580 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5636a5714150 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5636a5714218 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5636a57141e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5636a57141a8 <col:33> 'int' lvalue ParmVar 0x5636a5700580 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5636a5714200 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5636a57141c8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5636a56fe250 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5636a57142c8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5636a57142a8 <col:56> 'int' 0
|   |   `-CallExpr 0x5636a5714560 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5636a5714548 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5636a5714528 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5636a526ab20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5636a57145a0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636a57143b8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5636a57145b8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636a57143e8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5636a57145d0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5636a5714420 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x5636a57145e8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5636a5714510 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5636a57144f8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5636a57144b8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x5636a57147d8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x5636a57147c0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x5636a57147a0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5636a5714770 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5636a5714720 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5636a5708e48
|         |   `-CXXMemberCallExpr 0x5636a5714700 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5636a57146d0 <col:9> '<bound member function type>' ->xanno 0x5636a56fde68
|         |       `-CXXThisExpr 0x5636a57146c0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x5636a5714788 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5636a5714750 <col:21> 'int' lvalue ParmVar 0x5636a5700580 'i' 'int'
|-CXXMethodDecl 0x5636a57008c8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5636a5700738 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5636a57007b0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x5636a5714e78 <col:40, line:472:5>
|   |-ParenExpr 0x5636a5714c90 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x5636a5714c60 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5636a5714940 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5636a5714910 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5636a5714860 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5636a5714848 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5636a5714808 <col:23> 'int' lvalue ParmVar 0x5636a5700738 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5636a5714828 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5636a57148f0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5636a57148c0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5636a5714880 <col:33> 'int' lvalue ParmVar 0x5636a5700738 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5636a57148d8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5636a57148a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5636a56fe250 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5636a57149a0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5636a5714980 <col:56> 'int' 0
|   |   `-CallExpr 0x5636a5714bc0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5636a5714ba8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5636a5714b88 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5636a526ab20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5636a5714c00 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636a5714a10 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5636a5714c18 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636a5714a40 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5636a5714c30 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5636a5714a78 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x5636a5714c48 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5636a5714b70 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5636a5714b58 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5636a5714b18 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x5636a5714e58 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x5636a5714e00 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x5636a5714dd0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5636a5714d80 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5636a5708e48
|     | |   `-CXXMemberCallExpr 0x5636a5714d60 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x5636a5714d30 <col:2> '<bound member function type>' ->xanno 0x5636a56fe008
|     | |       `-CXXThisExpr 0x5636a5714d20 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x5636a5714de8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5636a5714db0 <col:14> 'int' lvalue ParmVar 0x5636a5700738 'i' 'int'
|     `-ImplicitCastExpr 0x5636a5714e40 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x5636a5714e20 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5636a57007b0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5636a5700a88 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5636a5700990 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5636a57155f8 <col:36, line:485:5>
|   |-ParenExpr 0x5636a5715360 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x5636a5715330 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5636a5715010 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5636a5714fe0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5636a5714ef0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5636a5714ed8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5636a5714e98 <col:23> 'int' lvalue ParmVar 0x5636a5700990 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5636a5714eb8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5636a5714fc0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5636a5714fa8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5636a5714f10 <col:33> 'int' lvalue ParmVar 0x5636a5700990 'i' 'int'
|   |   |     `-BinaryOperator 0x5636a5714f88 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5636a5714f70 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5636a5714f30 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5636a56fe250 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5636a5714f50 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5636a5715070 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5636a5715050 <col:60> 'int' 0
|   |   `-CallExpr 0x5636a5715290 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5636a5715278 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5636a5715258 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5636a526ab20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5636a57152d0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636a57150e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5636a57152e8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636a5715118 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5636a5715300 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5636a5715150 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x5636a5715318 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5636a5715240 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5636a5715228 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5636a57151e8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x5636a57155e8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x5636a57155d0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x5636a57155b8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5636a5715588 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x5636a5715528 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5636a57154f8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5636a5715470 <col:61, col:70> 'char const[48]' lvalue ->c 0x5636a5708d20
|             |   `-CXXMemberCallExpr 0x5636a5715450 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5636a5715420 <col:61> '<bound member function type>' ->xanno 0x5636a56fde68
|             |       `-CXXThisExpr 0x5636a5715410 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5636a5715510 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5636a57154a0 <col:74> 'int' lvalue ParmVar 0x5636a5700990 'i' 'int'
|-CXXMethodDecl 0x5636a5700cd8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5636a5700b48 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5636a5700bc0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5636a5715d48 <col:42, line:500:5>
|   |-ParenExpr 0x5636a5715ae0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x5636a5715ab0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5636a5715790 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5636a5715760 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5636a5715670 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5636a5715658 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5636a5715618 <col:23> 'int' lvalue ParmVar 0x5636a5700b48 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5636a5715638 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5636a5715740 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5636a5715728 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5636a5715690 <col:33> 'int' lvalue ParmVar 0x5636a5700b48 'i' 'int'
|   |   |     `-BinaryOperator 0x5636a5715708 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5636a57156f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5636a57156b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5636a56fe250 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5636a57156d0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5636a57157f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5636a57157d0 <col:60> 'int' 0
|   |   `-CallExpr 0x5636a5715a10 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5636a57159f8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5636a57159d8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5636a526ab20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5636a5715a50 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636a5715860 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5636a5715a68 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636a5715898 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5636a5715a80 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5636a57158d0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x5636a5715a98 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5636a57159c0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5636a57159a8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5636a5715968 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x5636a5715d28 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x5636a5715cd8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5636a5715ca8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x5636a5715c50 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5636a5715c20 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5636a5715bd0 <col:48, col:57> 'char [48]' lvalue ->c 0x5636a5708d20
|     |     |   `-CXXMemberCallExpr 0x5636a5715bb0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5636a5715b80 <col:48> '<bound member function type>' ->xanno 0x5636a56fe008
|     |     |       `-CXXThisExpr 0x5636a5715b70 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5636a5715c38 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5636a5715c00 <col:61> 'int' lvalue ParmVar 0x5636a5700b48 'i' 'int'
|     `-ImplicitCastExpr 0x5636a5715d10 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5636a5715cf0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5636a5700bc0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5636a5700e98 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5636a5700da0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5636a57164a8 <col:35, line:513:5>
|   |-ParenExpr 0x5636a57161b8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x5636a5716188 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5636a5715ee0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5636a5715eb0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5636a5715dc0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5636a5715da8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5636a5715d68 <col:23> 'int' lvalue ParmVar 0x5636a5700da0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5636a5715d88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5636a5715e90 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5636a5715e78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5636a5715de0 <col:33> 'int' lvalue ParmVar 0x5636a5700da0 'i' 'int'
|   |   |     `-BinaryOperator 0x5636a5715e58 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5636a5715e40 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5636a5715e00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5636a56fe250 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5636a5715e20 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5636a5715f40 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5636a5715f20 <col:60> 'int' 0
|   |   `-CallExpr 0x5636a57160e8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5636a57160d0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5636a57160b0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5636a526ab20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5636a5716128 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636a5715fb0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5636a5716140 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636a5715fe8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5636a5716158 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5636a5716020 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x5636a5716170 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5636a5716098 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5636a5716080 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5636a5716040 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x5636a5716498 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x5636a5716480 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x5636a5716468 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5636a5716438 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x5636a57163b0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5636a5716380 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5636a5716330 <col:60, col:69> 'char const[48]' lvalue ->c 0x5636a5708d20
|             |   `-CXXMemberCallExpr 0x5636a5716310 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5636a57162e0 <col:60> '<bound member function type>' ->xanno 0x5636a56fde68
|             |       `-CXXThisExpr 0x5636a57162d0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5636a5716398 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5636a5716360 <col:73> 'int' lvalue ParmVar 0x5636a5700da0 'i' 'int'
|-CXXMethodDecl 0x5636a57010e8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5636a5700f58 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5636a5700fd0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x5636a5716bc8 <col:41, line:528:5>
|   |-ParenExpr 0x5636a5716950 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x5636a5716920 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5636a5716640 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5636a5716610 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5636a5716520 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5636a5716508 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5636a57164c8 <col:23> 'int' lvalue ParmVar 0x5636a5700f58 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5636a57164e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5636a57165f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5636a57165d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5636a5716540 <col:33> 'int' lvalue ParmVar 0x5636a5700f58 'i' 'int'
|   |   |     `-BinaryOperator 0x5636a57165b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5636a57165a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5636a5716560 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5636a56fe250 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5636a5716580 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5636a57166a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5636a5716680 <col:60> 'int' 0
|   |   `-CallExpr 0x5636a5716880 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5636a5716868 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5636a5716848 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5636a526ab20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5636a57168c0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636a5716710 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5636a57168d8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636a5716748 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5636a57168f0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5636a5716780 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x5636a5716908 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5636a5716830 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5636a5716818 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5636a57167d8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x5636a5716ba8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x5636a5716b58 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5636a5716b28 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x5636a5716ad0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5636a5716a90 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5636a5716a40 <col:47, col:56> 'char [48]' lvalue ->c 0x5636a5708d20
|     |     |   `-CXXMemberCallExpr 0x5636a5716a20 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5636a57169f0 <col:47> '<bound member function type>' ->xanno 0x5636a56fe008
|     |     |       `-CXXThisExpr 0x5636a57169e0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5636a5716aa8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5636a5716a70 <col:60> 'int' lvalue ParmVar 0x5636a5700f58 'i' 'int'
|     `-ImplicitCastExpr 0x5636a5716b90 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x5636a5716b70 <col:65> 'int16_t':'short' lvalue ParmVar 0x5636a5700fd0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5636a57012a8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5636a57011b0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5636a5717298 <col:36, line:541:5>
|   |-ParenExpr 0x5636a5717038 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x5636a5717008 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5636a5716d60 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5636a5716d30 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5636a5716c40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5636a5716c28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5636a5716be8 <col:23> 'int' lvalue ParmVar 0x5636a57011b0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5636a5716c08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5636a5716d10 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5636a5716cf8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5636a5716c60 <col:33> 'int' lvalue ParmVar 0x5636a57011b0 'i' 'int'
|   |   |     `-BinaryOperator 0x5636a5716cd8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5636a5716cc0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5636a5716c80 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5636a56fe250 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5636a5716ca0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5636a5716dc0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5636a5716da0 <col:60> 'int' 0
|   |   `-CallExpr 0x5636a5716f68 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5636a5716f50 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5636a5716f30 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5636a526ab20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5636a5716fa8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636a5716e30 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5636a5716fc0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636a5716e68 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5636a5716fd8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5636a5716ea0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x5636a5716ff0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5636a5716f18 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5636a5716f00 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5636a5716ec0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x5636a5717288 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x5636a5717270 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5636a5717258 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5636a5717228 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x5636a57171d0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5636a57171a0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5636a5717150 <col:61, col:70> 'char const[48]' lvalue ->c 0x5636a5708d20
|             |   `-CXXMemberCallExpr 0x5636a5717130 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5636a5717100 <col:61> '<bound member function type>' ->xanno 0x5636a56fde68
|             |       `-CXXThisExpr 0x5636a57170f0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5636a57171b8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5636a5717180 <col:74> 'int' lvalue ParmVar 0x5636a57011b0 'i' 'int'
|-CXXMethodDecl 0x5636a5701478 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5636a5701368 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5636a57013e0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5636a5701528 <col:20>
| `-OptimizeNoneAttr 0x5636a5701580 <col:30>
|-CXXMethodDecl 0x5636a57016b8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5636a57015c0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5636a5717968 <col:35, line:562:5>
|   |-ParenExpr 0x5636a5717708 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x5636a57176d8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5636a5717430 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5636a5717400 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5636a5717310 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5636a57172f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5636a57172b8 <col:23> 'int' lvalue ParmVar 0x5636a57015c0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5636a57172d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5636a57173e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5636a57173c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5636a5717330 <col:33> 'int' lvalue ParmVar 0x5636a57015c0 'i' 'int'
|   |   |     `-BinaryOperator 0x5636a57173a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5636a5717390 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5636a5717350 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5636a56fe250 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5636a5717370 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5636a5717490 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5636a5717470 <col:60> 'int' 0
|   |   `-CallExpr 0x5636a5717638 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5636a5717620 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5636a5717600 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5636a526ab20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5636a5717678 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636a5717500 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5636a5717690 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636a5717538 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5636a57176a8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5636a5717570 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x5636a57176c0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5636a57175e8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5636a57175d0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5636a5717590 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x5636a5717958 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x5636a5717940 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x5636a5717928 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5636a57178f8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x5636a57178a0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5636a5717870 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5636a5717820 <col:60, col:69> 'char const[48]' lvalue ->c 0x5636a5708d20
|             |   `-CXXMemberCallExpr 0x5636a5717800 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5636a57177d0 <col:60> '<bound member function type>' ->xanno 0x5636a56fde68
|             |       `-CXXThisExpr 0x5636a57177c0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5636a5717888 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5636a5717850 <col:73> 'int' lvalue ParmVar 0x5636a57015c0 'i' 'int'
|-CXXMethodDecl 0x5636a57018c8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5636a5701778 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5636a57017f0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x5636a5718048 <col:41, line:577:5>
|   |-ParenExpr 0x5636a5717dd8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x5636a5717da8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5636a5717b00 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5636a5717ad0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5636a57179e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5636a57179c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5636a5717988 <col:23> 'int' lvalue ParmVar 0x5636a5701778 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5636a57179a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5636a5717ab0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5636a5717a98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5636a5717a00 <col:33> 'int' lvalue ParmVar 0x5636a5701778 'i' 'int'
|   |   |     `-BinaryOperator 0x5636a5717a78 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5636a5717a60 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5636a5717a20 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5636a56fe250 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5636a5717a40 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5636a5717b60 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5636a5717b40 <col:60> 'int' 0
|   |   `-CallExpr 0x5636a5717d08 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5636a5717cf0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5636a5717cd0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5636a526ab20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5636a5717d48 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636a5717bd0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5636a5717d60 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636a5717c08 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5636a5717d78 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5636a5717c40 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x5636a5717d90 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5636a5717cb8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5636a5717ca0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5636a5717c60 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x5636a5718028 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x5636a5717fd8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5636a5717fa8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x5636a5717f48 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5636a5717f18 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5636a5717ec8 <col:47, col:56> 'char [48]' lvalue ->c 0x5636a5708d20
|     |     |   `-CXXMemberCallExpr 0x5636a5717ea8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5636a5717e78 <col:47> '<bound member function type>' ->xanno 0x5636a56fe008
|     |     |       `-CXXThisExpr 0x5636a5717e68 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5636a5717f30 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5636a5717ef8 <col:60> 'int' lvalue ParmVar 0x5636a5701778 'i' 'int'
|     `-ImplicitCastExpr 0x5636a5718010 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5636a5717ff0 <col:65> 'int32_t':'int' lvalue ParmVar 0x5636a57017f0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5636a5701a88 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5636a5701990 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5636a5718778 <col:36, line:591:5>
|   |-ParenExpr 0x5636a57184b8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x5636a5718488 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5636a57181e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5636a57181b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5636a57180c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5636a57180a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5636a5718068 <col:23> 'int' lvalue ParmVar 0x5636a5701990 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5636a5718088 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5636a5718190 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5636a5718178 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5636a57180e0 <col:33> 'int' lvalue ParmVar 0x5636a5701990 'i' 'int'
|   |   |     `-BinaryOperator 0x5636a5718158 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5636a5718140 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5636a5718100 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5636a56fe250 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5636a5718120 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5636a5718240 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5636a5718220 <col:60> 'int' 0
|   |   `-CallExpr 0x5636a57183e8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5636a57183d0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5636a57183b0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5636a526ab20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5636a5718428 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636a57182b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5636a5718440 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636a57182e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5636a5718458 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5636a5718320 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x5636a5718470 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5636a5718398 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5636a5718380 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5636a5718340 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x5636a5718768 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x5636a5718750 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x5636a5718738 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5636a5718708 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x5636a5718680 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5636a5718650 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5636a5718600 <col:61, col:70> 'char const[48]' lvalue ->c 0x5636a5708d20
|             |   `-CXXMemberCallExpr 0x5636a57185e0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5636a57185b0 <col:61> '<bound member function type>' ->xanno 0x5636a56fde68
|             |       `-CXXThisExpr 0x5636a57185a0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5636a5718668 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5636a5718630 <col:74> 'int' lvalue ParmVar 0x5636a5701990 'i' 'int'
|-CXXMethodDecl 0x5636a5701cd8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5636a5701b48 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5636a5701bc0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x5636a5718e58 <col:42, line:606:5>
|   |-ParenExpr 0x5636a5718be8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x5636a5718bb8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5636a5718910 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5636a57188e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5636a57187f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5636a57187d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5636a5718798 <col:23> 'int' lvalue ParmVar 0x5636a5701b48 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5636a57187b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5636a57188c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5636a57188a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5636a5718810 <col:33> 'int' lvalue ParmVar 0x5636a5701b48 'i' 'int'
|   |   |     `-BinaryOperator 0x5636a5718888 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5636a5718870 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5636a5718830 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5636a56fe250 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5636a5718850 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5636a5718970 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5636a5718950 <col:60> 'int' 0
|   |   `-CallExpr 0x5636a5718b18 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5636a5718b00 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5636a5718ae0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5636a526ab20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5636a5718b58 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636a57189e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5636a5718b70 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636a5718a18 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5636a5718b88 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5636a5718a50 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x5636a5718ba0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5636a5718ac8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5636a5718ab0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5636a5718a70 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x5636a5718e38 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x5636a5718de8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5636a5718db8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x5636a5718d58 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5636a5718d28 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5636a5718cd8 <col:48, col:57> 'char [48]' lvalue ->c 0x5636a5708d20
|     |     |   `-CXXMemberCallExpr 0x5636a5718cb8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5636a5718c88 <col:48> '<bound member function type>' ->xanno 0x5636a56fe008
|     |     |       `-CXXThisExpr 0x5636a5718c78 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5636a5718d40 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5636a5718d08 <col:61> 'int' lvalue ParmVar 0x5636a5701b48 'i' 'int'
|     `-ImplicitCastExpr 0x5636a5718e20 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5636a5718e00 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5636a5701bc0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5636a5701e70 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5636a5701da0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x5636a57196c8 <col:33, line:620:5>
|   |-ParenExpr 0x5636a5719440 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x5636a5719410 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5636a5719060 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5636a5719030 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5636a5718ed0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5636a5718eb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5636a5718e78 <col:23> 'int' lvalue ParmVar 0x5636a5701da0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5636a5718e98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5636a5719010 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5636a5718ff8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5636a5718ef0 <col:33> 'int' lvalue ParmVar 0x5636a5701da0 'i' 'int'
|   |   |     `-BinaryOperator 0x5636a5718fd8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5636a5718fc0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5636a5718f10 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5636a56fe250 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5636a5718f98 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5636a5718f80 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5636a5718f48 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5636a57190c0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5636a57190a0 <col:79> 'int' 0
|   |   `-CallExpr 0x5636a5719370 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5636a5719358 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5636a5719338 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5636a526ab20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5636a57193b0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636a57191a8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5636a57193c8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636a57191f0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5636a57193e0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5636a5719228 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x5636a57193f8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5636a5719320 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5636a5719308 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5636a57192c8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x5636a57196b8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x5636a57196a0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x5636a5719688 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5636a5719658 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x5636a57195d0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x5636a57195a0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5636a5719550 <col:67, col:76> 'char const[48]' lvalue ->c 0x5636a5708d20
|             |   `-CXXMemberCallExpr 0x5636a5719530 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5636a5719500 <col:67> '<bound member function type>' ->xanno 0x5636a56fde68
|             |       `-CXXThisExpr 0x5636a57194f0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5636a57195b8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5636a5719580 <col:80> 'int' lvalue ParmVar 0x5636a5701da0 'i' 'int'
|-CXXMethodDecl 0x5636a5702088 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5636a5701f30 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5636a5701fb0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x5636a5719ef0 <col:45, line:635:5>
|   |-ParenExpr 0x5636a5719c38 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x5636a5719c08 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5636a57198d0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5636a57198a0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5636a5719740 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5636a5719728 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5636a57196e8 <col:23> 'int' lvalue ParmVar 0x5636a5701f30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5636a5719708 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5636a5719880 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5636a5719868 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5636a5719760 <col:33> 'int' lvalue ParmVar 0x5636a5701f30 'i' 'int'
|   |   |     `-BinaryOperator 0x5636a5719848 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5636a5719830 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5636a5719780 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5636a56fe250 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5636a5719808 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5636a57197f0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5636a57197b8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5636a5719930 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5636a5719910 <col:79> 'int' 0
|   |   `-CallExpr 0x5636a5719b68 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5636a5719b50 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5636a5719b30 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5636a526ab20 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5636a5719ba8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636a57199a0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5636a5719bc0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636a57199e8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5636a5719bd8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5636a5719a20 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x5636a5719bf0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5636a5719b18 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5636a5719b00 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5636a5719ab8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x5636a5719ed0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x5636a5719e38 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5636a5719e08 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x5636a5719da8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5636a5719d78 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5636a5719d28 <col:54, col:63> 'char [48]' lvalue ->c 0x5636a5708d20
|     |     |   `-CXXMemberCallExpr 0x5636a5719d08 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5636a5719cd8 <col:54> '<bound member function type>' ->xanno 0x5636a56fe008
|     |     |       `-CXXThisExpr 0x5636a5719cc8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5636a5719d90 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5636a5719d58 <col:67> 'int' lvalue ParmVar 0x5636a5701f30 'i' 'int'
|     `-CXXConstCastExpr 0x5636a5719ea0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x5636a5719e88 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5636a5719e50 <col:91> 'const void *' lvalue ParmVar 0x5636a5701fb0 'x' 'const void *'
|-CXXMethodDecl 0x5636a5702158 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x5636a5719f78 <col:34, line:640:5>
|   `-ReturnStmt 0x5636a5719f68 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x5636a5719f50 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x5636a5719f20 <col:16> 'Packet *' lvalue ->_data_packet 0x5636a57098d8
|         `-CXXThisExpr 0x5636a5719f10 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5636a5702298 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5636a5702208 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5636a5713038 <col:46> 'bool' true
|-CXXMethodDecl 0x5636a5702418 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5636a5702350 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5636a57024c0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5636a5702c70 <line:660:22> "" ""
| |-EnumConstantDecl 0x5636a57025c0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5636a5702ce0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a57025a0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5636a5702580 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5636a56f7720 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5636a5702650 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5636a5702cf8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a5702630 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5636a5702610 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5636a56f77b0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5636a57026e0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5636a5702d10 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a57026c0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5636a57026a0 <col:21> 'int' 0
| |-EnumConstantDecl 0x5636a5702770 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5636a5702d28 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a5702750 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5636a5702730 <col:19> 'int' 16
| |-EnumConstantDecl 0x5636a5702800 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5636a5702d40 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a57027e0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5636a57027c0 <col:21> 'int' 16
| |-EnumConstantDecl 0x5636a5702890 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5636a5702d58 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a5702870 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5636a5702850 <col:19> 'int' 32
| |-EnumConstantDecl 0x5636a5702920 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5636a5702d70 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a5702900 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5636a57028e0 <col:19> 'int' EnumConstant 0x5636a5702770 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5636a57029b0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5636a5702d88 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a5702990 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5636a5702970 <col:19> 'int' EnumConstant 0x5636a5702890 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5636a5702a80 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5636a5702da0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a5702a60 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5636a5702a40 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5636a5702a00 <col:23> 'int' EnumConstant 0x5636a57029b0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5636a5702a20 <col:40> 'int' 2
| |-EnumConstantDecl 0x5636a5702b50 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5636a5702db8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a5702b30 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5636a5702b10 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5636a5702ad0 <col:23> 'int' EnumConstant 0x5636a57029b0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5636a5702af0 <col:40> 'int' 4
| `-EnumConstantDecl 0x5636a5702c20 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5636a5702dd0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5636a5702c00 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5636a5702be0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5636a5702ba0 <col:23> 'int' EnumConstant 0x5636a57029b0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5636a5702bc0 <col:40> 'int' 8
|-CXXMethodDecl 0x5636a5702e10 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5636a5702eb0 <col:68> "" ""
|-CXXMethodDecl 0x5636a5702f48 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5636a5702fe8 <col:45> "" ""
|-CXXMethodDecl 0x5636a5703080 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5636a5703120 <col:57> "" ""
|-CXXMethodDecl 0x5636a57031b8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5636a5703258 <col:45> "" ""
|-CXXMethodDecl 0x5636a57032f0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5636a5703390 <col:57> "" ""
|-CXXMethodDecl 0x5636a5703420 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5636a57034c0 <col:51> "" ""
|-CXXMethodDecl 0x5636a5703550 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5636a57035f0 <col:63> "" ""
|-CXXMethodDecl 0x5636a5703680 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5636a5703720 <col:53> "" ""
|-CXXMethodDecl 0x5636a57037b0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5636a5703850 <col:65> "" ""
|-CXXMethodDecl 0x5636a5703968 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5636a57038d8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5636a5703a10 <col:61> "" ""
|-CXXMethodDecl 0x5636a5703ba8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5636a5703a98 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5636a5703b10 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5636a5703c58 <col:67> "" ""
|-CXXMethodDecl 0x5636a5703d70 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5636a5703ce0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5636a5703e18 <col:63> "" ""
|-CXXMethodDecl 0x5636a5703fb0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5636a5703ea0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5636a5703f18 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5636a5704060 <col:69> "" ""
|-CXXMethodDecl 0x5636a5704178 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5636a57040e8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5636a5704220 <col:63> "" ""
|-CXXMethodDecl 0x5636a57068f8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5636a57067e8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5636a5706860 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5636a57069a8 <col:69> "" ""
|-CXXMethodDecl 0x5636a5706ac0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5636a5706a30 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5636a5706b68 <col:62> "" ""
|-CXXMethodDecl 0x5636a5706d00 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5636a5706bf0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5636a5706c68 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5636a5706db0 <col:68> "" ""
|-CXXMethodDecl 0x5636a5706ec8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5636a5706e38 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5636a5706f70 <col:63> "" ""
|-CXXMethodDecl 0x5636a5707108 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5636a5706ff8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5636a5707070 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5636a57071b8 <col:69> "" ""
|-CXXMethodDecl 0x5636a5707248 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5636a57072e8 <col:64> "" ""
|-CXXMethodDecl 0x5636a5707378 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5636a5707418 <col:52> "" ""
|-CXXMethodDecl 0x5636a57074a8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5636a5707548 <col:67> "" ""
|-CXXMethodDecl 0x5636a57075d8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5636a5707678 <col:55> "" ""
|-CXXMethodDecl 0x5636a5707790 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5636a5707700 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5636a5707838 <col:58> "" ""
|-CXXMethodDecl 0x5636a57079d0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5636a57078c0 <col:33> col:36 'int'
| |-ParmVarDecl 0x5636a5707938 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5636a5707a80 <col:62> "" ""
|-CXXMethodDecl 0x5636a5707b98 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5636a5707b08 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5636a5707c40 <col:58> "" ""
|-CXXMethodDecl 0x5636a5707dd8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5636a5707cc8 <col:33> col:36 'int'
| |-ParmVarDecl 0x5636a5707d40 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5636a5707e88 <col:62> "" ""
|-CXXMethodDecl 0x5636a5707fa0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5636a5707f10 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5636a5708048 <col:60> "" ""
|-CXXMethodDecl 0x5636a57081e0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5636a57080d0 <col:34> col:37 'int'
| |-ParmVarDecl 0x5636a5708148 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5636a5708290 <col:64> "" ""
|-CXXMethodDecl 0x5636a57083a8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5636a5708318 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5636a5708450 <col:58> "" ""
|-CXXMethodDecl 0x5636a57085e8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5636a57084d8 <col:33> col:36 'int'
| |-ParmVarDecl 0x5636a5708550 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5636a5708698 <col:62> "" ""
|-CXXMethodDecl 0x5636a57087b0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5636a5708720 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5636a5708858 <col:59> "" ""
|-CXXMethodDecl 0x5636a57089f0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5636a57088e0 <col:33> col:36 'int'
| |-ParmVarDecl 0x5636a5708958 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5636a5708aa0 <col:63> "" ""
|-AccessSpecDecl 0x5636a5708b10 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5636a5708b38 prev 0x5636a56fdd40 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5636a5708c30 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5636a5708d20 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5636a5708e48 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5636a5708fc8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5636a5709148 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5636a57092c8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x5636a571a0f8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5636a571a968 <col:11>
| |-CXXDestructorDecl 0x5636a571a1d0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5636a571a308 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5636a571a308
| | `-ParmVarDecl 0x5636a571a418 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x5636a571a4b8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5636a571a4b8
| | `-ParmVarDecl 0x5636a571a5c8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x5636a571d388 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5636a571d498 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5636a571d718 <col:11>
| |   `-ReturnStmt 0x5636a571d708 <col:11>
| |     `-UnaryOperator 0x5636a571d6f0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5636a571d6e0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x5636a571d508 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5636a571d508
|   `-ParmVarDecl 0x5636a571d618 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5636a5709330 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5636a5709448 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5636a57094e8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5636a5709550 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5636a57095b8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5636a5709620 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5636a5709680 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5636a5709740 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5636a57097a0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5636a5709800 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x5636a571a008 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5636a57094e8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x5636a571a978 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x5636a571a9d0 <col:12>
| |-CXXConstructorDecl 0x5636a571a638 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5636a571a638
| | `-ParmVarDecl 0x5636a571a748 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x5636a571a7e8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5636a571a7e8
| | `-ParmVarDecl 0x5636a571a8f8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x5636a571ca70 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5636a5709878 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5636a57098d8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5636a5709940 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5636a57099a8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5636a5709a10 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5636a5709a78 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5636a5709ad8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5636a5709b38 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5636a5709ba0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5636a5709c28 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5636a5709878 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x5636a5719fa0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5636a5709ad8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x5636a571a9e0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x5636a571aa40 <col:21, line:755:5>
|-CXXConstructorDecl 0x5636a5709dc8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5636a5709d08 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5636a5709ec0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5636a570a0a8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5636a5709fb0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5636a570a378 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5636a570a160 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5636a570a1d8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5636a570a250 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636a570a598 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5636a570a448 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5636a570a4c0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x5636a5712b78 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5636a570a658 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5636a570a6d0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5636a570a748 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x5636a5712cd0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5636a5712c40 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636a5712e18 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5636a5712d88 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x5636a5712f10 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636a571aae0 prev 0x5636a56f73a0 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x5636a571ac18 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x5636a571aca8 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x5636a571ad50 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x5636a571adf0 <col:20>
| `-OptimizeNoneAttr 0x5636a571ae48 <col:30>
|-CXXMethodDecl 0x5636a571ae98 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x5636a571af38 <col:20>
| `-OptimizeNoneAttr 0x5636a571af90 <col:30>
|-CXXMethodDecl 0x5636a571afe0 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5636a571b0a8 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5636a571b170 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5636a571b288 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x5636a571b350 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x5636a571b3f0 <col:20>
| `-OptimizeNoneAttr 0x5636a571b448 <col:30>
|-CXXMethodDecl 0x5636a571b4b8 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x5636a571b558 <col:20>
| `-OptimizeNoneAttr 0x5636a571b5b0 <col:30>
|-CXXMethodDecl 0x5636a571b658 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x5636a571b6f8 <col:20>
| `-OptimizeNoneAttr 0x5636a571b750 <col:30>
|-CXXMethodDecl 0x5636a571b7a0 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5636a571b8b8 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x5636a571b9d8 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x5636a571baf8 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x5636a571bbc0 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x5636a571bc60 <col:62> "" ""
|-AccessSpecDecl 0x5636a571bcd0 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x5636a571bd30 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x5636a571c928 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x5636a571cb50 <col:29, col:31>
|-CXXMethodDecl 0x5636a571bdf8 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x5636a571bf38 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x5636a571bea8 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x5636a571c030 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x5636a571cb60 <col:23, col:25>
|-CXXMethodDecl 0x5636a571c1e8 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x5636a571c120 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x5636a571c4b8 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5636a571c2a0 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5636a571c318 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5636a571c390 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636a571c648 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x5636a571c580 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x5636a571c740 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x5636a571c7a8 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x5636a571c7a8
  `-ParmVarDecl 0x5636a571c8b8 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636a552d518 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5636a552d638 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x5636a552d720 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x5636a552d700 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x5636a552d6c8 <col:22> 'int' 4
|-FieldDecl 0x5636a552d7c8 <line:29:5, col:21> col:14 referenced ip_v 'unsigned int'
| `-ConstantExpr 0x5636a552d7a8 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x5636a552d770 <col:21> 'int' 4
|-FieldDecl 0x5636a552d828 <line:33:5, col:13> col:13 referenced ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x5636a552d888 <line:40:5, col:14> col:14 referenced ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x5636a552d8e8 <line:41:5, col:14> col:14 referenced ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x5636a552d948 <line:42:5, col:14> col:14 referenced ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x5636a552d9a8 <line:47:5, col:13> col:13 referenced ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x5636a552da08 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x5636a552da68 <line:49:5, col:14> col:14 referenced ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x5636a552dad8 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x5636a552db48 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping AST Record Layout
         0 | struct click_icmp_sequenced
         0 |   uint8_t icmp_type
         1 |   uint8_t icmp_code
         2 |   uint16_t icmp_cksum
         4 |   uint16_t icmp_identifier
         6 |   uint16_t icmp_sequence
           | [sizeof=8, dsize=8, align=2,
           |  nvsize=8, nvalign=2]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636a5824a68 <../dummy_inc/clicknet/icmp.h:27:1, line:33:1> line:27:8 referenced struct click_icmp_sequenced definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5636a5824b88 <col:1, col:8> col:8 implicit struct click_icmp_sequenced
|-FieldDecl 0x5636a5824c28 <line:28:5, col:13> col:13 referenced icmp_type 'uint8_t':'unsigned char'
|-FieldDecl 0x5636a5824c88 <line:29:5, col:13> col:13 referenced icmp_code 'uint8_t':'unsigned char'
|-FieldDecl 0x5636a5824ce8 <line:30:5, col:14> col:14 referenced icmp_cksum 'uint16_t':'unsigned short'
|-FieldDecl 0x5636a5824d48 <line:31:5, col:14> col:14 referenced icmp_identifier 'uint16_t':'unsigned short'
`-FieldDecl 0x5636a5824da8 <line:32:5, col:14> col:14 referenced icmp_sequence 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_icmp_sequenced = type { i8, i8, i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_icmp_sequenced = type { i8, i8, i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636a5530460 prev 0x5636a54964a8 <../dummy_inc/click/ipaddress.hh:15:1, line:154:1> line:15:7 referenced class IPAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5636a5530558 <col:1, col:7> col:7 implicit referenced class IPAddress
|-AccessSpecDecl 0x5636a55305e8 <col:19, col:25> col:19 public
|-TypedefDecl 0x5636a5530620 <line:17:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x5636a5323d80 'uninitialized_type'
|   `-CXXRecord 0x5636a5323ce8 'uninitialized_type'
|-CXXConstructorDecl 0x5636a55306e0 <line:20:5, line:22:5> line:20:12 IPAddress 'void ()' inline
| |-CXXCtorInitializer Field 0x5636a5534e40 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5636a5534ee8 <line:21:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5636a5534ea8 <col:10> 'int' 0
| `-CompoundStmt 0x5636a5534f30 <col:13, line:22:5>
|-CXXConstructorDecl 0x5636a5530830 <line:25:5, line:27:5> line:25:12 used IPAddress 'void (unsigned int)' inline
| |-ParmVarDecl 0x5636a55307a0 <col:22, col:31> col:31 used x 'unsigned int'
| |-CXXCtorInitializer Field 0x5636a5534e40 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5636a5534f80 <line:26:10> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x5636a5534f40 <col:10> 'unsigned int' lvalue ParmVar 0x5636a55307a0 'x' 'unsigned int'
| `-CompoundStmt 0x5636a5534fc8 <col:13, line:27:5>
|-CXXConstructorDecl 0x5636a5530988 <line:29:5, line:31:5> line:29:21 IPAddress 'void (int)' inline
| |-ParmVarDecl 0x5636a55308f8 <col:31, col:35> col:35 used x 'int'
| |-CXXCtorInitializer Field 0x5636a5534e40 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5636a5535030 <line:30:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5636a5535018 <col:10> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x5636a5534fd8 <col:10> 'int' lvalue ParmVar 0x5636a55308f8 'x' 'int'
| `-CompoundStmt 0x5636a5535078 <col:13, line:31:5>
|-CXXConstructorDecl 0x5636a5530ae0 <line:33:5, line:35:5> line:33:21 IPAddress 'void (unsigned long)' inline
| |-ParmVarDecl 0x5636a5530a50 <col:31, col:45> col:45 used x 'unsigned long'
| |-CXXCtorInitializer Field 0x5636a5534e40 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5636a55350e0 <line:34:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5636a55350c8 <col:10> 'unsigned long' <LValueToRValue>
| |     `-DeclRefExpr 0x5636a5535088 <col:10> 'unsigned long' lvalue ParmVar 0x5636a5530a50 'x' 'unsigned long'
| `-CompoundStmt 0x5636a5535128 <col:13, line:35:5>
|-CXXConstructorDecl 0x5636a5530c38 <line:37:5, line:39:5> line:37:21 IPAddress 'void (long)' inline
| |-ParmVarDecl 0x5636a5530ba8 <col:31, col:36> col:36 used x 'long'
| |-CXXCtorInitializer Field 0x5636a5534e40 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5636a5535190 <line:38:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5636a5535178 <col:10> 'long' <LValueToRValue>
| |     `-DeclRefExpr 0x5636a5535138 <col:10> 'long' lvalue ParmVar 0x5636a5530ba8 'x' 'long'
| `-CompoundStmt 0x5636a55351d8 <col:13, line:39:5>
|-CXXConstructorDecl 0x5636a5530df8 <line:42:5, line:44:5> line:42:12 used IPAddress 'void (struct in_addr)' inline
| |-ParmVarDecl 0x5636a5530d08 <col:22, col:37> col:37 used x 'struct in_addr':'in_addr'
| |-CXXCtorInitializer Field 0x5636a5534e40 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5636a5535258 <line:43:10, col:12> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5636a5535208 <col:10, col:12> 'in_addr_t':'unsigned int' lvalue .s_addr 0x5636a5465260
| |     `-DeclRefExpr 0x5636a55351e8 <col:10> 'struct in_addr':'in_addr' lvalue ParmVar 0x5636a5530d08 'x' 'struct in_addr':'in_addr'
| `-CompoundStmt 0x5636a55352a0 <col:20, line:44:5>
|-CXXConstructorDecl 0x5636a5530f88 <line:50:5, line:56:5> line:50:14 IPAddress 'void (const unsigned char *)'
| |-ParmVarDecl 0x5636a5530ec0 <col:24, col:45> col:45 used data 'const unsigned char *'
| `-CompoundStmt 0x5636a5535408 <col:51, line:56:5>
|   `-BinaryOperator 0x5636a55353e8 <line:52:2, col:52> 'uint32_t':'unsigned int' lvalue '='
|     |-MemberExpr 0x5636a55352c0 <col:2> 'uint32_t':'unsigned int' lvalue ->_addr 0x5636a5534e40
|     | `-CXXThisExpr 0x5636a55352b0 <col:2> 'IPAddress *' implicit this
|     `-ImplicitCastExpr 0x5636a55353d0 <col:10, col:52> 'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5636a55353b8 <col:10, col:52> 'const unsigned int' lvalue prefix '*' cannot overflow
|         `-ParenExpr 0x5636a5535398 <col:11, col:52> 'const unsigned int *'
|           `-CXXReinterpretCastExpr 0x5636a5535368 <col:12, col:51> 'const unsigned int *' reinterpret_cast<const unsigned int *> <BitCast>
|             `-ImplicitCastExpr 0x5636a5535350 <col:47> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|               `-DeclRefExpr 0x5636a55352f0 <col:47> 'const unsigned char *' lvalue ParmVar 0x5636a5530ec0 'data' 'const unsigned char *'
|-CXXConstructorDecl 0x5636a55310d8 <line:63:5, col:39> col:14 IPAddress 'void (const String &)'
| `-ParmVarDecl 0x5636a5531048 <col:24, col:38> col:38 x 'const String &'
|-CXXConstructorDecl 0x5636a5531288 <line:66:5, line:68:5> line:66:12 IPAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x5636a55311c8 <col:22, col:48> col:48 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x5636a5535478 <col:56, line:68:5>
|   `-CStyleCastExpr 0x5636a5535450 <line:67:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x5636a5535420 <col:9> 'const uninitialized_type' lvalue ParmVar 0x5636a55311c8 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x5636a5531418 <line:78:5, col:48> col:22 make_prefix 'IPAddress (int)' static
| `-ParmVarDecl 0x5636a5531350 <col:34, col:38> col:38 prefix_len 'int'
|-CXXMethodDecl 0x5636a5531508 <line:81:5, line:83:5> line:81:29 make_broadcast 'IPAddress ()' static inline
| `-CompoundStmt 0x5636a5536438 <col:46, line:83:5>
|   `-ReturnStmt 0x5636a5536428 <line:82:2, col:29>
|     `-ExprWithCleanups 0x5636a5536410 <col:9, col:29> 'IPAddress'
|       `-CXXConstructExpr 0x5636a55363e0 <col:9, col:29> 'IPAddress' 'void (IPAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5636a5536298 <col:9, col:29> 'IPAddress' xvalue
|           `-CXXFunctionalCastExpr 0x5636a5536180 <col:9, col:29> 'IPAddress' functional cast to class IPAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x5636a5536068 <col:9, col:29> 'IPAddress' 'void (unsigned int)'
|               `-IntegerLiteral 0x5636a55354a0 <col:19> 'unsigned int' 4294967295
|-CXXMethodDecl 0x5636a55315f8 <line:86:5, line:88:5> line:86:17 empty 'bool () const' inline
| `-CompoundStmt 0x5636a55364e8 <col:31, line:88:5>
|   `-ReturnStmt 0x5636a55364d8 <line:87:2, col:10>
|     `-UnaryOperator 0x5636a55364c0 <col:9, col:10> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x5636a55364a8 <col:10> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x5636a5536490 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x5636a5536460 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5636a5534e40
|             `-CXXThisExpr 0x5636a5536450 <col:10> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x5636a55316b8 <line:91:5, line:93:5> line:91:21 used addr 'uint32_t () const' inline
| `-CompoundStmt 0x5636a5536568 <col:34, line:93:5>
|   `-ReturnStmt 0x5636a5536558 <line:92:2, col:9>
|     `-ImplicitCastExpr 0x5636a5536540 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5636a5536510 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5636a5534e40
|         `-CXXThisExpr 0x5636a5536500 <col:9> 'const IPAddress *' implicit this
|-CXXConversionDecl 0x5636a5531788 <line:99:5, line:101:5> line:99:12 operator unsigned int 'uint32_t () const' inline
| `-CompoundStmt 0x5636a55365e8 <col:38, line:101:5>
|   `-ReturnStmt 0x5636a55365d8 <line:100:2, col:9>
|     `-ImplicitCastExpr 0x5636a55365c0 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5636a5536590 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5636a5534e40
|         `-CXXThisExpr 0x5636a5536580 <col:9> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x5636a5531858 <line:106:5, line:108:5> line:106:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x5636a55368b8 <col:38, line:108:5>
|   `-ReturnStmt 0x5636a55368a8 <line:107:2, col:58>
|     `-BinaryOperator 0x5636a5536888 <col:9, col:58> 'bool' '=='
|       |-ParenExpr 0x5636a55367a0 <col:9, col:36> 'unsigned int'
|       | `-BinaryOperator 0x5636a5536780 <col:10, col:35> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x5636a5536768 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x5636a5536610 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5636a5534e40
|       |   |   `-CXXThisExpr 0x5636a5536600 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x5636a5536740 <col:18, col:35> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x5636a5536728 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5636a55366a8 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x5636a5473798 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x5636a5536688 <col:24> 'unsigned int' 4026531840
|       `-CallExpr 0x5636a5536860 <col:41, col:58> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x5636a5536848 <col:41> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5636a5536828 <col:41> 'uint32_t (uint32_t) throw()' lvalue Function 0x5636a5473798 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x5636a5536808 <col:47> 'unsigned int' 3758096384
|-CXXMethodDecl 0x5636a5531918 <line:110:5, line:112:5> line:110:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x5636a5536b28 <col:39, line:112:5>
|   `-ReturnStmt 0x5636a5536b18 <line:111:2, col:56>
|     `-BinaryOperator 0x5636a5536af8 <col:9, col:56> 'bool' '=='
|       |-ParenExpr 0x5636a5536a10 <col:9, col:35> 'unsigned int'
|       | `-BinaryOperator 0x5636a55369f0 <col:10, col:34> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x5636a55369d8 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x5636a55368e0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5636a5534e40
|       |   |   `-CXXThisExpr 0x5636a55368d0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x5636a55369b0 <col:18, col:34> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x5636a5536998 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5636a5536978 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x5636a5473798 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x5636a5536958 <col:24> 'unsigned int' 4294901760
|       `-CallExpr 0x5636a5536ad0 <col:40, col:56> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x5636a5536ab8 <col:40> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5636a5536a98 <col:40> 'uint32_t (uint32_t) throw()' lvalue Function 0x5636a5473798 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x5636a5536a78 <col:46> 'unsigned int' 2851995648
|-CXXMethodDecl 0x5636a5531a48 <line:114:5, col:37> col:27 used in_addr 'struct in_addr () const' inline
|-CXXConversionDecl 0x5636a5531b50 <line:115:5, col:38> col:12 operator in_addr 'struct in_addr () const' inline
|-CXXMethodDecl 0x5636a5531c60 <line:117:5, col:32> col:27 data 'unsigned char *()' inline
|-CXXMethodDecl 0x5636a5533d38 <line:118:5, col:40> col:33 data 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5636a5533df8 <line:120:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5636a5533ec0 <line:122:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x5636a55340b8 <line:123:5, col:64> col:17 matches_prefix 'bool (IPAddress, IPAddress) const' inline
| |-ParmVarDecl 0x5636a5533f70 <col:32, col:42> col:42 addr 'IPAddress'
| `-ParmVarDecl 0x5636a5533fe8 <col:48, col:58> col:58 mask 'IPAddress'
|-CXXMethodDecl 0x5636a5534238 <line:124:5, col:50> col:17 mask_as_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x5636a5534178 <col:34, col:44> col:44 mask 'IPAddress'
|-CXXMethodDecl 0x5636a5534380 <line:125:5, col:52> col:17 mask_more_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x5636a55342f0 <col:36, col:46> col:46 mask 'IPAddress'
|-CXXMethodDecl 0x5636a5534528 <line:137:5, col:43> col:23 operator&= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x5636a5534438 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x5636a5534670 <line:138:5, col:43> col:23 operator|= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x5636a55345e0 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x5636a55347b8 <line:139:5, col:43> col:23 operator^= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x5636a5534728 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x5636a5534880 <line:141:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x5636a5534940 <line:142:5, col:27> col:12 unparse_mask 'String () const'
|-CXXMethodDecl 0x5636a5534ab8 <line:143:5, col:41> col:12 unparse_with_mask 'String (IPAddress) const'
| `-ParmVarDecl 0x5636a55349f0 <col:30> col:39 'IPAddress'
|-CXXMethodDecl 0x5636a5534b80 <line:145:5, col:23> col:19 s 'String () const' inline
|-CXXConversionDecl 0x5636a5534c68 <line:146:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x5636a5534d10 <col:51> "" ""
|-TypedefDecl 0x5636a5534db0 <line:148:5, col:23> col:23 parameter_type 'IPAddress'
| `-RecordType 0x5636a5496540 'IPAddress'
|   `-CXXRecord 0x5636a5530460 'IPAddress'
|-AccessSpecDecl 0x5636a5534e08 <line:150:3, col:10> col:3 private
|-FieldDecl 0x5636a5534e40 <line:152:5, col:14> col:14 referenced _addr 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5636a55354e8 <line:15:7> col:7 implicit constexpr IPAddress 'void (const IPAddress &)' inline default trivial noexcept-unevaluated 0x5636a55354e8
| `-ParmVarDecl 0x5636a55355f8 <col:7> col:7 'const IPAddress &'
|-CXXConstructorDecl 0x5636a5535698 <col:7> col:7 implicit used constexpr IPAddress 'void (IPAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5636a55357a8 <col:7> col:7 used 'IPAddress &&'
| |-CXXCtorInitializer Field 0x5636a5534e40 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5636a5536388 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5636a5536340 <col:7> 'uint32_t':'unsigned int' xvalue ._addr 0x5636a5534e40
| |     `-CXXStaticCastExpr 0x5636a5536310 <col:7> 'IPAddress' xvalue static_cast<class IPAddress &&> <NoOp>
| |       `-DeclRefExpr 0x5636a55362e0 <col:7> 'IPAddress' lvalue ParmVar 0x5636a55357a8 '' 'IPAddress &&'
| `-CompoundStmt 0x5636a55363d0 <col:7>
`-CXXDestructorDecl 0x5636a5536098 <col:7> col:7 implicit referenced ~IPAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddress = type { i32 }
  NonVirtualBaseLLVMType:%class.IPAddress = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPAddressArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636a553de40 prev 0x5636a5530228 <../dummy_inc/click/ipaddress.hh:367:1, line:378:1> line:367:7 referenced class IPAddressArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5636a553df38 <col:1, col:7> col:7 implicit class IPAddressArg
|-AccessSpecDecl 0x5636a553dfc8 <col:22, col:28> col:22 public
|-CXXMethodDecl 0x5636a553e3f0 <line:368:5, line:369:43> line:368:24 basic_parse 'const char *(const char *, const char *, unsigned char *, int &)' static
| |-ParmVarDecl 0x5636a553e008 <col:36, col:48> col:48 begin 'const char *'
| |-ParmVarDecl 0x5636a553e088 <col:55, col:67> col:67 end 'const char *'
| |-ParmVarDecl 0x5636a553e1c0 <line:369:8, col:29> col:22 value 'unsigned char *':'unsigned char *'
| `-ParmVarDecl 0x5636a553e270 <col:32, col:37> col:37 nbytes 'int &'
|-CXXMethodDecl 0x5636a553e6b8 <line:370:5, line:371:44> line:370:17 used parse 'bool (const String &, IPAddress &, const ArgContext &)' static
| |-ParmVarDecl 0x5636a553e4c0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x5636a553e538 <col:42, col:53> col:53 result 'IPAddress &'
| `-ParmVarDecl 0x5636a553e5d8 <line:371:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5636a5543058 <col:34> 'const ArgContext' lvalue Var 0x5636a55301c0 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x5636a5542ab0 <line:372:5, line:375:5> line:372:17 parse 'bool (const String &, struct in_addr &, const ArgContext &)' static
| |-ParmVarDecl 0x5636a553e780 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x5636a553e870 <col:42, col:58> col:58 used result 'struct in_addr &'
| |-ParmVarDecl 0x5636a553e8e8 <line:373:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5636a5543078 <col:34> 'const ArgContext' lvalue Var 0x5636a55301c0 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5636a5543258 <col:46, line:375:5>
|   `-ReturnStmt 0x5636a5543248 <line:374:2, col:63>
|     `-CallExpr 0x5636a5543210 <col:9, col:63> 'bool'
|       |-ImplicitCastExpr 0x5636a55431f8 <col:9> 'bool (*)(const String &, IPAddress &, const ArgContext &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5636a55431b0 <col:9> 'bool (const String &, IPAddress &, const ArgContext &)' lvalue CXXMethod 0x5636a553e6b8 'parse' 'bool (const String &, IPAddress &, const ArgContext &)'
|       |-DeclRefExpr 0x5636a5543110 <col:15> 'const String' lvalue ParmVar 0x5636a553e780 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x5636a5543160 <col:20, col:56> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x5636a5543130 <col:50> 'struct in_addr':'in_addr' lvalue ParmVar 0x5636a553e870 'result' 'struct in_addr &'
|       `-DeclRefExpr 0x5636a5543190 <col:59> 'const ArgContext' lvalue ParmVar 0x5636a553e8e8 'args' 'const ArgContext &'
|-CXXMethodDecl 0x5636a5542f88 <line:376:5, line:377:44> line:376:17 parse 'bool (const String &, Vector<IPAddress> &, const ArgContext &)' static
| |-ParmVarDecl 0x5636a5542b78 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x5636a5542df0 <col:42, col:61> col:61 result 'Vector<IPAddress> &'
| `-ParmVarDecl 0x5636a5542e68 <line:377:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5636a5543098 <col:34> 'const ArgContext' lvalue Var 0x5636a55301c0 'blank_args' 'const ArgContext'
|-CXXConstructorDecl 0x5636a588add0 <line:367:7> col:7 implicit referenced constexpr IPAddressArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5636a588aed8 <col:7> col:7 implicit constexpr IPAddressArg 'void (const IPAddressArg &)' inline default trivial noexcept-unevaluated 0x5636a588aed8
| `-ParmVarDecl 0x5636a588afe8 <col:7> col:7 'const IPAddressArg &'
|-CXXConstructorDecl 0x5636a588b088 <col:7> col:7 implicit constexpr IPAddressArg 'void (IPAddressArg &&)' inline default trivial noexcept-unevaluated 0x5636a588b088
| `-ParmVarDecl 0x5636a588b198 <col:7> col:7 'IPAddressArg &&'
`-CXXDestructorDecl 0x5636a588b238 <col:7> col:7 implicit referenced ~IPAddressArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddressArg = type { i8 }
  NonVirtualBaseLLVMType:%class.IPAddressArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5)
         0 |   TimerCallback callback
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timer
         0 |   int _schedpos1
         8 |   class Timestamp _expiry_s
         8 |     union Timestamp::rep_t _t
         8 |       int64_t x
        16 |   union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
        16 |     TimerCallback callback
        24 |   void * _thunk
        32 |   class Element * _owner
        40 |   class RouterThread * _thread
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636a56c8dd0 prev 0x5636a56bfc10 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5636a56c8ec8 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x5636a56c8f68 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x5636a56cfd30 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5636a56d0118 <col:11>
|-CXXConstructorDecl 0x5636a56cfe10 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5636a56cfef8 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5636a56d0860 <col:11>
|-CXXConstructorDecl 0x5636a56cff98 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5636a56d00a8 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x5636a56d20b8 <col:11>
|-CXXDestructorDecl 0x5636a56d13c8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5636a53d7f78 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5636a53d8088 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5636a53d8950 <col:11>
|   `-ReturnStmt 0x5636a53d8940 <col:11>
|     `-UnaryOperator 0x5636a53d8928 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5636a53d8918 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x5636a53d80f8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5636a53d8208 <col:11> col:11 'Timestamp::rep_t &&'
  `-CompoundStmt 0x5636a57663f0 <col:11>
    `-ReturnStmt 0x5636a57663e0 <col:11>
      `-UnaryOperator 0x5636a57663c8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x5636a57663b8 <col:11> 'Timestamp::rep_t *' this

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636a56bedc8 prev 0x5636a56bead8 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5636a56beec0 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x5636a56bef50 <col:19, col:25> col:19 public
|-TypedefDecl 0x5636a56bef88 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x5636a5324150 'int32_t' sugar
|   |-Typedef 0x5636a5236328 'int32_t'
|   `-TypedefType 0x5636a520f510 '__int32_t' sugar
|     |-Typedef 0x5636a520f128 '__int32_t'
|     `-BuiltinType 0x5636a51cd580 'int'
|-TypedefDecl 0x5636a56beff0 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x5636a5324310 'int64_t' sugar
|   |-Typedef 0x5636a5236390 'int64_t'
|   `-TypedefType 0x5636a520f630 '__int64_t' sugar
|     |-Typedef 0x5636a520f208 '__int64_t'
|     `-BuiltinType 0x5636a51cd5a0 'long'
|-EnumDecl 0x5636a56bf048 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x5636a56bf1c0 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x5636a56bf1a0 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x5636a56bf178 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x5636a56bf160 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x5636a56bf130 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x5636a56bf2b8 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x5636a56bf298 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x5636a56bf270 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x5636a56bf258 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x5636a56bf230 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x5636a56bf210 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x5636a56bf308 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x5636a56bf410 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5636a56bf960 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a56bf3f0 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x5636a56bf3d0 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x5636a56bf4a0 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5636a56bf978 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a56bf480 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x5636a56bf460 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x5636a56bf530 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5636a56bf990 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a56bf510 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x5636a56bf4f0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x5636a56bf5c0 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5636a56bf9a8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a56bf5a0 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x5636a56bf580 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x5636a56bf650 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5636a56bf9c0 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a56bf630 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x5636a56bf610 <col:25> 'int' 1000
| |-EnumConstantDecl 0x5636a56bf6e0 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5636a56bf9d8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a56bf6c0 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x5636a56bf6a0 <col:24> 'int' 1000
| |-EnumConstantDecl 0x5636a56bf770 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5636a56bf9f0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a56bf750 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x5636a56bf730 <col:26> 'int' EnumConstant 0x5636a56bf410 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x5636a56bf840 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5636a56bfa08 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a56bf820 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x5636a56bf800 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x5636a56bf7c0 <col:27> 'int' EnumConstant 0x5636a56bf770 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x5636a56bf7e0 <col:44> 'int' EnumConstant 0x5636a56bf6e0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x5636a56bf910 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x5636a56bfa20 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5636a56bf8f0 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x5636a56bf8d0 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x5636a56bf890 <col:27> 'int' EnumConstant 0x5636a56bf770 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x5636a56bf8b0 <col:44> 'int' EnumConstant 0x5636a56bf5c0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x5636a56bfa38 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x5636a56bfb40 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x5636a56bfb90 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5636a56bfb20 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x5636a56bfb00 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636a56bf770 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x5636a56bfbb8 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x5636a5323d80 'uninitialized_type'
|   `-CXXRecord 0x5636a5323ce8 'uninitialized_type'
|-CXXRecordDecl 0x5636a56bfc10 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x5636a56bfd20 <line:174:5, line:176:5> line:174:12 used Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x5636a56c9f18 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5636a56d0128 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5636a56d0248 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x5636a56d0200 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x5636a56d0190 <col:9> '<bound member function type>' ->assign 0x5636a56c4968
|     | `-CXXThisExpr 0x5636a56d0180 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x5636a56d01c0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x5636a56d0230 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5636a56d01e0 <col:19> 'int' 0
|-CXXConstructorDecl 0x5636a56bff68 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x5636a56bfde0 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x5636a56bfe58 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5636a56cba60 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5636a56cba40 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x5636a56c9f18 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5636a56d0260 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5636a56d03b0 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x5636a56d0338 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x5636a56d02c8 <col:9> '<bound member function type>' ->assign 0x5636a56c4968
|     | `-CXXThisExpr 0x5636a56d02b8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5636a56d0380 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5636a56d0368 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x5636a56d02f8 <col:16> 'long' lvalue ParmVar 0x5636a56bfde0 'sec' 'long'
|     `-ImplicitCastExpr 0x5636a56d0398 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5636a56d0318 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5636a56bfe58 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5636a56c01c8 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5636a56c0038 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x5636a56c00b0 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5636a56cba98 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5636a56cba78 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x5636a56c9f18 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5636a56d03c8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5636a56d0500 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x5636a56d04a0 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x5636a56d0430 <col:9> '<bound member function type>' ->assign 0x5636a56c4968
|     | `-CXXThisExpr 0x5636a56d0420 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5636a56d04d0 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5636a56d0460 <col:16> 'int' lvalue ParmVar 0x5636a56c0038 'sec' 'int'
|     `-ImplicitCastExpr 0x5636a56d04e8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5636a56d0480 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5636a56c00b0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5636a56c0428 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x5636a56c0298 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x5636a56c0310 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5636a56cbad0 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5636a56cbab0 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x5636a56c9f18 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5636a56d0518 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5636a56d0668 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x5636a56d05f0 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x5636a56d0580 <col:9> '<bound member function type>' ->assign 0x5636a56c4968
|     | `-CXXThisExpr 0x5636a56d0570 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5636a56d0638 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5636a56d0620 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x5636a56d05b0 <col:16> 'unsigned long' lvalue ParmVar 0x5636a56c0298 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x5636a56d0650 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5636a56d05d0 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5636a56c0310 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5636a56c15c0 <line:199:5, line:201:5> line:199:21 used Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x5636a56c04f8 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x5636a56c0570 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5636a56cbb08 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5636a56cbae8 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x5636a56c9f18 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5636a56d0680 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5636a56d07d0 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x5636a56d0758 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x5636a56d06e8 <col:9> '<bound member function type>' ->assign 0x5636a56c4968
|     | `-CXXThisExpr 0x5636a56d06d8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5636a56d07a0 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5636a56d0788 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5636a56d0718 <col:16> 'unsigned int' lvalue ParmVar 0x5636a56c04f8 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x5636a56d07b8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5636a56d0738 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5636a56c0570 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5636a56c1720 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x5636a56c1690 <col:31> col:37 'double'
|-CXXConstructorDecl 0x5636a56c18b8 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x5636a56c17f8 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x5636a56c1ae8 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x5636a56c19f0 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x5636a56c1c98 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x5636a56c1bd8 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x5636a56c9f18 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5636a56d0870 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x5636a56d07e8 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x5636a56c1bd8 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5636a56d08d0 <col:19, line:214:5>
|-CXXConstructorDecl 0x5636a56c1e68 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x5636a56c1da8 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x5636a56c9f18 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5636a56d08e0 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5636a56d0990 <col:53, line:219:5>
|   `-CStyleCastExpr 0x5636a56d0968 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x5636a56d0938 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x5636a56c1da8 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x5636a56c2058 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x5636a56c1fd0 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x5636a56beb70 'Timestamp'
|   | `-CXXRecord 0x5636a56bedc8 'Timestamp'
|   `-ParenType 0x5636a56c1f70 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x5636a56c1f40 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x5636a56bf110 'Timestamp::seconds_type' sugar
|         |-Typedef 0x5636a56bef88 'seconds_type'
|         `-TypedefType 0x5636a5324150 'int32_t' sugar
|           |-Typedef 0x5636a5236328 'int32_t'
|           `-TypedefType 0x5636a520f510 '__int32_t' sugar
|             |-Typedef 0x5636a520f128 '__int32_t'
|             `-BuiltinType 0x5636a51cd580 'int'
|-CXXConversionDecl 0x5636a56c2198 <line:222:5, col:45> col:12 used operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5636a56c2268 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x5636a56d0a98 <col:37, line:231:5>
|   `-ReturnStmt 0x5636a56d0a88 <line:227:9, col:23>
|     `-BinaryOperator 0x5636a56d0a68 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x5636a56d0a38 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5636a56d09e8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x5636a56c8f68
|       |   `-MemberExpr 0x5636a56d09b8 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x5636a56c9f18
|       |     `-CXXThisExpr 0x5636a56d09a8 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5636a56d0a50 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x5636a56d0a18 <col:23> 'int' 0
|-CXXMethodDecl 0x5636a56c2328 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x5636a56c23e8 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x5636a56c24a8 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x5636a56c2568 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x5636a56c2628 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x5636a56c2798 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x5636a56c26d8 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x5636a56c28e0 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x5636a56c2850 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636a56c29a8 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5636a56c2a48 <col:54> "" ""
|-CXXMethodDecl 0x5636a56c2ad8 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5636a56c2b78 <col:54> "" ""
|-CXXMethodDecl 0x5636a56c2c08 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5636a56c2ca8 <col:54> "" ""
|-CXXMethodDecl 0x5636a56c2da8 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x5636a56c2e78 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x5636a56c2fa8 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x5636a56c30a0 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x5636a56c31d8 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5636a56d0cb0 <col:39, line:271:5>
|   `-ReturnStmt 0x5636a56d0ca0 <line:267:9, col:61>
|     `-CallExpr 0x5636a56d0c40 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x5636a56d0c28 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5636a56d0ab0 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5636a56ca248 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x5636a56d0c70 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5636a56d0b10 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x5636a56c8f68
|       |   `-MemberExpr 0x5636a56d0ae0 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x5636a56c9f18
|       |     `-CXXThisExpr 0x5636a56d0ad0 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5636a56d0c88 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x5636a56d0bb0 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x5636a56d0b80 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x5636a56d0b40 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636a56bf770 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x5636a56d0b98 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x5636a56d0b60 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636a56bf6e0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5636a56c3298 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5636a56d0e70 <col:39, line:279:5>
|   `-ReturnStmt 0x5636a56d0e60 <line:275:9, col:61>
|     `-CallExpr 0x5636a56d0e00 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x5636a56d0de8 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5636a56d0cc8 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5636a56ca248 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x5636a56d0e30 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5636a56d0d28 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x5636a56c8f68
|       |   `-MemberExpr 0x5636a56d0cf8 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x5636a56c9f18
|       |     `-CXXThisExpr 0x5636a56d0ce8 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5636a56d0e48 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x5636a56d0dc8 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x5636a56d0d98 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x5636a56d0d58 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636a56bf770 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x5636a56d0db0 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x5636a56d0d78 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636a56bf5c0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5636a56c3358 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5636a56d1008 <col:39, line:287:5>
|   `-ReturnStmt 0x5636a56d0ff8 <line:283:9, col:53>
|     `-BinaryOperator 0x5636a56d0fd8 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x5636a56d0fa8 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5636a56d0ec8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x5636a56c8f68
|       |   `-MemberExpr 0x5636a56d0e98 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x5636a56c9f18
|       |     `-CXXThisExpr 0x5636a56d0e88 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5636a56d0fc0 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x5636a56d0f88 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5636a56d0f68 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x5636a56d0f38 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5636a56d0ef8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636a56bf410 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5636a56d0f50 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5636a56d0f18 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636a56bf770 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5636a56c3448 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5636a56d22a0 <col:40, line:293:5>
|   |-DeclStmt 0x5636a56d1150 <line:291:9, col:48>
|   | `-VarDecl 0x5636a56d1030 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x5636a56d1130 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x5636a56d10d8 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x5636a56d10a8 <col:22> '<bound member function type>' ->subsec 0x5636a56c23e8
|   |     |   `-CXXThisExpr 0x5636a56d1098 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x5636a56d1118 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x5636a56d10f8 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636a56bf840 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5636a56d2290 <line:292:9, col:70>
|     `-ExprWithCleanups 0x5636a56d2278 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x5636a56d2248 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5636a56d2230 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x5636a56d2210 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x5636a56d21e0 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x5636a56d1f78 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x5636a56d1f60 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x5636a56d1168 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x5636a56d1030 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x5636a56d2180 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x5636a56d2168 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x5636a56d2138 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x5636a56d1f90 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x5636a56d1f00 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x5636a56d1ee8 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x5636a56d1e98 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5636a56bed18 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x5636a56d1e38 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x5636a56d1198 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x5636a56d1188 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x5636a56d1e80 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x5636a56d1e68 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x5636a56d1658 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x5636a56d11c0 <col:39> 'int' 0
|               |               `-BinaryOperator 0x5636a56d1250 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x5636a56d1220 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x5636a56d11e0 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636a56bf840 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x5636a56d1238 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x5636a56d1200 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x5636a56d1030 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x5636a56d21b0 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x5636a56d1f48 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x5636a56d1f38 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x5636a56c3508 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5636a56d27f8 <col:40, line:302:5>
|   |-DeclStmt 0x5636a56d23f0 <line:297:9, col:48>
|   | `-VarDecl 0x5636a56d22d0 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x5636a56d23d0 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x5636a56d2378 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x5636a56d2348 <col:22> '<bound member function type>' ->subsec 0x5636a56c23e8
|   |     |   `-CXXThisExpr 0x5636a56d2338 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x5636a56d23b8 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x5636a56d2398 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636a56bf910 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5636a56d27e8 <line:298:9, col:70>
|     `-ExprWithCleanups 0x5636a56d27d0 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x5636a56d27a0 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5636a56d2788 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x5636a56d2768 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x5636a56d2738 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x5636a56d2660 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x5636a56d2648 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x5636a56d2408 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x5636a56d22d0 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x5636a56d26d8 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x5636a56d26c0 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x5636a56d2690 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x5636a56d2678 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x5636a56d25e8 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x5636a56d25d0 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x5636a56d25b0 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5636a56bed18 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x5636a56d2550 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x5636a56d2438 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x5636a56d2428 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x5636a56d2598 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x5636a56d2580 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x5636a56d2510 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x5636a56d2460 <col:39> 'int' 0
|               |               `-BinaryOperator 0x5636a56d24f0 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x5636a56d24c0 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x5636a56d2480 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636a56bf910 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x5636a56d24d8 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x5636a56d24a0 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x5636a56d22d0 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x5636a56d2708 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x5636a56d2630 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x5636a56d2620 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x5636a56c35c8 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5636a56d2880 <col:40, line:306:5>
|   `-ReturnStmt 0x5636a56d2870 <line:305:9, col:17>
|     `-CXXConstructExpr 0x5636a56d2840 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x5636a56d2828 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5636a56d2818 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x5636a56c3768 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x5636a56c3678 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x5636a56c3938 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x5636a56c3840 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x5636a56c3a28 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x5636a56c3b98 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x5636a56c3ad8 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x5636a56d29c8 <col:56, line:320:5>
|   `-ReturnStmt 0x5636a56d29b8 <line:319:9, col:32>
|     `-ExprWithCleanups 0x5636a56d29a0 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x5636a56d2970 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5636a56d2958 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5636a56d2918 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5636a56d28e8 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5636a56d28a8 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5636a56c3ad8 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x5636a56d2900 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5636a56d28c8 <col:31> 'int' 0
|-CXXMethodDecl 0x5636a56c3dd8 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5636a56c3c50 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5636a56c3cc8 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5636a56d2b98 <col:72, line:326:5>
|   `-ReturnStmt 0x5636a56d2b88 <line:325:9, col:51>
|     `-ExprWithCleanups 0x5636a56d2b70 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5636a56d2b40 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5636a56d2b28 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5636a56d2ae8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5636a56d2ad0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5636a56d29f0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5636a56c3c50 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5636a56d2a90 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5636a56d2a78 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5636a56d2a10 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5636a56c86c0 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5636a56d2ab8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5636a56d2a30 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5636a56c3cc8 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636a56c3f88 <line:328:5, line:337:5> line:328:29 used make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5636a56c3e98 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5636a56d3260 <col:56, line:337:5>
|   |-DeclStmt 0x5636a56d2e98 <line:329:9, col:51>
|   | `-VarDecl 0x5636a56d2bc0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5636a56d2e80 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5636a56d2e50 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5636a56d2e38 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5636a56d2e20 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5636a56d2df0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5636a56d2dd8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5636a56d2dc0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5636a56d2cb0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5636a56d3050 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5636a56d2f00 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5636a56c8f68
|   | | `-MemberExpr 0x5636a56d2ed0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5636a56c9f18
|   | |   `-DeclRefExpr 0x5636a56d2eb0 <col:9> 'Timestamp' lvalue Var 0x5636a56d2bc0 't' 'Timestamp'
|   | `-BinaryOperator 0x5636a56d3030 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x5636a56d3000 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5636a56d2f30 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x5636a56c3e98 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5636a56d3018 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x5636a56d2fe0 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x5636a56d2fc0 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x5636a56d2f90 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x5636a56d2f50 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636a56bf770 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x5636a56d2fa8 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x5636a56d2f70 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636a56bf6e0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5636a56d3248 <line:336:9, col:16>
|     `-CXXConstructExpr 0x5636a56d3218 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5636a56d3200 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5636a56d31e0 <col:16> 'Timestamp' lvalue Var 0x5636a56d2bc0 't' 'Timestamp'
|-CXXMethodDecl 0x5636a56c4150 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5636a56c4040 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5636a56c40b8 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5636a56d3418 <col:72, line:343:5>
|   `-ReturnStmt 0x5636a56d3408 <line:342:9, col:51>
|     `-ExprWithCleanups 0x5636a56d33f0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5636a56d33c0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5636a56d33a8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5636a56d3368 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5636a56d3350 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5636a56d3298 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5636a56c4040 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5636a56d3310 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5636a56d32f8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5636a56d32b8 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5636a56c8808 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5636a56d3338 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5636a56d32d8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5636a56c40b8 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636a56c42a0 <line:345:5, line:354:5> line:345:29 used make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5636a56c4210 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5636a56d3860 <col:56, line:354:5>
|   |-DeclStmt 0x5636a56d3608 <line:346:9, col:51>
|   | `-VarDecl 0x5636a56d3440 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5636a56d35f0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5636a56d35c0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5636a56d35a8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5636a56d3590 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5636a56d3560 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5636a56d3548 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5636a56d3530 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5636a56d3500 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5636a56d37c0 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5636a56d3670 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5636a56c8f68
|   | | `-MemberExpr 0x5636a56d3640 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5636a56c9f18
|   | |   `-DeclRefExpr 0x5636a56d3620 <col:9> 'Timestamp' lvalue Var 0x5636a56d3440 't' 'Timestamp'
|   | `-BinaryOperator 0x5636a56d37a0 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x5636a56d3770 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5636a56d36a0 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x5636a56c4210 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5636a56d3788 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x5636a56d3750 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x5636a56d3730 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x5636a56d3700 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x5636a56d36c0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636a56bf770 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x5636a56d3718 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x5636a56d36e0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636a56bf5c0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5636a56d3848 <line:353:9, col:16>
|     `-CXXConstructExpr 0x5636a56d3818 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5636a56d3800 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5636a56d37e0 <col:16> 'Timestamp' lvalue Var 0x5636a56d3440 't' 'Timestamp'
|-CXXMethodDecl 0x5636a56c4468 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5636a56c4358 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5636a56c43d0 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5636a56d3a18 <col:72, line:360:5>
|   `-ReturnStmt 0x5636a56d3a08 <line:359:9, col:51>
|     `-ExprWithCleanups 0x5636a56d39f0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5636a56d39c0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5636a56d39a8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5636a56d3968 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5636a56d3950 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5636a56d3898 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5636a56c4358 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5636a56d3910 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5636a56d38f8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5636a56d38b8 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5636a56c8950 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5636a56d3938 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5636a56d38d8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5636a56c43d0 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636a56c45b8 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5636a56c4528 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5636a56e0388 <col:56, line:371:5>
|   |-DeclStmt 0x5636a56d3c08 <line:363:9, col:51>
|   | `-VarDecl 0x5636a56d3a40 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5636a56d3bf0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5636a56d3bc0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5636a56d3ba8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5636a56d3b90 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5636a56d3b60 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5636a56d3b48 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5636a56d3b30 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5636a56d3b00 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5636a56e02e8 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5636a56d3c70 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5636a56c8f68
|   | | `-MemberExpr 0x5636a56d3c40 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5636a56c9f18
|   | |   `-DeclRefExpr 0x5636a56d3c20 <col:9> 'Timestamp' lvalue Var 0x5636a56d3a40 't' 'Timestamp'
|   | `-CallExpr 0x5636a56e0288 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x5636a56e0270 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5636a56d3ca0 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5636a56ca248 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x5636a56e02b8 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5636a56d3cc0 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x5636a56c4528 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5636a56e02d0 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x5636a56e0250 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x5636a56e0220 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x5636a56d3ce0 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636a56bf410 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x5636a56e0238 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x5636a56d3d00 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636a56bf770 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5636a56e0370 <line:370:9, col:16>
|     `-CXXConstructExpr 0x5636a56e0340 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5636a56e0328 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5636a56e0308 <col:16> 'Timestamp' lvalue Var 0x5636a56d3a40 't' 'Timestamp'
|-CXXMethodDecl 0x5636a56c46a8 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x5636a56e04c8 <col:39, line:377:5>
|   `-ReturnStmt 0x5636a56e04b8 <line:376:9, col:30>
|     `-ExprWithCleanups 0x5636a56e04a0 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x5636a56e0470 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5636a56e0458 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5636a56e0418 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x5636a56e03c0 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x5636a56e0400 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5636a56e03e0 <col:29> 'int' 1
|-CXXMethodDecl 0x5636a56c4768 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x5636a56e05a8 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x5636a56e0560 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x5636a56e04f0 <col:9> '<bound member function type>' ->assign 0x5636a56c4968
|     | `-CXXThisExpr 0x5636a56e04e0 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x5636a56e0520 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x5636a56e0590 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5636a56e0540 <col:19> 'int' 0
|-CXXMethodDecl 0x5636a56c4968 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5636a56c4818 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5636a56c4890 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5636a56cbb40 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5636a56cbb20 <col:60> 'int' 0
| `-CompoundStmt 0x5636a56e07a0 <col:63, line:395:5>
|   `-BinaryOperator 0x5636a56e0780 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x5636a56e0600 <col:9, col:12> 'int64_t':'long' lvalue .x 0x5636a56c8f68
|     | `-MemberExpr 0x5636a56e05d0 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x5636a56c9f18
|     |   `-CXXThisExpr 0x5636a56e05c0 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x5636a56e0760 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x5636a56e06f0 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x5636a56e0690 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x5636a56e0678 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x5636a56e0660 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x5636a56e0630 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5636a56c4818 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x5636a56e06d8 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x5636a56e06b8 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636a56bf770 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x5636a56e0748 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x5636a56e0730 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x5636a56e0710 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x5636a56c4890 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636a56c4b38 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5636a56c4a28 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5636a56c4aa0 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5636a56e08f8 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x5636a56e08b0 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x5636a56e07c8 <col:9> '<bound member function type>' ->assign 0x5636a56c4968
|     | `-CXXThisExpr 0x5636a56e07b8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5636a56e08e0 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5636a56e07f8 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5636a56c4a28 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x5636a56e0870 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5636a56e0858 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5636a56e0818 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5636a56c8808 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x5636a56e0898 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5636a56e0838 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x5636a56c4aa0 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636a56c4d08 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5636a56c4bf8 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5636a56c4c70 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5636a56e0a50 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x5636a56e0a08 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x5636a56e0920 <col:9> '<bound member function type>' ->assign 0x5636a56c4968
|     | `-CXXThisExpr 0x5636a56e0910 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5636a56e0a38 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5636a56e0950 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5636a56c4bf8 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x5636a56e09c8 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5636a56e09b0 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5636a56e0970 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5636a56c8950 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x5636a56e09f0 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5636a56e0990 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x5636a56c4c70 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636a56c4ed8 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5636a56c4dc8 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5636a56c4e40 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5636a56cbb78 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5636a56cbb58 <col:57> 'int' 0
| `-DeprecatedAttr 0x5636a56c4f88 <col:75> "" ""
|-CXXMethodDecl 0x5636a56c5118 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5636a56c5008 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5636a56c5080 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5636a56c51c8 <col:74> "" ""
|-CXXMethodDecl 0x5636a56c5358 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5636a56c5248 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5636a56c52c0 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5636a56c5408 <col:74> "" ""
|-CXXMethodDecl 0x5636a56c5498 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x5636a56c5538 <col:42> "" ""
|-CXXMethodDecl 0x5636a56c7d70 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x5636a56c7c50 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5636a56c7cd0 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x5636a56c7e40 <line:432:5, col:33> col:29 now 'Timestamp ()' static inline
|-CXXMethodDecl 0x5636a56c7f00 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x5636a56c7fa0 <col:20>
| `-OptimizeNoneAttr 0x5636a56c7ff8 <col:30>
|-CXXMethodDecl 0x5636a56c8040 <line:446:5, col:36> col:29 used recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x5636a56c8100 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x5636a56c81c0 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x5636a56c8280 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x5636a56c8340 <line:481:5, col:43> col:29 used recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x5636a56c8400 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x5636a56c84c0 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x5636a56c8580 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x5636a56c86c0 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5636a56c8630 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5636a56e0b98 <col:58, line:512:5>
|   `-ReturnStmt 0x5636a56e0b88 <line:511:9, col:53>
|     `-BinaryOperator 0x5636a56e0b68 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5636a56e0b38 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5636a56e0a68 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5636a56c8630 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5636a56e0b50 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5636a56e0b18 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5636a56e0af8 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5636a56e0ac8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5636a56e0a88 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636a56bf770 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5636a56e0ae0 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5636a56e0aa8 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636a56bf6e0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5636a56c8808 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5636a56c8778 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5636a56e0ce0 <col:58, line:516:5>
|   `-ReturnStmt 0x5636a56e0cd0 <line:515:9, col:53>
|     `-BinaryOperator 0x5636a56e0cb0 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5636a56e0c80 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5636a56e0bb0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5636a56c8778 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5636a56e0c98 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5636a56e0c60 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5636a56e0c40 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5636a56e0c10 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5636a56e0bd0 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636a56bf770 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5636a56e0c28 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5636a56e0bf0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636a56bf5c0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5636a56c8950 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5636a56c88c0 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5636a56e0e28 <col:58, line:520:5>
|   `-ReturnStmt 0x5636a56e0e18 <line:519:9, col:53>
|     `-BinaryOperator 0x5636a56e0df8 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5636a56e0dc8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5636a56e0cf8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5636a56c88c0 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5636a56e0de0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5636a56e0da8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5636a56e0d88 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x5636a56e0d58 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5636a56e0d18 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636a56bf410 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5636a56e0d70 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5636a56e0d38 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636a56bf770 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5636a56c8a98 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5636a56c8a08 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5636a56e0f70 <col:60, line:524:5>
|   `-ReturnStmt 0x5636a56e0f60 <line:523:9, col:55>
|     `-BinaryOperator 0x5636a56e0f40 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5636a56e0f10 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5636a56e0e40 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5636a56c8a08 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5636a56e0f28 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5636a56e0ef0 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5636a56e0ed0 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x5636a56e0ea0 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5636a56e0e60 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636a56bf770 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5636a56e0eb8 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5636a56e0e80 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636a56bf6e0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5636a56c8be0 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5636a56c8b50 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5636a56e10b8 <col:60, line:528:5>
|   `-ReturnStmt 0x5636a56e10a8 <line:527:9, col:55>
|     `-BinaryOperator 0x5636a56e1088 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5636a56e1058 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5636a56e0f88 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5636a56c8b50 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5636a56e1070 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5636a56e1038 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5636a56e1018 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x5636a56e0fe8 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5636a56e0fa8 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636a56bf770 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5636a56e1000 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5636a56e0fc8 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636a56bf5c0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5636a56c8d28 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5636a56c8c98 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5636a56e1200 <col:60, line:532:5>
|   `-ReturnStmt 0x5636a56e11f0 <line:531:9, col:55>
|     `-BinaryOperator 0x5636a56e11d0 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5636a56e11a0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5636a56e10d0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5636a56c8c98 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5636a56e11b8 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5636a56e1180 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5636a56e1160 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5636a56e1130 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5636a56e10f0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636a56bf410 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5636a56e1148 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5636a56e1110 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636a56bf770 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x5636a56c8dd0 prev 0x5636a56bfc10 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5636a56c8ec8 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x5636a56c8f68 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x5636a56cfd30 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5636a56d0118 <col:11>
| |-CXXConstructorDecl 0x5636a56cfe10 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5636a56cfef8 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x5636a56d0860 <col:11>
| |-CXXConstructorDecl 0x5636a56cff98 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x5636a56d00a8 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x5636a56d20b8 <col:11>
| |-CXXDestructorDecl 0x5636a56d13c8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5636a53d7f78 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5636a53d8088 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x5636a53d8950 <col:11>
| |   `-ReturnStmt 0x5636a53d8940 <col:11>
| |     `-UnaryOperator 0x5636a53d8928 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5636a53d8918 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x5636a53d80f8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x5636a53d8208 <col:11> col:11 'Timestamp::rep_t &&'
|   `-CompoundStmt 0x5636a57663f0 <col:11>
|     `-ReturnStmt 0x5636a57663e0 <col:11>
|       `-UnaryOperator 0x5636a57663c8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5636a57663b8 <col:11> 'Timestamp::rep_t *' this
|-EnumDecl 0x5636a56c8fd0 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x5636a56c90d0 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5636a56c92d0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a56c90b0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5636a56c9090 <col:21> 'int' 0
| |-EnumConstantDecl 0x5636a56c9160 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5636a56c92e8 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a56c9140 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x5636a56c9120 <col:23> 'int' 1
| |-EnumConstantDecl 0x5636a56c91f0 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5636a56c9300 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a56c91d0 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x5636a56c91b0 <col:23> 'int' 2
| `-EnumConstantDecl 0x5636a56c9280 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x5636a56c9318 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5636a56c9260 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x5636a56c9240 <col:27> 'int' 3
|-CXXMethodDecl 0x5636a56c9358 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x5636a56c9420 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x5636a56c9628 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x5636a56c94d0 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x5636a56c9550 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x5636a56cbb90 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x5636a56c9838 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x5636a56c96e8 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x5636a56c9760 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x5636a56c9908 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x5636a56c99c8 <line:635:5, col:37> col:24 used warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x5636a56c9b38 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x5636a56c9a78 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x5636a56c9c00 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x5636a56c9cc0 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x5636a56c9d80 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x5636a56c9e40 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x5636a56c9ee0 <line:670:3, col:10> col:3 private
|-FieldDecl 0x5636a56c9f18 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x5636a56c9f88 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x5636a56e1218 <col:27, line:684:5>
|-CXXMethodDecl 0x5636a56ca048 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x5636a56e1228 <col:27, line:696:5>
|-CXXMethodDecl 0x5636a56ca248 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x5636a56ca0f8 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x5636a56ca170 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5636a56e13b0 <col:66, line:700:5>
|   `-ReturnStmt 0x5636a56e13a0 <line:699:9, col:31>
|     `-CallExpr 0x5636a56e1340 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x5636a56e1328 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5636a56e12d8 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x5636a554c5f8 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x5636a56e1370 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x5636a56e1298 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x5636a56ca0f8 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x5636a56e1388 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5636a56e12b8 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x5636a56ca170 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636a56ca5b8 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x5636a56ca308 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x5636a56ca380 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x5636a56ca3f8 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x5636a56ca470 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5636a56e1700 <col:64, line:707:5>
|   |-DeclStmt 0x5636a56e1440 <line:704:9, col:24>
|   | `-VarDecl 0x5636a56e13d8 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x5636a56e1650 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x5636a56e1458 <col:9> 'int32_t':'int' lvalue ParmVar 0x5636a56ca380 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x5636a56e1638 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x5636a56e15d0 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x5636a56e15b8 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5636a56e1538 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x5636a55518c8 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x5636a56e1608 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5636a56e14d8 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x5636a56ca3f8 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x5636a56e1620 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5636a56e14f8 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x5636a56ca470 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x5636a56e1518 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x5636a56e13d8 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x5636a56e16e0 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x5636a56e1670 <col:9> 'int32_t':'int' lvalue ParmVar 0x5636a56ca308 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x5636a56e16c8 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x5636a56e16b0 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x5636a56e1690 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x5636a56e13d8 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x5636a56ca858 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x5636a56ca688 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x5636a56ca700 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x5636a56ca778 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x5636a56caaf8 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x5636a56ca920 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x5636a56ca998 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x5636a56caa10 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x5636a56cac88 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x5636a56cabc0 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x5636a56cae88 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x5636a56cad40 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x5636a56cadb8 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x5636a56cb158 <line:717:5, col:73> col:24
| `-FunctionDecl 0x5636a56cb098 parent 0x5636a51cd488 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5636a56caf48 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x5636a56cafc0 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x5636a56cb378 <line:718:5, col:72> col:24
| `-FunctionDecl 0x5636a56cb2b8 parent 0x5636a51cd488 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5636a56cb1a8 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x5636a56cb220 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x5636a56cb540 <line:719:5, col:57> col:29
| `-FunctionDecl 0x5636a56cb488 parent 0x5636a51cd488 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x5636a56cb3c8 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x5636a56cb7c8 <line:720:5, col:73> col:30
| `-FunctionDecl 0x5636a56cb708 parent 0x5636a51cd488 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5636a56cb5b8 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x5636a56cb630 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x5636a56cb9e8 <line:721:5, col:73> col:30
| `-FunctionDecl 0x5636a56cb928 parent 0x5636a51cd488 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5636a56cb818 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x5636a56cb890 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x5636a56d1270 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x5636a56d1358 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x5636a56c9f18 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5636a56d1dc8 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x5636a56d1d80 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x5636a56c9f18
| |     `-DeclRefExpr 0x5636a56d1d60 <col:7> 'const Timestamp' lvalue ParmVar 0x5636a56d1358 '' 'const Timestamp &'
| `-CompoundStmt 0x5636a56d1e28 <col:7>
|-CXXConstructorDecl 0x5636a56d14d8 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5636a56d15e8 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x5636a56c9f18 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5636a56d20c8 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x5636a56d2070 <col:7> 'Timestamp::rep_t' xvalue ._t 0x5636a56c9f18
| |     `-CXXStaticCastExpr 0x5636a56d2040 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x5636a56d2010 <col:7> 'Timestamp' lvalue ParmVar 0x5636a56d15e8 '' 'Timestamp &&'
| `-CompoundStmt 0x5636a56d2128 <col:7>
|-CXXDestructorDecl 0x5636a56d1698 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5636a53d7dc8 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x5636a53d7ed8 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x5636a53d89c8 <col:7>
|   |-CXXMemberCallExpr 0x5636a53d8968 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x5636a53d88a8 <col:7> '<bound member function type>' .operator= 0x5636a53d7f78
|   | | `-MemberExpr 0x5636a53d87b8 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x5636a56c9f18
|   | |   `-CXXThisExpr 0x5636a53d87a8 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x5636a53d8878 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x5636a56c9f18
|   |   `-DeclRefExpr 0x5636a53d8858 <col:7> 'const Timestamp' lvalue ParmVar 0x5636a53d7ed8 '' 'const Timestamp &'
|   `-ReturnStmt 0x5636a53d89b8 <col:7>
|     `-UnaryOperator 0x5636a53d89a0 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5636a53d8990 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x5636a53d8278 <col:7> col:7 implicit used operator= 'Timestamp &(Timestamp &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5636a53d8388 <col:7> col:7 used 'Timestamp &&'
  `-CompoundStmt 0x5636a5766468 <col:7>
    |-CXXMemberCallExpr 0x5636a5766408 <col:7> 'Timestamp::rep_t' lvalue
    | |-MemberExpr 0x5636a5766370 <col:7> '<bound member function type>' .operator= 0x5636a53d80f8
    | | `-MemberExpr 0x5636a5766240 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x5636a56c9f18
    | |   `-CXXThisExpr 0x5636a5766230 <col:7> 'Timestamp *' this
    | `-MemberExpr 0x5636a5766340 <col:7> 'Timestamp::rep_t' xvalue ._t 0x5636a56c9f18
    |   `-CXXStaticCastExpr 0x5636a5766310 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
    |     `-DeclRefExpr 0x5636a57662e0 <col:7> 'Timestamp' lvalue ParmVar 0x5636a53d8388 '' 'Timestamp &&'
    `-ReturnStmt 0x5636a5766458 <col:7>
      `-UnaryOperator 0x5636a5766440 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x5636a5766430 <col:7> 'Timestamp *' this

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636a5763448 <../dummy_inc/click/timer.hh:343:5, line:345:5> line:343:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x5636a5763578 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
`-CXXDestructorDecl 0x5636a5764068 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { void (%class.Timer*, i8*)* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636a574dc78 prev 0x5636a57300c0 <../dummy_inc/click/timer.hh:14:1, line:358:1> line:14:7 class Timer definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5636a574dd70 <col:1, col:7> col:7 implicit referenced class Timer
|-AccessSpecDecl 0x5636a574de00 <col:15, col:21> col:15 public
|-CXXConstructorDecl 0x5636a574de60 <line:22:5, col:11> col:5 Timer 'void ()'
|-CXXRecordDecl 0x5636a574df08 <line:24:5, line:25:5> line:24:12 referenced struct do_nothing_t definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| `-CXXRecordDecl 0x5636a574e028 <col:5, col:12> col:12 implicit struct do_nothing_t
|-CXXConstructorDecl 0x5636a574e1c8 <line:32:5, col:37> col:5 Timer 'void (const Timer::do_nothing_t &)'
| `-ParmVarDecl 0x5636a574e108 <col:11, col:31> col:31 unused 'const Timer::do_nothing_t &'
|-CXXConstructorDecl 0x5636a574e418 <line:38:5, col:43> col:5 Timer 'void (TimerCallback, void *)'
| |-ParmVarDecl 0x5636a574e288 <col:11, col:25> col:25 f 'TimerCallback':'void (*)(Timer *, void *)'
| `-ParmVarDecl 0x5636a574e308 <col:28, col:34> col:34 user_data 'void *'
|-CXXConstructorDecl 0x5636a574e5a8 <line:43:5, col:27> col:5 Timer 'void (Element *)'
| `-ParmVarDecl 0x5636a574e4e0 <col:11, col:20> col:20 element 'Element *'
|-CXXConstructorDecl 0x5636a574e728 <line:47:5, col:21> col:5 Timer 'void (Task *)'
| `-ParmVarDecl 0x5636a574e668 <col:11, col:17> col:17 task 'Task *'
|-CXXConstructorDecl 0x5636a574e8d8 <line:52:5, col:25> col:5 Timer 'void (const Timer &)'
| `-ParmVarDecl 0x5636a574e818 <col:11, col:24> col:24 x 'const Timer &'
|-CXXDestructorDecl 0x5636a574e9d0 <line:55:5, line:58:5> line:55:12 ~Timer 'void () noexcept' inline
| `-CompoundStmt 0x5636a5764240 <col:21, line:58:5>
|   `-IfStmt 0x5636a5764228 <line:56:2, line:57:17>
|     |-CXXMemberCallExpr 0x5636a5764190 <line:56:6, col:16> 'bool'
|     | `-MemberExpr 0x5636a5764160 <col:6> '<bound member function type>' ->scheduled 0x5636a574f228
|     |   `-ImplicitCastExpr 0x5636a57641b0 <col:6> 'const Timer *' <NoOp>
|     |     `-CXXThisExpr 0x5636a5764150 <col:6> 'Timer *' implicit this
|     `-CXXMemberCallExpr 0x5636a5764208 <line:57:6, col:17> 'void'
|       `-MemberExpr 0x5636a57641d8 <col:6> '<bound member function type>' ->unschedule 0x5636a57628f0
|         `-CXXThisExpr 0x5636a57641c8 <col:6> 'Timer *' implicit this
|-CXXMethodDecl 0x5636a574ead0 <line:62:5, line:65:5> line:62:17 used assign 'void ()' inline
| `-CompoundStmt 0x5636a57643e0 <col:26, line:65:5>
|   |-BinaryOperator 0x5636a5764300 <line:63:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5636a5764298 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5636a5763578
|   | | `-MemberExpr 0x5636a5764268 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5636a5763638
|   | |   `-CXXThisExpr 0x5636a5764258 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5636a57642e8 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5636a57642c8 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5636a5763a98 'do_nothing_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5636a57643c0 <line:64:2, col:20> 'void *' lvalue '='
|     |-MemberExpr 0x5636a5764330 <col:2> 'void *' lvalue ->_thunk 0x5636a57636b8
|     | `-CXXThisExpr 0x5636a5764320 <col:2> 'Timer *' implicit this
|     `-CStyleCastExpr 0x5636a5764398 <col:11, col:20> 'void *' <IntegralToPointer>
|       `-IntegerLiteral 0x5636a5764360 <col:20> 'int' 1
|-CXXMethodDecl 0x5636a574ec10 <line:68:5, line:71:5> line:68:17 assign 'void (const Timer::do_nothing_t &)' inline
| |-ParmVarDecl 0x5636a574eb80 <col:24, col:44> col:44 used unused 'const Timer::do_nothing_t &'
| `-CompoundStmt 0x5636a5764540 <col:52, line:71:5>
|   |-CStyleCastExpr 0x5636a5764430 <line:69:2, col:9> 'void' <ToVoid>
|   | `-DeclRefExpr 0x5636a5764400 <col:9> 'const Timer::do_nothing_t' lvalue ParmVar 0x5636a574eb80 'unused' 'const Timer::do_nothing_t &'
|   `-CXXMemberCallExpr 0x5636a5764520 <line:70:2, col:9> 'void'
|     `-MemberExpr 0x5636a57644f0 <col:2> '<bound member function type>' ->assign 0x5636a574ead0
|       `-CXXThisExpr 0x5636a57644e0 <col:2> 'Timer *' implicit this
|-CXXMethodDecl 0x5636a574ede0 <line:76:5, line:79:5> line:76:17 assign 'void (TimerCallback, void *)' inline
| |-ParmVarDecl 0x5636a574ecc8 <col:24, col:38> col:38 used f 'TimerCallback':'void (*)(Timer *, void *)'
| |-ParmVarDecl 0x5636a574ed48 <col:41, col:47> col:47 used user_data 'void *'
| `-CompoundStmt 0x5636a57646c0 <col:58, line:79:5>
|   |-BinaryOperator 0x5636a5764608 <line:77:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5636a57645a0 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5636a5763578
|   | | `-MemberExpr 0x5636a5764570 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5636a5763638
|   | |   `-CXXThisExpr 0x5636a5764560 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5636a57645f0 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' <LValueToRValue>
|   |   `-DeclRefExpr 0x5636a57645d0 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue ParmVar 0x5636a574ecc8 'f' 'TimerCallback':'void (*)(Timer *, void *)'
|   `-BinaryOperator 0x5636a57646a0 <line:78:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5636a5764638 <col:2> 'void *' lvalue ->_thunk 0x5636a57636b8
|     | `-CXXThisExpr 0x5636a5764628 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5636a5764688 <col:11> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x5636a5764668 <col:11> 'void *' lvalue ParmVar 0x5636a574ed48 'user_data' 'void *'
|-CXXMethodDecl 0x5636a574ef30 <line:84:5, line:87:5> line:84:10 assign 'void (Element *)'
| |-ParmVarDecl 0x5636a574eea0 <col:17, col:26> col:26 used element 'Element *'
| `-CompoundStmt 0x5636a5764858 <col:35, line:87:5>
|   |-BinaryOperator 0x5636a5764788 <line:85:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5636a5764720 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5636a5763578
|   | | `-MemberExpr 0x5636a57646f0 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5636a5763638
|   | |   `-CXXThisExpr 0x5636a57646e0 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5636a5764770 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5636a5764750 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5636a5763c70 'element_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5636a5764838 <line:86:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5636a57647b8 <col:2> 'void *' lvalue ->_thunk 0x5636a57636b8
|     | `-CXXThisExpr 0x5636a57647a8 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5636a5764820 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x5636a5764808 <col:11> 'Element *' <LValueToRValue>
|         `-DeclRefExpr 0x5636a57647e8 <col:11> 'Element *' lvalue ParmVar 0x5636a574eea0 'element' 'Element *'
|-CXXMethodDecl 0x5636a574f078 <line:91:5, line:94:5> line:91:10 assign 'void (Task *)'
| |-ParmVarDecl 0x5636a574efe8 <col:17, col:23> col:23 used task 'Task *'
| `-CompoundStmt 0x5636a57649f0 <col:29, line:94:5>
|   |-BinaryOperator 0x5636a5764920 <line:92:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5636a57648b8 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5636a5763578
|   | | `-MemberExpr 0x5636a5764888 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5636a5763638
|   | |   `-CXXThisExpr 0x5636a5764878 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5636a5764908 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5636a57648e8 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5636a5763e48 'task_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5636a57649d0 <line:93:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5636a5764950 <col:2> 'void *' lvalue ->_thunk 0x5636a57636b8
|     | `-CXXThisExpr 0x5636a5764940 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5636a57649b8 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x5636a57649a0 <col:11> 'Task *' <LValueToRValue>
|         `-DeclRefExpr 0x5636a5764980 <col:11> 'Task *' lvalue ParmVar 0x5636a574efe8 'task' 'Task *'
|-CXXMethodDecl 0x5636a574f168 <line:98:5, line:100:5> line:98:17 initialized 'bool () const' inline
| `-CompoundStmt 0x5636a5764ad0 <col:37, line:100:5>
|   `-ReturnStmt 0x5636a5764ac0 <line:99:2, col:19>
|     `-BinaryOperator 0x5636a5764aa0 <col:9, col:19> 'bool' '!='
|       |-ImplicitCastExpr 0x5636a5764a70 <col:9> 'Element *' <LValueToRValue>
|       | `-MemberExpr 0x5636a5764a20 <col:9> 'Element *const' lvalue ->_owner 0x5636a5763718
|       |   `-CXXThisExpr 0x5636a5764a10 <col:9> 'const Timer *' implicit this
|       `-ImplicitCastExpr 0x5636a5764a88 <col:19> 'Element *' <NullToPointer>
|         `-IntegerLiteral 0x5636a5764a50 <col:19> 'int' 0
|-CXXMethodDecl 0x5636a574f228 <line:103:5, line:105:5> line:103:17 used scheduled 'bool () const' inline
| `-CompoundStmt 0x5636a5764b90 <col:35, line:105:5>
|   `-ReturnStmt 0x5636a5764b80 <line:104:2, col:23>
|     `-BinaryOperator 0x5636a5764b60 <col:9, col:23> 'bool' '!='
|       |-ImplicitCastExpr 0x5636a5764b48 <col:9> 'int' <LValueToRValue>
|       | `-MemberExpr 0x5636a5764af8 <col:9> 'const int' lvalue ->_schedpos1 0x5636a5763398
|       |   `-CXXThisExpr 0x5636a5764ae8 <col:9> 'const Timer *' implicit this
|       `-IntegerLiteral 0x5636a5764b28 <col:23> 'int' 0
|-CXXMethodDecl 0x5636a574f2e8 <line:116:5, line:118:5> line:116:29 expiry_steady 'const Timestamp &() const' inline
| `-CompoundStmt 0x5636a5764bf8 <col:51, line:118:5>
|   `-ReturnStmt 0x5636a5764be8 <line:117:2, col:9>
|     `-MemberExpr 0x5636a5764bb8 <col:9> 'const Timestamp' lvalue ->_expiry_s 0x5636a57633f8
|       `-CXXThisExpr 0x5636a5764ba8 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5636a574f3a8 <line:131:5, line:136:5> line:131:22 expiry 'Timestamp () const' inline
| `-CompoundStmt 0x5636a5765150 <col:37, line:136:5>
|   `-IfStmt 0x5636a5765128 <line:132:2, line:135:13> has_else
|     |-ImplicitCastExpr 0x5636a5764cb8 <line:132:6> 'bool' <MemberPointerToBoolean>
|     | `-ImplicitCastExpr 0x5636a5764ca0 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const' <UserDefinedConversion>
|     |   `-CXXMemberCallExpr 0x5636a5764c80 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const'
|     |     `-MemberExpr 0x5636a5764c50 <col:6> '<bound member function type>' .operator int (Timestamp::*)() const 0x5636a56c2198
|     |       `-MemberExpr 0x5636a5764c20 <col:6> 'const Timestamp' lvalue ->_expiry_s 0x5636a57633f8
|     |         `-CXXThisExpr 0x5636a5764c10 <col:6> 'const Timer *' implicit this
|     |-ReturnStmt 0x5636a5765098 <line:133:6, col:72>
|     | `-ExprWithCleanups 0x5636a5765080 <col:13, col:72> 'Timestamp'
|     |   `-CXXConstructExpr 0x5636a5765050 <col:13, col:72> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |     `-MaterializeTemporaryExpr 0x5636a5765038 <col:13, col:72> 'Timestamp' xvalue
|     |       `-CXXOperatorCallExpr 0x5636a5765000 <col:13, col:72> 'Timestamp'
|     |         |-ImplicitCastExpr 0x5636a5764fe8 <col:45> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         | `-DeclRefExpr 0x5636a5764fc8 <col:45> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5636a56f0970 'operator-' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |-CXXConstructExpr 0x5636a5764f68 <col:13, col:43> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |         | `-MaterializeTemporaryExpr 0x5636a5764f50 <col:13, col:43> 'Timestamp' xvalue
|     |         |   `-CXXOperatorCallExpr 0x5636a5764e78 <col:13, col:43> 'Timestamp'
|     |         |     |-ImplicitCastExpr 0x5636a5764e60 <col:23> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         |     | `-DeclRefExpr 0x5636a5764e40 <col:23> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5636a56f0630 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |     |-CXXConstructExpr 0x5636a5764de0 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|     |         |     | `-MemberExpr 0x5636a5764ce0 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x5636a57633f8
|     |         |     |   `-CXXThisExpr 0x5636a5764cd0 <col:13> 'const Timer *' implicit this
|     |         |     `-MaterializeTemporaryExpr 0x5636a5764e28 <col:25, col:43> 'const Timestamp' lvalue
|     |         |       `-ImplicitCastExpr 0x5636a5764e10 <col:25, col:43> 'const Timestamp' <NoOp>
|     |         |         `-CallExpr 0x5636a5764dc0 <col:25, col:43> 'Timestamp'
|     |         |           `-ImplicitCastExpr 0x5636a5764da8 <col:25, col:36> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |         |             `-DeclRefExpr 0x5636a5764d48 <col:25, col:36> 'Timestamp ()' lvalue CXXMethod 0x5636a56e3c90 'recent' 'Timestamp ()'
|     |         `-MaterializeTemporaryExpr 0x5636a5764fb0 <col:47, col:72> 'const Timestamp' lvalue
|     |           `-ImplicitCastExpr 0x5636a5764f98 <col:47, col:72> 'const Timestamp' <NoOp>
|     |             `-CallExpr 0x5636a5764f30 <col:47, col:72> 'Timestamp'
|     |               `-ImplicitCastExpr 0x5636a5764f18 <col:47, col:58> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |                 `-DeclRefExpr 0x5636a5764ee8 <col:47, col:58> 'Timestamp ()' lvalue CXXMethod 0x5636a553f1e0 'recent_steady' 'Timestamp ()'
|     `-ReturnStmt 0x5636a5765118 <line:135:6, col:13>
|       `-CXXConstructExpr 0x5636a57650e8 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|         `-MemberExpr 0x5636a57650b8 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x5636a57633f8
|           `-CXXThisExpr 0x5636a57650a8 <col:13> 'const Timer *' implicit this
|-CXXMethodDecl 0x5636a574f468 <line:139:5, line:141:5> line:139:20 router 'Router *() const' inline
| `-CompoundStmt 0x5636a5765238 <col:35, line:141:5>
|   `-ReturnStmt 0x5636a5765228 <line:140:2, col:24>
|     `-CXXMemberCallExpr 0x5636a57651f0 <col:9, col:24> 'Router *'
|       `-MemberExpr 0x5636a57651c0 <col:9, col:17> '<bound member function type>' ->router 0x5636a5742820
|         `-ImplicitCastExpr 0x5636a5765210 <col:9> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x5636a57651a8 <col:9> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x5636a5765178 <col:9> 'Element *const' lvalue ->_owner 0x5636a5763718
|               `-CXXThisExpr 0x5636a5765168 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5636a574f528 <line:144:5, line:146:5> line:144:21 element 'Element *() const' inline
| `-CompoundStmt 0x5636a57652b8 <col:37, line:146:5>
|   `-ReturnStmt 0x5636a57652a8 <line:145:2, col:9>
|     `-ImplicitCastExpr 0x5636a5765290 <col:9> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x5636a5765260 <col:9> 'Element *const' lvalue ->_owner 0x5636a5763718
|         `-CXXThisExpr 0x5636a5765250 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5636a574f5e8 <line:149:5, line:151:5> line:149:26 thread 'RouterThread *() const' inline
| `-CompoundStmt 0x5636a5765338 <col:41, line:151:5>
|   `-ReturnStmt 0x5636a5765328 <line:150:2, col:9>
|     `-ImplicitCastExpr 0x5636a5765310 <col:9> 'RouterThread *' <LValueToRValue>
|       `-MemberExpr 0x5636a57652e0 <col:9> 'RouterThread *const' lvalue ->_thread 0x5636a5763778
|         `-CXXThisExpr 0x5636a57652d0 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5636a574f6b0 <line:154:5, col:26> col:9 home_thread_id 'int () const'
|-CXXMethodDecl 0x5636a574f8a8 <line:171:5, col:55> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x5636a574f760 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x5636a574f7d8 <col:37, col:50> col:42 quiet 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5636a5764058 <col:50> 'bool' false
|-CXXMethodDecl 0x5636a574fa28 <line:181:5, col:35> col:10 initialize 'void (Router *)'
| `-ParmVarDecl 0x5636a574f968 <col:21, col:29> col:29 router 'Router *'
|-CXXMethodDecl 0x5636a5761be0 <line:191:5, col:57> col:10 used schedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x5636a574fae0 <col:29, col:46> col:46 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x5636a5761d28 <line:197:5, col:59> col:10 reschedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x5636a5761c98 <col:31, col:48> col:48 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x5636a5761e70 <line:210:5, col:50> col:17 used schedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5636a5761de0 <col:29, col:46> col:46 when 'const Timestamp &'
|-CXXMethodDecl 0x5636a5761fb8 <line:216:5, col:52> col:17 reschedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5636a5761f28 <col:31, col:48> col:48 when 'const Timestamp &'
|-CXXMethodDecl 0x5636a5762080 <line:221:5, line:223:5> line:221:17 schedule_now 'void ()' inline
| `-CompoundStmt 0x5636a57654a0 <col:32, line:223:5>
|   `-ExprWithCleanups 0x5636a5765488 <line:222:2, col:47> 'void'
|     `-CXXMemberCallExpr 0x5636a5765430 <col:2, col:47> 'void'
|       |-MemberExpr 0x5636a5765360 <col:2> '<bound member function type>' ->schedule_at_steady 0x5636a5761be0
|       | `-CXXThisExpr 0x5636a5765350 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5636a5765470 <col:21, col:46> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5636a5765458 <col:21, col:46> 'const Timestamp' <NoOp>
|           `-CallExpr 0x5636a5765410 <col:21, col:46> 'Timestamp'
|             `-ImplicitCastExpr 0x5636a57653f8 <col:21, col:32> 'Timestamp (*)()' <FunctionToPointerDecay>
|               `-DeclRefExpr 0x5636a57653c8 <col:21, col:32> 'Timestamp ()' lvalue CXXMethod 0x5636a553f1e0 'recent_steady' 'Timestamp ()'
|-CXXMethodDecl 0x5636a57621c0 <line:233:5, col:47> col:10 used schedule_after 'void (const Timestamp &)'
| `-ParmVarDecl 0x5636a5762130 <col:25, col:42> col:42 delta 'const Timestamp &'
|-CXXMethodDecl 0x5636a5762308 <line:239:5, line:241:5> line:239:17 used schedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5636a5762278 <col:36, col:45> col:45 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5636a5765628 <col:56, line:241:5>
|   `-ExprWithCleanups 0x5636a5765610 <line:240:2, col:40> 'void'
|     `-CXXMemberCallExpr 0x5636a57655b8 <col:2, col:40> 'void'
|       |-MemberExpr 0x5636a57654c8 <col:2> '<bound member function type>' ->schedule_after 0x5636a57621c0
|       | `-CXXThisExpr 0x5636a57654b8 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5636a57655f8 <col:17, col:39> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5636a57655e0 <col:17, col:39> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x5636a5765578 <col:17, col:39> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-ImplicitCastExpr 0x5636a5765548 <col:27> 'uint32_t':'unsigned int' <LValueToRValue>
|             | `-DeclRefExpr 0x5636a5765508 <col:27> 'uint32_t':'unsigned int' lvalue ParmVar 0x5636a5762278 'delta_sec' 'uint32_t':'unsigned int'
|             `-ImplicitCastExpr 0x5636a5765560 <col:38> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5636a5765528 <col:38> 'int' 0
|-CXXMethodDecl 0x5636a5762450 <line:247:5, line:249:5> line:247:17 used schedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5636a57623c0 <col:37, col:46> col:46 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5636a5765898 <col:58, line:249:5>
|   `-ExprWithCleanups 0x5636a5765880 <line:248:2, col:49> 'void'
|     `-CXXMemberCallExpr 0x5636a5765828 <col:2, col:49> 'void'
|       |-MemberExpr 0x5636a5765650 <col:2> '<bound member function type>' ->schedule_after 0x5636a57621c0
|       | `-CXXThisExpr 0x5636a5765640 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5636a5765868 <col:17, col:48> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5636a5765850 <col:17, col:48> 'const Timestamp' <NoOp>
|           `-CallExpr 0x5636a57657d0 <col:17, col:48> 'Timestamp'
|             |-ImplicitCastExpr 0x5636a57657b8 <col:17, col:28> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5636a5765728 <col:17, col:28> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5636a56c3f88 'make_msec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x5636a5765810 <col:38> 'Timestamp::value_type':'long' <IntegralCast>
|               `-ImplicitCastExpr 0x5636a57657f8 <col:38> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5636a5765708 <col:38> 'uint32_t':'unsigned int' lvalue ParmVar 0x5636a57623c0 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636a5762598 <line:259:5, line:261:5> line:259:17 reschedule_after 'void (const Timestamp &)' inline
| |-ParmVarDecl 0x5636a5762508 <col:34, col:51> col:51 used delta 'const Timestamp &'
| `-CompoundStmt 0x5636a5765a78 <col:58, line:261:5>
|   `-ExprWithCleanups 0x5636a5765a60 <line:260:2, col:38> 'void'
|     `-CXXMemberCallExpr 0x5636a5765a08 <col:2, col:38> 'void'
|       |-MemberExpr 0x5636a57658c0 <col:2> '<bound member function type>' ->schedule_at_steady 0x5636a5761be0
|       | `-CXXThisExpr 0x5636a57658b0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5636a5765a48 <col:21, col:33> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5636a5765a30 <col:21, col:33> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x5636a57659d0 <col:21, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x5636a57659b8 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5636a5765998 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5636a56f0630 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x5636a5765968 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x5636a5765950 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x5636a5765900 <col:21> 'Timestamp' lvalue ->_expiry_s 0x5636a57633f8
|             |     `-CXXThisExpr 0x5636a57658f0 <col:21> 'Timer *' implicit this
|             `-DeclRefExpr 0x5636a5765930 <col:33> 'const Timestamp' lvalue ParmVar 0x5636a5762508 'delta' 'const Timestamp &'
|-CXXMethodDecl 0x5636a57626e0 <line:268:5, line:270:5> line:268:17 used reschedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5636a5762650 <col:38, col:47> col:47 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5636a5765d50 <col:58, line:270:5>
|   `-ExprWithCleanups 0x5636a5765d38 <line:269:2, col:79> 'void'
|     `-CXXMemberCallExpr 0x5636a5765ce0 <col:2, col:79> 'void'
|       |-MemberExpr 0x5636a5765aa0 <col:2> '<bound member function type>' ->schedule_at_steady 0x5636a5761be0
|       | `-CXXThisExpr 0x5636a5765a90 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5636a5765d20 <col:21, col:78> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5636a5765d08 <col:21, col:78> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x5636a5765ca0 <col:21, col:78> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-BinaryOperator 0x5636a5765bd8 <col:31, col:49> 'unsigned int' '+'
|             | |-ImplicitCastExpr 0x5636a5765bc0 <col:31, col:45> 'unsigned int' <IntegralCast>
|             | | `-CXXMemberCallExpr 0x5636a5765b50 <col:31, col:45> 'Timestamp::seconds_type':'int'
|             | |   `-MemberExpr 0x5636a5765b20 <col:31, col:41> '<bound member function type>' .sec 0x5636a5540cd8
|             | |     `-ImplicitCastExpr 0x5636a5765b70 <col:31> 'const Timestamp' lvalue <NoOp>
|             | |       `-MemberExpr 0x5636a5765af0 <col:31> 'Timestamp' lvalue ->_expiry_s 0x5636a57633f8
|             | |         `-CXXThisExpr 0x5636a5765ae0 <col:31> 'Timer *' implicit this
|             | `-ImplicitCastExpr 0x5636a5765ba8 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|             |   `-DeclRefExpr 0x5636a5765b88 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x5636a5762650 'delta_sec' 'uint32_t':'unsigned int'
|             `-CXXMemberCallExpr 0x5636a5765c68 <col:60, col:77> 'uint32_t':'unsigned int'
|               `-MemberExpr 0x5636a5765c38 <col:60, col:70> '<bound member function type>' .subsec 0x5636a55413d0
|                 `-ImplicitCastExpr 0x5636a5765c88 <col:60> 'const Timestamp' lvalue <NoOp>
|                   `-MemberExpr 0x5636a5765c08 <col:60> 'Timestamp' lvalue ->_expiry_s 0x5636a57633f8
|                     `-CXXThisExpr 0x5636a5765bf8 <col:60> 'Timer *' implicit this
|-CXXMethodDecl 0x5636a5762828 <line:277:5, line:279:5> line:277:17 used reschedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5636a5762798 <col:39, col:48> col:48 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5636a5766088 <col:60, line:279:5>
|   `-ExprWithCleanups 0x5636a5766070 <line:278:2, col:65> 'void'
|     `-CXXMemberCallExpr 0x5636a5766018 <col:2, col:65> 'void'
|       |-MemberExpr 0x5636a5765d78 <col:2> '<bound member function type>' ->schedule_at_steady 0x5636a5761be0
|       | `-CXXThisExpr 0x5636a5765d68 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5636a5766058 <col:21, col:64> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5636a5766040 <col:21, col:64> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x5636a5765fe0 <col:21, col:64> 'Timestamp'
|             |-ImplicitCastExpr 0x5636a5765fc8 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5636a5765fa8 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5636a56f0630 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x5636a5765f48 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x5636a5765f30 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x5636a5765db8 <col:21> 'Timestamp' lvalue ->_expiry_s 0x5636a57633f8
|             |     `-CXXThisExpr 0x5636a5765da8 <col:21> 'Timer *' implicit this
|             `-MaterializeTemporaryExpr 0x5636a5765f90 <col:33, col:64> 'const Timestamp' lvalue
|               `-ImplicitCastExpr 0x5636a5765f78 <col:33, col:64> 'const Timestamp' <NoOp>
|                 `-CallExpr 0x5636a5765ed8 <col:33, col:64> 'Timestamp'
|                   |-ImplicitCastExpr 0x5636a5765ec0 <col:33, col:44> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|                   | `-DeclRefExpr 0x5636a5765e90 <col:33, col:44> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5636a56c3f88 'make_msec' 'Timestamp (Timestamp::value_type)'
|                   `-ImplicitCastExpr 0x5636a5765f18 <col:54> 'Timestamp::value_type':'long' <IntegralCast>
|                     `-ImplicitCastExpr 0x5636a5765f00 <col:54> 'uint32_t':'unsigned int' <LValueToRValue>
|                       `-DeclRefExpr 0x5636a5765e70 <col:54> 'uint32_t':'unsigned int' lvalue ParmVar 0x5636a5762798 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636a57628f0 <line:285:5, col:21> col:10 used unschedule 'void ()'
|-CXXMethodDecl 0x5636a57629b0 <line:288:5, line:291:5> line:288:17 clear 'void ()' inline
| `-CompoundStmt 0x5636a5766550 <col:25, line:291:5>
|   |-CXXMemberCallExpr 0x5636a57660e0 <line:289:2, col:13> 'void'
|   | `-MemberExpr 0x5636a57660b0 <col:2> '<bound member function type>' ->unschedule 0x5636a57628f0
|   |   `-CXXThisExpr 0x5636a57660a0 <col:2> 'Timer *' implicit this
|   `-ExprWithCleanups 0x5636a5766538 <line:290:2, col:24> 'Timestamp' lvalue
|     `-CXXOperatorCallExpr 0x5636a5766500 <col:2, col:24> 'Timestamp' lvalue
|       |-ImplicitCastExpr 0x5636a57664e8 <col:12> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5636a5766198 <col:12> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x5636a53d8278 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|       |-MemberExpr 0x5636a5766110 <col:2> 'Timestamp' lvalue ->_expiry_s 0x5636a57633f8
|       | `-CXXThisExpr 0x5636a5766100 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5636a5766180 <col:14, col:24> 'Timestamp' xvalue
|         `-CXXTemporaryObjectExpr 0x5636a5766150 <col:14, col:24> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x5636a5762a70 <line:304:5, line:310:5> line:304:29 adjustment 'Timestamp ()' static inline
| `-CompoundStmt 0x5636a57668a8 <col:42, line:310:5>
|   |-IfStmt 0x5636a57666f0 <line:306:2, line:307:23>
|   | |-CallExpr 0x5636a5766620 <line:306:6, col:30> 'bool'
|   | | `-ImplicitCastExpr 0x5636a5766608 <col:6, col:17> 'bool (*)()' <FunctionToPointerDecay>
|   | |   `-DeclRefExpr 0x5636a57665a8 <col:6, col:17> 'bool ()' lvalue CXXMethod 0x5636a56e2100 'warp_jumping' 'bool ()'
|   | `-ReturnStmt 0x5636a57666e0 <line:307:6, col:23>
|   |   `-ExprWithCleanups 0x5636a57666c8 <col:13, col:23> 'Timestamp'
|   |     `-CXXConstructExpr 0x5636a5766698 <col:13, col:23> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5636a5766680 <col:13, col:23> 'Timestamp' xvalue
|   |         `-CXXTemporaryObjectExpr 0x5636a5766650 <col:13, col:23> 'Timestamp' 'void ()'
|   `-ReturnStmt 0x5636a5766898 <line:309:2, col:33>
|     `-ExprWithCleanups 0x5636a5766880 <col:9, col:33> 'Timestamp'
|       `-CXXConstructExpr 0x5636a5766850 <col:9, col:33> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5636a5766838 <col:9, col:33> 'Timestamp' xvalue
|           `-CallExpr 0x5636a57667f8 <col:9, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x5636a57667e0 <col:9, col:20> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5636a57667b0 <col:9, col:20> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5636a56c42a0 'make_usec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x5636a5766820 <col:30> 'Timestamp::value_type':'long' <IntegralCast>
|               `-IntegerLiteral 0x5636a5766790 <col:30> 'int' 500
|-CXXMethodDecl 0x5636a5762bb0 <line:317:5, col:80> col:17 schedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x5636a5762b20 <col:34, col:43> col:43 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5636a5762c58 <col:69> "" ""
|-CXXMethodDecl 0x5636a5762d68 <line:323:5, col:81> col:17 schedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x5636a5762cd8 <col:35, col:44> col:44 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5636a5762e10 <col:70> "" ""
|-CXXMethodDecl 0x5636a5762f20 <line:329:5, col:82> col:17 reschedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x5636a5762e90 <col:36, col:45> col:45 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5636a5762fc8 <col:71> "" ""
|-CXXMethodDecl 0x5636a57630d8 <line:335:5, col:83> col:17 reschedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x5636a5763048 <col:37, col:46> col:46 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5636a5763180 <col:72> "" ""
|-EnumDecl 0x5636a57631f0 <line:337:5, col:27> col:5
| `-EnumConstantDecl 0x5636a57632f0 <col:12, col:25> col:12 behind_sec 'Timer::(anonymous enum at ../dummy_inc/click/timer.hh:337:5)'
|   `-ImplicitCastExpr 0x5636a5763340 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5636a57632d0 <col:25> 'int' Int: 1
|       `-IntegerLiteral 0x5636a57632b0 <col:25> 'int' 1
|-AccessSpecDecl 0x5636a5763358 <line:339:3, col:10> col:3 private
|-FieldDecl 0x5636a5763398 <line:341:5, col:9> col:9 referenced _schedpos1 'int'
|-FieldDecl 0x5636a57633f8 <line:342:5, col:15> col:15 referenced _expiry_s 'Timestamp'
|-CXXRecordDecl 0x5636a5763448 <line:343:5, line:345:5> line:343:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x5636a5763578 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
| `-CXXDestructorDecl 0x5636a5764068 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-FieldDecl 0x5636a5763638 <col:5, line:345:7> col:7 referenced _hook 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)'
|-FieldDecl 0x5636a57636b8 <line:346:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x5636a5763718 <line:347:5, col:14> col:14 referenced _owner 'Element *'
|-FieldDecl 0x5636a5763778 <line:348:5, col:19> col:19 referenced _thread 'RouterThread *'
|-CXXMethodDecl 0x5636a57638c8 <line:350:5, col:36> col:12 operator= 'Timer &(const Timer &)'
| `-ParmVarDecl 0x5636a57637d8 <col:22, col:35> col:35 x 'const Timer &'
|-CXXMethodDecl 0x5636a5763a98 <line:352:5, col:58> col:17 used do_nothing_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5636a5763980 <col:33, col:40> col:40 t 'Timer *'
| `-ParmVarDecl 0x5636a5763a00 <col:43, col:49> col:49 user_data 'void *'
|-CXXMethodDecl 0x5636a5763c70 <line:353:5, col:55> col:17 used element_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5636a5763b58 <col:30, col:37> col:37 t 'Timer *'
| `-ParmVarDecl 0x5636a5763bd8 <col:40, col:46> col:46 user_data 'void *'
|-CXXMethodDecl 0x5636a5763e48 <line:354:5, col:52> col:17 used task_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5636a5763d30 <col:27, col:34> col:34 t 'Timer *'
| `-ParmVarDecl 0x5636a5763db0 <col:37, col:43> col:43 user_data 'void *'
`-FriendDecl 0x5636a5764018 <line:356:5, col:18> col:12 'class TimerSet':'TimerSet'

Layout: <CGRecordLayout
  LLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  NonVirtualBaseLLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<struct in_addr>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   struct in_addr * _ptr
        24 |   struct in_addr _slot
        24 |     in_addr_t s_addr
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class String>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class String * _ptr
        24 |   class String _slot
        24 |     struct String::rep_t _r
        24 |       const char * data
        32 |       int length
        40 |       struct String::memo_t * memo
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned short>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned short * _ptr
        24 |   unsigned short _slot
           | [sizeof=32, dsize=26, align=8,
           |  nvsize=26, nvalign=8]

*** Dumping AST Record Layout
         0 | struct click_icmp_tstamp
         0 |   uint8_t icmp_type
         1 |   uint8_t icmp_code
         2 |   uint16_t icmp_cksum
         4 |   uint16_t icmp_identifier
         6 |   uint16_t icmp_sequence
         8 |   uint32_t icmp_originate
        12 |   uint32_t icmp_receive
        16 |   uint32_t icmp_transmit
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | struct click_icmp
         0 |   uint8_t icmp_type
         1 |   uint8_t icmp_code
         2 |   uint16_t icmp_cksum
         4 |   uint32_t padding
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<struct in_addr> (empty)
         0 |   class IPAddressArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5636a55443c8 <../dummy_inc/click/ipaddress.hh:399:1, col:69> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IPAddressArg'
|-TemplateArgument type 'in_addr'
|-CXXRecordDecl 0x5636a5544628 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5636a58d96a8 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5636a58d97a8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<struct in_addr> &)' inline default trivial noexcept-unevaluated 0x5636a58d97a8
| `-ParmVarDecl 0x5636a58d98b8 <col:19> col:19 'const DefaultArg<struct in_addr> &'
|-CXXConstructorDecl 0x5636a58d9958 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<struct in_addr> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5636a58d9a68 <col:19> col:19 used 'DefaultArg<struct in_addr> &&'
| |-CXXCtorInitializer 'IPAddressArg'
| | `-CXXConstructExpr 0x5636a58db3d0 <col:19> 'IPAddressArg' 'void (IPAddressArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5636a58db3a0 <col:19> 'IPAddressArg' xvalue <UncheckedDerivedToBase (IPAddressArg)>
| |     `-CXXStaticCastExpr 0x5636a58db370 <col:19> 'DefaultArg<struct in_addr>' xvalue static_cast<struct DefaultArg<struct in_addr> &&> <NoOp>
| |       `-DeclRefExpr 0x5636a58db340 <col:19> 'DefaultArg<struct in_addr>' lvalue ParmVar 0x5636a58d9a68 '' 'DefaultArg<struct in_addr> &&'
| `-CompoundStmt 0x5636a58db440 <col:19>
`-CXXDestructorDecl 0x5636a58d9b08 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636a57fe6f0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5636a57fe808 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x5636a57fe898 <col:16, col:22> col:16 public
|-EnumDecl 0x5636a57fe8c0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x5636a57fe9c0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5636a57fec10 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a57fe9a0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5636a57fe980 <col:21> 'int' 0
| |-EnumConstantDecl 0x5636a57fea50 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5636a57fec28 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a57fea30 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x5636a57fea10 <col:24> 'int' 22
| |-EnumConstantDecl 0x5636a57feae0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5636a57fec40 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a57feac0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x5636a57feaa0 <col:24> 'int' 34
| |-EnumConstantDecl 0x5636a57feb70 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5636a57fec58 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636a57feb50 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x5636a57feb30 <col:25> 'int' 95
| `-EnumConstantDecl 0x5636a57febc0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x5636a58005d0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5636a5800a08 <col:7>
|-CXXConstructorDecl 0x5636a58006d8 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x5636a58006d8
| `-ParmVarDecl 0x5636a58007e8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x5636a5800888 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5636a5800998 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x5636a58fe1b0 <col:7>
`-CXXDestructorDecl 0x5636a5802b08 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636a57fec88 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x5636a57fede8 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x5636a57fee78 <col:32, col:38> col:32 public
|-TypedefDecl 0x5636a57feeb0 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x5636a5324070 'uint32_t' sugar
|   |-Typedef 0x5636a52364c8 'uint32_t'
|   `-TypedefType 0x5636a520f5a0 '__uint32_t' sugar
|     |-Typedef 0x5636a520f198 '__uint32_t'
|     `-BuiltinType 0x5636a51cd620 'unsigned int'
|-CXXConstructorDecl 0x5636a57feff8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x5636a57fef20 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x5636a58004d8 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5636a5800a18 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5636a57ffd90 'base' 'int'
| | `-ImplicitCastExpr 0x5636a5800578 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5636a5800538 <col:16> 'int' lvalue ParmVar 0x5636a57fef20 'b' 'int'
| `-CompoundStmt 0x5636a5800a88 <col:19, line:1046:5>
|-CXXMethodDecl 0x5636a57ff4f0 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x5636a57ff0c0 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x5636a57ff140 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x5636a57ff1b8 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x5636a57ff238 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x5636a57ff2f8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x5636a57ff378 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x5636a57ff948 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x5636a57ff5c0 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5636a57ff8a8 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5636a57ff668 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x5636a57ff708 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x5636a57ff780 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5636a58004f8 <col:82> 'const ArgContext' lvalue Var 0x5636a57f5fc8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5636a58019b8 <col:94, line:1067:5>
| |   |-DeclStmt 0x5636a5800c18 <line:1054:9, col:64>
| |   | `-VarDecl 0x5636a5800aa8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x5636a5800bd0 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x5636a5800e38 <line:1055:9, col:91>
| |   | `-VarDecl 0x5636a5800c48 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x5636a5800e10 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x5636a5800df0 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x5636a5800da0 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x5636a5800d80 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x5636a5800d28 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x5636a5800cd8 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x5636a5800d08 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x5636a5800d68 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x5636a5800d48 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x5636a5800dd0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x5636a5800f98 <line:1056:9, col:27>
| |   | `-VarDecl 0x5636a5800f30 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x5636a58013e0 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x5636a5801310 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x5636a5801290 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5636a56ee058 0x5636a5537638 0x5636a5537310 0x5636a5527ae0 0x5636a5527790 0x5636a5527080 0x5636a54f99f0 0x5636a5486ec0
| |   | | |-CallExpr 0x5636a58011d0 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x5636a5800fc0 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x5636a5801070 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5636a5801040 <col:19, col:23> '<bound member function type>' .begin 0x5636a5516ce8
| |   | | | |   `-DeclRefExpr 0x5636a5801020 <col:19> 'const String' lvalue ParmVar 0x5636a57ff668 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x5636a58010e0 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5636a58010b0 <col:32, col:36> '<bound member function type>' .end 0x5636a5516f00
| |   | | | |   `-DeclRefExpr 0x5636a5801090 <col:32> 'const String' lvalue ParmVar 0x5636a57ff668 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x5636a5801100 <col:43> 'const bool' lvalue Var 0x5636a5800aa8 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x5636a5801168 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x5636a5801148 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x5636a5801190 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x5636a5800f30 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x5636a58011b0 <col:73> 'const int' lvalue Var 0x5636a5800c48 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x5636a5801270 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x5636a5801240 <col:16, col:20> '<bound member function type>' .end 0x5636a5516f00
| |   | |     `-DeclRefExpr 0x5636a5801220 <col:16> 'const String' lvalue ParmVar 0x5636a57ff668 'str' 'const String &'
| |   | `-BinaryOperator 0x5636a58013c0 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x5636a5801358 <col:13> 'int' lvalue ->status 0x5636a57ffdf8
| |   |   | `-CXXThisExpr 0x5636a5801348 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x5636a58013a8 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x5636a5801388 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5636a57fea50 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x5636a5801630 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x5636a5801518 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x5636a5801500 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x5636a58014e8 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x5636a5801408 <col:13> 'int' lvalue ->status 0x5636a57ffdf8
| |   | | |     `-CXXThisExpr 0x5636a58013f8 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x5636a58014c8 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x5636a5801498 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x5636a5801448 <col:23> 'int' lvalue ->status 0x5636a57ffdf8
| |   | |   |   `-CXXThisExpr 0x5636a5801438 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x5636a58014b0 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x5636a5801478 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5636a57feae0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x5636a5801610 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x5636a58015b0 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x5636a5801558 <col:13, col:18> '<bound member function type>' .error 0x5636a57ad7a0
| |   |   | | `-DeclRefExpr 0x5636a5801538 <col:13> 'const ArgContext' lvalue ParmVar 0x5636a57ff780 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x5636a58015d8 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x5636a5801588 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x5636a5801600 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x5636a58015f0 <col:20> 'bool' false
| |   |-DeclStmt 0x5636a5801808 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x5636a58017b0 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x5636a5801740 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x5636a5801968 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x5636a5801820 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x5636a54bae88
| |   | |-DeclRefExpr 0x5636a5801868 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x5636a5800f30 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x5636a5801938 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x5636a58018b0 <col:64> 'V' lvalue ParmVar 0x5636a57ff708 'result' 'V &'
| |   `-ReturnStmt 0x5636a58019a8 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x5636a5801998 <col:16> 'bool' true
| |-CXXMethodDecl 0x5636a58d2278 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, int &, const ArgContext &)'
| | |-TemplateArgument type 'int'
| | |-ParmVarDecl 0x5636a58d2058 <col:27, col:41> col:41 used str 'const String &'
| | |-ParmVarDecl 0x5636a58d2128 <col:46, col:49> col:49 used result 'int &'
| | |-ParmVarDecl 0x5636a58d2190 <col:57, col:82> col:75 used args 'const ArgContext &'
| | `-CompoundStmt 0x5636a58d4010 <col:94, line:1067:5>
| |   |-DeclStmt 0x5636a58d2a88 <line:1054:9, col:64>
| |   | `-VarDecl 0x5636a58d28a8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-ImplicitCastExpr 0x5636a58d2a18 <col:36, col:55> 'bool' <LValueToRValue>
| |   |     `-DeclRefExpr 0x5636a58d29e8 <col:36, col:55> 'const bool' lvalue Var 0x5636a54aadf8 'is_signed' 'const bool' non_odr_use_constant
| |   |-DeclStmt 0x5636a58d2c68 <line:1055:9, col:91>
| |   | `-VarDecl 0x5636a58d2aa0 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x5636a58d2be8 <col:31, col:90> 'int' functional cast to int <NoOp>
| |   |     `-ImplicitCastExpr 0x5636a58d2bd0 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
| |   |       `-BinaryOperator 0x5636a58d2bb0 <col:35, col:89> 'unsigned long' '/'
| |   |         |-ParenExpr 0x5636a58d2b90 <col:35, col:69> 'unsigned long'
| |   |         | `-BinaryOperator 0x5636a58d2b70 <col:36, col:68> 'unsigned long' '-'
| |   |         |   |-BinaryOperator 0x5636a58d2b38 <col:36, col:64> 'unsigned long' '+'
| |   |         |   | |-UnaryExprOrTypeTraitExpr 0x5636a58d2b18 <col:36, col:44> 'unsigned long' sizeof 'int':'int'
| |   |         |   | `-UnaryExprOrTypeTraitExpr 0x5636a5800d08 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |         |   `-ImplicitCastExpr 0x5636a58d2b58 <col:68> 'unsigned long' <IntegralCast>
| |   |         |     `-IntegerLiteral 0x5636a5800d48 <col:68> 'int' 1
| |   |         `-UnaryExprOrTypeTraitExpr 0x5636a5800dd0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x5636a58d2e00 <line:1056:9, col:27>
| |   | `-VarDecl 0x5636a58d2d98 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
| |   |-IfStmt 0x5636a58d3288 <line:1057:9, line:1059:22>
| |   | |-BinaryOperator 0x5636a58d3230 <line:1057:13, line:1058:24> 'bool' '!='
| |   | | |-CXXMemberCallExpr 0x5636a58d30e8 <line:1057:13, col:78> 'const char *'
| |   | | | |-MemberExpr 0x5636a58d30b8 <col:13> '<bound member function type>' ->parse 0x5636a57ff4f0
| |   | | | | `-CXXThisExpr 0x5636a58d30a8 <col:13> 'IntArg *' implicit this
| |   | | | |-CXXMemberCallExpr 0x5636a58d2f48 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5636a58d2f18 <col:19, col:23> '<bound member function type>' .begin 0x5636a5516ce8
| |   | | | |   `-DeclRefExpr 0x5636a58d2ef8 <col:19> 'const String' lvalue ParmVar 0x5636a58d2058 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x5636a58d2fb8 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5636a58d2f88 <col:32, col:36> '<bound member function type>' .end 0x5636a5516f00
| |   | | | |   `-DeclRefExpr 0x5636a58d2f68 <col:32> 'const String' lvalue ParmVar 0x5636a58d2058 'str' 'const String &'
| |   | | | |-ImplicitCastExpr 0x5636a58d3158 <col:43> 'bool' <LValueToRValue>
| |   | | | | `-DeclRefExpr 0x5636a58d3138 <col:43> 'const bool' lvalue Var 0x5636a58d28a8 'is_signed' 'const bool' non_odr_use_constant
| |   | | | |-CXXFunctionalCastExpr 0x5636a58d3040 <col:54, col:67> 'int' functional cast to int <NoOp>
| |   | | | | `-ImplicitCastExpr 0x5636a58d3028 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
| |   | | | |   `-UnaryExprOrTypeTraitExpr 0x5636a58d3008 <col:58, col:66> 'unsigned long' sizeof 'int':'int'
| |   | | | |-ImplicitCastExpr 0x5636a58d3170 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
| |   | | | | `-DeclRefExpr 0x5636a58d3068 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x5636a58d2d98 'x' 'IntArg::limb_type [1]'
| |   | | | `-ImplicitCastExpr 0x5636a58d31a8 <col:73> 'int' <LValueToRValue>
| |   | | |   `-DeclRefExpr 0x5636a58d3188 <col:73> 'const int' lvalue Var 0x5636a58d2aa0 'nlimb' 'const int' non_odr_use_constant
| |   | | `-CXXMemberCallExpr 0x5636a58d3210 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x5636a58d31e0 <col:16, col:20> '<bound member function type>' .end 0x5636a5516f00
| |   | |     `-DeclRefExpr 0x5636a58d31c0 <col:16> 'const String' lvalue ParmVar 0x5636a58d2058 'str' 'const String &'
| |   | `-BinaryOperator 0x5636a58d3268 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x5636a5801358 <col:13> 'int' lvalue ->status 0x5636a57ffdf8
| |   |   | `-CXXThisExpr 0x5636a5801348 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x5636a58d3250 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x5636a5801388 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5636a57fea50 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x5636a58d3400 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x5636a58d3320 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x5636a58d3308 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x5636a58d32f0 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x5636a5801408 <col:13> 'int' lvalue ->status 0x5636a57ffdf8
| |   | | |     `-CXXThisExpr 0x5636a58013f8 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x5636a58d32d0 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x5636a58d32a0 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x5636a5801448 <col:23> 'int' lvalue ->status 0x5636a57ffdf8
| |   | |   |   `-CXXThisExpr 0x5636a5801438 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x5636a58d32b8 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x5636a5801478 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5636a57feae0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x5636a58d33e0 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x5636a58d3390 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x5636a58d3360 <col:13, col:18> '<bound member function type>' .error 0x5636a57ad7a0
| |   |   | | `-DeclRefExpr 0x5636a58d3340 <col:13> 'const ArgContext' lvalue ParmVar 0x5636a58d2190 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x5636a58d33b8 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x5636a5801588 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x5636a58d33d0 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x5636a58015f0 <col:20> 'bool' false
| |   |-DeclStmt 0x5636a58d3948 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x5636a58d38f0 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<int>::type':'unsigned int'
| |   |   `-ElaboratedType 0x5636a58d38a0 'typename make_unsigned<int>::type' sugar
| |   |     `-TypedefType 0x5636a58d3880 'make_unsigned<int>::type' sugar
| |   |       |-Typedef 0x5636a58d3810 'type'
| |   |       `-ElaboratedType 0x5636a58d37c0 'typename integer_traits<int>::unsigned_type' sugar
| |   |         `-TypedefType 0x5636a58d37a0 'integer_traits<int>::unsigned_type' sugar
| |   |           |-Typedef 0x5636a54aaf50 'unsigned_type'
| |   |           `-BuiltinType 0x5636a51cd620 'unsigned int'
| |   |-CallExpr 0x5636a58d3fa0 <line:1065:9, col:71> 'void'
| |   | |-ImplicitCastExpr 0x5636a58d3f88 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x5636a58d3f08 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x5636a58d3de8 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x5636a54bae88 'extract_integer')
| |   | |-ImplicitCastExpr 0x5636a58d3fe8 <col:25> 'const unsigned int *' <NoOp>
| |   | | `-ImplicitCastExpr 0x5636a58d3fd0 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
| |   | |   `-DeclRefExpr 0x5636a58d39a8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x5636a58d2d98 'x' 'IntArg::limb_type [1]'
| |   | `-CXXReinterpretCastExpr 0x5636a58d3a78 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <LValueBitCast>
| |   |   `-DeclRefExpr 0x5636a58d3a28 <col:64> 'int':'int' lvalue ParmVar 0x5636a58d2128 'result' 'int &'
| |   `-ReturnStmt 0x5636a58d4000 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x5636a5801998 <col:16> 'bool' true
| `-CXXMethodDecl 0x5636a5901aa8 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned short &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned short'
|   |-ParmVarDecl 0x5636a5901880 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x5636a5901958 <col:46, col:49> col:49 used result 'unsigned short &'
|   |-ParmVarDecl 0x5636a59019c0 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x5636a59036e0 <col:94, line:1067:5>
|     |-DeclStmt 0x5636a59022b8 <line:1054:9, col:64>
|     | `-VarDecl 0x5636a59020d8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x5636a5902248 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x5636a5902218 <col:36, col:55> 'const bool' lvalue Var 0x5636a54a5ef0 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x5636a5902498 <line:1055:9, col:91>
|     | `-VarDecl 0x5636a59022d0 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x5636a5902418 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x5636a5902400 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x5636a59023e0 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x5636a59023c0 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x5636a59023a0 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x5636a5902368 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x5636a5902348 <col:36, col:44> 'unsigned long' sizeof 'unsigned short':'unsigned short'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x5636a5800d08 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x5636a5902388 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x5636a5800d48 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x5636a5800dd0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x5636a59025b0 <line:1056:9, col:27>
|     | `-VarDecl 0x5636a5902548 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x5636a5902a38 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x5636a59029e0 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x5636a5902898 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x5636a5902868 <col:13> '<bound member function type>' ->parse 0x5636a57ff4f0
|     | | | | `-CXXThisExpr 0x5636a5902858 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x5636a59026f8 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5636a59026c8 <col:19, col:23> '<bound member function type>' .begin 0x5636a5516ce8
|     | | | |   `-DeclRefExpr 0x5636a59026a8 <col:19> 'const String' lvalue ParmVar 0x5636a5901880 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x5636a5902768 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5636a5902738 <col:32, col:36> '<bound member function type>' .end 0x5636a5516f00
|     | | | |   `-DeclRefExpr 0x5636a5902718 <col:32> 'const String' lvalue ParmVar 0x5636a5901880 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x5636a5902908 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x5636a59028e8 <col:43> 'const bool' lvalue Var 0x5636a59020d8 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x5636a59027f0 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x5636a59027d8 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x5636a59027b8 <col:58, col:66> 'unsigned long' sizeof 'unsigned short':'unsigned short'
|     | | | |-ImplicitCastExpr 0x5636a5902920 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x5636a5902818 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x5636a5902548 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x5636a5902958 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x5636a5902938 <col:73> 'const int' lvalue Var 0x5636a59022d0 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x5636a59029c0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x5636a5902990 <col:16, col:20> '<bound member function type>' .end 0x5636a5516f00
|     | |     `-DeclRefExpr 0x5636a5902970 <col:16> 'const String' lvalue ParmVar 0x5636a5901880 'str' 'const String &'
|     | `-BinaryOperator 0x5636a5902a18 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x5636a5801358 <col:13> 'int' lvalue ->status 0x5636a57ffdf8
|     |   | `-CXXThisExpr 0x5636a5801348 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x5636a5902a00 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x5636a5801388 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5636a57fea50 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x5636a5902bb0 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x5636a5902ad0 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x5636a5902ab8 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x5636a5902aa0 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x5636a5801408 <col:13> 'int' lvalue ->status 0x5636a57ffdf8
|     | | |     `-CXXThisExpr 0x5636a58013f8 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x5636a5902a80 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x5636a5902a50 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x5636a5801448 <col:23> 'int' lvalue ->status 0x5636a57ffdf8
|     | |   |   `-CXXThisExpr 0x5636a5801438 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x5636a5902a68 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x5636a5801478 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5636a57feae0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x5636a5902b90 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x5636a5902b40 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x5636a5902b10 <col:13, col:18> '<bound member function type>' .error 0x5636a57ad7a0
|     |   | | `-DeclRefExpr 0x5636a5902af0 <col:13> 'const ArgContext' lvalue ParmVar 0x5636a59019c0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x5636a5902b68 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x5636a5801588 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x5636a5902b80 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x5636a58015f0 <col:20> 'bool' false
|     |-DeclStmt 0x5636a59030f8 <line:1064:9, col:64>
|     | `-TypedefDecl 0x5636a59030a0 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned short>::type':'unsigned short'
|     |   `-ElaboratedType 0x5636a5903050 'typename make_unsigned<unsigned short>::type' sugar
|     |     `-TypedefType 0x5636a5903030 'make_unsigned<unsigned short>::type' sugar
|     |       |-Typedef 0x5636a5902fc0 'type'
|     |       `-ElaboratedType 0x5636a5902f70 'typename integer_traits<unsigned short>::unsigned_type' sugar
|     |         `-TypedefType 0x5636a5902f50 'integer_traits<unsigned short>::unsigned_type' sugar
|     |           |-Typedef 0x5636a54a6048 'unsigned_type'
|     |           `-BuiltinType 0x5636a51cd600 'unsigned short'
|     |-CallExpr 0x5636a5903670 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x5636a5903658 <col:9> 'void (*)(const unsigned int *, unsigned short &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x5636a59035d8 <col:9> 'void (const unsigned int *, unsigned short &)' lvalue Function 0x5636a59034b8 'extract_integer' 'void (const unsigned int *, unsigned short &)' (FunctionTemplate 0x5636a54bae88 'extract_integer')
|     | |-ImplicitCastExpr 0x5636a59036b8 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x5636a59036a0 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x5636a5903158 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x5636a5902548 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x5636a5903228 <col:28, col:70> 'unsigned_v_type':'unsigned short' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x5636a59031d8 <col:64> 'unsigned short':'unsigned short' lvalue ParmVar 0x5636a5901958 'result' 'unsigned short &'
|     `-ReturnStmt 0x5636a59036d0 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x5636a5801998 <col:16> 'bool' true
|-FunctionTemplateDecl 0x5636a57ffd08 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x5636a57ff9b8 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5636a57ffc68 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5636a57ffa68 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x5636a57ffb08 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x5636a57ffb80 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5636a5800518 <col:71> 'const ArgContext' lvalue Var 0x5636a57f5fc8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5636a5802128 <col:83, line:1083:5>
| |   |-DeclStmt 0x5636a5801a80 <line:1071:9, col:12>
| |   | `-VarDecl 0x5636a5801a18 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x5636a5802100 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x5636a5801d10 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x5636a5801b98 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x5636a5801b60 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x5636a5801aa8 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x5636a5801b00 <col:31> 'const String' lvalue ParmVar 0x5636a57ffa68 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x5636a5801b20 <col:36> 'V' lvalue Var 0x5636a5801a18 'x' 'V'
| |     | |   `-DeclRefExpr 0x5636a5801b40 <col:39> 'const ArgContext' lvalue ParmVar 0x5636a57ffb80 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x5636a5801cf0 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x5636a5801cd0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x5636a5801cb8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x5636a5801ca0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x5636a5801bc0 <col:17> 'int' lvalue ->status 0x5636a57ffdf8
| |     |     |     `-CXXThisExpr 0x5636a5801bb0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x5636a5801c80 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x5636a5801c50 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x5636a5801c00 <col:27> 'int' lvalue ->status 0x5636a57ffdf8
| |     |       |   `-CXXThisExpr 0x5636a5801bf0 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x5636a5801c68 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x5636a5801c30 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5636a57feae0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x5636a5801d40 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x5636a5801d30 <col:20> 'bool' false
| |     `-IfStmt 0x5636a58020d8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x5636a5801de0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x5636a5801db0 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5636a5801d60 <col:18> 'int' lvalue ->status 0x5636a57ffdf8
| |       | |   `-CXXThisExpr 0x5636a5801d50 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x5636a5801dc8 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x5636a5801d90 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5636a57feae0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x5636a5802018 <col:42, line:1079:9>
| |       | |-CallExpr 0x5636a5801fc0 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x5636a5801e10 <line:1076:13> '<bound member function type>' ->range_error 0x5636a5800408
| |       | | | `-CXXThisExpr 0x5636a5801e00 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x5636a5801e40 <col:25> 'const ArgContext' lvalue ParmVar 0x5636a57ffb80 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x5636a5801f20 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x5636a5801f98 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x5636a5801f78 <col:43> 'V' lvalue Var 0x5636a5801a18 'x' 'V'
| |       | `-ReturnStmt 0x5636a5802008 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x5636a5801ff8 <col:20> 'bool' false
| |       `-CompoundStmt 0x5636a58020b8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x5636a5802078 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x5636a5802038 <col:13> 'V' lvalue ParmVar 0x5636a57ffb08 'result' 'V &'
| |         | `-DeclRefExpr 0x5636a5802058 <col:22> 'V' lvalue Var 0x5636a5801a18 'x' 'V'
| |         `-ReturnStmt 0x5636a58020a8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x5636a5802098 <col:20> 'bool' true
| |-CXXMethodDecl 0x5636a5863f18 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
| | |-TemplateArgument type 'int'
| | |-ParmVarDecl 0x5636a5863cf8 <col:16, col:30> col:30 used str 'const String &'
| | |-ParmVarDecl 0x5636a5863dc8 <col:35, col:38> col:38 used result 'int &'
| | |-ParmVarDecl 0x5636a5863e30 <col:46, col:71> col:64 used args 'const ArgContext &'
| | `-CompoundStmt 0x5636a58d2888 <col:83, line:1083:5>
| |   |-DeclStmt 0x5636a58d1ec8 <line:1071:9, col:12>
| |   | `-VarDecl 0x5636a58d1e60 <col:9, col:11> col:11 used x 'int':'int'
| |   `-IfStmt 0x5636a58d2860 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x5636a58d24f0 <line:1072:13, line:1073:49> 'bool' '||'
| |     | |-UnaryOperator 0x5636a58d2418 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
| |     | | `-CXXMemberCallExpr 0x5636a58d23e0 <col:14, col:43> 'bool'
| |     | |   |-MemberExpr 0x5636a58d2398 <col:14> '<bound member function type>' ->parse_saturating 0x5636a58d2278
| |     | |   | `-CXXThisExpr 0x5636a58d2388 <col:14> 'IntArg *' implicit this
| |     | |   |-DeclRefExpr 0x5636a58d1f38 <col:31> 'const String' lvalue ParmVar 0x5636a5863cf8 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x5636a58d1f58 <col:36> 'int':'int' lvalue Var 0x5636a58d1e60 'x' 'int':'int'
| |     | |   `-DeclRefExpr 0x5636a58d1f78 <col:39> 'const ArgContext' lvalue ParmVar 0x5636a5863e30 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x5636a58d24d0 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x5636a58d24b0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x5636a58d2498 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x5636a58d2480 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x5636a5801bc0 <col:17> 'int' lvalue ->status 0x5636a57ffdf8
| |     |     |     `-CXXThisExpr 0x5636a5801bb0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x5636a58d2460 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x5636a58d2430 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x5636a5801c00 <col:27> 'int' lvalue ->status 0x5636a57ffdf8
| |     |       |   `-CXXThisExpr 0x5636a5801bf0 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x5636a58d2448 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x5636a5801c30 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5636a57feae0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x5636a58d2510 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x5636a5801d30 <col:20> 'bool' false
| |     `-IfStmt 0x5636a58d2838 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x5636a58d2550 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x5636a58d2520 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5636a5801d60 <col:18> 'int' lvalue ->status 0x5636a57ffdf8
| |       | |   `-CXXThisExpr 0x5636a5801d50 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x5636a58d2538 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x5636a5801d90 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5636a57feae0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x5636a58d2770 <col:42, line:1079:9>
| |       | |-CXXMemberCallExpr 0x5636a58d26e0 <line:1076:13, line:1077:45> 'void'
| |       | | |-MemberExpr 0x5636a5801e10 <line:1076:13> '<bound member function type>' ->range_error 0x5636a5800408
| |       | | | `-CXXThisExpr 0x5636a5801e00 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x5636a58d2570 <col:25> 'const ArgContext' lvalue ParmVar 0x5636a5863e30 'args' 'const ArgContext &'
| |       | | |-ImplicitCastExpr 0x5636a58d2748 <col:31, col:50> 'bool' <LValueToRValue>
| |       | | | `-DeclRefExpr 0x5636a58d2718 <col:31, col:50> 'const bool' lvalue Var 0x5636a54aadf8 'is_signed' 'const bool' non_odr_use_constant
| |       | | `-CXXFunctionalCastExpr 0x5636a58d26b8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
| |       | |   `-ImplicitCastExpr 0x5636a58d26a0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
| |       | |     `-ImplicitCastExpr 0x5636a58d2688 <col:43> 'int':'int' <LValueToRValue> part_of_explicit_cast
| |       | |       `-DeclRefExpr 0x5636a58d2668 <col:43> 'int':'int' lvalue Var 0x5636a58d1e60 'x' 'int':'int'
| |       | `-ReturnStmt 0x5636a58d2760 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x5636a5801ff8 <col:20> 'bool' false
| |       `-CompoundStmt 0x5636a58d2818 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x5636a58d27e8 <line:1080:13, col:22> 'int':'int' lvalue '='
| |         | |-DeclRefExpr 0x5636a58d2790 <col:13> 'int':'int' lvalue ParmVar 0x5636a5863dc8 'result' 'int &'
| |         | `-ImplicitCastExpr 0x5636a58d27d0 <col:22> 'int':'int' <LValueToRValue>
| |         |   `-DeclRefExpr 0x5636a58d27b0 <col:22> 'int':'int' lvalue Var 0x5636a58d1e60 'x' 'int':'int'
| |         `-ReturnStmt 0x5636a58d2808 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x5636a5802098 <col:20> 'bool' true
| `-CXXMethodDecl 0x5636a59014e8 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned short &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned short'
|   |-ParmVarDecl 0x5636a5901280 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x5636a5901358 <col:35, col:38> col:38 used result 'unsigned short &'
|   |-ParmVarDecl 0x5636a59013c0 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x5636a59020b8 <col:83, line:1083:5>
|     |-DeclStmt 0x5636a5901770 <line:1071:9, col:12>
|     | `-VarDecl 0x5636a5901708 <col:9, col:11> col:11 used x 'unsigned short':'unsigned short'
|     `-IfStmt 0x5636a5902090 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x5636a5901d20 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x5636a5901c48 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x5636a5901c10 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x5636a5901bc8 <col:14> '<bound member function type>' ->parse_saturating 0x5636a5901aa8
|       | |   | `-CXXThisExpr 0x5636a5901bb8 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x5636a59017e0 <col:31> 'const String' lvalue ParmVar 0x5636a5901280 'str' 'const String &'
|       | |   |-DeclRefExpr 0x5636a5901800 <col:36> 'unsigned short':'unsigned short' lvalue Var 0x5636a5901708 'x' 'unsigned short':'unsigned short'
|       | |   `-DeclRefExpr 0x5636a5901820 <col:39> 'const ArgContext' lvalue ParmVar 0x5636a59013c0 'args' 'const ArgContext &'
|       | `-ParenExpr 0x5636a5901d00 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x5636a5901ce0 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x5636a5901cc8 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x5636a5901cb0 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x5636a5801bc0 <col:17> 'int' lvalue ->status 0x5636a57ffdf8
|       |     |     `-CXXThisExpr 0x5636a5801bb0 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x5636a5901c90 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x5636a5901c60 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x5636a5801c00 <col:27> 'int' lvalue ->status 0x5636a57ffdf8
|       |       |   `-CXXThisExpr 0x5636a5801bf0 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x5636a5901c78 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x5636a5801c30 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5636a57feae0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x5636a5901d40 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x5636a5801d30 <col:20> 'bool' false
|       `-IfStmt 0x5636a5902068 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x5636a5901d80 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x5636a5901d50 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x5636a5801d60 <col:18> 'int' lvalue ->status 0x5636a57ffdf8
|         | |   `-CXXThisExpr 0x5636a5801d50 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x5636a5901d68 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x5636a5801d90 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5636a57feae0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x5636a5901fa0 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x5636a5901f10 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x5636a5801e10 <line:1076:13> '<bound member function type>' ->range_error 0x5636a5800408
|         | | | `-CXXThisExpr 0x5636a5801e00 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x5636a5901da0 <col:25> 'const ArgContext' lvalue ParmVar 0x5636a59013c0 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x5636a5901f78 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x5636a5901f48 <col:31, col:50> 'const bool' lvalue Var 0x5636a54a5ef0 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x5636a5901ee8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x5636a5901ed0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x5636a5901eb8 <col:43> 'unsigned short':'unsigned short' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x5636a5901e98 <col:43> 'unsigned short':'unsigned short' lvalue Var 0x5636a5901708 'x' 'unsigned short':'unsigned short'
|         | `-ReturnStmt 0x5636a5901f90 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x5636a5801ff8 <col:20> 'bool' false
|         `-CompoundStmt 0x5636a5902048 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x5636a5902018 <line:1080:13, col:22> 'unsigned short':'unsigned short' lvalue '='
|           | |-DeclRefExpr 0x5636a5901fc0 <col:13> 'unsigned short':'unsigned short' lvalue ParmVar 0x5636a5901358 'result' 'unsigned short &'
|           | `-ImplicitCastExpr 0x5636a5902000 <col:22> 'unsigned short':'unsigned short' <LValueToRValue>
|           |   `-DeclRefExpr 0x5636a5901fe0 <col:22> 'unsigned short':'unsigned short' lvalue Var 0x5636a5901708 'x' 'unsigned short':'unsigned short'
|           `-ReturnStmt 0x5636a5902038 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x5636a5802098 <col:20> 'bool' true
|-FieldDecl 0x5636a57ffd90 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x5636a57ffdf8 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x5636a57ffe48 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x5636a5800100 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x5636a57ffe88 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x5636a57fff08 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x5636a57fff80 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x5636a5800000 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x5636a5800408 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x5636a58001d0 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x5636a5800248 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x5636a58002e0 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x5636a5802988 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x5636a5802988
| `-ParmVarDecl 0x5636a5802a98 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x5636a5802c18 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5636a5802d28 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5636a58fe1c0 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5636a58fe190 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x5636a58fe160 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5636a58fe130 <col:7> 'IntArg' lvalue ParmVar 0x5636a5802d28 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5636a57ffd90 'base' 'int'
| | `-ImplicitCastExpr 0x5636a58fe2b8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5636a58fe288 <col:7> 'int' xvalue .base 0x5636a57ffd90
| |     `-CXXStaticCastExpr 0x5636a58fe258 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5636a58fe228 <col:7> 'IntArg' lvalue ParmVar 0x5636a5802d28 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5636a57ffdf8 'status' 'int'
| | `-ImplicitCastExpr 0x5636a58fe388 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5636a58fe358 <col:7> 'int' xvalue .status 0x5636a57ffdf8
| |     `-CXXStaticCastExpr 0x5636a58fe328 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5636a58fe2f8 <col:7> 'IntArg' lvalue ParmVar 0x5636a5802d28 '' 'IntArg &&'
| `-CompoundStmt 0x5636a58fe3e0 <col:7>
`-CXXDestructorDecl 0x5636a5863a78 <col:7> col:7 implicit referenced ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5636a58f31f8 <../dummy_inc/click/args.hh:850:5, line:860:5> line:851:12 struct SlotT definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Args::Slot'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5636a58f35f8 prev 0x5636a58f31f8 <col:5, col:12> col:12 implicit struct SlotT
|-CXXConstructorDecl 0x5636a58f37f0 <line:852:9, line:854:9> line:852:9 used SlotT 'void (String *)'
| |-ParmVarDecl 0x5636a58f36f8 <col:15, col:18> col:18 used ptr 'String *'
| |-CXXCtorInitializer 'Args::Slot'
| | `-CXXConstructExpr 0x5636a58f4738 <col:9> 'Args::Slot' 'void ()'
| |-CXXCtorInitializer Field 0x5636a58f3970 '_ptr' 'String *'
| | `-ImplicitCastExpr 0x5636a58f46f8 <line:853:20> 'String *' <LValueToRValue>
| |   `-DeclRefExpr 0x5636a58f46b8 <col:20> 'String *' lvalue ParmVar 0x5636a58f36f8 'ptr' 'String *'
| |-CXXCtorInitializer Field 0x5636a58f39d0 '_slot' 'String':'String'
| | `-CXXConstructExpr 0x5636a58f4798 <line:852:9> 'String':'String' 'void ()'
| `-CompoundStmt 0x5636a57f5df0 <line:853:25, line:854:9>
|-CXXMethodDecl 0x5636a58f38b0 <line:855:9, line:857:9> line:855:14 used store 'void ()'
| |-Overrides: [ 0x5636a57c79f0 Slot::store 'void ()' ]
| `-CompoundStmt 0x5636a58f4e58 <col:22, line:857:9>
|   `-CallExpr 0x5636a58f4e10 <line:856:13, col:40> 'void'
|     |-ImplicitCastExpr 0x5636a58f4df8 <col:13> 'void (*)(String &, const String &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5636a58f4d78 <col:13> 'void (String &, const String &)' lvalue Function 0x5636a58f4c58 'assign_consume' 'void (String &, const String &)' (FunctionTemplate 0x5636a5490558 'assign_consume')
|     |-UnaryOperator 0x5636a58f4928 <col:28, col:29> 'String':'String' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x5636a58f4910 <col:29> 'String *' <LValueToRValue>
|     |   `-MemberExpr 0x5636a58f48e0 <col:29> 'String *' lvalue ->_ptr 0x5636a58f3970
|     |     `-CXXThisExpr 0x5636a58f48d0 <col:29> 'Args::SlotT<String> *' implicit this
|     `-ImplicitCastExpr 0x5636a58f4e40 <col:35> 'const String':'const String' lvalue <NoOp>
|       `-MemberExpr 0x5636a58f4950 <col:35> 'String':'String' lvalue ->_slot 0x5636a58f39d0
|         `-CXXThisExpr 0x5636a58f4940 <col:35> 'Args::SlotT<String> *' implicit this
|-FieldDecl 0x5636a58f3970 <line:858:9, col:12> col:12 referenced _ptr 'String *'
|-FieldDecl 0x5636a58f39d0 <line:859:9, col:11> col:11 referenced _slot 'String':'String'
|-CXXConstructorDecl 0x5636a58f3a48 <line:851:12> col:12 implicit SlotT 'void (const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x5636a58f3a48
| `-ParmVarDecl 0x5636a58f3b58 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXConstructorDecl 0x5636a58f3bf8 <col:12> col:12 implicit SlotT 'void (Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x5636a58f3bf8
| `-ParmVarDecl 0x5636a58f3d08 <col:12> col:12 'Args::SlotT<String> &&'
|-CXXMethodDecl 0x5636a58f3da8 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x5636a58f3da8
| `-ParmVarDecl 0x5636a58f3eb8 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXMethodDecl 0x5636a58f3f28 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x5636a58f3f28
| `-ParmVarDecl 0x5636a58f4038 <col:12> col:12 'Args::SlotT<String> &&'
`-CXXDestructorDecl 0x5636a58f40c0 <col:12> col:12 implicit used ~SlotT 'void () noexcept' inline default
  |-Overrides: [ 0x5636a57c78f0 Slot::~Slot 'void () noexcept' ]
  `-CompoundStmt 0x5636a58f4800 <col:12>

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  NonVirtualBaseLLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned short>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5636a58068e0 <../dummy_inc/click/args.hh:1180:1, col:63> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned short'
|-CXXRecordDecl 0x5636a5806b38 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5636a58fd328 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5636a58fd7c0 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x5636a58fd7a0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x5636a58fd830 <col:19>
|-CXXConstructorDecl 0x5636a58fd428 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned short> &)' inline default trivial noexcept-unevaluated 0x5636a58fd428
| `-ParmVarDecl 0x5636a58fd538 <col:19> col:19 'const DefaultArg<unsigned short> &'
|-CXXConstructorDecl 0x5636a58fd5d8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned short> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5636a58fd6e8 <col:19> col:19 used 'DefaultArg<unsigned short> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5636a58fe3f0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5636a58fe110 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x5636a58fe0e0 <col:19> 'DefaultArg<unsigned short>' xvalue static_cast<struct DefaultArg<unsigned short> &&> <NoOp>
| |       `-DeclRefExpr 0x5636a58fe0b0 <col:19> 'DefaultArg<unsigned short>' lvalue ParmVar 0x5636a58fd6e8 '' 'DefaultArg<unsigned short> &&'
| `-CompoundStmt 0x5636a58fe460 <col:19>
`-CXXDestructorDecl 0x5636a58fd870 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.2 = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg.2 = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
