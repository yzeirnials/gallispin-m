
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct libdivide_u32_t
         0 |   uint32_t magic
         4 |   uint8_t more
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPFlowID
         0 |   class IPAddress _saddr
         0 |     uint32_t _addr
         4 |   class IPAddress _daddr
         4 |     uint32_t _addr
         8 |   uint16_t _sport
        10 |   uint16_t _dport
           | [sizeof=12, dsize=12, align=4,
           |  nvsize=12, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPRewriterEntry
         0 |   class IPFlowID _flowid
         0 |     class IPAddress _saddr
         0 |       uint32_t _addr
         4 |     class IPAddress _daddr
         4 |       uint32_t _addr
         8 |     uint16_t _sport
        10 |     uint16_t _dport
   12:0-23 |   uint32_t _output
        15 |   uint8_t _direction
        16 |   class IPRewriterEntry * _hashnext
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<8> >
         0 |   vector_memory<class sized_array_memory<8> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class IPRewriterFlow *>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | union IPRewriterInput::(anonymous at ../elements/ip/iprewriterbase.hh:23:5)
         0 |   class IPRewriterPattern * pattern
         0 |   class IPMapper * mapper
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPRewriterInput
         0 |   class IPRewriterBase * owner
         8 |   int owner_input
        12 |   int kind
        16 |   int foutput
        24 |   class IPRewriterBase * reply_element
        32 |   int routput
        36 |   uint32_t count
        40 |   uint32_t failures
        48 |   union IPRewriterInput::(anonymous at ../elements/ip/iprewriterbase.hh:23:5) u
        48 |     class IPRewriterPattern * pattern
        48 |     class IPMapper * mapper
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | class HashContainer_const_iterator<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> >
         0 |   class IPRewriterEntry * _element
         8 |   class IPRewriterEntry ** _pprev
        16 |   HashContainer_const_iterator<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> >::bucket_count_type _bucket
        24 |   const HashContainer<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > * _hc
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping AST Record Layout
         0 | class HashContainer_iterator<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> >
         0 |   class HashContainer_const_iterator<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > (base)
         0 |     class IPRewriterEntry * _element
         8 |     class IPRewriterEntry ** _pprev
        16 |     HashContainer_const_iterator<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> >::bucket_count_type _bucket
        24 |     const HashContainer<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > * _hc
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPRewriterFlow
         0 |   class IPRewriterEntry [2] _e
        48 |   uint16_t _ip_csum_delta
        50 |   uint16_t _udp_csum_delta
        52 |   click_jiffies_t _expiry_j
   56:0-31 |   size_t _place
        60 |   uint8_t _ip_p
        61 |   uint8_t _tflags
        62 |   _Bool _guaranteed
        63 |   uint8_t _reply_anno
        64 |   class IPRewriterInput * _owner
           | [sizeof=72, dsize=72, align=8,
           |  nvsize=72, nvalign=8]

*** Dumping AST Record Layout
         0 | class ICMPPingRewriter::ICMPPingFlow
         0 |   class IPRewriterFlow (base)
         0 |     class IPRewriterEntry [2] _e
        48 |     uint16_t _ip_csum_delta
        50 |     uint16_t _udp_csum_delta
        52 |     click_jiffies_t _expiry_j
   56:0-31 |     size_t _place
        60 |     uint8_t _ip_p
        61 |     uint8_t _tflags
        62 |     _Bool _guaranteed
        63 |     uint8_t _reply_anno
        64 |     class IPRewriterInput * _owner
           | [sizeof=72, dsize=72, align=8,
           |  nvsize=72, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | struct StringAccum::rep_t
         0 |   unsigned char * s
         8 |   int len
        12 |   int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556302cf83e0 prev 0x556302c6de68 <../dummy_inc/click/ipaddress.hh:15:1, line:154:1> line:15:7 referenced class IPAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x556302cf84d8 <col:1, col:7> col:7 implicit referenced class IPAddress
|-AccessSpecDecl 0x556302cf8568 <col:19, col:25> col:19 public
|-TypedefDecl 0x556302cf85a0 <line:17:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x556302ae4810 'uninitialized_type'
|   `-CXXRecord 0x556302ae4778 'uninitialized_type'
|-CXXConstructorDecl 0x556302cf8660 <line:20:5, line:22:5> line:20:12 used IPAddress 'void ()' inline
| |-CXXCtorInitializer Field 0x556302cfff20 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x556302cfffc8 <line:21:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x556302cfff88 <col:10> 'int' 0
| `-CompoundStmt 0x556302d00010 <col:13, line:22:5>
|-CXXConstructorDecl 0x556302cf87b0 <line:25:5, line:27:5> line:25:12 used IPAddress 'void (unsigned int)' inline
| |-ParmVarDecl 0x556302cf8720 <col:22, col:31> col:31 used x 'unsigned int'
| |-CXXCtorInitializer Field 0x556302cfff20 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x556302d00060 <line:26:10> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x556302d00020 <col:10> 'unsigned int' lvalue ParmVar 0x556302cf8720 'x' 'unsigned int'
| `-CompoundStmt 0x556302d000a8 <col:13, line:27:5>
|-CXXConstructorDecl 0x556302cf8908 <line:29:5, line:31:5> line:29:21 IPAddress 'void (int)' inline
| |-ParmVarDecl 0x556302cf8878 <col:31, col:35> col:35 used x 'int'
| |-CXXCtorInitializer Field 0x556302cfff20 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x556302d00110 <line:30:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x556302d000f8 <col:10> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x556302d000b8 <col:10> 'int' lvalue ParmVar 0x556302cf8878 'x' 'int'
| `-CompoundStmt 0x556302d00158 <col:13, line:31:5>
|-CXXConstructorDecl 0x556302cf8a60 <line:33:5, line:35:5> line:33:21 IPAddress 'void (unsigned long)' inline
| |-ParmVarDecl 0x556302cf89d0 <col:31, col:45> col:45 used x 'unsigned long'
| |-CXXCtorInitializer Field 0x556302cfff20 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x556302d001c0 <line:34:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x556302d001a8 <col:10> 'unsigned long' <LValueToRValue>
| |     `-DeclRefExpr 0x556302d00168 <col:10> 'unsigned long' lvalue ParmVar 0x556302cf89d0 'x' 'unsigned long'
| `-CompoundStmt 0x556302d00208 <col:13, line:35:5>
|-CXXConstructorDecl 0x556302cf8bb8 <line:37:5, line:39:5> line:37:21 IPAddress 'void (long)' inline
| |-ParmVarDecl 0x556302cf8b28 <col:31, col:36> col:36 used x 'long'
| |-CXXCtorInitializer Field 0x556302cfff20 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x556302d00270 <line:38:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x556302d00258 <col:10> 'long' <LValueToRValue>
| |     `-DeclRefExpr 0x556302d00218 <col:10> 'long' lvalue ParmVar 0x556302cf8b28 'x' 'long'
| `-CompoundStmt 0x556302d002b8 <col:13, line:39:5>
|-CXXConstructorDecl 0x556302cf8d78 <line:42:5, line:44:5> line:42:12 IPAddress 'void (struct in_addr)' inline
| |-ParmVarDecl 0x556302cf8c88 <col:22, col:37> col:37 used x 'struct in_addr':'in_addr'
| |-CXXCtorInitializer Field 0x556302cfff20 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x556302d00338 <line:43:10, col:12> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x556302d002e8 <col:10, col:12> 'in_addr_t':'unsigned int' lvalue .s_addr 0x556302c26c10
| |     `-DeclRefExpr 0x556302d002c8 <col:10> 'struct in_addr':'in_addr' lvalue ParmVar 0x556302cf8c88 'x' 'struct in_addr':'in_addr'
| `-CompoundStmt 0x556302d00380 <col:20, line:44:5>
|-CXXConstructorDecl 0x556302cfe050 <line:50:5, line:56:5> line:50:14 IPAddress 'void (const unsigned char *)'
| |-ParmVarDecl 0x556302cf8e40 <col:24, col:45> col:45 used data 'const unsigned char *'
| `-CompoundStmt 0x556302d004e8 <col:51, line:56:5>
|   `-BinaryOperator 0x556302d004c8 <line:52:2, col:52> 'uint32_t':'unsigned int' lvalue '='
|     |-MemberExpr 0x556302d003a0 <col:2> 'uint32_t':'unsigned int' lvalue ->_addr 0x556302cfff20
|     | `-CXXThisExpr 0x556302d00390 <col:2> 'IPAddress *' implicit this
|     `-ImplicitCastExpr 0x556302d004b0 <col:10, col:52> 'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x556302d00498 <col:10, col:52> 'const unsigned int' lvalue prefix '*' cannot overflow
|         `-ParenExpr 0x556302d00478 <col:11, col:52> 'const unsigned int *'
|           `-CXXReinterpretCastExpr 0x556302d00448 <col:12, col:51> 'const unsigned int *' reinterpret_cast<const unsigned int *> <BitCast>
|             `-ImplicitCastExpr 0x556302d00430 <col:47> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|               `-DeclRefExpr 0x556302d003d0 <col:47> 'const unsigned char *' lvalue ParmVar 0x556302cf8e40 'data' 'const unsigned char *'
|-CXXConstructorDecl 0x556302cfe1a0 <line:63:5, col:39> col:14 IPAddress 'void (const String &)'
| `-ParmVarDecl 0x556302cfe110 <col:24, col:38> col:38 x 'const String &'
|-CXXConstructorDecl 0x556302cfe348 <line:66:5, line:68:5> line:66:12 IPAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x556302cfe288 <col:22, col:48> col:48 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x556302d00558 <col:56, line:68:5>
|   `-CStyleCastExpr 0x556302d00530 <line:67:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x556302d00500 <col:9> 'const uninitialized_type' lvalue ParmVar 0x556302cfe288 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x556302cfe4d8 <line:78:5, col:48> col:22 make_prefix 'IPAddress (int)' static
| `-ParmVarDecl 0x556302cfe410 <col:34, col:38> col:38 prefix_len 'int'
|-CXXMethodDecl 0x556302cfe5c8 <line:81:5, line:83:5> line:81:29 make_broadcast 'IPAddress ()' static inline
| `-CompoundStmt 0x556302d01518 <col:46, line:83:5>
|   `-ReturnStmt 0x556302d01508 <line:82:2, col:29>
|     `-ExprWithCleanups 0x556302d014f0 <col:9, col:29> 'IPAddress'
|       `-CXXConstructExpr 0x556302d014c0 <col:9, col:29> 'IPAddress' 'void (IPAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x556302d01378 <col:9, col:29> 'IPAddress' xvalue
|           `-CXXFunctionalCastExpr 0x556302d01260 <col:9, col:29> 'IPAddress' functional cast to class IPAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x556302d01148 <col:9, col:29> 'IPAddress' 'void (unsigned int)'
|               `-IntegerLiteral 0x556302d00580 <col:19> 'unsigned int' 4294967295
|-CXXMethodDecl 0x556302cfe6b8 <line:86:5, line:88:5> line:86:17 empty 'bool () const' inline
| `-CompoundStmt 0x556302d015c8 <col:31, line:88:5>
|   `-ReturnStmt 0x556302d015b8 <line:87:2, col:10>
|     `-UnaryOperator 0x556302d015a0 <col:9, col:10> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x556302d01588 <col:10> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x556302d01570 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x556302d01540 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x556302cfff20
|             `-CXXThisExpr 0x556302d01530 <col:10> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x556302cfe778 <line:91:5, line:93:5> line:91:21 used addr 'uint32_t () const' inline
| `-CompoundStmt 0x556302d01648 <col:34, line:93:5>
|   `-ReturnStmt 0x556302d01638 <line:92:2, col:9>
|     `-ImplicitCastExpr 0x556302d01620 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x556302d015f0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x556302cfff20
|         `-CXXThisExpr 0x556302d015e0 <col:9> 'const IPAddress *' implicit this
|-CXXConversionDecl 0x556302cfe848 <line:99:5, line:101:5> line:99:12 used operator unsigned int 'uint32_t () const' inline
| `-CompoundStmt 0x556302d016c8 <col:38, line:101:5>
|   `-ReturnStmt 0x556302d016b8 <line:100:2, col:9>
|     `-ImplicitCastExpr 0x556302d016a0 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x556302d01670 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x556302cfff20
|         `-CXXThisExpr 0x556302d01660 <col:9> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x556302cfe918 <line:106:5, line:108:5> line:106:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x556302d01998 <col:38, line:108:5>
|   `-ReturnStmt 0x556302d01988 <line:107:2, col:58>
|     `-BinaryOperator 0x556302d01968 <col:9, col:58> 'bool' '=='
|       |-ParenExpr 0x556302d01880 <col:9, col:36> 'unsigned int'
|       | `-BinaryOperator 0x556302d01860 <col:10, col:35> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x556302d01848 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x556302d016f0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x556302cfff20
|       |   |   `-CXXThisExpr 0x556302d016e0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x556302d01820 <col:18, col:35> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x556302d01808 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x556302d01788 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x556302c340f8 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x556302d01768 <col:24> 'unsigned int' 4026531840
|       `-CallExpr 0x556302d01940 <col:41, col:58> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x556302d01928 <col:41> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x556302d01908 <col:41> 'uint32_t (uint32_t) throw()' lvalue Function 0x556302c340f8 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x556302d018e8 <col:47> 'unsigned int' 3758096384
|-CXXMethodDecl 0x556302cfe9d8 <line:110:5, line:112:5> line:110:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x556302d01c08 <col:39, line:112:5>
|   `-ReturnStmt 0x556302d01bf8 <line:111:2, col:56>
|     `-BinaryOperator 0x556302d01bd8 <col:9, col:56> 'bool' '=='
|       |-ParenExpr 0x556302d01af0 <col:9, col:35> 'unsigned int'
|       | `-BinaryOperator 0x556302d01ad0 <col:10, col:34> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x556302d01ab8 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x556302d019c0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x556302cfff20
|       |   |   `-CXXThisExpr 0x556302d019b0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x556302d01a90 <col:18, col:34> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x556302d01a78 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x556302d01a58 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x556302c340f8 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x556302d01a38 <col:24> 'unsigned int' 4294901760
|       `-CallExpr 0x556302d01bb0 <col:40, col:56> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x556302d01b98 <col:40> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x556302d01b78 <col:40> 'uint32_t (uint32_t) throw()' lvalue Function 0x556302c340f8 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x556302d01b58 <col:46> 'unsigned int' 2851995648
|-CXXMethodDecl 0x556302cfeb08 <line:114:5, col:37> col:27 used in_addr 'struct in_addr () const' inline
|-CXXConversionDecl 0x556302cfec10 <line:115:5, col:38> col:12 used operator in_addr 'struct in_addr () const' inline
|-CXXMethodDecl 0x556302cfed20 <line:117:5, col:32> col:27 data 'unsigned char *()' inline
|-CXXMethodDecl 0x556302cfee10 <line:118:5, col:40> col:33 data 'const unsigned char *() const' inline
|-CXXMethodDecl 0x556302cfeed0 <line:120:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x556302cfef98 <line:122:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x556302cff198 <line:123:5, col:64> col:17 matches_prefix 'bool (IPAddress, IPAddress) const' inline
| |-ParmVarDecl 0x556302cff048 <col:32, col:42> col:42 addr 'IPAddress'
| `-ParmVarDecl 0x556302cff0c0 <col:48, col:58> col:58 mask 'IPAddress'
|-CXXMethodDecl 0x556302cff318 <line:124:5, col:50> col:17 mask_as_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x556302cff258 <col:34, col:44> col:44 mask 'IPAddress'
|-CXXMethodDecl 0x556302cff460 <line:125:5, col:52> col:17 mask_more_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x556302cff3d0 <col:36, col:46> col:46 mask 'IPAddress'
|-CXXMethodDecl 0x556302cff608 <line:137:5, col:43> col:23 operator&= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x556302cff518 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x556302cff750 <line:138:5, col:43> col:23 operator|= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x556302cff6c0 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x556302cff898 <line:139:5, col:43> col:23 operator^= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x556302cff808 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x556302cff960 <line:141:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x556302cffa20 <line:142:5, col:27> col:12 unparse_mask 'String () const'
|-CXXMethodDecl 0x556302cffb98 <line:143:5, col:41> col:12 unparse_with_mask 'String (IPAddress) const'
| `-ParmVarDecl 0x556302cffad0 <col:30> col:39 'IPAddress'
|-CXXMethodDecl 0x556302cffc60 <line:145:5, col:23> col:19 s 'String () const' inline
|-CXXConversionDecl 0x556302cffd48 <line:146:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x556302cffdf0 <col:51> "" ""
|-TypedefDecl 0x556302cffe90 <line:148:5, col:23> col:23 parameter_type 'IPAddress'
| `-RecordType 0x556302c6df00 'IPAddress'
|   `-CXXRecord 0x556302cf83e0 'IPAddress'
|-AccessSpecDecl 0x556302cffee8 <line:150:3, col:10> col:3 private
|-FieldDecl 0x556302cfff20 <line:152:5, col:14> col:14 referenced _addr 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x556302d005c8 <line:15:7> col:7 implicit used constexpr IPAddress 'void (const IPAddress &) noexcept' inline default trivial
| |-ParmVarDecl 0x556302d006d8 <col:7> col:7 used 'const IPAddress &'
| |-CXXCtorInitializer Field 0x556302cfff20 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x556302f9ee78 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x556302f9ee30 <col:7> 'const uint32_t':'const unsigned int' lvalue ._addr 0x556302cfff20
| |     `-DeclRefExpr 0x556302f9ee10 <col:7> 'const IPAddress' lvalue ParmVar 0x556302d006d8 '' 'const IPAddress &'
| `-CompoundStmt 0x556302f9eec0 <col:7>
|-CXXConstructorDecl 0x556302d00778 <col:7> col:7 implicit used constexpr IPAddress 'void (IPAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x556302d00888 <col:7> col:7 used 'IPAddress &&'
| |-CXXCtorInitializer Field 0x556302cfff20 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x556302d01468 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x556302d01420 <col:7> 'uint32_t':'unsigned int' xvalue ._addr 0x556302cfff20
| |     `-CXXStaticCastExpr 0x556302d013f0 <col:7> 'IPAddress' xvalue static_cast<class IPAddress &&> <NoOp>
| |       `-DeclRefExpr 0x556302d013c0 <col:7> 'IPAddress' lvalue ParmVar 0x556302d00888 '' 'IPAddress &&'
| `-CompoundStmt 0x556302d014b0 <col:7>
|-CXXDestructorDecl 0x556302d01178 <col:7> col:7 implicit referenced ~IPAddress 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x556302f9f768 <col:7> col:7 implicit used operator= 'IPAddress &(const IPAddress &) noexcept' inline default trivial
| |-ParmVarDecl 0x556302f9f878 <col:7> col:7 used 'const IPAddress &'
| `-CompoundStmt 0x556302f9fbd0 <col:7>
|   |-BinaryOperator 0x556302f9fb78 <col:7> 'uint32_t':'unsigned int' lvalue '='
|   | |-MemberExpr 0x556302f9fb30 <col:7> 'uint32_t':'unsigned int' lvalue ->_addr 0x556302cfff20
|   | | `-CXXThisExpr 0x556302f9fb20 <col:7> 'IPAddress *' this
|   | `-ImplicitCastExpr 0x556302f9fb60 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
|   |   `-MemberExpr 0x556302f9faf0 <col:7> 'const uint32_t':'const unsigned int' lvalue ._addr 0x556302cfff20
|   |     `-DeclRefExpr 0x556302f9fad0 <col:7> 'const IPAddress' lvalue ParmVar 0x556302f9f878 '' 'const IPAddress &'
|   `-ReturnStmt 0x556302f9fbc0 <col:7>
|     `-UnaryOperator 0x556302f9fba8 <col:7> 'IPAddress' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x556302f9fb98 <col:7> 'IPAddress *' this
`-CXXMethodDecl 0x556302f9f8e8 <col:7> col:7 implicit operator= 'IPAddress &(IPAddress &&)' inline default trivial noexcept-unevaluated 0x556302f9f8e8
  `-ParmVarDecl 0x556302f9f9f8 <col:7> col:7 'IPAddress &&'

Layout: <CGRecordLayout
  LLVMType:%class.IPAddress = type { i32 }
  NonVirtualBaseLLVMType:%class.IPAddress = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556302f9c420 <../dummy_inc/click/ipflowid.hh:9:1, line:143:1> line:9:7 referenced class IPFlowID definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x556302f9c538 <col:1, col:7> col:7 implicit referenced class IPFlowID
|-AccessSpecDecl 0x556302f9c5c8 <col:18, col:24> col:18 public
|-TypedefDecl 0x556302f9c600 <line:11:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x556302ae4810 'uninitialized_type'
|   `-CXXRecord 0x556302ae4778 'uninitialized_type'
|-CXXConstructorDecl 0x556302f9c6c0 <line:17:5, line:19:5> line:17:5 used IPFlowID 'void ()'
| |-CXXCtorInitializer Field 0x556302f9e5c8 '_saddr' 'IPAddress'
| | `-CXXConstructExpr 0x556302f9eb98 <line:18:4, col:11> 'IPAddress' 'void ()'
| |-CXXCtorInitializer Field 0x556302f9e628 '_daddr' 'IPAddress'
| | `-CXXConstructExpr 0x556302f9ec00 <col:14, col:21> 'IPAddress' 'void ()'
| |-CXXCtorInitializer Field 0x556302f9e688 '_sport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x556302f9ec90 <col:31> 'uint16_t':'unsigned short' <IntegralCast>
| |   `-IntegerLiteral 0x556302f9ec50 <col:31> 'int' 0
| |-CXXCtorInitializer Field 0x556302f9e6e8 '_dport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x556302f9ed10 <col:42> 'uint16_t':'unsigned short' <IntegralCast>
| |   `-IntegerLiteral 0x556302f9ecd0 <col:42> 'int' 0
| `-CompoundStmt 0x556302f9ed70 <col:45, line:19:5>
|-CXXConstructorDecl 0x556302f9ca28 <line:26:5, line:28:5> line:26:5 used IPFlowID 'void (IPAddress, uint16_t, IPAddress, uint16_t)'
| |-ParmVarDecl 0x556302f9c778 <col:14, col:24> col:24 used saddr 'IPAddress'
| |-ParmVarDecl 0x556302f9c7f0 <col:31, col:40> col:40 used sport 'uint16_t':'unsigned short'
| |-ParmVarDecl 0x556302f9c868 <col:47, col:57> col:57 used daddr 'IPAddress'
| |-ParmVarDecl 0x556302f9c8e0 <col:64, col:73> col:73 used dport 'uint16_t':'unsigned short'
| |-CXXCtorInitializer Field 0x556302f9e5c8 '_saddr' 'IPAddress'
| | `-CXXConstructExpr 0x556302f9eed0 <line:27:4, col:16> 'IPAddress' 'void (const IPAddress &) noexcept'
| |   `-ImplicitCastExpr 0x556302f9edc0 <col:11> 'const IPAddress' lvalue <NoOp>
| |     `-DeclRefExpr 0x556302f9ed80 <col:11> 'IPAddress' lvalue ParmVar 0x556302f9c778 'saddr' 'IPAddress'
| |-CXXCtorInitializer Field 0x556302f9e628 '_daddr' 'IPAddress'
| | `-CXXConstructExpr 0x556302f9ef80 <col:19, col:31> 'IPAddress' 'void (const IPAddress &) noexcept'
| |   `-ImplicitCastExpr 0x556302f9ef68 <col:26> 'const IPAddress' lvalue <NoOp>
| |     `-DeclRefExpr 0x556302f9ef28 <col:26> 'IPAddress' lvalue ParmVar 0x556302f9c868 'daddr' 'IPAddress'
| |-CXXCtorInitializer Field 0x556302f9e688 '_sport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x556302f9f018 <col:41> 'uint16_t':'unsigned short' <LValueToRValue>
| |   `-DeclRefExpr 0x556302f9efd8 <col:41> 'uint16_t':'unsigned short' lvalue ParmVar 0x556302f9c7f0 'sport' 'uint16_t':'unsigned short'
| |-CXXCtorInitializer Field 0x556302f9e6e8 '_dport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x556302f9f098 <col:56> 'uint16_t':'unsigned short' <LValueToRValue>
| |   `-DeclRefExpr 0x556302f9f058 <col:56> 'uint16_t':'unsigned short' lvalue ParmVar 0x556302f9c8e0 'dport' 'uint16_t':'unsigned short'
| `-CompoundStmt 0x556302f9f0f8 <col:63, line:28:5>
|-CXXConstructorDecl 0x556302f9cc48 <line:37:5, col:60> col:14 IPFlowID 'void (const Packet *, bool)'
| |-ParmVarDecl 0x556302f9cb00 <col:23, col:37> col:37 p 'const Packet *'
| `-ParmVarDecl 0x556302f9cb78 <col:40, col:55> col:45 reverse 'bool' cinit
|   `-CXXBoolLiteralExpr 0x556302f9eb60 <col:55> 'bool' false
|-CXXConstructorDecl 0x556302f9ce58 <line:47:5, col:64> col:14 IPFlowID 'void (const click_ip *, bool)'
| |-ParmVarDecl 0x556302f9cd10 <col:23, col:39> col:39 iph 'const click_ip *'
| `-ParmVarDecl 0x556302f9cd88 <col:44, col:59> col:49 reverse 'bool' cinit
|   `-CXXBoolLiteralExpr 0x556302f9eb70 <col:59> 'bool' false
|-CXXConstructorDecl 0x556302f9cfb0 <line:50:5, line:52:5> line:50:12 IPFlowID 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x556302f9cf20 <col:21, col:47> col:47 used unused 'const uninitialized_type &'
| |-CXXCtorInitializer Field 0x556302f9e5c8 '_saddr' 'IPAddress'
| | `-CXXConstructExpr 0x556302f9f108 <col:12> 'IPAddress' 'void ()'
| |-CXXCtorInitializer Field 0x556302f9e628 '_daddr' 'IPAddress'
| | `-CXXConstructExpr 0x556302f9f158 <col:12> 'IPAddress' 'void ()'
| `-CompoundStmt 0x556302f9f210 <col:55, line:52:5>
|   `-CStyleCastExpr 0x556302f9f1e8 <line:51:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x556302f9f1b8 <col:9> 'const uninitialized_type' lvalue ParmVar 0x556302f9cf20 'unused' 'const uninitialized_type &'
|-TypedefDecl 0x556302f9d168 <line:55:5, col:60> col:35 referenced unspecified_bool_type 'IPAddress (IPFlowID::*)() const'
| `-MemberPointerType 0x556302f9d0e0 'IPAddress (IPFlowID::*)() const'
|   |-RecordType 0x556302f9c4b0 'IPFlowID'
|   | `-CXXRecord 0x556302f9c420 'IPFlowID'
|   `-ParenType 0x556302f9d080 'IPAddress () const' sugar
|     `-FunctionProtoType 0x556302ec4b20 'IPAddress () const' const cdecl
|       `-RecordType 0x556302c6df00 'IPAddress'
|         `-CXXRecord 0x556302cf83e0 'IPAddress'
|-CXXConversionDecl 0x556302f9d2a8 <line:57:5, line:59:5> line:57:5 operator IPAddress (IPFlowID::*)() const 'IPFlowID::unspecified_bool_type () const'
| `-CompoundStmt 0x556302f9f4c0 <col:44, line:59:5>
|   `-ReturnStmt 0x556302f9f4b0 <line:58:2, col:47>
|     `-ConditionalOperator 0x556302f9f480 <col:9, col:47> 'IPAddress (IPFlowID::*)() const'
|       |-BinaryOperator 0x556302f9f3a8 <col:9, col:19> 'bool' '||'
|       | |-ImplicitCastExpr 0x556302f9f378 <col:9> 'bool' <IntegralToBoolean>
|       | | `-ImplicitCastExpr 0x556302f9f2f8 <col:9> 'uint32_t':'unsigned int' <UserDefinedConversion>
|       | |   `-CXXMemberCallExpr 0x556302f9f2d8 <col:9> 'uint32_t':'unsigned int'
|       | |     `-MemberExpr 0x556302f9f2a8 <col:9> '<bound member function type>' .operator unsigned int 0x556302cfe848
|       | |       `-MemberExpr 0x556302f9f238 <col:9> 'const IPAddress' lvalue ->_saddr 0x556302f9e5c8
|       | |         `-CXXThisExpr 0x556302f9f228 <col:9> 'const IPFlowID *' implicit this
|       | `-ImplicitCastExpr 0x556302f9f390 <col:19> 'bool' <IntegralToBoolean>
|       |   `-ImplicitCastExpr 0x556302f9f360 <col:19> 'uint32_t':'unsigned int' <UserDefinedConversion>
|       |     `-CXXMemberCallExpr 0x556302f9f340 <col:19> 'uint32_t':'unsigned int'
|       |       `-MemberExpr 0x556302f9f310 <col:19> '<bound member function type>' .operator unsigned int 0x556302cfe848
|       |         `-MemberExpr 0x556302f9f278 <col:19> 'const IPAddress' lvalue ->_daddr 0x556302f9e628
|       |           `-CXXThisExpr 0x556302f9f268 <col:19> 'const IPFlowID *' implicit this
|       |-UnaryOperator 0x556302f9f430 <col:28, col:39> 'IPAddress (IPFlowID::*)() const' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x556302f9f400 <col:29, col:39> 'IPAddress () const' CXXMethod 0x556302f9d3d0 'saddr' 'IPAddress () const'
|       `-ImplicitCastExpr 0x556302f9f468 <col:47> 'IPAddress (IPFlowID::*)() const' <NullToMemberPointer>
|         `-IntegerLiteral 0x556302f9f448 <col:47> 'int' 0
|-CXXMethodDecl 0x556302f9d3d0 <line:63:5, line:65:5> line:63:15 used saddr 'IPAddress () const'
| `-CompoundStmt 0x556302f9f558 <col:29, line:65:5>
|   `-ReturnStmt 0x556302f9f548 <line:64:2, col:9>
|     `-CXXConstructExpr 0x556302f9f518 <col:9> 'IPAddress' 'void (const IPAddress &) noexcept'
|       `-MemberExpr 0x556302f9f4e8 <col:9> 'const IPAddress' lvalue ->_saddr 0x556302f9e5c8
|         `-CXXThisExpr 0x556302f9f4d8 <col:9> 'const IPFlowID *' implicit this
|-CXXMethodDecl 0x556302f9d4e8 <line:67:5, line:69:5> line:67:14 used sport 'uint16_t () const'
| `-CompoundStmt 0x556302f9f5d8 <col:28, line:69:5>
|   `-ReturnStmt 0x556302f9f5c8 <line:68:2, col:9>
|     `-ImplicitCastExpr 0x556302f9f5b0 <col:9> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-MemberExpr 0x556302f9f580 <col:9> 'const uint16_t':'const unsigned short' lvalue ->_sport 0x556302f9e688
|         `-CXXThisExpr 0x556302f9f570 <col:9> 'const IPFlowID *' implicit this
|-CXXMethodDecl 0x556302f9d5a8 <line:71:5, line:73:5> line:71:15 used daddr 'IPAddress () const'
| `-CompoundStmt 0x556302f9f670 <col:29, line:73:5>
|   `-ReturnStmt 0x556302f9f660 <line:72:2, col:9>
|     `-CXXConstructExpr 0x556302f9f630 <col:9> 'IPAddress' 'void (const IPAddress &) noexcept'
|       `-MemberExpr 0x556302f9f600 <col:9> 'const IPAddress' lvalue ->_daddr 0x556302f9e628
|         `-CXXThisExpr 0x556302f9f5f0 <col:9> 'const IPFlowID *' implicit this
|-CXXMethodDecl 0x556302f9d668 <line:75:5, line:77:5> line:75:14 used dport 'uint16_t () const'
| `-CompoundStmt 0x556302f9f6f0 <col:28, line:77:5>
|   `-ReturnStmt 0x556302f9f6e0 <line:76:2, col:9>
|     `-ImplicitCastExpr 0x556302f9f6c8 <col:9> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-MemberExpr 0x556302f9f698 <col:9> 'const uint16_t':'const unsigned short' lvalue ->_dport 0x556302f9e6e8
|         `-CXXThisExpr 0x556302f9f688 <col:9> 'const IPFlowID *' implicit this
|-CXXMethodDecl 0x556302f9d7a8 <line:80:5, line:82:5> line:80:10 set_saddr 'void (IPAddress)'
| |-ParmVarDecl 0x556302f9d718 <col:20, col:30> col:30 used a 'IPAddress'
| `-CompoundStmt 0x556302f9fc98 <col:33, line:82:5>
|   `-CXXOperatorCallExpr 0x556302f9fc60 <line:81:2, col:11> 'IPAddress' lvalue
|     |-ImplicitCastExpr 0x556302f9fc48 <col:9> 'IPAddress &(*)(const IPAddress &) noexcept' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x556302f9fa80 <col:9> 'IPAddress &(const IPAddress &) noexcept' lvalue CXXMethod 0x556302f9f768 'operator=' 'IPAddress &(const IPAddress &) noexcept'
|     |-MemberExpr 0x556302f9f718 <col:2> 'IPAddress' lvalue ->_saddr 0x556302f9e5c8
|     | `-CXXThisExpr 0x556302f9f708 <col:2> 'IPFlowID *' implicit this
|     `-ImplicitCastExpr 0x556302f9fa68 <col:11> 'const IPAddress' lvalue <NoOp>
|       `-DeclRefExpr 0x556302f9f748 <col:11> 'IPAddress' lvalue ParmVar 0x556302f9d718 'a' 'IPAddress'
|-CXXMethodDecl 0x556302f9d958 <line:85:5, line:87:5> line:85:10 set_sport 'void (uint16_t)'
| |-ParmVarDecl 0x556302f9d860 <col:20, col:29> col:29 used p 'uint16_t':'unsigned short'
| `-CompoundStmt 0x556302f9fd48 <col:32, line:87:5>
|   `-BinaryOperator 0x556302f9fd28 <line:86:2, col:11> 'uint16_t':'unsigned short' lvalue '='
|     |-MemberExpr 0x556302f9fcc0 <col:2> 'uint16_t':'unsigned short' lvalue ->_sport 0x556302f9e688
|     | `-CXXThisExpr 0x556302f9fcb0 <col:2> 'IPFlowID *' implicit this
|     `-ImplicitCastExpr 0x556302f9fd10 <col:11> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x556302f9fcf0 <col:11> 'uint16_t':'unsigned short' lvalue ParmVar 0x556302f9d860 'p' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x556302f9daa0 <line:89:5, line:91:5> line:89:10 set_daddr 'void (IPAddress)'
| |-ParmVarDecl 0x556302f9da10 <col:20, col:30> col:30 used a 'IPAddress'
| `-CompoundStmt 0x556302f9fe48 <col:33, line:91:5>
|   `-CXXOperatorCallExpr 0x556302f9fe10 <line:90:2, col:11> 'IPAddress' lvalue
|     |-ImplicitCastExpr 0x556302f9fdf8 <col:9> 'IPAddress &(*)(const IPAddress &) noexcept' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x556302f9fdd8 <col:9> 'IPAddress &(const IPAddress &) noexcept' lvalue CXXMethod 0x556302f9f768 'operator=' 'IPAddress &(const IPAddress &) noexcept'
|     |-MemberExpr 0x556302f9fd70 <col:2> 'IPAddress' lvalue ->_daddr 0x556302f9e628
|     | `-CXXThisExpr 0x556302f9fd60 <col:2> 'IPFlowID *' implicit this
|     `-ImplicitCastExpr 0x556302f9fdc0 <col:11> 'const IPAddress' lvalue <NoOp>
|       `-DeclRefExpr 0x556302f9fda0 <col:11> 'IPAddress' lvalue ParmVar 0x556302f9da10 'a' 'IPAddress'
|-CXXMethodDecl 0x556302f9dbe8 <line:94:5, line:96:5> line:94:10 set_dport 'void (uint16_t)'
| |-ParmVarDecl 0x556302f9db58 <col:20, col:29> col:29 used p 'uint16_t':'unsigned short'
| `-CompoundStmt 0x556302f9fef8 <col:32, line:96:5>
|   `-BinaryOperator 0x556302f9fed8 <line:95:2, col:11> 'uint16_t':'unsigned short' lvalue '='
|     |-MemberExpr 0x556302f9fe70 <col:2> 'uint16_t':'unsigned short' lvalue ->_dport 0x556302f9e6e8
|     | `-CXXThisExpr 0x556302f9fe60 <col:2> 'IPFlowID *' implicit this
|     `-ImplicitCastExpr 0x556302f9fec0 <col:11> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x556302f9fea0 <col:11> 'uint16_t':'unsigned short' lvalue ParmVar 0x556302f9db58 'p' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x556302f9deb0 <line:103:5, line:108:5> line:103:10 assign 'void (IPAddress, uint16_t, IPAddress, uint16_t)'
| |-ParmVarDecl 0x556302f9dca0 <col:17, col:27> col:27 used saddr 'IPAddress'
| |-ParmVarDecl 0x556302f9dd18 <col:34, col:43> col:43 used sport 'uint16_t':'unsigned short'
| |-ParmVarDecl 0x556302f9dd90 <col:50, col:60> col:60 used daddr 'IPAddress'
| |-ParmVarDecl 0x556302f9de08 <col:67, col:76> col:76 used dport 'uint16_t':'unsigned short'
| `-CompoundStmt 0x556302fa0210 <col:83, line:108:5>
|   |-CXXOperatorCallExpr 0x556302f9ffc0 <line:104:2, col:11> 'IPAddress' lvalue
|   | |-ImplicitCastExpr 0x556302f9ffa8 <col:9> 'IPAddress &(*)(const IPAddress &) noexcept' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x556302f9ff88 <col:9> 'IPAddress &(const IPAddress &) noexcept' lvalue CXXMethod 0x556302f9f768 'operator=' 'IPAddress &(const IPAddress &) noexcept'
|   | |-MemberExpr 0x556302f9ff20 <col:2> 'IPAddress' lvalue ->_saddr 0x556302f9e5c8
|   | | `-CXXThisExpr 0x556302f9ff10 <col:2> 'IPFlowID *' implicit this
|   | `-ImplicitCastExpr 0x556302f9ff70 <col:11> 'const IPAddress' lvalue <NoOp>
|   |   `-DeclRefExpr 0x556302f9ff50 <col:11> 'IPAddress' lvalue ParmVar 0x556302f9dca0 'saddr' 'IPAddress'
|   |-CXXOperatorCallExpr 0x556302fa00a8 <line:105:2, col:11> 'IPAddress' lvalue
|   | |-ImplicitCastExpr 0x556302fa0090 <col:9> 'IPAddress &(*)(const IPAddress &) noexcept' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x556302fa0070 <col:9> 'IPAddress &(const IPAddress &) noexcept' lvalue CXXMethod 0x556302f9f768 'operator=' 'IPAddress &(const IPAddress &) noexcept'
|   | |-MemberExpr 0x556302fa0008 <col:2> 'IPAddress' lvalue ->_daddr 0x556302f9e628
|   | | `-CXXThisExpr 0x556302f9fff8 <col:2> 'IPFlowID *' implicit this
|   | `-ImplicitCastExpr 0x556302fa0058 <col:11> 'const IPAddress' lvalue <NoOp>
|   |   `-DeclRefExpr 0x556302fa0038 <col:11> 'IPAddress' lvalue ParmVar 0x556302f9dd90 'daddr' 'IPAddress'
|   |-BinaryOperator 0x556302fa0158 <line:106:2, col:11> 'uint16_t':'unsigned short' lvalue '='
|   | |-MemberExpr 0x556302fa00f0 <col:2> 'uint16_t':'unsigned short' lvalue ->_sport 0x556302f9e688
|   | | `-CXXThisExpr 0x556302fa00e0 <col:2> 'IPFlowID *' implicit this
|   | `-ImplicitCastExpr 0x556302fa0140 <col:11> 'uint16_t':'unsigned short' <LValueToRValue>
|   |   `-DeclRefExpr 0x556302fa0120 <col:11> 'uint16_t':'unsigned short' lvalue ParmVar 0x556302f9dd18 'sport' 'uint16_t':'unsigned short'
|   `-BinaryOperator 0x556302fa01f0 <line:107:2, col:11> 'uint16_t':'unsigned short' lvalue '='
|     |-MemberExpr 0x556302fa0188 <col:2> 'uint16_t':'unsigned short' lvalue ->_dport 0x556302f9e6e8
|     | `-CXXThisExpr 0x556302fa0178 <col:2> 'IPFlowID *' implicit this
|     `-ImplicitCastExpr 0x556302fa01d8 <col:11> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x556302fa01b8 <col:11> 'uint16_t':'unsigned short' lvalue ParmVar 0x556302f9de08 'dport' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x556302f9dfb8 <line:113:5, line:115:5> line:113:14 used reverse 'IPFlowID () const'
| `-CompoundStmt 0x556302fa0d48 <col:30, line:115:5>
|   `-ReturnStmt 0x556302fa0d38 <line:114:2, col:48>
|     `-ExprWithCleanups 0x556302fa0d20 <col:9, col:48> 'IPFlowID'
|       `-CXXConstructExpr 0x556302fa0cf0 <col:9, col:48> 'IPFlowID' 'void (IPFlowID &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x556302fa08a8 <col:9, col:48> 'IPFlowID' xvalue
|           `-CXXTemporaryObjectExpr 0x556302fa0718 <col:9, col:48> 'IPFlowID' 'void (IPAddress, uint16_t, IPAddress, uint16_t)'
|             |-CXXConstructExpr 0x556302fa0688 <col:18> 'IPAddress' 'void (const IPAddress &) noexcept'
|             | `-MemberExpr 0x556302fa0260 <col:18> 'const IPAddress' lvalue ->_daddr 0x556302f9e628
|             |   `-CXXThisExpr 0x556302fa0250 <col:18> 'const IPFlowID *' implicit this
|             |-ImplicitCastExpr 0x556302fa06b8 <col:26> 'uint16_t':'unsigned short' <LValueToRValue>
|             | `-MemberExpr 0x556302fa02a0 <col:26> 'const uint16_t':'const unsigned short' lvalue ->_dport 0x556302f9e6e8
|             |   `-CXXThisExpr 0x556302fa0290 <col:26> 'const IPFlowID *' implicit this
|             |-CXXConstructExpr 0x556302fa06d0 <col:34> 'IPAddress' 'void (const IPAddress &) noexcept'
|             | `-MemberExpr 0x556302fa02e0 <col:34> 'const IPAddress' lvalue ->_saddr 0x556302f9e5c8
|             |   `-CXXThisExpr 0x556302fa02d0 <col:34> 'const IPFlowID *' implicit this
|             `-ImplicitCastExpr 0x556302fa0700 <col:42> 'uint16_t':'unsigned short' <LValueToRValue>
|               `-MemberExpr 0x556302fa0320 <col:42> 'const uint16_t':'const unsigned short' lvalue ->_sport 0x556302f9e688
|                 `-CXXThisExpr 0x556302fa0310 <col:42> 'const IPFlowID *' implicit this
|-CXXMethodDecl 0x556302f9e078 <line:116:5, col:59> col:21 rev 'IPFlowID () const' inline
| `-DeprecatedAttr 0x556302f9e118 <col:48> "" ""
|-CXXMethodDecl 0x556302f9e1a8 <line:122:5, col:34> col:23 hashcode 'hashcode_t () const' inline
|-CXXMethodDecl 0x556302f9e268 <line:127:5, col:22> col:12 used unparse 'String () const'
|-CXXConversionDecl 0x556302f9e338 <line:129:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x556302f9e3e0 <col:51> "" ""
|-CXXMethodDecl 0x556302f9e480 <line:130:5, col:55> col:19 s 'String () const' inline
| `-DeprecatedAttr 0x556302f9e520 <col:44> "" ""
|-AccessSpecDecl 0x556302f9e590 <line:132:3, col:12> col:3 protected
|-FieldDecl 0x556302f9e5c8 <line:135:5, col:15> col:15 referenced _saddr 'IPAddress'
|-FieldDecl 0x556302f9e628 <line:136:5, col:15> col:15 referenced _daddr 'IPAddress'
|-FieldDecl 0x556302f9e688 <line:137:5, col:14> col:14 referenced _sport 'uint16_t':'unsigned short'
|-FieldDecl 0x556302f9e6e8 <line:138:5, col:14> col:14 referenced _dport 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x556302f9e820 <line:140:5, col:26> col:9 unparse 'int (char *) const'
| `-ParmVarDecl 0x556302f9e750 <col:17, col:23> col:23 s 'char *'
|-FriendDecl 0x556302f9eb08 <line:141:5, col:76> col:25
| `-FunctionDecl 0x556302f9ea48 parent 0x55630298b278 <col:5, col:76> col:25 operator<< 'StringAccum &(StringAccum &, const IPFlowID &)'
|   |-ParmVarDecl 0x556302f9e8d8 <col:36, col:49> col:49 sa 'StringAccum &'
|   `-ParmVarDecl 0x556302f9e978 <col:53, col:69> col:69 flow_id 'const IPFlowID &'
|-CXXConstructorDecl 0x556302fa0350 <line:9:7> col:7 implicit constexpr IPFlowID 'void (const IPFlowID &)' inline default trivial noexcept-unevaluated 0x556302fa0350
| `-ParmVarDecl 0x556302fa0468 <col:7> col:7 'const IPFlowID &'
|-CXXConstructorDecl 0x556302fa0508 <col:7> col:7 implicit used constexpr IPFlowID 'void (IPFlowID &&) noexcept' inline default trivial
| |-ParmVarDecl 0x556302fa0618 <col:7> col:7 used 'IPFlowID &&'
| |-CXXCtorInitializer Field 0x556302f9e5c8 '_saddr' 'IPAddress'
| | `-CXXConstructExpr 0x556302fa0998 <col:7> 'IPAddress' 'void (IPAddress &&) noexcept'
| |   `-MemberExpr 0x556302fa0950 <col:7> 'IPAddress' xvalue ._saddr 0x556302f9e5c8
| |     `-CXXStaticCastExpr 0x556302fa0920 <col:7> 'IPFlowID' xvalue static_cast<class IPFlowID &&> <NoOp>
| |       `-DeclRefExpr 0x556302fa08f0 <col:7> 'IPFlowID' lvalue ParmVar 0x556302fa0618 '' 'IPFlowID &&'
| |-CXXCtorInitializer Field 0x556302f9e628 '_daddr' 'IPAddress'
| | `-CXXConstructExpr 0x556302fa0a98 <col:7> 'IPAddress' 'void (IPAddress &&) noexcept'
| |   `-MemberExpr 0x556302fa0a50 <col:7> 'IPAddress' xvalue ._daddr 0x556302f9e628
| |     `-CXXStaticCastExpr 0x556302fa0a20 <col:7> 'IPFlowID' xvalue static_cast<class IPFlowID &&> <NoOp>
| |       `-DeclRefExpr 0x556302fa09f0 <col:7> 'IPFlowID' lvalue ParmVar 0x556302fa0618 '' 'IPFlowID &&'
| |-CXXCtorInitializer Field 0x556302f9e688 '_sport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x556302fa0b98 <col:7> 'uint16_t':'unsigned short' <LValueToRValue>
| |   `-MemberExpr 0x556302fa0b50 <col:7> 'uint16_t':'unsigned short' xvalue ._sport 0x556302f9e688
| |     `-CXXStaticCastExpr 0x556302fa0b20 <col:7> 'IPFlowID' xvalue static_cast<class IPFlowID &&> <NoOp>
| |       `-DeclRefExpr 0x556302fa0af0 <col:7> 'IPFlowID' lvalue ParmVar 0x556302fa0618 '' 'IPFlowID &&'
| |-CXXCtorInitializer Field 0x556302f9e6e8 '_dport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x556302fa0c80 <col:7> 'uint16_t':'unsigned short' <LValueToRValue>
| |   `-MemberExpr 0x556302fa0c38 <col:7> 'uint16_t':'unsigned short' xvalue ._dport 0x556302f9e6e8
| |     `-CXXStaticCastExpr 0x556302fa0c08 <col:7> 'IPFlowID' xvalue static_cast<class IPFlowID &&> <NoOp>
| |       `-DeclRefExpr 0x556302fa0bd8 <col:7> 'IPFlowID' lvalue ParmVar 0x556302fa0618 '' 'IPFlowID &&'
| `-CompoundStmt 0x556302fa0ce0 <col:7>
|-CXXDestructorDecl 0x556302fa0768 <col:7> col:7 implicit referenced ~IPFlowID 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x556302fa9160 <col:7> col:7 implicit used operator= 'IPFlowID &(const IPFlowID &) noexcept' inline default trivial
| |-ParmVarDecl 0x556302fa9268 <col:7> col:7 used 'const IPFlowID &'
| `-CompoundStmt 0x556302fa9dc8 <col:7>
|   |-CXXMemberCallExpr 0x556302fa9a58 <col:7> 'IPAddress' lvalue
|   | |-MemberExpr 0x556302fa9a10 <col:7> '<bound member function type>' .operator= 0x556302f9f768
|   | | `-MemberExpr 0x556302fa9920 <col:7> 'IPAddress' lvalue ->_saddr 0x556302f9e5c8
|   | |   `-CXXThisExpr 0x556302fa9910 <col:7> 'IPFlowID *' this
|   | `-MemberExpr 0x556302fa99e0 <col:7> 'const IPAddress' lvalue ._saddr 0x556302f9e5c8
|   |   `-DeclRefExpr 0x556302fa99c0 <col:7> 'const IPFlowID' lvalue ParmVar 0x556302fa9268 '' 'const IPFlowID &'
|   |-CXXMemberCallExpr 0x556302fa9bd8 <col:7> 'IPAddress' lvalue
|   | |-MemberExpr 0x556302fa9b90 <col:7> '<bound member function type>' .operator= 0x556302f9f768
|   | | `-MemberExpr 0x556302fa9aa0 <col:7> 'IPAddress' lvalue ->_daddr 0x556302f9e628
|   | |   `-CXXThisExpr 0x556302fa9a90 <col:7> 'IPFlowID *' this
|   | `-MemberExpr 0x556302fa9b60 <col:7> 'const IPAddress' lvalue ._daddr 0x556302f9e628
|   |   `-DeclRefExpr 0x556302fa9b40 <col:7> 'const IPFlowID' lvalue ParmVar 0x556302fa9268 '' 'const IPFlowID &'
|   |-BinaryOperator 0x556302fa9ca8 <col:7> 'uint16_t':'unsigned short' lvalue '='
|   | |-MemberExpr 0x556302fa9c60 <col:7> 'uint16_t':'unsigned short' lvalue ->_sport 0x556302f9e688
|   | | `-CXXThisExpr 0x556302fa9c50 <col:7> 'IPFlowID *' this
|   | `-ImplicitCastExpr 0x556302fa9c90 <col:7> 'uint16_t':'unsigned short' <LValueToRValue>
|   |   `-MemberExpr 0x556302fa9c20 <col:7> 'const uint16_t':'const unsigned short' lvalue ._sport 0x556302f9e688
|   |     `-DeclRefExpr 0x556302fa9c00 <col:7> 'const IPFlowID' lvalue ParmVar 0x556302fa9268 '' 'const IPFlowID &'
|   |-BinaryOperator 0x556302fa9d70 <col:7> 'uint16_t':'unsigned short' lvalue '='
|   | |-MemberExpr 0x556302fa9d28 <col:7> 'uint16_t':'unsigned short' lvalue ->_dport 0x556302f9e6e8
|   | | `-CXXThisExpr 0x556302fa9d18 <col:7> 'IPFlowID *' this
|   | `-ImplicitCastExpr 0x556302fa9d58 <col:7> 'uint16_t':'unsigned short' <LValueToRValue>
|   |   `-MemberExpr 0x556302fa9ce8 <col:7> 'const uint16_t':'const unsigned short' lvalue ._dport 0x556302f9e6e8
|   |     `-DeclRefExpr 0x556302fa9cc8 <col:7> 'const IPFlowID' lvalue ParmVar 0x556302fa9268 '' 'const IPFlowID &'
|   `-ReturnStmt 0x556302fa9db8 <col:7>
|     `-UnaryOperator 0x556302fa9da0 <col:7> 'IPFlowID' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x556302fa9d90 <col:7> 'IPFlowID *' this
`-CXXMethodDecl 0x556302fa92d8 <col:7> col:7 implicit operator= 'IPFlowID &(IPFlowID &&)' inline default trivial noexcept-unevaluated 0x556302fa92d8
  `-ParmVarDecl 0x556302fa93e8 <col:7> col:7 'IPFlowID &&'

Layout: <CGRecordLayout
  LLVMType:%class.IPFlowID = type { %class.IPAddress, %class.IPAddress, i16, i16 }
  NonVirtualBaseLLVMType:%class.IPFlowID = type { %class.IPAddress, %class.IPAddress, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556302fa7c20 prev 0x556302fa4320 <../elements/ip/iprwmapping.hh:16:1, line:65:1> line:16:7 referenced class IPRewriterEntry definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x556302fa7d18 <col:1, col:7> col:7 implicit referenced class IPRewriterEntry
|-AccessSpecDecl 0x556302fa7da8 <col:25, col:31> col:25 public
|-TypedefDecl 0x556302fa7de0 <line:18:5, col:22> col:22 referenced key_type 'IPFlowID'
| `-RecordType 0x556302f9c4b0 'IPFlowID'
|   `-CXXRecord 0x556302f9c420 'IPFlowID'
|-TypedefDecl 0x556302fa7e48 <line:19:5, col:29> col:29 referenced key_const_reference 'const IPFlowID &'
| `-LValueReferenceType 0x556302f9e940 'const IPFlowID &'
|   `-QualType 0x556302f9c4b1 'const IPFlowID' const
|     `-RecordType 0x556302f9c4b0 'IPFlowID'
|       `-CXXRecord 0x556302f9c420 'IPFlowID'
|-CXXConstructorDecl 0x556302fa7f00 <line:21:5, line:22:5> line:21:5 IPRewriterEntry 'void ()'
| |-CXXCtorInitializer Field 0x556302fa8960 '_flowid' 'IPFlowID'
| | `-CXXConstructExpr 0x556302fa8c68 <col:5> 'IPFlowID' 'void ()'
| `-CompoundStmt 0x556302fa8cc0 <col:23, line:22:5>
|-CXXMethodDecl 0x556302fa81c8 <line:24:5, line:30:5> line:24:10 initialize 'void (const IPFlowID &, uint32_t, bool)'
| |-ParmVarDecl 0x556302fa7fb8 <col:21, col:37> col:37 used flowid 'const IPFlowID &'
| |-ParmVarDecl 0x556302fa8030 <col:45, col:54> col:54 used output 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x556302fa80a8 <col:62, col:67> col:67 used direction 'bool'
| `-CompoundStmt 0x556302faa088 <col:78, line:30:5>
|   |-ParenExpr 0x556302fa90e0 <line:25:2, col:164> 'void'
|   | `-ConditionalOperator 0x556302fa90b0 <col:3, col:163> 'void'
|   |   |-CXXStaticCastExpr 0x556302fa8d70 <col:3, col:41> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556302fa8d40 <col:23, col:33> 'bool' '<='
|   |   |   |-ImplicitCastExpr 0x556302fa8d10 <col:23> 'uint32_t':'unsigned int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x556302fa8cd0 <col:23> 'uint32_t':'unsigned int' lvalue ParmVar 0x556302fa8030 'output' 'uint32_t':'unsigned int'
|   |   |   `-ImplicitCastExpr 0x556302fa8d28 <col:33> 'unsigned int' <IntegralCast>
|   |   |     `-IntegerLiteral 0x556302fa8cf0 <col:33> 'int' 16777215
|   |   |-CXXFunctionalCastExpr 0x556302fa8dd0 <col:45, col:52> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556302fa8db0 <col:51> 'int' 0
|   |   `-CallExpr 0x556302fa9010 <col:56, col:163> 'void'
|   |     |-ImplicitCastExpr 0x556302fa8ff8 <col:56> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556302fa8fd8 <col:56> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556302a2b600 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556302fa9050 <col:71> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302fa8e40 <col:71> 'const char [19]' lvalue "output <= 0xFFFFFF"
|   |     |-ImplicitCastExpr 0x556302fa9068 <col:93> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302fa8e70 <col:93> 'const char [30]' lvalue "../elements/ip/iprwmapping.hh"
|   |     |-ImplicitCastExpr 0x556302fa9080 <col:126> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556302fa8ea8 <col:126> 'int' 25
|   |     `-ImplicitCastExpr 0x556302fa9098 <col:130, col:144> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556302fa8fc0 <col:130, col:144> 'const char [67]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556302fa8fa8 <col:144> 'const char [67]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556302fa8f48 <col:144> 'const char [67]' lvalue "void IPRewriterEntry::initialize(const IPFlowID &, uint32_t, bool)"
|   |-CXXOperatorCallExpr 0x556302fa9e70 <line:26:2, col:12> 'IPFlowID' lvalue
|   | |-ImplicitCastExpr 0x556302fa9e58 <col:10> 'IPFlowID &(*)(const IPFlowID &) noexcept' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x556302fa98a8 <col:10> 'IPFlowID &(const IPFlowID &) noexcept' lvalue CXXMethod 0x556302fa9160 'operator=' 'IPFlowID &(const IPFlowID &) noexcept'
|   | |-MemberExpr 0x556302fa9110 <col:2> 'IPFlowID' lvalue ->_flowid 0x556302fa8960
|   | | `-CXXThisExpr 0x556302fa9100 <col:2> 'IPRewriterEntry *' implicit this
|   | `-DeclRefExpr 0x556302fa9140 <col:12> 'const IPFlowID' lvalue ParmVar 0x556302fa7fb8 'flowid' 'const IPFlowID &'
|   |-BinaryOperator 0x556302fa9f20 <line:27:2, col:12> 'uint32_t':'unsigned int' lvalue bitfield '='
|   | |-MemberExpr 0x556302fa9eb8 <col:2> 'uint32_t':'unsigned int' lvalue bitfield ->_output 0x556302fa8a00
|   | | `-CXXThisExpr 0x556302fa9ea8 <col:2> 'IPRewriterEntry *' implicit this
|   | `-ImplicitCastExpr 0x556302fa9f08 <col:12> 'uint32_t':'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x556302fa9ee8 <col:12> 'uint32_t':'unsigned int' lvalue ParmVar 0x556302fa8030 'output' 'uint32_t':'unsigned int'
|   |-BinaryOperator 0x556302fa9fd0 <line:28:2, col:15> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x556302fa9f50 <col:2> 'uint8_t':'unsigned char' lvalue ->_direction 0x556302fa8a60
|   | | `-CXXThisExpr 0x556302fa9f40 <col:2> 'IPRewriterEntry *' implicit this
|   | `-ImplicitCastExpr 0x556302fa9fb8 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-ImplicitCastExpr 0x556302fa9fa0 <col:15> 'bool' <LValueToRValue>
|   |     `-DeclRefExpr 0x556302fa9f80 <col:15> 'bool' lvalue ParmVar 0x556302fa80a8 'direction' 'bool'
|   `-BinaryOperator 0x556302faa068 <line:29:2, col:14> 'IPRewriterEntry *' lvalue '='
|     |-MemberExpr 0x556302faa000 <col:2> 'IPRewriterEntry *' lvalue ->_hashnext 0x556302fa8ac0
|     | `-CXXThisExpr 0x556302fa9ff0 <col:2> 'IPRewriterEntry *' implicit this
|     `-ImplicitCastExpr 0x556302faa050 <col:14> 'IPRewriterEntry *' <NullToPointer>
|       `-IntegerLiteral 0x556302faa030 <col:14> 'int' 0
|-CXXMethodDecl 0x556302fa82f8 <line:32:5, line:34:5> line:32:21 used flowid 'const IPFlowID &() const'
| `-CompoundStmt 0x556302faa110 <col:36, line:34:5>
|   `-ReturnStmt 0x556302faa100 <line:33:2, col:9>
|     `-MemberExpr 0x556302faa0d0 <col:9> 'const IPFlowID' lvalue ->_flowid 0x556302fa8960
|       `-CXXThisExpr 0x556302faa0c0 <col:9> 'const IPRewriterEntry *' implicit this
|-CXXMethodDecl 0x556302fa83b8 <line:35:5, col:40> col:21 rewritten_flowid 'IPFlowID () const' inline
|-CXXMethodDecl 0x556302fa8478 <line:37:5, line:39:5> line:37:10 direction 'bool () const'
| `-CompoundStmt 0x556302faa1a8 <col:28, line:39:5>
|   `-ReturnStmt 0x556302faa198 <line:38:2, col:9>
|     `-ImplicitCastExpr 0x556302faa180 <col:9> 'bool' <IntegralToBoolean>
|       `-ImplicitCastExpr 0x556302faa168 <col:9> 'uint8_t':'unsigned char' <LValueToRValue>
|         `-MemberExpr 0x556302faa138 <col:9> 'const uint8_t':'const unsigned char' lvalue ->_direction 0x556302fa8a60
|           `-CXXThisExpr 0x556302faa128 <col:9> 'const IPRewriterEntry *' implicit this
|-CXXMethodDecl 0x556302fa8540 <line:41:5, line:43:5> line:41:9 output 'int () const'
| `-CompoundStmt 0x556302faa240 <col:24, line:43:5>
|   `-ReturnStmt 0x556302faa230 <line:42:2, col:9>
|     `-ImplicitCastExpr 0x556302faa218 <col:9> 'int' <IntegralCast>
|       `-ImplicitCastExpr 0x556302faa200 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-MemberExpr 0x556302faa1d0 <col:9> 'const uint32_t':'const unsigned int' lvalue bitfield ->_output 0x556302fa8a00
|           `-CXXThisExpr 0x556302faa1c0 <col:9> 'const IPRewriterEntry *' implicit this
|-CXXMethodDecl 0x556302fa8658 <line:45:5, line:47:5> line:45:21 flow 'IPRewriterFlow *()'
| `-CompoundStmt 0x556302faa348 <col:28, line:47:5>
|   `-ReturnStmt 0x556302faa338 <line:46:2, col:61>
|     `-CXXReinterpretCastExpr 0x556302faa308 <col:9, col:61> 'IPRewriterFlow *' reinterpret_cast<class IPRewriterFlow *> <BitCast>
|       `-BinaryOperator 0x556302faa2d8 <col:44, col:51> 'IPRewriterEntry *' '-'
|         |-CXXThisExpr 0x556302faa258 <col:44> 'IPRewriterEntry *' this
|         `-ImplicitCastExpr 0x556302faa2c0 <col:51> 'int' <IntegralCast>
|           `-ImplicitCastExpr 0x556302faa2a8 <col:51> 'uint8_t':'unsigned char' <LValueToRValue>
|             `-MemberExpr 0x556302faa278 <col:51> 'uint8_t':'unsigned char' lvalue ->_direction 0x556302fa8a60
|               `-CXXThisExpr 0x556302faa268 <col:51> 'IPRewriterEntry *' implicit this
|-CXXMethodDecl 0x556302fa8778 <line:48:5, line:50:5> line:48:27 flow 'const IPRewriterFlow *() const'
| `-CompoundStmt 0x556302faa450 <col:40, line:50:5>
|   `-ReturnStmt 0x556302faa440 <line:49:2, col:67>
|     `-CXXReinterpretCastExpr 0x556302faa410 <col:9, col:67> 'const IPRewriterFlow *' reinterpret_cast<const class IPRewriterFlow *> <BitCast>
|       `-BinaryOperator 0x556302faa3e0 <col:50, col:57> 'const IPRewriterEntry *' '-'
|         |-CXXThisExpr 0x556302faa360 <col:50> 'const IPRewriterEntry *' this
|         `-ImplicitCastExpr 0x556302faa3c8 <col:57> 'int' <IntegralCast>
|           `-ImplicitCastExpr 0x556302faa3b0 <col:57> 'uint8_t':'unsigned char' <LValueToRValue>
|             `-MemberExpr 0x556302faa380 <col:57> 'const uint8_t':'const unsigned char' lvalue ->_direction 0x556302fa8a60
|               `-CXXThisExpr 0x556302faa370 <col:57> 'const IPRewriterEntry *' implicit this
|-CXXMethodDecl 0x556302fa8888 <line:52:5, line:54:5> line:52:25 used hashkey 'IPRewriterEntry::key_const_reference () const'
| `-CompoundStmt 0x556302faa4b8 <col:41, line:54:5>
|   `-ReturnStmt 0x556302faa4a8 <line:53:2, col:9>
|     `-MemberExpr 0x556302faa478 <col:9> 'const IPFlowID' lvalue ->_flowid 0x556302fa8960
|       `-CXXThisExpr 0x556302faa468 <col:9> 'const IPRewriterEntry *' implicit this
|-AccessSpecDecl 0x556302fa8928 <line:56:3, col:10> col:3 private
|-FieldDecl 0x556302fa8960 <line:58:5, col:14> col:14 referenced _flowid 'IPFlowID'
|-FieldDecl 0x556302fa8a00 <line:59:5, col:24> col:14 referenced _output 'uint32_t':'unsigned int'
| `-ConstantExpr 0x556302fa89e0 <col:24> 'int' Int: 24
|   `-IntegerLiteral 0x556302fa89b0 <col:24> 'int' 24
|-FieldDecl 0x556302fa8a60 <line:60:5, col:13> col:13 referenced _direction 'uint8_t':'unsigned char'
|-FieldDecl 0x556302fa8ac0 <line:61:5, col:22> col:22 referenced _hashnext 'IPRewriterEntry *'
|-FriendDecl 0x556302fa8c10 <line:63:5, col:55> col:12 'class HashContainer_adapter<IPRewriterEntry>':'HashContainer_adapter<IPRewriterEntry>'
|-CXXConstructorDecl 0x556303002168 <line:16:7> col:7 implicit constexpr IPRewriterEntry 'void (const IPRewriterEntry &)' inline default trivial noexcept-unevaluated 0x556303002168
| `-ParmVarDecl 0x556303002278 <col:7> col:7 'const IPRewriterEntry &'
|-CXXConstructorDecl 0x556303002318 <col:7> col:7 implicit constexpr IPRewriterEntry 'void (IPRewriterEntry &&)' inline default trivial noexcept-unevaluated 0x556303002318
| `-ParmVarDecl 0x556303002428 <col:7> col:7 'IPRewriterEntry &&'
`-CXXDestructorDecl 0x556303002618 <col:7> col:7 implicit ~IPRewriterEntry 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPRewriterEntry = type { %class.IPFlowID, [3 x i8], i8, %class.IPRewriterEntry* }
  NonVirtualBaseLLVMType:%class.IPRewriterEntry = type { %class.IPFlowID, [3 x i8], i8, %class.IPRewriterEntry* }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:24 IsSigned:0 StorageSize:24 StorageOffset:12>
]>

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556302f08a08 prev 0x556302f00178 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x556302f08b00 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x556302f08b90 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x556302f08c08 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x556302f08cc8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x556302f08d90 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x556302f08f08 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x556302f08e40 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x556302f08fb0 <col:24>
| `-OptimizeNoneAttr 0x556302f09008 <col:34>
|-CXXMethodDecl 0x556302f09050 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x556302f09308 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x556302f09100 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x556302f09178 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x556302f091f8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x556302f093d0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x556302f09408 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x556302f09470 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x556302f094f8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x556302f09818 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x556302f095b0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x556302f09628 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x556302f096a0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x556302f09720 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x556302f09930 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x556302e77fb8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x556302e77fb8
| `-ParmVarDecl 0x556302e780c8 <col:11> col:11 'const Element::Port &'
`-CXXConstructorDecl 0x556302e78168 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x556302e78168
  `-ParmVarDecl 0x556302e78278 <col:11> col:11 'Element::Port &&'

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556302efb9c0 prev 0x556302efb740 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x556302efbab8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x556302efbb48 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x556302efbba8 <line:31:5, col:13> col:5 Element 'void ()'
|-CXXDestructorDecl 0x556302efbc98 <line:32:5, col:22> col:13 ~Element 'void ()' virtual noexcept-unevaluated 0x556302efbc98
|-VarDecl 0x556302efbd98 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x556302efbf68 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x556302efbe18 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x556302efbe90 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x556302efc0f8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x556302efc030 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x556302efc1a0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x556302efc2d8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x556302efc210 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x556302efc478 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x556302efc3b8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x556302efc618 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x556302efc558 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x556302efc6c0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x556302efc7c0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x556302efc8a0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302efc7a0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x556302efc780 <col:26> 'int' 1
| `-EnumConstantDecl 0x556302efc850 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x556302efc8b8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556302efc830 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x556302efc810 <col:44> 'int' 2
|-CXXMethodDecl 0x556302efca00 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x556302efc8e8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x556302efc968 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x556302efcb58 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x556302efcac8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x556302efcd98 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x556302efcc18 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x556302efcc90 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x556302efce48 <col:20>
| `-OptimizeNoneAttr 0x556302efcea0 <col:30>
|-CXXMethodDecl 0x556302efcfa8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x556302efcee0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x556302efd050 <col:20>
| `-OptimizeNoneAttr 0x556302efd0a8 <col:30>
|-CXXMethodDecl 0x556302efd0f8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x556302efd1c0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x556302efd2d8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x556302efd3a0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x556302efd428 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x556302efd4b0 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x556302efd538 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x556302efd5c8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x556302efd688 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x556302efd710 <line:63:5, col:28> col:23 used PUSH 'const char []' static
|-VarDecl 0x556302efd798 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x556302efd820 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x556302efd8a8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x556302efd930 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x556302efd9c0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x556302efda80 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x556302efdb10 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x556302efdc60 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x556302efdbc8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x556302efddf0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x556302efdd20 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x556302efe090 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x556302efdea8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x556302efdf28 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x556302efdfa8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x556302efe148 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x556302efe250 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x556302efe4e0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302efe230 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x556302efe210 <col:33> 'int' 0
| |-EnumConstantDecl 0x556302efe2e0 <line:81:9, col:32> col:9 referenced CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x556302efe4f8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302efe2c0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x556302efe2a0 <col:32> 'int' 20
| |-EnumConstantDecl 0x556302efe370 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x556302efe510 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302efe350 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x556302efe330 <col:38> 'int' 90
| |-EnumConstantDecl 0x556302efe400 <line:83:9, col:35> col:9 referenced CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x556302efe528 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302efe3e0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x556302efe3c0 <col:35> 'int' 100
| `-EnumConstantDecl 0x556302efe490 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x556302efe540 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556302efe470 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x556302efe450 <col:32> 'int' 2000
|-CXXMethodDecl 0x556302efe580 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x556302efe9c0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x556302efe830 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x556302efe8a8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x556302efea90 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x556302efec10 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x556302efeb40 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x556302efee18 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x556302efecc8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x556302efed40 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x556302efef18 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x556302efefb8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x556302eff080 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x556302eff110 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x556302eff340 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302eff0f0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x556302eff0d0 <col:36> 'int' EnumConstant 0x556302eff080 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x556302eff160 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x556302eff1b0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x556302eff200 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x556302eff250 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x556302eff2a0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x556302eff2f0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x556302eff428 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x556302eff368 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x556302eff4f0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x556302eff5b0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x556302eff670 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x556302eff730 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x556302eff848 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x556302eff910 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x556302effa90 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x556302eff9c0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x556302effbb8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x556302effdb8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x556302effc68 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x556302effce8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x556302f0c718 <col:54, line:127:5>
|   |-ParenExpr 0x556302f0c5c8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x556302f0c598 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x556302f0c288 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x556302f0c260 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x556302f0c248 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x556302f0c230 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x556302f0c200 <col:31> 'Router *' lvalue ->_router 0x556302f0a0e0
|   |   |         `-CXXThisExpr 0x556302f0c1f0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x556302f0c2e8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556302f0c2c8 <col:48> 'int' 0
|   |   `-CallExpr 0x556302f0c4f8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x556302f0c4e0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556302f0c4c0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556302a2b600 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556302f0c538 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302f0c358 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x556302f0c550 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302f0c378 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x556302f0c568 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556302f0c3b0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x556302f0c580 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556302f0c4a8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556302f0c490 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556302f0c448 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x556302f0c660 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x556302f0c5f8 <col:9> 'Router *' lvalue ->_router 0x556302f0a0e0
|   | | `-CXXThisExpr 0x556302f0c5e8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x556302f0c648 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x556302f0c628 <col:19> 'Router *' lvalue ParmVar 0x556302effc68 'r' 'Router *'
|   `-BinaryOperator 0x556302f0c6f8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x556302f0c690 <col:9> 'int' lvalue ->_eindex 0x556302f0a148
|     | `-CXXThisExpr 0x556302f0c680 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x556302f0c6e0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x556302f0c6c0 <col:19> 'int' lvalue ParmVar 0x556302effce8 'eindex' 'int'
|-CXXMethodDecl 0x556302efff40 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x556302effe78 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x556302f00010 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x556302f000d8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x556302f00178 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x556302f003c8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x556302f00240 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x556302f002c0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x556302f00478 <col:20>
| `-OptimizeNoneAttr 0x556302f004d0 <col:30>
|-CXXMethodDecl 0x556302f005d8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x556302f00510 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x556302f00680 <col:20>
| `-OptimizeNoneAttr 0x556302f006d8 <col:30>
|-CXXMethodDecl 0x556302f007a8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x556302f00718 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x556302f00850 <col:20>
| `-OptimizeNoneAttr 0x556302f008a8 <col:30>
|-CXXMethodDecl 0x556302f00a38 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x556302f008e0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x556302f00960 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x556302f00bc8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x556302f00b00 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x556302f00d18 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x556302f00c88 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x556302f00e68 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x556302f00dd8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x556302f00fb8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x556302f00f28 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x556302f01278 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x556302f01070 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x556302f010f0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x556302f01198 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x556302f013b0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x556302f01470 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x556302f01740 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x556302f015f0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x556302f01668 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x556302f01868 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x556302f01a40 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x556302f01920 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x556302f019a0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x556302f01c28 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x556302f01b08 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x556302f01b88 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x556302f01f98 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x556302f01ce8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x556302f01d60 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x556302f01de0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x556302f0bd00 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x556302f0bce0 <col:106> 'int' 0
| `-ParmVarDecl 0x556302f01e58 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x556302f0bd38 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x556302f0bd18 <col:126> 'int' 0
|-CXXMethodDecl 0x556302f02318 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x556302f02068 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x556302f020e0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x556302f02160 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x556302f021d8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x556302f0bd70 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x556302f0bd50 <col:114> 'int' 0
|-CXXMethodDecl 0x556302f026a8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x556302f023f0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x556302f02468 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x556302f024e8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x556302f0bd88 <col:96> 'int' 0
| `-ParmVarDecl 0x556302f02560 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x556302f0bdc8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x556302f0bda8 <col:116> 'int' 0
|-CXXMethodDecl 0x556302f02a28 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x556302f02778 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x556302f027f0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x556302f02870 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x556302f0be00 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x556302f0bde0 <col:109> 'int' 0
| `-ParmVarDecl 0x556302f028e8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x556302f0be38 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x556302f0be18 <col:129> 'int' 0
|-CXXMethodDecl 0x556302f02da8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x556302f02af8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x556302f02b70 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x556302f02bf0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x556302f02c68 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x556302f0be70 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x556302f0be50 <col:117> 'int' 0
|-CXXMethodDecl 0x556302f03138 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x556302f02e80 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556302f02ef8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x556302f02f78 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x556302f0be88 <col:99> 'int' 0
| `-ParmVarDecl 0x556302f02ff0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x556302f0bec8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x556302f0bea8 <col:119> 'int' 0
|-CXXMethodDecl 0x556302f03558 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x556302f03208 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x556302f03288 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x556302f03300 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x556302f03380 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x556302f0bf00 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x556302f0bee0 <col:108> 'int' 0
| `-ParmVarDecl 0x556302f03400 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x556302f0bf38 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x556302f0bf18 <col:141> 'int' 0
|-CXXMethodDecl 0x556302f03978 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x556302f03630 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x556302f036b0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x556302f03728 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x556302f037a8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x556302f03828 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x556302f0bf50 <col:121> 'int' 0
|-CXXMethodDecl 0x556302f03da8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x556302f03a58 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x556302f03ad8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x556302f03b50 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x556302f03bd0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x556302f0bf70 <col:98> 'int' 0
| `-ParmVarDecl 0x556302f03c50 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x556302f0bf90 <col:123> 'int' 0
|-CXXMethodDecl 0x556302f04070 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x556302f03e80 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x556302f03f00 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x556302f03f80 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x556302f0bfb0 <col:80> 'int' 0
|-EnumDecl 0x556302f04128 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x556302f04230 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x556302f044c0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302f04210 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x556302f041f0 <col:42> 'int' 1
| |-EnumConstantDecl 0x556302f042c0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x556302f044d8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302f042a0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x556302f04280 <col:40> 'int' 2
| |-EnumConstantDecl 0x556302f04350 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x556302f044f0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302f04330 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x556302f04310 <col:44> 'int' 4
| |-EnumConstantDecl 0x556302f043e0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x556302f04508 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302f043c0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x556302f043a0 <col:36> 'int' 7
| `-EnumConstantDecl 0x556302f04470 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x556302f04520 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556302f04450 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x556302f04430 <col:34> 'int' 6
|-CXXMethodDecl 0x556302f047d8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x556302f04548 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x556302f045e8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x556302f04668 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x556302f046e0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x556302f0c068 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x556302f0c050 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x556302f0c038 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x556302f0c018 <col:98, col:105> 'String' (CXXTemporary 0x556302f0c018)
|           `-CXXTemporaryObjectExpr 0x556302f0bfe0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x556302f04a78 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x556302f048a8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x556302f04920 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x556302f04998 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x556302f0c118 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x556302f0c100 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x556302f0c0e8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x556302f0c0c8 <col:94, col:101> 'String' (CXXTemporary 0x556302f0c0c8)
| |         `-CXXTemporaryObjectExpr 0x556302f0c090 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x556302f0c900 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x556302f0c878 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x556302f0c848 <col:9> '<bound member function type>' ->add_task_handlers 0x556302f047d8
|     | `-CXXThisExpr 0x556302f0c838 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x556302f0c8b8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x556302f0c7b8 <col:27> 'Task *' lvalue ParmVar 0x556302f048a8 'task' 'Task *'
|     |-ImplicitCastExpr 0x556302f0c8d0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x556302f0c7d8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x556302f04920 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x556302f0c8e8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x556302f0c7f8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x556302f04470 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x556302f0c818 <col:62> 'const String' lvalue ParmVar 0x556302f04998 'prefix' 'const String &'
|-CXXMethodDecl 0x556302f04c88 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x556302f04b40 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x556302f04bb8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x556302f0c1c8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x556302f0c1b0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x556302f0c198 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x556302f0c178 <col:70, col:77> 'String' (CXXTemporary 0x556302f0c178)
| |         `-CXXTemporaryObjectExpr 0x556302f0c140 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x556302f0cad8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x556302f0ca50 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x556302f0ca20 <col:9> '<bound member function type>' ->add_task_handlers 0x556302f047d8
|     | `-CXXThisExpr 0x556302f0ca10 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x556302f0ca90 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x556302f0c990 <col:27> 'Task *' lvalue ParmVar 0x556302f04b40 'task' 'Task *'
|     |-ImplicitCastExpr 0x556302f0caa8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x556302f0c9b0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x556302f0cac0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x556302f0c9d0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x556302f04470 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x556302f0c9f0 <col:57> 'const String' lvalue ParmVar 0x556302f04bb8 'prefix' 'const String &'
|-CXXMethodDecl 0x556302f04f68 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x556302f04d50 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556302f04dd0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556302f04e48 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x556302f05218 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x556302f05038 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556302f050b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556302f05138 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x556302f05558 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x556302f052e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556302f053c0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556302f05438 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x556302f05808 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x556302f05628 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556302f056a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556302f05728 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x556302f05ab8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x556302f058d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556302f05958 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556302f059d8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x556302f05d68 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x556302f05b88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556302f05c08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556302f05c80 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x556302f06018 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x556302f05e38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556302f05eb8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556302f05f38 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x556302f062c8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x556302f060e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556302f06168 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556302f061e8 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x556302f065a8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x556302f06398 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556302f06418 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556302f064c0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x556302f06888 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x556302f06678 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556302f066f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556302f067a0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x556302f06af0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x556302f06958 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x556302f069d8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x556302f06a50 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x556302f06d98 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x556302f06bc0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x556302f06c40 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x556302f06cb8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x556302f07048 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x556302f06e68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556302f06ee8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556302f06f68 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x556302f072f8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x556302f07118 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556302f07198 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556302f07210 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x556302f075a8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x556302f073c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556302f07448 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556302f074c0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x556302f07878 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x556302f07678 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556302f076f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x556302f07798 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x556302f07ba8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x556302f07948 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x556302f079c8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x556302f07a40 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x556302f07ab8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x556302f0c1e0 <col:93> 'bool' false
|-CXXMethodDecl 0x556302f07d90 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x556302f07c78 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x556302f07cf8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x556302f07f68 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x556302f07e50 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x556302f07ed0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x556302f08248 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x556302f08028 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x556302f080a0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x556302f08120 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x556302f08198 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x556302f08538 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x556302f08318 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x556302f08390 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x556302f08410 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x556302f08488 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x556302f08770 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x556302f08610 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x556302f08690 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x556302f08958 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x556302f08838 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x556302f088b8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x556302f08a08 prev 0x556302f00178 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x556302f08b00 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x556302f08b90 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x556302f08c08 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x556302f08cc8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x556302f08d90 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x556302f08f08 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x556302f08e40 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x556302f08fb0 <col:24>
| | `-OptimizeNoneAttr 0x556302f09008 <col:34>
| |-CXXMethodDecl 0x556302f09050 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x556302f09308 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x556302f09100 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x556302f09178 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x556302f091f8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x556302f093d0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x556302f09408 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x556302f09470 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x556302f094f8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x556302f09818 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x556302f095b0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x556302f09628 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x556302f096a0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x556302f09720 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x556302f09930 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x556302e77fb8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x556302e77fb8
| | `-ParmVarDecl 0x556302e780c8 <col:11> col:11 'const Element::Port &'
| `-CXXConstructorDecl 0x556302e78168 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x556302e78168
|   `-ParmVarDecl 0x556302e78278 <col:11> col:11 'Element::Port &&'
|-CXXMethodDecl 0x556302f099a8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x556302f09a48 <col:38> "" ""
|-CXXMethodDecl 0x556302f09ad8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x556302f09b78 <col:44> "" ""
|-AccessSpecDecl 0x556302f09be8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x556302f09c10 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x556302f09d10 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x556302f09d60 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556302f09cf0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x556302f09cd0 <col:27> 'int' 4
|-FieldDecl 0x556302f09e18 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x556302f09fc8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x556302f0a080 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x556302f0a0e0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x556302f0a148 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x556302f0a298 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x556302f0a1d8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x556302f0a448 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x556302f0a358 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x556302f0a628 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x556302f0a508 <col:20> col:23 'int'
| `-ParmVarDecl 0x556302f0a588 <col:25> col:28 'int'
|-CXXMethodDecl 0x556302f0a8d0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x556302f0a6f0 <col:23> col:26 'int'
| |-ParmVarDecl 0x556302f0a770 <col:28> col:31 'int'
| `-ParmVarDecl 0x556302f0a7e8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x556302f0a988 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x556302f0aa50 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x556302f0aaa0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x556302f0aaf0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x556302f0acd0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x556302f0ab80 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x556302f0abf8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x556302f0af78 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x556302f0ad98 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x556302f0ae18 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x556302f0ae90 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x556302f0b198 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x556302f0b048 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x556302f0b0c8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x556302f0b4d0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x556302f0b258 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x556302f0b2d8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x556302f0b350 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x556302f0b3d0 <col:57> col:60 'int'
|-CXXMethodDecl 0x556302f0b6b8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x556302f0b5a0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x556302f0b620 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x556302f0b808 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x556302f0b778 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x556302f0bb88 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x556302f0b8c8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x556302f0b948 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x556302f0b9c0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x556302f0ba40 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x556302f0bca0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class HashContainer_adapter<class IPRewriterEntry> (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class HashContainer_rep<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> >
         0 |   class HashContainer_adapter<class IPRewriterEntry> (base) (empty)
         0 |   class IPRewriterEntry ** buckets
         8 |   uint32_t nbuckets
        12 |   uint32_t first_bucket
        16 |   size_t size
        24 |   struct libdivide_u32_t bucket_divider
        24 |     uint32_t magic
        28 |     uint8_t more
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping AST Record Layout
         0 | class HashContainer<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> >
         0 |   class HashContainer_rep<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > _rep
         0 |     class HashContainer_adapter<class IPRewriterEntry> (base) (empty)
         0 |     class IPRewriterEntry ** buckets
         8 |     uint32_t nbuckets
        12 |     uint32_t first_bucket
        16 |     size_t size
        24 |     struct libdivide_u32_t bucket_divider
        24 |       uint32_t magic
        28 |       uint8_t more
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<56> >
         0 |   vector_memory<class sized_array_memory<56> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class IPRewriterInput>
         0 |   class vector_memory<class sized_array_memory<56> > vm_
         0 |     vector_memory<class sized_array_memory<56> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5)
         0 |   TimerCallback callback
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timer
         0 |   int _schedpos1
         8 |   class Timestamp _expiry_s
         8 |     union Timestamp::rep_t _t
         8 |       int64_t x
        16 |   union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
        16 |     TimerCallback callback
        24 |   void * _thunk
        32 |   class Element * _owner
        40 |   class RouterThread * _thread
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPRewriterBase
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       112 |   class HashContainer<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > _map
       112 |     class HashContainer_rep<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > _rep
       112 |       class HashContainer_adapter<class IPRewriterEntry> (base) (empty)
       112 |       class IPRewriterEntry ** buckets
       120 |       uint32_t nbuckets
       124 |       uint32_t first_bucket
       128 |       size_t size
       136 |       struct libdivide_u32_t bucket_divider
       136 |         uint32_t magic
       140 |         uint8_t more
       144 |   class Vector<class IPRewriterInput> _input_specs
       144 |     class vector_memory<class sized_array_memory<56> > vm_
       144 |       vector_memory<class sized_array_memory<56> >::type * l_
       152 |       vector_memory::size_type n_
       156 |       vector_memory::size_type capacity_
       160 |   class IPRewriterHeap * _heap
       168 |   uint32_t [2] _timeouts
       176 |   uint32_t _gc_interval_sec
       184 |   class Timer _gc_timer
       184 |     int _schedpos1
       192 |     class Timestamp _expiry_s
       192 |       union Timestamp::rep_t _t
       192 |         int64_t x
       200 |     union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
       200 |       TimerCallback callback
       208 |     void * _thunk
       216 |     class Element * _owner
       224 |     class RouterThread * _thread
           | [sizeof=232, dsize=232, align=8,
           |  nvsize=232, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x556302fa6298 <../dummy_inc/click/hashcontainer.hh:13:1, col:29> line:33:7 class HashContainer_adapter definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-TemplateArgument type 'IPRewriterEntry'
|-CXXRecordDecl 0x556302fd90b8 prev 0x556302fa6298 <col:1, col:7> col:7 implicit class HashContainer_adapter
|-AccessSpecDecl 0x556302fd9148 <col:31, col:37> col:31 public
|-TypedefDecl 0x556302fd9240 <line:34:5, col:34> col:34 referenced key_type 'typename IPRewriterEntry::key_type':'IPFlowID'
| `-ElaboratedType 0x556302fd91f0 'typename IPRewriterEntry::key_type' sugar
|   `-TypedefType 0x556302fd91d0 'IPRewriterEntry::key_type' sugar
|     |-Typedef 0x556302fa7de0 'key_type'
|     `-RecordType 0x556302f9c4b0 'IPFlowID'
|       `-CXXRecord 0x556302f9c420 'IPFlowID'
|-TypedefDecl 0x556302fd9310 <line:35:5, col:45> col:45 key_const_reference 'typename IPRewriterEntry::key_const_reference':'const IPFlowID &'
| `-ElaboratedType 0x556302fd92c0 'typename IPRewriterEntry::key_const_reference' sugar
|   `-TypedefType 0x556302fa8820 'IPRewriterEntry::key_const_reference' sugar
|     |-Typedef 0x556302fa7e48 'key_const_reference'
|     `-LValueReferenceType 0x556302f9e940 'const IPFlowID &'
|       `-QualType 0x556302f9c4b1 'const IPFlowID' const
|         `-RecordType 0x556302f9c4b0 'IPFlowID'
|           `-CXXRecord 0x556302f9c420 'IPFlowID'
|-CXXMethodDecl 0x556302fd9500 <line:36:5, line:38:5> line:36:16 hashnext 'IPRewriterEntry *&(IPRewriterEntry *)' static
| `-ParmVarDecl 0x556302fd9408 <col:25, col:28> col:28 e 'IPRewriterEntry *'
|-CXXMethodDecl 0x556302fd9708 <line:39:5, line:41:5> line:39:32 hashkey 'HashContainer_adapter<IPRewriterEntry>::key_const_reference (const IPRewriterEntry *)' static
| `-ParmVarDecl 0x556302fd9618 <col:40, col:49> col:49 e 'const IPRewriterEntry *'
|-CXXMethodDecl 0x556302fd9968 <line:42:5, line:44:5> line:42:17 hashkeyeq 'bool (const HashContainer_adapter<IPRewriterEntry>::key_type &, const HashContainer_adapter<IPRewriterEntry>::key_type &)' static
| |-ParmVarDecl 0x556302fd9818 <col:27, col:43> col:43 a 'const HashContainer_adapter<IPRewriterEntry>::key_type &'
| `-ParmVarDecl 0x556302fd9890 <col:46, col:62> col:62 b 'const HashContainer_adapter<IPRewriterEntry>::key_type &'
|-CXXConstructorDecl 0x556302fdd9e8 <line:33:7> col:7 implicit constexpr HashContainer_adapter 'void (const HashContainer_adapter<IPRewriterEntry> &)' inline default trivial noexcept-unevaluated 0x556302fdd9e8
| `-ParmVarDecl 0x556302fddaf8 <col:7> col:7 'const HashContainer_adapter<IPRewriterEntry> &'
|-CXXConstructorDecl 0x556302fddb98 <col:7> col:7 implicit constexpr HashContainer_adapter 'void (HashContainer_adapter<IPRewriterEntry> &&)' inline default trivial noexcept-unevaluated 0x556302fddb98
| `-ParmVarDecl 0x556302fddca8 <col:7> col:7 'HashContainer_adapter<IPRewriterEntry> &&'
|-CXXDestructorDecl 0x556302fddeb8 <col:7> col:7 implicit ~HashContainer_adapter 'void ()' inline default trivial noexcept-unevaluated 0x556302fddeb8
|-CXXMethodDecl 0x556302fddff8 <col:7> col:7 implicit constexpr operator= 'HashContainer_adapter<IPRewriterEntry> &(const HashContainer_adapter<IPRewriterEntry> &)' inline default trivial noexcept-unevaluated 0x556302fddff8
| `-ParmVarDecl 0x556302fde108 <col:7> col:7 'const HashContainer_adapter<IPRewriterEntry> &'
`-CXXMethodDecl 0x556302fde178 <col:7> col:7 implicit constexpr operator= 'HashContainer_adapter<IPRewriterEntry> &(HashContainer_adapter<IPRewriterEntry> &&)' inline default trivial noexcept-unevaluated 0x556302fde178
  `-ParmVarDecl 0x556302fde288 <col:7> col:7 'HashContainer_adapter<IPRewriterEntry> &&'

Layout: <CGRecordLayout
  LLVMType:%class.HashContainer_adapter = type { i8 }
  NonVirtualBaseLLVMType:%class.HashContainer_adapter = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556302f31c78 <../dummy_inc/click/libdivide.h:95:1, line:98:1> line:95:8 referenced struct libdivide_u32_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x556302f31d98 <col:1, col:8> col:8 implicit struct libdivide_u32_t
|-FieldDecl 0x556302f31e38 <line:96:5, col:14> col:14 referenced magic 'uint32_t':'unsigned int'
|-FieldDecl 0x556302f31e98 <line:97:5, col:13> col:13 referenced more 'uint8_t':'unsigned char'
|-CXXConstructorDecl 0x556302f34f80 <line:95:8> col:8 implicit used libdivide_u32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x556302f353b8 <col:8>
|-CXXConstructorDecl 0x556302f35088 <col:8> col:8 implicit constexpr libdivide_u32_t 'void (const libdivide_u32_t &)' inline default trivial noexcept-unevaluated 0x556302f35088
| `-ParmVarDecl 0x556302f35198 <col:8> col:8 'const libdivide_u32_t &'
|-CXXConstructorDecl 0x556302f35238 <col:8> col:8 implicit used constexpr libdivide_u32_t 'void (libdivide_u32_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x556302f35348 <col:8> col:8 used 'libdivide_u32_t &&'
| |-CXXCtorInitializer Field 0x556302f31e38 'magic' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x556302f37260 <col:8> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x556302f37230 <col:8> 'uint32_t':'unsigned int' xvalue .magic 0x556302f31e38
| |     `-CXXStaticCastExpr 0x556302f37200 <col:8> 'libdivide_u32_t' xvalue static_cast<struct libdivide_u32_t &&> <NoOp>
| |       `-DeclRefExpr 0x556302f371d0 <col:8> 'libdivide_u32_t' lvalue ParmVar 0x556302f35348 '' 'libdivide_u32_t &&'
| |-CXXCtorInitializer Field 0x556302f31e98 'more' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x556302f37330 <col:8> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-MemberExpr 0x556302f37300 <col:8> 'uint8_t':'unsigned char' xvalue .more 0x556302f31e98
| |     `-CXXStaticCastExpr 0x556302f372d0 <col:8> 'libdivide_u32_t' xvalue static_cast<struct libdivide_u32_t &&> <NoOp>
| |       `-DeclRefExpr 0x556302f372a0 <col:8> 'libdivide_u32_t' lvalue ParmVar 0x556302f35348 '' 'libdivide_u32_t &&'
| `-CompoundStmt 0x556302f37380 <col:8>
|-CXXDestructorDecl 0x556302f376f8 <col:8> col:8 implicit referenced ~libdivide_u32_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x556302fde328 <col:8> col:8 implicit constexpr operator= 'libdivide_u32_t &(const libdivide_u32_t &)' inline default trivial noexcept-unevaluated 0x556302fde328
| `-ParmVarDecl 0x556302fde438 <col:8> col:8 'const libdivide_u32_t &'
`-CXXMethodDecl 0x556302fde4a8 <col:8> col:8 implicit constexpr operator= 'libdivide_u32_t &(libdivide_u32_t &&)' inline default trivial noexcept-unevaluated 0x556302fde4a8
  `-ParmVarDecl 0x556302fde5b8 <col:8> col:8 'libdivide_u32_t &&'

Layout: <CGRecordLayout
  LLVMType:%struct.libdivide_u32_t = type { i32, i8 }
  NonVirtualBaseLLVMType:%struct.libdivide_u32_t = type { i32, i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x556302fdd000 <../dummy_inc/click/hashcontainer.hh:19:1, line:29:1> line:20:7 class HashContainer_rep definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal has_mutable_fields
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-public 'HashContainer_adapter<IPRewriterEntry>':'HashContainer_adapter<IPRewriterEntry>'
|-TemplateArgument type 'IPRewriterEntry'
|-TemplateArgument type 'HashContainer_adapter<IPRewriterEntry>'
|-CXXRecordDecl 0x556302fdd298 prev 0x556302fdd000 <col:1, col:7> col:7 implicit class HashContainer_rep
|-FieldDecl 0x556302fdd400 <line:21:5, col:9> col:9 buckets 'IPRewriterEntry **'
|-FieldDecl 0x556302fdd450 <line:22:5, col:14> col:14 nbuckets 'uint32_t':'unsigned int'
|-FieldDecl 0x556302fdd4a0 <line:23:5, col:22> col:22 first_bucket 'uint32_t':'unsigned int' mutable
|-FieldDecl 0x556302fdd4f0 <line:24:5, col:12> col:12 size 'size_t':'unsigned long'
|-FieldDecl 0x556302fdd540 <line:25:5, col:21> col:21 bucket_divider 'libdivide_u32_t'
|-FriendDecl 0x556302fdd698 <line:26:5, col:36> col:12 'class HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|-FriendDecl 0x556302fdd7e8 <line:27:5, col:51> col:12 'class HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|-FriendDecl 0x556302fdd938 <line:28:5, col:45> col:12 'class HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|-CXXConstructorDecl 0x556302fddd30 <line:20:7> col:7 implicit constexpr HashContainer_rep 'void (const HashContainer_rep<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &)' inline default trivial noexcept-unevaluated 0x556302fddd30
| `-ParmVarDecl 0x556302fdde48 <col:7> col:7 'const HashContainer_rep<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &'
`-CXXMethodDecl 0x556302fdfbc0 <col:7> col:7 implicit constexpr operator= 'HashContainer_rep<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &(const HashContainer_rep<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &)' inline default trivial noexcept-unevaluated 0x556302fdfbc0
  `-ParmVarDecl 0x556302fdfcc8 <col:7> col:7 'const HashContainer_rep<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &'

Layout: <CGRecordLayout
  LLVMType:%class.HashContainer_rep = type { %class.IPRewriterEntry**, i32, i32, i64, %struct.libdivide_u32_t }
  NonVirtualBaseLLVMType:%class.HashContainer_rep = type { %class.IPRewriterEntry**, i32, i32, i64, %struct.libdivide_u32_t }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x556302fa6410 <../dummy_inc/click/hashcontainer.hh:81:1, line:297:1> line:82:7 class HashContainer definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'IPRewriterEntry'
|-TemplateArgument type 'HashContainer_adapter<IPRewriterEntry>'
|-CXXRecordDecl 0x556302fd8f38 prev 0x556302fa6410 <col:1, col:7> col:7 implicit class HashContainer
|-AccessSpecDecl 0x556302fd8fc8 <col:23, col:29> col:23 public
|-TypedefDecl 0x556302fd9a90 <line:85:5, col:34> col:34 key_type 'typename HashContainer_adapter<IPRewriterEntry>::key_type':'IPFlowID'
| `-ElaboratedType 0x556302fd9a40 'typename HashContainer_adapter<IPRewriterEntry>::key_type' sugar
|   `-TypedefType 0x556302fd97c0 'HashContainer_adapter<IPRewriterEntry>::key_type' sugar
|     |-Typedef 0x556302fd9240 'key_type'
|     `-ElaboratedType 0x556302fd91f0 'typename IPRewriterEntry::key_type' sugar
|       `-TypedefType 0x556302fd91d0 'IPRewriterEntry::key_type' sugar
|         |-Typedef 0x556302fa7de0 'key_type'
|         `-RecordType 0x556302f9c4b0 'IPFlowID'
|           `-CXXRecord 0x556302f9c420 'IPFlowID'
|-TypedefDecl 0x556302fd9b28 <line:90:5, col:15> col:15 value_type 'IPRewriterEntry':'IPRewriterEntry'
| `-SubstTemplateTypeParmType 0x556302fd9af0 'IPRewriterEntry' sugar
|   |-TemplateTypeParmType 0x556302f3f7e0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x556302f3f788 'T'
|   `-RecordType 0x556302fa43b0 'IPRewriterEntry'
|     `-CXXRecord 0x556302fa7c20 'IPRewriterEntry'
|-TypedefDecl 0x556302fd9b80 <line:93:5, col:20> col:20 referenced size_type 'size_t':'unsigned long'
| `-TypedefType 0x556302a347f0 'size_t' sugar
|   |-Typedef 0x5563029fbb20 'size_t'
|   `-BuiltinType 0x55630298b430 'unsigned long'
|-TypedefDecl 0x556302fd9bd8 <line:96:5, col:22> col:22 referenced bucket_count_type 'uint32_t':'unsigned int'
| `-TypedefType 0x556302ae4b00 'uint32_t' sugar
|   |-Typedef 0x5563029f4408 'uint32_t'
|   `-TypedefType 0x5563029cd440 '__uint32_t' sugar
|     |-Typedef 0x5563029cd038 '__uint32_t'
|     `-BuiltinType 0x55630298b410 'unsigned int'
|-EnumDecl 0x556302fd9c30 <line:98:5> col:5
| |-EnumConstantDecl 0x556302fd9d60 <line:102:2, col:42> col:2 max_bucket_count 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::(anonymous enum at ../dummy_inc/click/hashcontainer.hh:98:5)'
| | `-ConstantExpr 0x556302fd9d40 <col:21, col:42> 'HashContainer::bucket_count_type':'unsigned int' Int: 4294967295
| |   `-CStyleCastExpr 0x556302fd9d18 <col:21, col:42> 'HashContainer::bucket_count_type':'unsigned int' <NoOp>
| |     `-ImplicitCastExpr 0x556302fd9d00 <col:41, col:42> 'HashContainer::bucket_count_type':'unsigned int' <IntegralCast> part_of_explicit_cast
| |       `-UnaryOperator 0x556302f3fe30 <col:41, col:42> 'int' prefix '-'
| |         `-IntegerLiteral 0x556302f3fe10 <col:42> 'int' 1
| `-EnumConstantDecl 0x556302fd9dd0 <line:104:2, col:25> col:2 initial_bucket_count 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::(anonymous enum at ../dummy_inc/click/hashcontainer.hh:98:5)'
|   `-ImplicitCastExpr 0x556302fd9e20 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556302fd9db0 <col:25> 'int' Int: 63
|       `-IntegerLiteral 0x556302f3fee8 <col:25> 'int' 63
|-CXXConstructorDecl 0x556302fd9e70 <line:108:5, col:19> col:5 HashContainer 'void ()'
|-CXXConstructorDecl 0x556302fd9fd8 <line:111:5, col:47> col:14 HashContainer 'void (HashContainer::bucket_count_type)'
| `-ParmVarDecl 0x556302fd9f28 <col:28, col:46> col:46 n 'HashContainer::bucket_count_type':'unsigned int'
|-CXXDestructorDecl 0x556302fda0c0 <line:114:5, col:20> col:5 ~HashContainer 'void ()' noexcept-unevaluated 0x556302fda0c0
|-CXXMethodDecl 0x556302fda1b0 <line:118:5, line:120:5> line:118:22 size 'HashContainer::size_type () const' inline
|-CXXMethodDecl 0x556302fda260 <line:123:5, line:125:5> line:123:17 empty 'bool () const' inline
|-CXXMethodDecl 0x556302fda310 <line:128:5, line:130:5> line:128:30 bucket_count 'HashContainer::bucket_count_type () const' inline
|-CXXMethodDecl 0x556302fda4a8 <line:133:5, line:139:5> line:133:22 bucket_size 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::size_type (HashContainer::bucket_count_type) const' inline
| `-ParmVarDecl 0x556302fda3e0 <col:34, col:52> col:52 n 'HashContainer::bucket_count_type':'unsigned int'
|-CXXMethodDecl 0x556302fda6c8 <line:142:5, col:51> col:23 bucket 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::bucket_count_type (const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &) const'
| `-ParmVarDecl 0x556302fda5d8 <col:30, col:46> col:46 key 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &'
|-CXXMethodDecl 0x556302fda780 <line:145:5, line:147:5> line:145:17 unbalanced 'bool () const' inline
|-TypedefDecl 0x556302fdaa10 <line:149:5, col:48> col:48 const_iterator 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
| `-TemplateSpecializationType 0x556302fda970 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' sugar HashContainer_const_iterator
|   |-TemplateArgument type 'IPRewriterEntry':'IPRewriterEntry'
|   |-TemplateArgument type 'HashContainer_adapter<IPRewriterEntry>':'HashContainer_adapter<IPRewriterEntry>'
|   `-RecordType 0x556302fda950 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|     `-ClassTemplateSpecialization 0x556302fda850 'HashContainer_const_iterator'
|-TypedefDecl 0x556302fdac40 <line:150:5, col:42> col:42 referenced iterator 'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
| `-TemplateSpecializationType 0x556302fdaba0 'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' sugar HashContainer_iterator
|   |-TemplateArgument type 'IPRewriterEntry':'IPRewriterEntry'
|   |-TemplateArgument type 'HashContainer_adapter<IPRewriterEntry>':'HashContainer_adapter<IPRewriterEntry>'
|   `-RecordType 0x556302fdab80 'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|     `-ClassTemplateSpecialization 0x556302fdaa88 'HashContainer_iterator'
|-CXXMethodDecl 0x556302fdad38 <line:155:5, col:27> col:21 begin 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::iterator ()' inline
|-CXXMethodDecl 0x556302fdae88 <line:157:5, col:35> col:27 begin 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::const_iterator () const' inline
|-CXXMethodDecl 0x556302fdaf58 <line:161:5, col:25> col:21 end 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::iterator ()' inline
|-CXXMethodDecl 0x556302fdb028 <line:163:5, col:33> col:27 end 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::const_iterator () const' inline
|-CXXMethodDecl 0x556302fdb1c8 <line:166:5, col:46> col:21 begin 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::iterator (HashContainer::bucket_count_type)' inline
| `-ParmVarDecl 0x556302fdb0d8 <col:27, col:45> col:45 n 'HashContainer::bucket_count_type':'unsigned int'
|-CXXMethodDecl 0x556302fdb378 <line:168:5, col:54> col:27 begin 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::const_iterator (HashContainer::bucket_count_type) const' inline
| `-ParmVarDecl 0x556302fdb280 <col:33, col:51> col:51 n 'HashContainer::bucket_count_type':'unsigned int'
|-CXXMethodDecl 0x556302fdb538 <line:171:5, col:47> col:17 contains 'bool (const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &) const' inline
| `-ParmVarDecl 0x556302fdb440 <col:26, col:42> col:42 key 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &'
|-CXXMethodDecl 0x556302fdb6f8 <line:173:5, col:49> col:22 count 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::size_type (const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &) const' inline
| `-ParmVarDecl 0x556302fdb600 <col:28, col:44> col:44 key 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &'
|-CXXMethodDecl 0x556302fdb8b8 <line:183:5, col:45> col:21 used find 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::iterator (const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &)' inline
| `-ParmVarDecl 0x556302fdb7c0 <col:26, col:42> col:42 key 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &'
|-CXXMethodDecl 0x556302fdba78 <line:185:5, col:53> col:27 find 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::const_iterator (const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &) const' inline
| `-ParmVarDecl 0x556302fdb980 <col:32, col:48> col:48 key 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &'
|-CXXMethodDecl 0x556302fdbbd0 <line:191:5, col:52> col:21 find_prefer 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::iterator (const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &)' inline
| `-ParmVarDecl 0x556302fdbb40 <col:33, col:49> col:49 key 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &'
|-CXXMethodDecl 0x556302fdbdb8 <line:197:5, col:68> col:43 get 'IPRewriterEntry *(const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &) const'
| |-ParmVarDecl 0x556302fdbcc8 <col:47, col:63> col:63 key 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &'
| |-NoInlineAttr 0x556302fdbe70 <col:20> Inherited
| `-OptimizeNoneAttr 0x556302fdbec8 <col:30> Inherited
|-CXXMethodDecl 0x556302fdc0e8 <line:219:5, col:51> col:17 insert_at 'void (HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::iterator &, IPRewriterEntry *)' inline
| |-ParmVarDecl 0x556302fdbf58 <col:27, col:37> col:37 it 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::iterator &'
| `-ParmVarDecl 0x556302fdbfd0 <col:41, col:44> col:44 element 'IPRewriterEntry *'
|-CXXMethodDecl 0x556302fdc3b8 <line:239:5, col:58> col:8 set 'IPRewriterEntry *(HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::iterator &, IPRewriterEntry *, bool)'
| |-ParmVarDecl 0x556302fdc1b8 <col:12, col:22> col:22 it 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::iterator &'
| |-ParmVarDecl 0x556302fdc230 <col:26, col:29> col:29 element 'IPRewriterEntry *'
| `-ParmVarDecl 0x556302fdc298 <col:38, col:53> col:43 balance 'bool'
|-CXXMethodDecl 0x556302fdc588 <line:249:5, col:57> col:43 set 'IPRewriterEntry *(IPRewriterEntry *)'
| |-ParmVarDecl 0x556302fdc490 <col:47, col:50> col:50 element 'IPRewriterEntry *'
| |-NoInlineAttr 0x556302fdc640 <col:20> Inherited
| `-OptimizeNoneAttr 0x556302fdc698 <col:30> Inherited
|-CXXMethodDecl 0x556302fdc7c8 <line:256:5, col:33> col:15 used erase 'IPRewriterEntry *(HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::iterator &)' inline
| `-ParmVarDecl 0x556302fdc6d0 <col:21, col:31> col:31 it 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::iterator &'
|-CXXMethodDecl 0x556302fdc988 <line:262:5, col:40> col:15 erase 'IPRewriterEntry *(const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &)' inline
| `-ParmVarDecl 0x556302fdc890 <col:21, col:37> col:37 key 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &'
|-CXXMethodDecl 0x556302fdca40 <line:266:5, col:16> col:10 clear 'void ()'
|-CXXMethodDecl 0x556302fdcd08 <line:269:5, col:44> col:17 swap 'void (HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &)' inline
| `-ParmVarDecl 0x556302fdcc18 <col:22, col:43> col:43 x 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &'
|-CXXMethodDecl 0x556302fdce50 <line:277:5, col:36> col:10 rehash 'void (HashContainer::bucket_count_type)'
| `-ParmVarDecl 0x556302fdcdc0 <col:17, col:35> col:35 n 'HashContainer::bucket_count_type':'unsigned int'
|-CXXMethodDecl 0x556302fdcf08 <line:282:5, line:285:5> line:282:17 balance 'void ()' inline
|-AccessSpecDecl 0x556302fdcfb8 <line:287:3, col:10> col:3 private
|-FieldDecl 0x556302fdfd50 <line:289:5, col:29> col:29 _rep 'HashContainer_rep<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_rep<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|-CXXConstructorDecl 0x556302fdffa8 <line:291:5, col:46> col:5 HashContainer 'void (const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &)'
| `-ParmVarDecl 0x556302fdfe98 <col:19, col:45> col:46 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &'
|-CXXMethodDecl 0x556302fe0348 <line:292:5, col:63> col:26 operator= 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &(const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &)'
| `-ParmVarDecl 0x556302fe0218 <col:36, col:62> col:63 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &'
|-FriendDecl 0x556302fe0508 <line:294:5, col:45> col:12 'class HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
`-FriendDecl 0x556302fe0658 <line:295:5, col:51> col:12 'class HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'

Layout: <CGRecordLayout
  LLVMType:%class.HashContainer = type { %class.HashContainer_rep }
  NonVirtualBaseLLVMType:%class.HashContainer = type { %class.HashContainer_rep }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x556302fe1c90 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<56>'
|-CXXRecordDecl 0x556302fe1e68 prev 0x556302fe1c90 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x556302fe1ef8 <col:46, col:52> col:46 public
|-TypedefDecl 0x556302fe1f20 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55630298b370 'int'
|-TypedefDecl 0x556302fe3af0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<56>::type':'char_array<56>'
| `-ElaboratedType 0x556302fe3aa0 'typename sized_array_memory<56>::type' sugar
|   `-TypedefType 0x556302fe23d0 'sized_array_memory<56>::type' sugar
|     |-Typedef 0x556302fe22d0 'type'
|     `-TemplateSpecializationType 0x556302fe2260 'char_array<56UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x556302fe2140 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 56
|       |   `-SubstNonTypeTemplateParmExpr 0x556302fe2120 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x556302fe2100 <col:24> 'unsigned long' 56
|       `-RecordType 0x556302fe2240 'char_array<56>'
|         `-ClassTemplateSpecialization 0x556302fe2160 'char_array'
|-TypedefDecl 0x556302fe3ba8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<56> >::type *'
| `-PointerType 0x556302fe3b70 'vector_memory<sized_array_memory<56> >::type *'
|   `-TypedefType 0x556302fe3b50 'vector_memory<sized_array_memory<56> >::type' sugar
|     |-Typedef 0x556302fe3af0 'type'
|     `-ElaboratedType 0x556302fe3aa0 'typename sized_array_memory<56>::type' sugar
|       `-TypedefType 0x556302fe23d0 'sized_array_memory<56>::type' sugar
|         |-Typedef 0x556302fe22d0 'type'
|         `-TemplateSpecializationType 0x556302fe2260 'char_array<56UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x556302fe2140 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 56
|           |   `-SubstNonTypeTemplateParmExpr 0x556302fe2120 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x556302fe2100 <col:24> 'unsigned long' 56
|           `-RecordType 0x556302fe2240 'char_array<56>'
|             `-ClassTemplateSpecialization 0x556302fe2160 'char_array'
|-CXXMethodDecl 0x556302fe3d28 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<56> >::type *) const' inline
| `-ParmVarDecl 0x556302fe3c38 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<56> >::type *'
|-CXXConstructorDecl 0x556302fe3e18 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x556302fe3ef8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x556302fe3ef8
|-CXXMethodDecl 0x556302fe41c8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<56> > &)'
| `-ParmVarDecl 0x556302fe40d0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<56> > &'
|-CXXMethodDecl 0x556302fe4408 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<56> >::type *)'
| |-ParmVarDecl 0x556302fe4280 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x556302fe42f8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<56> >::type *'
|-CXXMethodDecl 0x556302fe45d8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<56> >::type *)'
| |-ParmVarDecl 0x556302fe44c8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x556302fe4540 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<56> >::type *'
|-CXXMethodDecl 0x556302fe4738 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<56> >::iterator ()'
|-CXXMethodDecl 0x556302fe4808 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<56> >::iterator ()'
|-CXXMethodDecl 0x556302fe4a58 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<56> >::iterator (vector_memory<sized_array_memory<56> >::iterator, const vector_memory<sized_array_memory<56> >::type *)'
| |-ParmVarDecl 0x556302fe48c8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<56> >::iterator':'vector_memory<sized_array_memory<56> >::type *'
| `-ParmVarDecl 0x556302fe4940 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<56> >::type *'
|-CXXMethodDecl 0x556302fe4cb8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<56> >::iterator (vector_memory<sized_array_memory<56> >::iterator, vector_memory<sized_array_memory<56> >::iterator)'
| |-ParmVarDecl 0x556302fe4b28 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<56> >::iterator':'vector_memory<sized_array_memory<56> >::type *'
| `-ParmVarDecl 0x556302fe4ba0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<56> >::iterator':'vector_memory<sized_array_memory<56> >::type *'
|-CXXMethodDecl 0x556302fe4e78 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<56> >::type *)' inline
| `-ParmVarDecl 0x556302fe4d88 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<56> >::type *'
|-CXXMethodDecl 0x556302fe5038 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<56> >::type *)' inline
| `-ParmVarDecl 0x556302fe4f40 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<56> >::type *'
|-CXXMethodDecl 0x556302fe50f0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x556302fe51a0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x556302fe53d8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<56> >::type *)'
| |-ParmVarDecl 0x556302fe5250 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x556302fe52c8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<56> >::type *'
|-CXXMethodDecl 0x556302fe5678 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<56> > &)'
| `-ParmVarDecl 0x556302fe5580 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<56> > &'
|-FieldDecl 0x556302fe5740 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<56> >::type *'
|-FieldDecl 0x556302fe5790 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x556302fe57e0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x556302fe06f8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'IPRewriterInput'
|-CXXRecordDecl 0x556302fe0908 prev 0x556302fe06f8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x556302fe1c00 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<IPRewriterInput>::type':'sized_array_memory<56>'
| `-ElaboratedType 0x556302fe1bb0 'typename array_memory<IPRewriterInput>::type' sugar
|   `-TypedefType 0x556302fe1b90 'conditional<true, sized_array_memory<56>, typed_array_memory<IPRewriterInput> >::type' sugar
|     |-Typedef 0x556302fe1a40 'type'
|     `-SubstTemplateTypeParmType 0x556302fe1860 'sized_array_memory<56>' sugar
|       |-TemplateTypeParmType 0x556302c6c880 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x556302c6c828 'T'
|       `-RecordType 0x556302fe13b0 'sized_array_memory<56>'
|         `-ClassTemplateSpecialization 0x556302fe12d0 'sized_array_memory'
|-FieldDecl 0x556302fe5830 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<IPRewriterInput>::array_memory_type>':'vector_memory<sized_array_memory<56> >' mutable
|-AccessSpecDecl 0x556302fe5880 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x556302fe58b8 <line:118:5, col:15> col:15 value_type 'IPRewriterInput':'IPRewriterInput'
| `-SubstTemplateTypeParmType 0x556302fe09a0 'IPRewriterInput' sugar
|   |-TemplateTypeParmType 0x556302ca3a80 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x556302ca3a28 'T'
|   `-RecordType 0x556302fa4460 'IPRewriterInput'
|     `-CXXRecord 0x556302fc28f0 'IPRewriterInput'
|-TypedefDecl 0x556302fe5978 <line:119:5, col:16> col:16 reference 'IPRewriterInput &'
| `-LValueReferenceType 0x556302fe5940 'IPRewriterInput &'
|   `-SubstTemplateTypeParmType 0x556302fe09a0 'IPRewriterInput' sugar
|     |-TemplateTypeParmType 0x556302ca3a80 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x556302ca3a28 'T'
|     `-RecordType 0x556302fa4460 'IPRewriterInput'
|       `-CXXRecord 0x556302fc28f0 'IPRewriterInput'
|-TypedefDecl 0x556302fe5a38 <line:120:5, col:22> col:22 const_reference 'const IPRewriterInput &'
| `-LValueReferenceType 0x556302fe5a00 'const IPRewriterInput &'
|   `-QualType 0x556302fe09a1 'const IPRewriterInput' const
|     `-SubstTemplateTypeParmType 0x556302fe09a0 'IPRewriterInput' sugar
|       |-TemplateTypeParmType 0x556302ca3a80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x556302ca3a28 'T'
|       `-RecordType 0x556302fa4460 'IPRewriterInput'
|         `-CXXRecord 0x556302fc28f0 'IPRewriterInput'
|-TypedefDecl 0x556302fe5ac8 <line:121:5, col:16> col:16 pointer 'IPRewriterInput *'
| `-PointerType 0x556302fe5a90 'IPRewriterInput *'
|   `-SubstTemplateTypeParmType 0x556302fe09a0 'IPRewriterInput' sugar
|     |-TemplateTypeParmType 0x556302ca3a80 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x556302ca3a28 'T'
|     `-RecordType 0x556302fa4460 'IPRewriterInput'
|       `-CXXRecord 0x556302fc28f0 'IPRewriterInput'
|-TypedefDecl 0x556302fe5b88 <line:122:5, col:22> col:22 const_pointer 'const IPRewriterInput *'
| `-PointerType 0x556302fe5b50 'const IPRewriterInput *'
|   `-QualType 0x556302fe09a1 'const IPRewriterInput' const
|     `-SubstTemplateTypeParmType 0x556302fe09a0 'IPRewriterInput' sugar
|       |-TemplateTypeParmType 0x556302ca3a80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x556302ca3a28 'T'
|       `-RecordType 0x556302fa4460 'IPRewriterInput'
|         `-CXXRecord 0x556302fc28f0 'IPRewriterInput'
|-TypedefDecl 0x556302fe67e0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<IPRewriterInput>::type':'const IPRewriterInput &'
| `-ElaboratedType 0x556302fe6790 'typename fast_argument<IPRewriterInput>::type' sugar
|   `-TypedefType 0x556302fe6770 'fast_argument<IPRewriterInput, true>::type' sugar
|     |-Typedef 0x556302fe66a8 'type'
|     `-LValueReferenceType 0x556302fe6670 'const IPRewriterInput &'
|       `-QualType 0x556302fe6411 'const IPRewriterInput' const
|         `-SubstTemplateTypeParmType 0x556302fe6410 'IPRewriterInput' sugar
|           |-TemplateTypeParmType 0x556302c75390 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x556302c75338 'T'
|           `-RecordType 0x556302fa4460 'IPRewriterInput'
|             `-CXXRecord 0x556302fc28f0 'IPRewriterInput'
|-TypedefDecl 0x556302fe6848 <line:126:5, col:22> col:22 const_access_type 'const IPRewriterInput &'
| `-LValueReferenceType 0x556302fe5a00 'const IPRewriterInput &'
|   `-QualType 0x556302fe09a1 'const IPRewriterInput' const
|     `-SubstTemplateTypeParmType 0x556302fe09a0 'IPRewriterInput' sugar
|       |-TemplateTypeParmType 0x556302ca3a80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x556302ca3a28 'T'
|       `-RecordType 0x556302fa4460 'IPRewriterInput'
|         `-CXXRecord 0x556302fc28f0 'IPRewriterInput'
|-TypedefDecl 0x556302fe68a0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55630298b370 'int'
|-TypedefDecl 0x556302fe6908 <line:130:5, col:16> col:16 iterator 'IPRewriterInput *'
| `-PointerType 0x556302fe5a90 'IPRewriterInput *'
|   `-SubstTemplateTypeParmType 0x556302fe09a0 'IPRewriterInput' sugar
|     |-TemplateTypeParmType 0x556302ca3a80 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x556302ca3a28 'T'
|     `-RecordType 0x556302fa4460 'IPRewriterInput'
|       `-CXXRecord 0x556302fc28f0 'IPRewriterInput'
|-TypedefDecl 0x556302fe6970 <line:131:5, col:22> col:22 const_iterator 'const IPRewriterInput *'
| `-PointerType 0x556302fe5b50 'const IPRewriterInput *'
|   `-QualType 0x556302fe09a1 'const IPRewriterInput' const
|     `-SubstTemplateTypeParmType 0x556302fe09a0 'IPRewriterInput' sugar
|       |-TemplateTypeParmType 0x556302ca3a80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x556302ca3a28 'T'
|       `-RecordType 0x556302fa4460 'IPRewriterInput'
|         `-CXXRecord 0x556302fc28f0 'IPRewriterInput'
|-EnumDecl 0x556302fe69c8 <line:134:5> col:5
| `-EnumConstantDecl 0x556302fe6ac0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<IPRewriterInput>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x556302fe6aa0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x556302ca4c48 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x556302ca4c20 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x556302ca4c00 <col:40> 'int' 1
|-CXXConstructorDecl 0x556302fe6b48 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x556302fe6dd8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<IPRewriterInput>::value_argument_type)' inline
| |-ParmVarDecl 0x556302fe6c00 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x556302fe6ca0 <col:41, col:61> col:61 v 'Vector<IPRewriterInput>::value_argument_type':'const IPRewriterInput &'
|-CXXConstructorDecl 0x556302fe7098 <line:139:5, col:37> col:12 Vector 'void (const Vector<IPRewriterInput> &)' inline
| `-ParmVarDecl 0x556302fe6f80 <col:19, col:36> col:36 x 'const Vector<IPRewriterInput> &'
|-CXXConstructorDecl 0x556302fe7358 <line:141:5, col:32> col:12 Vector 'void (Vector<IPRewriterInput> &&)' inline
| `-ParmVarDecl 0x556302fe7240 <col:19, col:31> col:31 x 'Vector<IPRewriterInput> &&'
|-CXXMethodDecl 0x556302fe76a0 <line:144:5, col:51> col:23 operator= 'Vector<IPRewriterInput> &(const Vector<IPRewriterInput> &)' inline
| `-ParmVarDecl 0x556302fe7580 <col:33, col:50> col:50 x 'const Vector<IPRewriterInput> &'
|-CXXMethodDecl 0x556302fe79b0 <line:146:5, col:46> col:23 operator= 'Vector<IPRewriterInput> &(Vector<IPRewriterInput> &&)' inline
| `-ParmVarDecl 0x556302fe7890 <col:33, col:45> col:45 x 'Vector<IPRewriterInput> &&'
|-CXXMethodDecl 0x556302fe95d0 <line:148:5, col:70> col:23 assign 'Vector<IPRewriterInput> &(Vector::size_type, Vector<IPRewriterInput>::value_argument_type)' inline
| |-ParmVarDecl 0x556302fe7ae8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x556302fe9490 <col:43, col:69> col:63 v 'Vector<IPRewriterInput>::value_argument_type':'const IPRewriterInput &'
|-CXXMethodDecl 0x556302fe9728 <line:150:5, col:55> col:49 begin 'Vector<IPRewriterInput>::iterator ()'
| |-NoInlineAttr 0x556302fe9808 <col:20> Inherited
| `-OptimizeNoneAttr 0x556302fe9860 <col:30> Inherited
|-CXXMethodDecl 0x556302fe98a8 <line:151:5, col:53> col:49 end 'Vector<IPRewriterInput>::iterator ()'
| |-NoInlineAttr 0x556302fe9958 <col:20> Inherited
| `-OptimizeNoneAttr 0x556302fe99b0 <col:30> Inherited
|-CXXMethodDecl 0x556302fe9a78 <line:152:5, col:63> col:55 begin 'Vector<IPRewriterInput>::const_iterator () const'
| |-NoInlineAttr 0x556302fe9b28 <col:20> Inherited
| `-OptimizeNoneAttr 0x556302fe9b80 <col:30> Inherited
|-CXXMethodDecl 0x556302fe9bc8 <line:153:5, col:61> col:55 end 'Vector<IPRewriterInput>::const_iterator () const'
| |-NoInlineAttr 0x556302fe9c78 <col:20> Inherited
| `-OptimizeNoneAttr 0x556302fe9cd0 <col:30> Inherited
|-CXXMethodDecl 0x556302fe9d18 <line:154:5, col:64> col:55 cbegin 'Vector<IPRewriterInput>::const_iterator () const'
| |-NoInlineAttr 0x556302fe9dc8 <col:20> Inherited
| `-OptimizeNoneAttr 0x556302fe9e20 <col:30> Inherited
|-CXXMethodDecl 0x556302fe9e68 <line:155:5, col:62> col:55 cend 'Vector<IPRewriterInput>::const_iterator () const'
| |-NoInlineAttr 0x556302fe9f18 <col:20> Inherited
| `-OptimizeNoneAttr 0x556302fe9f70 <col:30> Inherited
|-CXXMethodDecl 0x556302fe9f98 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x556302fea048 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x556302fea0f8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x556302fea2b8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<IPRewriterInput>::value_argument_type)' inline
| |-ParmVarDecl 0x556302fea1a8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x556302fea220 <col:37, col:63> col:57 v 'Vector<IPRewriterInput>::value_argument_type':'const IPRewriterInput &'
|-CXXMethodDecl 0x556302fea408 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x556302fea378 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x556302fea5b8 <line:163:5, col:65> col:43 operator[] 'IPRewriterInput &(Vector::size_type)'
| |-ParmVarDecl 0x556302fea4c0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x556302fea670 <col:20>
| `-OptimizeNoneAttr 0x556302fea6c8 <col:30>
|-CXXMethodDecl 0x556302fea7e8 <line:164:5, col:73> col:49 used operator[] 'const IPRewriterInput &(Vector::size_type) const'
| |-ParmVarDecl 0x556302fea6f0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x556302fea8a0 <col:20>
| `-OptimizeNoneAttr 0x556302fea8f8 <col:30>
|-CXXMethodDecl 0x556302fea9b0 <line:165:5, col:29> col:15 at 'IPRewriterInput &(Vector::size_type)' inline
| `-ParmVarDecl 0x556302fea920 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x556302feaaf8 <line:166:5, col:37> col:21 at 'const IPRewriterInput &(Vector::size_type) const' inline
| `-ParmVarDecl 0x556302feaa68 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x556302feac28 <line:167:5, col:21> col:15 front 'IPRewriterInput &()' inline
|-CXXMethodDecl 0x556302fead58 <line:168:5, col:29> col:21 front 'const IPRewriterInput &() const' inline
|-CXXMethodDecl 0x556302feae28 <line:169:5, col:20> col:15 back 'IPRewriterInput &()' inline
|-CXXMethodDecl 0x556302feaef8 <line:170:5, col:28> col:21 back 'const IPRewriterInput &() const' inline
|-CXXMethodDecl 0x556302feb038 <line:172:5, col:39> col:15 unchecked_at 'IPRewriterInput &(Vector::size_type)' inline
| `-ParmVarDecl 0x556302feafa8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x556302feb180 <line:173:5, col:47> col:21 unchecked_at 'const IPRewriterInput &(Vector::size_type) const' inline
| `-ParmVarDecl 0x556302feb0f0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x556302feb2c8 <line:174:5, col:59> col:15 at_u 'IPRewriterInput &(Vector::size_type)' inline
| |-ParmVarDecl 0x556302feb238 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x556302feb380 <col:48> Inherited "" ""
|-CXXMethodDecl 0x556302feb480 <line:175:5, col:71> col:21 at_u 'const IPRewriterInput &(Vector::size_type) const' inline
| |-ParmVarDecl 0x556302feb3f0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x556302feb538 <col:60> Inherited "" ""
|-CXXMethodDecl 0x556302feb5f8 <line:177:5, col:20> col:15 data 'IPRewriterInput *()' inline
|-CXXMethodDecl 0x556302feb6f8 <line:178:5, col:28> col:21 data 'const IPRewriterInput *() const' inline
|-CXXMethodDecl 0x556302feb8a8 <line:180:5, col:48> col:17 push_back 'void (Vector<IPRewriterInput>::value_argument_type)' inline
| `-ParmVarDecl 0x556302feb7b8 <col:27, col:47> col:47 v 'Vector<IPRewriterInput>::value_argument_type':'const IPRewriterInput &'
|-FunctionTemplateDecl 0x556302fec068 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x556302feb960 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<IPRewriterInput>':'fast_argument<IPRewriterInput, true>'
| `-CXXMethodDecl 0x556302febfc8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (IPRewriterInput &&)' inline
|   `-ParmVarDecl 0x556302febec8 <col:58, col:62> col:62 v 'IPRewriterInput &&'
|-CXXMethodDecl 0x556302fec148 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x556302fec298 <line:186:5, col:49> col:17 push_front 'void (Vector<IPRewriterInput>::value_argument_type)' inline
| `-ParmVarDecl 0x556302fec208 <col:28, col:48> col:48 v 'Vector<IPRewriterInput>::value_argument_type':'const IPRewriterInput &'
|-CXXMethodDecl 0x556302fec350 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x556302fec598 <line:189:5, col:62> col:21 insert 'Vector<IPRewriterInput>::iterator (Vector<IPRewriterInput>::iterator, Vector<IPRewriterInput>::value_argument_type)' inline
| |-ParmVarDecl 0x556302fec410 <col:28, col:37> col:37 it 'Vector<IPRewriterInput>::iterator':'IPRewriterInput *'
| `-ParmVarDecl 0x556302fec488 <col:41, col:61> col:61 v 'Vector<IPRewriterInput>::value_argument_type':'const IPRewriterInput &'
|-CXXMethodDecl 0x556302fec758 <line:190:5, col:38> col:21 erase 'Vector<IPRewriterInput>::iterator (Vector<IPRewriterInput>::iterator)' inline
| `-ParmVarDecl 0x556302fec668 <col:27, col:36> col:36 it 'Vector<IPRewriterInput>::iterator':'IPRewriterInput *'
|-CXXMethodDecl 0x556302fec9a8 <line:191:5, col:49> col:21 erase 'Vector<IPRewriterInput>::iterator (Vector<IPRewriterInput>::iterator, Vector<IPRewriterInput>::iterator)' inline
| |-ParmVarDecl 0x556302fec820 <col:27, col:36> col:36 a 'Vector<IPRewriterInput>::iterator':'IPRewriterInput *'
| `-ParmVarDecl 0x556302fec898 <col:39, col:48> col:48 b 'Vector<IPRewriterInput>::iterator':'IPRewriterInput *'
|-CXXMethodDecl 0x556302feca68 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x556302feccc8 <line:195:5, col:34> col:17 swap 'void (Vector<IPRewriterInput> &)' inline
| `-ParmVarDecl 0x556302fecbd0 <col:22, col:33> col:33 x 'Vector<IPRewriterInput> &'
`-CXXDestructorDecl 0x556302fecd98 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x556302fecd98

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPRewriterHeap
         0 |   Vector<class IPRewriterFlow *> [2] _heaps
        32 |   int32_t _capacity
        36 |   uint32_t _use_count
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x556302fc5db0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<8>'
|-CXXRecordDecl 0x556302fc5f88 prev 0x556302fc5db0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x556302fc6018 <col:46, col:52> col:46 public
|-TypedefDecl 0x556302fc6040 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55630298b370 'int'
|-TypedefDecl 0x556302fc7c10 <line:13:5, col:31> col:31 type 'typename sized_array_memory<8>::type':'char_array<8>'
| `-ElaboratedType 0x556302fc7bc0 'typename sized_array_memory<8>::type' sugar
|   `-TypedefType 0x556302fc64f0 'sized_array_memory<8>::type' sugar
|     |-Typedef 0x556302fc63f0 'type'
|     `-TemplateSpecializationType 0x556302fc6380 'char_array<8UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x556302fc6260 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|       |   `-SubstNonTypeTemplateParmExpr 0x556302fc6240 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x556302fc6220 <col:24> 'unsigned long' 8
|       `-RecordType 0x556302fc6360 'char_array<8>'
|         `-ClassTemplateSpecialization 0x556302fc6280 'char_array'
|-TypedefDecl 0x556302fc7cc8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<8> >::type *'
| `-PointerType 0x556302fc7c90 'vector_memory<sized_array_memory<8> >::type *'
|   `-TypedefType 0x556302fc7c70 'vector_memory<sized_array_memory<8> >::type' sugar
|     |-Typedef 0x556302fc7c10 'type'
|     `-ElaboratedType 0x556302fc7bc0 'typename sized_array_memory<8>::type' sugar
|       `-TypedefType 0x556302fc64f0 'sized_array_memory<8>::type' sugar
|         |-Typedef 0x556302fc63f0 'type'
|         `-TemplateSpecializationType 0x556302fc6380 'char_array<8UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x556302fc6260 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|           |   `-SubstNonTypeTemplateParmExpr 0x556302fc6240 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x556302fc6220 <col:24> 'unsigned long' 8
|           `-RecordType 0x556302fc6360 'char_array<8>'
|             `-ClassTemplateSpecialization 0x556302fc6280 'char_array'
|-CXXMethodDecl 0x556302fc7e48 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<8> >::type *) const' inline
| `-ParmVarDecl 0x556302fc7d58 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXConstructorDecl 0x556302fc7f38 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x556302fc8018 <line:23:5, col:20> col:5 used ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x556302fc82e8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x556302fc81f0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<8> > &'
|-CXXMethodDecl 0x556302fc8528 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x556302fc83a0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x556302fc8418 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x556302fc86f8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x556302fc85e8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x556302fc8660 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x556302fc8858 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x556302fc8928 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x556302fc8b78 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x556302fc89e8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x556302fc8a60 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x556302fc8dd8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, vector_memory<sized_array_memory<8> >::iterator)'
| |-ParmVarDecl 0x556302fc8c48 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x556302fc8cc0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x556302fc8f98 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x556302fc8ea8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x556302fc9158 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x556302fc9060 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x556302fc9210 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x556302fcbd00 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x556302fcbf38 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x556302fcbdb0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x556302fcbe28 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x556302fcc1d8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x556302fcc0e0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<8> > &'
|-FieldDecl 0x556302fcc2a0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<8> >::type *'
|-FieldDecl 0x556302fcc2f0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x556302fcc340 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array.2*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array.2*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x556302fc47a0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'IPRewriterFlow *'
|-CXXRecordDecl 0x556302fc49a0 prev 0x556302fc47a0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x556302fc5d20 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<IPRewriterFlow *>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x556302fc5cd0 'typename array_memory<IPRewriterFlow *>::type' sugar
|   `-TypedefType 0x556302fc5cb0 'conditional<true, sized_array_memory<8>, typed_array_memory<IPRewriterFlow *> >::type' sugar
|     |-Typedef 0x556302fc5b60 'type'
|     `-SubstTemplateTypeParmType 0x556302fc5980 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x556302c6c880 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x556302c6c828 'T'
|       `-RecordType 0x556302fc54d0 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x556302fc53e8 'sized_array_memory'
|-FieldDecl 0x556302fcc390 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<IPRewriterFlow *>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x556302fcc3e0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x556302fcc418 <line:118:5, col:15> col:15 value_type 'IPRewriterFlow *':'IPRewriterFlow *'
| `-SubstTemplateTypeParmType 0x556302fc4a30 'IPRewriterFlow *' sugar
|   |-TemplateTypeParmType 0x556302ca3a80 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x556302ca3a28 'T'
|   `-PointerType 0x556302fa85e0 'IPRewriterFlow *'
|     `-RecordType 0x556302fa4300 'IPRewriterFlow'
|       `-CXXRecord 0x556302faa4d0 'IPRewriterFlow'
|-TypedefDecl 0x556302fcc4d8 <line:119:5, col:16> col:16 reference 'IPRewriterFlow *&'
| `-LValueReferenceType 0x556302fcc4a0 'IPRewriterFlow *&'
|   `-SubstTemplateTypeParmType 0x556302fc4a30 'IPRewriterFlow *' sugar
|     |-TemplateTypeParmType 0x556302ca3a80 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x556302ca3a28 'T'
|     `-PointerType 0x556302fa85e0 'IPRewriterFlow *'
|       `-RecordType 0x556302fa4300 'IPRewriterFlow'
|         `-CXXRecord 0x556302faa4d0 'IPRewriterFlow'
|-TypedefDecl 0x556302fcc598 <line:120:5, col:22> col:22 const_reference 'IPRewriterFlow *const &'
| `-LValueReferenceType 0x556302fcc560 'IPRewriterFlow *const &'
|   `-QualType 0x556302fc4a31 'IPRewriterFlow *const' const
|     `-SubstTemplateTypeParmType 0x556302fc4a30 'IPRewriterFlow *' sugar
|       |-TemplateTypeParmType 0x556302ca3a80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x556302ca3a28 'T'
|       `-PointerType 0x556302fa85e0 'IPRewriterFlow *'
|         `-RecordType 0x556302fa4300 'IPRewriterFlow'
|           `-CXXRecord 0x556302faa4d0 'IPRewriterFlow'
|-TypedefDecl 0x556302fcc628 <line:121:5, col:16> col:16 pointer 'IPRewriterFlow **'
| `-PointerType 0x556302fcc5f0 'IPRewriterFlow **'
|   `-SubstTemplateTypeParmType 0x556302fc4a30 'IPRewriterFlow *' sugar
|     |-TemplateTypeParmType 0x556302ca3a80 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x556302ca3a28 'T'
|     `-PointerType 0x556302fa85e0 'IPRewriterFlow *'
|       `-RecordType 0x556302fa4300 'IPRewriterFlow'
|         `-CXXRecord 0x556302faa4d0 'IPRewriterFlow'
|-TypedefDecl 0x556302fcc6e8 <line:122:5, col:22> col:22 const_pointer 'IPRewriterFlow *const *'
| `-PointerType 0x556302fcc6b0 'IPRewriterFlow *const *'
|   `-QualType 0x556302fc4a31 'IPRewriterFlow *const' const
|     `-SubstTemplateTypeParmType 0x556302fc4a30 'IPRewriterFlow *' sugar
|       |-TemplateTypeParmType 0x556302ca3a80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x556302ca3a28 'T'
|       `-PointerType 0x556302fa85e0 'IPRewriterFlow *'
|         `-RecordType 0x556302fa4300 'IPRewriterFlow'
|           `-CXXRecord 0x556302faa4d0 'IPRewriterFlow'
|-TypedefDecl 0x556302fcd4d0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<IPRewriterFlow *>::type':'IPRewriterFlow *'
| `-ElaboratedType 0x556302fcd480 'typename fast_argument<IPRewriterFlow *>::type' sugar
|   `-TypedefType 0x556302fcd460 'fast_argument<IPRewriterFlow *, false>::type' sugar
|     |-Typedef 0x556302fcd3f0 'type'
|     `-SubstTemplateTypeParmType 0x556302fcd1b0 'IPRewriterFlow *' sugar
|       |-TemplateTypeParmType 0x556302c75ac0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x556302c75a70 'T'
|       `-PointerType 0x556302fa85e0 'IPRewriterFlow *'
|         `-RecordType 0x556302fa4300 'IPRewriterFlow'
|           `-CXXRecord 0x556302faa4d0 'IPRewriterFlow'
|-TypedefDecl 0x556302fcd538 <line:126:5, col:22> col:22 const_access_type 'IPRewriterFlow *const &'
| `-LValueReferenceType 0x556302fcc560 'IPRewriterFlow *const &'
|   `-QualType 0x556302fc4a31 'IPRewriterFlow *const' const
|     `-SubstTemplateTypeParmType 0x556302fc4a30 'IPRewriterFlow *' sugar
|       |-TemplateTypeParmType 0x556302ca3a80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x556302ca3a28 'T'
|       `-PointerType 0x556302fa85e0 'IPRewriterFlow *'
|         `-RecordType 0x556302fa4300 'IPRewriterFlow'
|           `-CXXRecord 0x556302faa4d0 'IPRewriterFlow'
|-TypedefDecl 0x556302fcd590 <line:128:5, col:17> col:17 referenced size_type 'int'
| `-BuiltinType 0x55630298b370 'int'
|-TypedefDecl 0x556302fcd5f8 <line:130:5, col:16> col:16 iterator 'IPRewriterFlow **'
| `-PointerType 0x556302fcc5f0 'IPRewriterFlow **'
|   `-SubstTemplateTypeParmType 0x556302fc4a30 'IPRewriterFlow *' sugar
|     |-TemplateTypeParmType 0x556302ca3a80 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x556302ca3a28 'T'
|     `-PointerType 0x556302fa85e0 'IPRewriterFlow *'
|       `-RecordType 0x556302fa4300 'IPRewriterFlow'
|         `-CXXRecord 0x556302faa4d0 'IPRewriterFlow'
|-TypedefDecl 0x556302fcd660 <line:131:5, col:22> col:22 const_iterator 'IPRewriterFlow *const *'
| `-PointerType 0x556302fcc6b0 'IPRewriterFlow *const *'
|   `-QualType 0x556302fc4a31 'IPRewriterFlow *const' const
|     `-SubstTemplateTypeParmType 0x556302fc4a30 'IPRewriterFlow *' sugar
|       |-TemplateTypeParmType 0x556302ca3a80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x556302ca3a28 'T'
|       `-PointerType 0x556302fa85e0 'IPRewriterFlow *'
|         `-RecordType 0x556302fa4300 'IPRewriterFlow'
|           `-CXXRecord 0x556302faa4d0 'IPRewriterFlow'
|-EnumDecl 0x556302fcd6b8 <line:134:5> col:5
| `-EnumConstantDecl 0x556302fcd7b0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<IPRewriterFlow *>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x556302fcd790 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x556302ca4c48 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x556302ca4c20 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x556302ca4c00 <col:40> 'int' 1
|-CXXConstructorDecl 0x556302fcd838 <line:137:5, col:28> col:21 used Vector 'void ()' inline
|-CXXConstructorDecl 0x556302fcdac8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<IPRewriterFlow *>::value_argument_type)' inline
| |-ParmVarDecl 0x556302fcd8f0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x556302fcd990 <col:41, col:61> col:61 v 'Vector<IPRewriterFlow *>::value_argument_type':'IPRewriterFlow *'
|-CXXConstructorDecl 0x556302fcdd88 <line:139:5, col:37> col:12 Vector 'void (const Vector<IPRewriterFlow *> &)' inline
| `-ParmVarDecl 0x556302fcdc70 <col:19, col:36> col:36 x 'const Vector<IPRewriterFlow *> &'
|-CXXConstructorDecl 0x556302fce048 <line:141:5, col:32> col:12 Vector 'void (Vector<IPRewriterFlow *> &&)' inline
| `-ParmVarDecl 0x556302fcdf30 <col:19, col:31> col:31 x 'Vector<IPRewriterFlow *> &&'
|-CXXMethodDecl 0x556302fce390 <line:144:5, col:51> col:23 operator= 'Vector<IPRewriterFlow *> &(const Vector<IPRewriterFlow *> &)' inline
| `-ParmVarDecl 0x556302fce270 <col:33, col:50> col:50 x 'const Vector<IPRewriterFlow *> &'
|-CXXMethodDecl 0x556302fce6a0 <line:146:5, col:46> col:23 operator= 'Vector<IPRewriterFlow *> &(Vector<IPRewriterFlow *> &&)' inline
| `-ParmVarDecl 0x556302fce580 <col:33, col:45> col:45 x 'Vector<IPRewriterFlow *> &&'
|-CXXMethodDecl 0x556302fce990 <line:148:5, col:70> col:23 assign 'Vector<IPRewriterFlow *> &(Vector::size_type, Vector<IPRewriterFlow *>::value_argument_type)' inline
| |-ParmVarDecl 0x556302fce7d8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x556302fce850 <col:43, col:69> col:63 v 'Vector<IPRewriterFlow *>::value_argument_type':'IPRewriterFlow *'
|-CXXMethodDecl 0x556302fceae8 <line:150:5, col:55> col:49 begin 'Vector<IPRewriterFlow *>::iterator ()'
| |-NoInlineAttr 0x556302fcebc8 <col:20> Inherited
| `-OptimizeNoneAttr 0x556302fcec20 <col:30> Inherited
|-CXXMethodDecl 0x556302fcec68 <line:151:5, col:53> col:49 end 'Vector<IPRewriterFlow *>::iterator ()'
| |-NoInlineAttr 0x556302fced18 <col:20> Inherited
| `-OptimizeNoneAttr 0x556302fced70 <col:30> Inherited
|-CXXMethodDecl 0x556302fcee38 <line:152:5, col:63> col:55 begin 'Vector<IPRewriterFlow *>::const_iterator () const'
| |-NoInlineAttr 0x556302fceee8 <col:20> Inherited
| `-OptimizeNoneAttr 0x556302fcef40 <col:30> Inherited
|-CXXMethodDecl 0x556302fcef88 <line:153:5, col:61> col:55 end 'Vector<IPRewriterFlow *>::const_iterator () const'
| |-NoInlineAttr 0x556302fcf038 <col:20> Inherited
| `-OptimizeNoneAttr 0x556302fcf090 <col:30> Inherited
|-CXXMethodDecl 0x556302fcf0d8 <line:154:5, col:64> col:55 cbegin 'Vector<IPRewriterFlow *>::const_iterator () const'
| |-NoInlineAttr 0x556302fcf188 <col:20> Inherited
| `-OptimizeNoneAttr 0x556302fcf1e0 <col:30> Inherited
|-CXXMethodDecl 0x556302fcf228 <line:155:5, col:62> col:55 cend 'Vector<IPRewriterFlow *>::const_iterator () const'
| |-NoInlineAttr 0x556302fcf2d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x556302fcf330 <col:30> Inherited
|-CXXMethodDecl 0x556302fcf358 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x556302fcf408 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x556302fcf4b8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x556302fcf678 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<IPRewriterFlow *>::value_argument_type)' inline
| |-ParmVarDecl 0x556302fcf568 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x556302fcf5e0 <col:37, col:63> col:57 v 'Vector<IPRewriterFlow *>::value_argument_type':'IPRewriterFlow *'
|-CXXMethodDecl 0x556302fcf7c8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x556302fcf738 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x556302fcf978 <line:163:5, col:65> col:43 operator[] 'IPRewriterFlow *&(Vector::size_type)'
| |-ParmVarDecl 0x556302fcf880 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x556302fcfa30 <col:20>
| `-OptimizeNoneAttr 0x556302fcfa88 <col:30>
|-CXXMethodDecl 0x556302fcfba8 <line:164:5, col:73> col:49 operator[] 'IPRewriterFlow *const &(Vector::size_type) const'
| |-ParmVarDecl 0x556302fcfab0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x556302fcfc60 <col:20>
| `-OptimizeNoneAttr 0x556302fcfcb8 <col:30>
|-CXXMethodDecl 0x556302fcfd70 <line:165:5, col:29> col:15 at 'IPRewriterFlow *&(Vector::size_type)' inline
| `-ParmVarDecl 0x556302fcfce0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x556302fcfeb8 <line:166:5, col:37> col:21 at 'IPRewriterFlow *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x556302fcfe28 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x556302fcffe8 <line:167:5, col:21> col:15 front 'IPRewriterFlow *&()' inline
|-CXXMethodDecl 0x556302fd0118 <line:168:5, col:29> col:21 front 'IPRewriterFlow *const &() const' inline
|-CXXMethodDecl 0x556302fd01e8 <line:169:5, col:20> col:15 back 'IPRewriterFlow *&()' inline
|-CXXMethodDecl 0x556302fd02b8 <line:170:5, col:28> col:21 back 'IPRewriterFlow *const &() const' inline
|-CXXMethodDecl 0x556302fd03f8 <line:172:5, col:39> col:15 unchecked_at 'IPRewriterFlow *&(Vector::size_type)' inline
| `-ParmVarDecl 0x556302fd0368 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x556302fd0540 <line:173:5, col:47> col:21 unchecked_at 'IPRewriterFlow *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x556302fd04b0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x556302fd0688 <line:174:5, col:59> col:15 at_u 'IPRewriterFlow *&(Vector::size_type)' inline
| |-ParmVarDecl 0x556302fd05f8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x556302fd0740 <col:48> Inherited "" ""
|-CXXMethodDecl 0x556302fd0840 <line:175:5, col:71> col:21 at_u 'IPRewriterFlow *const &(Vector::size_type) const' inline
| |-ParmVarDecl 0x556302fd07b0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x556302fd08f8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x556302fd09b8 <line:177:5, col:20> col:15 data 'IPRewriterFlow **()' inline
|-CXXMethodDecl 0x556302fd0ab8 <line:178:5, col:28> col:21 data 'IPRewriterFlow *const *() const' inline
|-CXXMethodDecl 0x556302fd0c68 <line:180:5, col:48> col:17 push_back 'void (Vector<IPRewriterFlow *>::value_argument_type)' inline
| `-ParmVarDecl 0x556302fd0b78 <col:27, col:47> col:47 v 'Vector<IPRewriterFlow *>::value_argument_type':'IPRewriterFlow *'
|-FunctionTemplateDecl 0x556302fd1458 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x556302fd0d20 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<IPRewriterFlow *>':'fast_argument<IPRewriterFlow *, false>'
| `-CXXMethodDecl 0x556302fd13b8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (IPRewriterFlow *&&)' inline
|   `-ParmVarDecl 0x556302fd12b8 <col:58, col:62> col:62 v 'IPRewriterFlow *&&'
|-CXXMethodDecl 0x556302fd1538 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x556302fd1688 <line:186:5, col:49> col:17 push_front 'void (Vector<IPRewriterFlow *>::value_argument_type)' inline
| `-ParmVarDecl 0x556302fd15f8 <col:28, col:48> col:48 v 'Vector<IPRewriterFlow *>::value_argument_type':'IPRewriterFlow *'
|-CXXMethodDecl 0x556302fd1740 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x556302fd1988 <line:189:5, col:62> col:21 insert 'Vector<IPRewriterFlow *>::iterator (Vector<IPRewriterFlow *>::iterator, Vector<IPRewriterFlow *>::value_argument_type)' inline
| |-ParmVarDecl 0x556302fd1800 <col:28, col:37> col:37 it 'Vector<IPRewriterFlow *>::iterator':'IPRewriterFlow **'
| `-ParmVarDecl 0x556302fd1878 <col:41, col:61> col:61 v 'Vector<IPRewriterFlow *>::value_argument_type':'IPRewriterFlow *'
|-CXXMethodDecl 0x556302fd1b48 <line:190:5, col:38> col:21 erase 'Vector<IPRewriterFlow *>::iterator (Vector<IPRewriterFlow *>::iterator)' inline
| `-ParmVarDecl 0x556302fd1a58 <col:27, col:36> col:36 it 'Vector<IPRewriterFlow *>::iterator':'IPRewriterFlow **'
|-CXXMethodDecl 0x556302fd1d98 <line:191:5, col:49> col:21 erase 'Vector<IPRewriterFlow *>::iterator (Vector<IPRewriterFlow *>::iterator, Vector<IPRewriterFlow *>::iterator)' inline
| |-ParmVarDecl 0x556302fd1c10 <col:27, col:36> col:36 a 'Vector<IPRewriterFlow *>::iterator':'IPRewriterFlow **'
| `-ParmVarDecl 0x556302fd1c88 <col:39, col:48> col:48 b 'Vector<IPRewriterFlow *>::iterator':'IPRewriterFlow **'
|-CXXMethodDecl 0x556302fd1e58 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x556302fd20b8 <line:195:5, col:34> col:17 swap 'void (Vector<IPRewriterFlow *> &)' inline
| `-ParmVarDecl 0x556302fd1fc0 <col:22, col:33> col:33 x 'Vector<IPRewriterFlow *> &'
`-CXXDestructorDecl 0x556302fd2188 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit used ~Vector 'void () noexcept' inline default
  `-CompoundStmt 0x556302fd3098 <col:29>

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556302fc4258 prev 0x556302fa7ae0 <../elements/ip/iprewriterbase.hh:42:1, line:79:1> line:42:7 referenced class IPRewriterHeap definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x556302fc4350 <col:1, col:7> col:7 implicit referenced class IPRewriterHeap
|-AccessSpecDecl 0x556302fc43e0 <col:24, col:30> col:24 public
|-CXXConstructorDecl 0x556302fc4440 <line:44:5, line:46:5> line:44:5 IPRewriterHeap 'void ()'
| |-CXXCtorInitializer Field 0x556302fd2a28 '_heaps' 'Vector<IPRewriterFlow *> [2]'
| | `-CXXConstructExpr 0x556302fd3070 <col:5> 'Vector<IPRewriterFlow *> [2]' 'void ()'
| |-CXXCtorInitializer Field 0x556302fd2a88 '_capacity' 'int32_t':'int'
| | `-IntegerLiteral 0x556302fd2f88 <line:45:14> 'int' 2147483647
| |-CXXCtorInitializer Field 0x556302fd2ae8 '_use_count' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x556302fd3030 <col:38> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x556302fd2ff0 <col:38> 'int' 1
| `-CompoundStmt 0x556302fd30e8 <col:41, line:46:5>
|-CXXDestructorDecl 0x556302fc4530 <line:47:5, line:49:5> line:47:5 used ~IPRewriterHeap 'void () noexcept'
| `-CompoundStmt 0x556302fd3528 <col:23, line:49:5>
|   `-ParenExpr 0x556302fd3508 <line:48:2, col:153> 'void'
|     `-ConditionalOperator 0x556302fd34d8 <col:3, col:152> 'void'
|       |-CXXStaticCastExpr 0x556302fd31c0 <col:3, col:34> 'bool' static_cast<_Bool> <NoOp>
|       | `-BinaryOperator 0x556302fd3190 <col:23, col:33> 'bool' '=='
|       |   |-CXXMemberCallExpr 0x556302fd3138 <col:23, col:28> 'Vector<IPRewriterFlow *>::size_type':'int'
|       |   | `-MemberExpr 0x556302fd3108 <col:23> '<bound member function type>' ->size 0x556302fd2368
|       |   |   `-ImplicitCastExpr 0x556302fd3158 <col:23> 'const IPRewriterHeap *' <NoOp>
|       |   |     `-CXXThisExpr 0x556302fd30f8 <col:23> 'IPRewriterHeap *' implicit this
|       |   `-IntegerLiteral 0x556302fd3170 <col:33> 'int' 0
|       |-CXXFunctionalCastExpr 0x556302fd3220 <col:38, col:45> 'void' functional cast to void <ToVoid>
|       | `-IntegerLiteral 0x556302fd3200 <col:44> 'int' 0
|       `-CallExpr 0x556302fd3438 <col:49, col:152> 'void'
|         |-ImplicitCastExpr 0x556302fd3420 <col:49> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x556302fd3400 <col:49> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556302a2b600 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|         |-ImplicitCastExpr 0x556302fd3478 <col:64> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x556302fd3290 <col:64> 'const char [12]' lvalue "size() == 0"
|         |-ImplicitCastExpr 0x556302fd3490 <col:79> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x556302fd3338 <col:79> 'const char [33]' lvalue "../elements/ip/iprewriterbase.hh"
|         |-ImplicitCastExpr 0x556302fd34a8 <col:115> 'unsigned int' <IntegralCast>
|         | `-IntegerLiteral 0x556302fd3370 <col:115> 'int' 48
|         `-ImplicitCastExpr 0x556302fd34c0 <col:119, col:133> 'const char *' <ArrayToPointerDecay>
|           `-UnaryOperator 0x556302fd33e8 <col:119, col:133> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|             `-PredefinedExpr 0x556302fd33d0 <col:133> 'const char [34]' lvalue __PRETTY_FUNCTION__
|               `-StringLiteral 0x556302fd3390 <col:133> 'const char [34]' lvalue "IPRewriterHeap::~IPRewriterHeap()"
|-CXXMethodDecl 0x556302fc4630 <line:51:5, line:53:5> line:51:10 use 'void ()'
| `-CompoundStmt 0x556302fd3598 <col:16, line:53:5>
|   `-UnaryOperator 0x556302fd3580 <line:52:2, col:4> 'uint32_t':'unsigned int' lvalue prefix '++'
|     `-MemberExpr 0x556302fd3550 <col:4> 'uint32_t':'unsigned int' lvalue ->_use_count 0x556302fd2ae8
|       `-CXXThisExpr 0x556302fd3540 <col:4> 'IPRewriterHeap *' implicit this
|-CXXMethodDecl 0x556302fc46f0 <line:54:5, line:58:5> line:54:10 unuse 'void ()'
| `-CompoundStmt 0x556302fd3a60 <col:18, line:58:5>
|   |-ParenExpr 0x556302fd3930 <line:55:2, col:159> 'void'
|   | `-ConditionalOperator 0x556302fd3900 <col:3, col:158> 'void'
|   |   |-CXXStaticCastExpr 0x556302fd3670 <col:3, col:37> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556302fd3640 <col:23, col:36> 'bool' '>'
|   |   |   |-ImplicitCastExpr 0x556302fd3610 <col:23> 'uint32_t':'unsigned int' <LValueToRValue>
|   |   |   | `-MemberExpr 0x556302fd35c0 <col:23> 'uint32_t':'unsigned int' lvalue ->_use_count 0x556302fd2ae8
|   |   |   |   `-CXXThisExpr 0x556302fd35b0 <col:23> 'IPRewriterHeap *' implicit this
|   |   |   `-ImplicitCastExpr 0x556302fd3628 <col:36> 'unsigned int' <IntegralCast>
|   |   |     `-IntegerLiteral 0x556302fd35f0 <col:36> 'int' 0
|   |   |-CXXFunctionalCastExpr 0x556302fd36d0 <col:41, col:48> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556302fd36b0 <col:47> 'int' 0
|   |   `-CallExpr 0x556302fd3860 <col:52, col:158> 'void'
|   |     |-ImplicitCastExpr 0x556302fd3848 <col:52> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556302fd3828 <col:52> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556302a2b600 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556302fd38a0 <col:67> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302fd3740 <col:67> 'const char [15]' lvalue "_use_count > 0"
|   |     |-ImplicitCastExpr 0x556302fd38b8 <col:85> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302fd3768 <col:85> 'const char [33]' lvalue "../elements/ip/iprewriterbase.hh"
|   |     |-ImplicitCastExpr 0x556302fd38d0 <col:121> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556302fd37a0 <col:121> 'int' 55
|   |     `-ImplicitCastExpr 0x556302fd38e8 <col:125, col:139> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556302fd3810 <col:125, col:139> 'const char [29]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556302fd37f8 <col:139> 'const char [29]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556302fd37c0 <col:139> 'const char [29]' lvalue "void IPRewriterHeap::unuse()"
|   `-IfStmt 0x556302fd3a48 <line:56:2, line:57:13>
|     |-BinaryOperator 0x556302fd39f8 <line:56:6, col:22> 'bool' '=='
|     | |-ImplicitCastExpr 0x556302fd39c8 <col:6, col:8> 'uint32_t':'unsigned int' <LValueToRValue>
|     | | `-UnaryOperator 0x556302fd3990 <col:6, col:8> 'uint32_t':'unsigned int' lvalue prefix '--'
|     | |   `-MemberExpr 0x556302fd3960 <col:8> 'uint32_t':'unsigned int' lvalue ->_use_count 0x556302fd2ae8
|     | |     `-CXXThisExpr 0x556302fd3950 <col:8> 'IPRewriterHeap *' implicit this
|     | `-ImplicitCastExpr 0x556302fd39e0 <col:22> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x556302fd39a8 <col:22> 'int' 0
|     `-CXXDeleteExpr 0x556302fd3a28 <line:57:6, col:13> 'void' Function 0x556302ae2958 'operator delete' 'void (void *) noexcept'
|       `-CXXThisExpr 0x556302fd3a18 <col:13> 'IPRewriterHeap *' this
|-CXXMethodDecl 0x556302fd2368 <line:60:5, line:62:5> line:60:41 used size 'Vector<IPRewriterFlow *>::size_type () const'
| `-CompoundStmt 0x556302fd6660 <col:54, line:62:5>
|   `-ReturnStmt 0x556302fd6650 <line:61:2, col:43>
|     `-BinaryOperator 0x556302fd6630 <col:9, col:43> 'int' '+'
|       |-CXXMemberCallExpr 0x556302fd3be0 <col:9, col:24> 'Vector::size_type':'int'
|       | `-MemberExpr 0x556302fd3bb0 <col:9, col:19> '<bound member function type>' .size 0x556302fcf358
|       |   `-ArraySubscriptExpr 0x556302fd3b90 <col:9, col:17> 'const Vector<IPRewriterFlow *>':'const Vector<IPRewriterFlow *>' lvalue
|       |     |-ImplicitCastExpr 0x556302fd3b78 <col:9> 'const Vector<IPRewriterFlow *> *' <ArrayToPointerDecay>
|       |     | `-MemberExpr 0x556302fd3a90 <col:9> 'Vector<IPRewriterFlow *> const[2]' lvalue ->_heaps 0x556302fd2a28
|       |     |   `-CXXThisExpr 0x556302fd3a80 <col:9> 'const IPRewriterHeap *' implicit this
|       |     `-IntegerLiteral 0x556302fd3ac0 <col:16> 'int' 0
|       `-CXXMemberCallExpr 0x556302fd3cc8 <col:28, col:43> 'Vector::size_type':'int'
|         `-MemberExpr 0x556302fd3c98 <col:28, col:38> '<bound member function type>' .size 0x556302fcf358
|           `-ArraySubscriptExpr 0x556302fd3c78 <col:28, col:36> 'const Vector<IPRewriterFlow *>':'const Vector<IPRewriterFlow *>' lvalue
|             |-ImplicitCastExpr 0x556302fd3c60 <col:28> 'const Vector<IPRewriterFlow *> *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x556302fd3c10 <col:28> 'Vector<IPRewriterFlow *> const[2]' lvalue ->_heaps 0x556302fd2a28
|             |   `-CXXThisExpr 0x556302fd3c00 <col:28> 'const IPRewriterHeap *' implicit this
|             `-IntegerLiteral 0x556302fd3c40 <col:35> 'int' 1
|-CXXMethodDecl 0x556302fd2458 <line:63:5, line:65:5> line:63:13 capacity 'int32_t () const'
| `-CompoundStmt 0x556302fd66e0 <col:30, line:65:5>
|   `-ReturnStmt 0x556302fd66d0 <line:64:2, col:9>
|     `-ImplicitCastExpr 0x556302fd66b8 <col:9> 'int32_t':'int' <LValueToRValue>
|       `-MemberExpr 0x556302fd6688 <col:9> 'const int32_t':'const int' lvalue ->_capacity 0x556302fd2a88
|         `-CXXThisExpr 0x556302fd6678 <col:9> 'const IPRewriterHeap *' implicit this
|-AccessSpecDecl 0x556302fd24f8 <line:67:3, col:10> col:3 private
|-EnumDecl 0x556302fd2520 <line:69:5, line:71:5> line:69:5
| |-EnumConstantDecl 0x556302fd2620 <line:70:2, col:18> col:2 h_best_effort 'IPRewriterHeap::(anonymous enum at ../elements/ip/iprewriterbase.hh:69:5)'
| | `-ImplicitCastExpr 0x556302fd2700 <col:18> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302fd2600 <col:18> 'int' Int: 0
| |     `-IntegerLiteral 0x556302fd25e0 <col:18> 'int' 0
| `-EnumConstantDecl 0x556302fd26b0 <col:21, col:35> col:21 h_guarantee 'IPRewriterHeap::(anonymous enum at ../elements/ip/iprewriterbase.hh:69:5)'
|   `-ImplicitCastExpr 0x556302fd2718 <col:35> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556302fd2690 <col:35> 'int' Int: 1
|       `-IntegerLiteral 0x556302fd2670 <col:35> 'int' 1
|-FieldDecl 0x556302fd2a28 <line:72:5, col:38> col:30 referenced _heaps 'Vector<IPRewriterFlow *> [2]'
|-FieldDecl 0x556302fd2a88 <line:73:5, col:13> col:13 referenced _capacity 'int32_t':'int'
|-FieldDecl 0x556302fd2ae8 <line:74:5, col:14> col:14 referenced _use_count 'uint32_t':'unsigned int'
|-FriendDecl 0x556302fd2b58 <line:76:5, col:18> col:12 'class IPRewriterBase':'IPRewriterBase'
|-FriendDecl 0x556302fd2bf0 <line:77:5, col:18> col:12 'class IPRewriterFlow':'IPRewriterFlow'
|-CXXConstructorDecl 0x556302fd2c58 <line:42:7> col:7 implicit IPRewriterHeap 'void (const IPRewriterHeap &)' inline default noexcept-unevaluated 0x556302fd2c58
| `-ParmVarDecl 0x556302fd2d68 <col:7> col:7 'const IPRewriterHeap &'
`-CXXMethodDecl 0x556302fd2e08 <col:7> col:7 implicit operator= 'IPRewriterHeap &(const IPRewriterHeap &)' inline default noexcept-unevaluated 0x556302fd2e08
  `-ParmVarDecl 0x556302fd2f18 <col:7> col:7 'const IPRewriterHeap &'

Layout: <CGRecordLayout
  LLVMType:%class.IPRewriterHeap = type { [2 x %class.Vector.0], i32, i32 }
  NonVirtualBaseLLVMType:%class.IPRewriterHeap = type { [2 x %class.Vector.0], i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556302e91550 prev 0x556302e889e0 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x556302e91648 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x556302e916e8 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x556302e97b88 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x556302e97f68 <col:11>
|-CXXConstructorDecl 0x556302e97c60 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x556302e97d48 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x556302e986b0 <col:11>
|-CXXConstructorDecl 0x556302e97de8 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x556302e97ef8 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x556302e99f08 <col:11>
|-CXXDestructorDecl 0x556302e99218 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x556302b996e8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x556302b997f8 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x556302b9a0c0 <col:11>
|   `-ReturnStmt 0x556302b9a0b0 <col:11>
|     `-UnaryOperator 0x556302b9a098 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x556302b9a088 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x556302b99868 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
  |-ParmVarDecl 0x556302b99978 <col:11> col:11 'Timestamp::rep_t &&'
  `-CompoundStmt 0x556302f23ef0 <col:11>
    `-ReturnStmt 0x556302f23ee0 <col:11>
      `-UnaryOperator 0x556302f23ec8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x556302f23eb8 <col:11> 'Timestamp::rep_t *' this

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556302e865c8 prev 0x556302e862e0 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x556302e866c0 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x556302e86750 <col:19, col:25> col:19 public
|-TypedefDecl 0x556302e86788 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x556302ae4be0 'int32_t' sugar
|   |-Typedef 0x5563029f4268 'int32_t'
|   `-TypedefType 0x5563029cd3b0 '__int32_t' sugar
|     |-Typedef 0x5563029ccfc8 '__int32_t'
|     `-BuiltinType 0x55630298b370 'int'
|-TypedefDecl 0x556302e867f0 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x556302ae4da0 'int64_t' sugar
|   |-Typedef 0x5563029f42d0 'int64_t'
|   `-TypedefType 0x5563029cd4d0 '__int64_t' sugar
|     |-Typedef 0x5563029cd0a8 '__int64_t'
|     `-BuiltinType 0x55630298b390 'long'
|-EnumDecl 0x556302e86848 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x556302e869c0 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x556302e869a0 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x556302e86978 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x556302e86960 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x556302e86930 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x556302e86ab8 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x556302e86a98 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x556302e86a70 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x556302e86a58 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x556302e86a30 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x556302e86a10 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x556302e86b08 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x556302e86c10 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x556302e88730 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302e86bf0 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x556302e86bd0 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x556302e86ca0 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x556302e88748 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302e86c80 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x556302e86c60 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x556302e86d30 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x556302e88760 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302e86d10 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x556302e86cf0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x556302e86dc0 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x556302e88778 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302e86da0 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x556302e86d80 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x556302e86e50 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x556302e88790 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302e86e30 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x556302e86e10 <col:25> 'int' 1000
| |-EnumConstantDecl 0x556302e86ee0 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x556302e887a8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302e86ec0 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x556302e86ea0 <col:24> 'int' 1000
| |-EnumConstantDecl 0x556302e86f70 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x556302e887c0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302e86f50 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x556302e86f30 <col:26> 'int' EnumConstant 0x556302e86c10 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x556302e87040 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x556302e887d8 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302e87020 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x556302e87000 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x556302e86fc0 <col:27> 'int' EnumConstant 0x556302e86f70 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x556302e86fe0 <col:44> 'int' EnumConstant 0x556302e86ee0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x556302e886e0 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x556302e887f0 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556302e870f0 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x556302e870d0 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x556302e87090 <col:27> 'int' EnumConstant 0x556302e86f70 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x556302e870b0 <col:44> 'int' EnumConstant 0x556302e86dc0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x556302e88808 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x556302e88910 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x556302e88960 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556302e888f0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x556302e888d0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x556302e86f70 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x556302e88988 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x556302ae4810 'uninitialized_type'
|   `-CXXRecord 0x556302ae4778 'uninitialized_type'
|-CXXRecordDecl 0x556302e889e0 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x556302e88af0 <line:174:5, line:176:5> line:174:12 used Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x556302e92698 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x556302e97f78 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x556302e98098 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x556302e98050 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x556302e97fe0 <col:9> '<bound member function type>' ->assign 0x556302e8f778
|     | `-CXXThisExpr 0x556302e97fd0 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x556302e98010 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x556302e98080 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x556302e98030 <col:19> 'int' 0
|-CXXConstructorDecl 0x556302e88d38 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x556302e88bb0 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x556302e88c28 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x556302e97a20 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x556302e97a00 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x556302e92698 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x556302e980b0 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x556302e98200 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x556302e98188 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x556302e98118 <col:9> '<bound member function type>' ->assign 0x556302e8f778
|     | `-CXXThisExpr 0x556302e98108 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x556302e981d0 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x556302e981b8 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x556302e98148 <col:16> 'long' lvalue ParmVar 0x556302e88bb0 'sec' 'long'
|     `-ImplicitCastExpr 0x556302e981e8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x556302e98168 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x556302e88c28 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x556302e88f98 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x556302e88e08 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x556302e88e80 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x556302e97a58 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x556302e97a38 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x556302e92698 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x556302e98218 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x556302e98350 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x556302e982f0 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x556302e98280 <col:9> '<bound member function type>' ->assign 0x556302e8f778
|     | `-CXXThisExpr 0x556302e98270 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x556302e98320 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x556302e982b0 <col:16> 'int' lvalue ParmVar 0x556302e88e08 'sec' 'int'
|     `-ImplicitCastExpr 0x556302e98338 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x556302e982d0 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x556302e88e80 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x556302e891f8 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x556302e89068 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x556302e890e0 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x556302e97a90 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x556302e97a70 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x556302e92698 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x556302e98368 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x556302e984b8 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x556302e98440 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x556302e983d0 <col:9> '<bound member function type>' ->assign 0x556302e8f778
|     | `-CXXThisExpr 0x556302e983c0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x556302e98488 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x556302e98470 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x556302e98400 <col:16> 'unsigned long' lvalue ParmVar 0x556302e89068 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x556302e984a0 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x556302e98420 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x556302e890e0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x556302e89458 <line:199:5, line:201:5> line:199:21 used Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x556302e892c8 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x556302e89340 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x556302e97ac8 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x556302e97aa8 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x556302e92698 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x556302e984d0 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x556302e98620 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x556302e985a8 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x556302e98538 <col:9> '<bound member function type>' ->assign 0x556302e8f778
|     | `-CXXThisExpr 0x556302e98528 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x556302e985f0 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x556302e985d8 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x556302e98568 <col:16> 'unsigned int' lvalue ParmVar 0x556302e892c8 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x556302e98608 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x556302e98588 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x556302e89340 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x556302e895b8 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x556302e89528 <col:31> col:37 'double'
|-CXXConstructorDecl 0x556302e89758 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x556302e89690 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x556302e89988 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x556302e89890 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x556302e89b38 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x556302e89a78 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x556302e92698 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x556302e986c0 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x556302e98638 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x556302e89a78 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x556302e98720 <col:19, line:214:5>
|-CXXConstructorDecl 0x556302e89d08 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x556302e89c48 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x556302e92698 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x556302e98730 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x556302e987e0 <col:53, line:219:5>
|   `-CStyleCastExpr 0x556302e987b8 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x556302e98788 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x556302e89c48 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x556302e89ef8 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x556302e89e70 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x556302e86370 'Timestamp'
|   | `-CXXRecord 0x556302e865c8 'Timestamp'
|   `-ParenType 0x556302e89e10 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x556302e89de0 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x556302e86910 'Timestamp::seconds_type' sugar
|         |-Typedef 0x556302e86788 'seconds_type'
|         `-TypedefType 0x556302ae4be0 'int32_t' sugar
|           |-Typedef 0x5563029f4268 'int32_t'
|           `-TypedefType 0x5563029cd3b0 '__int32_t' sugar
|             |-Typedef 0x5563029ccfc8 '__int32_t'
|             `-BuiltinType 0x55630298b370 'int'
|-CXXConversionDecl 0x556302e8a038 <line:222:5, col:45> col:12 used operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x556302e8a108 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x556302e988e8 <col:37, line:231:5>
|   `-ReturnStmt 0x556302e988d8 <line:227:9, col:23>
|     `-BinaryOperator 0x556302e988b8 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x556302e98888 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x556302e98838 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x556302e916e8
|       |   `-MemberExpr 0x556302e98808 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x556302e92698
|       |     `-CXXThisExpr 0x556302e987f8 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x556302e988a0 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x556302e98868 <col:23> 'int' 0
|-CXXMethodDecl 0x556302e8a1c8 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x556302e8a288 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x556302e8a348 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x556302e8a408 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x556302e8a4c8 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x556302e8a638 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x556302e8a578 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x556302e8a780 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x556302e8a6f0 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556302e8a848 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x556302e8a8e8 <col:54> "" ""
|-CXXMethodDecl 0x556302e8a978 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x556302e8aa18 <col:54> "" ""
|-CXXMethodDecl 0x556302e8aaa8 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x556302e8ab48 <col:54> "" ""
|-CXXMethodDecl 0x556302e8ac48 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x556302e8ad18 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x556302e8ae48 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x556302e8af40 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x556302e8b078 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x556302e98b00 <col:39, line:271:5>
|   `-ReturnStmt 0x556302e98af0 <line:267:9, col:61>
|     `-CallExpr 0x556302e98a90 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x556302e98a78 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556302e98900 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x556302e929c8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x556302e98ac0 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x556302e98960 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x556302e916e8
|       |   `-MemberExpr 0x556302e98930 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x556302e92698
|       |     `-CXXThisExpr 0x556302e98920 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x556302e98ad8 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x556302e98a00 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x556302e989d0 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x556302e98990 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x556302e86f70 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x556302e989e8 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x556302e989b0 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x556302e86ee0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x556302e8b138 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x556302e98cc0 <col:39, line:279:5>
|   `-ReturnStmt 0x556302e98cb0 <line:275:9, col:61>
|     `-CallExpr 0x556302e98c50 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x556302e98c38 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556302e98b18 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x556302e929c8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x556302e98c80 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x556302e98b78 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x556302e916e8
|       |   `-MemberExpr 0x556302e98b48 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x556302e92698
|       |     `-CXXThisExpr 0x556302e98b38 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x556302e98c98 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x556302e98c18 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x556302e98be8 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x556302e98ba8 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x556302e86f70 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x556302e98c00 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x556302e98bc8 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x556302e86dc0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x556302e8b1f8 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x556302e98e58 <col:39, line:287:5>
|   `-ReturnStmt 0x556302e98e48 <line:283:9, col:53>
|     `-BinaryOperator 0x556302e98e28 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x556302e98df8 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x556302e98d18 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x556302e916e8
|       |   `-MemberExpr 0x556302e98ce8 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x556302e92698
|       |     `-CXXThisExpr 0x556302e98cd8 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x556302e98e10 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x556302e98dd8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x556302e98db8 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x556302e98d88 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x556302e98d48 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x556302e86c10 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x556302e98da0 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x556302e98d68 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x556302e86f70 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x556302e8b2e8 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x556302e9a0f0 <col:40, line:293:5>
|   |-DeclStmt 0x556302e98fa0 <line:291:9, col:48>
|   | `-VarDecl 0x556302e98e80 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x556302e98f80 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x556302e98f28 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x556302e98ef8 <col:22> '<bound member function type>' ->subsec 0x556302e8a288
|   |     |   `-CXXThisExpr 0x556302e98ee8 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x556302e98f68 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x556302e98f48 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x556302e87040 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x556302e9a0e0 <line:292:9, col:70>
|     `-ExprWithCleanups 0x556302e9a0c8 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x556302e9a098 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x556302e9a080 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x556302e9a060 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x556302e9a030 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x556302e99dc8 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x556302e99db0 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x556302e98fb8 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x556302e98e80 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x556302e99fd0 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x556302e99fb8 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x556302e99f88 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x556302e99de0 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x556302e99d50 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x556302e99d38 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x556302e99ce8 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x556302e86518 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x556302e99c88 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x556302e98fe8 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x556302e98fd8 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x556302e99cd0 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x556302e99cb8 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x556302e994a8 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x556302e99010 <col:39> 'int' 0
|               |               `-BinaryOperator 0x556302e990a0 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x556302e99070 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x556302e99030 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x556302e87040 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x556302e99088 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x556302e99050 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x556302e98e80 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x556302e9a000 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x556302e99d98 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x556302e99d88 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x556302e8b3a8 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x556302e9a648 <col:40, line:302:5>
|   |-DeclStmt 0x556302e9a240 <line:297:9, col:48>
|   | `-VarDecl 0x556302e9a120 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x556302e9a220 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x556302e9a1c8 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x556302e9a198 <col:22> '<bound member function type>' ->subsec 0x556302e8a288
|   |     |   `-CXXThisExpr 0x556302e9a188 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x556302e9a208 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x556302e9a1e8 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x556302e886e0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x556302e9a638 <line:298:9, col:70>
|     `-ExprWithCleanups 0x556302e9a620 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x556302e9a5f0 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x556302e9a5d8 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x556302e9a5b8 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x556302e9a588 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x556302e9a4b0 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x556302e9a498 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x556302e9a258 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x556302e9a120 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x556302e9a528 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x556302e9a510 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x556302e9a4e0 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x556302e9a4c8 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x556302e9a438 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x556302e9a420 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x556302e9a400 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x556302e86518 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x556302e9a3a0 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x556302e9a288 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x556302e9a278 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x556302e9a3e8 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x556302e9a3d0 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x556302e9a360 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x556302e9a2b0 <col:39> 'int' 0
|               |               `-BinaryOperator 0x556302e9a340 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x556302e9a310 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x556302e9a2d0 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x556302e886e0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x556302e9a328 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x556302e9a2f0 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x556302e9a120 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x556302e9a558 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x556302e9a480 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x556302e9a470 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x556302e8b468 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x556302e9a6d0 <col:40, line:306:5>
|   `-ReturnStmt 0x556302e9a6c0 <line:305:9, col:17>
|     `-CXXConstructExpr 0x556302e9a690 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x556302e9a678 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x556302e9a668 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x556302e8b608 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x556302e8b518 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x556302e8b7d8 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x556302e8b6e0 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x556302e8b8c8 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x556302e8ba38 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x556302e8b978 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x556302e9a818 <col:56, line:320:5>
|   `-ReturnStmt 0x556302e9a808 <line:319:9, col:32>
|     `-ExprWithCleanups 0x556302e9a7f0 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x556302e9a7c0 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x556302e9a7a8 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x556302e9a768 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x556302e9a738 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x556302e9a6f8 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x556302e8b978 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x556302e9a750 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x556302e9a718 <col:31> 'int' 0
|-CXXMethodDecl 0x556302e8bc78 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x556302e8baf0 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x556302e8bb68 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x556302e9a9e8 <col:72, line:326:5>
|   `-ReturnStmt 0x556302e9a9d8 <line:325:9, col:51>
|     `-ExprWithCleanups 0x556302e9a9c0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x556302e9a990 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x556302e9a978 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x556302e9a938 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x556302e9a920 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x556302e9a840 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x556302e8baf0 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x556302e9a8e0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x556302e9a8c8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x556302e9a860 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x556302e90e40 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x556302e9a908 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x556302e9a880 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x556302e8bb68 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556302e8be28 <line:328:5, line:337:5> line:328:29 used make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x556302e8bd38 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x556302ea4570 <col:56, line:337:5>
|   |-DeclStmt 0x556302e9ace8 <line:329:9, col:51>
|   | `-VarDecl 0x556302e9aa10 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x556302e9acd0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x556302e9aca0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x556302e9ac88 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x556302e9ac70 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x556302e9ac40 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x556302e9ac28 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x556302e9ac10 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x556302e9ab00 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x556302ea4360 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x556302e9ad50 <col:9, col:14> 'int64_t':'long' lvalue .x 0x556302e916e8
|   | | `-MemberExpr 0x556302e9ad20 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x556302e92698
|   | |   `-DeclRefExpr 0x556302e9ad00 <col:9> 'Timestamp' lvalue Var 0x556302e9aa10 't' 'Timestamp'
|   | `-BinaryOperator 0x556302ea4340 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x556302ea4310 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x556302e9ad80 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x556302e8bd38 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x556302ea4328 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x556302e9ae30 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x556302e9ae10 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x556302e9ade0 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x556302e9ada0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x556302e86f70 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x556302e9adf8 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x556302e9adc0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x556302e86ee0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x556302ea4558 <line:336:9, col:16>
|     `-CXXConstructExpr 0x556302ea4528 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x556302ea4510 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x556302ea44f0 <col:16> 'Timestamp' lvalue Var 0x556302e9aa10 't' 'Timestamp'
|-CXXMethodDecl 0x556302e8bff0 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x556302e8bee0 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x556302e8bf58 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x556302ea4728 <col:72, line:343:5>
|   `-ReturnStmt 0x556302ea4718 <line:342:9, col:51>
|     `-ExprWithCleanups 0x556302ea4700 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x556302ea46d0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x556302ea46b8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x556302ea4678 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x556302ea4660 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x556302ea45a8 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x556302e8bee0 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x556302ea4620 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x556302ea4608 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x556302ea45c8 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x556302e90f88 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x556302ea4648 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x556302ea45e8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x556302e8bf58 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556302e8c140 <line:345:5, line:354:5> line:345:29 used make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x556302e8c0b0 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x556302ea4b70 <col:56, line:354:5>
|   |-DeclStmt 0x556302ea4918 <line:346:9, col:51>
|   | `-VarDecl 0x556302ea4750 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x556302ea4900 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x556302ea48d0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x556302ea48b8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x556302ea48a0 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x556302ea4870 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x556302ea4858 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x556302ea4840 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x556302ea4810 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x556302ea4ad0 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x556302ea4980 <col:9, col:14> 'int64_t':'long' lvalue .x 0x556302e916e8
|   | | `-MemberExpr 0x556302ea4950 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x556302e92698
|   | |   `-DeclRefExpr 0x556302ea4930 <col:9> 'Timestamp' lvalue Var 0x556302ea4750 't' 'Timestamp'
|   | `-BinaryOperator 0x556302ea4ab0 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x556302ea4a80 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x556302ea49b0 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x556302e8c0b0 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x556302ea4a98 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x556302ea4a60 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x556302ea4a40 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x556302ea4a10 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x556302ea49d0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x556302e86f70 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x556302ea4a28 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x556302ea49f0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x556302e86dc0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x556302ea4b58 <line:353:9, col:16>
|     `-CXXConstructExpr 0x556302ea4b28 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x556302ea4b10 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x556302ea4af0 <col:16> 'Timestamp' lvalue Var 0x556302ea4750 't' 'Timestamp'
|-CXXMethodDecl 0x556302e8c308 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x556302e8c1f8 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x556302e8c270 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x556302ea4d28 <col:72, line:360:5>
|   `-ReturnStmt 0x556302ea4d18 <line:359:9, col:51>
|     `-ExprWithCleanups 0x556302ea4d00 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x556302ea4cd0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x556302ea4cb8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x556302ea4c78 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x556302ea4c60 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x556302ea4ba8 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x556302e8c1f8 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x556302ea4c20 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x556302ea4c08 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x556302ea4bc8 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x556302e910d0 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x556302ea4c48 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x556302ea4be8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x556302e8c270 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556302e8c458 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x556302e8c3c8 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x556302ea5198 <col:56, line:371:5>
|   |-DeclStmt 0x556302ea4f18 <line:363:9, col:51>
|   | `-VarDecl 0x556302ea4d50 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x556302ea4f00 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x556302ea4ed0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x556302ea4eb8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x556302ea4ea0 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x556302ea4e70 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x556302ea4e58 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x556302ea4e40 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x556302ea4e10 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x556302ea50f8 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x556302ea4f80 <col:9, col:14> 'int64_t':'long' lvalue .x 0x556302e916e8
|   | | `-MemberExpr 0x556302ea4f50 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x556302e92698
|   | |   `-DeclRefExpr 0x556302ea4f30 <col:9> 'Timestamp' lvalue Var 0x556302ea4d50 't' 'Timestamp'
|   | `-CallExpr 0x556302ea5098 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x556302ea5080 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x556302ea4fb0 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x556302e929c8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x556302ea50c8 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x556302ea4fd0 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x556302e8c3c8 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x556302ea50e0 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x556302ea5060 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x556302ea5030 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x556302ea4ff0 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x556302e86c10 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x556302ea5048 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x556302ea5010 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x556302e86f70 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x556302ea5180 <line:370:9, col:16>
|     `-CXXConstructExpr 0x556302ea5150 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x556302ea5138 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x556302ea5118 <col:16> 'Timestamp' lvalue Var 0x556302ea4d50 't' 'Timestamp'
|-CXXMethodDecl 0x556302e8c548 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x556302ea52d8 <col:39, line:377:5>
|   `-ReturnStmt 0x556302ea52c8 <line:376:9, col:30>
|     `-ExprWithCleanups 0x556302ea52b0 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x556302ea5280 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x556302ea5268 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x556302ea5228 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x556302ea51d0 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x556302ea5210 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x556302ea51f0 <col:29> 'int' 1
|-CXXMethodDecl 0x556302e8c608 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x556302ea53b8 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x556302ea5370 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x556302ea5300 <col:9> '<bound member function type>' ->assign 0x556302e8f778
|     | `-CXXThisExpr 0x556302ea52f0 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x556302ea5330 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x556302ea53a0 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x556302ea5350 <col:19> 'int' 0
|-CXXMethodDecl 0x556302e8f778 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x556302e8f630 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x556302e8f6a8 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x556302e97b00 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x556302e97ae0 <col:60> 'int' 0
| `-CompoundStmt 0x556302ea55b0 <col:63, line:395:5>
|   `-BinaryOperator 0x556302ea5590 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x556302ea5410 <col:9, col:12> 'int64_t':'long' lvalue .x 0x556302e916e8
|     | `-MemberExpr 0x556302ea53e0 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x556302e92698
|     |   `-CXXThisExpr 0x556302ea53d0 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x556302ea5570 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x556302ea5500 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x556302ea54a0 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x556302ea5488 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x556302ea5470 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x556302ea5440 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x556302e8f630 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x556302ea54e8 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x556302ea54c8 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x556302e86f70 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x556302ea5558 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x556302ea5540 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x556302ea5520 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x556302e8f6a8 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556302e8f948 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x556302e8f838 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x556302e8f8b0 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x556302ea5708 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x556302ea56c0 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x556302ea55d8 <col:9> '<bound member function type>' ->assign 0x556302e8f778
|     | `-CXXThisExpr 0x556302ea55c8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x556302ea56f0 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x556302ea5608 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x556302e8f838 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x556302ea5680 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x556302ea5668 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556302ea5628 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x556302e90f88 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x556302ea56a8 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x556302ea5648 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x556302e8f8b0 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556302e8fb18 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x556302e8fa08 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x556302e8fa80 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x556302ea5860 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x556302ea5818 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x556302ea5730 <col:9> '<bound member function type>' ->assign 0x556302e8f778
|     | `-CXXThisExpr 0x556302ea5720 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x556302ea5848 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x556302ea5760 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x556302e8fa08 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x556302ea57d8 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x556302ea57c0 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556302ea5780 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x556302e910d0 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x556302ea5800 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x556302ea57a0 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x556302e8fa80 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556302e8fce8 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x556302e8fbd8 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x556302e8fc50 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x556302e97b38 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x556302e97b18 <col:57> 'int' 0
| `-DeprecatedAttr 0x556302e8fd98 <col:75> "" ""
|-CXXMethodDecl 0x556302e8ff28 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x556302e8fe18 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x556302e8fe90 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x556302e8ffd8 <col:74> "" ""
|-CXXMethodDecl 0x556302e90168 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x556302e90058 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x556302e900d0 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x556302e90218 <col:74> "" ""
|-CXXMethodDecl 0x556302e902a8 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x556302e90348 <col:42> "" ""
|-CXXMethodDecl 0x556302e904f0 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x556302e903d0 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x556302e90450 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x556302e905c0 <line:432:5, col:33> col:29 now 'Timestamp ()' static inline
|-CXXMethodDecl 0x556302e90680 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x556302e90720 <col:20>
| `-OptimizeNoneAttr 0x556302e90778 <col:30>
|-CXXMethodDecl 0x556302e907c0 <line:446:5, col:36> col:29 used recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x556302e90880 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x556302e90940 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x556302e90a00 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x556302e90ac0 <line:481:5, col:43> col:29 used recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x556302e90b80 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x556302e90c40 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x556302e90d00 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x556302e90e40 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x556302e90db0 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x556302ea59a8 <col:58, line:512:5>
|   `-ReturnStmt 0x556302ea5998 <line:511:9, col:53>
|     `-BinaryOperator 0x556302ea5978 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x556302ea5948 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x556302ea5878 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x556302e90db0 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x556302ea5960 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x556302ea5928 <col:23, col:53> 'int'
|           `-BinaryOperator 0x556302ea5908 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x556302ea58d8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x556302ea5898 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x556302e86f70 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x556302ea58f0 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x556302ea58b8 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x556302e86ee0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x556302e90f88 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x556302e90ef8 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x556302ea5af0 <col:58, line:516:5>
|   `-ReturnStmt 0x556302ea5ae0 <line:515:9, col:53>
|     `-BinaryOperator 0x556302ea5ac0 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x556302ea5a90 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x556302ea59c0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x556302e90ef8 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x556302ea5aa8 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x556302ea5a70 <col:23, col:53> 'int'
|           `-BinaryOperator 0x556302ea5a50 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x556302ea5a20 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x556302ea59e0 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x556302e86f70 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x556302ea5a38 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x556302ea5a00 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x556302e86dc0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x556302e910d0 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x556302e91040 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x556302ea5c38 <col:58, line:520:5>
|   `-ReturnStmt 0x556302ea5c28 <line:519:9, col:53>
|     `-BinaryOperator 0x556302ea5c08 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x556302ea5bd8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x556302ea5b08 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x556302e91040 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x556302ea5bf0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x556302ea5bb8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x556302ea5b98 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x556302ea5b68 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x556302ea5b28 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x556302e86c10 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x556302ea5b80 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x556302ea5b48 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x556302e86f70 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x556302e91218 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x556302e91188 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x556302ea5d80 <col:60, line:524:5>
|   `-ReturnStmt 0x556302ea5d70 <line:523:9, col:55>
|     `-BinaryOperator 0x556302ea5d50 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x556302ea5d20 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x556302ea5c50 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x556302e91188 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x556302ea5d38 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x556302ea5d00 <col:25, col:55> 'int'
|           `-BinaryOperator 0x556302ea5ce0 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x556302ea5cb0 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x556302ea5c70 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x556302e86f70 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x556302ea5cc8 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x556302ea5c90 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x556302e86ee0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x556302e91360 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x556302e912d0 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x556302ea5ec8 <col:60, line:528:5>
|   `-ReturnStmt 0x556302ea5eb8 <line:527:9, col:55>
|     `-BinaryOperator 0x556302ea5e98 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x556302ea5e68 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x556302ea5d98 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x556302e912d0 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x556302ea5e80 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x556302ea5e48 <col:25, col:55> 'int'
|           `-BinaryOperator 0x556302ea5e28 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x556302ea5df8 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x556302ea5db8 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x556302e86f70 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x556302ea5e10 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x556302ea5dd8 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x556302e86dc0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x556302e914a8 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x556302e91418 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x556302ea6010 <col:60, line:532:5>
|   `-ReturnStmt 0x556302ea6000 <line:531:9, col:55>
|     `-BinaryOperator 0x556302ea5fe0 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x556302ea5fb0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x556302ea5ee0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x556302e91418 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x556302ea5fc8 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x556302ea5f90 <col:25, col:55> 'int'
|           `-BinaryOperator 0x556302ea5f70 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x556302ea5f40 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x556302ea5f00 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x556302e86c10 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x556302ea5f58 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x556302ea5f20 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x556302e86f70 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x556302e91550 prev 0x556302e889e0 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x556302e91648 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x556302e916e8 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x556302e97b88 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x556302e97f68 <col:11>
| |-CXXConstructorDecl 0x556302e97c60 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x556302e97d48 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x556302e986b0 <col:11>
| |-CXXConstructorDecl 0x556302e97de8 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x556302e97ef8 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x556302e99f08 <col:11>
| |-CXXDestructorDecl 0x556302e99218 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x556302b996e8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x556302b997f8 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x556302b9a0c0 <col:11>
| |   `-ReturnStmt 0x556302b9a0b0 <col:11>
| |     `-UnaryOperator 0x556302b9a098 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x556302b9a088 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x556302b99868 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x556302b99978 <col:11> col:11 'Timestamp::rep_t &&'
|   `-CompoundStmt 0x556302f23ef0 <col:11>
|     `-ReturnStmt 0x556302f23ee0 <col:11>
|       `-UnaryOperator 0x556302f23ec8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x556302f23eb8 <col:11> 'Timestamp::rep_t *' this
|-EnumDecl 0x556302e91750 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x556302e91850 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x556302e91a50 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302e91830 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x556302e91810 <col:21> 'int' 0
| |-EnumConstantDecl 0x556302e918e0 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x556302e91a68 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302e918c0 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x556302e918a0 <col:23> 'int' 1
| |-EnumConstantDecl 0x556302e91970 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x556302e91a80 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302e91950 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x556302e91930 <col:23> 'int' 2
| `-EnumConstantDecl 0x556302e91a00 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x556302e91a98 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556302e919e0 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x556302e919c0 <col:27> 'int' 3
|-CXXMethodDecl 0x556302e91ad8 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x556302e91ba0 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x556302e91da8 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x556302e91c50 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x556302e91cd0 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x556302e97b50 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x556302e91fb8 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x556302e91e68 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x556302e91ee0 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x556302e92088 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x556302e92148 <line:635:5, col:37> col:24 used warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x556302e922b8 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x556302e921f8 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x556302e92380 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x556302e92440 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x556302e92500 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x556302e925c0 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x556302e92660 <line:670:3, col:10> col:3 private
|-FieldDecl 0x556302e92698 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x556302e92708 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x556302ea6028 <col:27, line:684:5>
|-CXXMethodDecl 0x556302e927c8 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x556302ea6038 <col:27, line:696:5>
|-CXXMethodDecl 0x556302e929c8 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x556302e92878 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x556302e928f0 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x556302ea61c0 <col:66, line:700:5>
|   `-ReturnStmt 0x556302ea61b0 <line:699:9, col:31>
|     `-CallExpr 0x556302ea6150 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x556302ea6138 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556302ea60e8 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x556302d13908 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x556302ea6180 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x556302ea60a8 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x556302e92878 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x556302ea6198 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x556302ea60c8 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x556302e928f0 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556302e92d38 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x556302e92a88 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x556302e92b00 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x556302e92b78 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x556302e92bf0 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x556302ea6510 <col:64, line:707:5>
|   |-DeclStmt 0x556302ea6250 <line:704:9, col:24>
|   | `-VarDecl 0x556302ea61e8 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x556302ea6460 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x556302ea6268 <col:9> 'int32_t':'int' lvalue ParmVar 0x556302e92b00 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x556302ea6448 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x556302ea63e0 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x556302ea63c8 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556302ea6348 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x556302d18f58 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x556302ea6418 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x556302ea62e8 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x556302e92b78 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x556302ea6430 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x556302ea6308 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x556302e92bf0 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x556302ea6328 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x556302ea61e8 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x556302ea64f0 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x556302ea6480 <col:9> 'int32_t':'int' lvalue ParmVar 0x556302e92a88 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x556302ea64d8 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x556302ea64c0 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x556302ea64a0 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x556302ea61e8 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x556302e92fd8 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x556302e92e08 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x556302e92e80 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x556302e92ef8 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x556302e93278 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x556302e930a0 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x556302e93118 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x556302e93190 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x556302e93408 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x556302e93340 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x556302e96e50 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x556302e934c0 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x556302e93538 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x556302e97118 <line:717:5, col:73> col:24
| `-FunctionDecl 0x556302e97058 parent 0x55630298b278 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x556302e96f10 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x556302e96f88 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x556302e97338 <line:718:5, col:72> col:24
| `-FunctionDecl 0x556302e97278 parent 0x55630298b278 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x556302e97168 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x556302e971e0 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x556302e97500 <line:719:5, col:57> col:29
| `-FunctionDecl 0x556302e97448 parent 0x55630298b278 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x556302e97388 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x556302e97788 <line:720:5, col:73> col:30
| `-FunctionDecl 0x556302e976c8 parent 0x55630298b278 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x556302e97578 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x556302e975f0 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x556302e979a8 <line:721:5, col:73> col:30
| `-FunctionDecl 0x556302e978e8 parent 0x55630298b278 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x556302e977d8 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x556302e97850 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x556302e990c0 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x556302e991a8 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x556302e92698 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x556302e99c18 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x556302e99bd0 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x556302e92698
| |     `-DeclRefExpr 0x556302e99bb0 <col:7> 'const Timestamp' lvalue ParmVar 0x556302e991a8 '' 'const Timestamp &'
| `-CompoundStmt 0x556302e99c78 <col:7>
|-CXXConstructorDecl 0x556302e99328 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x556302e99438 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x556302e92698 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x556302e99f18 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x556302e99ec0 <col:7> 'Timestamp::rep_t' xvalue ._t 0x556302e92698
| |     `-CXXStaticCastExpr 0x556302e99e90 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x556302e99e60 <col:7> 'Timestamp' lvalue ParmVar 0x556302e99438 '' 'Timestamp &&'
| `-CompoundStmt 0x556302e99f78 <col:7>
|-CXXDestructorDecl 0x556302e994e8 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x556302b99540 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x556302b99648 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x556302b9a138 <col:7>
|   |-CXXMemberCallExpr 0x556302b9a0d8 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x556302b9a018 <col:7> '<bound member function type>' .operator= 0x556302b996e8
|   | | `-MemberExpr 0x556302b99f28 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x556302e92698
|   | |   `-CXXThisExpr 0x556302b99f18 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x556302b99fe8 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x556302e92698
|   |   `-DeclRefExpr 0x556302b99fc8 <col:7> 'const Timestamp' lvalue ParmVar 0x556302b99648 '' 'const Timestamp &'
|   `-ReturnStmt 0x556302b9a128 <col:7>
|     `-UnaryOperator 0x556302b9a110 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x556302b9a100 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x556302b999e8 <col:7> col:7 implicit used operator= 'Timestamp &(Timestamp &&) noexcept' inline default trivial
  |-ParmVarDecl 0x556302b99af8 <col:7> col:7 used 'Timestamp &&'
  `-CompoundStmt 0x556302f23f68 <col:7>
    |-CXXMemberCallExpr 0x556302f23f08 <col:7> 'Timestamp::rep_t' lvalue
    | |-MemberExpr 0x556302f23e70 <col:7> '<bound member function type>' .operator= 0x556302b99868
    | | `-MemberExpr 0x556302f23d40 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x556302e92698
    | |   `-CXXThisExpr 0x556302f23d30 <col:7> 'Timestamp *' this
    | `-MemberExpr 0x556302f23e40 <col:7> 'Timestamp::rep_t' xvalue ._t 0x556302e92698
    |   `-CXXStaticCastExpr 0x556302f23e10 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
    |     `-DeclRefExpr 0x556302f23de0 <col:7> 'Timestamp' lvalue ParmVar 0x556302b99af8 '' 'Timestamp &&'
    `-ReturnStmt 0x556302f23f58 <col:7>
      `-UnaryOperator 0x556302f23f40 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x556302f23f30 <col:7> 'Timestamp *' this

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556302f20f48 <../dummy_inc/click/timer.hh:343:5, line:345:5> line:343:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x556302f21078 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
`-CXXDestructorDecl 0x556302f21b68 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { void (%class.Timer*, i8*)* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556302e7b4f8 prev 0x556302efb5e0 <../dummy_inc/click/timer.hh:14:1, line:358:1> line:14:7 referenced class Timer definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x556302e7b5f0 <col:1, col:7> col:7 implicit referenced class Timer
|-AccessSpecDecl 0x556302e7b680 <col:15, col:21> col:15 public
|-CXXConstructorDecl 0x556302e7b6e0 <line:22:5, col:11> col:5 Timer 'void ()'
|-CXXRecordDecl 0x556302e7b788 <line:24:5, line:25:5> line:24:12 referenced struct do_nothing_t definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| `-CXXRecordDecl 0x556302e7b8a8 <col:5, col:12> col:12 implicit struct do_nothing_t
|-CXXConstructorDecl 0x556302e7ba48 <line:32:5, col:37> col:5 Timer 'void (const Timer::do_nothing_t &)'
| `-ParmVarDecl 0x556302e7b988 <col:11, col:31> col:31 unused 'const Timer::do_nothing_t &'
|-CXXConstructorDecl 0x556302e7bc98 <line:38:5, col:43> col:5 Timer 'void (TimerCallback, void *)'
| |-ParmVarDecl 0x556302e7bb08 <col:11, col:25> col:25 f 'TimerCallback':'void (*)(Timer *, void *)'
| `-ParmVarDecl 0x556302e7bb88 <col:28, col:34> col:34 user_data 'void *'
|-CXXConstructorDecl 0x556302e7be28 <line:43:5, col:27> col:5 Timer 'void (Element *)'
| `-ParmVarDecl 0x556302e7bd60 <col:11, col:20> col:20 element 'Element *'
|-CXXConstructorDecl 0x556302e7bfa8 <line:47:5, col:21> col:5 Timer 'void (Task *)'
| `-ParmVarDecl 0x556302e7bee8 <col:11, col:17> col:17 task 'Task *'
|-CXXConstructorDecl 0x556302e7c158 <line:52:5, col:25> col:5 Timer 'void (const Timer &)'
| `-ParmVarDecl 0x556302e7c098 <col:11, col:24> col:24 x 'const Timer &'
|-CXXDestructorDecl 0x556302e7c250 <line:55:5, line:58:5> line:55:12 ~Timer 'void () noexcept' inline
| `-CompoundStmt 0x556302f21d40 <col:21, line:58:5>
|   `-IfStmt 0x556302f21d28 <line:56:2, line:57:17>
|     |-CXXMemberCallExpr 0x556302f21c90 <line:56:6, col:16> 'bool'
|     | `-MemberExpr 0x556302f21c60 <col:6> '<bound member function type>' ->scheduled 0x556302e7caa8
|     |   `-ImplicitCastExpr 0x556302f21cb0 <col:6> 'const Timer *' <NoOp>
|     |     `-CXXThisExpr 0x556302f21c50 <col:6> 'Timer *' implicit this
|     `-CXXMemberCallExpr 0x556302f21d08 <line:57:6, col:17> 'void'
|       `-MemberExpr 0x556302f21cd8 <col:6> '<bound member function type>' ->unschedule 0x556302f203f0
|         `-CXXThisExpr 0x556302f21cc8 <col:6> 'Timer *' implicit this
|-CXXMethodDecl 0x556302e7c350 <line:62:5, line:65:5> line:62:17 used assign 'void ()' inline
| `-CompoundStmt 0x556302f21ee0 <col:26, line:65:5>
|   |-BinaryOperator 0x556302f21e00 <line:63:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x556302f21d98 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x556302f21078
|   | | `-MemberExpr 0x556302f21d68 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x556302f21138
|   | |   `-CXXThisExpr 0x556302f21d58 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x556302f21de8 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556302f21dc8 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x556302f21598 'do_nothing_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x556302f21ec0 <line:64:2, col:20> 'void *' lvalue '='
|     |-MemberExpr 0x556302f21e30 <col:2> 'void *' lvalue ->_thunk 0x556302f211b8
|     | `-CXXThisExpr 0x556302f21e20 <col:2> 'Timer *' implicit this
|     `-CStyleCastExpr 0x556302f21e98 <col:11, col:20> 'void *' <IntegralToPointer>
|       `-IntegerLiteral 0x556302f21e60 <col:20> 'int' 1
|-CXXMethodDecl 0x556302e7c490 <line:68:5, line:71:5> line:68:17 assign 'void (const Timer::do_nothing_t &)' inline
| |-ParmVarDecl 0x556302e7c400 <col:24, col:44> col:44 used unused 'const Timer::do_nothing_t &'
| `-CompoundStmt 0x556302f22040 <col:52, line:71:5>
|   |-CStyleCastExpr 0x556302f21f30 <line:69:2, col:9> 'void' <ToVoid>
|   | `-DeclRefExpr 0x556302f21f00 <col:9> 'const Timer::do_nothing_t' lvalue ParmVar 0x556302e7c400 'unused' 'const Timer::do_nothing_t &'
|   `-CXXMemberCallExpr 0x556302f22020 <line:70:2, col:9> 'void'
|     `-MemberExpr 0x556302f21ff0 <col:2> '<bound member function type>' ->assign 0x556302e7c350
|       `-CXXThisExpr 0x556302f21fe0 <col:2> 'Timer *' implicit this
|-CXXMethodDecl 0x556302e7c660 <line:76:5, line:79:5> line:76:17 assign 'void (TimerCallback, void *)' inline
| |-ParmVarDecl 0x556302e7c548 <col:24, col:38> col:38 used f 'TimerCallback':'void (*)(Timer *, void *)'
| |-ParmVarDecl 0x556302e7c5c8 <col:41, col:47> col:47 used user_data 'void *'
| `-CompoundStmt 0x556302f221c0 <col:58, line:79:5>
|   |-BinaryOperator 0x556302f22108 <line:77:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x556302f220a0 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x556302f21078
|   | | `-MemberExpr 0x556302f22070 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x556302f21138
|   | |   `-CXXThisExpr 0x556302f22060 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x556302f220f0 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' <LValueToRValue>
|   |   `-DeclRefExpr 0x556302f220d0 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue ParmVar 0x556302e7c548 'f' 'TimerCallback':'void (*)(Timer *, void *)'
|   `-BinaryOperator 0x556302f221a0 <line:78:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x556302f22138 <col:2> 'void *' lvalue ->_thunk 0x556302f211b8
|     | `-CXXThisExpr 0x556302f22128 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x556302f22188 <col:11> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x556302f22168 <col:11> 'void *' lvalue ParmVar 0x556302e7c5c8 'user_data' 'void *'
|-CXXMethodDecl 0x556302e7c7b0 <line:84:5, line:87:5> line:84:10 assign 'void (Element *)'
| |-ParmVarDecl 0x556302e7c720 <col:17, col:26> col:26 used element 'Element *'
| `-CompoundStmt 0x556302f22358 <col:35, line:87:5>
|   |-BinaryOperator 0x556302f22288 <line:85:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x556302f22220 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x556302f21078
|   | | `-MemberExpr 0x556302f221f0 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x556302f21138
|   | |   `-CXXThisExpr 0x556302f221e0 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x556302f22270 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556302f22250 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x556302f21770 'element_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x556302f22338 <line:86:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x556302f222b8 <col:2> 'void *' lvalue ->_thunk 0x556302f211b8
|     | `-CXXThisExpr 0x556302f222a8 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x556302f22320 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x556302f22308 <col:11> 'Element *' <LValueToRValue>
|         `-DeclRefExpr 0x556302f222e8 <col:11> 'Element *' lvalue ParmVar 0x556302e7c720 'element' 'Element *'
|-CXXMethodDecl 0x556302e7c8f8 <line:91:5, line:94:5> line:91:10 assign 'void (Task *)'
| |-ParmVarDecl 0x556302e7c868 <col:17, col:23> col:23 used task 'Task *'
| `-CompoundStmt 0x556302f224f0 <col:29, line:94:5>
|   |-BinaryOperator 0x556302f22420 <line:92:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x556302f223b8 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x556302f21078
|   | | `-MemberExpr 0x556302f22388 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x556302f21138
|   | |   `-CXXThisExpr 0x556302f22378 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x556302f22408 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x556302f223e8 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x556302f21948 'task_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x556302f224d0 <line:93:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x556302f22450 <col:2> 'void *' lvalue ->_thunk 0x556302f211b8
|     | `-CXXThisExpr 0x556302f22440 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x556302f224b8 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x556302f224a0 <col:11> 'Task *' <LValueToRValue>
|         `-DeclRefExpr 0x556302f22480 <col:11> 'Task *' lvalue ParmVar 0x556302e7c868 'task' 'Task *'
|-CXXMethodDecl 0x556302e7c9e8 <line:98:5, line:100:5> line:98:17 initialized 'bool () const' inline
| `-CompoundStmt 0x556302f225d0 <col:37, line:100:5>
|   `-ReturnStmt 0x556302f225c0 <line:99:2, col:19>
|     `-BinaryOperator 0x556302f225a0 <col:9, col:19> 'bool' '!='
|       |-ImplicitCastExpr 0x556302f22570 <col:9> 'Element *' <LValueToRValue>
|       | `-MemberExpr 0x556302f22520 <col:9> 'Element *const' lvalue ->_owner 0x556302f21218
|       |   `-CXXThisExpr 0x556302f22510 <col:9> 'const Timer *' implicit this
|       `-ImplicitCastExpr 0x556302f22588 <col:19> 'Element *' <NullToPointer>
|         `-IntegerLiteral 0x556302f22550 <col:19> 'int' 0
|-CXXMethodDecl 0x556302e7caa8 <line:103:5, line:105:5> line:103:17 used scheduled 'bool () const' inline
| `-CompoundStmt 0x556302f22690 <col:35, line:105:5>
|   `-ReturnStmt 0x556302f22680 <line:104:2, col:23>
|     `-BinaryOperator 0x556302f22660 <col:9, col:23> 'bool' '!='
|       |-ImplicitCastExpr 0x556302f22648 <col:9> 'int' <LValueToRValue>
|       | `-MemberExpr 0x556302f225f8 <col:9> 'const int' lvalue ->_schedpos1 0x556302f20e98
|       |   `-CXXThisExpr 0x556302f225e8 <col:9> 'const Timer *' implicit this
|       `-IntegerLiteral 0x556302f22628 <col:23> 'int' 0
|-CXXMethodDecl 0x556302e7cb68 <line:116:5, line:118:5> line:116:29 expiry_steady 'const Timestamp &() const' inline
| `-CompoundStmt 0x556302f226f8 <col:51, line:118:5>
|   `-ReturnStmt 0x556302f226e8 <line:117:2, col:9>
|     `-MemberExpr 0x556302f226b8 <col:9> 'const Timestamp' lvalue ->_expiry_s 0x556302f20ef8
|       `-CXXThisExpr 0x556302f226a8 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x556302e7cc28 <line:131:5, line:136:5> line:131:22 expiry 'Timestamp () const' inline
| `-CompoundStmt 0x556302f22c50 <col:37, line:136:5>
|   `-IfStmt 0x556302f22c28 <line:132:2, line:135:13> has_else
|     |-ImplicitCastExpr 0x556302f227b8 <line:132:6> 'bool' <MemberPointerToBoolean>
|     | `-ImplicitCastExpr 0x556302f227a0 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const' <UserDefinedConversion>
|     |   `-CXXMemberCallExpr 0x556302f22780 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const'
|     |     `-MemberExpr 0x556302f22750 <col:6> '<bound member function type>' .operator int (Timestamp::*)() const 0x556302e8a038
|     |       `-MemberExpr 0x556302f22720 <col:6> 'const Timestamp' lvalue ->_expiry_s 0x556302f20ef8
|     |         `-CXXThisExpr 0x556302f22710 <col:6> 'const Timer *' implicit this
|     |-ReturnStmt 0x556302f22b98 <line:133:6, col:72>
|     | `-ExprWithCleanups 0x556302f22b80 <col:13, col:72> 'Timestamp'
|     |   `-CXXConstructExpr 0x556302f22b50 <col:13, col:72> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |     `-MaterializeTemporaryExpr 0x556302f22b38 <col:13, col:72> 'Timestamp' xvalue
|     |       `-CXXOperatorCallExpr 0x556302f22b00 <col:13, col:72> 'Timestamp'
|     |         |-ImplicitCastExpr 0x556302f22ae8 <col:45> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         | `-DeclRefExpr 0x556302f22ac8 <col:45> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x556302eb5740 'operator-' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |-CXXConstructExpr 0x556302f22a68 <col:13, col:43> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |         | `-MaterializeTemporaryExpr 0x556302f22a50 <col:13, col:43> 'Timestamp' xvalue
|     |         |   `-CXXOperatorCallExpr 0x556302f22978 <col:13, col:43> 'Timestamp'
|     |         |     |-ImplicitCastExpr 0x556302f22960 <col:23> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         |     | `-DeclRefExpr 0x556302f22940 <col:23> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x556302eb5400 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |     |-CXXConstructExpr 0x556302f228e0 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|     |         |     | `-MemberExpr 0x556302f227e0 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x556302f20ef8
|     |         |     |   `-CXXThisExpr 0x556302f227d0 <col:13> 'const Timer *' implicit this
|     |         |     `-MaterializeTemporaryExpr 0x556302f22928 <col:25, col:43> 'const Timestamp' lvalue
|     |         |       `-ImplicitCastExpr 0x556302f22910 <col:25, col:43> 'const Timestamp' <NoOp>
|     |         |         `-CallExpr 0x556302f228c0 <col:25, col:43> 'Timestamp'
|     |         |           `-ImplicitCastExpr 0x556302f228a8 <col:25, col:36> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |         |             `-DeclRefExpr 0x556302f22848 <col:25, col:36> 'Timestamp ()' lvalue CXXMethod 0x556302cfa7d0 'recent' 'Timestamp ()'
|     |         `-MaterializeTemporaryExpr 0x556302f22ab0 <col:47, col:72> 'const Timestamp' lvalue
|     |           `-ImplicitCastExpr 0x556302f22a98 <col:47, col:72> 'const Timestamp' <NoOp>
|     |             `-CallExpr 0x556302f22a30 <col:47, col:72> 'Timestamp'
|     |               `-ImplicitCastExpr 0x556302f22a18 <col:47, col:58> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |                 `-DeclRefExpr 0x556302f229e8 <col:47, col:58> 'Timestamp ()' lvalue CXXMethod 0x556302cfb4a0 'recent_steady' 'Timestamp ()'
|     `-ReturnStmt 0x556302f22c18 <line:135:6, col:13>
|       `-CXXConstructExpr 0x556302f22be8 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|         `-MemberExpr 0x556302f22bb8 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x556302f20ef8
|           `-CXXThisExpr 0x556302f22ba8 <col:13> 'const Timer *' implicit this
|-CXXMethodDecl 0x556302e7cce8 <line:139:5, line:141:5> line:139:20 router 'Router *() const' inline
| `-CompoundStmt 0x556302f22d38 <col:35, line:141:5>
|   `-ReturnStmt 0x556302f22d28 <line:140:2, col:24>
|     `-CXXMemberCallExpr 0x556302f22cf0 <col:9, col:24> 'Router *'
|       `-MemberExpr 0x556302f22cc0 <col:9, col:17> '<bound member function type>' ->router 0x556302f0cd80
|         `-ImplicitCastExpr 0x556302f22d10 <col:9> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x556302f22ca8 <col:9> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x556302f22c78 <col:9> 'Element *const' lvalue ->_owner 0x556302f21218
|               `-CXXThisExpr 0x556302f22c68 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x556302e7cda8 <line:144:5, line:146:5> line:144:21 element 'Element *() const' inline
| `-CompoundStmt 0x556302f22db8 <col:37, line:146:5>
|   `-ReturnStmt 0x556302f22da8 <line:145:2, col:9>
|     `-ImplicitCastExpr 0x556302f22d90 <col:9> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x556302f22d60 <col:9> 'Element *const' lvalue ->_owner 0x556302f21218
|         `-CXXThisExpr 0x556302f22d50 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x556302e7ce68 <line:149:5, line:151:5> line:149:26 thread 'RouterThread *() const' inline
| `-CompoundStmt 0x556302f22e38 <col:41, line:151:5>
|   `-ReturnStmt 0x556302f22e28 <line:150:2, col:9>
|     `-ImplicitCastExpr 0x556302f22e10 <col:9> 'RouterThread *' <LValueToRValue>
|       `-MemberExpr 0x556302f22de0 <col:9> 'RouterThread *const' lvalue ->_thread 0x556302f21278
|         `-CXXThisExpr 0x556302f22dd0 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x556302e7cf30 <line:154:5, col:26> col:9 home_thread_id 'int () const'
|-CXXMethodDecl 0x556302f1f410 <line:171:5, col:55> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x556302e7cfe0 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x556302e7d058 <col:37, col:50> col:42 quiet 'bool' cinit
|   `-CXXBoolLiteralExpr 0x556302f21b58 <col:50> 'bool' false
|-CXXMethodDecl 0x556302f1f598 <line:181:5, col:35> col:10 initialize 'void (Router *)'
| `-ParmVarDecl 0x556302f1f4d0 <col:21, col:29> col:29 router 'Router *'
|-CXXMethodDecl 0x556302f1f6e0 <line:191:5, col:57> col:10 used schedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x556302f1f650 <col:29, col:46> col:46 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x556302f1f828 <line:197:5, col:59> col:10 reschedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x556302f1f798 <col:31, col:48> col:48 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x556302f1f970 <line:210:5, col:50> col:17 used schedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x556302f1f8e0 <col:29, col:46> col:46 when 'const Timestamp &'
|-CXXMethodDecl 0x556302f1fab8 <line:216:5, col:52> col:17 reschedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x556302f1fa28 <col:31, col:48> col:48 when 'const Timestamp &'
|-CXXMethodDecl 0x556302f1fb80 <line:221:5, line:223:5> line:221:17 schedule_now 'void ()' inline
| `-CompoundStmt 0x556302f22fa0 <col:32, line:223:5>
|   `-ExprWithCleanups 0x556302f22f88 <line:222:2, col:47> 'void'
|     `-CXXMemberCallExpr 0x556302f22f30 <col:2, col:47> 'void'
|       |-MemberExpr 0x556302f22e60 <col:2> '<bound member function type>' ->schedule_at_steady 0x556302f1f6e0
|       | `-CXXThisExpr 0x556302f22e50 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x556302f22f70 <col:21, col:46> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x556302f22f58 <col:21, col:46> 'const Timestamp' <NoOp>
|           `-CallExpr 0x556302f22f10 <col:21, col:46> 'Timestamp'
|             `-ImplicitCastExpr 0x556302f22ef8 <col:21, col:32> 'Timestamp (*)()' <FunctionToPointerDecay>
|               `-DeclRefExpr 0x556302f22ec8 <col:21, col:32> 'Timestamp ()' lvalue CXXMethod 0x556302cfb4a0 'recent_steady' 'Timestamp ()'
|-CXXMethodDecl 0x556302f1fcc0 <line:233:5, col:47> col:10 used schedule_after 'void (const Timestamp &)'
| `-ParmVarDecl 0x556302f1fc30 <col:25, col:42> col:42 delta 'const Timestamp &'
|-CXXMethodDecl 0x556302f1fe08 <line:239:5, line:241:5> line:239:17 used schedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x556302f1fd78 <col:36, col:45> col:45 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x556302f23128 <col:56, line:241:5>
|   `-ExprWithCleanups 0x556302f23110 <line:240:2, col:40> 'void'
|     `-CXXMemberCallExpr 0x556302f230b8 <col:2, col:40> 'void'
|       |-MemberExpr 0x556302f22fc8 <col:2> '<bound member function type>' ->schedule_after 0x556302f1fcc0
|       | `-CXXThisExpr 0x556302f22fb8 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x556302f230f8 <col:17, col:39> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x556302f230e0 <col:17, col:39> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x556302f23078 <col:17, col:39> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-ImplicitCastExpr 0x556302f23048 <col:27> 'uint32_t':'unsigned int' <LValueToRValue>
|             | `-DeclRefExpr 0x556302f23008 <col:27> 'uint32_t':'unsigned int' lvalue ParmVar 0x556302f1fd78 'delta_sec' 'uint32_t':'unsigned int'
|             `-ImplicitCastExpr 0x556302f23060 <col:38> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x556302f23028 <col:38> 'int' 0
|-CXXMethodDecl 0x556302f1ff50 <line:247:5, line:249:5> line:247:17 used schedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x556302f1fec0 <col:37, col:46> col:46 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x556302f23398 <col:58, line:249:5>
|   `-ExprWithCleanups 0x556302f23380 <line:248:2, col:49> 'void'
|     `-CXXMemberCallExpr 0x556302f23328 <col:2, col:49> 'void'
|       |-MemberExpr 0x556302f23150 <col:2> '<bound member function type>' ->schedule_after 0x556302f1fcc0
|       | `-CXXThisExpr 0x556302f23140 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x556302f23368 <col:17, col:48> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x556302f23350 <col:17, col:48> 'const Timestamp' <NoOp>
|           `-CallExpr 0x556302f232d0 <col:17, col:48> 'Timestamp'
|             |-ImplicitCastExpr 0x556302f232b8 <col:17, col:28> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x556302f23228 <col:17, col:28> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x556302e8be28 'make_msec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x556302f23310 <col:38> 'Timestamp::value_type':'long' <IntegralCast>
|               `-ImplicitCastExpr 0x556302f232f8 <col:38> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x556302f23208 <col:38> 'uint32_t':'unsigned int' lvalue ParmVar 0x556302f1fec0 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556302f20098 <line:259:5, line:261:5> line:259:17 reschedule_after 'void (const Timestamp &)' inline
| |-ParmVarDecl 0x556302f20008 <col:34, col:51> col:51 used delta 'const Timestamp &'
| `-CompoundStmt 0x556302f23578 <col:58, line:261:5>
|   `-ExprWithCleanups 0x556302f23560 <line:260:2, col:38> 'void'
|     `-CXXMemberCallExpr 0x556302f23508 <col:2, col:38> 'void'
|       |-MemberExpr 0x556302f233c0 <col:2> '<bound member function type>' ->schedule_at_steady 0x556302f1f6e0
|       | `-CXXThisExpr 0x556302f233b0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x556302f23548 <col:21, col:33> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x556302f23530 <col:21, col:33> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x556302f234d0 <col:21, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x556302f234b8 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x556302f23498 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x556302eb5400 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x556302f23468 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x556302f23450 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x556302f23400 <col:21> 'Timestamp' lvalue ->_expiry_s 0x556302f20ef8
|             |     `-CXXThisExpr 0x556302f233f0 <col:21> 'Timer *' implicit this
|             `-DeclRefExpr 0x556302f23430 <col:33> 'const Timestamp' lvalue ParmVar 0x556302f20008 'delta' 'const Timestamp &'
|-CXXMethodDecl 0x556302f201e0 <line:268:5, line:270:5> line:268:17 used reschedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x556302f20150 <col:38, col:47> col:47 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x556302f23850 <col:58, line:270:5>
|   `-ExprWithCleanups 0x556302f23838 <line:269:2, col:79> 'void'
|     `-CXXMemberCallExpr 0x556302f237e0 <col:2, col:79> 'void'
|       |-MemberExpr 0x556302f235a0 <col:2> '<bound member function type>' ->schedule_at_steady 0x556302f1f6e0
|       | `-CXXThisExpr 0x556302f23590 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x556302f23820 <col:21, col:78> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x556302f23808 <col:21, col:78> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x556302f237a0 <col:21, col:78> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-BinaryOperator 0x556302f236d8 <col:31, col:49> 'unsigned int' '+'
|             | |-ImplicitCastExpr 0x556302f236c0 <col:31, col:45> 'unsigned int' <IntegralCast>
|             | | `-CXXMemberCallExpr 0x556302f23650 <col:31, col:45> 'Timestamp::seconds_type':'int'
|             | |   `-MemberExpr 0x556302f23620 <col:31, col:41> '<bound member function type>' .sec 0x556302cfcf98
|             | |     `-ImplicitCastExpr 0x556302f23670 <col:31> 'const Timestamp' lvalue <NoOp>
|             | |       `-MemberExpr 0x556302f235f0 <col:31> 'Timestamp' lvalue ->_expiry_s 0x556302f20ef8
|             | |         `-CXXThisExpr 0x556302f235e0 <col:31> 'Timer *' implicit this
|             | `-ImplicitCastExpr 0x556302f236a8 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|             |   `-DeclRefExpr 0x556302f23688 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x556302f20150 'delta_sec' 'uint32_t':'unsigned int'
|             `-CXXMemberCallExpr 0x556302f23768 <col:60, col:77> 'uint32_t':'unsigned int'
|               `-MemberExpr 0x556302f23738 <col:60, col:70> '<bound member function type>' .subsec 0x556302cfd690
|                 `-ImplicitCastExpr 0x556302f23788 <col:60> 'const Timestamp' lvalue <NoOp>
|                   `-MemberExpr 0x556302f23708 <col:60> 'Timestamp' lvalue ->_expiry_s 0x556302f20ef8
|                     `-CXXThisExpr 0x556302f236f8 <col:60> 'Timer *' implicit this
|-CXXMethodDecl 0x556302f20328 <line:277:5, line:279:5> line:277:17 used reschedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x556302f20298 <col:39, col:48> col:48 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x556302f23b88 <col:60, line:279:5>
|   `-ExprWithCleanups 0x556302f23b70 <line:278:2, col:65> 'void'
|     `-CXXMemberCallExpr 0x556302f23b18 <col:2, col:65> 'void'
|       |-MemberExpr 0x556302f23878 <col:2> '<bound member function type>' ->schedule_at_steady 0x556302f1f6e0
|       | `-CXXThisExpr 0x556302f23868 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x556302f23b58 <col:21, col:64> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x556302f23b40 <col:21, col:64> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x556302f23ae0 <col:21, col:64> 'Timestamp'
|             |-ImplicitCastExpr 0x556302f23ac8 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x556302f23aa8 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x556302eb5400 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x556302f23a48 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x556302f23a30 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x556302f238b8 <col:21> 'Timestamp' lvalue ->_expiry_s 0x556302f20ef8
|             |     `-CXXThisExpr 0x556302f238a8 <col:21> 'Timer *' implicit this
|             `-MaterializeTemporaryExpr 0x556302f23a90 <col:33, col:64> 'const Timestamp' lvalue
|               `-ImplicitCastExpr 0x556302f23a78 <col:33, col:64> 'const Timestamp' <NoOp>
|                 `-CallExpr 0x556302f239d8 <col:33, col:64> 'Timestamp'
|                   |-ImplicitCastExpr 0x556302f239c0 <col:33, col:44> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|                   | `-DeclRefExpr 0x556302f23990 <col:33, col:44> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x556302e8be28 'make_msec' 'Timestamp (Timestamp::value_type)'
|                   `-ImplicitCastExpr 0x556302f23a18 <col:54> 'Timestamp::value_type':'long' <IntegralCast>
|                     `-ImplicitCastExpr 0x556302f23a00 <col:54> 'uint32_t':'unsigned int' <LValueToRValue>
|                       `-DeclRefExpr 0x556302f23970 <col:54> 'uint32_t':'unsigned int' lvalue ParmVar 0x556302f20298 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556302f203f0 <line:285:5, col:21> col:10 used unschedule 'void ()'
|-CXXMethodDecl 0x556302f204b0 <line:288:5, line:291:5> line:288:17 clear 'void ()' inline
| `-CompoundStmt 0x556302f24050 <col:25, line:291:5>
|   |-CXXMemberCallExpr 0x556302f23be0 <line:289:2, col:13> 'void'
|   | `-MemberExpr 0x556302f23bb0 <col:2> '<bound member function type>' ->unschedule 0x556302f203f0
|   |   `-CXXThisExpr 0x556302f23ba0 <col:2> 'Timer *' implicit this
|   `-ExprWithCleanups 0x556302f24038 <line:290:2, col:24> 'Timestamp' lvalue
|     `-CXXOperatorCallExpr 0x556302f24000 <col:2, col:24> 'Timestamp' lvalue
|       |-ImplicitCastExpr 0x556302f23fe8 <col:12> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556302f23c98 <col:12> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x556302b999e8 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|       |-MemberExpr 0x556302f23c10 <col:2> 'Timestamp' lvalue ->_expiry_s 0x556302f20ef8
|       | `-CXXThisExpr 0x556302f23c00 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x556302f23c80 <col:14, col:24> 'Timestamp' xvalue
|         `-CXXTemporaryObjectExpr 0x556302f23c50 <col:14, col:24> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x556302f20570 <line:304:5, line:310:5> line:304:29 adjustment 'Timestamp ()' static inline
| `-CompoundStmt 0x556302f243a8 <col:42, line:310:5>
|   |-IfStmt 0x556302f241f0 <line:306:2, line:307:23>
|   | |-CallExpr 0x556302f24120 <line:306:6, col:30> 'bool'
|   | | `-ImplicitCastExpr 0x556302f24108 <col:6, col:17> 'bool (*)()' <FunctionToPointerDecay>
|   | |   `-DeclRefExpr 0x556302f240a8 <col:6, col:17> 'bool ()' lvalue CXXMethod 0x556302ea6f10 'warp_jumping' 'bool ()'
|   | `-ReturnStmt 0x556302f241e0 <line:307:6, col:23>
|   |   `-ExprWithCleanups 0x556302f241c8 <col:13, col:23> 'Timestamp'
|   |     `-CXXConstructExpr 0x556302f24198 <col:13, col:23> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x556302f24180 <col:13, col:23> 'Timestamp' xvalue
|   |         `-CXXTemporaryObjectExpr 0x556302f24150 <col:13, col:23> 'Timestamp' 'void ()'
|   `-ReturnStmt 0x556302f24398 <line:309:2, col:33>
|     `-ExprWithCleanups 0x556302f24380 <col:9, col:33> 'Timestamp'
|       `-CXXConstructExpr 0x556302f24350 <col:9, col:33> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x556302f24338 <col:9, col:33> 'Timestamp' xvalue
|           `-CallExpr 0x556302f242f8 <col:9, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x556302f242e0 <col:9, col:20> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x556302f242b0 <col:9, col:20> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x556302e8c140 'make_usec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x556302f24320 <col:30> 'Timestamp::value_type':'long' <IntegralCast>
|               `-IntegerLiteral 0x556302f24290 <col:30> 'int' 500
|-CXXMethodDecl 0x556302f206b0 <line:317:5, col:80> col:17 schedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x556302f20620 <col:34, col:43> col:43 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x556302f20758 <col:69> "" ""
|-CXXMethodDecl 0x556302f20868 <line:323:5, col:81> col:17 schedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x556302f207d8 <col:35, col:44> col:44 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x556302f20910 <col:70> "" ""
|-CXXMethodDecl 0x556302f20a20 <line:329:5, col:82> col:17 reschedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x556302f20990 <col:36, col:45> col:45 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x556302f20ac8 <col:71> "" ""
|-CXXMethodDecl 0x556302f20bd8 <line:335:5, col:83> col:17 reschedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x556302f20b48 <col:37, col:46> col:46 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x556302f20c80 <col:72> "" ""
|-EnumDecl 0x556302f20cf0 <line:337:5, col:27> col:5
| `-EnumConstantDecl 0x556302f20df0 <col:12, col:25> col:12 behind_sec 'Timer::(anonymous enum at ../dummy_inc/click/timer.hh:337:5)'
|   `-ImplicitCastExpr 0x556302f20e40 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556302f20dd0 <col:25> 'int' Int: 1
|       `-IntegerLiteral 0x556302f20db0 <col:25> 'int' 1
|-AccessSpecDecl 0x556302f20e58 <line:339:3, col:10> col:3 private
|-FieldDecl 0x556302f20e98 <line:341:5, col:9> col:9 referenced _schedpos1 'int'
|-FieldDecl 0x556302f20ef8 <line:342:5, col:15> col:15 referenced _expiry_s 'Timestamp'
|-CXXRecordDecl 0x556302f20f48 <line:343:5, line:345:5> line:343:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x556302f21078 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
| `-CXXDestructorDecl 0x556302f21b68 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-FieldDecl 0x556302f21138 <col:5, line:345:7> col:7 referenced _hook 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)'
|-FieldDecl 0x556302f211b8 <line:346:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x556302f21218 <line:347:5, col:14> col:14 referenced _owner 'Element *'
|-FieldDecl 0x556302f21278 <line:348:5, col:19> col:19 referenced _thread 'RouterThread *'
|-CXXMethodDecl 0x556302f213c8 <line:350:5, col:36> col:12 operator= 'Timer &(const Timer &)'
| `-ParmVarDecl 0x556302f212d8 <col:22, col:35> col:35 x 'const Timer &'
|-CXXMethodDecl 0x556302f21598 <line:352:5, col:58> col:17 used do_nothing_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x556302f21480 <col:33, col:40> col:40 t 'Timer *'
| `-ParmVarDecl 0x556302f21500 <col:43, col:49> col:49 user_data 'void *'
|-CXXMethodDecl 0x556302f21770 <line:353:5, col:55> col:17 used element_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x556302f21658 <col:30, col:37> col:37 t 'Timer *'
| `-ParmVarDecl 0x556302f216d8 <col:40, col:46> col:46 user_data 'void *'
|-CXXMethodDecl 0x556302f21948 <line:354:5, col:52> col:17 used task_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x556302f21830 <col:27, col:34> col:34 t 'Timer *'
| `-ParmVarDecl 0x556302f218b0 <col:37, col:43> col:43 user_data 'void *'
`-FriendDecl 0x556302f21b18 <line:356:5, col:18> col:12 'class TimerSet':'TimerSet'

Layout: <CGRecordLayout
  LLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  NonVirtualBaseLLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556302fd66f8 prev 0x556302fa7998 <../elements/ip/iprewriterbase.hh:81:1, line:182:1> line:81:7 referenced class IPRewriterBase definition
|-DefinitionData polymorphic abstract has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x556302fd6830 <col:1, col:7> col:7 implicit referenced class IPRewriterBase
|-AccessSpecDecl 0x556302fd68c0 <col:41, col:47> col:41 public
|-TypedefDecl 0x556302fd6a20 <line:83:5, col:44> col:44 referenced Map 'HashContainer<IPRewriterEntry>':'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
| `-TemplateSpecializationType 0x556302fd6980 'HashContainer<IPRewriterEntry>' sugar HashContainer
|   |-TemplateArgument type 'IPRewriterEntry'
|   `-RecordType 0x556302fa6510 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|     `-ClassTemplateSpecialization 0x556302fa6410 'HashContainer'
|-EnumDecl 0x556302fd6a78 <line:84:5, line:86:5> line:84:5
| |-EnumConstantDecl 0x556302fd6b98 <line:85:2, col:13> col:2 rw_drop 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:84:5)'
| | `-ConstantExpr 0x556302fd6b78 <col:12, col:13> 'int' Int: -1
| |   `-UnaryOperator 0x556302fd6b60 <col:12, col:13> 'int' prefix '-'
| |     `-IntegerLiteral 0x556302fd6b40 <col:13> 'int' 1
| `-EnumConstantDecl 0x556302fd6c40 <col:16, col:29> col:16 rw_addmap 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:84:5)'
|   `-ConstantExpr 0x556302fd6c20 <col:28, col:29> 'int' Int: -2
|     `-UnaryOperator 0x556302fd6c08 <col:28, col:29> 'int' prefix '-'
|       `-IntegerLiteral 0x556302fd6be8 <col:29> 'int' 2
|-CXXConstructorDecl 0x556302fd6cc8 <line:88:5, col:20> col:5 IPRewriterBase 'void ()'
|-CXXDestructorDecl 0x556302fd6db8 <line:89:5, col:21> col:5 ~IPRewriterBase 'void ()' noexcept-unevaluated 0x556302fd6db8
| `-Overrides: [ 0x556302efbc98 Element::~Element 'void ()' ]
|-EnumDecl 0x556302fd6ea0 <line:91:5, line:96:5> line:91:10 ConfigurePhase
| |-EnumConstantDecl 0x556302fd6fa0 <line:92:2, col:29> col:2 CONFIGURE_PHASE_PATTERNS 'IPRewriterBase::ConfigurePhase'
| | `-ImplicitCastExpr 0x556302fd7250 <col:29> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302fd6f80 <col:29> 'Element::ConfigurePhase' Int: 20
| |     `-DeclRefExpr 0x556302fd6f60 <col:29> 'Element::ConfigurePhase' EnumConstant 0x556302efe2e0 'CONFIGURE_PHASE_INFO' 'Element::ConfigurePhase'
| |-EnumConstantDecl 0x556302fd7030 <line:93:2, col:29> col:2 referenced CONFIGURE_PHASE_REWRITER 'IPRewriterBase::ConfigurePhase'
| | `-ImplicitCastExpr 0x556302fd7268 <col:29> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302fd7010 <col:29> 'Element::ConfigurePhase' Int: 100
| |     `-DeclRefExpr 0x556302fd6ff0 <col:29> 'Element::ConfigurePhase' EnumConstant 0x556302efe400 'CONFIGURE_PHASE_DEFAULT' 'Element::ConfigurePhase'
| |-EnumConstantDecl 0x556302fd7118 <line:94:2, col:54> col:2 CONFIGURE_PHASE_MAPPER 'IPRewriterBase::ConfigurePhase'
| | `-ImplicitCastExpr 0x556302fd7280 <col:27, col:54> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302fd70f8 <col:27, col:54> 'int' Int: 99
| |     `-BinaryOperator 0x556302fd70d8 <col:27, col:54> 'int' '-'
| |       |-ImplicitCastExpr 0x556302fd70c0 <col:27> 'int' <IntegralCast>
| |       | `-DeclRefExpr 0x556302fd7080 <col:27> 'Element::ConfigurePhase' EnumConstant 0x556302fd7030 'CONFIGURE_PHASE_REWRITER' 'IPRewriterBase::ConfigurePhase'
| |       `-IntegerLiteral 0x556302fd70a0 <col:54> 'int' 1
| `-EnumConstantDecl 0x556302fd7200 <line:95:2, col:52> col:2 CONFIGURE_PHASE_USER 'IPRewriterBase::ConfigurePhase'
|   `-ImplicitCastExpr 0x556302fd7298 <col:25, col:52> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556302fd71e0 <col:25, col:52> 'int' Int: 101
|       `-BinaryOperator 0x556302fd71c0 <col:25, col:52> 'int' '+'
|         |-ImplicitCastExpr 0x556302fd71a8 <col:25> 'int' <IntegralCast>
|         | `-DeclRefExpr 0x556302fd7168 <col:25> 'Element::ConfigurePhase' EnumConstant 0x556302fd7030 'CONFIGURE_PHASE_REWRITER' 'IPRewriterBase::ConfigurePhase'
|         `-IntegerLiteral 0x556302fd7188 <col:52> 'int' 1
|-CXXMethodDecl 0x556302fd7300 <line:98:5, col:54> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x556302efd1c0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x556302fefbc0 <col:36, col:54>
|   `-ReturnStmt 0x556302fefbb0 <col:38, col:45>
|     `-ImplicitCastExpr 0x556302fefb98 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x556302fefb78 <col:45> 'const char [6]' lvalue "1-/1-"
|-CXXMethodDecl 0x556302fd73c8 <line:99:5, col:51> col:17 processing 'const char *() const'
| |-Overrides: [ 0x556302efd5c8 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x556302fefc20 <col:36, col:51>
|   `-ReturnStmt 0x556302fefc10 <col:38, col:45>
|     `-ImplicitCastExpr 0x556302fefbf8 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x556302fefbd8 <col:45> 'const char []' lvalue Var 0x556302efd710 'PUSH' 'const char []'
|-CXXMethodDecl 0x556302fd7490 <line:101:5, col:68> col:9 configure_phase 'int () const'
| |-Overrides: [ 0x556302efe580 Element::configure_phase 'int () const' ]
| `-CompoundStmt 0x556302fefc80 <col:33, col:68>
|   `-ReturnStmt 0x556302fefc70 <col:35, col:42>
|     `-ImplicitCastExpr 0x556302fefc58 <col:42> 'int' <IntegralCast>
|       `-DeclRefExpr 0x556302fefc38 <col:42> 'IPRewriterBase::ConfigurePhase' EnumConstant 0x556302fd7030 'CONFIGURE_PHASE_REWRITER' 'IPRewriterBase::ConfigurePhase'
|-CXXMethodDecl 0x556302fd7760 <line:102:5, col:59> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x556302efe9c0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x556302fd7610 <col:19, col:35> col:35 conf 'Vector<String> &'
| `-ParmVarDecl 0x556302fd7688 <col:41, col:55> col:55 errh 'ErrorHandler *'
|-CXXMethodDecl 0x556302fd78b8 <line:103:5, col:38> col:9 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x556302efec10 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x556302fd7820 <col:20, col:34> col:34 errh 'ErrorHandler *'
|-CXXMethodDecl 0x556302fd7a00 <line:104:5, col:54> col:10 add_rewriter_handlers 'void (bool)'
| `-ParmVarDecl 0x556302fd7970 <col:32, col:37> col:37 writable_patterns 'bool'
|-CXXMethodDecl 0x556302fd7b48 <line:105:5, col:30> col:10 cleanup 'void (Element::CleanupStage)'
| |-Overrides: [ 0x556302eff428 Element::cleanup 'void (Element::CleanupStage)' ]
| `-ParmVarDecl 0x556302fd7ab8 <col:18> col:30 'Element::CleanupStage'
|-CXXMethodDecl 0x556302fd7c38 <line:107:5, line:109:5> line:107:27 flow_heap 'const IPRewriterHeap *() const'
| `-CompoundStmt 0x556302fefd18 <col:45, line:109:5>
|   `-ReturnStmt 0x556302fefd08 <line:108:2, col:9>
|     `-ImplicitCastExpr 0x556302fefcf0 <col:9> 'const IPRewriterHeap *' <NoOp>
|       `-ImplicitCastExpr 0x556302fefcd8 <col:9> 'IPRewriterHeap *' <LValueToRValue>
|         `-MemberExpr 0x556302fefca8 <col:9> 'IPRewriterHeap *const' lvalue ->_heap 0x556302fecee0
|           `-CXXThisExpr 0x556302fefc98 <col:9> 'const IPRewriterBase *' implicit this
|-CXXMethodDecl 0x556302fd7db8 <line:110:5, line:112:5> line:110:21 reply_element 'IPRewriterBase *(int) const'
| |-ParmVarDecl 0x556302fd7cf0 <col:35, col:39> col:39 used input 'int'
| `-CompoundStmt 0x556302fefef0 <col:52, line:112:5>
|   `-ReturnStmt 0x556302fefee0 <line:111:2, col:29>
|     `-ImplicitCastExpr 0x556302fefec8 <col:9, col:29> 'IPRewriterBase *' <LValueToRValue>
|       `-MemberExpr 0x556302fefe98 <col:9, col:29> 'IPRewriterBase *const' lvalue .reply_element 0x556302fc2ec0
|         `-CXXOperatorCallExpr 0x556302fefe60 <col:9, col:27> 'const IPRewriterInput':'const IPRewriterInput' lvalue
|           |-ImplicitCastExpr 0x556302fefe48 <col:21, col:27> 'const IPRewriterInput &(*)(Vector::size_type) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x556302fefdd0 <col:21, col:27> 'const IPRewriterInput &(Vector::size_type) const' lvalue CXXMethod 0x556302fea7e8 'operator[]' 'const IPRewriterInput &(Vector::size_type) const'
|           |-MemberExpr 0x556302fefd40 <col:9> 'const Vector<IPRewriterInput>':'const Vector<IPRewriterInput>' lvalue ->_input_specs 0x556302fece80
|           | `-CXXThisExpr 0x556302fefd30 <col:9> 'const IPRewriterBase *' implicit this
|           `-ImplicitCastExpr 0x556302fefdb8 <col:22> 'int' <LValueToRValue>
|             `-DeclRefExpr 0x556302fefd70 <col:22> 'int' lvalue ParmVar 0x556302fd7cf0 'input' 'int'
|-CXXMethodDecl 0x556302fd80f0 <line:113:5, line:115:5> line:113:45 get_map 'HashContainer<IPRewriterEntry> *(int)' virtual
| |-ParmVarDecl 0x556302fd7f78 <col:53, col:57> col:57 used mapid 'int'
| `-CompoundStmt 0x556302ff0260 <col:64, line:115:5>
|   `-ReturnStmt 0x556302ff0250 <line:114:2, col:84>
|     `-ConditionalOperator 0x556302ff0220 <col:9, col:84> 'IPRewriterBase::Map *'
|       |-ImplicitCastExpr 0x556302ff01f0 <col:9, col:72> 'bool' <IntegralToBoolean>
|       | `-CallExpr 0x556302ff0118 <col:9, col:72> 'long'
|       |   |-ImplicitCastExpr 0x556302ff0100 <col:9> 'long (*)(long, long) noexcept' <BuiltinFnToFnPtr>
|       |   | `-DeclRefExpr 0x556302feff08 <col:9> '<builtin fn type>' Function 0x556302cbcb18 '__builtin_expect' 'long (long, long) noexcept'
|       |   |-ImplicitCastExpr 0x556302ff0148 <col:26, col:68> 'long' <IntegralCast>
|       |   | `-UnaryOperator 0x556302ff00c8 <col:26, col:68> 'bool' prefix '!' cannot overflow
|       |   |   `-UnaryOperator 0x556302ff00b0 <col:27, col:68> 'bool' prefix '!' cannot overflow
|       |   |     `-ParenExpr 0x556302ff0090 <col:28, col:68> 'bool'
|       |   |       `-BinaryOperator 0x556302ff0070 <col:29, col:55> 'bool' '=='
|       |   |         |-ImplicitCastExpr 0x556302ff0040 <col:29> 'int' <LValueToRValue>
|       |   |         | `-DeclRefExpr 0x556302feff28 <col:29> 'int' lvalue ParmVar 0x556302fd7f78 'mapid' 'int'
|       |   |         `-ImplicitCastExpr 0x556302ff0058 <col:38, col:55> 'int' <IntegralCast>
|       |   |           `-DeclRefExpr 0x556302feff80 <col:38, col:55> 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:33:5)' EnumConstant 0x556302fc3500 'mapid_default' 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:33:5)'
|       |   `-ImplicitCastExpr 0x556302ff0160 <col:71> 'long' <IntegralCast>
|       |     `-IntegerLiteral 0x556302ff00e0 <col:71> 'int' 1
|       |-UnaryOperator 0x556302ff01b8 <col:76, col:77> 'IPRewriterBase::Map *' prefix '&' cannot overflow
|       | `-MemberExpr 0x556302ff0188 <col:77> 'IPRewriterBase::Map':'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' lvalue ->_map 0x556302fe0698
|       |   `-CXXThisExpr 0x556302ff0178 <col:77> 'IPRewriterBase *' implicit this
|       `-ImplicitCastExpr 0x556302ff0208 <col:84> 'IPRewriterBase::Map *' <NullToPointer>
|         `-IntegerLiteral 0x556302ff01d0 <col:84> 'int' 0
|-EnumDecl 0x556302fd8198 <line:117:5, line:119:5> line:117:5
| |-EnumConstantDecl 0x556302fd82b8 <line:118:2, col:21> col:2 get_entry_check 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:117:5)'
| | `-ConstantExpr 0x556302fd8298 <col:20, col:21> 'int' Int: -1
| |   `-UnaryOperator 0x556302fd8280 <col:20, col:21> 'int' prefix '-'
| |     `-IntegerLiteral 0x556302fd8260 <col:21> 'int' 1
| `-EnumConstantDecl 0x556302fd8360 <col:24, col:43> col:24 get_entry_reply 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:117:5)'
|   `-ConstantExpr 0x556302fd8340 <col:42, col:43> 'int' Int: -2
|     `-UnaryOperator 0x556302fd8328 <col:42, col:43> 'int' prefix '-'
|       `-IntegerLiteral 0x556302fd8308 <col:43> 'int' 2
|-CXXMethodDecl 0x556302fd85a8 <line:120:5, line:121:21> line:120:30 get_entry 'IPRewriterEntry *(int, const IPFlowID &, int)' virtual
| |-ParmVarDecl 0x556302fd83c8 <col:40, col:44> col:44 ip_p 'int'
| |-ParmVarDecl 0x556302fd8440 <col:50, col:66> col:66 flowid 'const IPFlowID &'
| `-ParmVarDecl 0x556302fd84c0 <line:121:12, col:16> col:16 input 'int'
|-CXXMethodDecl 0x556302fd88d8 <line:122:5, line:124:24> line:122:30 add_flow 'IPRewriterEntry *(int, const IPFlowID &, const IPFlowID &, int)' virtual pure
| |-ParmVarDecl 0x556302fd8678 <col:39, col:43> col:43 ip_p 'int'
| |-ParmVarDecl 0x556302fd86f0 <col:49, col:65> col:65 flowid 'const IPFlowID &'
| |-ParmVarDecl 0x556302fd8768 <line:123:11, col:27> col:27 rewritten_flowid 'const IPFlowID &'
| `-ParmVarDecl 0x556302fd87e8 <line:124:11, col:15> col:15 input 'int'
|-CXXMethodDecl 0x556302fd8a38 <line:125:5, col:55> col:18 destroy_flow 'void (IPRewriterFlow *)' virtual pure
| `-ParmVarDecl 0x556302fd89a8 <col:31, col:47> col:47 flow 'IPRewriterFlow *'
|-CXXMethodDecl 0x556302fd8be8 <line:126:5, line:128:5> line:126:29 best_effort_expiry 'click_jiffies_t (const IPRewriterFlow *)' virtual
| |-ParmVarDecl 0x556302fd8af0 <col:48, col:70> col:70 used flow 'const IPRewriterFlow *'
| `-CompoundStmt 0x556302ff04b0 <col:76, line:128:5>
|   `-ReturnStmt 0x556302ff04a0 <line:127:2, col:52>
|     `-BinaryOperator 0x556302ff0480 <col:9, col:52> 'unsigned int' '-'
|       |-BinaryOperator 0x556302ff03b0 <col:9, col:37> 'unsigned int' '+'
|       | |-CXXMemberCallExpr 0x556302ff02e0 <col:9, col:22> 'click_jiffies_t':'unsigned int'
|       | | `-MemberExpr 0x556302ff02b0 <col:9, col:15> '<bound member function type>' ->expiry 0x556302faaed0
|       | |   `-ImplicitCastExpr 0x556302ff0298 <col:9> 'const IPRewriterFlow *' <LValueToRValue>
|       | |     `-DeclRefExpr 0x556302ff0278 <col:9> 'const IPRewriterFlow *' lvalue ParmVar 0x556302fd8af0 'flow' 'const IPRewriterFlow *'
|       | `-ImplicitCastExpr 0x556302ff0398 <col:26, col:37> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   `-ArraySubscriptExpr 0x556302ff0378 <col:26, col:37> 'uint32_t':'unsigned int' lvalue
|       |     |-ImplicitCastExpr 0x556302ff0360 <col:26> 'uint32_t *' <ArrayToPointerDecay>
|       |     | `-MemberExpr 0x556302ff0310 <col:26> 'uint32_t [2]' lvalue ->_timeouts 0x556302fecfc8
|       |     |   `-CXXThisExpr 0x556302ff0300 <col:26> 'IPRewriterBase *' implicit this
|       |     `-IntegerLiteral 0x556302ff0340 <col:36> 'int' 0
|       `-ImplicitCastExpr 0x556302ff0468 <col:41, col:52> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-ArraySubscriptExpr 0x556302ff0448 <col:41, col:52> 'uint32_t':'unsigned int' lvalue
|           |-ImplicitCastExpr 0x556302ff0430 <col:41> 'uint32_t *' <ArrayToPointerDecay>
|           | `-MemberExpr 0x556302ff03e0 <col:41> 'uint32_t [2]' lvalue ->_timeouts 0x556302fecfc8
|           |   `-CXXThisExpr 0x556302ff03d0 <col:41> 'IPRewriterBase *' implicit this
|           `-IntegerLiteral 0x556302ff0410 <col:51> 'int' 1
|-CXXMethodDecl 0x556302fd8dc8 <line:130:5, col:43> col:9 llrpc 'int (unsigned int, void *)'
| |-Overrides: [ 0x556302f08770 Element::llrpc 'int (unsigned int, void *)' ]
| |-ParmVarDecl 0x556302fd8ca8 <col:15, col:24> col:24 command 'unsigned int'
| `-ParmVarDecl 0x556302fd8d28 <col:33, col:39> col:39 data 'void *'
|-AccessSpecDecl 0x556302fd8e78 <line:132:3, col:12> col:3 protected
|-FieldDecl 0x556302fe0698 <line:134:5, col:9> col:9 referenced _map 'IPRewriterBase::Map':'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|-FieldDecl 0x556302fece80 <line:136:5, col:29> col:29 referenced _input_specs 'Vector<IPRewriterInput>':'Vector<IPRewriterInput>'
|-FieldDecl 0x556302fecee0 <line:138:5, col:21> col:21 referenced _heap 'IPRewriterHeap *'
|-FieldDecl 0x556302fecfc8 <line:139:5, col:25> col:14 referenced _timeouts 'uint32_t [2]'
|-FieldDecl 0x556302fed028 <line:140:5, col:14> col:14 _gc_interval_sec 'uint32_t':'unsigned int'
|-FieldDecl 0x556302fed088 <line:141:5, col:11> col:11 _gc_timer 'Timer'
|-EnumDecl 0x556302fed0d8 <line:143:5, line:147:5> line:143:5
| |-EnumConstantDecl 0x556302fed1e0 <line:144:2, col:20> col:2 default_timeout 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:143:5)'
| | `-ImplicitCastExpr 0x556302fed390 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302fed1c0 <col:20> 'int' Int: 300
| |     `-IntegerLiteral 0x556302fed1a0 <col:20> 'int' 300
| |-EnumConstantDecl 0x556302fed270 <line:145:2, col:22> col:2 default_guarantee 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:143:5)'
| | `-ImplicitCastExpr 0x556302fed3a8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302fed250 <col:22> 'int' Int: 5
| |     `-IntegerLiteral 0x556302fed230 <col:22> 'int' 5
| `-EnumConstantDecl 0x556302fed340 <line:146:2, col:29> col:2 default_gc_interval 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:143:5)'
|   `-ImplicitCastExpr 0x556302fed3c0 <col:24, col:29> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556302fed320 <col:24, col:29> 'int' Int: 900
|       `-BinaryOperator 0x556302fed300 <col:24, col:29> 'int' '*'
|         |-IntegerLiteral 0x556302fed2c0 <col:24> 'int' 60
|         `-IntegerLiteral 0x556302fed2e0 <col:29> 'int' 15
|-CXXMethodDecl 0x556302fed528 <line:149:5, line:151:5> line:149:21 relevant_timeout 'uint32_t (const uint32_t *)' static
| |-ParmVarDecl 0x556302fed438 <col:38, col:63> col:53 used timeouts 'const uint32_t *':'const uint32_t *'
| `-CompoundStmt 0x556302ff06b8 <col:66, line:151:5>
|   `-ReturnStmt 0x556302ff06a8 <line:150:2, col:47>
|     `-ImplicitCastExpr 0x556302ff0690 <col:9, col:47> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-ConditionalOperator 0x556302ff0660 <col:9, col:47> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x556302ff0648 <col:9, col:19> 'bool' <IntegralToBoolean>
|         | `-ImplicitCastExpr 0x556302ff0630 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x556302ff0520 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|         |     |-ImplicitCastExpr 0x556302ff0508 <col:9> 'const uint32_t *':'const uint32_t *' <LValueToRValue>
|         |     | `-DeclRefExpr 0x556302ff04c8 <col:9> 'const uint32_t *':'const uint32_t *' lvalue ParmVar 0x556302fed438 'timeouts' 'const uint32_t *':'const uint32_t *'
|         |     `-IntegerLiteral 0x556302ff04e8 <col:18> 'int' 1
|         |-ArraySubscriptExpr 0x556302ff0598 <col:23, col:33> 'const uint32_t':'const unsigned int' lvalue
|         | |-ImplicitCastExpr 0x556302ff0580 <col:23> 'const uint32_t *':'const uint32_t *' <LValueToRValue>
|         | | `-DeclRefExpr 0x556302ff0540 <col:23> 'const uint32_t *':'const uint32_t *' lvalue ParmVar 0x556302fed438 'timeouts' 'const uint32_t *':'const uint32_t *'
|         | `-IntegerLiteral 0x556302ff0560 <col:32> 'int' 1
|         `-ArraySubscriptExpr 0x556302ff0610 <col:37, col:47> 'const uint32_t':'const unsigned int' lvalue
|           |-ImplicitCastExpr 0x556302ff05f8 <col:37> 'const uint32_t *':'const uint32_t *' <LValueToRValue>
|           | `-DeclRefExpr 0x556302ff05b8 <col:37> 'const uint32_t *':'const uint32_t *' lvalue ParmVar 0x556302fed438 'timeouts' 'const uint32_t *':'const uint32_t *'
|           `-IntegerLiteral 0x556302ff05d8 <col:46> 'int' 0
|-CXXMethodDecl 0x556302fed8e8 <line:153:5, line:154:37> line:153:22 store_flow 'IPRewriterEntry *(IPRewriterFlow *, int, IPRewriterBase::Map &, IPRewriterBase::Map *)'
| |-ParmVarDecl 0x556302fed5e0 <col:33, col:49> col:49 flow 'IPRewriterFlow *'
| |-ParmVarDecl 0x556302fed660 <col:55, col:59> col:59 input 'int'
| |-ParmVarDecl 0x556302fed708 <line:154:5, col:10> col:10 map 'IPRewriterBase::Map &'
| `-ParmVarDecl 0x556302fed7a8 <col:15, col:36> col:20 reply_map_ptr 'IPRewriterBase::Map *' cinit
|   `-ImplicitCastExpr 0x556302fefb28 <col:36> 'IPRewriterBase::Map *' <NullToPointer>
|     `-IntegerLiteral 0x556302fefb08 <col:36> 'int' 0
|-CXXMethodDecl 0x556302fedbc8 <line:155:5, line:156:39> line:155:17 used unmap_flow 'void (IPRewriterFlow *, IPRewriterBase::Map &, IPRewriterBase::Map *)' inline
| |-ParmVarDecl 0x556302fed9b8 <col:28, col:44> col:44 flow 'IPRewriterFlow *'
| |-ParmVarDecl 0x556302feda30 <line:156:7, col:12> col:12 map 'IPRewriterBase::Map &'
| `-ParmVarDecl 0x556302fedaa8 <col:17, col:38> col:22 reply_map_ptr 'IPRewriterBase::Map *' cinit
|   `-ImplicitCastExpr 0x556302fefb60 <col:38> 'IPRewriterBase::Map *' <NullToPointer>
|     `-IntegerLiteral 0x556302fefb40 <col:38> 'int' 0
|-CXXMethodDecl 0x556302fedda8 <line:158:5, col:56> col:17 gc_timer_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x556302fedc90 <col:31, col:38> col:38 t 'Timer *'
| `-ParmVarDecl 0x556302fedd10 <col:41, col:47> col:47 user_data 'void *'
|-CXXMethodDecl 0x556302fee0d0 <line:160:5, line:161:41> line:160:9 parse_input_spec 'int (const String &, IPRewriterInput &, int, ErrorHandler *)'
| |-ParmVarDecl 0x556302fede68 <col:26, col:40> col:40 str 'const String &'
| |-ParmVarDecl 0x556302fedee0 <col:45, col:62> col:62 is 'IPRewriterInput &'
| |-ParmVarDecl 0x556302fedf60 <line:161:5, col:9> col:9 input_number 'int'
| `-ParmVarDecl 0x556302fedfd8 <col:23, col:37> col:37 errh 'ErrorHandler *'
|-EnumDecl 0x556302fee190 <line:163:5, line:166:5> line:163:5
| |-EnumConstantDecl 0x556302fee2a8 <line:164:2, col:17> col:2 h_nmappings 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:163:5)'
| | `-ConstantExpr 0x556302fee288 <col:16, col:17> 'int' Int: -1
| |   `-UnaryOperator 0x556302fee270 <col:16, col:17> 'int' prefix '-'
| |     `-IntegerLiteral 0x556302fee250 <col:17> 'int' 1
| |-EnumConstantDecl 0x556302fee350 <col:20, col:42> col:20 h_mapping_failures 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:163:5)'
| | `-ConstantExpr 0x556302fee330 <col:41, col:42> 'int' Int: -2
| |   `-UnaryOperator 0x556302fee318 <col:41, col:42> 'int' prefix '-'
| |     `-IntegerLiteral 0x556302fee2f8 <col:42> 'int' 2
| |-EnumConstantDecl 0x556302fee3f8 <col:45, col:59> col:45 h_patterns 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:163:5)'
| | `-ConstantExpr 0x556302fee3d8 <col:58, col:59> 'int' Int: -3
| |   `-UnaryOperator 0x556302fee3c0 <col:58, col:59> 'int' prefix '-'
| |     `-IntegerLiteral 0x556302fee3a0 <col:59> 'int' 3
| |-EnumConstantDecl 0x556302fee4a0 <line:165:2, col:12> col:2 h_size 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:163:5)'
| | `-ConstantExpr 0x556302fee480 <col:11, col:12> 'int' Int: -4
| |   `-UnaryOperator 0x556302fee468 <col:11, col:12> 'int' prefix '-'
| |     `-IntegerLiteral 0x556302fee448 <col:12> 'int' 4
| |-EnumConstantDecl 0x556302fee548 <col:15, col:29> col:15 h_capacity 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:163:5)'
| | `-ConstantExpr 0x556302fee528 <col:28, col:29> 'int' Int: -5
| |   `-UnaryOperator 0x556302fee510 <col:28, col:29> 'int' prefix '-'
| |     `-IntegerLiteral 0x556302fee4f0 <col:29> 'int' 5
| `-EnumConstantDecl 0x556302fee5f0 <col:32, col:43> col:32 h_clear 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:163:5)'
|   `-ConstantExpr 0x556302fee5d0 <col:42, col:43> 'int' Int: -6
|     `-UnaryOperator 0x556302fee5b8 <col:42, col:43> 'int' prefix '-'
|       `-IntegerLiteral 0x556302fee598 <col:43> 'int' 6
|-CXXMethodDecl 0x556302fee768 <line:167:5, col:59> col:19 read_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x556302fee650 <col:32, col:41> col:41 e 'Element *'
| `-ParmVarDecl 0x556302fee6d0 <col:44, col:50> col:50 user_data 'void *'
|-CXXMethodDecl 0x556302feea48 <line:168:5, col:96> col:16 write_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x556302fee828 <col:30, col:44> col:44 str 'const String &'
| |-ParmVarDecl 0x556302fee8a0 <col:49, col:58> col:58 e 'Element *'
| |-ParmVarDecl 0x556302fee920 <col:61, col:67> col:67 user_data 'void *'
| `-ParmVarDecl 0x556302fee998 <col:78, col:92> col:92 errh 'ErrorHandler *'
|-CXXMethodDecl 0x556302feed38 <line:169:5, col:104> col:16 pattern_write_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x556302feeb18 <col:38, col:52> col:52 str 'const String &'
| |-ParmVarDecl 0x556302feeb90 <col:57, col:66> col:66 e 'Element *'
| |-ParmVarDecl 0x556302feec10 <col:69, col:75> col:75 user_data 'void *'
| `-ParmVarDecl 0x556302feec88 <col:86, col:100> col:100 errh 'ErrorHandler *'
|-FriendDecl 0x556302fef1d8 <line:171:5, line:172:52> line:171:33
| `-CXXMethodDecl 0x556302fef048 parent 0x556302fc28f0 prev 0x556302fc3890 <col:5, line:172:52> line:171:33 rewrite_flowid 'int (const IPFlowID &, IPFlowID &, Packet *, int)'
|   |-ParmVarDecl 0x556302feee28 <col:48, col:64> col:64 flowid 'const IPFlowID &'
|   |-ParmVarDecl 0x556302feeea0 <line:172:4, col:14> col:14 rewritten_flowid 'IPFlowID &'
|   |-ParmVarDecl 0x556302feef18 <col:32, col:40> col:40 p 'Packet *'
|   |-ParmVarDecl 0x556302feef98 <col:43, col:47> col:47 mapid 'int' cinit
|   | `-ImplicitCastExpr 0x556302fc3a08 <line:39:33> 'int' <IntegralCast>
|   |   `-DeclRefExpr 0x556302fc39e8 <col:33> 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:33:5)' EnumConstant 0x556302fc3500 'mapid_default' 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:33:5)'
|   |-NoInlineAttr 0x556302fef188 <line:37:20> Inherited
|   `-OptimizeNoneAttr 0x556302fef1b0 <col:30> Inherited
|-AccessSpecDecl 0x556302fef218 <line:174:3, col:10> col:3 private
|-CXXMethodDecl 0x556302fef318 <line:176:5, col:54> col:10 shift_heap_best_effort 'void (click_jiffies_t)'
| `-ParmVarDecl 0x556302fef250 <col:33, col:49> col:49 now_j 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x556302fef558 <line:177:5, col:78> col:10 shrink_heap_for_new_flow 'bool (IPRewriterFlow *, click_jiffies_t)'
| |-ParmVarDecl 0x556302fef3d0 <col:35, col:51> col:51 flow 'IPRewriterFlow *'
| `-ParmVarDecl 0x556302fef448 <col:57, col:73> col:73 now_j 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x556302fef6a8 <line:178:5, col:36> col:10 shrink_heap 'void (bool)'
| `-ParmVarDecl 0x556302fef618 <col:22, col:27> col:27 clear_all 'bool'
|-FriendDecl 0x556302fef770 <line:180:5, col:18> col:12 'class IPRewriterFlow':'IPRewriterFlow'
|-CXXConstructorDecl 0x556302fef7d8 <line:81:7> col:7 implicit IPRewriterBase 'void (const IPRewriterBase &)' inline default_delete noexcept-unevaluated 0x556302fef7d8
| `-ParmVarDecl 0x556302fef8e8 <col:7> col:7 'const IPRewriterBase &'
`-CXXMethodDecl 0x556302fef988 <col:7> col:7 implicit operator= 'IPRewriterBase &(const IPRewriterBase &)' inline default_delete noexcept-unevaluated 0x556302fef988
  `-ParmVarDecl 0x556302fefa98 <col:7> col:7 'const IPRewriterBase &'

Layout: <CGRecordLayout
  LLVMType:%class.IPRewriterBase = type { %class.Element.base, %class.HashContainer, %class.Vector, %class.IPRewriterHeap*, [2 x i32], i32, %class.Timer }
  NonVirtualBaseLLVMType:%class.IPRewriterBase = type { %class.Element.base, %class.HashContainer, %class.Vector, %class.IPRewriterHeap*, [2 x i32], i32, %class.Timer }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPRewriterPattern
         0 |   class IPAddress _saddr
         0 |     uint32_t _addr
         4 |   int _sport
         8 |   class IPAddress _daddr
         8 |     uint32_t _addr
        12 |   int _dport
        16 |   uint32_t _variation_top
        20 |   uint32_t _next_variation
        24 |   _Bool _is_napt
        25 |   _Bool _sequential
        26 |   _Bool _same_first
        28 |   int _refcount
           | [sizeof=32, dsize=32, align=4,
           |  nvsize=32, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556302fa4480 <../elements/ip/iprwpattern.hh:12:1, line:68:1> line:12:7 class IPRewriterPattern definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x556302fa4598 <col:1, col:7> col:7 implicit referenced class IPRewriterPattern
|-AccessSpecDecl 0x556302fa4628 <col:27, col:33> col:27 public
|-CXXConstructorDecl 0x556302fa4b98 <line:14:5, line:17:27> line:14:5 IPRewriterPattern 'void (const IPAddress &, int, const IPAddress &, int, bool, bool, bool, uint32_t)'
| |-ParmVarDecl 0x556302fa4660 <col:23, col:40> col:40 saddr 'const IPAddress &'
| |-ParmVarDecl 0x556302fa46e0 <col:47, col:51> col:51 sport 'int'
| |-ParmVarDecl 0x556302fa4758 <line:15:9, col:26> col:26 daddr 'const IPAddress &'
| |-ParmVarDecl 0x556302fa47d8 <col:33, col:37> col:37 dport 'int'
| |-ParmVarDecl 0x556302fa4850 <line:16:9, col:14> col:14 is_napt 'bool'
| |-ParmVarDecl 0x556302fa48c8 <col:23, col:28> col:28 sequential 'bool'
| |-ParmVarDecl 0x556302fa4940 <col:40, col:45> col:45 same_first 'bool'
| `-ParmVarDecl 0x556302fa49b8 <line:17:9, col:18> col:18 variation 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556302fa5078 <line:18:5, line:19:45> line:18:17 parse 'bool (const Vector<String> &, IPRewriterPattern **, Element *, ErrorHandler *)' static
| |-ParmVarDecl 0x556302fa4d90 <col:23, col:45> col:45 words 'const Vector<String> &'
| |-ParmVarDecl 0x556302fa4e40 <col:52, col:72> col:72 result 'IPRewriterPattern **'
| |-ParmVarDecl 0x556302fa4eb8 <line:19:9, col:18> col:18 context 'Element *'
| `-ParmVarDecl 0x556302fa4f30 <col:27, col:41> col:41 errh 'ErrorHandler *'
|-CXXMethodDecl 0x556302fa59f8 <line:20:5, line:21:42> line:20:17 parse_ports 'bool (const Vector<String> &, IPRewriterInput *, Element *, ErrorHandler *)' static
| |-ParmVarDecl 0x556302fa5220 <col:29, col:51> col:51 words 'const Vector<String> &'
| |-ParmVarDecl 0x556302fa52c8 <col:58, col:75> col:75 input 'IPRewriterInput *'
| |-ParmVarDecl 0x556302fa5340 <line:21:8, col:17> col:17 model 'Element *'
| `-ParmVarDecl 0x556302fa58b0 <col:24, col:38> col:38 errh 'ErrorHandler *'
|-CXXMethodDecl 0x556302fa5d28 <line:22:5, line:23:42> line:22:17 parse_with_ports 'bool (const String &, IPRewriterInput *, Element *, ErrorHandler *)' static
| |-ParmVarDecl 0x556302fa5ac8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x556302fa5b40 <col:53, col:70> col:70 input 'IPRewriterInput *'
| |-ParmVarDecl 0x556302fa5bb8 <line:23:6, col:15> col:15 context 'Element *'
| `-ParmVarDecl 0x556302fa5c30 <col:24, col:38> col:38 errh 'ErrorHandler *'
|-CXXMethodDecl 0x556302fa5e08 <line:25:5, line:27:5> line:25:10 use 'void ()'
| `-CompoundStmt 0x556302fa7160 <col:16, line:27:5>
|   `-UnaryOperator 0x556302fa7148 <line:26:2, col:11> 'int' postfix '++'
|     `-MemberExpr 0x556302fa7118 <col:2> 'int' lvalue ->_refcount 0x556302fa6d48
|       `-CXXThisExpr 0x556302fa7108 <col:2> 'IPRewriterPattern *' implicit this
|-CXXMethodDecl 0x556302fa5ec8 <line:28:5, line:31:5> line:28:10 unuse 'void ()'
| `-CompoundStmt 0x556302fa7358 <col:18, line:31:5>
|   `-IfStmt 0x556302fa7340 <line:29:2, line:30:13>
|     |-BinaryOperator 0x556302fa7208 <line:29:6, col:21> 'bool' '<='
|     | |-ImplicitCastExpr 0x556302fa71f0 <col:6, col:8> 'int' <LValueToRValue>
|     | | `-UnaryOperator 0x556302fa71b8 <col:6, col:8> 'int' lvalue prefix '--'
|     | |   `-MemberExpr 0x556302fa7188 <col:8> 'int' lvalue ->_refcount 0x556302fa6d48
|     | |     `-CXXThisExpr 0x556302fa7178 <col:8> 'IPRewriterPattern *' implicit this
|     | `-IntegerLiteral 0x556302fa71d0 <col:21> 'int' 0
|     `-CXXDeleteExpr 0x556302fa7320 <line:30:6, col:13> 'void' Function 0x556302ae2958 'operator delete' 'void (void *) noexcept'
|       `-CXXThisExpr 0x556302fa7228 <col:13> 'IPRewriterPattern *' this
|-CXXConversionDecl 0x556302fa5fc8 <line:33:5, line:35:5> line:33:5 operator bool 'bool () const'
| `-CompoundStmt 0x556302fa7640 <col:27, line:35:5>
|   `-ReturnStmt 0x556302fa7630 <line:34:2, col:39>
|     `-BinaryOperator 0x556302fa7610 <col:9, col:39> 'bool' '||'
|       |-BinaryOperator 0x556302fa7580 <col:9, col:29> 'bool' '||'
|       | |-BinaryOperator 0x556302fa74a0 <col:9, col:19> 'bool' '||'
|       | | |-ImplicitCastExpr 0x556302fa7458 <col:9> 'bool' <IntegralToBoolean>
|       | | | `-ImplicitCastExpr 0x556302fa7440 <col:9> 'uint32_t':'unsigned int' <UserDefinedConversion>
|       | | |   `-CXXMemberCallExpr 0x556302fa7420 <col:9> 'uint32_t':'unsigned int'
|       | | |     `-MemberExpr 0x556302fa73f0 <col:9> '<bound member function type>' .operator unsigned int 0x556302cfe848
|       | | |       `-MemberExpr 0x556302fa7380 <col:9> 'const IPAddress' lvalue ->_saddr 0x556302fa69d0
|       | | |         `-CXXThisExpr 0x556302fa7370 <col:9> 'const IPRewriterPattern *' implicit this
|       | | `-ImplicitCastExpr 0x556302fa7488 <col:19> 'bool' <IntegralToBoolean>
|       | |   `-ImplicitCastExpr 0x556302fa7470 <col:19> 'int' <LValueToRValue>
|       | |     `-MemberExpr 0x556302fa73c0 <col:19> 'const int' lvalue ->_sport 0x556302fa6a38
|       | |       `-CXXThisExpr 0x556302fa73b0 <col:19> 'const IPRewriterPattern *' implicit this
|       | `-ImplicitCastExpr 0x556302fa7568 <col:29> 'bool' <IntegralToBoolean>
|       |   `-ImplicitCastExpr 0x556302fa7550 <col:29> 'uint32_t':'unsigned int' <UserDefinedConversion>
|       |     `-CXXMemberCallExpr 0x556302fa7530 <col:29> 'uint32_t':'unsigned int'
|       |       `-MemberExpr 0x556302fa7500 <col:29> '<bound member function type>' .operator unsigned int 0x556302cfe848
|       |         `-MemberExpr 0x556302fa74d0 <col:29> 'const IPAddress' lvalue ->_daddr 0x556302fa6a98
|       |           `-CXXThisExpr 0x556302fa74c0 <col:29> 'const IPRewriterPattern *' implicit this
|       `-ImplicitCastExpr 0x556302fa75f8 <col:39> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x556302fa75e0 <col:39> 'int' <LValueToRValue>
|           `-MemberExpr 0x556302fa75b0 <col:39> 'const int' lvalue ->_dport 0x556302fa6b00
|             `-CXXThisExpr 0x556302fa75a0 <col:39> 'const IPRewriterPattern *' implicit this
|-CXXMethodDecl 0x556302fa6098 <line:36:5, line:38:5> line:36:15 daddr 'IPAddress () const'
| `-CompoundStmt 0x556302fa76d8 <col:29, line:38:5>
|   `-ReturnStmt 0x556302fa76c8 <line:37:2, col:9>
|     `-CXXConstructExpr 0x556302fa7698 <col:9> 'IPAddress' 'void (const IPAddress &) noexcept'
|       `-MemberExpr 0x556302fa7668 <col:9> 'const IPAddress' lvalue ->_daddr 0x556302fa6a98
|         `-CXXThisExpr 0x556302fa7658 <col:9> 'const IPRewriterPattern *' implicit this
|-CXXMethodDecl 0x556302fa6760 <line:40:5, line:41:57> line:40:9 rewrite_flowid 'int (const IPFlowID &, IPFlowID &, const HashContainer<IPRewriterEntry> &)'
| |-ParmVarDecl 0x556302fa6148 <col:24, col:40> col:40 flowid 'const IPFlowID &'
| |-ParmVarDecl 0x556302fa61e8 <col:48, col:58> col:58 rewritten_flowid 'IPFlowID &'
| `-ParmVarDecl 0x556302fa6630 <line:41:10, col:48> col:48 reply_map 'const HashContainer<IPRewriterEntry> &'
|-CXXMethodDecl 0x556302fa6838 <line:43:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x556302fa68f8 <line:45:5, line:47:5> line:45:21 get_flow_id 'IPFlowID () const' inline
| `-CompoundStmt 0x556302fa7980 <col:41, line:47:5>
|   `-ReturnStmt 0x556302fa7970 <line:46:9, col:55>
|     `-ExprWithCleanups 0x556302fa7958 <col:16, col:55> 'IPFlowID'
|       `-CXXConstructExpr 0x556302fa7928 <col:16, col:55> 'IPFlowID' 'void (IPFlowID &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x556302fa7910 <col:16, col:55> 'IPFlowID' xvalue
|           `-CXXTemporaryObjectExpr 0x556302fa78c0 <col:16, col:55> 'IPFlowID' 'void (IPAddress, uint16_t, IPAddress, uint16_t)'
|             |-CXXConstructExpr 0x556302fa7800 <col:25> 'IPAddress' 'void (const IPAddress &) noexcept'
|             | `-MemberExpr 0x556302fa7710 <col:25> 'const IPAddress' lvalue ->_saddr 0x556302fa69d0
|             |   `-CXXThisExpr 0x556302fa7700 <col:25> 'const IPRewriterPattern *' implicit this
|             |-ImplicitCastExpr 0x556302fa7848 <col:33> 'uint16_t':'unsigned short' <IntegralCast>
|             | `-ImplicitCastExpr 0x556302fa7830 <col:33> 'int' <LValueToRValue>
|             |   `-MemberExpr 0x556302fa7750 <col:33> 'const int' lvalue ->_sport 0x556302fa6a38
|             |     `-CXXThisExpr 0x556302fa7740 <col:33> 'const IPRewriterPattern *' implicit this
|             |-CXXConstructExpr 0x556302fa7860 <col:41> 'IPAddress' 'void (const IPAddress &) noexcept'
|             | `-MemberExpr 0x556302fa7790 <col:41> 'const IPAddress' lvalue ->_daddr 0x556302fa6a98
|             |   `-CXXThisExpr 0x556302fa7780 <col:41> 'const IPRewriterPattern *' implicit this
|             `-ImplicitCastExpr 0x556302fa78a8 <col:49> 'uint16_t':'unsigned short' <IntegralCast>
|               `-ImplicitCastExpr 0x556302fa7890 <col:49> 'int' <LValueToRValue>
|                 `-MemberExpr 0x556302fa77d0 <col:49> 'const int' lvalue ->_dport 0x556302fa6b00
|                   `-CXXThisExpr 0x556302fa77c0 <col:49> 'const IPRewriterPattern *' implicit this
|-AccessSpecDecl 0x556302fa6998 <line:49:1, col:8> col:1 private
|-FieldDecl 0x556302fa69d0 <line:51:5, col:15> col:15 referenced _saddr 'IPAddress'
|-FieldDecl 0x556302fa6a38 <line:52:5, col:9> col:9 referenced _sport 'int'
|-FieldDecl 0x556302fa6a98 <line:53:5, col:15> col:15 referenced _daddr 'IPAddress'
|-FieldDecl 0x556302fa6b00 <line:54:5, col:9> col:9 referenced _dport 'int'
|-FieldDecl 0x556302fa6b60 <line:56:5, col:14> col:14 _variation_top 'uint32_t':'unsigned int'
|-FieldDecl 0x556302fa6bc0 <line:57:5, col:14> col:14 _next_variation 'uint32_t':'unsigned int'
|-FieldDecl 0x556302fa6c20 <line:59:5, col:10> col:10 _is_napt 'bool'
|-FieldDecl 0x556302fa6c80 <line:60:5, col:10> col:10 _sequential 'bool'
|-FieldDecl 0x556302fa6ce0 <line:61:5, col:10> col:10 _same_first 'bool'
|-FieldDecl 0x556302fa6d48 <line:63:5, col:9> col:9 referenced _refcount 'int'
|-CXXConstructorDecl 0x556302fa6e98 <line:65:5, col:47> col:5 IPRewriterPattern 'void (const IPRewriterPattern &)'
| `-ParmVarDecl 0x556302fa6dd8 <col:23, col:46> col:47 'const IPRewriterPattern &'
|-CXXMethodDecl 0x556302fa7048 <line:66:5, col:58> col:24 operator= 'IPRewriterPattern &(const IPRewriterPattern &)'
| `-ParmVarDecl 0x556302fa6f58 <col:34, col:57> col:58 'const IPRewriterPattern &'
`-CXXDestructorDecl 0x556302fa7238 <line:12:7> col:7 implicit ~IPRewriterPattern 'void ()' inline default trivial noexcept-unevaluated 0x556302fa7238

Layout: <CGRecordLayout
  LLVMType:%class.IPRewriterPattern = type { %class.IPAddress, i32, %class.IPAddress, i32, i32, i32, i8, i8, i8, i32 }
  NonVirtualBaseLLVMType:%class.IPRewriterPattern = type { %class.IPAddress, i32, %class.IPAddress, i32, i32, i32, i8, i8, i8, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPMapper
         0 |   (IPMapper vtable pointer)
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556302ff06d0 prev 0x556302fc27b0 <../elements/ip/iprewriterbase.hh:185:1, line:197:1> line:185:7 class IPMapper definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x556302ff07c8 <col:1, col:7> col:7 implicit referenced class IPMapper
|-AccessSpecDecl 0x556302ff0858 <col:18, col:24> col:18 public
|-CXXConstructorDecl 0x556302ff08b8 <line:187:5, col:18> col:5 IPMapper 'void ()'
| `-CompoundStmt 0x556302ff12d8 <col:16, col:18>
|-CXXDestructorDecl 0x556302ff09a8 <line:188:5, col:27> col:13 ~IPMapper 'void () noexcept' virtual
| `-CompoundStmt 0x556302ff12e8 <col:25, col:27>
|-CXXMethodDecl 0x556302ff0c78 <line:190:5, line:191:24> line:190:18 notify_rewriter 'void (IPRewriterBase *, IPRewriterInput *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x556302ff0aa0 <col:34, col:50> col:50 user 'IPRewriterBase *'
| |-ParmVarDecl 0x556302ff0b18 <col:56, col:73> col:73 input 'IPRewriterInput *'
| `-ParmVarDecl 0x556302ff0b90 <line:191:6, col:20> col:20 errh 'ErrorHandler *'
|-CXXMethodDecl 0x556302ff1030 <line:192:5, line:195:31> line:192:17 rewrite_flowid 'int (IPRewriterInput *, const IPFlowID &, IPFlowID &, Packet *, int)' virtual
| |-ParmVarDecl 0x556302ff0d40 <col:32, col:49> col:49 input 'IPRewriterInput *'
| |-ParmVarDecl 0x556302ff0db8 <line:193:11, col:27> col:27 flowid 'const IPFlowID &'
| |-ParmVarDecl 0x556302ff0e30 <line:194:11, col:21> col:21 rewritten_flowid 'IPFlowID &'
| |-ParmVarDecl 0x556302ff0ea8 <line:195:11, col:19> col:19 p 'Packet *'
| `-ParmVarDecl 0x556302ff0f28 <col:22, col:26> col:26 mapid 'int'
`-CXXMethodDecl 0x556302ff1158 <line:185:7> col:7 implicit operator= 'IPMapper &(const IPMapper &)' inline default noexcept-unevaluated 0x556302ff1158
  `-ParmVarDecl 0x556302ff1268 <col:7> col:7 'const IPMapper &'

Layout: <CGRecordLayout
  LLVMType:%class.IPMapper = type { i32 (...)** }
  NonVirtualBaseLLVMType:%class.IPMapper = type { i32 (...)** }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556302fc3038 <../elements/ip/iprewriterbase.hh:23:5, line:26:5> line:23:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-FieldDecl 0x556302fc3168 <line:24:2, col:21> col:21 referenced pattern 'IPRewriterPattern *'
|-FieldDecl 0x556302fc31f8 <line:25:2, col:12> col:12 mapper 'IPMapper *'
|-CXXConstructorDecl 0x556302fc3cb8 <line:23:5> col:5 implicit used  'void () noexcept' inline default trivial
| `-CompoundStmt 0x556302fc40e8 <col:5>
|-CXXConstructorDecl 0x556302fc3db8 <col:5> col:5 implicit constexpr  'void (const IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5) &)' inline default trivial noexcept-unevaluated 0x556302fc3db8
| `-ParmVarDecl 0x556302fc3ec8 <col:5> col:5 'const IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5) &'
`-CXXConstructorDecl 0x556302fc3f68 <col:5> col:5 implicit constexpr  'void (IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5) &&)' inline default trivial noexcept-unevaluated 0x556302fc3f68
  `-ParmVarDecl 0x556302fc4078 <col:5> col:5 'IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5) &&'

Layout: <CGRecordLayout
  LLVMType:%union.anon.3 = type { %class.IPRewriterPattern* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556302fc28f0 prev 0x556302fa7b90 <../elements/ip/iprewriterbase.hh:11:1, line:40:1> line:11:7 referenced class IPRewriterInput definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x556302fc29e8 <col:1, col:7> col:7 implicit referenced class IPRewriterInput
|-AccessSpecDecl 0x556302fc2a78 <col:25, col:31> col:25 public
|-EnumDecl 0x556302fc2aa0 <line:12:5, line:14:5> line:12:5
| |-EnumConstantDecl 0x556302fc2b60 <line:13:2> col:2 referenced i_drop 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:12:5)'
| |-EnumConstantDecl 0x556302fc2bb0 <col:10> col:10 i_nochange 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:12:5)'
| |-EnumConstantDecl 0x556302fc2c00 <col:22> col:22 i_keep 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:12:5)'
| |-EnumConstantDecl 0x556302fc2c50 <col:30> col:30 i_pattern 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:12:5)'
| `-EnumConstantDecl 0x556302fc2ca0 <col:41> col:41 i_mapper 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:12:5)'
|-FieldDecl 0x556302fc2d28 <line:15:5, col:21> col:21 owner 'IPRewriterBase *'
|-FieldDecl 0x556302fc2d90 <line:16:5, col:9> col:9 owner_input 'int'
|-FieldDecl 0x556302fc2df8 <line:17:5, col:9> col:9 kind 'int'
|-FieldDecl 0x556302fc2e60 <line:18:5, col:9> col:9 foutput 'int'
|-FieldDecl 0x556302fc2ec0 <line:19:5, col:21> col:21 referenced reply_element 'IPRewriterBase *'
|-FieldDecl 0x556302fc2f28 <line:20:5, col:9> col:9 routput 'int'
|-FieldDecl 0x556302fc2f88 <line:21:5, col:14> col:14 count 'uint32_t':'unsigned int'
|-FieldDecl 0x556302fc2fe8 <line:22:5, col:14> col:14 failures 'uint32_t':'unsigned int'
|-CXXRecordDecl 0x556302fc3038 <line:23:5, line:26:5> line:23:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FieldDecl 0x556302fc3168 <line:24:2, col:21> col:21 referenced pattern 'IPRewriterPattern *'
| |-FieldDecl 0x556302fc31f8 <line:25:2, col:12> col:12 mapper 'IPMapper *'
| |-CXXConstructorDecl 0x556302fc3cb8 <line:23:5> col:5 implicit used  'void () noexcept' inline default trivial
| | `-CompoundStmt 0x556302fc40e8 <col:5>
| |-CXXConstructorDecl 0x556302fc3db8 <col:5> col:5 implicit constexpr  'void (const IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5) &)' inline default trivial noexcept-unevaluated 0x556302fc3db8
| | `-ParmVarDecl 0x556302fc3ec8 <col:5> col:5 'const IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5) &'
| `-CXXConstructorDecl 0x556302fc3f68 <col:5> col:5 implicit constexpr  'void (IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5) &&)' inline default trivial noexcept-unevaluated 0x556302fc3f68
|   `-ParmVarDecl 0x556302fc4078 <col:5> col:5 'IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5) &&'
|-FieldDecl 0x556302fc32b8 <col:5, line:26:7> col:7 referenced u 'union (anonymous union at ../elements/ip/iprewriterbase.hh:23:5)':'IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5)'
|-CXXConstructorDecl 0x556302fc3358 <line:28:5, line:31:5> line:28:5 IPRewriterInput 'void ()'
| |-CXXCtorInitializer Field 0x556302fc2df8 'kind' 'int'
| | `-ImplicitCastExpr 0x556302fc3a60 <line:29:9> 'int' <IntegralCast>
| |   `-DeclRefExpr 0x556302fc3a20 <col:9> 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:12:5)' EnumConstant 0x556302fc2b60 'i_drop' 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:12:5)'
| |-CXXCtorInitializer Field 0x556302fc2e60 'foutput' 'int'
| | `-UnaryOperator 0x556302fc3ac0 <col:26, col:27> 'int' prefix '-'
| |   `-IntegerLiteral 0x556302fc3aa0 <col:27> 'int' 1
| |-CXXCtorInitializer Field 0x556302fc2f28 'routput' 'int'
| | `-UnaryOperator 0x556302fc3b40 <col:39, col:40> 'int' prefix '-'
| |   `-IntegerLiteral 0x556302fc3b20 <col:40> 'int' 1
| |-CXXCtorInitializer Field 0x556302fc2f88 'count' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x556302fc3be0 <col:50> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x556302fc3ba0 <col:50> 'int' 0
| |-CXXCtorInitializer Field 0x556302fc2fe8 'failures' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x556302fc3c60 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x556302fc3c20 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x556302fc32b8 'u' 'union (anonymous union at ../elements/ip/iprewriterbase.hh:23:5)':'IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5)'
| | `-CXXConstructExpr 0x556302fc40f8 <line:28:5> 'union (anonymous union at ../elements/ip/iprewriterbase.hh:23:5)':'IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5)' 'void () noexcept'
| `-CompoundStmt 0x556302fc4240 <line:29:66, line:31:5>
|   `-BinaryOperator 0x556302fc4220 <line:30:2, col:14> 'IPRewriterPattern *' lvalue '='
|     |-MemberExpr 0x556302fc41b8 <col:2, col:4> 'IPRewriterPattern *' lvalue .pattern 0x556302fc3168
|     | `-MemberExpr 0x556302fc4188 <col:2> 'union (anonymous union at ../elements/ip/iprewriterbase.hh:23:5)':'IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5)' lvalue ->u 0x556302fc32b8
|     |   `-CXXThisExpr 0x556302fc4178 <col:2> 'IPRewriterInput *' implicit this
|     `-ImplicitCastExpr 0x556302fc4208 <col:14> 'IPRewriterPattern *' <NullToPointer>
|       `-IntegerLiteral 0x556302fc41e8 <col:14> 'int' 0
|-EnumDecl 0x556302fc3400 <line:33:5, line:35:5> line:33:5
| |-EnumConstantDecl 0x556302fc3500 <line:34:2, col:18> col:2 referenced mapid_default 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:33:5)'
| | `-ImplicitCastExpr 0x556302fc35e0 <col:18> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302fc34e0 <col:18> 'int' Int: 0
| |     `-IntegerLiteral 0x556302fc34c0 <col:18> 'int' 0
| `-EnumConstantDecl 0x556302fc3590 <col:21, col:44> col:21 mapid_iprewriter_udp 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:33:5)'
|   `-ImplicitCastExpr 0x556302fc35f8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556302fc3570 <col:44> 'int' Int: 1
|       `-IntegerLiteral 0x556302fc3550 <col:44> 'int' 1
`-CXXMethodDecl 0x556302fc3890 <line:37:5, line:39:46> line:37:44 rewrite_flowid 'int (const IPFlowID &, IPFlowID &, Packet *, int)'
  |-ParmVarDecl 0x556302fc3620 <col:59, col:75> col:75 flowid 'const IPFlowID &'
  |-ParmVarDecl 0x556302fc3698 <line:38:10, col:20> col:20 rewritten_flowid 'IPFlowID &'
  |-ParmVarDecl 0x556302fc3710 <line:39:10, col:18> col:18 p 'Packet *'
  |-ParmVarDecl 0x556302fc3790 <col:21, col:33> col:25 mapid 'int' cinit
  | `-ImplicitCastExpr 0x556302fc3a08 <col:33> 'int' <IntegralCast>
  |   `-DeclRefExpr 0x556302fc39e8 <col:33> 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:33:5)' EnumConstant 0x556302fc3500 'mapid_default' 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:33:5)'
  |-NoInlineAttr 0x556302fc3950 <line:37:20>
  `-OptimizeNoneAttr 0x556302fc39a8 <col:30>

Layout: <CGRecordLayout
  LLVMType:%class.IPRewriterInput = type { %class.IPRewriterBase*, i32, i32, i32, %class.IPRewriterBase*, i32, i32, i32, %union.anon.3 }
  NonVirtualBaseLLVMType:%class.IPRewriterInput = type { %class.IPRewriterBase*, i32, i32, i32, %class.IPRewriterBase*, i32, i32, i32, %union.anon.3 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556302faa4d0 prev 0x556302fa7a50 <../elements/ip/iprwmapping.hh:68:1, line:174:1> line:68:7 referenced class IPRewriterFlow definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x556302faa5c8 <col:1, col:7> col:7 implicit referenced class IPRewriterFlow
|-AccessSpecDecl 0x556302faa658 <col:24, col:30> col:24 public
|-CXXConstructorDecl 0x556302faaa78 <line:70:5, line:72:61> line:70:5 used IPRewriterFlow 'void (IPRewriterInput *, const IPFlowID &, const IPFlowID &, uint8_t, bool, click_jiffies_t)'
| |-ParmVarDecl 0x556302faa690 <col:20, col:37> col:37 owner 'IPRewriterInput *'
| |-ParmVarDecl 0x556302faa708 <col:44, col:60> col:60 flowid 'const IPFlowID &'
| |-ParmVarDecl 0x556302faa780 <line:71:6, col:22> col:22 rewritten_flowid 'const IPFlowID &'
| |-ParmVarDecl 0x556302faa7f8 <line:72:6, col:14> col:14 ip_p 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x556302faa870 <col:20, col:25> col:25 guaranteed 'bool'
| `-ParmVarDecl 0x556302faa8e8 <col:37, col:53> col:53 expiry_j 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x556302faac58 <line:74:5, line:76:5> line:74:22 used entry 'IPRewriterEntry &(bool)'
| |-ParmVarDecl 0x556302faab60 <col:28, col:33> col:33 used direction 'bool'
| `-CompoundStmt 0x556302fb0430 <col:44, line:76:5>
|   `-ReturnStmt 0x556302fb0420 <line:75:2, col:21>
|     `-ArraySubscriptExpr 0x556302fb0400 <col:9, col:21> 'IPRewriterEntry' lvalue
|       |-ImplicitCastExpr 0x556302fb03d0 <col:9> 'IPRewriterEntry *' <ArrayToPointerDecay>
|       | `-MemberExpr 0x556302fb0380 <col:9> 'IPRewriterEntry [2]' lvalue ->_e 0x556302fad228
|       |   `-CXXThisExpr 0x556302fb0370 <col:9> 'IPRewriterFlow *' implicit this
|       `-ImplicitCastExpr 0x556302fb03e8 <col:12> 'bool' <LValueToRValue>
|         `-DeclRefExpr 0x556302fb03b0 <col:12> 'bool' lvalue ParmVar 0x556302faab60 'direction' 'bool'
|-CXXMethodDecl 0x556302faae08 <line:77:5, line:79:5> line:77:28 entry 'const IPRewriterEntry &(bool) const'
| |-ParmVarDecl 0x556302faad10 <col:34, col:39> col:39 used direction 'bool'
| `-CompoundStmt 0x556302fb0548 <col:56, line:79:5>
|   `-ReturnStmt 0x556302fb0538 <line:78:2, col:21>
|     `-ArraySubscriptExpr 0x556302fb0518 <col:9, col:21> 'const IPRewriterEntry' lvalue
|       |-ImplicitCastExpr 0x556302fb04e8 <col:9> 'const IPRewriterEntry *' <ArrayToPointerDecay>
|       | `-MemberExpr 0x556302fb0458 <col:9> 'IPRewriterEntry const[2]' lvalue ->_e 0x556302fad228
|       |   `-CXXThisExpr 0x556302fb0448 <col:9> 'const IPRewriterFlow *' implicit this
|       `-ImplicitCastExpr 0x556302fb0500 <col:12> 'bool' <LValueToRValue>
|         `-DeclRefExpr 0x556302fb0488 <col:12> 'bool' lvalue ParmVar 0x556302faad10 'direction' 'bool'
|-CXXMethodDecl 0x556302faaed0 <line:83:5, line:85:5> line:83:21 used expiry 'click_jiffies_t () const'
| `-CompoundStmt 0x556302fb05c8 <col:36, line:85:5>
|   `-ReturnStmt 0x556302fb05b8 <line:84:2, col:9>
|     `-ImplicitCastExpr 0x556302fb05a0 <col:9> 'click_jiffies_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x556302fb0570 <col:9> 'const click_jiffies_t':'const unsigned int' lvalue ->_expiry_j 0x556302fad348
|         `-CXXThisExpr 0x556302fb0560 <col:9> 'const IPRewriterFlow *' implicit this
|-CXXMethodDecl 0x556302fab078 <line:89:5, line:91:5> line:89:10 expired 'bool (click_jiffies_t) const'
| |-ParmVarDecl 0x556302faaf80 <col:18, col:34> col:34 used now_j 'click_jiffies_t':'unsigned int'
| `-CompoundStmt 0x556302fb07e8 <col:47, line:91:5>
|   `-ReturnStmt 0x556302fb07d8 <line:90:2, col:67>
|     `-UnaryOperator 0x556302fb07c0 <col:9, col:67> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x556302fb07a0 <col:10, col:67> 'bool'
|         `-BinaryOperator 0x556302fb0780 <col:11, col:66> 'bool' '<'
|           |-CStyleCastExpr 0x556302fb0738 <col:11, col:62> 'click_jiffies_difference_t':'int' <NoOp>
|           | `-ImplicitCastExpr 0x556302fb0720 <col:40, col:62> 'click_jiffies_difference_t':'int' <IntegralCast> part_of_explicit_cast
|           |   `-ParenExpr 0x556302fb0700 <col:40, col:62> 'unsigned int'
|           |     `-BinaryOperator 0x556302fb06b0 <col:41, col:61> 'unsigned int' '-'
|           |       |-ImplicitCastExpr 0x556302fb0680 <col:41, col:47> 'click_jiffies_t':'unsigned int' <LValueToRValue>
|           |       | `-ParenExpr 0x556302fb0600 <col:41, col:47> 'click_jiffies_t':'unsigned int' lvalue
|           |       |   `-DeclRefExpr 0x556302fb05e0 <col:42> 'click_jiffies_t':'unsigned int' lvalue ParmVar 0x556302faaf80 'now_j' 'click_jiffies_t':'unsigned int'
|           |       `-ImplicitCastExpr 0x556302fb0698 <col:51, col:61> 'click_jiffies_t':'unsigned int' <LValueToRValue>
|           |         `-ParenExpr 0x556302fb0660 <col:51, col:61> 'const click_jiffies_t':'const unsigned int' lvalue
|           |           `-MemberExpr 0x556302fb0630 <col:52> 'const click_jiffies_t':'const unsigned int' lvalue ->_expiry_j 0x556302fad348
|           |             `-CXXThisExpr 0x556302fb0620 <col:52> 'const IPRewriterFlow *' implicit this
|           `-IntegerLiteral 0x556302fb0760 <col:66> 'int' 0
|-CXXMethodDecl 0x556302fab140 <line:94:5, line:96:5> line:94:10 guaranteed 'bool () const'
| `-CompoundStmt 0x556302fb0868 <col:29, line:96:5>
|   `-ReturnStmt 0x556302fb0858 <line:95:2, col:9>
|     `-ImplicitCastExpr 0x556302fb0840 <col:9> 'bool' <LValueToRValue>
|       `-MemberExpr 0x556302fb0810 <col:9> 'const bool' lvalue ->_guaranteed 0x556302fad508
|         `-CXXThisExpr 0x556302fb0800 <col:9> 'const IPRewriterFlow *' implicit this
|-CXXMethodDecl 0x556302fab428 <line:102:5, line:103:34> line:102:10 used change_expiry 'void (IPRewriterHeap *, bool, click_jiffies_t)'
| |-ParmVarDecl 0x556302fab218 <col:24, col:40> col:40 h 'IPRewriterHeap *'
| |-ParmVarDecl 0x556302fab290 <col:43, col:48> col:48 guaranteed 'bool'
| `-ParmVarDecl 0x556302fab308 <line:103:10, col:26> col:26 expiry_j 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x556302fab7c8 <line:114:5, line:118:5> line:114:10 change_expiry_by_timeout 'void (IPRewriterHeap *, click_jiffies_t, const uint32_t *)'
| |-ParmVarDecl 0x556302fab4f0 <col:35, col:51> col:51 used h 'IPRewriterHeap *'
| |-ParmVarDecl 0x556302fab568 <col:54, col:70> col:70 used now_j 'click_jiffies_t':'unsigned int'
| |-ParmVarDecl 0x556302fab6a0 <line:115:7, col:32> col:22 used timeouts 'const uint32_t *':'const uint32_t *'
| `-CompoundStmt 0x556302fb0d08 <col:35, line:118:5>
|   |-DeclStmt 0x556302fb0ad8 <line:116:2, col:60>
|   | `-VarDecl 0x556302fb0890 <col:2, col:59> col:11 used timeout 'uint32_t':'unsigned int' cinit
|   |   `-ImplicitCastExpr 0x556302fb0ac0 <col:21, col:59> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     `-ConditionalOperator 0x556302fb0a90 <col:21, col:59> 'const uint32_t':'const unsigned int' lvalue
|   |       |-ImplicitCastExpr 0x556302fb0a78 <col:21, col:31> 'bool' <IntegralToBoolean>
|   |       | `-ImplicitCastExpr 0x556302fb0a60 <col:21, col:31> 'uint32_t':'unsigned int' <LValueToRValue>
|   |       |   `-ArraySubscriptExpr 0x556302fb0950 <col:21, col:31> 'const uint32_t':'const unsigned int' lvalue
|   |       |     |-ImplicitCastExpr 0x556302fb0938 <col:21> 'const uint32_t *':'const uint32_t *' <LValueToRValue>
|   |       |     | `-DeclRefExpr 0x556302fb08f8 <col:21> 'const uint32_t *':'const uint32_t *' lvalue ParmVar 0x556302fab6a0 'timeouts' 'const uint32_t *':'const uint32_t *'
|   |       |     `-IntegerLiteral 0x556302fb0918 <col:30> 'int' 1
|   |       |-ArraySubscriptExpr 0x556302fb09c8 <col:35, col:45> 'const uint32_t':'const unsigned int' lvalue
|   |       | |-ImplicitCastExpr 0x556302fb09b0 <col:35> 'const uint32_t *':'const uint32_t *' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x556302fb0970 <col:35> 'const uint32_t *':'const uint32_t *' lvalue ParmVar 0x556302fab6a0 'timeouts' 'const uint32_t *':'const uint32_t *'
|   |       | `-IntegerLiteral 0x556302fb0990 <col:44> 'int' 1
|   |       `-ArraySubscriptExpr 0x556302fb0a40 <col:49, col:59> 'const uint32_t':'const unsigned int' lvalue
|   |         |-ImplicitCastExpr 0x556302fb0a28 <col:49> 'const uint32_t *':'const uint32_t *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x556302fb09e8 <col:49> 'const uint32_t *':'const uint32_t *' lvalue ParmVar 0x556302fab6a0 'timeouts' 'const uint32_t *':'const uint32_t *'
|   |         `-IntegerLiteral 0x556302fb0a08 <col:58> 'int' 0
|   `-CXXMemberCallExpr 0x556302fb0cb8 <line:117:2, col:49> 'void'
|     |-MemberExpr 0x556302fb0b00 <col:2> '<bound member function type>' ->change_expiry 0x556302fab428
|     | `-CXXThisExpr 0x556302fb0af0 <col:2> 'IPRewriterFlow *' implicit this
|     |-ImplicitCastExpr 0x556302fb0cf0 <col:16> 'IPRewriterHeap *' <LValueToRValue>
|     | `-DeclRefExpr 0x556302fb0b30 <col:16> 'IPRewriterHeap *' lvalue ParmVar 0x556302fab4f0 'h' 'IPRewriterHeap *'
|     |-UnaryOperator 0x556302fb0c10 <col:19, col:31> 'bool' prefix '!' cannot overflow
|     | `-UnaryOperator 0x556302fb0bf8 <col:20, col:31> 'bool' prefix '!' cannot overflow
|     |   `-ImplicitCastExpr 0x556302fb0be0 <col:21, col:31> 'bool' <IntegralToBoolean>
|     |     `-ImplicitCastExpr 0x556302fb0bc8 <col:21, col:31> 'uint32_t':'unsigned int' <LValueToRValue>
|     |       `-ArraySubscriptExpr 0x556302fb0ba8 <col:21, col:31> 'const uint32_t':'const unsigned int' lvalue
|     |         |-ImplicitCastExpr 0x556302fb0b90 <col:21> 'const uint32_t *':'const uint32_t *' <LValueToRValue>
|     |         | `-DeclRefExpr 0x556302fb0b50 <col:21> 'const uint32_t *':'const uint32_t *' lvalue ParmVar 0x556302fab6a0 'timeouts' 'const uint32_t *':'const uint32_t *'
|     |         `-IntegerLiteral 0x556302fb0b70 <col:30> 'int' 1
|     `-BinaryOperator 0x556302fb0c98 <col:34, col:42> 'unsigned int' '+'
|       |-ImplicitCastExpr 0x556302fb0c68 <col:34> 'click_jiffies_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x556302fb0c28 <col:34> 'click_jiffies_t':'unsigned int' lvalue ParmVar 0x556302fab568 'now_j' 'click_jiffies_t':'unsigned int'
|       `-ImplicitCastExpr 0x556302fb0c80 <col:42> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x556302fb0c48 <col:42> 'uint32_t':'unsigned int' lvalue Var 0x556302fb0890 'timeout' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556302fab8f8 <line:120:5, line:122:5> line:120:13 ip_p 'uint8_t () const'
| `-CompoundStmt 0x556302fb0d90 <col:26, line:122:5>
|   `-ReturnStmt 0x556302fb0d80 <line:121:2, col:9>
|     `-ImplicitCastExpr 0x556302fb0d68 <col:9> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-MemberExpr 0x556302fb0d38 <col:9> 'const uint8_t':'const unsigned char' lvalue ->_ip_p 0x556302fad448
|         `-CXXThisExpr 0x556302fb0d28 <col:9> 'const IPRewriterFlow *' implicit this
|-CXXMethodDecl 0x556302fab9e8 <line:124:5, line:126:5> line:124:22 used owner 'IPRewriterInput *() const'
| `-CompoundStmt 0x556302fb0e10 <col:36, line:126:5>
|   `-ReturnStmt 0x556302fb0e00 <line:125:2, col:9>
|     `-ImplicitCastExpr 0x556302fb0de8 <col:9> 'IPRewriterInput *' <LValueToRValue>
|       `-MemberExpr 0x556302fb0db8 <col:9> 'IPRewriterInput *const' lvalue ->_owner 0x556302fad5c8
|         `-CXXThisExpr 0x556302fb0da8 <col:9> 'const IPRewriterFlow *' implicit this
|-CXXMethodDecl 0x556302fabaa8 <line:128:5, line:130:5> line:128:13 reply_anno 'uint8_t () const'
| `-CompoundStmt 0x556302fb0e90 <col:32, line:130:5>
|   `-ReturnStmt 0x556302fb0e80 <line:129:2, col:9>
|     `-ImplicitCastExpr 0x556302fb0e68 <col:9> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-MemberExpr 0x556302fb0e38 <col:9> 'const uint8_t':'const unsigned char' lvalue ->_reply_anno 0x556302fad568
|         `-CXXThisExpr 0x556302fb0e28 <col:9> 'const IPRewriterFlow *' implicit this
|-CXXMethodDecl 0x556302fabc18 <line:131:5, line:133:5> line:131:10 set_reply_anno 'void (uint8_t)'
| |-ParmVarDecl 0x556302fabb58 <col:25, col:33> col:33 used reply_anno 'uint8_t':'unsigned char'
| `-CompoundStmt 0x556302fb0f40 <col:45, line:133:5>
|   `-BinaryOperator 0x556302fb0f20 <line:132:2, col:16> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x556302fb0eb8 <col:2> 'uint8_t':'unsigned char' lvalue ->_reply_anno 0x556302fad568
|     | `-CXXThisExpr 0x556302fb0ea8 <col:2> 'IPRewriterFlow *' implicit this
|     `-ImplicitCastExpr 0x556302fb0f08 <col:16> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x556302fb0ee8 <col:16> 'uint8_t':'unsigned char' lvalue ParmVar 0x556302fabb58 'reply_anno' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x556302fabee8 <line:135:5, line:136:27> line:135:24 used update_csum 'void (uint16_t *, bool, uint16_t)' static inline
| |-ParmVarDecl 0x556302fabcd0 <col:36, col:46> col:46 csum 'uint16_t *'
| |-ParmVarDecl 0x556302fabd48 <col:52, col:57> col:57 direction 'bool'
| `-ParmVarDecl 0x556302fabdc0 <line:136:8, col:17> col:17 csum_delta 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x556302fac188 <line:138:5, col:65> col:10 apply 'void (WritablePacket *, bool, unsigned int)'
| |-ParmVarDecl 0x556302fabfb0 <col:16, col:32> col:32 p 'WritablePacket *'
| |-ParmVarDecl 0x556302fac028 <col:35, col:40> col:40 direction 'bool'
| `-ParmVarDecl 0x556302fac0a8 <col:51, col:60> col:60 annos 'unsigned int'
|-CXXMethodDecl 0x556302fac468 <line:140:5, col:72> col:10 unparse 'void (StringAccum &, bool, click_jiffies_t) const'
| |-ParmVarDecl 0x556302fac250 <col:18, col:31> col:31 sa 'StringAccum &'
| |-ParmVarDecl 0x556302fac2c8 <col:35, col:40> col:40 direction 'bool'
| `-ParmVarDecl 0x556302fac340 <col:51, col:67> col:67 now 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x556302fac6c0 <line:141:5, col:78> col:10 unparse_ports 'void (StringAccum &, bool, click_jiffies_t) const'
| |-ParmVarDecl 0x556302fac530 <col:24, col:37> col:37 sa 'StringAccum &'
| |-ParmVarDecl 0x556302fac5a8 <col:41, col:46> col:46 direction 'bool'
| `-ParmVarDecl 0x556302fac620 <col:57, col:73> col:73 now 'click_jiffies_t':'unsigned int'
|-CXXRecordDecl 0x556302fac778 <line:143:5, line:147:5> line:143:12 struct heap_less definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x556302fac898 <col:5, col:12> col:12 implicit struct heap_less
| `-CXXMethodDecl 0x556302facab8 <line:144:2, line:146:2> line:144:14 operator() 'bool (IPRewriterFlow *, IPRewriterFlow *)' inline
|   |-ParmVarDecl 0x556302fac938 <col:25, col:41> col:41 used a 'IPRewriterFlow *'
|   |-ParmVarDecl 0x556302fac9b0 <col:44, col:60> col:60 used b 'IPRewriterFlow *'
|   `-CompoundStmt 0x556302fb11f8 <col:63, line:146:2>
|     `-ReturnStmt 0x556302fb11e8 <line:145:6, col:78>
|       `-ParenExpr 0x556302fb11c8 <col:13, col:78> 'bool'
|         `-BinaryOperator 0x556302fb11a8 <col:14, col:77> 'bool' '<'
|           |-CStyleCastExpr 0x556302fb1160 <col:14, col:73> 'click_jiffies_difference_t':'int' <NoOp>
|           | `-ImplicitCastExpr 0x556302fb1148 <col:43, col:73> 'click_jiffies_difference_t':'int' <IntegralCast> part_of_explicit_cast
|           |   `-ParenExpr 0x556302fb1128 <col:43, col:73> 'unsigned int'
|           |     `-BinaryOperator 0x556302fb10d8 <col:44, col:72> 'unsigned int' '-'
|           |       |-ParenExpr 0x556302fb0ff8 <col:44, col:56> 'click_jiffies_t':'unsigned int'
|           |       | `-CXXMemberCallExpr 0x556302fb0fc0 <col:45, col:55> 'click_jiffies_t':'unsigned int'
|           |       |   `-MemberExpr 0x556302fb0f90 <col:45, col:48> '<bound member function type>' ->expiry 0x556302faaed0
|           |       |     `-ImplicitCastExpr 0x556302fb0fe0 <col:45> 'const IPRewriterFlow *' <NoOp>
|           |       |       `-ImplicitCastExpr 0x556302fb0f78 <col:45> 'IPRewriterFlow *' <LValueToRValue>
|           |       |         `-DeclRefExpr 0x556302fb0f58 <col:45> 'IPRewriterFlow *' lvalue ParmVar 0x556302fac938 'a' 'IPRewriterFlow *'
|           |       `-ParenExpr 0x556302fb10b8 <col:60, col:72> 'click_jiffies_t':'unsigned int'
|           |         `-CXXMemberCallExpr 0x556302fb1080 <col:61, col:71> 'click_jiffies_t':'unsigned int'
|           |           `-MemberExpr 0x556302fb1050 <col:61, col:64> '<bound member function type>' ->expiry 0x556302faaed0
|           |             `-ImplicitCastExpr 0x556302fb10a0 <col:61> 'const IPRewriterFlow *' <NoOp>
|           |               `-ImplicitCastExpr 0x556302fb1038 <col:61> 'IPRewriterFlow *' <LValueToRValue>
|           |                 `-DeclRefExpr 0x556302fb1018 <col:61> 'IPRewriterFlow *' lvalue ParmVar 0x556302fac9b0 'b' 'IPRewriterFlow *'
|           `-IntegerLiteral 0x556302fb1188 <col:77> 'int' 0
|-CXXRecordDecl 0x556302facb80 <line:148:5, line:152:5> line:148:12 struct heap_place definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x556302facc98 <col:5, col:12> col:12 implicit struct heap_place
| `-CXXMethodDecl 0x556302facef8 <line:149:2, line:151:2> line:149:14 operator() 'void (IPRewriterFlow **, IPRewriterFlow **)' inline
|   |-ParmVarDecl 0x556302facd70 <col:25, col:42> col:42 used begin 'IPRewriterFlow **'
|   |-ParmVarDecl 0x556302facdf0 <col:49, col:66> col:66 used it 'IPRewriterFlow **'
|   `-CompoundStmt 0x556302fb1390 <col:70, line:151:2>
|     `-BinaryOperator 0x556302fb1370 <line:150:6, col:27> 'size_t':'unsigned long' lvalue bitfield '='
|       |-MemberExpr 0x556302fb1298 <col:6, col:13> 'size_t':'unsigned long' lvalue bitfield ->_place 0x556302fad3e8
|       | `-ImplicitCastExpr 0x556302fb1280 <col:6, col:10> 'IPRewriterFlow *' <LValueToRValue>
|       |   `-ParenExpr 0x556302fb1260 <col:6, col:10> 'IPRewriterFlow *' lvalue
|       |     `-UnaryOperator 0x556302fb1248 <col:7, col:8> 'IPRewriterFlow *' lvalue prefix '*' cannot overflow
|       |       `-ImplicitCastExpr 0x556302fb1230 <col:8> 'IPRewriterFlow **' <LValueToRValue>
|       |         `-DeclRefExpr 0x556302fb1210 <col:8> 'IPRewriterFlow **' lvalue ParmVar 0x556302facdf0 'it' 'IPRewriterFlow **'
|       `-ImplicitCastExpr 0x556302fb1358 <col:22, col:27> 'size_t':'unsigned long' <IntegralCast>
|         `-BinaryOperator 0x556302fb1338 <col:22, col:27> 'long' '-'
|           |-ImplicitCastExpr 0x556302fb1308 <col:22> 'IPRewriterFlow **' <LValueToRValue>
|           | `-DeclRefExpr 0x556302fb12c8 <col:22> 'IPRewriterFlow **' lvalue ParmVar 0x556302facdf0 'it' 'IPRewriterFlow **'
|           `-ImplicitCastExpr 0x556302fb1320 <col:27> 'IPRewriterFlow **' <LValueToRValue>
|             `-DeclRefExpr 0x556302fb12e8 <col:27> 'IPRewriterFlow **' lvalue ParmVar 0x556302facd70 'begin' 'IPRewriterFlow **'
|-AccessSpecDecl 0x556302facfc0 <line:154:3, col:12> col:3 protected
|-FieldDecl 0x556302fad228 <line:156:5, col:25> col:21 referenced _e 'IPRewriterEntry [2]'
|-FieldDecl 0x556302fad288 <line:157:5, col:14> col:14 referenced _ip_csum_delta 'uint16_t':'unsigned short'
|-FieldDecl 0x556302fad2e8 <line:158:5, col:14> col:14 referenced _udp_csum_delta 'uint16_t':'unsigned short'
|-FieldDecl 0x556302fad348 <line:159:5, col:21> col:21 referenced _expiry_j 'click_jiffies_t':'unsigned int'
|-FieldDecl 0x556302fad3e8 <line:160:5, col:21> col:12 referenced _place 'size_t':'unsigned long'
| `-ConstantExpr 0x556302fad3c8 <col:21> 'int' Int: 32
|   `-IntegerLiteral 0x556302fad398 <col:21> 'int' 32
|-FieldDecl 0x556302fad448 <line:161:5, col:13> col:13 referenced _ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x556302fad4a8 <line:162:5, col:13> col:13 _tflags 'uint8_t':'unsigned char'
|-FieldDecl 0x556302fad508 <line:163:5, col:10> col:10 referenced _guaranteed 'bool'
|-FieldDecl 0x556302fad568 <line:164:5, col:13> col:13 referenced _reply_anno 'uint8_t':'unsigned char'
|-FieldDecl 0x556302fad5c8 <line:165:5, col:22> col:22 referenced _owner 'IPRewriterInput *'
|-FriendDecl 0x556302fad670 <line:167:5, col:18> col:12 'class IPRewriterBase':'IPRewriterBase'
|-FriendDecl 0x556302fad700 <line:168:5, col:18> col:12 'class IPRewriterEntry':'IPRewriterEntry'
|-AccessSpecDecl 0x556302fad740 <line:170:3, col:10> col:3 private
|-CXXMethodDecl 0x556302fb02b0 <line:172:5, col:38> col:10 destroy 'void (IPRewriterHeap *)'
| `-ParmVarDecl 0x556302fad778 <col:18, col:34> col:34 heap 'IPRewriterHeap *'
|-CXXConstructorDecl 0x556303002498 <line:68:7> col:7 implicit constexpr IPRewriterFlow 'void (const IPRewriterFlow &)' inline default trivial noexcept-unevaluated 0x556303002498
| `-ParmVarDecl 0x5563030025a8 <col:7> col:7 'const IPRewriterFlow &'
|-CXXConstructorDecl 0x556303002728 <col:7> col:7 implicit constexpr IPRewriterFlow 'void (IPRewriterFlow &&)' inline default trivial noexcept-unevaluated 0x556303002728
| `-ParmVarDecl 0x556303002838 <col:7> col:7 'IPRewriterFlow &&'
`-CXXDestructorDecl 0x556303003160 <col:7> col:7 implicit ~IPRewriterFlow 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPRewriterFlow = type { [2 x %class.IPRewriterEntry], i16, i16, i32, i32, i8, i8, i8, i8, %class.IPRewriterInput* }
  NonVirtualBaseLLVMType:%class.IPRewriterFlow = type { [2 x %class.IPRewriterEntry], i16, i16, i32, i32, i8, i8, i8, i8, %class.IPRewriterInput* }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:32 IsSigned:0 StorageSize:32 StorageOffset:56>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556302fff240 <../elements/icmp/icmppingrewriter.hh:83:5, line:98:5> line:83:11 referenced class ICMPPingFlow definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IPRewriterFlow'
|-CXXRecordDecl 0x556302fff398 <col:5, col:11> col:11 implicit referenced class ICMPPingFlow
|-AccessSpecDecl 0x556302fff428 <col:50, col:56> col:50 public
|-CXXConstructorDecl 0x556302fff7d8 <line:85:2, line:92:2> line:85:2 ICMPPingFlow 'void (IPRewriterInput *, const IPFlowID &, const IPFlowID &, bool, click_jiffies_t)'
| |-ParmVarDecl 0x556302fff460 <col:15, col:32> col:32 used owner 'IPRewriterInput *'
| |-ParmVarDecl 0x556302fff4d8 <col:39, col:55> col:55 used flowid 'const IPFlowID &'
| |-ParmVarDecl 0x556302fff550 <line:86:8, col:24> col:24 used rewritten_flowid 'const IPFlowID &'
| |-ParmVarDecl 0x556302fff5c8 <line:87:8, col:13> col:13 used guaranteed 'bool'
| |-ParmVarDecl 0x556302fff640 <col:25, col:41> col:41 used expiry_j 'click_jiffies_t':'unsigned int'
| |-CXXCtorInitializer 'IPRewriterFlow'
| | `-CXXConstructExpr 0x556303002908 <line:88:8, line:89:32> 'IPRewriterFlow' 'void (IPRewriterInput *, const IPFlowID &, const IPFlowID &, uint8_t, bool, click_jiffies_t)'
| |   |-ImplicitCastExpr 0x5563030028a8 <line:88:23> 'IPRewriterInput *' <LValueToRValue>
| |   | `-DeclRefExpr 0x556303002028 <col:23> 'IPRewriterInput *' lvalue ParmVar 0x556302fff460 'owner' 'IPRewriterInput *'
| |   |-DeclRefExpr 0x556303002048 <col:30> 'const IPFlowID' lvalue ParmVar 0x556302fff4d8 'flowid' 'const IPFlowID &'
| |   |-DeclRefExpr 0x556303002068 <col:38> 'const IPFlowID' lvalue ParmVar 0x556302fff550 'rewritten_flowid' 'const IPFlowID &'
| |   |-ImplicitCastExpr 0x5563030028c0 <line:89:9> 'uint8_t':'unsigned char' <IntegralCast>
| |   | `-IntegerLiteral 0x556303002088 <col:9> 'int' 1
| |   |-ImplicitCastExpr 0x5563030028d8 <col:12> 'bool' <LValueToRValue>
| |   | `-DeclRefExpr 0x5563030020a8 <col:12> 'bool' lvalue ParmVar 0x556302fff5c8 'guaranteed' 'bool'
| |   `-ImplicitCastExpr 0x5563030028f0 <col:24> 'click_jiffies_t':'unsigned int' <LValueToRValue>
| |     `-DeclRefExpr 0x5563030020c8 <col:24> 'click_jiffies_t':'unsigned int' lvalue ParmVar 0x556302fff640 'expiry_j' 'click_jiffies_t':'unsigned int'
| `-CompoundStmt 0x556303002c58 <col:34, line:92:2>
|   |-BinaryOperator 0x556303002a28 <line:90:6, col:24> 'uint16_t':'unsigned short' lvalue '='
|   | |-MemberExpr 0x5563030029c0 <col:6> 'uint16_t':'unsigned short' lvalue ->_udp_csum_delta 0x556302fad2e8
|   | | `-ImplicitCastExpr 0x5563030029a0 <col:6> 'IPRewriterFlow *' <UncheckedDerivedToBase (IPRewriterFlow)>
|   | |   `-CXXThisExpr 0x556303002990 <col:6> 'ICMPPingRewriter::ICMPPingFlow *' implicit this
|   | `-ImplicitCastExpr 0x556303002a10 <col:24> 'uint16_t':'unsigned short' <IntegralCast>
|   |   `-IntegerLiteral 0x5563030029f0 <col:24> 'int' 0
|   `-CallExpr 0x556303002c20 <line:91:6, col:86> 'void'
|     |-ImplicitCastExpr 0x556303002c08 <col:6> 'void (*)(uint16_t *, uint16_t, uint16_t)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x556303002be8 <col:6> 'void (uint16_t *, uint16_t, uint16_t)' lvalue Function 0x556302cf73a8 'click_update_in_cksum' 'void (uint16_t *, uint16_t, uint16_t)'
|     |-UnaryOperator 0x556303002af0 <col:28, col:29> 'uint16_t *' prefix '&' cannot overflow
|     | `-MemberExpr 0x556303002ac0 <col:29> 'uint16_t':'unsigned short' lvalue ->_udp_csum_delta 0x556302fad2e8
|     |   `-ImplicitCastExpr 0x556303002aa0 <col:29> 'IPRewriterFlow *' <UncheckedDerivedToBase (IPRewriterFlow)>
|     |     `-CXXThisExpr 0x556303002a90 <col:29> 'ICMPPingRewriter::ICMPPingFlow *' implicit this
|     |-CXXMemberCallExpr 0x556303002b58 <col:46, col:59> 'uint16_t':'unsigned short'
|     | `-MemberExpr 0x556303002b28 <col:46, col:53> '<bound member function type>' .sport 0x556302f9d4e8
|     |   `-DeclRefExpr 0x556303002b08 <col:46> 'const IPFlowID' lvalue ParmVar 0x556302fff4d8 'flowid' 'const IPFlowID &'
|     `-CXXMemberCallExpr 0x556303002bc8 <col:62, col:85> 'uint16_t':'unsigned short'
|       `-MemberExpr 0x556303002b98 <col:62, col:79> '<bound member function type>' .sport 0x556302f9d4e8
|         `-DeclRefExpr 0x556303002b78 <col:62> 'const IPFlowID' lvalue ParmVar 0x556302fff550 'rewritten_flowid' 'const IPFlowID &'
|-CXXMethodDecl 0x556302fffa50 <line:94:2, col:62> col:7 apply 'void (WritablePacket *, bool, unsigned int)'
| |-ParmVarDecl 0x556302fff8b8 <col:13, col:29> col:29 p 'WritablePacket *'
| |-ParmVarDecl 0x556302fff930 <col:32, col:37> col:37 direction 'bool'
| `-ParmVarDecl 0x556302fff9b0 <col:48, col:57> col:57 annos 'unsigned int'
|-CXXMethodDecl 0x556302fffcd0 <line:96:2, col:69> col:7 unparse 'void (StringAccum &, bool, click_jiffies_t) const'
| |-ParmVarDecl 0x556302fffb18 <col:15, col:28> col:28 sa 'StringAccum &'
| |-ParmVarDecl 0x556302fffb90 <col:32, col:37> col:37 direction 'bool'
| `-ParmVarDecl 0x556302fffc08 <col:48, col:64> col:64 now 'click_jiffies_t':'unsigned int'
`-CXXDestructorDecl 0x556303003078 <line:83:11> col:11 implicit referenced ~ICMPPingFlow 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.ICMPPingRewriter::ICMPPingFlow" = type { %class.IPRewriterFlow }
  NonVirtualBaseLLVMType:%"class.ICMPPingRewriter::ICMPPingFlow" = type { %class.IPRewriterFlow }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556302c4dbf0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x556302c4dd08 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x556302c4dd98 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x556302c4de68 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x556302c4df50 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x556302c4e168 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x556302c4e010 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556302c4e318 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x556302c4e220 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x556302c4e460 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x556302c4e3d0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x556302c4ef80 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x556302c4eef0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556302c4f0c8 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x556302c4f038 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556302c4f190 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x556302c4f2d8 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x556302c4f248 <col:28> col:31 'int'
|-CXXMethodDecl 0x556302c4f3a0 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x556302c4f4e8 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x556302c4f458 <col:28> col:31 'int'
|-CXXMethodDecl 0x556302c4f668 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x556302c4f5a0 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556302c4f7b0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x556302c4f720 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556302c4f878 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x556302c4fa38 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x556302c4f928 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x556302c4f9a0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556302c4fc88 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x556302c4faf8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x556302c4fb70 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x556302c4fd38 <col:86> "" ""
|-CXXMethodDecl 0x556302c4ffa8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x556302c4fe18 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x556302c4fe90 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556302c50158 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x556302c50068 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x556302c50308 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x556302c50210 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x556302c505d8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x556302c503c0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x556302c50438 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x556302c504b0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556302c508b8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x556302c506a0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x556302c50718 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x556302c50790 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x556302c50970 <col:115> "" ""
|-AccessSpecDecl 0x556302c509e0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x556302c50a18 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556302c51120 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x556302c51120
| `-ParmVarDecl 0x556302c51228 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x556302c512c8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x556302c512c8
| `-ParmVarDecl 0x556302c513d8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x556302cefcc8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x556302ee55c0 <col:7>
|-CXXConstructorDecl 0x556302cefda0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x556302cefda0
| `-ParmVarDecl 0x556302cefeb8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x556302ceff28 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x556302ceff28
| `-ParmVarDecl 0x556302cf0038 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x556302ee7f30 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556302ed0648 prev 0x556302ec2b70 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x556302ed0740 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x556302ed0830 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x556302ed0958 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x556302ed0ad8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x556302ed0c58 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x556302ed0dd8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x556302ee5728 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x556302ee5f98 <col:11>
|-CXXDestructorDecl 0x556302ee5800 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x556302ee5938 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x556302ee5938
| `-ParmVarDecl 0x556302ee5a48 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x556302ee5ae8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x556302ee5ae8
| `-ParmVarDecl 0x556302ee5bf8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x556302ee8928 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x556302ee8a38 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x556302ee8cb8 <col:11>
|   `-ReturnStmt 0x556302ee8ca8 <col:11>
|     `-UnaryOperator 0x556302ee8c90 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x556302ee8c80 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x556302ee8aa8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x556302ee8aa8
  `-ParmVarDecl 0x556302ee8bb8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556302ed0e40 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x556302ed0f58 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x556302ed0ff8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x556302ed1060 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x556302ed10c8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x556302ed1130 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x556302ed1190 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x556302ed1250 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x556302ed12b0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x556302ed1310 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x556302ee5638 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x556302ed0ff8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x556302ee5fa8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x556302ee6000 <col:12>
|-CXXConstructorDecl 0x556302ee5c68 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x556302ee5c68
| `-ParmVarDecl 0x556302ee5d78 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x556302ee5e18 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x556302ee5e18
| `-ParmVarDecl 0x556302ee5f28 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x556302ee8010 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556302ebc240 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x556302ebc3c8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x556302ebc458 <col:16, col:22> col:16 public
|-EnumDecl 0x556302ebc480 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x556302ebc580 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x556302ebc660 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302ebc560 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x556302ebc540 <col:21> 'int' 28
| `-EnumConstantDecl 0x556302ebc610 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x556302ebc678 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556302ebc5f0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x556302ebc5d0 <col:22> 'int' 64
|-CXXMethodDecl 0x556302ebc9b8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x556302ebc6a0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x556302ebc720 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x556302ebc798 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x556302ebc810 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x556302ebca78 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x556302ebcc78 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x556302ebcaf0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x556302ebcb68 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x556302ebcd28 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x556302ebce88 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x556302ebcd98 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x556302ebcf30 <col:72> warn_unused_result ""
|-TypedefDecl 0x556302ebd260 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x556302ebd1f0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x556302ebd190 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x556302ebd150 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55630298b2d0 'void'
|       |-PointerType 0x556302c38580 'unsigned char *'
|       | `-BuiltinType 0x55630298b3d0 'unsigned char'
|       |-TypedefType 0x556302a347f0 'size_t' sugar
|       | |-Typedef 0x5563029fbb20 'size_t'
|       | `-BuiltinType 0x55630298b430 'unsigned long'
|       `-PointerType 0x55630298bad0 'void *'
|         `-BuiltinType 0x55630298b2d0 'void'
|-CXXMethodDecl 0x556302ebd6d8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x556302ebd2d0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x556302ebd348 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x556302ebd3e0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x556302ebd460 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x556302edbb90 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x556302edbb78 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x556302edbb40 <col:58> 'int' 0
| |-ParmVarDecl 0x556302ebd4e0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x556302edbbb8 <col:76> 'int' 0
| |-ParmVarDecl 0x556302ebd560 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x556302edbbd8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x556302ebd7a8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x556302ebd828 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x556302ebd8e8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x556302ebd988 <col:20>
| `-OptimizeNoneAttr 0x556302ebd9e0 <col:30>
|-CXXMethodDecl 0x556302ebda58 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x556302ebdaf8 <col:20>
| `-OptimizeNoneAttr 0x556302ebdb50 <col:30>
|-CXXMethodDecl 0x556302ebdbc8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x556302ebdc68 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x556302ebdd18 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x556302ebddb8 <col:20>
| |-OptimizeNoneAttr 0x556302ebde10 <col:30>
| `-WarnUnusedResultAttr 0x556302ebde38 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x556302ebde90 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x556302ebdf30 <col:20>
| `-OptimizeNoneAttr 0x556302ebdf88 <col:30>
|-CXXMethodDecl 0x556302ebdfd8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x556302ebe078 <col:20>
| `-OptimizeNoneAttr 0x556302ebe0d0 <col:30>
|-CXXMethodDecl 0x556302ebe118 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x556302ebe1b8 <col:20>
| `-OptimizeNoneAttr 0x556302ebe210 <col:30>
|-CXXMethodDecl 0x556302ebe258 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x556302ebe318 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x556302ebe3e0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x556302ebe4a8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x556302ebe568 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x556302ebe688 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x556302edbca0 <col:54, line:99:5>
|   `-ReturnStmt 0x556302edbc90 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x556302edbc78 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x556302edbc48 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x556302edaa38
|         `-CXXThisExpr 0x556302edbc38 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x556302ebe828 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x556302ebe738 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x556302edbd50 <col:67, line:103:5>
|   `-BinaryOperator 0x556302edbd30 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x556302edbcc8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x556302edaa38
|     | `-CXXThisExpr 0x556302edbcb8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x556302edbd18 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x556302edbcf8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x556302ebe738 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x556302ebe920 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x556302edbdd0 <col:33, line:107:5>
|   `-ReturnStmt 0x556302edbdc0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x556302edbda8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x556302edbd78 <col:16> 'void *' lvalue ->_destructor_argument 0x556302edaaa0
|         `-CXXThisExpr 0x556302edbd68 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x556302ebe9e0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x556302edc400 <col:25, line:113:5>
|   |-ParenExpr 0x556302edc148 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x556302edc118 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x556302edbe88 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x556302edbe60 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x556302edbe28 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x556302edbdf8 <col:24> '<bound member function type>' ->shared 0x556302ebda58
|   |   |       `-ImplicitCastExpr 0x556302edbe48 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x556302edbde8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x556302edbee8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556302edbec8 <col:42> 'int' 0
|   |   `-CallExpr 0x556302edc078 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x556302edc060 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556302edc040 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556302a2b600 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556302edc0b8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302edbf58 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x556302edc0d0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302edbf80 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556302edc0e8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556302edbfb8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x556302edc100 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556302edc028 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556302edc010 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556302edbfd8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x556302edc348 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x556302edc178 <col:2> 'unsigned char *' lvalue ->_head 0x556302ed1450
|   | | `-CXXThisExpr 0x556302edc168 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x556302edc330 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x556302edc310 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x556302edc1b8 <col:10> 'unsigned char *' lvalue ->_data 0x556302ed14b8
|   |     | `-CXXThisExpr 0x556302edc1a8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x556302edc2f8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x556302edc2d8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x556302edc1f8 <col:18> 'unsigned char *' lvalue ->_tail 0x556302eda910
|   |         | `-CXXThisExpr 0x556302edc1e8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x556302edc2c0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x556302edc2a0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x556302edc238 <col:26> 'unsigned char *' lvalue ->_end 0x556302eda978
|   |             | `-CXXThisExpr 0x556302edc228 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x556302edc288 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x556302edc268 <col:33> 'int' 0
|   `-BinaryOperator 0x556302edc3e0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x556302edc378 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x556302edaa38
|     | `-CXXThisExpr 0x556302edc368 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x556302edc3c8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x556302edc3a8 <col:16> 'int' 0
|-CXXMethodDecl 0x556302ebeb20 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x556302ebea90 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x556302ebebc8 <col:20>
| |-OptimizeNoneAttr 0x556302ebec20 <col:30>
| `-WarnUnusedResultAttr 0x556302ebec48 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x556302ebed18 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x556302ebec88 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x556302ebedc0 <col:20>
| |-OptimizeNoneAttr 0x556302ebee18 <col:30>
| `-WarnUnusedResultAttr 0x556302ebee40 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x556302ebef78 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x556302ebee80 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x556302ebf020 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x556302ebf120 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x556302ebf090 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x556302ebf1c8 <col:20>
| `-OptimizeNoneAttr 0x556302ebf220 <col:30>
|-CXXMethodDecl 0x556302ebf2e8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x556302ebf258 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x556302ebf390 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x556302ebf490 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x556302ebf400 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x556302ebf538 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x556302ebf638 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x556302ebf5a8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x556302ebf6e0 <col:20>
| `-OptimizeNoneAttr 0x556302ebf738 <col:30>
|-CXXMethodDecl 0x556302ebf8c8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x556302ebf778 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x556302ebf7f0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x556302edbbf8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x556302ebf978 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x556302ebfb78 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x556302ebf9f0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x556302ebfa68 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556302ebfd88 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x556302ebfc38 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x556302ebfcb0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556302ebff98 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x556302ebfe48 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x556302ebfec8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x556302edbc08 <col:39> 'int' 0
|-CXXMethodDecl 0x556302ec0068 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x556302ec0130 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x556302ec01f8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x556302ec02b8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x556302ec0398 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x556302ec04e0 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x556302ec0450 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x556302ec06b0 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x556302ec05a0 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x556302ec0618 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556302ec0780 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x556302ec0840 <line:288:5, col:66> col:45 used has_network_header 'bool () const'
| |-NoInlineAttr 0x556302ec08e0 <col:20>
| `-OptimizeNoneAttr 0x556302ec0938 <col:30>
|-CXXMethodDecl 0x556302ec0988 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x556302ec0a28 <col:20>
| `-OptimizeNoneAttr 0x556302ec0a80 <col:30>
|-CXXMethodDecl 0x556302ec0ad0 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x556302ec0b90 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x556302ec0c58 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x556302ec0cf8 <col:20>
| `-OptimizeNoneAttr 0x556302ec0d50 <col:30>
|-CXXMethodDecl 0x556302ec0ea0 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x556302ec0d90 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x556302ec0e08 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556302ec0ff0 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x556302ec0f60 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556302ec10b8 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x556302ec1178 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x556302ec1218 <col:20>
| `-OptimizeNoneAttr 0x556302ec1270 <col:30>
|-CXXMethodDecl 0x556302ec12c0 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x556302ec1360 <col:20>
| `-OptimizeNoneAttr 0x556302ec13b8 <col:30>
|-CXXMethodDecl 0x556302ec1408 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x556302ec14d0 <line:300:5, col:63> col:44 used transport_length 'int () const'
| |-NoInlineAttr 0x556302ec1570 <col:20>
| `-OptimizeNoneAttr 0x556302ec15c8 <col:30>
|-CXXMethodDecl 0x556302ec1610 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x556302ec1728 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x556302ec1898 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x556302ec17d8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x556302ec1988 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x556302ec1a28 <col:20>
| `-OptimizeNoneAttr 0x556302ec1a80 <col:30>
|-CXXMethodDecl 0x556302ec1ad0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x556302ec1b90 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x556302ec1dc8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x556302ec1c40 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x556302ec1cb8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x556302ec1e78 <col:20>
| `-OptimizeNoneAttr 0x556302ec1ed0 <col:30>
|-CXXMethodDecl 0x556302ec1f78 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x556302ec2018 <col:20>
| `-OptimizeNoneAttr 0x556302ec2070 <col:30>
|-CXXMethodDecl 0x556302ec20c0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x556302ec2160 <col:20>
| `-OptimizeNoneAttr 0x556302ec21b8 <col:30>
|-CXXMethodDecl 0x556302ec2200 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x556302ec22a0 <col:20>
| `-OptimizeNoneAttr 0x556302ec22f8 <col:30>
|-CXXMethodDecl 0x556302ec23f8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x556302ec2330 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x556302ec24a0 <col:20>
| `-OptimizeNoneAttr 0x556302ec24f8 <col:30>
|-CXXMethodDecl 0x556302ec26b8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x556302ec2530 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x556302ec25a8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x556302ec2768 <col:20>
| `-OptimizeNoneAttr 0x556302ec27c0 <col:30>
|-CXXMethodDecl 0x556302ec2868 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x556302ec2988 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x556302ec2aa8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x556302ec2b48 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x556302ec2b70 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x556302ec2c98 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x556302ec2d38 <col:20>
| `-OptimizeNoneAttr 0x556302ec2d90 <col:30>
|-CXXMethodDecl 0x556302ec2e38 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x556302ec2ed8 <col:20>
| `-OptimizeNoneAttr 0x556302ec2f30 <col:30>
|-AccessSpecDecl 0x556302ec2f58 <line:344:3, col:9> col:3 public
|-EnumDecl 0x556302ec2f80 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x556302ec3080 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x556302ec30d0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556302ec3060 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x556302ec3040 <col:14> 'int' 48
|-CXXMethodDecl 0x556302ec3138 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x556302ec31d8 <col:20>
| `-OptimizeNoneAttr 0x556302ec3230 <col:30>
|-CXXMethodDecl 0x556302ec32a8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x556302ec3348 <col:20>
| `-OptimizeNoneAttr 0x556302ec33a0 <col:30>
|-CXXMethodDecl 0x556302ec3468 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x556302ec33d8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x556302ec3608 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x556302ec37a8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x556302ec36b8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x556302ec3850 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x556302ec3950 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x556302ec3d00 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302ec3930 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x556302ec3910 <col:9> 'int' 0
| |-EnumConstantDecl 0x556302ec39e0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x556302ec3d18 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302ec39c0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x556302ec39a0 <col:14> 'int' 1
| |-EnumConstantDecl 0x556302ec3a70 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x556302ec3d30 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302ec3a50 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x556302ec3a30 <col:14> 'int' 2
| |-EnumConstantDecl 0x556302ec3b00 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x556302ec3d48 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302ec3ae0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x556302ec3ac0 <col:14> 'int' 3
| |-EnumConstantDecl 0x556302ec3b90 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x556302ec3d60 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302ec3b70 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x556302ec3b50 <col:13> 'int' 4
| |-EnumConstantDecl 0x556302ec3c20 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x556302ec3d78 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302ec3c00 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x556302ec3be0 <col:13> 'int' 5
| `-EnumConstantDecl 0x556302ec3cb0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x556302ec3d90 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556302ec3c90 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x556302ec3c70 <col:14> 'int' 6
|-CXXMethodDecl 0x556302ec3df8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x556302ec3e98 <col:20>
| `-OptimizeNoneAttr 0x556302ec3ef0 <col:30>
|-CXXMethodDecl 0x556302ec3fe8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x556302ec3f28 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x556302ec4090 <col:20>
| `-OptimizeNoneAttr 0x556302ec40e8 <col:30>
|-CXXMethodDecl 0x556302ec4158 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x556302ec4280 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x556302ec4448 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x556302ec4380 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x556302ec4510 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x556302ec45d8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x556302ec4718 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x556302ec4688 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x556302ec47c0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x556302ec48c0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x556302ec4ac0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302ec48a0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x556302ec4880 <col:23> 'int' 0
| |-EnumConstantDecl 0x556302ec4950 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x556302ec4ad8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302ec4930 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x556302ec4910 <col:45> 'int' 4
| |-EnumConstantDecl 0x556302ec49e0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x556302ec4af0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302ec49c0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x556302ec49a0 <col:24> 'int' 0
| `-EnumConstantDecl 0x556302ec4a70 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x556302ec4b08 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556302ec4a50 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x556302ec4a30 <col:47> 'int' 16
|-CXXMethodDecl 0x556302ec4b68 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x556302ec4cd8 <line:436:5, col:75> col:45 used set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x556302ec4c18 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x556302ec4d80 <col:20>
| `-OptimizeNoneAttr 0x556302ec4dd8 <col:30>
|-CXXMethodDecl 0x556302ec4e28 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x556302edc520 <col:18, col:36>
|   `-ReturnStmt 0x556302edc510 <col:20, col:33>
|     `-ImplicitCastExpr 0x556302edc4f8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x556302edc4d8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x556302edc4a8 <col:27> '<bound member function type>' ->xanno 0x556302ec2e38
|           `-CXXThisExpr 0x556302edc498 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x556302ec4f20 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x556302edc630 <col:30, col:48>
|   `-ReturnStmt 0x556302edc620 <col:32, col:45>
|     `-ImplicitCastExpr 0x556302edc608 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x556302edc5e8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x556302edc5b8 <col:39> '<bound member function type>' ->xanno 0x556302ec2c98
|           `-CXXThisExpr 0x556302edc5a8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x556302ec5008 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x556302edc7c8 <col:24, col:50>
|   `-ReturnStmt 0x556302edc7b8 <col:26, col:47>
|     `-UnaryOperator 0x556302edc7a0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x556302edc780 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x556302edc768 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x556302edc718 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x556302ed0958
|         |   `-CXXMemberCallExpr 0x556302edc6f8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x556302edc6c8 <col:34> '<bound member function type>' ->xanno 0x556302ec2e38
|         |       `-CXXThisExpr 0x556302edc6b8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x556302edc748 <col:46> 'int' 0
|-CXXMethodDecl 0x556302ec50f8 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x556302edc998 <col:36, col:62>
|   `-ReturnStmt 0x556302edc988 <col:38, col:59>
|     `-UnaryOperator 0x556302edc970 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x556302edc950 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x556302edc938 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x556302edc8b0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x556302ed0958
|         |   `-CXXMemberCallExpr 0x556302edc890 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x556302edc860 <col:46> '<bound member function type>' ->xanno 0x556302ec2c98
|         |       `-CXXThisExpr 0x556302edc850 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x556302edc8e0 <col:58> 'int' 0
|-CXXMethodDecl 0x556302ec5218 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x556302edcb30 <col:26, col:53>
|   `-ReturnStmt 0x556302edcb20 <col:28, col:50>
|     `-UnaryOperator 0x556302edcb08 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x556302edcae8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x556302edcad0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x556302edca80 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x556302ed0c58
|         |   `-CXXMemberCallExpr 0x556302edca60 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x556302edca30 <col:36> '<bound member function type>' ->xanno 0x556302ec2e38
|         |       `-CXXThisExpr 0x556302edca20 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x556302edcab0 <col:49> 'int' 0
|-CXXMethodDecl 0x556302ec5338 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x556302edcd08 <col:38, col:65>
|   `-ReturnStmt 0x556302edccf8 <col:40, col:62>
|     `-UnaryOperator 0x556302edcce0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x556302edccc0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x556302edcca8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x556302edcc18 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x556302ed0c58
|         |   `-CXXMemberCallExpr 0x556302edcbf8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x556302edcbc8 <col:48> '<bound member function type>' ->xanno 0x556302ec2c98
|         |       `-CXXThisExpr 0x556302edcbb8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x556302edcc48 <col:61> 'int' 0
|-CXXMethodDecl 0x556302ec54e8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x556302ec53f0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x556302edd3d8 <col:34, line:463:5>
|   |-ParenExpr 0x556302edd220 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x556302edd1f0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x556302edce58 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556302edce28 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556302edcd78 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x556302edcd60 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556302edcd20 <col:23> 'int' lvalue ParmVar 0x556302ec53f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x556302edcd40 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x556302edce08 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x556302edcdd8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556302edcd98 <col:33> 'int' lvalue ParmVar 0x556302ec53f0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x556302edcdf0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x556302edcdb8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x556302ec3080 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x556302edceb8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556302edce98 <col:56> 'int' 0
|   |   `-CallExpr 0x556302edd150 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x556302edd138 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556302edd118 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556302a2b600 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556302edd190 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302edcfa8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x556302edd1a8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302edcfd8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556302edd1c0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556302edd010 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x556302edd1d8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556302edd100 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556302edd0e8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556302edd0a8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x556302edd3c8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x556302edd3b0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x556302edd390 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x556302edd360 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x556302edd310 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x556302ed0958
|         |   `-CXXMemberCallExpr 0x556302edd2f0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x556302edd2c0 <col:9> '<bound member function type>' ->xanno 0x556302ec2c98
|         |       `-CXXThisExpr 0x556302edd2b0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x556302edd378 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x556302edd340 <col:21> 'int' lvalue ParmVar 0x556302ec53f0 'i' 'int'
|-CXXMethodDecl 0x556302ec5738 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x556302ec55a8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x556302ec5620 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x556302edda68 <col:40, line:472:5>
|   |-ParenExpr 0x556302edd880 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x556302edd850 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x556302edd530 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556302edd500 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556302edd450 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x556302edd438 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556302edd3f8 <col:23> 'int' lvalue ParmVar 0x556302ec55a8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x556302edd418 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x556302edd4e0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x556302edd4b0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556302edd470 <col:33> 'int' lvalue ParmVar 0x556302ec55a8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x556302edd4c8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x556302edd490 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x556302ec3080 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x556302edd590 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556302edd570 <col:56> 'int' 0
|   |   `-CallExpr 0x556302edd7b0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x556302edd798 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556302edd778 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556302a2b600 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556302edd7f0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302edd600 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x556302edd808 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302edd630 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556302edd820 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556302edd668 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x556302edd838 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556302edd760 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556302edd748 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556302edd708 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x556302edda48 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x556302edd9f0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x556302edd9c0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x556302edd970 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x556302ed0958
|     | |   `-CXXMemberCallExpr 0x556302edd950 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x556302edd920 <col:2> '<bound member function type>' ->xanno 0x556302ec2e38
|     | |       `-CXXThisExpr 0x556302edd910 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x556302edd9d8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x556302edd9a0 <col:14> 'int' lvalue ParmVar 0x556302ec55a8 'i' 'int'
|     `-ImplicitCastExpr 0x556302edda30 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x556302edda10 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x556302ec5620 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x556302ec58f8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x556302ec5800 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x556302ede1e8 <col:36, line:485:5>
|   |-ParenExpr 0x556302eddf50 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x556302eddf20 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x556302eddc00 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556302eddbd0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556302eddae0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x556302eddac8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556302edda88 <col:23> 'int' lvalue ParmVar 0x556302ec5800 'i' 'int'
|   |   |   | `-IntegerLiteral 0x556302eddaa8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x556302eddbb0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x556302eddb98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556302eddb00 <col:33> 'int' lvalue ParmVar 0x556302ec5800 'i' 'int'
|   |   |     `-BinaryOperator 0x556302eddb78 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x556302eddb60 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x556302eddb20 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x556302ec3080 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x556302eddb40 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x556302eddc60 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556302eddc40 <col:60> 'int' 0
|   |   `-CallExpr 0x556302edde80 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x556302edde68 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556302edde48 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556302a2b600 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556302eddec0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302eddcd0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x556302edded8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302eddd08 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556302eddef0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556302eddd40 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x556302eddf08 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556302edde30 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556302edde18 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556302edddd8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x556302ede1d8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x556302ede1c0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x556302ede1a8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x556302ede178 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x556302ede118 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x556302ede0e8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x556302ede060 <col:61, col:70> 'char const[48]' lvalue ->c 0x556302ed0830
|             |   `-CXXMemberCallExpr 0x556302ede040 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x556302ede010 <col:61> '<bound member function type>' ->xanno 0x556302ec2c98
|             |       `-CXXThisExpr 0x556302ede000 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x556302ede100 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x556302ede090 <col:74> 'int' lvalue ParmVar 0x556302ec5800 'i' 'int'
|-CXXMethodDecl 0x556302ec5b48 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x556302ec59b8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x556302ec5a30 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x556302ede958 <col:42, line:500:5>
|   |-ParenExpr 0x556302ede6d0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x556302ede6a0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x556302ede380 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556302ede350 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556302ede260 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x556302ede248 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556302ede208 <col:23> 'int' lvalue ParmVar 0x556302ec59b8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x556302ede228 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x556302ede330 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x556302ede318 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556302ede280 <col:33> 'int' lvalue ParmVar 0x556302ec59b8 'i' 'int'
|   |   |     `-BinaryOperator 0x556302ede2f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x556302ede2e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x556302ede2a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x556302ec3080 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x556302ede2c0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x556302ede3e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556302ede3c0 <col:60> 'int' 0
|   |   `-CallExpr 0x556302ede600 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x556302ede5e8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556302ede5c8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556302a2b600 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556302ede640 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302ede450 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x556302ede658 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302ede488 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556302ede670 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556302ede4c0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x556302ede688 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556302ede5b0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556302ede598 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556302ede558 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x556302ede938 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x556302ede8c8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x556302ede898 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x556302ede840 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x556302ede810 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x556302ede7c0 <col:48, col:57> 'char [48]' lvalue ->c 0x556302ed0830
|     |     |   `-CXXMemberCallExpr 0x556302ede7a0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x556302ede770 <col:48> '<bound member function type>' ->xanno 0x556302ec2e38
|     |     |       `-CXXThisExpr 0x556302ede760 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x556302ede828 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x556302ede7f0 <col:61> 'int' lvalue ParmVar 0x556302ec59b8 'i' 'int'
|     `-ImplicitCastExpr 0x556302ede920 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x556302ede8e0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x556302ec5a30 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x556302ec5d08 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x556302ec5c10 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x556302edf0b8 <col:35, line:513:5>
|   |-ParenExpr 0x556302ededc8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x556302eded98 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x556302edeaf0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556302edeac0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556302ede9d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x556302ede9b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556302ede978 <col:23> 'int' lvalue ParmVar 0x556302ec5c10 'i' 'int'
|   |   |   | `-IntegerLiteral 0x556302ede998 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x556302edeaa0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x556302edea88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556302ede9f0 <col:33> 'int' lvalue ParmVar 0x556302ec5c10 'i' 'int'
|   |   |     `-BinaryOperator 0x556302edea68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x556302edea50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x556302edea10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x556302ec3080 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x556302edea30 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x556302edeb50 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556302edeb30 <col:60> 'int' 0
|   |   `-CallExpr 0x556302edecf8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x556302edece0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556302edecc0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556302a2b600 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556302eded38 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302edebc0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x556302eded50 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302edebf8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556302eded68 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556302edec30 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x556302eded80 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556302edeca8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556302edec90 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556302edec50 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x556302edf0a8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x556302edf090 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x556302edf078 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x556302edf048 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x556302edefc0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x556302edef90 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x556302edef40 <col:60, col:69> 'char const[48]' lvalue ->c 0x556302ed0830
|             |   `-CXXMemberCallExpr 0x556302edef20 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x556302edeef0 <col:60> '<bound member function type>' ->xanno 0x556302ec2c98
|             |       `-CXXThisExpr 0x556302edeee0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x556302edefa8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x556302edef70 <col:73> 'int' lvalue ParmVar 0x556302ec5c10 'i' 'int'
|-CXXMethodDecl 0x556302ec5f58 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x556302ec5dc8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x556302ec5e40 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x556302edf7c8 <col:41, line:528:5>
|   |-ParenExpr 0x556302edf560 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x556302edf530 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x556302edf250 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556302edf220 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556302edf130 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x556302edf118 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556302edf0d8 <col:23> 'int' lvalue ParmVar 0x556302ec5dc8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x556302edf0f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x556302edf200 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x556302edf1e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556302edf150 <col:33> 'int' lvalue ParmVar 0x556302ec5dc8 'i' 'int'
|   |   |     `-BinaryOperator 0x556302edf1c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x556302edf1b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x556302edf170 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x556302ec3080 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x556302edf190 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x556302edf2b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556302edf290 <col:60> 'int' 0
|   |   `-CallExpr 0x556302edf490 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x556302edf478 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556302edf458 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556302a2b600 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556302edf4d0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302edf320 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x556302edf4e8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302edf358 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556302edf500 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556302edf390 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x556302edf518 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556302edf440 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556302edf428 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556302edf3e8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x556302edf7a8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x556302edf758 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x556302edf728 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x556302edf6d0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x556302edf6a0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x556302edf650 <col:47, col:56> 'char [48]' lvalue ->c 0x556302ed0830
|     |     |   `-CXXMemberCallExpr 0x556302edf630 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x556302edf600 <col:47> '<bound member function type>' ->xanno 0x556302ec2e38
|     |     |       `-CXXThisExpr 0x556302edf5f0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x556302edf6b8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x556302edf680 <col:60> 'int' lvalue ParmVar 0x556302ec5dc8 'i' 'int'
|     `-ImplicitCastExpr 0x556302edf790 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x556302edf770 <col:65> 'int16_t':'short' lvalue ParmVar 0x556302ec5e40 'x' 'int16_t':'short'
|-CXXMethodDecl 0x556302ec6118 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x556302ec6020 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x556302edfe98 <col:36, line:541:5>
|   |-ParenExpr 0x556302edfc38 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x556302edfc08 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x556302edf960 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556302edf930 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556302edf840 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x556302edf828 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556302edf7e8 <col:23> 'int' lvalue ParmVar 0x556302ec6020 'i' 'int'
|   |   |   | `-IntegerLiteral 0x556302edf808 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x556302edf910 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x556302edf8f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556302edf860 <col:33> 'int' lvalue ParmVar 0x556302ec6020 'i' 'int'
|   |   |     `-BinaryOperator 0x556302edf8d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x556302edf8c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x556302edf880 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x556302ec3080 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x556302edf8a0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x556302edf9c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556302edf9a0 <col:60> 'int' 0
|   |   `-CallExpr 0x556302edfb68 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x556302edfb50 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556302edfb30 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556302a2b600 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556302edfba8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302edfa30 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x556302edfbc0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302edfa68 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556302edfbd8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556302edfaa0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x556302edfbf0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556302edfb18 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556302edfb00 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556302edfac0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x556302edfe88 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x556302edfe70 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x556302edfe58 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x556302edfe28 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x556302edfdd0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x556302edfda0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x556302edfd50 <col:61, col:70> 'char const[48]' lvalue ->c 0x556302ed0830
|             |   `-CXXMemberCallExpr 0x556302edfd30 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x556302edfd00 <col:61> '<bound member function type>' ->xanno 0x556302ec2c98
|             |       `-CXXThisExpr 0x556302edfcf0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x556302edfdb8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x556302edfd80 <col:74> 'int' lvalue ParmVar 0x556302ec6020 'i' 'int'
|-CXXMethodDecl 0x556302ec62e8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x556302ec61d8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x556302ec6250 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x556302ec6398 <col:20>
| `-OptimizeNoneAttr 0x556302ec63f0 <col:30>
|-CXXMethodDecl 0x556302ec6528 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x556302ec6430 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x556302ee0568 <col:35, line:562:5>
|   |-ParenExpr 0x556302ee0308 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x556302ee02d8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x556302ee0030 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556302ee0000 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556302edff10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x556302edfef8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556302edfeb8 <col:23> 'int' lvalue ParmVar 0x556302ec6430 'i' 'int'
|   |   |   | `-IntegerLiteral 0x556302edfed8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x556302edffe0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x556302edffc8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556302edff30 <col:33> 'int' lvalue ParmVar 0x556302ec6430 'i' 'int'
|   |   |     `-BinaryOperator 0x556302edffa8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x556302edff90 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x556302edff50 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x556302ec3080 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x556302edff70 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x556302ee0090 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556302ee0070 <col:60> 'int' 0
|   |   `-CallExpr 0x556302ee0238 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x556302ee0220 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556302ee0200 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556302a2b600 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556302ee0278 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302ee0100 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x556302ee0290 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302ee0138 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556302ee02a8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556302ee0170 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x556302ee02c0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556302ee01e8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556302ee01d0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556302ee0190 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x556302ee0558 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x556302ee0540 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x556302ee0528 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x556302ee04f8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x556302ee04a0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x556302ee0470 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x556302ee0420 <col:60, col:69> 'char const[48]' lvalue ->c 0x556302ed0830
|             |   `-CXXMemberCallExpr 0x556302ee0400 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x556302ee03d0 <col:60> '<bound member function type>' ->xanno 0x556302ec2c98
|             |       `-CXXThisExpr 0x556302ee03c0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x556302ee0488 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x556302ee0450 <col:73> 'int' lvalue ParmVar 0x556302ec6430 'i' 'int'
|-CXXMethodDecl 0x556302ec6738 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x556302ec65e8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x556302ec6660 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x556302ee0c48 <col:41, line:577:5>
|   |-ParenExpr 0x556302ee09d8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x556302ee09a8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x556302ee0700 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556302ee06d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556302ee05e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x556302ee05c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556302ee0588 <col:23> 'int' lvalue ParmVar 0x556302ec65e8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x556302ee05a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x556302ee06b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x556302ee0698 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556302ee0600 <col:33> 'int' lvalue ParmVar 0x556302ec65e8 'i' 'int'
|   |   |     `-BinaryOperator 0x556302ee0678 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x556302ee0660 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x556302ee0620 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x556302ec3080 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x556302ee0640 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x556302ee0760 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556302ee0740 <col:60> 'int' 0
|   |   `-CallExpr 0x556302ee0908 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x556302ee08f0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556302ee08d0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556302a2b600 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556302ee0948 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302ee07d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x556302ee0960 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302ee0808 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556302ee0978 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556302ee0840 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x556302ee0990 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556302ee08b8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556302ee08a0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556302ee0860 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x556302ee0c28 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x556302ee0bd8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x556302ee0ba8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x556302ee0b48 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x556302ee0b18 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x556302ee0ac8 <col:47, col:56> 'char [48]' lvalue ->c 0x556302ed0830
|     |     |   `-CXXMemberCallExpr 0x556302ee0aa8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x556302ee0a78 <col:47> '<bound member function type>' ->xanno 0x556302ec2e38
|     |     |       `-CXXThisExpr 0x556302ee0a68 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x556302ee0b30 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x556302ee0af8 <col:60> 'int' lvalue ParmVar 0x556302ec65e8 'i' 'int'
|     `-ImplicitCastExpr 0x556302ee0c10 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x556302ee0bf0 <col:65> 'int32_t':'int' lvalue ParmVar 0x556302ec6660 'x' 'int32_t':'int'
|-CXXMethodDecl 0x556302ec68f8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x556302ec6800 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x556302ee1378 <col:36, line:591:5>
|   |-ParenExpr 0x556302ee10b8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x556302ee1088 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x556302ee0de0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556302ee0db0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556302ee0cc0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x556302ee0ca8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556302ee0c68 <col:23> 'int' lvalue ParmVar 0x556302ec6800 'i' 'int'
|   |   |   | `-IntegerLiteral 0x556302ee0c88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x556302ee0d90 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x556302ee0d78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556302ee0ce0 <col:33> 'int' lvalue ParmVar 0x556302ec6800 'i' 'int'
|   |   |     `-BinaryOperator 0x556302ee0d58 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x556302ee0d40 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x556302ee0d00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x556302ec3080 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x556302ee0d20 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x556302ee0e40 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556302ee0e20 <col:60> 'int' 0
|   |   `-CallExpr 0x556302ee0fe8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x556302ee0fd0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556302ee0fb0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556302a2b600 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556302ee1028 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302ee0eb0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x556302ee1040 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302ee0ee8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556302ee1058 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556302ee0f20 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x556302ee1070 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556302ee0f98 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556302ee0f80 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556302ee0f40 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x556302ee1368 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x556302ee1350 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x556302ee1338 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x556302ee1308 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x556302ee1280 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x556302ee1250 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x556302ee1200 <col:61, col:70> 'char const[48]' lvalue ->c 0x556302ed0830
|             |   `-CXXMemberCallExpr 0x556302ee11e0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x556302ee11b0 <col:61> '<bound member function type>' ->xanno 0x556302ec2c98
|             |       `-CXXThisExpr 0x556302ee11a0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x556302ee1268 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x556302ee1230 <col:74> 'int' lvalue ParmVar 0x556302ec6800 'i' 'int'
|-CXXMethodDecl 0x556302ec6b48 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x556302ec69b8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x556302ec6a30 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x556302ee1a58 <col:42, line:606:5>
|   |-ParenExpr 0x556302ee17e8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x556302ee17b8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x556302ee1510 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556302ee14e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556302ee13f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x556302ee13d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556302ee1398 <col:23> 'int' lvalue ParmVar 0x556302ec69b8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x556302ee13b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x556302ee14c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x556302ee14a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556302ee1410 <col:33> 'int' lvalue ParmVar 0x556302ec69b8 'i' 'int'
|   |   |     `-BinaryOperator 0x556302ee1488 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x556302ee1470 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x556302ee1430 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x556302ec3080 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x556302ee1450 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x556302ee1570 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556302ee1550 <col:60> 'int' 0
|   |   `-CallExpr 0x556302ee1718 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x556302ee1700 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556302ee16e0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556302a2b600 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556302ee1758 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302ee15e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x556302ee1770 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302ee1618 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556302ee1788 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556302ee1650 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x556302ee17a0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556302ee16c8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556302ee16b0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556302ee1670 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x556302ee1a38 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x556302ee19e8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x556302ee19b8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x556302ee1958 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x556302ee1928 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x556302ee18d8 <col:48, col:57> 'char [48]' lvalue ->c 0x556302ed0830
|     |     |   `-CXXMemberCallExpr 0x556302ee18b8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x556302ee1888 <col:48> '<bound member function type>' ->xanno 0x556302ec2e38
|     |     |       `-CXXThisExpr 0x556302ee1878 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x556302ee1940 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x556302ee1908 <col:61> 'int' lvalue ParmVar 0x556302ec69b8 'i' 'int'
|     `-ImplicitCastExpr 0x556302ee1a20 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x556302ee1a00 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x556302ec6a30 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x556302ec6ce0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x556302ec6c10 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x556302ee22c8 <col:33, line:620:5>
|   |-ParenExpr 0x556302ee2040 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x556302ee2010 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x556302ee1c60 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556302ee1c30 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556302ee1ad0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x556302ee1ab8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556302ee1a78 <col:23> 'int' lvalue ParmVar 0x556302ec6c10 'i' 'int'
|   |   |   | `-IntegerLiteral 0x556302ee1a98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x556302ee1c10 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x556302ee1bf8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556302ee1af0 <col:33> 'int' lvalue ParmVar 0x556302ec6c10 'i' 'int'
|   |   |     `-BinaryOperator 0x556302ee1bd8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x556302ee1bc0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x556302ee1b10 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x556302ec3080 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x556302ee1b98 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x556302ee1b80 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x556302ee1b48 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x556302ee1cc0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556302ee1ca0 <col:79> 'int' 0
|   |   `-CallExpr 0x556302ee1f70 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x556302ee1f58 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556302ee1f38 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556302a2b600 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556302ee1fb0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302ee1da8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x556302ee1fc8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302ee1df0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556302ee1fe0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556302ee1e28 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x556302ee1ff8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556302ee1f20 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556302ee1f08 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556302ee1ec8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x556302ee22b8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x556302ee22a0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x556302ee2288 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x556302ee2258 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x556302ee21d0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x556302ee21a0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x556302ee2150 <col:67, col:76> 'char const[48]' lvalue ->c 0x556302ed0830
|             |   `-CXXMemberCallExpr 0x556302ee2130 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x556302ee2100 <col:67> '<bound member function type>' ->xanno 0x556302ec2c98
|             |       `-CXXThisExpr 0x556302ee20f0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x556302ee21b8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x556302ee2180 <col:80> 'int' lvalue ParmVar 0x556302ec6c10 'i' 'int'
|-CXXMethodDecl 0x556302ec6ef8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x556302ec6da0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x556302ec6e20 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x556302ee5520 <col:45, line:635:5>
|   |-ParenExpr 0x556302ee2838 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x556302ee2808 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x556302ee24d0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556302ee24a0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556302ee2340 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x556302ee2328 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x556302ee22e8 <col:23> 'int' lvalue ParmVar 0x556302ec6da0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x556302ee2308 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x556302ee2480 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x556302ee2468 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556302ee2360 <col:33> 'int' lvalue ParmVar 0x556302ec6da0 'i' 'int'
|   |   |     `-BinaryOperator 0x556302ee2448 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x556302ee2430 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x556302ee2380 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x556302ec3080 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x556302ee2408 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x556302ee23f0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x556302ee23b8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x556302ee2530 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556302ee2510 <col:79> 'int' 0
|   |   `-CallExpr 0x556302ee2768 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x556302ee2750 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556302ee2730 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556302a2b600 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556302ee27a8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302ee25a0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x556302ee27c0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302ee25e8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x556302ee27d8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556302ee2620 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x556302ee27f0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556302ee2718 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556302ee2700 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556302ee26b8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x556302ee5500 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x556302ee5468 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x556302ee5438 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x556302ee53e0 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x556302ee53b0 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x556302ee5360 <col:54, col:63> 'char [48]' lvalue ->c 0x556302ed0830
|     |     |   `-CXXMemberCallExpr 0x556302ee5340 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x556302ee28d8 <col:54> '<bound member function type>' ->xanno 0x556302ec2e38
|     |     |       `-CXXThisExpr 0x556302ee28c8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x556302ee53c8 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x556302ee5390 <col:67> 'int' lvalue ParmVar 0x556302ec6da0 'i' 'int'
|     `-CXXConstCastExpr 0x556302ee54d0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x556302ee54b8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x556302ee5480 <col:91> 'const void *' lvalue ParmVar 0x556302ec6e20 'x' 'const void *'
|-CXXMethodDecl 0x556302ec6fc8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x556302ee55a8 <col:34, line:640:5>
|   `-ReturnStmt 0x556302ee5598 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x556302ee5580 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x556302ee5550 <col:16> 'Packet *' lvalue ->_data_packet 0x556302ed13e8
|         `-CXXThisExpr 0x556302ee5540 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x556302ec7108 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x556302ec7078 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x556302edbc28 <col:46> 'bool' true
|-CXXMethodDecl 0x556302ec7288 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x556302ec71c0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x556302ec7330 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x556302ec7ae0 <line:660:22> "" ""
| |-EnumConstantDecl 0x556302ec7430 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x556302ec7b50 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302ec7410 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x556302ec73f0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x556302ebc580 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x556302ec74c0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x556302ec7b68 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302ec74a0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x556302ec7480 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x556302ebc610 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x556302ec7550 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x556302ec7b80 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302ec7530 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x556302ec7510 <col:21> 'int' 0
| |-EnumConstantDecl 0x556302ec75e0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x556302ec7b98 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302ec75c0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x556302ec75a0 <col:19> 'int' 16
| |-EnumConstantDecl 0x556302ec7670 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x556302ec7bb0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302ec7650 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x556302ec7630 <col:21> 'int' 16
| |-EnumConstantDecl 0x556302ec7700 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x556302ec7bc8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302ec76e0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x556302ec76c0 <col:19> 'int' 32
| |-EnumConstantDecl 0x556302ec7790 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x556302ec7be0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302ec7770 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x556302ec7750 <col:19> 'int' EnumConstant 0x556302ec75e0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x556302ec7820 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x556302ec7bf8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302ec7800 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x556302ec77e0 <col:19> 'int' EnumConstant 0x556302ec7700 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x556302ec78f0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x556302ec7c10 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302ec78d0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x556302ec78b0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x556302ec7870 <col:23> 'int' EnumConstant 0x556302ec7820 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x556302ec7890 <col:40> 'int' 2
| |-EnumConstantDecl 0x556302ec79c0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x556302ec7c28 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302ec79a0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x556302ec7980 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x556302ec7940 <col:23> 'int' EnumConstant 0x556302ec7820 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x556302ec7960 <col:40> 'int' 4
| `-EnumConstantDecl 0x556302ec7a90 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x556302ec7c40 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556302ec7a70 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x556302ec7a50 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x556302ec7a10 <col:23> 'int' EnumConstant 0x556302ec7820 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x556302ec7a30 <col:40> 'int' 8
|-CXXMethodDecl 0x556302ec7c80 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x556302ec7d20 <col:68> "" ""
|-CXXMethodDecl 0x556302ec7db8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x556302ec7e58 <col:45> "" ""
|-CXXMethodDecl 0x556302ec7ef0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x556302ec7f90 <col:57> "" ""
|-CXXMethodDecl 0x556302ec8028 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x556302ec80c8 <col:45> "" ""
|-CXXMethodDecl 0x556302ec8160 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x556302ec8200 <col:57> "" ""
|-CXXMethodDecl 0x556302ec8290 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x556302ec8330 <col:51> "" ""
|-CXXMethodDecl 0x556302ecd5a0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x556302ecd640 <col:63> "" ""
|-CXXMethodDecl 0x556302ecd6d0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x556302ecd770 <col:53> "" ""
|-CXXMethodDecl 0x556302ecd800 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x556302ecd8a0 <col:65> "" ""
|-CXXMethodDecl 0x556302ecd9b8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x556302ecd928 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x556302ecda60 <col:61> "" ""
|-CXXMethodDecl 0x556302ecdbf8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x556302ecdae8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x556302ecdb60 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x556302ecdca8 <col:67> "" ""
|-CXXMethodDecl 0x556302ecddc0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x556302ecdd30 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x556302ecde68 <col:63> "" ""
|-CXXMethodDecl 0x556302ece000 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x556302ecdef0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x556302ecdf68 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x556302ece0b0 <col:69> "" ""
|-CXXMethodDecl 0x556302ece1c8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x556302ece138 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x556302ece270 <col:63> "" ""
|-CXXMethodDecl 0x556302ece408 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x556302ece2f8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x556302ece370 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x556302ece4b8 <col:69> "" ""
|-CXXMethodDecl 0x556302ece5d0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x556302ece540 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x556302ece678 <col:62> "" ""
|-CXXMethodDecl 0x556302ece810 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x556302ece700 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x556302ece778 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x556302ece8c0 <col:68> "" ""
|-CXXMethodDecl 0x556302ece9d8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x556302ece948 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x556302ecea80 <col:63> "" ""
|-CXXMethodDecl 0x556302ecec18 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x556302eceb08 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x556302eceb80 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x556302ececc8 <col:69> "" ""
|-CXXMethodDecl 0x556302eced58 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x556302ecedf8 <col:64> "" ""
|-CXXMethodDecl 0x556302ecee88 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x556302ecef28 <col:52> "" ""
|-CXXMethodDecl 0x556302ecefb8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x556302ecf058 <col:67> "" ""
|-CXXMethodDecl 0x556302ecf0e8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x556302ecf188 <col:55> "" ""
|-CXXMethodDecl 0x556302ecf2a0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x556302ecf210 <col:32> col:35 'int'
| `-DeprecatedAttr 0x556302ecf348 <col:58> "" ""
|-CXXMethodDecl 0x556302ecf4e0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x556302ecf3d0 <col:33> col:36 'int'
| |-ParmVarDecl 0x556302ecf448 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x556302ecf590 <col:62> "" ""
|-CXXMethodDecl 0x556302ecf6a8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x556302ecf618 <col:32> col:35 'int'
| `-DeprecatedAttr 0x556302ecf750 <col:58> "" ""
|-CXXMethodDecl 0x556302ecf8e8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x556302ecf7d8 <col:33> col:36 'int'
| |-ParmVarDecl 0x556302ecf850 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x556302ecf998 <col:62> "" ""
|-CXXMethodDecl 0x556302ecfab0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x556302ecfa20 <col:34> col:37 'int'
| `-DeprecatedAttr 0x556302ecfb58 <col:60> "" ""
|-CXXMethodDecl 0x556302ecfcf0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x556302ecfbe0 <col:34> col:37 'int'
| |-ParmVarDecl 0x556302ecfc58 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x556302ecfda0 <col:64> "" ""
|-CXXMethodDecl 0x556302ecfeb8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x556302ecfe28 <col:32> col:35 'int'
| `-DeprecatedAttr 0x556302ecff60 <col:58> "" ""
|-CXXMethodDecl 0x556302ed00f8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x556302ecffe8 <col:33> col:36 'int'
| |-ParmVarDecl 0x556302ed0060 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x556302ed01a8 <col:62> "" ""
|-CXXMethodDecl 0x556302ed02c0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x556302ed0230 <col:33> col:36 'int'
| `-DeprecatedAttr 0x556302ed0368 <col:59> "" ""
|-CXXMethodDecl 0x556302ed0500 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x556302ed03f0 <col:33> col:36 'int'
| |-ParmVarDecl 0x556302ed0468 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x556302ed05b0 <col:63> "" ""
|-AccessSpecDecl 0x556302ed0620 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x556302ed0648 prev 0x556302ec2b70 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x556302ed0740 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x556302ed0830 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x556302ed0958 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x556302ed0ad8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x556302ed0c58 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x556302ed0dd8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x556302ee5728 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x556302ee5f98 <col:11>
| |-CXXDestructorDecl 0x556302ee5800 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x556302ee5938 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x556302ee5938
| | `-ParmVarDecl 0x556302ee5a48 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x556302ee5ae8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x556302ee5ae8
| | `-ParmVarDecl 0x556302ee5bf8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x556302ee8928 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x556302ee8a38 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x556302ee8cb8 <col:11>
| |   `-ReturnStmt 0x556302ee8ca8 <col:11>
| |     `-UnaryOperator 0x556302ee8c90 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x556302ee8c80 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x556302ee8aa8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x556302ee8aa8
|   `-ParmVarDecl 0x556302ee8bb8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x556302ed0e40 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x556302ed0f58 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x556302ed0ff8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x556302ed1060 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x556302ed10c8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x556302ed1130 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x556302ed1190 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x556302ed1250 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x556302ed12b0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x556302ed1310 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x556302ee5638 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x556302ed0ff8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x556302ee5fa8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x556302ee6000 <col:12>
| |-CXXConstructorDecl 0x556302ee5c68 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x556302ee5c68
| | `-ParmVarDecl 0x556302ee5d78 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x556302ee5e18 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x556302ee5e18
| | `-ParmVarDecl 0x556302ee5f28 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x556302ee8010 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x556302ed1388 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x556302ed13e8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x556302ed1450 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x556302ed14b8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x556302eda910 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x556302eda978 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x556302eda9d8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x556302edaa38 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x556302edaaa0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x556302edab28 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x556302ed1388 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x556302ee55d0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x556302eda9d8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x556302ee6010 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x556302ee6070 <col:21, line:755:5>
|-CXXConstructorDecl 0x556302edacc8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x556302edac08 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x556302edadc0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x556302edafa8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x556302edaeb0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x556302edb278 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x556302edb060 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x556302edb0d8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x556302edb150 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556302edb498 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x556302edb348 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x556302edb3c0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x556302edb768 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x556302edb558 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x556302edb5d0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x556302edb648 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x556302edb8c0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x556302edb830 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556302edba08 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x556302edb978 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x556302edbb00 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556302ee6080 prev 0x556302ebc190 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x556302ee61b8 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x556302ee6248 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x556302ee62f0 <line:780:5, col:62> col:55 data 'unsigned char *() const'
| |-NoInlineAttr 0x556302ee6390 <col:20>
| `-OptimizeNoneAttr 0x556302ee63e8 <col:30>
|-CXXMethodDecl 0x556302ee6438 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x556302ee64d8 <col:20>
| `-OptimizeNoneAttr 0x556302ee6530 <col:30>
|-CXXMethodDecl 0x556302ee6580 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x556302ee6648 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x556302ee6710 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x556302ee6828 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x556302ee68f0 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x556302ee6990 <col:20>
| `-OptimizeNoneAttr 0x556302ee69e8 <col:30>
|-CXXMethodDecl 0x556302ee6a58 <line:787:5, col:62> col:50 used ip_header 'click_ip *() const'
| |-NoInlineAttr 0x556302ee6af8 <col:20>
| `-OptimizeNoneAttr 0x556302ee6b50 <col:30>
|-CXXMethodDecl 0x556302ee6bf8 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x556302ee6c98 <col:20>
| `-OptimizeNoneAttr 0x556302ee6cf0 <col:30>
|-CXXMethodDecl 0x556302ee6d40 <line:789:5, col:46> col:27 used transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x556302ee6e58 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x556302ee6f78 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x556302ee7098 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x556302ee7160 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x556302ee7200 <col:62> "" ""
|-AccessSpecDecl 0x556302ee7270 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x556302ee72d0 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x556302ee7ec8 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x556302ee80f0 <col:29, col:31>
|-CXXMethodDecl 0x556302ee7398 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x556302ee74d8 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x556302ee7448 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x556302ee75d0 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x556302ee8100 <col:23, col:25>
|-CXXMethodDecl 0x556302ee7788 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x556302ee76c0 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x556302ee7a58 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x556302ee7840 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x556302ee78b8 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x556302ee7930 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x556302ee7be8 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x556302ee7b20 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x556302ee7ce0 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x556302ee7d48 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x556302ee7d48
  `-ParmVarDecl 0x556302ee7e58 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556302c26a28 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x556302c26b48 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x556302c26c10 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x556302d00910 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x556302d03768 <col:8>
|-CXXConstructorDecl 0x556302d00a18 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x556302d00a18
| `-ParmVarDecl 0x556302d00b28 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x556302d00bc8 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x556302d00cd8 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x556302c26c10 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x556302d03980 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x556302d03950 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x556302c26c10
| |     `-CXXStaticCastExpr 0x556302d03920 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x556302d038f0 <col:8> 'in_addr' lvalue ParmVar 0x556302d00cd8 '' 'in_addr &&'
| `-CompoundStmt 0x556302d039c8 <col:8>
|-CXXDestructorDecl 0x556302d03c00 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5563030eb148 <col:8> col:8 implicit constexpr operator= 'in_addr &(const in_addr &)' inline default trivial noexcept-unevaluated 0x5563030eb148
| `-ParmVarDecl 0x5563030eb258 <col:8> col:8 'const in_addr &'
`-CXXMethodDecl 0x5563030eb2c8 <col:8> col:8 implicit used constexpr operator= 'in_addr &(in_addr &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5563030eb3d8 <col:8> col:8 used 'in_addr &&'
  `-CompoundStmt 0x5563030eb690 <col:8>
    |-BinaryOperator 0x5563030eb638 <col:8> 'in_addr_t':'unsigned int' lvalue '='
    | |-MemberExpr 0x5563030eb5f0 <col:8> 'in_addr_t':'unsigned int' lvalue ->s_addr 0x556302c26c10
    | | `-CXXThisExpr 0x5563030eb5e0 <col:8> 'in_addr *' this
    | `-ImplicitCastExpr 0x5563030eb620 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
    |   `-MemberExpr 0x5563030eb5b0 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x556302c26c10
    |     `-CXXStaticCastExpr 0x5563030eb580 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
    |       `-DeclRefExpr 0x5563030eb550 <col:8> 'in_addr' lvalue ParmVar 0x5563030eb3d8 '' 'in_addr &&'
    `-ReturnStmt 0x5563030eb680 <col:8>
      `-UnaryOperator 0x5563030eb668 <col:8> 'in_addr' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x5563030eb658 <col:8> 'in_addr *' this

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556302cf54b8 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x556302cf55d8 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x556302cf56c0 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x556302cf56a0 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x556302cf5668 <col:22> 'int' 4
|-FieldDecl 0x556302cf5768 <line:29:5, col:21> col:14 ip_v 'unsigned int'
| `-ConstantExpr 0x556302cf5748 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x556302cf5710 <col:21> 'int' 4
|-FieldDecl 0x556302cf57c8 <line:33:5, col:13> col:13 ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x556302cf5828 <line:40:5, col:14> col:14 ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x556302cf5888 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x556302cf58e8 <line:42:5, col:14> col:14 referenced ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x556302cf5948 <line:47:5, col:13> col:13 ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x556302cf59a8 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x556302cf5a08 <line:49:5, col:14> col:14 referenced ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x556302cf5a78 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x556302cf5ae8 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping AST Record Layout
         0 | struct click_icmp_sequenced
         0 |   uint8_t icmp_type
         1 |   uint8_t icmp_code
         2 |   uint16_t icmp_cksum
         4 |   uint16_t icmp_identifier
         6 |   uint16_t icmp_sequence
           | [sizeof=8, dsize=8, align=2,
           |  nvsize=8, nvalign=2]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556302ffc030 <../dummy_inc/clicknet/icmp.h:27:1, line:33:1> line:27:8 referenced struct click_icmp_sequenced definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x556302ffc148 <col:1, col:8> col:8 implicit struct click_icmp_sequenced
|-FieldDecl 0x556302ffc1e8 <line:28:5, col:13> col:13 icmp_type 'uint8_t':'unsigned char'
|-FieldDecl 0x556302ffc248 <line:29:5, col:13> col:13 icmp_code 'uint8_t':'unsigned char'
|-FieldDecl 0x556302ffc2a8 <line:30:5, col:14> col:14 referenced icmp_cksum 'uint16_t':'unsigned short'
|-FieldDecl 0x556302ffc308 <line:31:5, col:14> col:14 referenced icmp_identifier 'uint16_t':'unsigned short'
`-FieldDecl 0x556302ffc368 <line:32:5, col:14> col:14 icmp_sequence 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_icmp_sequenced = type { i8, i8, i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_icmp_sequenced = type { i8, i8, i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class StringAccum
         0 |   struct StringAccum::rep_t r_
         0 |     unsigned char * s
         8 |     int len
        12 |     int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5563030c5870 <../dummy_inc/click/straccum.hh:112:5, line:122:5> line:112:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5563030c5988 <col:5, col:12> col:12 implicit referenced struct rep_t
|-FieldDecl 0x5563030c5a30 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
|-FieldDecl 0x5563030c5a98 <line:114:2, col:6> col:6 referenced len 'int'
|-FieldDecl 0x5563030c5b00 <line:115:2, col:6> col:6 referenced cap 'int'
|-CXXConstructorDecl 0x5563030c5bb0 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| |-CXXCtorInitializer Field 0x5563030c5a30 's' 'unsigned char *'
| | `-CXXReinterpretCastExpr 0x5563030c6a30 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| |   `-CXXConstCastExpr 0x5563030c69e8 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| |     `-CallExpr 0x5563030c69b0 <col:63, col:82> 'const char *'
| |       `-ImplicitCastExpr 0x5563030c6998 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| |         `-DeclRefExpr 0x5563030c6940 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x556302ceca00 'empty_data' 'const char *()'
| |-CXXCtorInitializer Field 0x5563030c5a98 'len' 'int'
| | `-IntegerLiteral 0x5563030c6aa8 <line:118:12> 'int' 0
| |-CXXCtorInitializer Field 0x5563030c5b00 'cap' 'int'
| | `-IntegerLiteral 0x5563030c6b10 <col:20> 'int' 0
| `-CompoundStmt 0x5563030c6b90 <col:23, line:119:2>
|-CXXConstructorDecl 0x5563030c5d28 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| |-ParmVarDecl 0x5563030c5c68 <col:17> col:35 'uninitialized_type'
| `-CompoundStmt 0x5563030c6ba0 <col:37, line:121:2>
|-CXXConstructorDecl 0x5563030c8db8 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5563030c8ec8 <col:12> col:12 used 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x5563030c5a30 's' 'unsigned char *'
| | `-ImplicitCastExpr 0x5563030ca800 <col:12> 'unsigned char *' <LValueToRValue>
| |   `-MemberExpr 0x5563030ca7d0 <col:12> 'unsigned char *const' lvalue .s 0x5563030c5a30
| |     `-DeclRefExpr 0x5563030ca7b0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5563030c8ec8 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x5563030c5a98 'len' 'int'
| | `-ImplicitCastExpr 0x5563030ca890 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5563030ca860 <col:12> 'const int' lvalue .len 0x5563030c5a98
| |     `-DeclRefExpr 0x5563030ca840 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5563030c8ec8 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x5563030c5b00 'cap' 'int'
| | `-ImplicitCastExpr 0x5563030ca920 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5563030ca8f0 <col:12> 'const int' lvalue .cap 0x5563030c5b00
| |     `-DeclRefExpr 0x5563030ca8d0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5563030c8ec8 '' 'const StringAccum::rep_t &'
| `-CompoundStmt 0x5563030ca978 <col:12>
|-CXXConstructorDecl 0x5563030c8f68 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x5563030c8f68
| `-ParmVarDecl 0x5563030c9078 <col:12> col:12 'StringAccum::rep_t &&'
`-CXXDestructorDecl 0x5563030cac30 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  NonVirtualBaseLLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5563030c0f68 prev 0x556303003570 <../dummy_inc/click/straccum.hh:28:1, line:137:1> line:28:7 referenced class StringAccum definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5563030c1060 <col:1, col:7> col:7 implicit referenced class StringAccum
|-AccessSpecDecl 0x5563030c10f0 <col:21, col:27> col:21 public
|-TypedefDecl 0x5563030c1130 <line:30:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55630298bdc0 'const char *'
|   `-QualType 0x55630298b311 'const char' const
|     `-BuiltinType 0x55630298b310 'char'
|-TypedefDecl 0x5563030c11a0 <line:31:5, col:19> col:19 referenced iterator 'char *'
| `-PointerType 0x55630298bf90 'char *'
|   `-BuiltinType 0x55630298b310 'char'
|-TypedefDecl 0x5563030c12e0 <line:33:5, col:57> col:32 referenced unspecified_bool_type 'int (StringAccum::*)() const'
| `-MemberPointerType 0x5563030c1250 'int (StringAccum::*)() const'
|   |-RecordType 0x556302c4d330 'StringAccum'
|   | `-CXXRecord 0x5563030c0f68 'StringAccum'
|   `-ParenType 0x556302cc4150 'int () const' sugar
|     `-FunctionProtoType 0x556302ca6880 'int () const' const cdecl
|       `-BuiltinType 0x55630298b370 'int'
|-CXXConstructorDecl 0x5563030c13a0 <line:35:5, col:24> col:12 StringAccum 'void ()' inline
|-CXXConstructorDecl 0x5563030c14f0 <line:36:5, col:45> col:21 StringAccum 'void (int)' inline
| `-ParmVarDecl 0x5563030c1460 <col:33, col:37> col:37 capacity 'int'
|-CXXConstructorDecl 0x5563030c1640 <line:37:5, col:41> col:12 StringAccum 'void (const String &)' inline
| `-ParmVarDecl 0x5563030c15b0 <col:24, col:38> col:38 str 'const String &'
|-CXXConstructorDecl 0x5563030c17e8 <line:38:5, col:44> col:12 StringAccum 'void (const StringAccum &)' inline
| `-ParmVarDecl 0x5563030c1728 <col:24, col:43> col:43 x 'const StringAccum &'
|-CXXConstructorDecl 0x5563030c1998 <line:40:5, col:39> col:12 StringAccum 'void (StringAccum &&)' inline
| `-ParmVarDecl 0x5563030c18d8 <col:24, col:38> col:38 x 'StringAccum &&'
|-CXXDestructorDecl 0x5563030c1a90 <line:42:5, col:25> col:12 ~StringAccum 'void () noexcept' inline
|-CXXMethodDecl 0x5563030c1c48 <line:44:5, col:55> col:25 operator= 'StringAccum &(const StringAccum &)' inline
| `-ParmVarDecl 0x5563030c1b80 <col:35, col:54> col:54 x 'const StringAccum &'
|-CXXMethodDecl 0x5563030c1dc8 <line:46:5, col:50> col:25 operator= 'StringAccum &(StringAccum &&)' inline
| `-ParmVarDecl 0x5563030c1d00 <col:35, col:49> col:49 x 'StringAccum &&'
|-CXXMethodDecl 0x5563030c1ec0 <line:49:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5563030c1f88 <line:50:5, col:23> col:18 data 'char *()' inline
|-CXXMethodDecl 0x5563030c2050 <line:51:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5563030c2118 <line:52:5, col:27> col:16 used capacity 'int () const' inline
|-CXXMethodDecl 0x5563030c21e0 <line:54:5, col:23> col:17 c_str 'const char *()'
|-CXXConversionDecl 0x5563030c2348 <line:56:5, col:45> col:12 operator int (StringAccum::*)() const 'StringAccum::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5563030c2418 <line:57:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5563030c24d8 <line:58:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5563030c25e8 <line:60:5, col:35> col:27 used begin 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x5563030c26f8 <line:61:5, col:27> col:21 begin 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x5563030c27b8 <line:62:5, col:33> col:27 used end 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x5563030c2878 <line:63:5, col:25> col:21 end 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x5563030c29c0 <line:65:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5563030c2930 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5563030c2b50 <line:66:5, col:34> col:18 operator[] 'char &(int)' inline
| `-ParmVarDecl 0x5563030c2a80 <col:29, col:33> col:33 i 'int'
|-CXXMethodDecl 0x5563030c2c18 <line:67:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5563030c2d10 <line:68:5, col:24> col:18 front 'char &()' inline
|-CXXMethodDecl 0x5563030c2dd0 <line:69:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5563030c2e98 <line:70:5, col:23> col:18 back 'char &()' inline
|-CXXMethodDecl 0x5563030c2f58 <line:72:5, col:33> col:17 used out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5563030c3018 <line:73:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5563030c30d8 <line:75:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5563030c3228 <line:76:5, col:31> col:18 reserve 'char *(int)' inline
| `-ParmVarDecl 0x5563030c3190 <col:26, col:30> col:30 n 'int'
|-CXXMethodDecl 0x5563030c3378 <line:77:5, col:35> col:17 set_length 'void (int)' inline
| `-ParmVarDecl 0x5563030c32e8 <col:28, col:32> col:32 len 'int'
|-CXXMethodDecl 0x5563030c34d0 <line:78:5, col:23> col:9 resize 'int (int)'
| `-ParmVarDecl 0x5563030c3438 <col:16, col:20> col:20 len 'int'
|-CXXMethodDecl 0x5563030c3620 <line:79:5, col:40> col:17 used adjust_length 'void (int)' inline
| `-ParmVarDecl 0x5563030c3590 <col:31, col:35> col:35 delta 'int'
|-CXXMethodDecl 0x5563030c3840 <line:80:5, col:54> col:18 extend 'char *(int, int)' inline
| |-ParmVarDecl 0x5563030c36e0 <col:25, col:29> col:29 nadjust 'int'
| `-ParmVarDecl 0x5563030c3760 <col:38, col:53> col:42 nreserve 'int' cinit
|   `-IntegerLiteral 0x5563030c6868 <col:53> 'int' 0
|-CXXMethodDecl 0x5563030c3998 <line:82:5, col:35> col:17 pop_back 'void (int)' inline
| `-ParmVarDecl 0x5563030c3908 <col:26, col:34> col:30 n 'int' cinit
|   `-IntegerLiteral 0x5563030c6888 <col:34> 'int' 1
|-CXXMethodDecl 0x5563030c3ae0 <line:84:5, col:30> col:17 used append 'void (char)' inline
| `-ParmVarDecl 0x5563030c3a50 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5563030c3c30 <line:85:5, col:39> col:17 used append 'void (unsigned char)' inline
| `-ParmVarDecl 0x5563030c3ba0 <col:24, col:38> col:38 c 'unsigned char'
|-CXXMethodDecl 0x5563030c3d80 <line:86:5, col:35> col:17 append_utf8 'bool (int)' inline
| `-ParmVarDecl 0x5563030c3cf0 <col:29, col:33> col:33 ch 'int'
|-CXXMethodDecl 0x5563030c3ed0 <line:87:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5563030c3e40 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5563030c40a8 <line:88:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5563030c3f90 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5563030c4010 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5563030c4288 <line:89:5, col:55> col:17 used append 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5563030c4170 <col:24, col:45> col:45 s 'const unsigned char *'
| `-ParmVarDecl 0x5563030c41f0 <col:48, col:52> col:52 len 'int'
|-CXXMethodDecl 0x5563030c4468 <line:90:5, col:59> col:17 used append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5563030c4350 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5563030c43d0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5563030c4648 <line:91:5, col:77> col:17 append 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5563030c4530 <col:24, col:45> col:45 first 'const unsigned char *'
| `-ParmVarDecl 0x5563030c45b0 <col:52, col:73> col:73 last 'const unsigned char *'
|-CXXMethodDecl 0x5563030c4828 <line:92:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5563030c4710 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5563030c4790 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5563030c4b88 <line:93:5, col:81> col:10 used append_numeric 'void (String::intmax_t, int, bool)'
| |-ParmVarDecl 0x5563030c4970 <col:25, col:42> col:42 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5563030c49f0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5563030c68a8 <col:56> 'int' 10
| `-ParmVarDecl 0x5563030c4a68 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5563030c68c8 <col:77> 'bool' true
|-CXXMethodDecl 0x5563030c4f90 <line:94:5, col:82> col:10 used append_numeric 'void (String::uintmax_t, int, bool)'
| |-ParmVarDecl 0x5563030c4cd0 <col:25, col:43> col:43 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5563030c4d50 <col:46, col:57> col:50 base 'int' cinit
| | `-IntegerLiteral 0x5563030c68d8 <col:57> 'int' 10
| `-ParmVarDecl 0x5563030c4dc8 <col:61, col:78> col:66 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5563030c68f8 <col:78> 'bool' true
|-CXXMethodDecl 0x5563030c51c0 <line:96:5, col:57> col:18 snprintf 'StringAccum &(int, const char *, ...)'
| |-ParmVarDecl 0x5563030c5060 <col:27, col:31> col:31 n 'int'
| `-ParmVarDecl 0x5563030c50e0 <col:34, col:46> col:46 format 'const char *'
|-CXXMethodDecl 0x5563030c52b8 <line:98:5, col:24> col:12 take_string 'String ()'
|-CXXMethodDecl 0x5563030c5428 <line:100:5, col:29> col:10 used swap 'void (StringAccum &)'
| `-ParmVarDecl 0x5563030c5368 <col:15, col:28> col:28 x 'StringAccum &'
|-CXXMethodDecl 0x5563030c5578 <line:104:5, col:62> col:17 forward 'void (int)' inline
| |-ParmVarDecl 0x5563030c54e8 <col:25, col:29> col:29 delta 'int'
| `-DeprecatedAttr 0x5563030c5620 <col:51> "" ""
|-AccessSpecDecl 0x5563030c5690 <line:106:3, col:10> col:3 private
|-EnumDecl 0x5563030c56b8 <line:108:5, line:110:5> line:108:5
| `-EnumConstantDecl 0x5563030c5808 <line:109:2, col:23> col:2 referenced MEMO_SPACE 'StringAccum::(anonymous enum at ../dummy_inc/click/straccum.hh:108:5)'
|   `-ImplicitCastExpr 0x5563030c5858 <col:15, col:23> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5563030c57e8 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' Int: 12
|       `-DeclRefExpr 0x5563030c57b8 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' EnumConstant 0x556302ccdeb8 'MEMO_SPACE' 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|-CXXRecordDecl 0x5563030c5870 <line:112:5, line:122:5> line:112:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5563030c5988 <col:5, col:12> col:12 implicit referenced struct rep_t
| |-FieldDecl 0x5563030c5a30 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
| |-FieldDecl 0x5563030c5a98 <line:114:2, col:6> col:6 referenced len 'int'
| |-FieldDecl 0x5563030c5b00 <line:115:2, col:6> col:6 referenced cap 'int'
| |-CXXConstructorDecl 0x5563030c5bb0 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| | |-CXXCtorInitializer Field 0x5563030c5a30 's' 'unsigned char *'
| | | `-CXXReinterpretCastExpr 0x5563030c6a30 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| | |   `-CXXConstCastExpr 0x5563030c69e8 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| | |     `-CallExpr 0x5563030c69b0 <col:63, col:82> 'const char *'
| | |       `-ImplicitCastExpr 0x5563030c6998 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| | |         `-DeclRefExpr 0x5563030c6940 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x556302ceca00 'empty_data' 'const char *()'
| | |-CXXCtorInitializer Field 0x5563030c5a98 'len' 'int'
| | | `-IntegerLiteral 0x5563030c6aa8 <line:118:12> 'int' 0
| | |-CXXCtorInitializer Field 0x5563030c5b00 'cap' 'int'
| | | `-IntegerLiteral 0x5563030c6b10 <col:20> 'int' 0
| | `-CompoundStmt 0x5563030c6b90 <col:23, line:119:2>
| |-CXXConstructorDecl 0x5563030c5d28 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| | |-ParmVarDecl 0x5563030c5c68 <col:17> col:35 'uninitialized_type'
| | `-CompoundStmt 0x5563030c6ba0 <col:37, line:121:2>
| |-CXXConstructorDecl 0x5563030c8db8 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5563030c8ec8 <col:12> col:12 used 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x5563030c5a30 's' 'unsigned char *'
| | | `-ImplicitCastExpr 0x5563030ca800 <col:12> 'unsigned char *' <LValueToRValue>
| | |   `-MemberExpr 0x5563030ca7d0 <col:12> 'unsigned char *const' lvalue .s 0x5563030c5a30
| | |     `-DeclRefExpr 0x5563030ca7b0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5563030c8ec8 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x5563030c5a98 'len' 'int'
| | | `-ImplicitCastExpr 0x5563030ca890 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5563030ca860 <col:12> 'const int' lvalue .len 0x5563030c5a98
| | |     `-DeclRefExpr 0x5563030ca840 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5563030c8ec8 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x5563030c5b00 'cap' 'int'
| | | `-ImplicitCastExpr 0x5563030ca920 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5563030ca8f0 <col:12> 'const int' lvalue .cap 0x5563030c5b00
| | |     `-DeclRefExpr 0x5563030ca8d0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5563030c8ec8 '' 'const StringAccum::rep_t &'
| | `-CompoundStmt 0x5563030ca978 <col:12>
| |-CXXConstructorDecl 0x5563030c8f68 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x5563030c8f68
| | `-ParmVarDecl 0x5563030c9078 <col:12> col:12 'StringAccum::rep_t &&'
| `-CXXDestructorDecl 0x5563030cac30 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-FieldDecl 0x5563030c5e00 <line:124:5, col:11> col:11 referenced r_ 'StringAccum::rep_t'
|-CXXMethodDecl 0x5563030c5f00 <line:126:5, col:19> col:11 used grow 'char *(int)'
| `-ParmVarDecl 0x5563030c5e68 <col:16> col:19 'int'
|-CXXMethodDecl 0x5563030c60e0 <line:127:5, col:48> col:11 used hard_extend 'char *(int, int)'
| |-ParmVarDecl 0x5563030c5fc0 <col:23, col:27> col:27 nadjust 'int'
| `-ParmVarDecl 0x5563030c6040 <col:36, col:40> col:40 nreserve 'int'
|-CXXMethodDecl 0x5563030c62c0 <line:128:5, col:44> col:10 used hard_append 'void (const char *, int)'
| |-ParmVarDecl 0x5563030c61a8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5563030c6228 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5563030c6418 <line:129:5, col:43> col:10 used hard_append_cstr 'void (const char *)'
| `-ParmVarDecl 0x5563030c6388 <col:27, col:39> col:39 cstr 'const char *'
|-CXXMethodDecl 0x5563030c6568 <line:130:5, col:33> col:10 used append_utf8_hard 'bool (int)'
| `-ParmVarDecl 0x5563030c64d8 <col:27, col:31> col:31 ch 'int'
`-FriendDecl 0x5563030c6828 <line:132:5, col:70> col:25
  `-FunctionDecl 0x5563030c6768 parent 0x55630298b278 <col:5, col:70> col:25 operator<< 'StringAccum &(StringAccum &, const String &)'
    |-ParmVarDecl 0x5563030c6620 <col:36, col:49> col:49 sa 'StringAccum &'
    `-ParmVarDecl 0x5563030c6698 <col:53, col:67> col:67 str 'const String &'

Layout: <CGRecordLayout
  LLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  NonVirtualBaseLLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class HashAllocator
         0 |   struct HashAllocator::link * _free
         8 |   struct HashAllocator::buffer * _buffer
        16 |   size_t _size
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class SizedHashAllocator<72>
         0 |   class HashAllocator (base)
         0 |     struct HashAllocator::link * _free
         8 |     struct HashAllocator::buffer * _buffer
        16 |     size_t _size
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class ICMPPingRewriter
         0 |   class IPRewriterBase (primary base)
         0 |     class Element (primary base)
         0 |       (Element vtable pointer)
         8 |       class Element::Port *[2] _ports
        24 |       class Element::Port [4] _inline_ports
        88 |       int [2] _nports
        96 |       class Router * _router
       104 |       int _eindex
       112 |     class HashContainer<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > _map
       112 |       class HashContainer_rep<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > _rep
       112 |         class HashContainer_adapter<class IPRewriterEntry> (base) (empty)
       112 |         class IPRewriterEntry ** buckets
       120 |         uint32_t nbuckets
       124 |         uint32_t first_bucket
       128 |         size_t size
       136 |         struct libdivide_u32_t bucket_divider
       136 |           uint32_t magic
       140 |           uint8_t more
       144 |     class Vector<class IPRewriterInput> _input_specs
       144 |       class vector_memory<class sized_array_memory<56> > vm_
       144 |         vector_memory<class sized_array_memory<56> >::type * l_
       152 |         vector_memory::size_type n_
       156 |         vector_memory::size_type capacity_
       160 |     class IPRewriterHeap * _heap
       168 |     uint32_t [2] _timeouts
       176 |     uint32_t _gc_interval_sec
       184 |     class Timer _gc_timer
       184 |       int _schedpos1
       192 |       class Timestamp _expiry_s
       192 |         union Timestamp::rep_t _t
       192 |           int64_t x
       200 |       union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
       200 |         TimerCallback callback
       208 |       void * _thunk
       216 |       class Element * _owner
       224 |       class RouterThread * _thread
       232 |   class SizedHashAllocator<72> _allocator
       232 |     class HashAllocator (base)
       232 |       struct HashAllocator::link * _free
       240 |       struct HashAllocator::buffer * _buffer
       248 |       size_t _size
       256 |   unsigned int _annos
           | [sizeof=264, dsize=260, align=8,
           |  nvsize=260, nvalign=8]

*** Dumping AST Record Layout
         0 | struct HashAllocator::link
         0 |   struct HashAllocator::link * next
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556302f67ff8 <../dummy_inc/click/hashallocator.hh:26:5, line:28:5> line:26:12 referenced struct link definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x556302f68118 <col:5, col:12> col:12 implicit referenced struct link
`-FieldDecl 0x556302f681e8 <line:27:2, col:8> col:8 referenced next 'HashAllocator::link *'

Layout: <CGRecordLayout
  LLVMType:%"struct.HashAllocator::link" = type { %"struct.HashAllocator::link"* }
  NonVirtualBaseLLVMType:%"struct.HashAllocator::link" = type { %"struct.HashAllocator::link"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct HashAllocator::buffer
         0 |   struct HashAllocator::buffer * next
         8 |   size_t pos
        16 |   size_t maxpos
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556302f68250 <../dummy_inc/click/hashallocator.hh:30:5, line:34:5> line:30:12 referenced struct buffer definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x556302f68368 <col:5, col:12> col:12 implicit referenced struct buffer
|-FieldDecl 0x556302f68438 <line:31:2, col:10> col:10 next 'HashAllocator::buffer *'
|-FieldDecl 0x556302f68498 <line:32:2, col:9> col:9 referenced pos 'size_t':'unsigned long'
`-FieldDecl 0x556302f684f8 <line:33:2, col:9> col:9 referenced maxpos 'size_t':'unsigned long'

Layout: <CGRecordLayout
  LLVMType:%"struct.HashAllocator::buffer" = type { %"struct.HashAllocator::buffer"*, i64, i64 }
  NonVirtualBaseLLVMType:%"struct.HashAllocator::buffer" = type { %"struct.HashAllocator::buffer"*, i64, i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556302f67610 <../dummy_inc/click/hashallocator.hh:9:1, line:55:1> line:9:7 referenced class HashAllocator definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x556302f67728 <col:1, col:7> col:7 implicit referenced class HashAllocator
|-AccessSpecDecl 0x556302f677b8 <col:23, col:29> col:23 public
|-CXXConstructorDecl 0x556302f678f8 <line:11:5, col:30> col:5 referenced HashAllocator 'void (size_t)'
| `-ParmVarDecl 0x556302f677f0 <col:19, col:26> col:26 size 'size_t':'unsigned long'
|-CXXDestructorDecl 0x556302f679f0 <line:12:5, col:20> col:5 used ~HashAllocator 'void () noexcept'
|-CXXMethodDecl 0x556302f67b70 <line:14:5, line:17:5> line:14:17 increase_size 'void (size_t)' inline
| |-ParmVarDecl 0x556302f67ae0 <col:31, col:38> col:38 used new_size 'size_t':'unsigned long'
| `-CompoundStmt 0x556302f6a780 <col:48, line:17:5>
|   |-ParenExpr 0x556302f6a6c8 <line:15:2, col:212> 'void'
|   | `-ConditionalOperator 0x556302f6a698 <col:3, col:211> 'void'
|   |   |-CXXStaticCastExpr 0x556302f68f30 <col:3, col:62> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x556302f68f00 <col:23, col:57> 'bool' '&&'
|   |   |   |-BinaryOperator 0x556302f68e30 <col:23, col:34> 'bool' '&&'
|   |   |   | |-UnaryOperator 0x556302f68d90 <col:23, col:24> 'bool' prefix '!' cannot overflow
|   |   |   | | `-ImplicitCastExpr 0x556302f68d78 <col:24> 'bool' <PointerToBoolean>
|   |   |   | |   `-ImplicitCastExpr 0x556302f68d60 <col:24> 'HashAllocator::link *' <LValueToRValue>
|   |   |   | |     `-MemberExpr 0x556302f68d30 <col:24> 'HashAllocator::link *' lvalue ->_free 0x556302f68828
|   |   |   | |       `-CXXThisExpr 0x556302f68d20 <col:24> 'HashAllocator *' implicit this
|   |   |   | `-UnaryOperator 0x556302f68e18 <col:33, col:34> 'bool' prefix '!' cannot overflow
|   |   |   |   `-ImplicitCastExpr 0x556302f68e00 <col:34> 'bool' <PointerToBoolean>
|   |   |   |     `-ImplicitCastExpr 0x556302f68de8 <col:34> 'HashAllocator::buffer *' <LValueToRValue>
|   |   |   |       `-MemberExpr 0x556302f68db8 <col:34> 'HashAllocator::buffer *' lvalue ->_buffer 0x556302f68888
|   |   |   |         `-CXXThisExpr 0x556302f68da8 <col:34> 'HashAllocator *' implicit this
|   |   |   `-BinaryOperator 0x556302f68ee0 <col:45, col:57> 'bool' '>='
|   |   |     |-ImplicitCastExpr 0x556302f68eb0 <col:45> 'size_t':'unsigned long' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x556302f68e50 <col:45> 'size_t':'unsigned long' lvalue ParmVar 0x556302f67ae0 'new_size' 'size_t':'unsigned long'
|   |   |     `-ImplicitCastExpr 0x556302f68ec8 <col:57> 'size_t':'unsigned long' <LValueToRValue>
|   |   |       `-MemberExpr 0x556302f68e80 <col:57> 'size_t':'unsigned long' lvalue ->_size 0x556302f688e8
|   |   |         `-CXXThisExpr 0x556302f68e70 <col:57> 'HashAllocator *' implicit this
|   |   |-CXXFunctionalCastExpr 0x556302f6a3c0 <col:66, col:73> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x556302f6a3a0 <col:72> 'int' 0
|   |   `-CallExpr 0x556302f6a5f8 <col:77, col:211> 'void'
|   |     |-ImplicitCastExpr 0x556302f6a5e0 <col:77> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x556302f6a5c0 <col:77> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556302a2b600 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x556302f6a638 <col:92> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302f6a430 <col:92> 'const char [40]' lvalue "!_free && !_buffer && new_size >= _size"
|   |     |-ImplicitCastExpr 0x556302f6a650 <col:135> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x556302f6a470 <col:135> 'const char [36]' lvalue "../dummy_inc/click/hashallocator.hh"
|   |     |-ImplicitCastExpr 0x556302f6a668 <col:174> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x556302f6a4b0 <col:174> 'int' 15
|   |     `-ImplicitCastExpr 0x556302f6a680 <col:178, col:192> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x556302f6a5a8 <col:178, col:192> 'const char [42]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x556302f6a590 <col:192> 'const char [42]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x556302f6a548 <col:192> 'const char [42]' lvalue "void HashAllocator::increase_size(size_t)"
|   `-BinaryOperator 0x556302f6a760 <line:16:2, col:10> 'size_t':'unsigned long' lvalue '='
|     |-MemberExpr 0x556302f6a6f8 <col:2> 'size_t':'unsigned long' lvalue ->_size 0x556302f688e8
|     | `-CXXThisExpr 0x556302f6a6e8 <col:2> 'HashAllocator *' implicit this
|     `-ImplicitCastExpr 0x556302f6a748 <col:10> 'size_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x556302f6a728 <col:10> 'size_t':'unsigned long' lvalue ParmVar 0x556302f67ae0 'new_size' 'size_t':'unsigned long'
|-CXXMethodDecl 0x556302f67c40 <line:19:5, col:27> col:18 allocate 'void *()' inline
|-CXXMethodDecl 0x556302f67d88 <line:20:5, col:35> col:17 used deallocate 'void (void *)' inline
| `-ParmVarDecl 0x556302f67cf8 <col:28, col:34> col:34 p 'void *'
|-CXXMethodDecl 0x556302f67f28 <line:22:5, col:31> col:10 swap 'void (HashAllocator &)'
| `-ParmVarDecl 0x556302f67e68 <col:15, col:30> col:30 x 'HashAllocator &'
|-AccessSpecDecl 0x556302f67fd0 <line:24:3, col:10> col:3 private
|-CXXRecordDecl 0x556302f67ff8 <line:26:5, line:28:5> line:26:12 referenced struct link definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x556302f68118 <col:5, col:12> col:12 implicit referenced struct link
| `-FieldDecl 0x556302f681e8 <line:27:2, col:8> col:8 referenced next 'HashAllocator::link *'
|-CXXRecordDecl 0x556302f68250 <line:30:5, line:34:5> line:30:12 referenced struct buffer definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x556302f68368 <col:5, col:12> col:12 implicit referenced struct buffer
| |-FieldDecl 0x556302f68438 <line:31:2, col:10> col:10 next 'HashAllocator::buffer *'
| |-FieldDecl 0x556302f68498 <line:32:2, col:9> col:9 referenced pos 'size_t':'unsigned long'
| `-FieldDecl 0x556302f684f8 <line:33:2, col:9> col:9 referenced maxpos 'size_t':'unsigned long'
|-EnumDecl 0x556302f68560 <line:36:5, line:44:5> line:36:5
| |-EnumConstantDecl 0x556302f68660 <line:37:2, col:20> col:2 min_buffer_size 'HashAllocator::(anonymous enum at ../dummy_inc/click/hashallocator.hh:36:5)'
| | `-ImplicitCastExpr 0x556302f687d0 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302f68640 <col:20> 'int' Int: 1024
| |     `-IntegerLiteral 0x556302f68620 <col:20> 'int' 1024
| |-EnumConstantDecl 0x556302f686f0 <line:41:2, col:20> col:2 max_buffer_size 'HashAllocator::(anonymous enum at ../dummy_inc/click/hashallocator.hh:36:5)'
| | `-ImplicitCastExpr 0x556302f687e8 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x556302f686d0 <col:20> 'int' Int: 1048576
| |     `-IntegerLiteral 0x556302f686b0 <col:20> 'int' 1048576
| `-EnumConstantDecl 0x556302f68780 <line:43:2, col:18> col:2 min_nelements 'HashAllocator::(anonymous enum at ../dummy_inc/click/hashallocator.hh:36:5)'
|   `-ImplicitCastExpr 0x556302f68800 <col:18> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556302f68760 <col:18> 'int' Int: 8
|       `-IntegerLiteral 0x556302f68740 <col:18> 'int' 8
|-FieldDecl 0x556302f68828 <line:46:5, col:11> col:11 referenced _free 'HashAllocator::link *'
|-FieldDecl 0x556302f68888 <line:47:5, col:13> col:13 referenced _buffer 'HashAllocator::buffer *'
|-FieldDecl 0x556302f688e8 <line:48:5, col:12> col:12 referenced _size 'size_t':'unsigned long'
|-CXXMethodDecl 0x556302f68960 <line:50:5, col:25> col:11 used hard_allocate 'void *()'
|-CXXConstructorDecl 0x556302f68af8 <line:52:5, col:41> col:5 HashAllocator 'void (const HashAllocator &)'
| `-ParmVarDecl 0x556302f68a38 <col:19, col:40> col:40 x 'const HashAllocator &'
`-CXXMethodDecl 0x556302f68c78 <line:53:5, col:52> col:20 operator= 'HashAllocator &(const HashAllocator &)'
  `-ParmVarDecl 0x556302f68bb8 <col:30, col:51> col:51 x 'const HashAllocator &'

Layout: <CGRecordLayout
  LLVMType:%class.HashAllocator = type { %"struct.HashAllocator::link"*, %"struct.HashAllocator::buffer"*, i64 }
  NonVirtualBaseLLVMType:%class.HashAllocator = type { %"struct.HashAllocator::link"*, %"struct.HashAllocator::buffer"*, i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x556303001060 <../dummy_inc/click/hashallocator.hh:58:1, line:65:1> line:59:7 class SizedHashAllocator definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'HashAllocator'
|-TemplateArgument integral 72
|-CXXRecordDecl 0x556303001298 prev 0x556303001060 <col:1, col:7> col:7 implicit class SizedHashAllocator
|-AccessSpecDecl 0x556303001328 <col:51, col:57> col:51 public
|-CXXConstructorDecl 0x556303001388 <line:61:5, line:63:5> line:61:5 used SizedHashAllocator 'void ()'
|-CXXConstructorDecl 0x556303001468 <line:59:7> col:7 implicit SizedHashAllocator 'void (const SizedHashAllocator<72> &)' inline default_delete noexcept-unevaluated 0x556303001468
| `-ParmVarDecl 0x556303001578 <col:7> col:7 'const SizedHashAllocator<72> &'
|-CXXConstructorDecl 0x556303001618 <col:7> col:7 implicit SizedHashAllocator 'void (SizedHashAllocator<72> &&)' inline default_delete noexcept-unevaluated 0x556303001618
| `-ParmVarDecl 0x556303001728 <col:7> col:7 'SizedHashAllocator<72> &&'
|-CXXMethodDecl 0x5563030017c8 <col:7> col:7 implicit operator= 'SizedHashAllocator<72> &(SizedHashAllocator<72> &&)' inline default_delete noexcept-unevaluated 0x5563030017c8
| `-ParmVarDecl 0x5563030018d8 <col:7> col:7 'SizedHashAllocator<72> &&'
`-CXXDestructorDecl 0x556303001960 <col:7> col:7 implicit used ~SizedHashAllocator 'void () noexcept' inline default
  `-CompoundStmt 0x5563030f4bc8 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.SizedHashAllocator = type { %class.HashAllocator }
  NonVirtualBaseLLVMType:%class.SizedHashAllocator = type { %class.HashAllocator }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556302ffd7a0 <../elements/icmp/icmppingrewriter.hh:81:1, line:124:1> line:81:7 class ICMPPingRewriter definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'IPRewriterBase'
|-CXXRecordDecl 0x556302ffd8f8 <col:1, col:7> col:7 implicit referenced class ICMPPingRewriter
|-AccessSpecDecl 0x556302ffd988 <col:50, col:56> col:50 public
|-CXXRecordDecl 0x556302fff240 <line:83:5, line:98:5> line:83:11 referenced class ICMPPingFlow definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-public 'IPRewriterFlow'
| |-CXXRecordDecl 0x556302fff398 <col:5, col:11> col:11 implicit referenced class ICMPPingFlow
| |-AccessSpecDecl 0x556302fff428 <col:50, col:56> col:50 public
| |-CXXConstructorDecl 0x556302fff7d8 <line:85:2, line:92:2> line:85:2 ICMPPingFlow 'void (IPRewriterInput *, const IPFlowID &, const IPFlowID &, bool, click_jiffies_t)'
| | |-ParmVarDecl 0x556302fff460 <col:15, col:32> col:32 used owner 'IPRewriterInput *'
| | |-ParmVarDecl 0x556302fff4d8 <col:39, col:55> col:55 used flowid 'const IPFlowID &'
| | |-ParmVarDecl 0x556302fff550 <line:86:8, col:24> col:24 used rewritten_flowid 'const IPFlowID &'
| | |-ParmVarDecl 0x556302fff5c8 <line:87:8, col:13> col:13 used guaranteed 'bool'
| | |-ParmVarDecl 0x556302fff640 <col:25, col:41> col:41 used expiry_j 'click_jiffies_t':'unsigned int'
| | |-CXXCtorInitializer 'IPRewriterFlow'
| | | `-CXXConstructExpr 0x556303002908 <line:88:8, line:89:32> 'IPRewriterFlow' 'void (IPRewriterInput *, const IPFlowID &, const IPFlowID &, uint8_t, bool, click_jiffies_t)'
| | |   |-ImplicitCastExpr 0x5563030028a8 <line:88:23> 'IPRewriterInput *' <LValueToRValue>
| | |   | `-DeclRefExpr 0x556303002028 <col:23> 'IPRewriterInput *' lvalue ParmVar 0x556302fff460 'owner' 'IPRewriterInput *'
| | |   |-DeclRefExpr 0x556303002048 <col:30> 'const IPFlowID' lvalue ParmVar 0x556302fff4d8 'flowid' 'const IPFlowID &'
| | |   |-DeclRefExpr 0x556303002068 <col:38> 'const IPFlowID' lvalue ParmVar 0x556302fff550 'rewritten_flowid' 'const IPFlowID &'
| | |   |-ImplicitCastExpr 0x5563030028c0 <line:89:9> 'uint8_t':'unsigned char' <IntegralCast>
| | |   | `-IntegerLiteral 0x556303002088 <col:9> 'int' 1
| | |   |-ImplicitCastExpr 0x5563030028d8 <col:12> 'bool' <LValueToRValue>
| | |   | `-DeclRefExpr 0x5563030020a8 <col:12> 'bool' lvalue ParmVar 0x556302fff5c8 'guaranteed' 'bool'
| | |   `-ImplicitCastExpr 0x5563030028f0 <col:24> 'click_jiffies_t':'unsigned int' <LValueToRValue>
| | |     `-DeclRefExpr 0x5563030020c8 <col:24> 'click_jiffies_t':'unsigned int' lvalue ParmVar 0x556302fff640 'expiry_j' 'click_jiffies_t':'unsigned int'
| | `-CompoundStmt 0x556303002c58 <col:34, line:92:2>
| |   |-BinaryOperator 0x556303002a28 <line:90:6, col:24> 'uint16_t':'unsigned short' lvalue '='
| |   | |-MemberExpr 0x5563030029c0 <col:6> 'uint16_t':'unsigned short' lvalue ->_udp_csum_delta 0x556302fad2e8
| |   | | `-ImplicitCastExpr 0x5563030029a0 <col:6> 'IPRewriterFlow *' <UncheckedDerivedToBase (IPRewriterFlow)>
| |   | |   `-CXXThisExpr 0x556303002990 <col:6> 'ICMPPingRewriter::ICMPPingFlow *' implicit this
| |   | `-ImplicitCastExpr 0x556303002a10 <col:24> 'uint16_t':'unsigned short' <IntegralCast>
| |   |   `-IntegerLiteral 0x5563030029f0 <col:24> 'int' 0
| |   `-CallExpr 0x556303002c20 <line:91:6, col:86> 'void'
| |     |-ImplicitCastExpr 0x556303002c08 <col:6> 'void (*)(uint16_t *, uint16_t, uint16_t)' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x556303002be8 <col:6> 'void (uint16_t *, uint16_t, uint16_t)' lvalue Function 0x556302cf73a8 'click_update_in_cksum' 'void (uint16_t *, uint16_t, uint16_t)'
| |     |-UnaryOperator 0x556303002af0 <col:28, col:29> 'uint16_t *' prefix '&' cannot overflow
| |     | `-MemberExpr 0x556303002ac0 <col:29> 'uint16_t':'unsigned short' lvalue ->_udp_csum_delta 0x556302fad2e8
| |     |   `-ImplicitCastExpr 0x556303002aa0 <col:29> 'IPRewriterFlow *' <UncheckedDerivedToBase (IPRewriterFlow)>
| |     |     `-CXXThisExpr 0x556303002a90 <col:29> 'ICMPPingRewriter::ICMPPingFlow *' implicit this
| |     |-CXXMemberCallExpr 0x556303002b58 <col:46, col:59> 'uint16_t':'unsigned short'
| |     | `-MemberExpr 0x556303002b28 <col:46, col:53> '<bound member function type>' .sport 0x556302f9d4e8
| |     |   `-DeclRefExpr 0x556303002b08 <col:46> 'const IPFlowID' lvalue ParmVar 0x556302fff4d8 'flowid' 'const IPFlowID &'
| |     `-CXXMemberCallExpr 0x556303002bc8 <col:62, col:85> 'uint16_t':'unsigned short'
| |       `-MemberExpr 0x556303002b98 <col:62, col:79> '<bound member function type>' .sport 0x556302f9d4e8
| |         `-DeclRefExpr 0x556303002b78 <col:62> 'const IPFlowID' lvalue ParmVar 0x556302fff550 'rewritten_flowid' 'const IPFlowID &'
| |-CXXMethodDecl 0x556302fffa50 <line:94:2, col:62> col:7 apply 'void (WritablePacket *, bool, unsigned int)'
| | |-ParmVarDecl 0x556302fff8b8 <col:13, col:29> col:29 p 'WritablePacket *'
| | |-ParmVarDecl 0x556302fff930 <col:32, col:37> col:37 direction 'bool'
| | `-ParmVarDecl 0x556302fff9b0 <col:48, col:57> col:57 annos 'unsigned int'
| |-CXXMethodDecl 0x556302fffcd0 <line:96:2, col:69> col:7 unparse 'void (StringAccum &, bool, click_jiffies_t) const'
| | |-ParmVarDecl 0x556302fffb18 <col:15, col:28> col:28 sa 'StringAccum &'
| | |-ParmVarDecl 0x556302fffb90 <col:32, col:37> col:37 direction 'bool'
| | `-ParmVarDecl 0x556302fffc08 <col:48, col:64> col:64 now 'click_jiffies_t':'unsigned int'
| `-CXXDestructorDecl 0x556303003078 <line:83:11> col:11 implicit referenced ~ICMPPingFlow 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x556302fffe00 <line:100:5, col:22> col:5 ICMPPingRewriter 'void ()'
|-CXXDestructorDecl 0x556302fffef0 <line:101:5, col:23> col:5 ~ICMPPingRewriter 'void ()' noexcept-unevaluated 0x556302fffef0
| `-Overrides: [ 0x556302fd6db8 IPRewriterBase::~IPRewriterBase 'void () noexcept' ]
|-CXXMethodDecl 0x556303000020 <line:103:5, col:65> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x556302efd0f8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x556303002cc8 <col:36, col:65>
|   `-ReturnStmt 0x556303002cb8 <col:38, col:45>
|     `-ImplicitCastExpr 0x556303002ca0 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x556303002c78 <col:45> 'const char [17]' lvalue "ICMPPingRewriter"
|-CXXMethodDecl 0x556303000170 <line:104:5, col:28> col:11 cast 'void *(const char *)'
| |-Overrides: [ 0x556302efddf0 Element::cast 'void *(const char *)' ]
| `-ParmVarDecl 0x5563030000d8 <col:16, col:27> col:28 'const char *'
|-CXXMethodDecl 0x556303000450 <line:106:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x556302fd7760 IPRewriterBase::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x556303000300 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x556303000378 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x5563030006b0 <line:108:5, col:75> col:22 get_entry 'IPRewriterEntry *(int, const IPFlowID &, int)'
| |-Overrides: [ 0x556302fd85a8 IPRewriterBase::get_entry 'IPRewriterEntry *(int, const IPFlowID &, int)' ]
| |-ParmVarDecl 0x556303000518 <col:32, col:36> col:36 ip_p 'int'
| |-ParmVarDecl 0x556303000590 <col:42, col:58> col:58 flowid 'const IPFlowID &'
| `-ParmVarDecl 0x556303000610 <col:66, col:70> col:70 input 'int'
|-CXXMethodDecl 0x556303000998 <line:109:5, line:110:53> line:109:22 add_flow 'IPRewriterEntry *(int, const IPFlowID &, const IPFlowID &, int)'
| |-Overrides: [ 0x556302fd88d8 IPRewriterBase::add_flow 'IPRewriterEntry *(int, const IPFlowID &, const IPFlowID &, int)' ]
| |-ParmVarDecl 0x556303000780 <col:31, col:35> col:35 ip_p 'int'
| |-ParmVarDecl 0x5563030007f8 <col:41, col:57> col:57 flowid 'const IPFlowID &'
| |-ParmVarDecl 0x556303000870 <line:110:10, col:26> col:26 rewritten_flowid 'const IPFlowID &'
| `-ParmVarDecl 0x5563030008f0 <col:44, col:48> col:48 input 'int'
|-CXXMethodDecl 0x556303000af8 <line:111:5, col:43> col:10 destroy_flow 'void (IPRewriterFlow *)'
| |-Overrides: [ 0x556302fd8a38 IPRewriterBase::destroy_flow 'void (IPRewriterFlow *)' ]
| `-ParmVarDecl 0x556303000a68 <col:23, col:39> col:39 flow 'IPRewriterFlow *'
|-CXXMethodDecl 0x556303000cc8 <line:113:5, col:28> col:10 push 'void (int, Packet *)'
| |-Overrides: [ 0x556302efbf68 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x556303000bb8 <col:15> col:18 'int'
| `-ParmVarDecl 0x556303000c30 <col:20, col:27> col:28 'Packet *'
|-CXXMethodDecl 0x556303000d98 <line:115:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x556302efea90 Element::add_handlers 'void ()' ]
|-AccessSpecDecl 0x556303000e38 <line:117:3, col:10> col:3 private
|-FieldDecl 0x556303001a40 <line:119:5, col:46> col:46 referenced _allocator 'SizedHashAllocator<sizeof(ICMPPingRewriter::ICMPPingFlow)>':'SizedHashAllocator<72>'
|-FieldDecl 0x556303001aa8 <line:120:5, col:14> col:14 _annos 'unsigned int'
|-CXXMethodDecl 0x556303001c20 <line:122:5, col:58> col:19 dump_mappings_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x556303001b08 <col:41, col:49> col:50 'Element *'
| `-ParmVarDecl 0x556303001b88 <col:52, col:57> col:58 'void *'
|-CXXConstructorDecl 0x556303001cf8 <line:81:7> col:7 implicit ICMPPingRewriter 'void (const ICMPPingRewriter &)' inline default_delete noexcept-unevaluated 0x556303001cf8
| `-ParmVarDecl 0x556303001e08 <col:7> col:7 'const ICMPPingRewriter &'
`-CXXMethodDecl 0x556303001ea8 <col:7> col:7 implicit operator= 'ICMPPingRewriter &(const ICMPPingRewriter &)' inline default_delete noexcept-unevaluated 0x556303001ea8
  `-ParmVarDecl 0x556303001fb8 <col:7> col:7 'const ICMPPingRewriter &'

Layout: <CGRecordLayout
  LLVMType:%class.ICMPPingRewriter = type <{ %class.IPRewriterBase, %class.SizedHashAllocator, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ICMPPingRewriter.base = type <{ %class.IPRewriterBase, %class.SizedHashAllocator, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556302ccd8f0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x556302ccda08 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x556302ccdaa8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x556302ccdb08 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x556302ccdb68 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x556302ccdc18 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556302ccdf20 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x556302cce038 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x556302cce0e0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x556302cce148 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x556302cce1d8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x556302cd2870 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x556302cd2ca8 <col:12>
|-CXXConstructorDecl 0x556302cd2978 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x556302cd2a88 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x556302cce0e0 'data' 'const char *'
| | `-ImplicitCastExpr 0x556302cd60f0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x556302cd60c0 <col:12> 'const char *const' lvalue .data 0x556302cce0e0
| |     `-DeclRefExpr 0x556302cd60a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x556302cd2a88 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x556302cce148 'length' 'int'
| | `-ImplicitCastExpr 0x556302cd6180 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x556302cd6150 <col:12> 'const int' lvalue .length 0x556302cce148
| |     `-DeclRefExpr 0x556302cd6130 <col:12> 'const String::rep_t' lvalue ParmVar 0x556302cd2a88 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x556302cce1d8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x556302cd6210 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x556302cd61e0 <col:12> 'String::memo_t *const' lvalue .memo 0x556302cce1d8
| |     `-DeclRefExpr 0x556302cd61c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x556302cd2a88 '' 'const String::rep_t &'
| `-CompoundStmt 0x556302cd6268 <col:12>
|-CXXConstructorDecl 0x556302cd2b28 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x556302cd2b28
| `-ParmVarDecl 0x556302cd2c38 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x556302cd8f90 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x556302ce2618 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x556302ce2728 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x556302ce2c40 <col:12>
|   |-BinaryOperator 0x556302ce2a58 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x556302ce2a10 <col:12> 'const char *' lvalue ->data 0x556302cce0e0
|   | | `-CXXThisExpr 0x556302ce2a00 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x556302ce2a40 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x556302ce29d0 <col:12> 'const char *const' lvalue .data 0x556302cce0e0
|   |     `-DeclRefExpr 0x556302ce29b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x556302ce2728 '' 'const String::rep_t &'
|   |-BinaryOperator 0x556302ce2b20 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x556302ce2ad8 <col:12> 'int' lvalue ->length 0x556302cce148
|   | | `-CXXThisExpr 0x556302ce2ac8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x556302ce2b08 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x556302ce2a98 <col:12> 'const int' lvalue .length 0x556302cce148
|   |     `-DeclRefExpr 0x556302ce2a78 <col:12> 'const String::rep_t' lvalue ParmVar 0x556302ce2728 '' 'const String::rep_t &'
|   |-BinaryOperator 0x556302ce2be8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x556302ce2ba0 <col:12> 'String::memo_t *' lvalue ->memo 0x556302cce1d8
|   | | `-CXXThisExpr 0x556302ce2b90 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x556302ce2bd0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x556302ce2b60 <col:12> 'String::memo_t *const' lvalue .memo 0x556302cce1d8
|   |     `-DeclRefExpr 0x556302ce2b40 <col:12> 'const String::rep_t' lvalue ParmVar 0x556302ce2728 '' 'const String::rep_t &'
|   `-ReturnStmt 0x556302ce2c30 <col:12>
|     `-UnaryOperator 0x556302ce2c18 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x556302ce2c08 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x556302ce2798 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x556302ce2798
  `-ParmVarDecl 0x556302ce28a8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556302cc3e60 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x556302cc3f78 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x556302cc4008 <col:16, col:22> col:16 public
|-TypedefDecl 0x556302cc4048 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55630298bdc0 'const char *'
|   `-QualType 0x55630298b311 'const char' const
|     `-BuiltinType 0x55630298b310 'char'
|-TypedefDecl 0x556302cc40d0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x556302cc40a0 'String::const_iterator' sugar
|   |-Typedef 0x556302cc4048 'const_iterator'
|   `-PointerType 0x55630298bdc0 'const char *'
|     `-QualType 0x55630298b311 'const char' const
|       `-BuiltinType 0x55630298b310 'char'
|-TypedefDecl 0x556302cc4240 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x556302cc41b0 'int (String::*)() const'
|   |-RecordType 0x556302cc3ef0 'String'
|   | `-CXXRecord 0x556302cc3e60 'String'
|   `-ParenType 0x556302cc4150 'int () const' sugar
|     `-FunctionProtoType 0x556302ca6880 'int () const' const cdecl
|       `-BuiltinType 0x55630298b370 'int'
|-TypedefDecl 0x556302cc42a8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x556302ae4da0 'int64_t' sugar
|   |-Typedef 0x5563029f42d0 'int64_t'
|   `-TypedefType 0x5563029cd4d0 '__int64_t' sugar
|     |-Typedef 0x5563029cd0a8 '__int64_t'
|     `-BuiltinType 0x55630298b390 'long'
|-TypedefDecl 0x556302cc4310 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x556302ae4cc0 'uint64_t' sugar
|   |-Typedef 0x5563029f4470 'uint64_t'
|   `-TypedefType 0x5563029cd560 '__uint64_t' sugar
|     |-Typedef 0x5563029cd118 '__uint64_t'
|     `-BuiltinType 0x55630298b430 'unsigned long'
|-TypedefDecl 0x556302cc43a0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x556302cc4370 'String::intmax_t' sugar
|   |-Typedef 0x556302cc42a8 'intmax_t'
|   `-TypedefType 0x556302ae4da0 'int64_t' sugar
|     |-Typedef 0x5563029f42d0 'int64_t'
|     `-TypedefType 0x5563029cd4d0 '__int64_t' sugar
|       |-Typedef 0x5563029cd0a8 '__int64_t'
|       `-BuiltinType 0x55630298b390 'long'
|-TypedefDecl 0x556302cc4430 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x556302cc4400 'String::uintmax_t' sugar
|   |-Typedef 0x556302cc4310 'uintmax_t'
|   `-TypedefType 0x556302ae4cc0 'uint64_t' sugar
|     |-Typedef 0x5563029f4470 'uint64_t'
|     `-TypedefType 0x5563029cd560 '__uint64_t' sugar
|       |-Typedef 0x5563029cd118 '__uint64_t'
|       `-BuiltinType 0x55630298b430 'unsigned long'
|-CXXConstructorDecl 0x556302cc44f0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x556302cc4698 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x556302cc45d8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x556302cc4848 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x556302cc4788 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x556302cc49a0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x556302cc4910 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x556302cc4bb8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x556302cc4a68 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x556302cc4ae8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x556302cc4dd8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x556302cc4c88 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x556302cc4d08 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x556302cc4ff8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x556302cc4ea8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x556302cc4f28 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x556302cc5218 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x556302cc50c8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x556302cc5148 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x556302cc53a8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x556302cc52e0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x556302cc5528 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x556302cc5468 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x556302cc56b8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x556302cc55f0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x556302cc5810 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x556302cc5780 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x556302cc5998 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x556302cc58d8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x556302cc5af0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x556302cc5a60 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x556302cc5c78 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x556302cc5bb8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x556302cc5e08 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x556302cc5d40 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x556302cc5f98 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x556302cc5ed0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x556302cc6128 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x556302cc6060 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x556302cc6220 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x556302cc6348 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x556302cc64c8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x556302cc6400 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x556302cc6618 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x556302cc6588 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x556302cc66c0 <col:63> "" ""
|-CXXMethodDecl 0x556302cc6808 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x556302cc6748 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x556302cc6a18 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x556302cc68c8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x556302cc6948 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x556302cc6c38 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x556302cc6ae0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x556302cc6b60 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x556302cc6f18 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x556302cc6cf8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x556302cc6d78 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x556302cd2340 <col:55> 'int' 10
| `-ParmVarDecl 0x556302cc6df0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x556302cd2360 <col:76> 'bool' true
|-CXXMethodDecl 0x556302cc71f8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x556302cc6fe0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x556302cc7060 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x556302cd2370 <col:56> 'int' 10
| `-ParmVarDecl 0x556302cc70d8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x556302cd2390 <col:77> 'bool' true
|-CXXMethodDecl 0x556302cc7300 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x556302cc73c8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x556302cc7490 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x556302cc7530 <col:20>
| `-OptimizeNoneAttr 0x556302cc7588 <col:30>
|-CXXConversionDecl 0x556302cc7678 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x556302cc7748 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x556302cc7808 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x556302cc78f8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x556302cc79b8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x556302cc7b38 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x556302cc7a70 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x556302cc7c88 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x556302cc7bf8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x556302cc7d78 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x556302cc7e38 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x556302cc8088 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x556302cc7ef0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x556302cc7f70 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x556302cc82e8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x556302cc8150 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x556302cc81d0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x556302cc83b8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x556302cc85c8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x556302cc8470 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x556302cc84f0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x556302cc87e8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x556302cc8690 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x556302cc8710 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x556302cc8978 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x556302cc88b0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x556302cc8a68 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x556302cc8bd8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x556302cc8b18 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x556302cc8de8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x556302cc8c98 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x556302cc8d18 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x556302cc9000 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x556302cc8ea8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x556302cc8f20 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x556302cc9190 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x556302cc90c0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x556302cc93b0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x556302cc9250 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x556302cc92d0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x556302cc9500 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x556302cc9470 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x556302cc96d8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x556302cc95c0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x556302cc9640 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x556302cc9828 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x556302cc9798 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x556302ccaa70 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x556302cc98e0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x556302cca990 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x556302cd23a0 <col:39> 'int' 0
|-CXXMethodDecl 0x556302ccac90 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x556302ccab30 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x556302ccabb0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x556302cd23c0 <col:48> 'int' 0
|-CXXMethodDecl 0x556302ccae70 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x556302ccad50 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x556302ccadd0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x556302cd23e0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x556302ccaf40 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x556302ccb000 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x556302ccb0c0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x556302ccb180 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x556302ccb240 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x556302ccb3e8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x556302ccb2f0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x556302ccb568 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x556302ccb4a0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x556302ccb6e8 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x556302ccb628 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x556302ccb868 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x556302ccb7a0 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x556302ccb9b0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x556302ccb920 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x556302ccbb00 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x556302ccba70 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x556302ccbcd8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x556302ccbbc0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x556302ccbc40 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x556302ccbeb8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x556302ccbda0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x556302ccbe20 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x556302ccc008 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x556302ccbf78 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x556302ccc218 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x556302ccc0c8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x556302ccc148 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x556302ccc378 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x556302ccc2e0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x556302ccc4d0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x556302ccc438 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x556302ccc578 <col:57> "" ""
|-CXXMethodDecl 0x556302ccc688 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x556302ccc5f8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x556302ccc7d8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x556302ccc748 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x556302ccc958 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x556302ccc890 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x556302ccca20 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x556302cccae0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x556302cccba0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x556302cccc40 <col:49> "" ""
|-CXXMethodDecl 0x556302ccccd0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x556302cccd90 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x556302ccce80 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x556302cccf48 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x556302ccd008 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x556302ccd0c8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x556302ccd1c0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x556302ccd288 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x556302ccd350 <line:174:5, col:42> col:31 used empty_data 'const char *()' static inline
|-CXXMethodDecl 0x556302ccd528 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x556302ccd408 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x556302ccd488 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x556302ccd750 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x556302ccd5f0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x556302ccd670 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x556302ccd860 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x556302ccd8c8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x556302ccd8f0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x556302ccda08 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x556302ccdaa8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x556302ccdb08 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x556302ccdb68 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x556302ccdc18 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x556302ccdc80 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x556302ccdeb8 <line:201:2, col:32> col:2 referenced MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x556302ccdf08 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556302ccde98 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x556302ccdda8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x556302ccdd50 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x556302ccdd90 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x556302ccdd70 <col:32> 'int' 8
|-CXXRecordDecl 0x556302ccdf20 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x556302cce038 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x556302cce0e0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x556302cce148 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x556302cce1d8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x556302cd2870 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x556302cd2ca8 <col:12>
| |-CXXConstructorDecl 0x556302cd2978 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x556302cd2a88 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x556302cce0e0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x556302cd60f0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x556302cd60c0 <col:12> 'const char *const' lvalue .data 0x556302cce0e0
| | |     `-DeclRefExpr 0x556302cd60a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x556302cd2a88 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x556302cce148 'length' 'int'
| | | `-ImplicitCastExpr 0x556302cd6180 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x556302cd6150 <col:12> 'const int' lvalue .length 0x556302cce148
| | |     `-DeclRefExpr 0x556302cd6130 <col:12> 'const String::rep_t' lvalue ParmVar 0x556302cd2a88 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x556302cce1d8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x556302cd6210 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x556302cd61e0 <col:12> 'String::memo_t *const' lvalue .memo 0x556302cce1d8
| | |     `-DeclRefExpr 0x556302cd61c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x556302cd2a88 '' 'const String::rep_t &'
| | `-CompoundStmt 0x556302cd6268 <col:12>
| |-CXXConstructorDecl 0x556302cd2b28 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x556302cd2b28
| | `-ParmVarDecl 0x556302cd2c38 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x556302cd8f90 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x556302ce2618 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x556302ce2728 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x556302ce2c40 <col:12>
| |   |-BinaryOperator 0x556302ce2a58 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x556302ce2a10 <col:12> 'const char *' lvalue ->data 0x556302cce0e0
| |   | | `-CXXThisExpr 0x556302ce2a00 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x556302ce2a40 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x556302ce29d0 <col:12> 'const char *const' lvalue .data 0x556302cce0e0
| |   |     `-DeclRefExpr 0x556302ce29b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x556302ce2728 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x556302ce2b20 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x556302ce2ad8 <col:12> 'int' lvalue ->length 0x556302cce148
| |   | | `-CXXThisExpr 0x556302ce2ac8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x556302ce2b08 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x556302ce2a98 <col:12> 'const int' lvalue .length 0x556302cce148
| |   |     `-DeclRefExpr 0x556302ce2a78 <col:12> 'const String::rep_t' lvalue ParmVar 0x556302ce2728 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x556302ce2be8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x556302ce2ba0 <col:12> 'String::memo_t *' lvalue ->memo 0x556302cce1d8
| |   | | `-CXXThisExpr 0x556302ce2b90 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x556302ce2bd0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x556302ce2b60 <col:12> 'String::memo_t *const' lvalue .memo 0x556302cce1d8
| |   |     `-DeclRefExpr 0x556302ce2b40 <col:12> 'const String::rep_t' lvalue ParmVar 0x556302ce2728 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x556302ce2c30 <col:12>
| |     `-UnaryOperator 0x556302ce2c18 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x556302ce2c08 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x556302ce2798 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x556302ce2798
|   `-ParmVarDecl 0x556302ce28a8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x556302cce250 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x556302cce498 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x556302cce2b8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x556302cce338 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x556302cce3b0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x556302cd2830 <col:79, line:261:5>
|   |-BinaryOperator 0x556302cd24a8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x556302cd2440 <col:2, col:5> 'const char *' lvalue .data 0x556302cce0e0
|   | | `-MemberExpr 0x556302cd2410 <col:2> 'String::rep_t' lvalue ->_r 0x556302cce250
|   | |   `-CXXThisExpr 0x556302cd2400 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x556302cd2490 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x556302cd2470 <col:12> 'const char *' lvalue ParmVar 0x556302cce2b8 'data' 'const char *'
|   |-BinaryOperator 0x556302cd2570 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x556302cd2508 <col:2, col:5> 'int' lvalue .length 0x556302cce148
|   | | `-MemberExpr 0x556302cd24d8 <col:2> 'String::rep_t' lvalue ->_r 0x556302cce250
|   | |   `-CXXThisExpr 0x556302cd24c8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x556302cd2558 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x556302cd2538 <col:14> 'int' lvalue ParmVar 0x556302cce338 'length' 'int'
|   `-IfStmt 0x556302cd2818 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x556302cd2690 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x556302cd2678 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x556302cd2658 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x556302cd2638 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x556302cd25d0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x556302cce1d8
|     |       | `-MemberExpr 0x556302cd25a0 <col:7> 'String::rep_t' lvalue ->_r 0x556302cce250
|     |       |   `-CXXThisExpr 0x556302cd2590 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x556302cd2620 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x556302cd2600 <col:17> 'String::memo_t *' lvalue ParmVar 0x556302cce3b0 'memo' 'String::memo_t *'
|     `-CallExpr 0x556302cd27f0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x556302cd27d8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x556302cd26e0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x556302c52188 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x556302cd2748 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x556302ccdaa8
|         `-ImplicitCastExpr 0x556302cd2730 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x556302cd2710 <col:27> 'String::memo_t *' lvalue ParmVar 0x556302cce3b0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x556302cce748 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x556302cce568 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x556302cce5e8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x556302cce660 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x556302cce250 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x556302cd2cb8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x556302cd2e48 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x556302cd2db0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x556302cd2d20 <col:2> '<bound member function type>' ->assign_memo 0x556302cce498
|     | `-ImplicitCastExpr 0x556302cd2de8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x556302cd2d10 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x556302cd2e00 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x556302cd2d50 <col:14> 'const char *' lvalue ParmVar 0x556302cce568 'data' 'const char *'
|     |-ImplicitCastExpr 0x556302cd2e18 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x556302cd2d70 <col:20> 'int' lvalue ParmVar 0x556302cce5e8 'length' 'int'
|     `-ImplicitCastExpr 0x556302cd2e30 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x556302cd2d90 <col:28> 'String::memo_t *' lvalue ParmVar 0x556302cce660 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x556302cce8d8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x556302cce818 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x556302cd30a0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x556302cd3020 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x556302cd2e70 <col:2> '<bound member function type>' ->assign_memo 0x556302cce498
|     | `-CXXThisExpr 0x556302cd2e60 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x556302cd3058 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x556302cd2ef0 <col:14, col:19> 'const char *' lvalue .data 0x556302cce0e0
|     |   `-MemberExpr 0x556302cd2ec0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x556302cce250
|     |     `-DeclRefExpr 0x556302cd2ea0 <col:14> 'const String' lvalue ParmVar 0x556302cce818 'x' 'const String &'
|     |-ImplicitCastExpr 0x556302cd3070 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x556302cd2f70 <col:25, col:30> 'int' lvalue .length 0x556302cce148
|     |   `-MemberExpr 0x556302cd2f40 <col:25, col:27> 'String::rep_t' lvalue ._r 0x556302cce250
|     |     `-DeclRefExpr 0x556302cd2f20 <col:25> 'const String' lvalue ParmVar 0x556302cce818 'x' 'const String &'
|     `-ImplicitCastExpr 0x556302cd3088 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x556302cd2ff0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x556302cce1d8
|         `-MemberExpr 0x556302cd2fc0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x556302cce250
|           `-DeclRefExpr 0x556302cd2fa0 <col:38> 'const String' lvalue ParmVar 0x556302cce818 'x' 'const String &'
|-CXXMethodDecl 0x556302cd0aa0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x556302cd3a60 <col:31, line:278:5>
|   `-IfStmt 0x556302cd3a48 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x556302cd3140 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x556302cd3128 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x556302cd30f8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x556302cce1d8
|     |     `-MemberExpr 0x556302cd30c8 <col:6> 'String::rep_t' lvalue ->_r 0x556302cce250
|     |       `-CXXThisExpr 0x556302cd30b8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x556302cd3a20 <col:15, line:277:2>
|       |-ParenExpr 0x556302cd35f0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x556302cd35c0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x556302cd3250 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x556302cd3238 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x556302cd3220 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x556302cd31e0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x556302ccdaa8
|       |   |       `-ImplicitCastExpr 0x556302cd31c8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x556302cd3198 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x556302cce1d8
|       |   |           `-MemberExpr 0x556302cd3168 <col:27> 'String::rep_t' lvalue ->_r 0x556302cce250
|       |   |             `-CXXThisExpr 0x556302cd3158 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x556302cd32b0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x556302cd3290 <col:54> 'int' 0
|       |   `-CallExpr 0x556302cd3520 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x556302cd3508 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x556302cd3488 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x556302a2b600 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x556302cd3560 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x556302cd3398 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x556302cd3578 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x556302cd33c8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x556302cd3590 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x556302cd3400 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x556302cd35a8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x556302cd3470 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x556302cd3458 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x556302cd3420 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x556302cd3940 <line:274:6, line:275:22>
|       | |-CallExpr 0x556302cd3800 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x556302cd37e8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x556302cd3760 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x556302c54970 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x556302cd3730 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x556302ccdaa8
|       | |   `-ImplicitCastExpr 0x556302cd3718 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x556302cd36e8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x556302cce1d8
|       | |       `-MemberExpr 0x556302cd36b8 <col:40> 'String::rep_t' lvalue ->_r 0x556302cce250
|       | |         `-CXXThisExpr 0x556302cd36a8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x556302cd3900 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x556302cd38e8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x556302cd3828 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x556302cd1778 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x556302cd3928 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x556302cd3888 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x556302cce1d8
|       |       `-MemberExpr 0x556302cd3858 <col:15> 'String::rep_t' lvalue ->_r 0x556302cce250
|       |         `-CXXThisExpr 0x556302cd3848 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x556302cd3a00 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x556302cd3998 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x556302cce1d8
|         | `-MemberExpr 0x556302cd3968 <col:6> 'String::rep_t' lvalue ->_r 0x556302cce250
|         |   `-CXXThisExpr 0x556302cd3958 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x556302cd39e8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x556302cd39c8 <col:16> 'int' 0
|-CXXMethodDecl 0x556302cd0d38 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x556302cd0b58 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x556302cd0bd8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x556302cd0c50 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x556302cd0e10 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x556302cd1060 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x556302cd0ec8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x556302cd0f48 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x556302cd0fc0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x556302cd1248 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x556302cd1130 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x556302cd11b0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x556302cd1348 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x556302cd3b38 <col:41, line:286:5>
|   `-ReturnStmt 0x556302cd3b28 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x556302cd3af8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x556302cd3ac0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x556302cd3aa8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x556302cd3a88 <col:46> 'int' 1
|-CXXMethodDecl 0x556302cd15e8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x556302cd1400 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x556302cd1480 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x556302cd1500 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x556302cd1778 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x556302cd16b0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x556302cd1848 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x556302cd1a18 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x556302cd1900 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x556302cd1980 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x556302cd1ad8 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x556302cd1ba0 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x556302cd1ca8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x556302cd1d20 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x556302cd1d98 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x556302cd1e00 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x556302cd1f00 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x556302cd1f50 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556302cd1ee0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x556302cd1ec0 <col:22> 'int' 14
|-CXXMethodDecl 0x556302cd2168 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x556302cd1f80 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x556302cd2000 <col:38> col:41 'int'
| `-ParmVarDecl 0x556302cd2080 <col:43> col:46 'int'
|-FriendDecl 0x556302cd2270 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x556302cd2300 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x556303038310 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x5563030384e8 prev 0x556303038310 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x556303038578 <col:46, col:52> col:46 public
|-TypedefDecl 0x5563030385a0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55630298b370 'int'
|-TypedefDecl 0x556303039f40 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x556303039ef0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x556303039ed0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x5563030387b8 'type'
|     `-SubstTemplateTypeParmType 0x556303038780 'String' sugar
|       |-TemplateTypeParmType 0x556302c94660 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x556302c94610 'T'
|       `-RecordType 0x556302cc3ef0 'String'
|         `-CXXRecord 0x556302cc3e60 'String'
|-TypedefDecl 0x556303039ff8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x556303039fc0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x556303039fa0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x556303039f40 'type'
|     `-ElaboratedType 0x556303039ef0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x556303039ed0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x5563030387b8 'type'
|         `-SubstTemplateTypeParmType 0x556303038780 'String' sugar
|           |-TemplateTypeParmType 0x556302c94660 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x556302c94610 'T'
|           `-RecordType 0x556302cc3ef0 'String'
|             `-CXXRecord 0x556302cc3e60 'String'
|-CXXMethodDecl 0x55630303a178 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55630303a088 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55630303a268 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55630303a348 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55630303a348
|-CXXMethodDecl 0x55630303a618 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55630303a520 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55630303a858 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55630303a6d0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55630303a748 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55630303aa28 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55630303a918 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55630303a990 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55630303ab88 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55630303ac58 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55630303aea8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55630303ad18 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55630303ad90 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55630303b108 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55630303af78 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55630303aff0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55630303b2c8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55630303b1d8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55630303b488 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55630303b390 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55630303b540 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55630303b5f0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55630303b828 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55630303b6a0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55630303b718 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55630303bac8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55630303b9d0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55630303bb90 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55630303bbe0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55630303bc30 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.5 = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.5 = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x556302efe630 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x556303036fb8 prev 0x556302efe630 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x556303038280 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x556303038230 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x556303038210 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5563030380c0 'type'
|     `-SubstTemplateTypeParmType 0x556303037f50 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x556302c6d280 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x556302c6d228 'F'
|       `-RecordType 0x556303037bb0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x556303037ad0 'typed_array_memory'
|-FieldDecl 0x55630303bc80 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55630303bcd0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55630303bd08 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x556303037050 'String' sugar
|   |-TemplateTypeParmType 0x556302ca3a80 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x556302ca3a28 'T'
|   `-RecordType 0x556302cc3ef0 'String'
|     `-CXXRecord 0x556302cc3e60 'String'
|-TypedefDecl 0x55630303bd98 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55630303bd60 'String &'
|   `-SubstTemplateTypeParmType 0x556303037050 'String' sugar
|     |-TemplateTypeParmType 0x556302ca3a80 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x556302ca3a28 'T'
|     `-RecordType 0x556302cc3ef0 'String'
|       `-CXXRecord 0x556302cc3e60 'String'
|-TypedefDecl 0x55630303be28 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55630303bdf0 'const String &'
|   `-QualType 0x556303037051 'const String' const
|     `-SubstTemplateTypeParmType 0x556303037050 'String' sugar
|       |-TemplateTypeParmType 0x556302ca3a80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x556302ca3a28 'T'
|       `-RecordType 0x556302cc3ef0 'String'
|         `-CXXRecord 0x556302cc3e60 'String'
|-TypedefDecl 0x55630303beb8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55630303be80 'String *'
|   `-SubstTemplateTypeParmType 0x556303037050 'String' sugar
|     |-TemplateTypeParmType 0x556302ca3a80 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x556302ca3a28 'T'
|     `-RecordType 0x556302cc3ef0 'String'
|       `-CXXRecord 0x556302cc3e60 'String'
|-TypedefDecl 0x55630303bf48 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55630303bf10 'const String *'
|   `-QualType 0x556303037051 'const String' const
|     `-SubstTemplateTypeParmType 0x556303037050 'String' sugar
|       |-TemplateTypeParmType 0x556302ca3a80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x556302ca3a28 'T'
|       `-RecordType 0x556302cc3ef0 'String'
|         `-CXXRecord 0x556302cc3e60 'String'
|-TypedefDecl 0x55630303cba0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55630303cb50 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55630303cb30 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55630303ca68 'type'
|     `-LValueReferenceType 0x55630303ca30 'const String &'
|       `-QualType 0x55630303c7d1 'const String' const
|         `-SubstTemplateTypeParmType 0x55630303c7d0 'String' sugar
|           |-TemplateTypeParmType 0x556302c75390 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x556302c75338 'T'
|           `-RecordType 0x556302cc3ef0 'String'
|             `-CXXRecord 0x556302cc3e60 'String'
|-TypedefDecl 0x55630303cc08 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55630303bdf0 'const String &'
|   `-QualType 0x556303037051 'const String' const
|     `-SubstTemplateTypeParmType 0x556303037050 'String' sugar
|       |-TemplateTypeParmType 0x556302ca3a80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x556302ca3a28 'T'
|       `-RecordType 0x556302cc3ef0 'String'
|         `-CXXRecord 0x556302cc3e60 'String'
|-TypedefDecl 0x55630303cc60 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55630298b370 'int'
|-TypedefDecl 0x55630303ccc8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55630303be80 'String *'
|   `-SubstTemplateTypeParmType 0x556303037050 'String' sugar
|     |-TemplateTypeParmType 0x556302ca3a80 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x556302ca3a28 'T'
|     `-RecordType 0x556302cc3ef0 'String'
|       `-CXXRecord 0x556302cc3e60 'String'
|-TypedefDecl 0x55630303cd30 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55630303bf10 'const String *'
|   `-QualType 0x556303037051 'const String' const
|     `-SubstTemplateTypeParmType 0x556303037050 'String' sugar
|       |-TemplateTypeParmType 0x556302ca3a80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x556302ca3a28 'T'
|       `-RecordType 0x556302cc3ef0 'String'
|         `-CXXRecord 0x556302cc3e60 'String'
|-EnumDecl 0x55630303cd88 <line:134:5> col:5
| `-EnumConstantDecl 0x55630303ce80 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55630303ce60 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x556302ca4c48 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x556302ca4c20 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x556302ca4c00 <col:40> 'int' 1
|-CXXConstructorDecl 0x55630303cf08 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55630303d198 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55630303cfc0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55630303d060 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55630303d428 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55630303d310 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55630303d6e8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55630303d5d0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55630303da00 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55630303d8e0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55630303dd10 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55630303dbf0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55630303e000 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55630303de48 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55630303dec0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55630303e128 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55630303e1d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55630303e230 <col:30> Inherited
|-CXXMethodDecl 0x55630303e278 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55630303e328 <col:20> Inherited
| `-OptimizeNoneAttr 0x55630303e380 <col:30> Inherited
|-CXXMethodDecl 0x55630303e448 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55630303e4f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55630303e550 <col:30> Inherited
|-CXXMethodDecl 0x55630303e598 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55630303e648 <col:20> Inherited
| `-OptimizeNoneAttr 0x55630303e6a0 <col:30> Inherited
|-CXXMethodDecl 0x55630303e6e8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55630303e798 <col:20> Inherited
| `-OptimizeNoneAttr 0x55630303e7f0 <col:30> Inherited
|-CXXMethodDecl 0x55630303e838 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55630303e8e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55630303e940 <col:30> Inherited
|-CXXMethodDecl 0x55630303e968 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55630303ea18 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55630303eac8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55630303ec88 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55630303eb78 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55630303ebf0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55630303edd8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55630303ed48 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55630303ef88 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55630303ee90 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55630303f040 <col:20>
| `-OptimizeNoneAttr 0x55630303f098 <col:30>
|-CXXMethodDecl 0x55630303f1b8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55630303f0c0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55630303f270 <col:20>
| `-OptimizeNoneAttr 0x55630303f2c8 <col:30>
|-CXXMethodDecl 0x55630303f380 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55630303f2f0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55630303f4c8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55630303f438 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55630303f5f8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55630303f6f8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55630303f7c8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55630303f898 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55630303f9d8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55630303f948 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55630303fb20 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55630303fa90 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55630303fc68 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55630303fbd8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55630303fd20 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55630303fe20 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55630303fd90 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55630303fed8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55630303ff98 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x556303040098 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x556303040218 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x556303040158 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x5563030409a8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5563030402d0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x556303040908 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x556303040808 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x556303040a88 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x556303040bd8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x556303040b48 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x556303040c90 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x556303040ed8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x556303040d50 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x556303040dc8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x556303041068 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x556303040fa8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5563030412b0 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x556303041130 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5563030411a8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x556303041370 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5563030415c8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x5563030414d0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x556303041698 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x556303041698

Layout: <CGRecordLayout
  LLVMType:%class.Vector.4 = type { %class.vector_memory.5 }
  NonVirtualBaseLLVMType:%class.Vector.4 = type { %class.vector_memory.5 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5563030d9ce8 prev 0x55630304fc48 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5563030d9de0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x5563030d9e70 <col:22, col:28> col:22 public
|-EnumDecl 0x5563030d9e98 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x5563030d9fb8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x5563030d9f98 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x5563030d9f80 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5563030d9f60 <col:14> 'int' 999
| |-EnumConstantDecl 0x5563030da060 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x5563030da040 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x5563030da028 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5563030da008 <col:14> 'int' 1
| |-EnumConstantDecl 0x5563030da0f0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x5563030da0d0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x5563030da0b0 <col:17> 'int' 0
| |-EnumConstantDecl 0x5563030da180 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x5563030da160 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x5563030da140 <col:13> 'int' 1
| |-EnumConstantDecl 0x5563030da210 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x5563030da1f0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x5563030da1d0 <col:16> 'int' 2
| |-EnumConstantDecl 0x5563030da2a0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x5563030da280 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x5563030da260 <col:13> 'int' 3
| |-EnumConstantDecl 0x5563030da330 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x5563030da310 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x5563030da2f0 <col:15> 'int' 4
| |-EnumConstantDecl 0x5563030da3c0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x5563030da3a0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x5563030da380 <col:14> 'int' 5
| |-EnumConstantDecl 0x5563030da450 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x5563030da430 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x5563030da410 <col:12> 'int' 6
| `-EnumConstantDecl 0x5563030da4e0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x5563030da4c0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x5563030da4a0 <col:13> 'int' 7
|-VarDecl 0x5563030da550 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x5563030da5d8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x5563030da660 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x5563030da6e8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x5563030da770 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x5563030da7f8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x5563030da880 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x5563030da908 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x5563030da990 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x5563030daa18 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x5563030daaa0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x5563030daba0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x5563030dfed8 '_nerrors' 'int'
| | `-IntegerLiteral 0x5563030e0668 <line:128:13> 'int' 0
| `-CompoundStmt 0x5563030e06d8 <col:16, line:129:5>
|-CXXDestructorDecl 0x5563030dac90 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x5563030e06e8 <col:29, line:132:5>
|-CXXMethodDecl 0x5563030dae48 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x5563030dad80 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5563030daf10 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5563030daff8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5563030e0740 <col:44, line:161:5>
|   `-ReturnStmt 0x5563030e0730 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x5563030e0718 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5563030e06f8 <col:9> 'ErrorHandler *' lvalue Var 0x5563030dff38 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x5563030db138 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x5563030db0a8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5563030db200 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5563030e07a0 <col:43, line:173:5>
|   `-ReturnStmt 0x5563030e0790 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x5563030e0778 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5563030e0758 <col:9> 'ErrorHandler *' lvalue Var 0x5563030dffb0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x5563030db2b8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x5563030db338 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x5563030db448 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x5563030db3b8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5563030db598 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x5563030db508 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5563030db6f0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x5563030db658 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x5563030db848 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x5563030db7b0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5563030db9a0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x5563030db908 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5563030dbbb0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5563030dba58 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x5563030dbad8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x5563030dbd88 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5563030dbc70 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x5563030dbcf0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x5563030dbfa8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5563030dbe48 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x5563030dbec8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x5563030dc188 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5563030dc068 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5563030dc0e8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5563030dc368 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5563030dc248 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5563030dc2c8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5563030dc4f0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x5563030dc428 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x5563030dc6c0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x5563030dc5a8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5563030dc620 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x5563030e09f8 <col:57, line:234:5>
|   `-ReturnStmt 0x5563030e09e8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x5563030e09d0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5563030e0978 <col:9, col:41> 'int'
|         |-MemberExpr 0x5563030e0948 <col:9> '<bound member function type>' ->xmessage 0x5563030dc4f0
|         | `-CXXThisExpr 0x5563030e0938 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x5563030e09b8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5563030e09a0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5563030e0918 <col:18, col:40> 'String' (CXXTemporary 0x5563030e0918)
|               `-CallExpr 0x5563030e08e0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x5563030e08c8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x5563030e0840 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5563030de708 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x5563030e0860 <col:31> 'const String' lvalue ParmVar 0x5563030dc620 'str' 'const String &'
|                 `-DeclRefExpr 0x5563030e0880 <col:36> 'const String' lvalue ParmVar 0x5563030dc5a8 'anno' 'const String &'
|-CXXMethodDecl 0x5563030dc9a0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5563030dc780 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5563030dc800 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x5563030dc878 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5563030e0c88 <col:68, line:243:5>
|   `-ReturnStmt 0x5563030e0c78 <line:242:2, col:41>
|     `-ExprWithCleanups 0x5563030e0c60 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5563030e0c00 <col:9, col:41> 'int'
|         |-MemberExpr 0x5563030e0bd0 <col:9> '<bound member function type>' ->xmessage 0x5563030dc6c0
|         | `-CXXThisExpr 0x5563030e0bc0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5563030e0a98 <col:18> 'const String' lvalue ParmVar 0x5563030dc780 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5563030e0c48 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5563030e0c30 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5563030e0ba0 <col:24, col:40> 'String' (CXXTemporary 0x5563030e0ba0)
|               `-CXXMemberCallExpr 0x5563030e0b38 <col:24, col:40> 'String'
|                 |-MemberExpr 0x5563030e0ac8 <col:24> '<bound member function type>' ->vformat 0x5563030ddbd0
|                 | `-CXXThisExpr 0x5563030e0ab8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5563030e0b68 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5563030e0af8 <col:32> 'const char *' lvalue ParmVar 0x5563030dc800 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5563030e0b80 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5563030e0b18 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5563030dc878 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5563030dcc40 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x5563030dca68 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5563030dcae0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5563030dcb58 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x5563030e0fc8 <col:23, line:254:5>
|   `-ReturnStmt 0x5563030e0fb8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x5563030e0fa0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x5563030e0f40 <col:9, col:71> 'int'
|         |-MemberExpr 0x5563030e0f10 <col:9> '<bound member function type>' ->xmessage 0x5563030dc6c0
|         | `-CXXThisExpr 0x5563030e0f00 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x5563030e0f88 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x5563030e0f70 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x5563030e0ec0 <col:18, col:65> 'String' (CXXTemporary 0x5563030e0ec0)
|         |     `-CallExpr 0x5563030e0e58 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x5563030e0e40 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x5563030e0d28 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5563030de708 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x5563030e0d48 <col:31> 'const String' lvalue ParmVar 0x5563030dcae0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x5563030e0ea0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x5563030e0e88 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x5563030e0e20 <col:37, col:64> 'String' (CXXTemporary 0x5563030e0e20)
|         |             `-CallExpr 0x5563030e0df0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x5563030e0dd8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x5563030e0d68 <col:37> 'String (const String &)' lvalue CXXMethod 0x5563030ded58 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x5563030e0d88 <col:56> 'const String' lvalue ParmVar 0x5563030dca68 'landmark' 'const String &'
|         `-DeclRefExpr 0x5563030e0ee0 <col:68> 'const String' lvalue ParmVar 0x5563030dcb58 'str' 'const String &'
|-CXXMethodDecl 0x5563030dd008 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5563030dcd08 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5563030dcd80 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5563030dce00 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x5563030dce78 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5563030e1280 <col:34, line:267:5>
|   `-ReturnStmt 0x5563030e1270 <line:266:2, col:51>
|     `-ExprWithCleanups 0x5563030e1258 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x5563030e11f0 <col:9, col:51> 'int'
|         |-MemberExpr 0x5563030e11c0 <col:9> '<bound member function type>' ->xmessage 0x5563030dcc40
|         | `-CXXThisExpr 0x5563030e11b0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5563030e1068 <col:18> 'const String' lvalue ParmVar 0x5563030dcd08 'landmark' 'const String &'
|         |-DeclRefExpr 0x5563030e1088 <col:28> 'const String' lvalue ParmVar 0x5563030dcd80 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5563030e1240 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x5563030e1228 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5563030e1190 <col:34, col:50> 'String' (CXXTemporary 0x5563030e1190)
|               `-CXXMemberCallExpr 0x5563030e1128 <col:34, col:50> 'String'
|                 |-MemberExpr 0x5563030e10b8 <col:34> '<bound member function type>' ->vformat 0x5563030ddbd0
|                 | `-CXXThisExpr 0x5563030e10a8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5563030e1158 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5563030e10e8 <col:42> 'const char *' lvalue ParmVar 0x5563030dce00 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5563030e1170 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5563030e1108 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5563030dce78 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5563030dd120 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x5563030e1300 <col:25, line:288:5>
|   `-ReturnStmt 0x5563030e12f0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x5563030e12d8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x5563030e12a8 <col:9> 'const int' lvalue ->_nerrors 0x5563030dfed8
|         `-CXXThisExpr 0x5563030e1298 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x5563030dd330 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x5563030dd1d8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x5563030dd258 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x5563030dd618 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5563030dd3f8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x5563030dd478 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x5563030dd4f0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5563030dd7b0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x5563030dd6e8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x5563030dd9f8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5563030dd870 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x5563030dd8e8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5563030e1560 <col:58, line:357:5>
|   `-ReturnStmt 0x5563030e1550 <line:356:2, col:29>
|     `-ExprWithCleanups 0x5563030e1538 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x5563030e1508 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5563030e14f0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5563030e14d0 <col:9, col:29> 'String' (CXXTemporary 0x5563030e14d0)
|             `-CallExpr 0x5563030e1460 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x5563030e1448 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5563030e13c8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x5563030dd618 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x5563030e1368 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x5563030e1498 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x5563030e1388 <col:21> 'const char *' lvalue ParmVar 0x5563030dd870 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x5563030e14b0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x5563030e13a8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5563030dd8e8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5563030ddbd0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x5563030ddac0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x5563030ddb38 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5563030ddd28 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x5563030ddc98 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x5563030dde70 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x5563030ddde0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x5563030de110 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x5563030ddf28 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x5563030ddfa8 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x5563030de020 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x5563030de270 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x5563030de1e0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x5563030e1678 <col:37, line:441:5>
|   `-IfStmt 0x5563030e1660 <line:439:2, line:440:8>
|     |-BinaryOperator 0x5563030e15e8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x5563030e15b8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x5563030e1578 <col:6> 'int' lvalue ParmVar 0x5563030de1e0 'level' 'int'
|     | `-ImplicitCastExpr 0x5563030e15d0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x5563030e1598 <col:15> 'ErrorHandler::Level' EnumConstant 0x5563030da2a0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x5563030e1648 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x5563030e1618 <col:8> 'int' lvalue ->_nerrors 0x5563030dfed8
|         `-CXXThisExpr 0x5563030e1608 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x5563030de338 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x5563030e1710 <col:26, line:448:5>
|   `-BinaryOperator 0x5563030e16f0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x5563030e16a0 <col:2> 'int' lvalue ->_nerrors 0x5563030dfed8
|     | `-CXXThisExpr 0x5563030e1690 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x5563030e16d0 <col:13> 'int' 0
|-CXXMethodDecl 0x5563030de500 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x5563030de3f0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5563030de468 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x5563030de708 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x5563030de5c0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x5563030de638 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x5563030de9b8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x5563030de7c8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x5563030de848 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x5563030de8c8 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x5563030dea70 <col:59> 0 0
|-CXXMethodDecl 0x5563030dec08 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x5563030deae8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x5563030deb68 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x5563030e1d80 <col:70, line:534:5>
|   |-DeclStmt 0x5563030e1880 <line:528:2, col:20>
|   | |-VarDecl 0x5563030e1738 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x5563030e17a0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x5563030e17d8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x5563030e1840 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x5563030e1950 <line:529:2, col:23>
|   | `-VarDecl 0x5563030e18b0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x5563030e1938 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5563030e1918 <col:18> 'const char *' lvalue ParmVar 0x5563030deae8 'begin' 'const char *'
|   |-DoStmt 0x5563030e1d18 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x5563030e1c48 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x5563030e1c30 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x5563030e1c10 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x5563030e1968 <col:6> 'const char *' lvalue Var 0x5563030e18b0 'x' 'const char *'
|   | |     `-CallExpr 0x5563030e1b60 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x5563030e1b48 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5563030e1b00 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x5563030e03b0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x5563030e1bc8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x5563030e1bb0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x5563030e1a20 <col:20, col:27> 'String' (CXXTemporary 0x5563030e1a20)
|   | |       |     `-CXXTemporaryObjectExpr 0x5563030e19e8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x5563030e1be0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5563030e1a40 <col:30> 'const char *' lvalue Var 0x5563030e18b0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x5563030e1bf8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5563030e1a60 <col:33> 'const char *' lvalue ParmVar 0x5563030deb68 'end' 'const char *'
|   | |       |-UnaryOperator 0x5563030e1aa0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5563030e1a80 <col:39> 'String' lvalue Var 0x5563030e1738 'name' 'String'
|   | |       |-UnaryOperator 0x5563030e1ad8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5563030e1ab8 <col:46> 'String' lvalue Var 0x5563030e17d8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x5563030e1af0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x5563030e1d00 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x5563030e1ce8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x5563030e1cc8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x5563030e1c98 <col:11> '<bound member function type>' .operator int (String::*)() const 0x556302cc7678
|   |         `-ImplicitCastExpr 0x5563030e1c80 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x5563030e1c60 <col:11> 'String' lvalue Var 0x5563030e1738 'name' 'String'
|   `-ReturnStmt 0x5563030e1d70 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x5563030e1d58 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x5563030e1d38 <col:9> 'const char *' lvalue Var 0x5563030e18b0 'x' 'const char *'
|-CXXMethodDecl 0x5563030ded58 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x5563030decc8 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x5563030e2388 <col:55, line:550:5>
|   `-IfStmt 0x5563030e2360 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x5563030e1fc0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x5563030e1fa8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5563030e1f90 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5563030e1f70 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5563030e1f40 <col:6> '<bound member function type>' .operator int (String::*)() const 0x556302cc7678
|     | |       `-DeclRefExpr 0x5563030e1de0 <col:6> 'const String' lvalue ParmVar 0x5563030decc8 'x' 'const String &'
|     | `-BinaryOperator 0x5563030e1f20 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x5563030e1ef0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x5563030e1ea0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x5563030e1e88 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5563030e1e40 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x556302cded80 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x5563030e1e00 <col:11> 'const String' lvalue ParmVar 0x5563030decc8 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x5563030e1e20 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x5563030e1f08 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x5563030e1ed8 <col:19> 'char' 123
|     |-ReturnStmt 0x5563030e2030 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x5563030e2000 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x5563030e1fe0 <col:13> 'const String' lvalue ParmVar 0x5563030decc8 'x' 'const String &'
|     `-IfStmt 0x5563030e2338 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x5563030e20c8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5563030e20b0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5563030e2090 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5563030e2060 <col:11> '<bound member function type>' .operator int (String::*)() const 0x556302cc7678
|       |       `-DeclRefExpr 0x5563030e2040 <col:11> 'const String' lvalue ParmVar 0x5563030decc8 'x' 'const String &'
|       |-ReturnStmt 0x5563030e2250 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x5563030e2238 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x5563030e2208 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x5563030e21f0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x5563030e21d0 <col:13, col:29> 'String' (CXXTemporary 0x5563030e21d0)
|       |         `-CallExpr 0x5563030e2180 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x5563030e2168 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x5563030e20e0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x5563030de500 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x5563030e21b0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x5563030e2100 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x5563030e2120 <col:28> 'const String' lvalue ParmVar 0x5563030decc8 'x' 'const String &'
|       `-ReturnStmt 0x5563030e2328 <line:549:6, col:20>
|         `-ExprWithCleanups 0x5563030e2310 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x5563030e22e0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x5563030e22c8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x5563030e22a8 <col:13, col:20> 'String' (CXXTemporary 0x5563030e22a8)
|                 `-CXXTemporaryObjectExpr 0x5563030e2270 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x5563030def20 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x5563030dee10 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x5563030dee88 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5563030e0658 <col:71> 'bool' false
|-CXXRecordDecl 0x5563030defd0 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x5563030df2c8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x5563030df260 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x5563030df200 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x5563030df1c0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x556302cc3ef0 'String'
|       | `-CXXRecord 0x556302cc3e60 'String'
|       |-BuiltinType 0x55630298b370 'int'
|       `-DecayedType 0x556303050c90 '__va_list_tag *' sugar
|         |-TypedefType 0x556303050c60 'va_list' sugar
|         | |-Typedef 0x556302badcd0 'va_list'
|         | `-TypedefType 0x556302badc80 '__gnuc_va_list' sugar
|         |   |-Typedef 0x556302ae5898 '__gnuc_va_list'
|         |   `-TypedefType 0x556302ae5800 '__builtin_va_list' sugar
|         |     |-Typedef 0x5563029ccbd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x5563029ccb80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55630298c0c0 '__va_list_tag'
|         |         `-CXXRecord 0x55630298c028 '__va_list_tag'
|         `-PointerType 0x556302bb3dd0 '__va_list_tag *'
|           `-RecordType 0x55630298c0c0 '__va_list_tag'
|             `-CXXRecord 0x55630298c028 '__va_list_tag'
|-EnumDecl 0x5563030df320 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x5563030df420 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5563030df980 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5563030df400 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x5563030df3e0 <col:16> 'int' 1
| |-EnumConstantDecl 0x5563030df4b0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5563030df998 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5563030df490 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x5563030df470 <col:21> 'int' 2
| |-EnumConstantDecl 0x5563030df540 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5563030df9b0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5563030df520 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x5563030df500 <col:22> 'int' 4
| |-EnumConstantDecl 0x5563030df5d0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5563030df9c8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5563030df5b0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x5563030df590 <col:17> 'int' 8
| |-EnumConstantDecl 0x5563030df660 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5563030df9e0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5563030df640 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x5563030df620 <col:22> 'int' 16
| |-EnumConstantDecl 0x5563030df6f0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5563030df9f8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5563030df6d0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5563030df6b0 <col:19> 'int' 32
| |-EnumConstantDecl 0x5563030df780 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5563030dfa10 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5563030df760 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x5563030df740 <col:17> 'int' 64
| |-EnumConstantDecl 0x5563030df810 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5563030dfa28 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5563030df7f0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x5563030df7d0 <col:14> 'int' 128
| |-EnumConstantDecl 0x5563030df8a0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5563030dfa40 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5563030df880 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x5563030df860 <col:16> 'int' 256
| `-EnumConstantDecl 0x5563030df930 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x5563030dfa58 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5563030df910 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x5563030df8f0 <col:12> 'int' 1024
|-CXXMethodDecl 0x5563030dfc68 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x5563030dfa80 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x5563030dfb20 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x5563030dfdf0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x5563030dfd28 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x5563030dfe98 <line:580:3, col:10> col:3 private
|-FieldDecl 0x5563030dfed8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x5563030dff38 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x5563030dffb0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x5563030e03b0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x5563030e0028 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x5563030e00a8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x5563030e0128 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x5563030e01a0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x5563030e0218 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x5563030e0290 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x5563030e04d8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x5563030e04d8
| `-ParmVarDecl 0x5563030e05e8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x5563030e26e8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x5563030e26e8
  `-ParmVarDecl 0x5563030e27f8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55630304fcd8 prev 0x556302eba978 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55630304fdd0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55630304fe60 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55630304ff98 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55630304fe98 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5563030513c0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5563030513a0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x556303050f38 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x556303051450 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x556303051410 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55630304fe98 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x556303050fa0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5563030514d0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x556303051490 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x556303051000 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x556303051510 <col:54> 'bool' false
| `-CompoundStmt 0x556303051618 <col:61, line:38:5>
|   `-BinaryOperator 0x5563030515f8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x556303051590 <col:9> 'const Element *' lvalue ->_context 0x556303050ed8
|     | `-CXXThisExpr 0x556303051580 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x5563030515e0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x5563030515c0 <col:20> 'int' 0
|-CXXConstructorDecl 0x5563030501a8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x556303050058 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x5563030500d0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5563030513f8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5563030513d8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x556303050ed8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x556303051670 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x556303051630 <col:20> 'const Element *' lvalue ParmVar 0x556303050058 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x556303050f38 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5563030516f0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5563030516b0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x5563030500d0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x556303050fa0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x556303051770 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x556303051730 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x556303051000 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5563030517b0 <col:73> 'bool' false
| `-CompoundStmt 0x556303051828 <col:80, line:46:5>
|-CXXMethodDecl 0x5563030502d8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x5563030518a0 <col:36, line:51:5>
|   `-ReturnStmt 0x556303051890 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x556303051878 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x556303051848 <col:16> 'const Element *const' lvalue ->_context 0x556303050ed8
|         `-CXXThisExpr 0x556303051838 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5563030503c8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x556303051920 <col:32, line:57:5>
|   `-ReturnStmt 0x556303051910 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x5563030518f8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x5563030518c8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x556303050f38
|         `-CXXThisExpr 0x5563030518b8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x556303050488 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x556303050610 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x556303050540 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x556303050760 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x5563030506d0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5563030508b0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x556303050820 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x556303050ab8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x556303050968 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x5563030509e0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x556303050de8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x556303050b78 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x556303050bf8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x556303050cc0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x556303050ea0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x556303050ed8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x556303050f38 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x556303050fa0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x556303051000 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x556303051050 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x556303051050
| `-ParmVarDecl 0x556303051168 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x556303051208 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x556303051208
| `-ParmVarDecl 0x556303051318 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x5563030f6348 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x556303072920 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x556303072af8 prev 0x556303072920 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x556303072b88 <col:46, col:52> col:46 public
|-TypedefDecl 0x556303072bb0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55630298b370 'int'
|-TypedefDecl 0x556303074780 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x556303074730 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x556303073060 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x556303072f60 'type'
|     `-TemplateSpecializationType 0x556303072ef0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x556303072dd0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x556303072db0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x556303072d90 <col:24> 'unsigned long' 4
|       `-RecordType 0x556303072ed0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x556303072df0 'char_array'
|-TypedefDecl 0x55630307e840 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x556303074800 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x5563030747e0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x556303074780 'type'
|     `-ElaboratedType 0x556303074730 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x556303073060 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x556303072f60 'type'
|         `-TemplateSpecializationType 0x556303072ef0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x556303072dd0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x556303072db0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x556303072d90 <col:24> 'unsigned long' 4
|           `-RecordType 0x556303072ed0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x556303072df0 'char_array'
|-CXXMethodDecl 0x55630307e9c8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55630307e8d8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55630307eab8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55630307eb98 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55630307ee68 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55630307ed70 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55630307f0a8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55630307ef20 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55630307ef98 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55630307f278 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55630307f168 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55630307f1e0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55630307f3d8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55630307f4a8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55630307f6f8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55630307f568 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55630307f5e0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55630307f958 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55630307f7c8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55630307f840 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55630307fb18 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55630307fa28 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55630307fcd8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55630307fbe0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55630307fd90 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55630307fe40 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x556303080078 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55630307fef0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55630307ff68 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x556303080318 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x556303080220 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x5563030803e0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x556303080430 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x556303080480 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.7 = type { %struct.char_array.8*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.7 = type { %struct.char_array.8*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x556303071538 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x556303071748 prev 0x556303071538 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x556303072890 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x556303072840 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x556303072820 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x5563030726d0 'type'
|     `-SubstTemplateTypeParmType 0x5563030724f0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x556302c6c880 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x556302c6c828 'T'
|       `-RecordType 0x556303072040 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x556303071f58 'sized_array_memory'
|-FieldDecl 0x5563030804d0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x556303080520 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x556303080558 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x5563030717e0 'int' sugar
|   |-TemplateTypeParmType 0x556302ca3a80 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x556302ca3a28 'T'
|   `-BuiltinType 0x55630298b370 'int'
|-TypedefDecl 0x5563030805e8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x5563030805b0 'int &'
|   `-SubstTemplateTypeParmType 0x5563030717e0 'int' sugar
|     |-TemplateTypeParmType 0x556302ca3a80 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x556302ca3a28 'T'
|     `-BuiltinType 0x55630298b370 'int'
|-TypedefDecl 0x556303080678 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x556303080640 'const int &'
|   `-QualType 0x5563030717e1 'const int' const
|     `-SubstTemplateTypeParmType 0x5563030717e0 'int' sugar
|       |-TemplateTypeParmType 0x556302ca3a80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x556302ca3a28 'T'
|       `-BuiltinType 0x55630298b370 'int'
|-TypedefDecl 0x556303080708 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x5563030806d0 'int *'
|   `-SubstTemplateTypeParmType 0x5563030717e0 'int' sugar
|     |-TemplateTypeParmType 0x556302ca3a80 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x556302ca3a28 'T'
|     `-BuiltinType 0x55630298b370 'int'
|-TypedefDecl 0x556303080798 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x556303080760 'const int *'
|   `-QualType 0x5563030717e1 'const int' const
|     `-SubstTemplateTypeParmType 0x5563030717e0 'int' sugar
|       |-TemplateTypeParmType 0x556302ca3a80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x556302ca3a28 'T'
|       `-BuiltinType 0x55630298b370 'int'
|-TypedefDecl 0x556303081380 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x556303081330 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x556303081310 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x5563030812a0 'type'
|     `-SubstTemplateTypeParmType 0x556303081060 'int' sugar
|       |-TemplateTypeParmType 0x556302c75ac0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x556302c75a70 'T'
|       `-BuiltinType 0x55630298b370 'int'
|-TypedefDecl 0x5563030813e8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x556303080640 'const int &'
|   `-QualType 0x5563030717e1 'const int' const
|     `-SubstTemplateTypeParmType 0x5563030717e0 'int' sugar
|       |-TemplateTypeParmType 0x556302ca3a80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x556302ca3a28 'T'
|       `-BuiltinType 0x55630298b370 'int'
|-TypedefDecl 0x556303081440 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55630298b370 'int'
|-TypedefDecl 0x5563030814a8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x5563030806d0 'int *'
|   `-SubstTemplateTypeParmType 0x5563030717e0 'int' sugar
|     |-TemplateTypeParmType 0x556302ca3a80 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x556302ca3a28 'T'
|     `-BuiltinType 0x55630298b370 'int'
|-TypedefDecl 0x556303081510 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x556303080760 'const int *'
|   `-QualType 0x5563030717e1 'const int' const
|     `-SubstTemplateTypeParmType 0x5563030717e0 'int' sugar
|       |-TemplateTypeParmType 0x556302ca3a80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x556302ca3a28 'T'
|       `-BuiltinType 0x55630298b370 'int'
|-EnumDecl 0x556303081568 <line:134:5> col:5
| `-EnumConstantDecl 0x556303081660 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x556303081640 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x556302ca4c48 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x556302ca4c20 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x556302ca4c00 <col:40> 'int' 1
|-CXXConstructorDecl 0x5563030816e8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x556303081938 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5563030817a0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x556303081840 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x556303081bf8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x556303081ae0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x556303081eb8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x556303081da0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x556303082200 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x5563030820e0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x556303082510 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x5563030823f0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x556303082800 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x556303082648 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5563030826c0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x556303082928 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x556303082a08 <col:20> Inherited
| `-OptimizeNoneAttr 0x556303082a60 <col:30> Inherited
|-CXXMethodDecl 0x556303082aa8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x556303082b58 <col:20> Inherited
| `-OptimizeNoneAttr 0x556303082bb0 <col:30> Inherited
|-CXXMethodDecl 0x556303082c78 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x556303082d28 <col:20> Inherited
| `-OptimizeNoneAttr 0x556303082d80 <col:30> Inherited
|-CXXMethodDecl 0x556303082dc8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x556303082e78 <col:20> Inherited
| `-OptimizeNoneAttr 0x556303082ed0 <col:30> Inherited
|-CXXMethodDecl 0x556303082f18 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x556303082fc8 <col:20> Inherited
| `-OptimizeNoneAttr 0x556303083020 <col:30> Inherited
|-CXXMethodDecl 0x556303083068 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x556303083118 <col:20> Inherited
| `-OptimizeNoneAttr 0x556303083170 <col:30> Inherited
|-CXXMethodDecl 0x556303083198 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x556303083248 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5563030832f8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5563030834b8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5563030833a8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x556303083420 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x556303083608 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x556303083578 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5563030837b8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x5563030836c0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x556303083870 <col:20>
| `-OptimizeNoneAttr 0x5563030838c8 <col:30>
|-CXXMethodDecl 0x5563030839e8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x5563030838f0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x556303083aa0 <col:20>
| `-OptimizeNoneAttr 0x556303083af8 <col:30>
|-CXXMethodDecl 0x556303083bb0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x556303083b20 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x556303083cf8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x556303083c68 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x556303083e28 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x556303083f58 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x556303084028 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x5563030840f8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x556303084238 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5563030841a8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x556303084380 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5563030842f0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5563030844c8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x556303084438 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x556303084580 <col:48> Inherited "" ""
|-CXXMethodDecl 0x556303084680 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5563030845f0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x556303084738 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5563030847f8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x5563030848f8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x556303084a78 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5563030849b8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x556303085238 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x556303084b30 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x556303085198 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x556303085098 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x556303085318 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x556303085468 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5563030853d8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x556303085520 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x556303085768 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5563030855e0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x556303085658 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x556303085928 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x556303085838 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x556303085b78 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x5563030859f0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x556303085a68 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x556303085c38 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x556303085e98 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x556303085da0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x556303085f68 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.6 = type { %class.vector_memory.7 }
  NonVirtualBaseLLVMType:%class.Vector.6 = type { %class.vector_memory.7 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55630306f6a8 prev 0x556303056878 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55630306f7a0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55630306f890 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x556303097bd0 <col:16, line:828:9>
|-CXXDestructorDecl 0x55630306f980 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x556303097be0 <col:25, line:830:9>
|-CXXMethodDecl 0x55630306fa80 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55630306fb30 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55630306fbd8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55630306fbd8
| `-ParmVarDecl 0x55630306fce8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x5563030704a8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5563030704a8
  `-ParmVarDecl 0x5563030705b8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556303056688 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x5563030567e8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x556303056878 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x556303056930 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x556303056a38 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x556303056968 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x556303088648 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x556303088628 <col:31> 'int' 0
|-CXXConstructorDecl 0x556303056d58 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x556303056bd0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x556303056c48 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x556303088680 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x556303088660 <col:59> 'int' 0
|-CXXConstructorDecl 0x556303056f30 <line:265:5, col:56> col:5 used Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x556303056e20 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x556303056e98 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5563030886b8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x556303088698 <col:55> 'int' 0
|-CXXConstructorDecl 0x5563030572e8 <line:271:5, line:272:32> line:271:5 Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5563030570d0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x556303057148 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x5563030571c0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5563030886f0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5563030886d0 <col:31> 'int' 0
|-CXXConstructorDecl 0x5563030574a8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x5563030573e8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x5563030575a0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x556303057788 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x556303057690 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x556303057878 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x556303088aa0 <col:24, line:291:5>
|   `-ReturnStmt 0x556303088a90 <line:290:9, col:79>
|     `-BinaryOperator 0x556303088a70 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x556303088948 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x5563030888a0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x556303088880 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x556303088778 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x556303088760 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x556303088748 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x556303088718 <col:18> 'Vector<String> *const' lvalue ->_conf 0x5563030714d0
|       | |   |       `-CXXThisExpr 0x556303088708 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x556303088868 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x556303088850 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x556303088818 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x5563030887e8 <col:28, col:35> '<bound member function type>' ->size 0x55630303e968
|       | |           `-ImplicitCastExpr 0x556303088838 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x5563030887d0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x5563030887a0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x5563030714d0
|       | |                 `-CXXThisExpr 0x556303088790 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x556303088930 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x556303088918 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x556303088900 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x5563030888d0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x5563030860b0
|       |         `-CXXThisExpr 0x5563030888c0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x556303088a50 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x556303088a38 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x556303088a20 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5563030889e0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5563030889c8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x556303088978 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x556303086160
|         |     |   `-CXXThisExpr 0x556303088968 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5563030889a8 <col:73> 'int' 0
|         `-IntegerLiteral 0x556303088a00 <col:79> 'int' 0
|-CXXMethodDecl 0x556303057938 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x556303088c78 <col:32, line:296:5>
|   `-ReturnStmt 0x556303088c68 <line:295:9, col:49>
|     `-BinaryOperator 0x556303088c48 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x556303088b28 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x556303088b10 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x556303088af8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x556303088ac8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x5563030860b0
|       |       `-CXXThisExpr 0x556303088ab8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x556303088c28 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x556303088c10 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x556303088bf8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x556303088bb8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x556303088ba0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x556303088b50 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x556303086160
|         |     |   `-CXXThisExpr 0x556303088b40 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x556303088b80 <col:43> 'int' 0
|         `-IntegerLiteral 0x556303088bd8 <col:49> 'int' 0
|-CXXMethodDecl 0x556303057a28 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x556303088e88 <col:19, line:306:5>
|   |-IfStmt 0x556303088da8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x556303088ce8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x556303088cd0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x556303088ca0 <col:13> 'Vector<String> *' lvalue ->_conf 0x5563030714d0
|   | |     `-CXXThisExpr 0x556303088c90 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x556303088d88 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x556303088d58 <col:13, col:20> '<bound member function type>' ->clear 0x556303041370
|   |     `-ImplicitCastExpr 0x556303088d40 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x556303088d10 <col:13> 'Vector<String> *' lvalue ->_conf 0x5563030714d0
|   |         `-CXXThisExpr 0x556303088d00 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x556303088e30 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x556303088e00 <col:9, col:16> '<bound member function type>' .clear 0x556303085c38
|   |   `-MemberExpr 0x556303088dd0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x556303086050
|   |     `-CXXThisExpr 0x556303088dc0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x556303088e78 <line:305:9, col:17>
|     `-UnaryOperator 0x556303088e60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x556303088e50 <col:17> 'Args *' this
|-CXXMethodDecl 0x556303057ca8 <line:313:5, col:36> col:11 used bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x556303057bb0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x556303057e28 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x556303057d60 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x5563030581a8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x556303057ed0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x556303058108 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x556303057f78 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x556303057ff0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x5563030891d0 <col:67, line:327:5>
|     |-WhileStmt 0x556303089180 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x556303088f98 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x556303088ef0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x556302fbd670 0x556302fa31d8 0x556302f9abf8 0x556302f67398 0x556302f2fa98 0x556302eb2ea8 0x556302d02fe8 0x556302d02cc0 0x556302cf0820 0x556302cf04d0 0x556302cefbc0 0x556302c59420 0x556302c48e40
|     | | |-DeclRefExpr 0x556303088eb0 <col:16> 'Iter' lvalue ParmVar 0x556303057f78 'begin' 'Iter'
|     | | `-DeclRefExpr 0x556303088ed0 <col:25> 'Iter' lvalue ParmVar 0x556303057ff0 'end' 'Iter'
|     | `-CompoundStmt 0x556303089160 <col:30, line:325:9>
|     |   |-CallExpr 0x556303089100 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x556303088fe0 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x5563030890d0 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x556303089060 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x556302eb7fa8 0x556302eb7bc8 0x556302eb77f8 0x556302eb7418 0x556302eb7038 0x556302eb6c68
|     |   |   `-DeclRefExpr 0x556303089040 <col:24> 'Iter' lvalue ParmVar 0x556303057f78 'begin' 'Iter'
|     |   `-UnaryOperator 0x556303089148 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x556303089128 <col:15> 'Iter' lvalue ParmVar 0x556303057f78 'begin' 'Iter'
|     `-ReturnStmt 0x5563030891c0 <line:326:9, col:17>
|       `-UnaryOperator 0x5563030891a8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x556303089198 <col:17> 'Args *' this
|-CXXMethodDecl 0x5563030582b0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x556303058220 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x5563030583f8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x556303058368 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x5563030584c0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x5563030892b0 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x556303089250 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x556303089200 <col:9> '<bound member function type>' ->reset_from 0x5563030864d8
|   | | `-CXXThisExpr 0x5563030891f0 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x556303089230 <col:20> 'int' 0
|   `-ReturnStmt 0x5563030892a0 <line:352:9, col:17>
|     `-UnaryOperator 0x556303089288 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x556303089278 <col:17> 'Args *' this
|-VarDecl 0x556303058578 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x5563030585e0 <col:38> 'int' 1
|-VarDecl 0x556303058670 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x5563030586d8 <col:39> 'int' 2
|-VarDecl 0x556303058768 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x5563030587d0 <col:39> 'int' 4
|-VarDecl 0x556303058860 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x5563030588c8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x556303058c48 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x556303058940 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x556303058ba8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x5563030589f0 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x556303058a98 <col:37, col:40> col:40 referenced x 'T &'
| | `-CompoundStmt 0x556303089408 <col:43, line:371:5>
| |   `-ReturnStmt 0x5563030893f8 <line:370:9, col:34>
| |     `-CallExpr 0x5563030893c0 <col:16, col:34> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5563030892e0 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x556303089360 <col:21> 'const char *' lvalue ParmVar 0x5563030589f0 'keyword' 'const char *'
| |       |-IntegerLiteral 0x556303089380 <col:30> 'int' 0
| |       `-DeclRefExpr 0x5563030893a0 <col:33> 'T' lvalue ParmVar 0x556303058a98 'x' 'T &'
| `-CXXMethodDecl 0x5563030f6848 <line:369:5, line:371:5> line:369:11 used read 'Args &(const char *, bool &)'
|   |-TemplateArgument type 'bool'
|   |-ParmVarDecl 0x5563030f6660 <col:16, col:28> col:28 keyword 'const char *'
|   `-ParmVarDecl 0x5563030f6738 <col:37, col:40> col:40 x 'bool &'
|-FunctionTemplateDecl 0x556303058f78 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x556303058cb0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x556303058ed8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x556303058d60 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556303058e08 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x556303089558 <col:45, line:375:5>
|     `-ReturnStmt 0x556303089548 <line:374:9, col:42>
|       `-CallExpr 0x556303089510 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x556303089430 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5563030894b0 <col:21> 'const char *' lvalue ParmVar 0x556303058d60 'keyword' 'const char *'
|         |-DeclRefExpr 0x5563030894d0 <col:30> 'const int' lvalue Var 0x556303058578 'mandatory' 'const int'
|         `-DeclRefExpr 0x5563030894f0 <col:41> 'T' lvalue ParmVar 0x556303058e08 'x' 'T &'
|-FunctionTemplateDecl 0x5563030592a8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x556303058fe0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x556303059208 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x556303059090 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556303059138 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5563030896a8 <col:45, line:379:5>
|     `-ReturnStmt 0x556303089698 <line:378:9, col:43>
|       `-CallExpr 0x556303089660 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x556303089580 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x556303089600 <col:21> 'const char *' lvalue ParmVar 0x556303059090 'keyword' 'const char *'
|         |-DeclRefExpr 0x556303089620 <col:30> 'const int' lvalue Var 0x556303058670 'positional' 'const int'
|         `-DeclRefExpr 0x556303089640 <col:42> 'T' lvalue ParmVar 0x556303059138 'x' 'T &'
|-FunctionTemplateDecl 0x5563030595d8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x556303059310 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x556303059538 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5563030593c0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556303059468 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x5563030898a8 <col:46, line:383:5>
|     `-ReturnStmt 0x556303089898 <line:382:9, col:55>
|       `-CallExpr 0x556303089860 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5563030896d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x556303089750 <col:21> 'const char *' lvalue ParmVar 0x5563030593c0 'keyword' 'const char *'
|         |-BinaryOperator 0x556303089820 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5563030897d0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5563030897b0 <col:30> 'const int' lvalue Var 0x556303058578 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x556303089808 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5563030897e8 <col:42> 'const int' lvalue Var 0x556303058670 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x556303089840 <col:54> 'T' lvalue ParmVar 0x556303059468 'x' 'T &'
|-FunctionTemplateDecl 0x5563030599d8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x556303059640 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x556303059938 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x5563030596f0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556303059770 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x556303059818 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x5563030899e8 <col:54, line:388:5>
|     |-CallExpr 0x556303089970 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5563030898c0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x556303089900 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x556303089910 <col:30> 'const char *' lvalue ParmVar 0x5563030596f0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x556303089930 <col:39> 'int' lvalue ParmVar 0x556303059770 'flags' 'int'
|     | `-DeclRefExpr 0x556303089950 <col:46> 'T' lvalue ParmVar 0x556303059818 'x' 'T &'
|     `-ReturnStmt 0x5563030899d8 <line:387:9, col:17>
|       `-UnaryOperator 0x5563030899c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5563030899b0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x556303059e88 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x556303059a48 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x556303059ac8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x556303059de8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x556303059b88 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556303059c28 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x556303059cc8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x556303089b58 <col:74, line:403:5>
|     `-ReturnStmt 0x556303089b48 <line:402:9, col:56>
|       `-CallExpr 0x556303089b08 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x556303089a18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x556303089a88 <col:28> 'const char *' lvalue ParmVar 0x556303059b88 'keyword' 'const char *'
|         |-IntegerLiteral 0x556303089aa8 <col:37> 'int' 0
|         |-DeclRefExpr 0x556303089ac8 <col:40> 'T' lvalue ParmVar 0x556303059c28 'x' 'T &'
|         `-DeclRefExpr 0x556303089ae8 <col:43> 'const V' lvalue ParmVar 0x556303059cc8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55630305a2f8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x556303059ef8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x556303059f78 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55630305a258 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55630305a038 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55630305a0d8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55630305a178 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x556303089cc0 <col:76, line:407:5>
|     `-ReturnStmt 0x556303089cb0 <line:406:9, col:65>
|       `-CallExpr 0x556303089c70 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x556303089b80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x556303089bf0 <col:28> 'const char *' lvalue ParmVar 0x55630305a038 'keyword' 'const char *'
|         |-DeclRefExpr 0x556303089c10 <col:37> 'const int' lvalue Var 0x556303058670 'positional' 'const int'
|         |-DeclRefExpr 0x556303089c30 <col:49> 'T' lvalue ParmVar 0x55630305a0d8 'x' 'T &'
|         `-DeclRefExpr 0x556303089c50 <col:52> 'const V' lvalue ParmVar 0x55630305a178 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55630305a848 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55630305a368 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55630305a3e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55630305a7a8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55630305a4a8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55630305a528 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55630305a5c8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55630305a668 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x556303089e28 <col:85, line:412:5>
|     |-CallExpr 0x556303089da8 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x556303089cd8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x556303089d18 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x556303089d28 <col:37> 'const char *' lvalue ParmVar 0x55630305a4a8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x556303089d48 <col:46> 'int' lvalue ParmVar 0x55630305a528 'flags' 'int'
|     | |-DeclRefExpr 0x556303089d68 <col:53> 'T' lvalue ParmVar 0x55630305a5c8 'x' 'T &'
|     | `-DeclRefExpr 0x556303089d88 <col:56> 'const V' lvalue ParmVar 0x55630305a668 'default_value' 'const V &'
|     `-ReturnStmt 0x556303089e18 <line:411:9, col:17>
|       `-UnaryOperator 0x556303089e00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x556303089df0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55630305acd8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55630305a8c0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55630305a938 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x55630305ac38 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x55630305a9f8 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55630305aa70 <col:37, col:39> col:39 referenced parser 'P'
| | |-ParmVarDecl 0x55630305ab18 <col:47, col:50> col:50 referenced x 'T &'
| | `-CompoundStmt 0x556303089fa8 <col:53, line:425:5>
| |   `-ReturnStmt 0x556303089f98 <line:424:9, col:42>
| |     `-CallExpr 0x556303089f58 <col:16, col:42> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x556303089e58 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x556303089ed8 <col:21> 'const char *' lvalue ParmVar 0x55630305a9f8 'keyword' 'const char *'
| |       |-IntegerLiteral 0x556303089ef8 <col:30> 'int' 0
| |       |-DeclRefExpr 0x556303089f18 <col:33> 'P' lvalue ParmVar 0x55630305aa70 'parser' 'P'
| |       `-DeclRefExpr 0x556303089f38 <col:41> 'T' lvalue ParmVar 0x55630305ab18 'x' 'T &'
| `-CXXMethodDecl 0x5563030f7308 <line:423:5, line:425:5> line:423:11 used read 'Args &(const char *, AnnoArg, int &)'
|   |-TemplateArgument type 'AnnoArg'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x5563030f7078 <col:16, col:28> col:28 keyword 'const char *'
|   |-ParmVarDecl 0x5563030f7118 <col:37, col:39> col:39 parser 'AnnoArg':'AnnoArg'
|   `-ParmVarDecl 0x5563030f71e8 <col:47, col:50> col:50 x 'int &'
|-FunctionTemplateDecl 0x55630305b128 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55630305ad48 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55630305adc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55630305b088 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55630305ae88 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55630305af00 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55630305afa8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55630308a120 <col:55, line:429:5>
|     `-ReturnStmt 0x55630308a110 <line:428:9, col:50>
|       `-CallExpr 0x55630308a0d0 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x556303089fd0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55630308a050 <col:21> 'const char *' lvalue ParmVar 0x55630305ae88 'keyword' 'const char *'
|         |-DeclRefExpr 0x55630308a070 <col:30> 'const int' lvalue Var 0x556303058578 'mandatory' 'const int'
|         |-DeclRefExpr 0x55630308a090 <col:41> 'P' lvalue ParmVar 0x55630305af00 'parser' 'P'
|         `-DeclRefExpr 0x55630308a0b0 <col:49> 'T' lvalue ParmVar 0x55630305afa8 'x' 'T &'
|-FunctionTemplateDecl 0x55630305b578 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55630305b198 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55630305b218 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55630305b4d8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55630305b2d8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55630305b350 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55630305b3f8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55630308a298 <col:55, line:433:5>
|     `-ReturnStmt 0x55630308a288 <line:432:9, col:51>
|       `-CallExpr 0x55630308a248 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55630308a148 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55630308a1c8 <col:21> 'const char *' lvalue ParmVar 0x55630305b2d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55630308a1e8 <col:30> 'const int' lvalue Var 0x556303058670 'positional' 'const int'
|         |-DeclRefExpr 0x55630308a208 <col:42> 'P' lvalue ParmVar 0x55630305b350 'parser' 'P'
|         `-DeclRefExpr 0x55630308a228 <col:50> 'T' lvalue ParmVar 0x55630305b3f8 'x' 'T &'
|-FunctionTemplateDecl 0x55630305b9c8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55630305b5e8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55630305b668 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55630305b928 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55630305b728 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55630305b7a0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55630305b848 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55630308a4c0 <col:56, line:437:5>
|     `-ReturnStmt 0x55630308a4b0 <line:436:9, col:63>
|       `-CallExpr 0x55630308a470 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55630308a2c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55630308a340 <col:21> 'const char *' lvalue ParmVar 0x55630305b728 'keyword' 'const char *'
|         |-BinaryOperator 0x55630308a410 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55630308a3c0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55630308a3a0 <col:30> 'const int' lvalue Var 0x556303058578 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55630308a3f8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55630308a3d8 <col:42> 'const int' lvalue Var 0x556303058670 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55630308a430 <col:54> 'P' lvalue ParmVar 0x55630305b7a0 'parser' 'P'
|         `-DeclRefExpr 0x55630308a450 <col:62> 'T' lvalue ParmVar 0x55630305b848 'x' 'T &'
|-FunctionTemplateDecl 0x55630305bef8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55630305ba38 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55630305bab8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55630305be58 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55630305bb78 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55630305bbf8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55630305bc70 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55630305bd18 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55630308a628 <col:64, line:442:5>
|     |-CallExpr 0x55630308a5a8 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55630308a4d8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55630308a518 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55630308a528 <col:30> 'const char *' lvalue ParmVar 0x55630305bb78 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55630308a548 <col:39> 'int' lvalue ParmVar 0x55630305bbf8 'flags' 'int'
|     | |-DeclRefExpr 0x55630308a568 <col:46> 'P' lvalue ParmVar 0x55630305bc70 'parser' 'P'
|     | `-DeclRefExpr 0x55630308a588 <col:54> 'T' lvalue ParmVar 0x55630305bd18 'x' 'T &'
|     `-ReturnStmt 0x55630308a618 <line:441:9, col:17>
|       `-UnaryOperator 0x55630308a600 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55630308a5f0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55630305c4f8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55630305bf70 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55630305bfe8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55630305c068 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55630305c458 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55630305c130 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55630305c1a8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55630305c248 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55630305c318 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55630308a7c0 <col:84, line:458:5>
|     `-ReturnStmt 0x55630308a7b0 <line:457:9, col:64>
|       `-CallExpr 0x55630308a768 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55630308a658 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55630308a6c8 <col:28> 'const char *' lvalue ParmVar 0x55630305c130 'keyword' 'const char *'
|         |-IntegerLiteral 0x55630308a6e8 <col:37> 'int' 0
|         |-DeclRefExpr 0x55630308a708 <col:40> 'P' lvalue ParmVar 0x55630305c1a8 'parser' 'P'
|         |-DeclRefExpr 0x55630308a728 <col:48> 'T' lvalue ParmVar 0x55630305c248 'x' 'T &'
|         `-DeclRefExpr 0x55630308a748 <col:51> 'const V' lvalue ParmVar 0x55630305c318 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55630305ca78 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55630305c570 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55630305c5e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55630305c668 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55630305c9d8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55630305c730 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55630305c7a8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55630305c848 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55630305c8e8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55630308a950 <col:86, line:462:5>
|     `-ReturnStmt 0x55630308a940 <line:461:9, col:73>
|       `-CallExpr 0x55630308a8f8 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55630308a7e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55630308a858 <col:28> 'const char *' lvalue ParmVar 0x55630305c730 'keyword' 'const char *'
|         |-DeclRefExpr 0x55630308a878 <col:37> 'const int' lvalue Var 0x556303058670 'positional' 'const int'
|         |-DeclRefExpr 0x55630308a898 <col:49> 'P' lvalue ParmVar 0x55630305c7a8 'parser' 'P'
|         |-DeclRefExpr 0x55630308a8b8 <col:57> 'T' lvalue ParmVar 0x55630305c848 'x' 'T &'
|         `-DeclRefExpr 0x55630308a8d8 <col:60> 'const V' lvalue ParmVar 0x55630305c8e8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55630305f128 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55630305caf0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55630305cb68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55630305cbe8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55630305f088 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55630305ed00 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55630305ed80 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55630305edf8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55630305ee98 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55630305ef38 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55630308aae0 <col:95, line:467:5>
|     |-CallExpr 0x55630308aa58 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55630308a968 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55630308a9a8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55630308a9b8 <col:37> 'const char *' lvalue ParmVar 0x55630305ed00 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55630308a9d8 <col:46> 'int' lvalue ParmVar 0x55630305ed80 'flags' 'int'
|     | |-DeclRefExpr 0x55630308a9f8 <col:53> 'P' lvalue ParmVar 0x55630305edf8 'parser' 'P'
|     | |-DeclRefExpr 0x55630308aa18 <col:61> 'T' lvalue ParmVar 0x55630305ee98 'x' 'T &'
|     | `-DeclRefExpr 0x55630308aa38 <col:64> 'const V' lvalue ParmVar 0x55630305ef38 'default_value' 'const V &'
|     `-ReturnStmt 0x55630308aad0 <line:466:9, col:17>
|       `-UnaryOperator 0x55630308aab8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55630308aaa8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55630305f708 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55630305f1a8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55630305f228 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55630305f2a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55630305f668 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55630305f370 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55630305f3e8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55630305f488 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55630305f528 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55630308ac88 <col:63, line:481:5>
|     `-ReturnStmt 0x55630308ac78 <line:480:9, col:47>
|       `-CallExpr 0x55630308ac30 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55630308ab10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55630308ab90 <col:21> 'const char *' lvalue ParmVar 0x55630305f370 'keyword' 'const char *'
|         |-IntegerLiteral 0x55630308abb0 <col:30> 'int' 0
|         |-DeclRefExpr 0x55630308abd0 <col:33> 'P' lvalue ParmVar 0x55630305f3e8 'parser' 'P'
|         |-DeclRefExpr 0x55630308abf0 <col:41> 'T1' lvalue ParmVar 0x55630305f488 'x1' 'T1 &'
|         `-DeclRefExpr 0x55630308ac10 <col:45> 'T2' lvalue ParmVar 0x55630305f528 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55630305fc88 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55630305f780 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55630305f7f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55630305f878 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55630305fbe8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55630305f940 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55630305f9b8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55630305fa58 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55630305faf8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55630308ae28 <col:65, line:485:5>
|     `-ReturnStmt 0x55630308ae18 <line:484:9, col:55>
|       `-CallExpr 0x55630308add0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55630308acb0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55630308ad30 <col:21> 'const char *' lvalue ParmVar 0x55630305f940 'keyword' 'const char *'
|         |-DeclRefExpr 0x55630308ad50 <col:30> 'const int' lvalue Var 0x556303058578 'mandatory' 'const int'
|         |-DeclRefExpr 0x55630308ad70 <col:41> 'P' lvalue ParmVar 0x55630305f9b8 'parser' 'P'
|         |-DeclRefExpr 0x55630308ad90 <col:49> 'T1' lvalue ParmVar 0x55630305fa58 'x1' 'T1 &'
|         `-DeclRefExpr 0x55630308adb0 <col:53> 'T2' lvalue ParmVar 0x55630305faf8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x556303060208 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55630305fd00 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55630305fd78 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55630305fdf8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x556303060168 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55630305fec0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55630305ff38 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55630305ffd8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x556303060078 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55630308afc8 <col:65, line:489:5>
|     `-ReturnStmt 0x55630308afb8 <line:488:9, col:56>
|       `-CallExpr 0x55630308af70 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55630308ae50 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55630308aed0 <col:21> 'const char *' lvalue ParmVar 0x55630305fec0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55630308aef0 <col:30> 'const int' lvalue Var 0x556303058670 'positional' 'const int'
|         |-DeclRefExpr 0x55630308af10 <col:42> 'P' lvalue ParmVar 0x55630305ff38 'parser' 'P'
|         |-DeclRefExpr 0x55630308af30 <col:50> 'T1' lvalue ParmVar 0x55630305ffd8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55630308af50 <col:54> 'T2' lvalue ParmVar 0x556303060078 'x2' 'T2 &'
|-FunctionTemplateDecl 0x556303060788 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x556303060280 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5563030602f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x556303060378 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5563030606e8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x556303060440 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5563030604b8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x556303060558 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5563030605f8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55630308b218 <col:66, line:493:5>
|     `-ReturnStmt 0x55630308b208 <line:492:9, col:68>
|       `-CallExpr 0x55630308b1c0 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55630308aff0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55630308b070 <col:21> 'const char *' lvalue ParmVar 0x556303060440 'keyword' 'const char *'
|         |-BinaryOperator 0x55630308b140 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55630308b0f0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55630308b0d0 <col:30> 'const int' lvalue Var 0x556303058578 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55630308b128 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55630308b108 <col:42> 'const int' lvalue Var 0x556303058670 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55630308b160 <col:54> 'P' lvalue ParmVar 0x5563030604b8 'parser' 'P'
|         |-DeclRefExpr 0x55630308b180 <col:62> 'T1' lvalue ParmVar 0x556303060558 'x1' 'T1 &'
|         `-DeclRefExpr 0x55630308b1a0 <col:66> 'T2' lvalue ParmVar 0x5563030605f8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x556303060de8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x556303060800 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556303060878 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5563030608f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x556303060d48 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5563030609c0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556303060a40 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x556303060ab8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x556303060b58 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x556303060bf8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55630308b3a8 <col:74, line:498:5>
|     |-CallExpr 0x55630308b320 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55630308b230 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55630308b270 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55630308b280 <col:30> 'const char *' lvalue ParmVar 0x5563030609c0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55630308b2a0 <col:39> 'int' lvalue ParmVar 0x556303060a40 'flags' 'int'
|     | |-DeclRefExpr 0x55630308b2c0 <col:46> 'P' lvalue ParmVar 0x556303060ab8 'parser' 'P'
|     | |-DeclRefExpr 0x55630308b2e0 <col:54> 'T1' lvalue ParmVar 0x556303060b58 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55630308b300 <col:58> 'T2' lvalue ParmVar 0x556303060bf8 'x2' 'T2 &'
|     `-ReturnStmt 0x55630308b398 <line:497:9, col:17>
|       `-UnaryOperator 0x55630308b380 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55630308b370 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x556303061148 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x556303060e68 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5563030610a8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x556303060f20 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556303060f98 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55630308b4f0 <col:52, line:509:5>
|     `-ReturnStmt 0x55630308b4e0 <line:508:9, col:44>
|       `-CallExpr 0x55630308b4a8 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55630308b3d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55630308b448 <col:26> 'const char *' lvalue ParmVar 0x556303060f20 'keyword' 'const char *'
|         |-IntegerLiteral 0x55630308b468 <col:35> 'int' 0
|         `-DeclRefExpr 0x55630308b488 <col:38> 'P' lvalue ParmVar 0x556303060f98 'parser' 'P'
|-FunctionTemplateDecl 0x556303061448 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x5563030611b0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5563030613a8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x556303061260 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5563030612d8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55630308b630 <col:54, line:513:5>
|     `-ReturnStmt 0x55630308b620 <line:512:9, col:52>
|       `-CallExpr 0x55630308b5e8 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55630308b518 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55630308b588 <col:26> 'const char *' lvalue ParmVar 0x556303061260 'keyword' 'const char *'
|         |-DeclRefExpr 0x55630308b5a8 <col:35> 'const int' lvalue Var 0x556303058578 'mandatory' 'const int'
|         `-DeclRefExpr 0x55630308b5c8 <col:46> 'P' lvalue ParmVar 0x5563030612d8 'parser' 'P'
|-FunctionTemplateDecl 0x556303061748 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x5563030614b0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5563030616a8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x556303061560 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5563030615d8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55630308b770 <col:54, line:517:5>
|     `-ReturnStmt 0x55630308b760 <line:516:9, col:53>
|       `-CallExpr 0x55630308b728 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55630308b658 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55630308b6c8 <col:26> 'const char *' lvalue ParmVar 0x556303061560 'keyword' 'const char *'
|         |-DeclRefExpr 0x55630308b6e8 <col:35> 'const int' lvalue Var 0x556303058670 'positional' 'const int'
|         `-DeclRefExpr 0x55630308b708 <col:47> 'P' lvalue ParmVar 0x5563030615d8 'parser' 'P'
|-FunctionTemplateDecl 0x556303061a48 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x5563030617b0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5563030619a8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x556303061860 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5563030618d8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55630308b960 <col:55, line:521:5>
|     `-ReturnStmt 0x55630308b950 <line:520:9, col:65>
|       `-CallExpr 0x55630308b918 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55630308b798 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55630308b808 <col:26> 'const char *' lvalue ParmVar 0x556303061860 'keyword' 'const char *'
|         |-BinaryOperator 0x55630308b8d8 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55630308b888 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55630308b868 <col:35> 'const int' lvalue Var 0x556303058578 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55630308b8c0 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55630308b8a0 <col:47> 'const int' lvalue Var 0x556303058670 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55630308b8f8 <col:59> 'P' lvalue ParmVar 0x5563030618d8 'parser' 'P'
|-FunctionTemplateDecl 0x556303061e18 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x556303061ab0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x556303061d78 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x556303061b60 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556303061be0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x556303061c58 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55630308baa0 <col:63, line:526:5>
|     |-CallExpr 0x55630308ba28 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55630308b978 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55630308b9b8 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55630308b9c8 <col:35> 'const char *' lvalue ParmVar 0x556303061b60 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55630308b9e8 <col:44> 'int' lvalue ParmVar 0x556303061be0 'flags' 'int'
|     | `-DeclRefExpr 0x55630308ba08 <col:51> 'P' lvalue ParmVar 0x556303061c58 'parser' 'P'
|     `-ReturnStmt 0x55630308ba90 <line:525:9, col:17>
|       `-UnaryOperator 0x55630308ba78 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55630308ba68 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x556303062268 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x556303061e88 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556303061f08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5563030621c8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x556303061fc8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556303062040 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x5563030620e8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55630308bbf8 <col:58, line:541:5>
|     `-ReturnStmt 0x55630308bbe8 <line:540:9, col:39>
|       `-CallExpr 0x55630308bbb0 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55630308bad0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55630308bb50 <col:21> 'const char *' lvalue ParmVar 0x556303061fc8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55630308bb70 <col:30> 'P' lvalue ParmVar 0x556303062040 'parser' 'P'
|         `-DeclRefExpr 0x55630308bb90 <col:38> 'T' lvalue ParmVar 0x5563030620e8 'x' 'T &'
|-FunctionTemplateDecl 0x5563030626b8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x5563030622d8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556303062358 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x556303062618 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x556303062418 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556303062490 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x556303062538 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55630308bd30 <col:60, line:545:5>
|     `-ReturnStmt 0x55630308bd20 <line:544:9, col:41>
|       `-CallExpr 0x55630308bce8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55630308bc20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55630308bc88 <col:23> 'const char *' lvalue ParmVar 0x556303062418 'keyword' 'const char *'
|         |-DeclRefExpr 0x55630308bca8 <col:32> 'P' lvalue ParmVar 0x556303062490 'parser' 'P'
|         `-DeclRefExpr 0x55630308bcc8 <col:40> 'T' lvalue ParmVar 0x556303062538 'x' 'T &'
|-FunctionTemplateDecl 0x556303062b08 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x556303062728 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5563030627a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x556303062a68 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x556303062868 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5563030628e0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x556303062988 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55630308be68 <col:60, line:549:5>
|     `-ReturnStmt 0x55630308be58 <line:548:9, col:41>
|       `-CallExpr 0x55630308be20 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55630308bd58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55630308bdc0 <col:23> 'const char *' lvalue ParmVar 0x556303062868 'keyword' 'const char *'
|         |-DeclRefExpr 0x55630308bde0 <col:32> 'P' lvalue ParmVar 0x5563030628e0 'parser' 'P'
|         `-DeclRefExpr 0x55630308be00 <col:40> 'T' lvalue ParmVar 0x556303062988 'x' 'T &'
|-FunctionTemplateDecl 0x556303062f58 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x556303062b78 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556303062bf8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x556303062eb8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x556303062cb8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556303062d30 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x556303062dd8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55630308bfa0 <col:61, line:553:5>
|     `-ReturnStmt 0x55630308bf90 <line:552:9, col:42>
|       `-CallExpr 0x55630308bf58 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55630308be90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55630308bef8 <col:24> 'const char *' lvalue ParmVar 0x556303062cb8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55630308bf18 <col:33> 'P' lvalue ParmVar 0x556303062d30 'parser' 'P'
|         `-DeclRefExpr 0x55630308bf38 <col:41> 'T' lvalue ParmVar 0x556303062dd8 'x' 'T &'
|-FunctionTemplateDecl 0x556303063438 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x556303062fc8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556303063048 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x556303063398 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x556303063108 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556303063188 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x556303063200 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x5563030632a8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55630308c118 <col:69, line:557:5>
|     `-ReturnStmt 0x55630308c108 <line:556:9, col:46>
|       `-CallExpr 0x55630308c0c8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55630308bfc8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55630308c048 <col:21> 'const char *' lvalue ParmVar 0x556303063108 'keyword' 'const char *'
|         |-DeclRefExpr 0x55630308c068 <col:30> 'int' lvalue ParmVar 0x556303063188 'flags' 'int'
|         |-DeclRefExpr 0x55630308c088 <col:37> 'P' lvalue ParmVar 0x556303063200 'parser' 'P'
|         `-DeclRefExpr 0x55630308c0a8 <col:45> 'T' lvalue ParmVar 0x5563030632a8 'x' 'T &'
|-FunctionTemplateDecl 0x556303063748 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x5563030634b0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5563030636a8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x556303063560 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5563030635d8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55630308c258 <col:56, line:571:5>
|     `-ReturnStmt 0x55630308c248 <line:570:9, col:48>
|       `-CallExpr 0x55630308c210 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55630308c140 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55630308c1b0 <col:30> 'const char *' lvalue ParmVar 0x556303063560 'keyword' 'const char *'
|         |-IntegerLiteral 0x55630308c1d0 <col:39> 'int' 0
|         `-DeclRefExpr 0x55630308c1f0 <col:42> 'P' lvalue ParmVar 0x5563030635d8 'parser' 'P'
|-FunctionTemplateDecl 0x556303063ad8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x5563030637b0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x556303063a38 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x556303063860 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5563030638e0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x556303063958 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55630308c428 <col:67, line:576:5>
|     |-CallExpr 0x55630308c3b0 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55630308c270 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55630308c2b0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55630308c2c0 <col:39> 'const char *' lvalue ParmVar 0x556303063860 'keyword' 'const char *'
|     | |-BinaryOperator 0x55630308c370 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55630308c320 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55630308c2e0 <col:48> 'int' lvalue ParmVar 0x5563030638e0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55630308c358 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55630308c338 <col:56> 'const int' lvalue Var 0x556303058860 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55630308c390 <col:68> 'P' lvalue ParmVar 0x556303063958 'parser' 'P'
|     `-ReturnStmt 0x55630308c418 <line:575:9, col:17>
|       `-UnaryOperator 0x55630308c400 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55630308c3f0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x556303063f28 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x556303063b48 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556303063bc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x556303063e88 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x556303063c88 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556303063d00 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x556303063da8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55630308c598 <col:62, line:592:5>
|     `-ReturnStmt 0x55630308c588 <line:591:9, col:51>
|       `-CallExpr 0x55630308c548 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55630308c458 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55630308c4c8 <col:30> 'const char *' lvalue ParmVar 0x556303063c88 'keyword' 'const char *'
|         |-IntegerLiteral 0x55630308c4e8 <col:39> 'int' 0
|         |-DeclRefExpr 0x55630308c508 <col:42> 'P' lvalue ParmVar 0x556303063d00 'parser' 'P'
|         `-DeclRefExpr 0x55630308c528 <col:50> 'T' lvalue ParmVar 0x556303063da8 'x' 'T &'
|-FunctionTemplateDecl 0x556303064408 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x556303063f98 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556303064018 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x556303064368 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5563030640d8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556303064158 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5563030641d0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x556303064278 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55630308c790 <col:73, line:597:5>
|     |-CallExpr 0x55630308c710 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55630308c5b0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55630308c5f0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55630308c600 <col:39> 'const char *' lvalue ParmVar 0x5563030640d8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55630308c6b0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55630308c660 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55630308c620 <col:48> 'int' lvalue ParmVar 0x556303064158 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55630308c698 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55630308c678 <col:56> 'const int' lvalue Var 0x556303058860 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55630308c6d0 <col:68> 'P' lvalue ParmVar 0x5563030641d0 'parser' 'P'
|     | `-DeclRefExpr 0x55630308c6f0 <col:76> 'T' lvalue ParmVar 0x556303064278 'x' 'T &'
|     `-ReturnStmt 0x55630308c780 <line:596:9, col:17>
|       `-UnaryOperator 0x55630308c768 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55630308c758 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5563030649b8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x556303064480 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5563030644f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x556303064918 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x5563030645b8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556303064630 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x5563030647f0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55630308c900 <col:65, line:614:5>
|     `-ReturnStmt 0x55630308c8f0 <line:613:9, col:46>
|       `-CallExpr 0x55630308c8b0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55630308c7c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55630308c830 <col:25> 'const char *' lvalue ParmVar 0x5563030645b8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55630308c850 <col:34> 'int' 0
|         |-DeclRefExpr 0x55630308c870 <col:37> 'P' lvalue ParmVar 0x556303064630 'parser' 'P'
|         `-DeclRefExpr 0x55630308c890 <col:45> 'Vector<T>' lvalue ParmVar 0x5563030647f0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x556303064de8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x556303064a28 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x556303064d48 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x556303064ae0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556303064c30 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55630308cb20 <col:55, line:618:5>
|     `-ReturnStmt 0x55630308cb10 <line:617:9, col:55>
|       `-CallExpr 0x55630308cad0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55630308c928 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55630308c998 <col:25> 'const char *' lvalue ParmVar 0x556303064ae0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55630308c9b8 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55630308ca90 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55630308cab0 <col:54> 'Vector<T>' lvalue ParmVar 0x556303064c30 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5563030653b8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x556303064e50 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x556303064ec8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x556303065318 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x556303064f88 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x556303065008 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x556303065080 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5563030651d0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55630308cd18 <col:76, line:623:5>
|     |-CallExpr 0x55630308cc98 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55630308cb38 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55630308cb78 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55630308cb88 <col:34> 'const char *' lvalue ParmVar 0x556303064f88 'keyword' 'const char *'
|     | |-BinaryOperator 0x55630308cc38 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55630308cbe8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55630308cba8 <col:43> 'int' lvalue ParmVar 0x556303065008 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55630308cc20 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55630308cc00 <col:51> 'const int' lvalue Var 0x556303058860 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55630308cc58 <col:63> 'P' lvalue ParmVar 0x556303065080 'parser' 'P'
|     | `-DeclRefExpr 0x55630308cc78 <col:71> 'Vector<T>' lvalue ParmVar 0x5563030651d0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55630308cd08 <line:622:9, col:17>
|       `-UnaryOperator 0x55630308ccf0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55630308cce0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5563030658f8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x556303065430 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5563030654a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x556303065858 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x556303065568 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5563030655e8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x556303065730 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55630308cf80 <col:66, line:627:5>
|     `-ReturnStmt 0x55630308cf70 <line:626:9, col:59>
|       `-CallExpr 0x55630308cf30 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55630308cd48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55630308cdb8 <col:25> 'const char *' lvalue ParmVar 0x556303065568 'keyword' 'const char *'
|         |-DeclRefExpr 0x55630308cdd8 <col:34> 'int' lvalue ParmVar 0x5563030655e8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55630308cef0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55630308cf10 <col:58> 'Vector<T>' lvalue ParmVar 0x556303065730 'x' 'Vector<T> &'
|-CXXMethodDecl 0x556303065988 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55630308d000 <col:25, line:633:5>
|   `-ReturnStmt 0x55630308cff0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55630308cfd8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55630308cfa8 <col:16> 'const bool' lvalue ->_status 0x556303071338
|         `-CXXThisExpr 0x55630308cf98 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x556303065b08 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x556303065a40 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55630308d0e8 <col:27, line:639:5>
|   |-BinaryOperator 0x55630308d090 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55630308d018 <col:9> 'bool' lvalue ParmVar 0x556303065a40 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55630308d078 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55630308d048 <col:13> 'bool' lvalue ->_status 0x556303071338
|   |     `-CXXThisExpr 0x55630308d038 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55630308d0d8 <line:638:9, col:17>
|     `-UnaryOperator 0x55630308d0c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55630308d0b0 <col:17> 'Args *' this
|-CXXMethodDecl 0x556303065c88 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x556303065bc8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55630308d1d8 <col:39, line:644:5>
|   |-BinaryOperator 0x55630308d180 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55630308d108 <col:9> 'bool' lvalue ParmVar 0x556303065bc8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55630308d168 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55630308d138 <col:13> 'const bool' lvalue ->_status 0x556303071338
|   |     `-CXXThisExpr 0x55630308d128 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55630308d1c8 <line:643:9, col:17>
|     `-UnaryOperator 0x55630308d1b0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55630308d1a0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x556303065d50 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55630308d280 <col:30, line:651:5>
|   `-ReturnStmt 0x55630308d270 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55630308d258 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55630308d228 <col:16> 'bool' lvalue ->_read_status 0x556303051000
|         `-ImplicitCastExpr 0x55630308d208 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55630308d1f8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x556303065e98 <line:655:5, line:658:5> line:655:11 used read_status 'Args &(bool &)'
| |-ParmVarDecl 0x556303065e08 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55630308d388 <col:32, line:658:5>
|   |-BinaryOperator 0x55630308d330 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55630308d298 <col:9> 'bool' lvalue ParmVar 0x556303065e08 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55630308d318 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55630308d2e8 <col:13> 'bool' lvalue ->_read_status 0x556303051000
|   |     `-ImplicitCastExpr 0x55630308d2c8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55630308d2b8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55630308d378 <line:657:9, col:17>
|     `-UnaryOperator 0x55630308d360 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55630308d350 <col:17> 'Args *' this
|-CXXMethodDecl 0x556303065fe8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x556303065f58 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55630308d498 <col:44, line:663:5>
|   |-BinaryOperator 0x55630308d440 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55630308d3a8 <col:9> 'bool' lvalue ParmVar 0x556303065f58 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55630308d428 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55630308d3f8 <col:13> 'bool' lvalue ->_read_status 0x556303051000
|   |     `-ImplicitCastExpr 0x55630308d3d8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55630308d3c8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55630308d488 <line:662:9, col:17>
|     `-UnaryOperator 0x55630308d470 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55630308d460 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5563030660b0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x556303066178 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x556303066240 <line:684:5, col:17> col:9 used consume 'int ()'
|-CXXMethodDecl 0x556303066308 <line:693:5, col:18> col:9 complete 'int ()'
|-FunctionTemplateDecl 0x556303066618 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x5563030663a8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x556303066578 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x556303066488 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55630308d858 <col:19, line:706:5>
|     `-IfStmt 0x55630308d830 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55630308d598 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55630308d760 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55630308d730 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55630308d6f0 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55630308d5f0 <col:42> '<bound member function type>' ->simple_slot 0x5563030882b0
|       |     | `-CXXThisExpr 0x55630308d5e0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55630308d690 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55630308d640 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x556302fbe410 0x556302d04cf8
|       |     | `-DeclRefExpr 0x55630308d620 <col:55> 'T' lvalue ParmVar 0x556303066488 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55630308d6d0 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55630308d820 <line:705:13, col:34>
|         `-CallExpr 0x55630308d7f8 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55630308d780 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55630308d7d8 <col:33> 'T' lvalue ParmVar 0x556303066488 'x' 'T &'
|-FunctionTemplateDecl 0x5563030668e8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x556303066678 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x556303066848 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x556303066758 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55630308dc30 <col:31, line:717:5>
|     |-DeclStmt 0x55630308d998 <line:713:9, col:23>
|     | `-VarDecl 0x55630308d880 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55630308d970 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55630308d8f8 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55630308d950 <col:21> 'T' lvalue ParmVar 0x556303066758 'x' 'T &'
|     |-IfStmt 0x55630308dbe0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55630308da88 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55630308dbc0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55630308db60 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55630308daf0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x556302eb7fa8 0x556302eb7bc8 0x556302eb77f8 0x556302eb7418 0x556302eb7038 0x556302eb6c68
|     |   | `-DeclRefExpr 0x55630308dad0 <col:14> 'T *' lvalue Var 0x55630308d880 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55630308dba0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55630308dc18 <line:716:9, col:16>
|       `-DeclRefExpr 0x55630308dbf8 <col:16> 'T *' lvalue Var 0x55630308d880 's' 'T *'
|-FunctionTemplateDecl 0x55630306c860 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x556303066948 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5563030669c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x556303066c58 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x556303066aa8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x556303066b48 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55630308df40 <col:37, line:726:5>
|     |-IfStmt 0x55630308ded0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55630308def0 <line:723:13, col:26>
|     | | `-VarDecl 0x55630308dc98 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55630308dd88 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55630308dd10 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55630308dd68 <col:25> 'T' lvalue ParmVar 0x556303066aa8 'x' 'T &'
|     | |-DeclRefExpr 0x55630308ddb0 <col:16> 'T *' lvalue Var 0x55630308dc98 's' 'T *'
|     | `-BinaryOperator 0x55630308deb0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55630308de60 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55630308ddf0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x556302eb7fa8 0x556302eb7bc8 0x556302eb77f8 0x556302eb7418 0x556302eb7038 0x556302eb6c68
|     |   | `-DeclRefExpr 0x55630308ddd0 <col:14> 'T *' lvalue Var 0x55630308dc98 's' 'T *'
|     |   `-DeclRefExpr 0x55630308de90 <col:18> 'const V' lvalue ParmVar 0x556303066b48 'value' 'const V &'
|     `-ReturnStmt 0x55630308df30 <line:725:9, col:17>
|       `-UnaryOperator 0x55630308df18 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55630308df08 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55630306cc68 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55630306c8c8 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55630306cbc8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55630306c980 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55630306ca00 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55630306caa8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55630308ed60 <col:65, line:737:5>
|     |-DeclStmt 0x55630308dfd8 <line:732:9, col:26>
|     | `-VarDecl 0x55630308df70 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55630308ed28 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55630308ed48 <line:733:13, col:58>
|       | `-VarDecl 0x55630308e000 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55630308e1e0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55630308e1b0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55630308e198 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55630308e178 <col:26, col:58> 'String' (CXXTemporary 0x55630308e178)
|       |           `-CXXMemberCallExpr 0x55630308e108 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55630308e078 <col:26> '<bound member function type>' ->find 0x5563030878c0
|       |             | `-CXXThisExpr 0x55630308e068 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55630308e140 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55630308e0a8 <col:31> 'const char *' lvalue ParmVar 0x55630306c980 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55630308e158 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55630308e0c8 <col:40> 'int' lvalue ParmVar 0x55630306ca00 'flags' 'int'
|       |             `-DeclRefExpr 0x55630308e0e8 <col:47> 'Args::Slot *' lvalue Var 0x55630308df70 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55630308e298 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55630308e280 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55630308e260 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55630308e230 <col:20> '<bound member function type>' .operator int (String::*)() const 0x556302cc7678
|       |       `-ImplicitCastExpr 0x55630308e218 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55630308e1f8 <col:20> 'String' lvalue Var 0x55630308e000 'str' 'String'
|       `-CompoundStmt 0x55630308ed08 <col:61, line:736:9>
|         |-DeclStmt 0x55630308e750 <line:734:13, col:76>
|         | `-VarDecl 0x55630308e2e8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55630308e720 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55630308e690 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55630308e6d8 <col:60> 'T' lvalue ParmVar 0x55630306caa8 'variable' 'T &'
|         |     `-UnaryOperator 0x55630308e708 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55630308e6f8 <col:71> 'Args *' this
|         `-CallExpr 0x55630308ecd8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55630308e778 <col:13> '<bound member function type>' ->postparse 0x556303087ad8
|           | `-CXXThisExpr 0x55630308e768 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55630308ec98 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55630308e7a8 <col:23> 'T *' lvalue Var 0x55630308e2e8 's' 'T *'
|           | `-CallExpr 0x55630308ec58 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55630308ea30 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55630308eb30 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55630308eb50 <col:86> 'String' lvalue Var 0x55630308e000 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55630308ec00 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55630308eb90 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x556302eb7fa8 0x556302eb7bc8 0x556302eb77f8 0x556302eb7418 0x556302eb7038 0x556302eb6c68
|           |   | `-DeclRefExpr 0x55630308eb70 <col:92> 'T *' lvalue Var 0x55630308e2e8 's' 'T *'
|           |   `-UnaryOperator 0x55630308ec40 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55630308ec30 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55630308ecb8 <col:103> 'Args::Slot *' lvalue Var 0x55630308df70 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55630306d1b8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55630306ccd8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55630306cd58 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55630306d118 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55630306ce18 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55630306ce98 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55630306cf38 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55630306cfd8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x556303092610 <col:88, line:745:5>
|     |-DeclStmt 0x55630308edf8 <line:741:9, col:26>
|     | `-VarDecl 0x55630308ed90 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55630308f018 <line:742:9, col:55>
|     | `-VarDecl 0x55630308ee20 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55630308f000 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55630308efd0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55630308efb8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55630308ef98 <col:22, col:54> 'String' (CXXTemporary 0x55630308ef98)
|     |           `-CXXMemberCallExpr 0x55630308ef28 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55630308ee98 <col:22> '<bound member function type>' ->find 0x5563030878c0
|     |             | `-CXXThisExpr 0x55630308ee88 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55630308ef60 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55630308eec8 <col:27> 'const char *' lvalue ParmVar 0x55630306ce18 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55630308ef78 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55630308eee8 <col:36> 'int' lvalue ParmVar 0x55630306ce98 'flags' 'int'
|     |             `-DeclRefExpr 0x55630308ef08 <col:43> 'Args::Slot *' lvalue Var 0x55630308ed90 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55630308f3f0 <line:743:9, col:72>
|     | `-VarDecl 0x55630308f068 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55630308f3c0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55630308f330 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55630308f378 <col:56> 'T' lvalue ParmVar 0x55630306cf38 'variable' 'T &'
|     |     `-UnaryOperator 0x55630308f3a8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55630308f398 <col:67> 'Args *' this
|     `-CallExpr 0x5563030925e0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55630308f418 <col:9> '<bound member function type>' ->postparse 0x556303087ad8
|       | `-CXXThisExpr 0x55630308f408 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5563030925a0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55630308f448 <col:19> 'T *' lvalue Var 0x55630308f068 's' 'T *'
|       | `-ParenExpr 0x556303092580 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x556303092550 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x556303092538 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x556303092520 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x556303092500 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5563030924d0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x556302cc7678
|       |     |       `-ImplicitCastExpr 0x5563030924b8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55630308f468 <col:25> 'String' lvalue Var 0x55630308ee20 'str' 'String'
|       |     |-CallExpr 0x556303092328 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55630308f6f0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55630308f7f0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55630308f810 <col:89> 'String' lvalue Var 0x55630308ee20 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5563030922d0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55630308f850 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x556302eb7fa8 0x556302eb7bc8 0x556302eb77f8 0x556302eb7418 0x556302eb7038 0x556302eb6c68
|       |     | | `-DeclRefExpr 0x55630308f830 <col:95> 'T *' lvalue Var 0x55630308f068 's' 'T *'
|       |     | `-UnaryOperator 0x556303092310 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x556303092300 <col:99> 'Args *' this
|       |     `-ParenExpr 0x556303092498 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x556303092478 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x556303092448 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5563030923f8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x556303092388 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x556302eb7fa8 0x556302eb7bc8 0x556302eb77f8 0x556302eb7418 0x556302eb7038 0x556302eb6c68
|       |         | | `-DeclRefExpr 0x556303092368 <col:109> 'T *' lvalue Var 0x55630308f068 's' 'T *'
|       |         | `-DeclRefExpr 0x556303092428 <col:113> 'const V' lvalue ParmVar 0x55630306cfd8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x556303092468 <col:120> 'bool' true
|       `-DeclRefExpr 0x5563030925c0 <col:128> 'Args::Slot *' lvalue Var 0x55630308ed90 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55630306d6e8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55630306d230 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55630306d2a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55630306d648 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55630306d368 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55630306d3e8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55630306d460 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55630306d508 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x556303093208 <col:75, line:754:5>
|     |-DeclStmt 0x5563030926b8 <line:749:9, col:26>
|     | `-VarDecl 0x556303092650 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5563030931d0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x5563030931f0 <line:750:13, col:58>
|       | `-VarDecl 0x5563030926e0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5563030928c0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x556303092890 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x556303092878 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x556303092858 <col:26, col:58> 'String' (CXXTemporary 0x556303092858)
|       |           `-CXXMemberCallExpr 0x5563030927e8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x556303092758 <col:26> '<bound member function type>' ->find 0x5563030878c0
|       |             | `-CXXThisExpr 0x556303092748 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x556303092820 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x556303092788 <col:31> 'const char *' lvalue ParmVar 0x55630306d368 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x556303092838 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5563030927a8 <col:40> 'int' lvalue ParmVar 0x55630306d3e8 'flags' 'int'
|       |             `-DeclRefExpr 0x5563030927c8 <col:47> 'Args::Slot *' lvalue Var 0x556303092650 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x556303092978 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x556303092960 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x556303092940 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x556303092910 <col:20> '<bound member function type>' .operator int (String::*)() const 0x556302cc7678
|       |       `-ImplicitCastExpr 0x5563030928f8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5563030928d8 <col:20> 'String' lvalue Var 0x5563030926e0 'str' 'String'
|       `-CompoundStmt 0x5563030931b0 <col:61, line:753:9>
|         |-DeclStmt 0x556303092d50 <line:751:13, col:63>
|         | `-VarDecl 0x5563030929c8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x556303092d20 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x556303092c90 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x556303092cd8 <col:47> 'T' lvalue ParmVar 0x55630306d508 'variable' 'T &'
|         |     `-UnaryOperator 0x556303092d08 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x556303092cf8 <col:58> 'Args *' this
|         `-CallExpr 0x556303093180 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x556303092d78 <col:13> '<bound member function type>' ->postparse 0x556303087ad8
|           | `-CXXThisExpr 0x556303092d68 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x556303093140 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x556303092da8 <col:23> 'T *' lvalue Var 0x5563030929c8 's' 'T *'
|           | `-CallExpr 0x556303093100 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x556303092f90 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x556303092fd8 <col:56> 'P' lvalue ParmVar 0x55630306d460 'parser' 'P'
|           |   |-DeclRefExpr 0x556303092ff8 <col:64> 'String' lvalue Var 0x5563030926e0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5563030930a8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x556303093038 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x556302eb7fa8 0x556302eb7bc8 0x556302eb77f8 0x556302eb7418 0x556302eb7038 0x556302eb6c68
|           |   | `-DeclRefExpr 0x556303093018 <col:70> 'T *' lvalue Var 0x5563030929c8 's' 'T *'
|           |   `-UnaryOperator 0x5563030930e8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5563030930d8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x556303093160 <col:81> 'Args::Slot *' lvalue Var 0x556303092650 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55630306dd48 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55630306d760 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55630306d7d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55630306d858 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55630306dca8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55630306d920 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55630306d9a0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55630306da18 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55630306dab8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55630306db58 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x556303093f98 <col:98, line:762:5>
|     |-DeclStmt 0x5563030932a0 <line:758:9, col:26>
|     | `-VarDecl 0x556303093238 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5563030934c0 <line:759:9, col:55>
|     | `-VarDecl 0x5563030932c8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5563030934a8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x556303093478 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x556303093460 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x556303093440 <col:22, col:54> 'String' (CXXTemporary 0x556303093440)
|     |           `-CXXMemberCallExpr 0x5563030933d0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x556303093340 <col:22> '<bound member function type>' ->find 0x5563030878c0
|     |             | `-CXXThisExpr 0x556303093330 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x556303093408 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x556303093370 <col:27> 'const char *' lvalue ParmVar 0x55630306d920 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x556303093420 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x556303093390 <col:36> 'int' lvalue ParmVar 0x55630306d9a0 'flags' 'int'
|     |             `-DeclRefExpr 0x5563030933b0 <col:43> 'Args::Slot *' lvalue Var 0x556303093238 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5563030938e0 <line:760:9, col:59>
|     | `-VarDecl 0x556303093518 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5563030938b0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x556303093820 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x556303093868 <col:43> 'T' lvalue ParmVar 0x55630306dab8 'variable' 'T &'
|     |     `-UnaryOperator 0x556303093898 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x556303093888 <col:54> 'Args *' this
|     `-CallExpr 0x556303093f68 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x556303093908 <col:9> '<bound member function type>' ->postparse 0x556303087ad8
|       | `-CXXThisExpr 0x5563030938f8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x556303093f28 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x556303093938 <col:19> 'T *' lvalue Var 0x556303093518 's' 'T *'
|       | `-ParenExpr 0x556303093f08 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x556303093ed8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x556303093ec0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x556303093ea8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x556303093e88 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x556303093e58 <col:25> '<bound member function type>' .operator int (String::*)() const 0x556302cc7678
|       |     |       `-ImplicitCastExpr 0x556303093e40 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x556303093958 <col:25> 'String' lvalue Var 0x5563030932c8 'str' 'String'
|       |     |-CallExpr 0x556303093cb0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x556303093b40 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x556303093b88 <col:59> 'P' lvalue ParmVar 0x55630306da18 'parser' 'P'
|       |     | |-DeclRefExpr 0x556303093ba8 <col:67> 'String' lvalue Var 0x5563030932c8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x556303093c58 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x556303093be8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x556302eb7fa8 0x556302eb7bc8 0x556302eb77f8 0x556302eb7418 0x556302eb7038 0x556302eb6c68
|       |     | | `-DeclRefExpr 0x556303093bc8 <col:73> 'T *' lvalue Var 0x556303093518 's' 'T *'
|       |     | `-UnaryOperator 0x556303093c98 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x556303093c88 <col:77> 'Args *' this
|       |     `-ParenExpr 0x556303093e20 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x556303093e00 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x556303093dd0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x556303093d80 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x556303093d10 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x556302eb7fa8 0x556302eb7bc8 0x556302eb77f8 0x556302eb7418 0x556302eb7038 0x556302eb6c68
|       |         | | `-DeclRefExpr 0x556303093cf0 <col:87> 'T *' lvalue Var 0x556303093518 's' 'T *'
|       |         | `-DeclRefExpr 0x556303093db0 <col:91> 'const V' lvalue ParmVar 0x55630306db58 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x556303093df0 <col:98> 'bool' true
|       `-DeclRefExpr 0x556303093f48 <col:106> 'Args::Slot *' lvalue Var 0x556303093238 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55630306e3b8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55630306ddc8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55630306de48 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55630306dec8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55630306e318 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55630306df90 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55630306e010 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55630306e088 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55630306e128 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55630306e1c8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x556303094f78 <col:60, line:773:5>
|     |-DeclStmt 0x556303094040 <line:767:9, col:26>
|     | `-VarDecl 0x556303093fd8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x556303094f40 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x556303094f60 <line:768:13, col:58>
|       | `-VarDecl 0x556303094068 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x556303094248 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x556303094218 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x556303094200 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5563030941e0 <col:26, col:58> 'String' (CXXTemporary 0x5563030941e0)
|       |           `-CXXMemberCallExpr 0x556303094170 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5563030940e0 <col:26> '<bound member function type>' ->find 0x5563030878c0
|       |             | `-CXXThisExpr 0x5563030940d0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5563030941a8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x556303094110 <col:31> 'const char *' lvalue ParmVar 0x55630306df90 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5563030941c0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x556303094130 <col:40> 'int' lvalue ParmVar 0x55630306e010 'flags' 'int'
|       |             `-DeclRefExpr 0x556303094150 <col:47> 'Args::Slot *' lvalue Var 0x556303093fd8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x556303094300 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5563030942e8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5563030942c8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x556303094298 <col:20> '<bound member function type>' .operator int (String::*)() const 0x556302cc7678
|       |       `-ImplicitCastExpr 0x556303094280 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x556303094260 <col:20> 'String' lvalue Var 0x556303094068 'str' 'String'
|       `-CompoundStmt 0x556303094f18 <col:61, line:772:9>
|         |-DeclStmt 0x556303094640 <line:769:13, col:66>
|         | `-VarDecl 0x556303094358 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x556303094610 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x556303094580 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5563030945c8 <col:49> 'T1' lvalue ParmVar 0x55630306e128 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x5563030945f8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5563030945e8 <col:61> 'Args *' this
|         |-DeclStmt 0x5563030949b0 <line:770:13, col:66>
|         | `-VarDecl 0x5563030946c8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x556303094980 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5563030948f0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x556303094938 <col:49> 'T2' lvalue ParmVar 0x55630306e1c8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x556303094968 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x556303094958 <col:61> 'Args *' this
|         `-CallExpr 0x556303094ee8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x5563030949d8 <col:13> '<bound member function type>' ->postparse 0x556303087ad8
|           | `-CXXThisExpr 0x5563030949c8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x556303094ea8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x556303094a48 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x556303094a08 <col:23> 'T1 *' lvalue Var 0x556303094358 's1' 'T1 *'
|           | | `-DeclRefExpr 0x556303094a28 <col:29> 'T2 *' lvalue Var 0x5563030946c8 's2' 'T2 *'
|           | `-CallExpr 0x556303094e60 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x556303094c30 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x556303094c78 <col:63> 'P' lvalue ParmVar 0x55630306e088 'parser' 'P'
|           |   |-DeclRefExpr 0x556303094c98 <col:71> 'String' lvalue Var 0x556303094068 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x556303094d48 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x556303094cd8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x556302eb7fa8 0x556302eb7bc8 0x556302eb77f8 0x556302eb7418 0x556302eb7038 0x556302eb6c68
|           |   | `-DeclRefExpr 0x556303094cb8 <col:77> 'T1 *' lvalue Var 0x556303094358 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x556303094e08 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x556303094d98 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x556302eb7fa8 0x556302eb7bc8 0x556302eb77f8 0x556302eb7418 0x556302eb7038 0x556302eb6c68
|           |   | `-DeclRefExpr 0x556303094d78 <col:82> 'T2 *' lvalue Var 0x5563030946c8 's2' 'T2 *'
|           |   `-UnaryOperator 0x556303094e48 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x556303094e38 <col:87> 'Args *' this
|           `-DeclRefExpr 0x556303094ec8 <col:94> 'Args::Slot *' lvalue Var 0x556303093fd8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55630306e7a8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55630306e438 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55630306e708 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55630306e4f0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55630306e570 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55630306e5e8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x556303095490 <col:67, line:780:5>
|     |-DeclStmt 0x556303095010 <line:777:9, col:26>
|     | `-VarDecl 0x556303094fa8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x556303095458 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x556303095478 <line:778:13, col:58>
|       | `-VarDecl 0x556303095038 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x556303095218 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5563030951e8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5563030951d0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5563030951b0 <col:26, col:58> 'String' (CXXTemporary 0x5563030951b0)
|       |           `-CXXMemberCallExpr 0x556303095140 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5563030950b0 <col:26> '<bound member function type>' ->find 0x5563030878c0
|       |             | `-CXXThisExpr 0x5563030950a0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x556303095178 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5563030950e0 <col:31> 'const char *' lvalue ParmVar 0x55630306e4f0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x556303095190 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x556303095100 <col:40> 'int' lvalue ParmVar 0x55630306e570 'flags' 'int'
|       |             `-DeclRefExpr 0x556303095120 <col:47> 'Args::Slot *' lvalue Var 0x556303094fa8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5563030952d0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5563030952b8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x556303095298 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x556303095268 <col:20> '<bound member function type>' .operator int (String::*)() const 0x556302cc7678
|       |       `-ImplicitCastExpr 0x556303095250 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x556303095230 <col:20> 'String' lvalue Var 0x556303095038 'str' 'String'
|       `-CallExpr 0x556303095428 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x5563030952f8 <col:13> '<bound member function type>' ->postparse 0x556303087ad8
|         | `-CXXThisExpr 0x5563030952e8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x5563030953d8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x556303095348 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x556303095328 <col:23> 'P' lvalue ParmVar 0x55630306e5e8 'parser' 'P'
|         | |-DeclRefExpr 0x556303095390 <col:36> 'String' lvalue Var 0x556303095038 'str' 'String'
|         | `-UnaryOperator 0x5563030953c0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x5563030953b0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x556303095408 <col:49> 'Args::Slot *' lvalue Var 0x556303094fa8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55630306eb48 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55630306e818 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55630306eaa8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55630306e8d0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55630306e950 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55630306e9c8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x556303095e00 <col:71, line:792:5>
|     |-DeclStmt 0x556303095528 <line:784:9, col:26>
|     | `-VarDecl 0x5563030954c0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5563030955f8 <line:785:9, col:29>
|     | `-VarDecl 0x556303095558 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5563030955e0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5563030955c0 <col:28> 'int' 1
|     |-WhileStmt 0x556303095cb0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x556303095cd0 <line:786:16, col:61>
|     | | `-VarDecl 0x556303095620 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x556303095800 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5563030957d0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5563030957b8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x556303095798 <col:29, col:61> 'String' (CXXTemporary 0x556303095798)
|     | |           `-CXXMemberCallExpr 0x556303095728 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x556303095698 <col:29> '<bound member function type>' ->find 0x5563030878c0
|     | |             | `-CXXThisExpr 0x556303095688 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x556303095760 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5563030956c8 <col:34> 'const char *' lvalue ParmVar 0x55630306e8d0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x556303095778 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5563030956e8 <col:43> 'int' lvalue ParmVar 0x55630306e950 'flags' 'int'
|     | |             `-DeclRefExpr 0x556303095708 <col:50> 'Args::Slot *' lvalue Var 0x5563030954c0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5563030958b8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5563030958a0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x556303095880 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x556303095850 <col:23> '<bound member function type>' .operator int (String::*)() const 0x556302cc7678
|     | |       `-ImplicitCastExpr 0x556303095838 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x556303095818 <col:23> 'String' lvalue Var 0x556303095620 'str' 'String'
|     | `-CompoundStmt 0x556303095c88 <col:64, line:790:9>
|     |   |-CallExpr 0x556303095a10 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x5563030958e0 <col:13> '<bound member function type>' ->postparse 0x556303087ad8
|     |   | | `-CXXThisExpr 0x5563030958d0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5563030959c0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x556303095930 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x556303095910 <col:23> 'P' lvalue ParmVar 0x55630306e9c8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x556303095978 <col:36> 'String' lvalue Var 0x556303095620 'str' 'String'
|     |   | | `-UnaryOperator 0x5563030959a8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x556303095998 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x5563030959f0 <col:49> 'Args::Slot *' lvalue Var 0x5563030954c0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x556303095ba8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x556303095a40 <col:13> 'int' lvalue Var 0x556303095558 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x556303095b90 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x556303095b70 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x556303095ad8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x556303095ab8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x556303095aa0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x556303095a60 <col:28> 'int' lvalue Var 0x556303095558 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x556303095a80 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x556303095b58 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x556303095b28 <col:49> 'bool' lvalue ->_read_status 0x556303051000
|     |   |         `-ImplicitCastExpr 0x556303095b08 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x556303095af8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x556303095c58 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x556303095bc8 <col:13> 'int' lvalue ParmVar 0x55630306e950 'flags' 'int'
|     |     `-UnaryOperator 0x556303095c40 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x556303095c28 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x556303095c08 <col:23> 'const int' lvalue Var 0x556303058578 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x556303095de0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x556303095d18 <col:9> 'bool' lvalue ->_read_status 0x556303051000
|       | `-ImplicitCastExpr 0x556303095cf8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x556303095ce8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x556303095dc0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x556303095da0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x556303095d88 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x556303095d48 <col:25> 'int' lvalue Var 0x556303095558 'read_status' 'int'
|           `-IntegerLiteral 0x556303095d68 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55630306f028 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55630306ebb8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55630306ec38 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55630306ef88 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55630306ecf8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55630306ed78 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55630306edf0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55630306ee98 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x556303096d90 <col:84, line:805:5>
|     |-DeclStmt 0x556303095ea8 <line:796:9, col:26>
|     | `-VarDecl 0x556303095e40 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x556303095f78 <line:797:9, col:29>
|     | `-VarDecl 0x556303095ed8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x556303095f60 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x556303095f40 <col:28> 'int' 1
|     |-DeclStmt 0x5563030962b0 <line:798:9, col:71>
|     | `-VarDecl 0x556303095fc8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x556303096280 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5563030961f0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x556303096238 <col:55> 'T' lvalue ParmVar 0x55630306ee98 'variable' 'T &'
|     |     `-UnaryOperator 0x556303096268 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x556303096258 <col:66> 'Args *' this
|     |-WhileStmt 0x556303096c40 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x556303096c60 <line:799:16, col:61>
|     | | `-VarDecl 0x5563030962d8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5563030964b8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x556303096488 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x556303096470 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x556303096450 <col:29, col:61> 'String' (CXXTemporary 0x556303096450)
|     | |           `-CXXMemberCallExpr 0x5563030963e0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x556303096350 <col:29> '<bound member function type>' ->find 0x5563030878c0
|     | |             | `-CXXThisExpr 0x556303096340 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x556303096418 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x556303096380 <col:34> 'const char *' lvalue ParmVar 0x55630306ecf8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x556303096430 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5563030963a0 <col:43> 'int' lvalue ParmVar 0x55630306ed78 'flags' 'int'
|     | |             `-DeclRefExpr 0x5563030963c0 <col:50> 'Args::Slot *' lvalue Var 0x556303095e40 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x556303096570 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x556303096558 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x556303096538 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x556303096508 <col:23> '<bound member function type>' .operator int (String::*)() const 0x556302cc7678
|     | |       `-ImplicitCastExpr 0x5563030964f0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5563030964d0 <col:23> 'String' lvalue Var 0x5563030962d8 'str' 'String'
|     | `-CompoundStmt 0x556303096c18 <col:64, line:803:9>
|     |   |-CallExpr 0x5563030969a0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x556303096598 <col:13> '<bound member function type>' ->postparse 0x556303087ad8
|     |   | | `-CXXThisExpr 0x556303096588 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x556303096960 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x5563030965c8 <col:23> 'T *' lvalue Var 0x556303095fc8 's' 'T *'
|     |   | | `-CallExpr 0x556303096920 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x5563030967b0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x5563030967f8 <col:56> 'P' lvalue ParmVar 0x55630306edf0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x556303096818 <col:64> 'String' lvalue Var 0x5563030962d8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x5563030968c8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x556303096858 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x556302eb7fa8 0x556302eb7bc8 0x556302eb77f8 0x556302eb7418 0x556302eb7038 0x556302eb6c68
|     |   | |   | `-DeclRefExpr 0x556303096838 <col:70> 'T *' lvalue Var 0x556303095fc8 's' 'T *'
|     |   | |   `-UnaryOperator 0x556303096908 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x5563030968f8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x556303096980 <col:81> 'Args::Slot *' lvalue Var 0x556303095e40 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x556303096b38 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5563030969d0 <col:13> 'int' lvalue Var 0x556303095ed8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x556303096b20 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x556303096b00 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x556303096a68 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x556303096a48 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x556303096a30 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5563030969f0 <col:28> 'int' lvalue Var 0x556303095ed8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x556303096a10 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x556303096ae8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x556303096ab8 <col:49> 'bool' lvalue ->_read_status 0x556303051000
|     |   |         `-ImplicitCastExpr 0x556303096a98 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x556303096a88 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x556303096be8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x556303096b58 <col:13> 'int' lvalue ParmVar 0x55630306ed78 'flags' 'int'
|     |     `-UnaryOperator 0x556303096bd0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x556303096bb8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x556303096b98 <col:23> 'const int' lvalue Var 0x556303058578 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x556303096d70 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x556303096ca8 <col:9> 'bool' lvalue ->_read_status 0x556303051000
|       | `-ImplicitCastExpr 0x556303096c88 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x556303096c78 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x556303096d50 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x556303096d30 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x556303096d18 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x556303096cd8 <col:25> 'int' lvalue Var 0x556303095ed8 'read_status' 'int'
|           `-IntegerLiteral 0x556303096cf8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55630306f608 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55630306f0a0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55630306f118 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55630306f568 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55630306f1d8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55630306f258 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55630306f2d0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55630306f420 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x556303097b98 <col:87, line:821:5>
|     |-DeclStmt 0x556303096e40 <line:809:9, col:26>
|     | `-VarDecl 0x556303096dd8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x556303096f10 <line:810:9, col:29>
|     | `-VarDecl 0x556303096e70 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x556303096ef8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x556303096ed8 <col:28> 'int' 1
|     |-DeclStmt 0x556303097158 <line:811:9, col:38>
|     | `-VarDecl 0x556303097040 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x556303097130 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5563030970b8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x556303097110 <col:29> 'Vector<T>' lvalue ParmVar 0x55630306f420 'variable' 'Vector<T> &'
|     |-WhileStmt 0x556303097a48 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x556303097a68 <line:812:16, col:61>
|     | | `-VarDecl 0x556303097180 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x556303097360 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x556303097330 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x556303097318 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5563030972f8 <col:29, col:61> 'String' (CXXTemporary 0x5563030972f8)
|     | |           `-CXXMemberCallExpr 0x556303097288 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5563030971f8 <col:29> '<bound member function type>' ->find 0x5563030878c0
|     | |             | `-CXXThisExpr 0x5563030971e8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5563030972c0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x556303097228 <col:34> 'const char *' lvalue ParmVar 0x55630306f1d8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5563030972d8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x556303097248 <col:43> 'int' lvalue ParmVar 0x55630306f258 'flags' 'int'
|     | |             `-DeclRefExpr 0x556303097268 <col:50> 'Args::Slot *' lvalue Var 0x556303096dd8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x556303097418 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x556303097400 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5563030973e0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5563030973b0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x556302cc7678
|     | |       `-ImplicitCastExpr 0x556303097398 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x556303097378 <col:23> 'String' lvalue Var 0x556303097180 'str' 'String'
|     | `-CompoundStmt 0x556303097a10 <col:64, line:819:9>
|     |   |-DeclStmt 0x5563030974d8 <line:813:13, col:23>
|     |   | `-VarDecl 0x556303097440 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x5563030974b8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x556303097658 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x556303097500 <col:13> '<bound member function type>' ->postparse 0x556303087ad8
|     |   | | `-CXXThisExpr 0x5563030974f0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x556303097600 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x556303097550 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x556303097530 <col:23> 'P' lvalue ParmVar 0x55630306f2d0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x556303097598 <col:36> 'String' lvalue Var 0x556303097180 'str' 'String'
|     |   | | |-DeclRefExpr 0x5563030975b8 <col:41> 'T' lvalue Var 0x556303097440 'sx' 'T'
|     |   | | `-UnaryOperator 0x5563030975e8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5563030975d8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x556303097638 <col:53> 'Args::Slot *' lvalue Var 0x556303096dd8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x5563030977b0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x5563030976e8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x5563030976b8 <col:17> 'bool' lvalue ->_read_status 0x556303051000
|     |   | |   `-ImplicitCastExpr 0x556303097698 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x556303097688 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x556303097788 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x556303097720 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x556303097700 <col:17> 'Vector<T> *' lvalue Var 0x556303097040 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x556303097768 <col:30> 'T' lvalue Var 0x556303097440 'sx' 'T'
|     |   |-BinaryOperator 0x556303097930 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5563030977c8 <col:13> 'int' lvalue Var 0x556303096e70 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x556303097918 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5563030978f8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x556303097860 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x556303097840 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x556303097828 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5563030977e8 <col:28> 'int' lvalue Var 0x556303096e70 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x556303097808 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5563030978e0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5563030978b0 <col:49> 'bool' lvalue ->_read_status 0x556303051000
|     |   |         `-ImplicitCastExpr 0x556303097890 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x556303097880 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5563030979e0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x556303097950 <col:13> 'int' lvalue ParmVar 0x55630306f258 'flags' 'int'
|     |     `-UnaryOperator 0x5563030979c8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5563030979b0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x556303097990 <col:23> 'const int' lvalue Var 0x556303058578 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x556303097b78 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x556303097ab0 <col:9> 'bool' lvalue ->_read_status 0x556303051000
|       | `-ImplicitCastExpr 0x556303097a90 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x556303097a80 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x556303097b58 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x556303097b38 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x556303097b20 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x556303097ae0 <col:25> 'int' lvalue Var 0x556303096e70 'read_status' 'int'
|           `-IntegerLiteral 0x556303097b00 <col:40> 'int' 1
|-AccessSpecDecl 0x55630306f680 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55630306f6a8 prev 0x556303056878 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55630306f7a0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55630306f890 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x556303097bd0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55630306f980 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x556303097be0 <col:25, line:830:9>
| |-CXXMethodDecl 0x55630306fa80 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55630306fb30 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55630306fbd8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55630306fbd8
| | `-ParmVarDecl 0x55630306fce8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x5563030704a8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5563030704a8
|   `-ParmVarDecl 0x5563030705b8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55630306fd58 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55630306feb8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x5563030700b0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55630306ff60 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55630306ffd8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x556303097dc0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x556303070368 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x556303097c30 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x556303097bf0 <col:20> 'void *' lvalue ParmVar 0x55630306ff60 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x5563030703d0 '_slot' 'char *'
| | | `-CXXNewExpr 0x556303097cb8 <col:32, col:45> 'char *' array Function 0x556302ae27a8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x556303097ca0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x556303097c70 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55630306ffd8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x556303070430 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x556303097d80 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x556303097d40 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55630306ffd8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x556303097e40 <col:61, line:838:9>
| |-CXXDestructorDecl 0x5563030701b0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55630306f980 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x556303097ec8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x556303097ea8 <line:840:13, col:22> 'void' array Function 0x556302ae2b08 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x556303097e90 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x556303097e60 <col:22> 'char *' lvalue ->_slot 0x5563030703d0
| |         `-CXXThisExpr 0x556303097e50 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x5563030702b0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55630306fa80 Slot::store 'void ()' ]
| | `-CompoundStmt 0x5563030980b8 <col:22, line:844:9>
| |   `-CallExpr 0x556303098020 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x556303098008 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x556303097fe8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x556302bef958 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x556303098058 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x556303097f38 <col:20> 'void *' lvalue ->_ptr 0x556303070368
| |     |   `-CXXThisExpr 0x556303097f28 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x556303098088 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x556303098070 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x556303097f78 <col:26> 'char *' lvalue ->_slot 0x5563030703d0
| |     |     `-CXXThisExpr 0x556303097f68 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x5563030980a0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x556303097fb8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x556303070430
| |         `-CXXThisExpr 0x556303097fa8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x556303070368 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x5563030703d0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x556303070430 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x556303070628 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x556303070628
| | `-ParmVarDecl 0x556303070738 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x5563030707d8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5563030707d8
|   `-ParmVarDecl 0x5563030708e8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x556303070a88 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x556303070958 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x5563030709f8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x556303070d20 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x556303070f18 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x556303070de8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x556303071098 '_ptr' 'T *'
|   | | `-ParenListExpr 0x5563030980f0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x5563030980d0 <col:20> 'T *' lvalue ParmVar 0x556303070de8 'ptr' 'T *'
|   | `-CompoundStmt 0x556303098140 <col:25, line:854:9>
|   |-CXXMethodDecl 0x556303070fe8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55630306fa80 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x556303098300 <col:22, line:857:9>
|   |   `-CallExpr 0x5563030982d0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x556303098150 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x556302fbf438 0x556302f9bae8 0x556302cbb048 0x556302c69448
|   |     |-CXXOperatorCallExpr 0x556303098260 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x5563030981f0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x556302eb7fa8 0x556302eb7bc8 0x556302eb77f8 0x556302eb7418 0x556302eb7038 0x556302eb6c68
|   |     | `-MemberExpr 0x5563030981c0 <col:29> 'T *' lvalue ->_ptr 0x556303071098
|   |     |   `-CXXThisExpr 0x5563030981b0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x5563030982a0 <col:35> 'T' lvalue ->_slot 0x5563030710f8
|   |       `-CXXThisExpr 0x556303098290 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x556303071098 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x5563030710f8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x556303071160 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x556303071260 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x5563030712b0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x556303071240 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x556303071220 <col:31> 'int' 48
|-FieldDecl 0x5563030712d8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x556303071338 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x556303071398 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x5563030714d0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x556303086050 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5563030860b0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x556303086160 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x556303086388 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x556303086290 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x5563030864d8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x556303086448 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x5563030878c0 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x556303086598 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x556303086618 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x5563030866c0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x556303087ad8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x556303087988 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x556303087a00 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x556303087ba8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x556303087cf8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x556303087c60 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x556303088088 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x556303087db8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x556303087e38 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x556303087ee0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x556303087f98 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x5563030882b0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x556303088160 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x5563030881d8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x5563030885c8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x556303088360 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x556303088528 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x556303088438 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.4*, %class.Vector.6, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.4*, %class.Vector.6, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class AnnoArg
         0 |   int size
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5563030bb0e0 <../dummy_inc/click/args.hh:1294:1, line:1301:1> line:1294:7 referenced class AnnoArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5563030bb1f8 <col:1, col:7> col:7 implicit referenced class AnnoArg
|-AccessSpecDecl 0x5563030bb288 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5563030bb398 <line:1295:5, line:1297:5> line:1295:5 used AnnoArg 'void (int)'
| |-ParmVarDecl 0x5563030bb2c8 <col:13, col:17> col:17 used s 'int'
| |-CXXCtorInitializer Field 0x5563030bb6e8 'size' 'int'
| | `-ImplicitCastExpr 0x5563030bb7b0 <line:1296:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5563030bb770 <col:16> 'int' lvalue ParmVar 0x5563030bb2c8 's' 'int'
| `-CompoundStmt 0x5563030bb7f8 <col:19, line:1297:5>
|-CXXMethodDecl 0x5563030bb5f0 <line:1298:5, col:83> col:10 parse 'bool (const String &, int &, const ArgContext &)'
| |-ParmVarDecl 0x5563030bb458 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x5563030bb4d8 <col:35, col:40> col:40 result 'int &'
| `-ParmVarDecl 0x5563030bb550 <col:48, col:73> col:66 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5563030bb750 <col:73> 'const ArgContext' lvalue Var 0x556303098328 'blank_args' 'const ArgContext'
|-AccessSpecDecl 0x5563030bb6a8 <line:1299:3, col:10> col:3 private
|-FieldDecl 0x5563030bb6e8 <line:1300:5, col:9> col:9 referenced size 'int'
|-CXXConstructorDecl 0x5563030f6ae8 <line:1294:7> col:7 implicit constexpr AnnoArg 'void (const AnnoArg &)' inline default trivial noexcept-unevaluated 0x5563030f6ae8
| `-ParmVarDecl 0x5563030f6bf8 <col:7> col:7 'const AnnoArg &'
|-CXXConstructorDecl 0x5563030f6c98 <col:7> col:7 implicit used constexpr AnnoArg 'void (AnnoArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5563030f6da8 <col:7> col:7 used 'AnnoArg &&'
| |-CXXCtorInitializer Field 0x5563030bb6e8 'size' 'int'
| | `-ImplicitCastExpr 0x5563030f75b8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5563030f7570 <col:7> 'int' xvalue .size 0x5563030bb6e8
| |     `-CXXStaticCastExpr 0x5563030f7540 <col:7> 'AnnoArg' xvalue static_cast<class AnnoArg &&> <NoOp>
| |       `-DeclRefExpr 0x5563030f7510 <col:7> 'AnnoArg' lvalue ParmVar 0x5563030f6da8 '' 'AnnoArg &&'
| `-CompoundStmt 0x5563030f7600 <col:7>
`-CXXDestructorDecl 0x5563030f6e48 <col:7> col:7 implicit referenced ~AnnoArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.AnnoArg = type { i32 }
  NonVirtualBaseLLVMType:%class.AnnoArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct uninitialized_type (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556302ae4778 <../dummy_inc/click/config.h:317:1, line:318:1> line:317:8 referenced struct uninitialized_type definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x556302ae4898 <col:1, col:8> col:8 implicit struct uninitialized_type
|-CXXConstructorDecl 0x556302d00d60 <col:8> col:8 implicit referenced constexpr uninitialized_type 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x556302d00e40 <col:8> col:8 implicit constexpr uninitialized_type 'void (const uninitialized_type &)' inline default trivial noexcept-unevaluated 0x556302d00e40
| `-ParmVarDecl 0x556302d00f28 <col:8> col:8 'const uninitialized_type &'
|-CXXConstructorDecl 0x556302d00fc8 <col:8> col:8 implicit constexpr uninitialized_type 'void (uninitialized_type &&)' inline default trivial noexcept-unevaluated 0x556302d00fc8
| `-ParmVarDecl 0x556302d010d8 <col:8> col:8 'uninitialized_type &&'
`-CXXDestructorDecl 0x556302e9ab30 <col:8> col:8 implicit referenced ~uninitialized_type 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.uninitialized_type = type { i8 }
  NonVirtualBaseLLVMType:%struct.uninitialized_type = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_icmp
         0 |   uint8_t icmp_type
         1 |   uint8_t icmp_code
         2 |   uint16_t icmp_cksum
         4 |   uint32_t padding
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x556302ffbd10 prev 0x556302ebbe20 <../dummy_inc/clicknet/icmp.h:17:1, line:23:1> line:17:8 referenced struct click_icmp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x556302ffbe08 <col:1, col:8> col:8 implicit struct click_icmp
|-FieldDecl 0x556302ffbea8 <line:18:5, col:13> col:13 icmp_type 'uint8_t':'unsigned char'
|-FieldDecl 0x556302ffbf08 <line:19:5, col:13> col:13 icmp_code 'uint8_t':'unsigned char'
|-FieldDecl 0x556302ffbf68 <line:20:5, col:14> col:14 icmp_cksum 'uint16_t':'unsigned short'
`-FieldDecl 0x556302ffbfc8 <line:21:5, col:14> col:14 padding 'uint32_t':'unsigned int'

Layout: <CGRecordLayout
  LLVMType:%struct.click_icmp = type { i8, i8, i16, i32 }
  NonVirtualBaseLLVMType:%struct.click_icmp = type { i8, i8, i16, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x556302fda850 <../dummy_inc/click/hashcontainer.hh:14:1, col:69> line:302:7 class HashContainer_const_iterator definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-TemplateArgument type 'IPRewriterEntry'
|-TemplateArgument type 'HashContainer_adapter<IPRewriterEntry>'
|-CXXRecordDecl 0x556302ff6298 prev 0x556302fda850 <col:1, col:7> col:7 implicit class HashContainer_const_iterator
|-AccessSpecDecl 0x556302ff6328 <col:38, col:44> col:38 public
|-TypedefDecl 0x556302ff64f0 <line:304:5, col:53> col:53 size_type 'typename HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::size_type':'unsigned long'
| `-ElaboratedType 0x556302ff64a0 'typename HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::size_type' sugar
|   `-TypedefType 0x556302fda3c0 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::size_type' sugar
|     |-Typedef 0x556302fd9b80 'size_type'
|     `-TypedefType 0x556302a347f0 'size_t' sugar
|       |-Typedef 0x5563029fbb20 'size_t'
|       `-BuiltinType 0x55630298b430 'unsigned long'
|-TypedefDecl 0x556302ff6690 <line:305:5, col:61> col:61 referenced bucket_count_type 'typename HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::bucket_count_type':'unsigned int'
| `-ElaboratedType 0x556302ff6640 'typename HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::bucket_count_type' sugar
|   `-TypedefType 0x556302fda560 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::bucket_count_type' sugar
|     |-Typedef 0x556302fd9bd8 'bucket_count_type'
|     `-TypedefType 0x556302ae4b00 'uint32_t' sugar
|       |-Typedef 0x5563029f4408 'uint32_t'
|       `-TypedefType 0x5563029cd440 '__uint32_t' sugar
|         |-Typedef 0x5563029cd038 '__uint32_t'
|         `-BuiltinType 0x55630298b410 'unsigned int'
|-CXXConstructorDecl 0x556302ff6720 <line:308:5, line:309:5> line:308:5 HashContainer_const_iterator 'void ()'
|-CXXMethodDecl 0x556302ff6888 <line:312:5, line:314:5> line:312:8 used get 'IPRewriterEntry *() const'
|-CXXMethodDecl 0x556302ff6958 <line:317:5, line:319:5> line:317:8 used operator-> 'IPRewriterEntry *() const'
|-CXXMethodDecl 0x556302ff6ab8 <line:323:5, line:325:5> line:323:8 operator* 'IPRewriterEntry &() const'
|-CXXMethodDecl 0x556302ff6b68 <line:328:5, line:330:5> line:328:17 used live 'bool () const' inline
|-TypedefDecl 0x556302ff6cf8 <line:332:5, col:73> col:48 unspecified_bool_type 'IPRewriterEntry *(HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::*)() const'
| `-MemberPointerType 0x556302ff6c90 'IPRewriterEntry *(HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::*)() const'
|   |-RecordType 0x556302fda950 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|   | `-ClassTemplateSpecialization 0x556302fda850 'HashContainer_const_iterator'
|   `-ParenType 0x556302ff6c20 'IPRewriterEntry *() const' sugar
|     `-FunctionProtoType 0x556302ff6840 'IPRewriterEntry *() const' const cdecl
|       `-PointerType 0x556302ff67e0 'IPRewriterEntry *'
|         `-SubstTemplateTypeParmType 0x556302ff6350 'IPRewriterEntry' sugar
|           |-TemplateTypeParmType 0x556302f4a9a0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x556302f4a948 'T'
|           `-RecordType 0x556302fa43b0 'IPRewriterEntry'
|             `-CXXRecord 0x556302fa7c20 'IPRewriterEntry'
|-CXXConversionDecl 0x556302ff6e10 <line:334:5, line:336:5> line:334:12 operator IPRewriterEntry *(HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::*)() const 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x556302ff7068 <line:339:5, line:341:5> line:339:32 hashcontainer 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *() const'
|-CXXMethodDecl 0x556302ff7188 <line:344:5, line:346:5> line:344:23 bucket 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::bucket_count_type () const'
|-CXXMethodDecl 0x556302ff7238 <line:349:5, line:361:5> line:349:10 used operator++ 'void ()'
|-CXXMethodDecl 0x556302ff7378 <line:364:5, line:366:5> line:364:10 operator++ 'void (int)'
| `-ParmVarDecl 0x556302ff72e8 <col:21> col:24 'int'
|-AccessSpecDecl 0x556302ff7430 <line:368:3, col:10> col:3 private
|-FieldDecl 0x556302ff7468 <line:370:5, col:8> col:8 referenced _element 'IPRewriterEntry *'
|-FieldDecl 0x556302ff7500 <line:371:5, col:9> col:9 referenced _pprev 'IPRewriterEntry **'
|-FieldDecl 0x556302ff7560 <line:372:5, col:23> col:23 referenced _bucket 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::bucket_count_type':'unsigned int'
|-FieldDecl 0x556302ff76a8 <line:373:5, col:32> col:32 referenced _hc 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *'
|-CXXConstructorDecl 0x556302ff7908 <line:375:5, line:385:5> line:375:12 HashContainer_const_iterator 'void (const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *)' inline
| `-ParmVarDecl 0x556302ff77f8 <col:41, col:68> col:68 hc 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *'
|-CXXConstructorDecl 0x556302ff7d98 <line:387:5, line:390:5> line:387:12 HashContainer_const_iterator 'void (const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *, HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::bucket_count_type, IPRewriterEntry **, IPRewriterEntry *)' inline
| |-ParmVarDecl 0x556302ff7ac8 <col:41, col:68> col:68 hc 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *'
| |-ParmVarDecl 0x556302ff7b40 <col:72, col:90> col:90 b 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::bucket_count_type':'unsigned int'
| |-ParmVarDecl 0x556302ff7bc0 <col:93, col:97> col:97 pprev 'IPRewriterEntry **'
| `-ParmVarDecl 0x556302ff7c38 <col:104, col:107> col:107 element 'IPRewriterEntry *'
|-FriendDecl 0x556302ff7f78 <line:392:5, col:36> col:12 'class HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|-FriendDecl 0x556302ff80c8 <line:393:5, col:45> col:12 'class HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|-CXXDestructorDecl 0x556302ff91c0 <line:302:7> col:7 implicit ~HashContainer_const_iterator 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x556302ff92f8 <col:7> col:7 implicit constexpr HashContainer_const_iterator 'void (const HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &)' inline default trivial noexcept-unevaluated 0x556302ff92f8
| `-ParmVarDecl 0x556302ff9408 <col:7> col:7 'const HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &'
|-CXXConstructorDecl 0x556302ff94a8 <col:7> col:7 implicit used constexpr HashContainer_const_iterator 'void (HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&) noexcept' inline default trivial
| |-ParmVarDecl 0x556302ff95b8 <col:7> col:7 used 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&'
| |-CXXCtorInitializer Field 0x556302ff7468 '_element' 'IPRewriterEntry *'
| | `-ImplicitCastExpr 0x556302ff9b58 <col:7> 'IPRewriterEntry *' <LValueToRValue>
| |   `-MemberExpr 0x556302ff9b10 <col:7> 'IPRewriterEntry *' xvalue ._element 0x556302ff7468
| |     `-CXXStaticCastExpr 0x556302ff9ae0 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' xvalue static_cast<class HashContainer_const_iterator<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > &&> <NoOp>
| |       `-DeclRefExpr 0x556302ff9ab0 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' lvalue ParmVar 0x556302ff95b8 '' 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&'
| |-CXXCtorInitializer Field 0x556302ff7500 '_pprev' 'IPRewriterEntry **'
| | `-ImplicitCastExpr 0x556302ff9c40 <col:7> 'IPRewriterEntry **' <LValueToRValue>
| |   `-MemberExpr 0x556302ff9bf8 <col:7> 'IPRewriterEntry **' xvalue ._pprev 0x556302ff7500
| |     `-CXXStaticCastExpr 0x556302ff9bc8 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' xvalue static_cast<class HashContainer_const_iterator<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > &&> <NoOp>
| |       `-DeclRefExpr 0x556302ff9b98 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' lvalue ParmVar 0x556302ff95b8 '' 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&'
| |-CXXCtorInitializer Field 0x556302ff7560 '_bucket' 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::bucket_count_type':'unsigned int'
| | `-ImplicitCastExpr 0x556302ff9d28 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::bucket_count_type':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x556302ff9ce0 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::bucket_count_type':'unsigned int' xvalue ._bucket 0x556302ff7560
| |     `-CXXStaticCastExpr 0x556302ff9cb0 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' xvalue static_cast<class HashContainer_const_iterator<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > &&> <NoOp>
| |       `-DeclRefExpr 0x556302ff9c80 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' lvalue ParmVar 0x556302ff95b8 '' 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&'
| |-CXXCtorInitializer Field 0x556302ff76a8 '_hc' 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *'
| | `-ImplicitCastExpr 0x556302ff9e10 <col:7> 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *' <LValueToRValue>
| |   `-MemberExpr 0x556302ff9dc8 <col:7> 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *' xvalue ._hc 0x556302ff76a8
| |     `-CXXStaticCastExpr 0x556302ff9d98 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' xvalue static_cast<class HashContainer_const_iterator<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > &&> <NoOp>
| |       `-DeclRefExpr 0x556302ff9d68 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' lvalue ParmVar 0x556302ff95b8 '' 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&'
| `-CompoundStmt 0x556302ff9e70 <col:7>
|-CXXMethodDecl 0x556302ffa8b8 <col:7> col:7 implicit operator= 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &(const HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &)' inline default trivial noexcept-unevaluated 0x556302ffa8b8
| `-ParmVarDecl 0x556302ffa9c8 <col:7> col:7 'const HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &'
`-CXXMethodDecl 0x556302ffaa38 <col:7> col:7 implicit used operator= 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &(HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&) noexcept' inline default trivial
  |-ParmVarDecl 0x556302ffab48 <col:7> col:7 used 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&'
  `-CompoundStmt 0x556302ffb840 <col:7>
    |-BinaryOperator 0x556302ffb4d0 <col:7> 'IPRewriterEntry *' lvalue '='
    | |-MemberExpr 0x556302ffb488 <col:7> 'IPRewriterEntry *' lvalue ->_element 0x556302ff7468
    | | `-CXXThisExpr 0x556302ffb478 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *' this
    | `-ImplicitCastExpr 0x556302ffb4b8 <col:7> 'IPRewriterEntry *' <LValueToRValue>
    |   `-MemberExpr 0x556302ffb448 <col:7> 'IPRewriterEntry *' xvalue ._element 0x556302ff7468
    |     `-CXXStaticCastExpr 0x556302ffb418 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' xvalue static_cast<class HashContainer_const_iterator<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > &&> <NoOp>
    |       `-DeclRefExpr 0x556302ffb3e8 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' lvalue ParmVar 0x556302ffab48 '' 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&'
    |-BinaryOperator 0x556302ffb5d8 <col:7> 'IPRewriterEntry **' lvalue '='
    | |-MemberExpr 0x556302ffb590 <col:7> 'IPRewriterEntry **' lvalue ->_pprev 0x556302ff7500
    | | `-CXXThisExpr 0x556302ffb580 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *' this
    | `-ImplicitCastExpr 0x556302ffb5c0 <col:7> 'IPRewriterEntry **' <LValueToRValue>
    |   `-MemberExpr 0x556302ffb550 <col:7> 'IPRewriterEntry **' xvalue ._pprev 0x556302ff7500
    |     `-CXXStaticCastExpr 0x556302ffb520 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' xvalue static_cast<class HashContainer_const_iterator<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > &&> <NoOp>
    |       `-DeclRefExpr 0x556302ffb4f0 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' lvalue ParmVar 0x556302ffab48 '' 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&'
    |-BinaryOperator 0x556302ffb6e0 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::bucket_count_type':'unsigned int' lvalue '='
    | |-MemberExpr 0x556302ffb698 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::bucket_count_type':'unsigned int' lvalue ->_bucket 0x556302ff7560
    | | `-CXXThisExpr 0x556302ffb688 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *' this
    | `-ImplicitCastExpr 0x556302ffb6c8 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::bucket_count_type':'unsigned int' <LValueToRValue>
    |   `-MemberExpr 0x556302ffb658 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::bucket_count_type':'unsigned int' xvalue ._bucket 0x556302ff7560
    |     `-CXXStaticCastExpr 0x556302ffb628 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' xvalue static_cast<class HashContainer_const_iterator<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > &&> <NoOp>
    |       `-DeclRefExpr 0x556302ffb5f8 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' lvalue ParmVar 0x556302ffab48 '' 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&'
    |-BinaryOperator 0x556302ffb7e8 <col:7> 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *' lvalue '='
    | |-MemberExpr 0x556302ffb7a0 <col:7> 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *' lvalue ->_hc 0x556302ff76a8
    | | `-CXXThisExpr 0x556302ffb790 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *' this
    | `-ImplicitCastExpr 0x556302ffb7d0 <col:7> 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *' <LValueToRValue>
    |   `-MemberExpr 0x556302ffb760 <col:7> 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *' xvalue ._hc 0x556302ff76a8
    |     `-CXXStaticCastExpr 0x556302ffb730 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' xvalue static_cast<class HashContainer_const_iterator<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > &&> <NoOp>
    |       `-DeclRefExpr 0x556302ffb700 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' lvalue ParmVar 0x556302ffab48 '' 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&'
    `-ReturnStmt 0x556302ffb830 <col:7>
      `-UnaryOperator 0x556302ffb818 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x556302ffb808 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *' this

Layout: <CGRecordLayout
  LLVMType:%class.HashContainer_const_iterator = type { %class.IPRewriterEntry*, %class.IPRewriterEntry**, i32, %class.HashContainer* }
  NonVirtualBaseLLVMType:%class.HashContainer_const_iterator = type { %class.IPRewriterEntry*, %class.IPRewriterEntry**, i32, %class.HashContainer* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x556302fdaa88 <../dummy_inc/click/hashcontainer.hh:15:1, col:69> line:400:7 class HashContainer_iterator definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-public 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|-TemplateArgument type 'IPRewriterEntry'
|-TemplateArgument type 'HashContainer_adapter<IPRewriterEntry>'
|-CXXRecordDecl 0x556302ff8150 prev 0x556302fdaa88 <col:1, col:7> col:7 implicit class HashContainer_iterator
|-AccessSpecDecl 0x556302ff81e0 <col:76, col:82> col:76 public
|-TypedefDecl 0x556302ff82d0 <line:402:5, col:48> col:48 inherited 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
| `-TemplateSpecializationType 0x556302ff8230 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' sugar HashContainer_const_iterator
|   |-TemplateArgument type 'IPRewriterEntry':'IPRewriterEntry'
|   |-TemplateArgument type 'HashContainer_adapter<IPRewriterEntry>':'HashContainer_adapter<IPRewriterEntry>'
|   `-RecordType 0x556302fda950 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|     `-ClassTemplateSpecialization 0x556302fda850 'HashContainer_const_iterator'
|-CXXConstructorDecl 0x556302ff8360 <line:405:5, line:406:5> line:405:5 HashContainer_iterator 'void ()'
|-CXXMethodDecl 0x556302ff8418 <line:414:5, line:416:5> line:414:10 can_insert 'bool () const'
|-CXXMethodDecl 0x556302ff8638 <line:419:5, line:421:5> line:419:26 hashcontainer 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *() const'
|-AccessSpecDecl 0x556302ff86e8 <line:423:3, col:10> col:3 private
|-CXXConstructorDecl 0x556302ff8918 <line:425:5, line:427:5> line:425:12 HashContainer_iterator 'void (HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *)' inline
| `-ParmVarDecl 0x556302ff8808 <col:35, col:56> col:56 hc 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *'
|-CXXConstructorDecl 0x556302ff8ea8 <line:429:5, line:431:5> line:429:12 HashContainer_iterator 'void (HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *, typename inherited::bucket_count_type, IPRewriterEntry **, IPRewriterEntry *)' inline
| |-ParmVarDecl 0x556302ff8ad8 <col:35, col:56> col:56 hc 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *'
| |-ParmVarDecl 0x556302ff8bf0 <col:60, col:98> col:98 b 'typename inherited::bucket_count_type':'unsigned int'
| |-ParmVarDecl 0x556302ff8cd0 <col:101, col:105> col:105 pprev 'IPRewriterEntry **'
| `-ParmVarDecl 0x556302ff8d48 <col:112, col:115> col:115 element 'IPRewriterEntry *'
|-FriendDecl 0x556302ff9088 <line:433:5, col:36> col:12 'class HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|-CXXDestructorDecl 0x556302ff90e0 <line:400:7> col:7 implicit referenced ~HashContainer_iterator 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x556302ff9628 <col:7> col:7 implicit constexpr HashContainer_iterator 'void (const HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &)' inline default trivial noexcept-unevaluated 0x556302ff9628
| `-ParmVarDecl 0x556302ff9738 <col:7> col:7 'const HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &'
|-CXXConstructorDecl 0x556302ff97d8 <col:7> col:7 implicit used constexpr HashContainer_iterator 'void (HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&) noexcept' inline default trivial
| |-ParmVarDecl 0x556302ff98e8 <col:7> col:7 used 'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&'
| |-CXXCtorInitializer 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
| | `-CXXConstructExpr 0x556302ff9e80 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' 'void (HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&) noexcept'
| |   `-ImplicitCastExpr 0x556302ff9a90 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' xvalue <UncheckedDerivedToBase (HashContainer_const_iterator)>
| |     `-CXXStaticCastExpr 0x556302ff9a60 <col:7> 'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' xvalue static_cast<class HashContainer_iterator<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > &&> <NoOp>
| |       `-DeclRefExpr 0x556302ff9a30 <col:7> 'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' lvalue ParmVar 0x556302ff98e8 '' 'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&'
| `-CompoundStmt 0x556302ff9f48 <col:7>
|-CXXMethodDecl 0x556302ffa708 <col:7> col:7 implicit operator= 'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &(const HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &)' inline default trivial noexcept-unevaluated 0x556302ffa708
| `-ParmVarDecl 0x556302ffa818 <col:7> col:7 'const HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &'
`-CXXMethodDecl 0x556302ffabb8 <col:7> col:7 implicit used operator= 'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &(HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&) noexcept' inline default trivial
  |-ParmVarDecl 0x556302ffacc8 <col:7> col:7 used 'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&'
  `-CompoundStmt 0x556302ffb8d8 <col:7>
    |-CXXMemberCallExpr 0x556302ffb878 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' lvalue
    | |-MemberExpr 0x556302ffb370 <col:7> '<bound member function type>' .operator= 0x556302ffaa38
    | | `-ImplicitCastExpr 0x556302ffb2a0 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' lvalue <UncheckedDerivedToBase (HashContainer_const_iterator)>
    | |   `-UnaryOperator 0x556302ffb288 <col:7> 'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' lvalue prefix '*' cannot overflow
    | |     `-CXXThisExpr 0x556302ffb278 <col:7> 'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *' this
    | `-ImplicitCastExpr 0x556302ffb350 <col:7> 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' xvalue <UncheckedDerivedToBase (HashContainer_const_iterator)>
    |   `-DeclRefExpr 0x556302ffb330 <col:7> 'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' lvalue ParmVar 0x556302ffacc8 '' 'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &&'
    `-ReturnStmt 0x556302ffb8c8 <col:7>
      `-UnaryOperator 0x556302ffb8b0 <col:7> 'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x556302ffb8a0 <col:7> 'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > *' this

Layout: <CGRecordLayout
  LLVMType:%class.HashContainer_iterator = type { %class.HashContainer_const_iterator }
  NonVirtualBaseLLVMType:%class.HashContainer_iterator = type { %class.HashContainer_const_iterator }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct char_array<8>
         0 |   char [8] x
           | [sizeof=8, dsize=8, align=1,
           |  nvsize=8, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x556302fc6280 <../dummy_inc/click/type_traits.hh:165:1, line:167:1> line:165:28 struct char_array definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument integral 8
|-PackedAttr 0x55630317cc60 <line:167:18>
|-CXXRecordDecl 0x55630317cd20 prev 0x556302fc6280 <line:165:21, col:28> col:28 implicit struct char_array
`-FieldDecl 0x55630317ce30 <line:166:5, col:13> col:10 x 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%struct.char_array.2 = type { [8 x i8] }
  NonVirtualBaseLLVMType:%struct.char_array.2 = type { [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct char_array<56>
         0 |   char [56] x
           | [sizeof=56, dsize=56, align=1,
           |  nvsize=56, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x556302fe2160 <../dummy_inc/click/type_traits.hh:165:1, line:167:1> line:165:28 struct char_array definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument integral 56
|-PackedAttr 0x5563031a5278 <line:167:18>
|-CXXRecordDecl 0x5563031a5338 prev 0x556302fe2160 <line:165:21, col:28> col:28 implicit struct char_array
`-FieldDecl 0x5563031a5448 <line:166:5, col:13> col:10 x 'char [56]'

Layout: <CGRecordLayout
  LLVMType:%struct.char_array = type { [56 x i8] }
  NonVirtualBaseLLVMType:%struct.char_array = type { [56 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5563030b94c0 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5563030b95d8 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x5563030b9668 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x5563030b98a8 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x5563030b96a0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x5563030b9720 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x5563030b9798 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5563030b9ac0 <col:81> 'const ArgContext' lvalue Var 0x556303098328 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x5563030b9a00 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x5563030b9970 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x5563030b9c18 <col:35, line:1261:5>
|   `-ReturnStmt 0x5563030b9c08 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x5563030b9bf0 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x5563030b9bc0 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5563030b9ba8 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x5563030b9b80 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x5563030b9b60 <col:16, col:24> 'String' (CXXTemporary 0x5563030b9b60)
|               `-CXXConstructExpr 0x5563030b9b28 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x5563030b9b10 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x5563030b9af0 <col:23> 'bool' lvalue ParmVar 0x5563030b9970 'x' 'bool'
|-CXXConstructorDecl 0x556303193878 <line:1257:7> col:7 implicit constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x556303193950 <col:7> col:7 implicit ~BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x556303193a88 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x556303193a88
| `-ParmVarDecl 0x556303193b98 <col:7> col:7 'const BoolArg &'
`-CXXConstructorDecl 0x556303193c38 <col:7> col:7 implicit used constexpr BoolArg 'void (BoolArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x556303193d48 <col:7> col:7 'BoolArg &&'
  `-CompoundStmt 0x5563031949a0 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5563030b9c58 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x5563030b9eb8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x556303193788 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x556303193db8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x556303193db8
| `-ParmVarDecl 0x556303193ec8 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x556303193f68 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x556303194078 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x5563031949b0 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x556303194980 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x556303194950 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x556303194920 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x556303194078 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x556303194a20 <col:19>
`-CXXDestructorDecl 0x556303194118 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
