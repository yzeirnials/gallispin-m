
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | struct StringAccum::rep_t
         0 |   unsigned char * s
         8 |   int len
        12 |   int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cfe6055b58 prev 0x55cfe604d338 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55cfe6055c50 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55cfe6055ce0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55cfe6055d58 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55cfe6055e18 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55cfe6055ee0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55cfe6056058 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55cfe6055f90 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55cfe6056100 <col:24>
| `-OptimizeNoneAttr 0x55cfe6056158 <col:34>
|-CXXMethodDecl 0x55cfe60561a0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55cfe6056458 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55cfe6056250 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55cfe60562c8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55cfe6056348 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55cfe6056510 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55cfe6056548 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55cfe60565b0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55cfe6056638 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55cfe6056958 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55cfe60566f0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55cfe6056768 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55cfe60567e0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55cfe6056860 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55cfe6056a70 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55cfe605e8e0 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55cfe605e8e0
| `-ParmVarDecl 0x55cfe605e9f8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55cfe605ea98 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55cfe605ea98
| `-ParmVarDecl 0x55cfe605eba8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55cfe6167c50 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cfe6045120 prev 0x55cfe6044ea0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55cfe6045218 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55cfe60452a8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55cfe6045308 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55cfe60453f8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55cfe60454f8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55cfe60456c8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55cfe6045578 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55cfe60455f0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55cfe6049288 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55cfe60491c0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55cfe6049330 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55cfe6049468 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55cfe60493a0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55cfe6049608 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55cfe6049548 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55cfe60497a8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55cfe60496e8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55cfe6049850 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55cfe6049950 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55cfe6049a30 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe6049930 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55cfe6049910 <col:26> 'int' 1
| `-EnumConstantDecl 0x55cfe60499e0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55cfe6049a48 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55cfe60499c0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55cfe60499a0 <col:44> 'int' 2
|-CXXMethodDecl 0x55cfe6049b90 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55cfe6049a78 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55cfe6049af8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55cfe6049ce8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55cfe6049c58 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55cfe6049f28 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55cfe6049da8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55cfe6049e20 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55cfe6049fd8 <col:20>
| `-OptimizeNoneAttr 0x55cfe604a030 <col:30>
|-CXXMethodDecl 0x55cfe604a138 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55cfe604a070 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55cfe604a1e0 <col:20>
| `-OptimizeNoneAttr 0x55cfe604a238 <col:30>
|-CXXMethodDecl 0x55cfe604a288 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55cfe604a350 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55cfe604a468 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55cfe604a4f0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55cfe604a578 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55cfe604a600 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x55cfe604a688 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55cfe604a718 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55cfe604a7d8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55cfe604a860 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55cfe604a8e8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55cfe604a970 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55cfe604a9f8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55cfe604aa80 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55cfe604ab10 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55cfe604abd0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55cfe604ac60 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55cfe604adb0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55cfe604ad18 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55cfe604af40 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55cfe604ae70 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55cfe604b1e0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55cfe604aff8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55cfe604b078 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55cfe604b0f8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55cfe604b298 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55cfe604b3a0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55cfe604b630 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe604b380 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55cfe604b360 <col:33> 'int' 0
| |-EnumConstantDecl 0x55cfe604b430 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55cfe604b648 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe604b410 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55cfe604b3f0 <col:32> 'int' 20
| |-EnumConstantDecl 0x55cfe604b4c0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55cfe604b660 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe604b4a0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55cfe604b480 <col:38> 'int' 90
| |-EnumConstantDecl 0x55cfe604b550 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55cfe604b678 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe604b530 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55cfe604b510 <col:35> 'int' 100
| `-EnumConstantDecl 0x55cfe604b5e0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55cfe604b690 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55cfe604b5c0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55cfe604b5a0 <col:32> 'int' 2000
|-CXXMethodDecl 0x55cfe604b6d0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55cfe604bb10 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55cfe604b980 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55cfe604b9f8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55cfe604bbe0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55cfe604bd60 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55cfe604bc90 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55cfe604bf68 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55cfe604be18 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55cfe604be90 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55cfe604c068 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55cfe604c108 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55cfe604c1d0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55cfe604c260 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55cfe604c490 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe604c240 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55cfe604c220 <col:36> 'int' EnumConstant 0x55cfe604c1d0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55cfe604c2b0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55cfe604c300 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55cfe604c350 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55cfe604c3a0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55cfe604c3f0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55cfe604c440 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55cfe604c578 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55cfe604c4b8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55cfe604c640 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55cfe604c700 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55cfe604c7c0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55cfe604c880 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55cfe604c998 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55cfe604ca60 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55cfe604cbe0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55cfe604cb10 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55cfe604cd08 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55cfe604cf08 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55cfe604cdb8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55cfe604ce38 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55cfe605ad98 <col:54, line:127:5>
|   |-ParenExpr 0x55cfe605ac48 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55cfe605ac18 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55cfe605a908 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55cfe605a8e0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55cfe605a8c8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55cfe605a8b0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55cfe605a880 <col:31> 'Router *' lvalue ->_router 0x55cfe6057220
|   |   |         `-CXXThisExpr 0x55cfe605a870 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55cfe605a968 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55cfe605a948 <col:48> 'int' 0
|   |   `-CallExpr 0x55cfe605ab78 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55cfe605ab60 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55cfe605ab40 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55cfe5b7e370 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55cfe605abb8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cfe605a9d8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55cfe605abd0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cfe605a9f8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55cfe605abe8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55cfe605aa30 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55cfe605ac00 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55cfe605ab28 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55cfe605ab10 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55cfe605aac8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55cfe605ace0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55cfe605ac78 <col:9> 'Router *' lvalue ->_router 0x55cfe6057220
|   | | `-CXXThisExpr 0x55cfe605ac68 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55cfe605acc8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55cfe605aca8 <col:19> 'Router *' lvalue ParmVar 0x55cfe604cdb8 'r' 'Router *'
|   `-BinaryOperator 0x55cfe605ad78 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55cfe605ad10 <col:9> 'int' lvalue ->_eindex 0x55cfe6057288
|     | `-CXXThisExpr 0x55cfe605ad00 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55cfe605ad60 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55cfe605ad40 <col:19> 'int' lvalue ParmVar 0x55cfe604ce38 'eindex' 'int'
|-CXXMethodDecl 0x55cfe604d090 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55cfe604cfc8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55cfe604d1d0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55cfe604d298 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55cfe604d338 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55cfe604d588 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55cfe604d400 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55cfe604d480 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55cfe604d638 <col:20>
| `-OptimizeNoneAttr 0x55cfe604d690 <col:30>
|-CXXMethodDecl 0x55cfe604d798 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55cfe604d6d0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55cfe604d840 <col:20>
| `-OptimizeNoneAttr 0x55cfe604d898 <col:30>
|-CXXMethodDecl 0x55cfe604d968 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55cfe604d8d8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55cfe604da10 <col:20>
| `-OptimizeNoneAttr 0x55cfe604da68 <col:30>
|-CXXMethodDecl 0x55cfe604dbf8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55cfe604daa0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55cfe604db20 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55cfe604dd88 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55cfe604dcc0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55cfe604ded8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55cfe604de48 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55cfe604e028 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55cfe604df98 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55cfe604e178 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55cfe604e0e8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55cfe604e438 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55cfe604e230 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55cfe604e2b0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55cfe604e358 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55cfe604e510 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55cfe604e5d0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55cfe604e8a0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55cfe604e750 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55cfe604e7c8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55cfe604e9c8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55cfe604eba0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55cfe604ea80 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55cfe604eb00 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55cfe604ed88 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55cfe604ec68 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55cfe604ece8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55cfe604f0f8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55cfe604ee48 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55cfe604eec0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55cfe604ef40 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55cfe6058e40 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55cfe6058e20 <col:106> 'int' 0
| `-ParmVarDecl 0x55cfe604efb8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55cfe6058e78 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55cfe6058e58 <col:126> 'int' 0
|-CXXMethodDecl 0x55cfe604f478 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55cfe604f1c8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55cfe604f240 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55cfe604f2c0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55cfe604f338 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55cfe6058eb0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55cfe6058e90 <col:114> 'int' 0
|-CXXMethodDecl 0x55cfe604f808 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55cfe604f550 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55cfe604f5c8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55cfe604f648 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55cfe6058ec8 <col:96> 'int' 0
| `-ParmVarDecl 0x55cfe604f6c0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55cfe6058f08 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55cfe6058ee8 <col:116> 'int' 0
|-CXXMethodDecl 0x55cfe604fb88 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55cfe604f8d8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55cfe604f950 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55cfe604f9d0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55cfe6058f40 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55cfe6058f20 <col:109> 'int' 0
| `-ParmVarDecl 0x55cfe604fa48 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55cfe6058f78 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55cfe6058f58 <col:129> 'int' 0
|-CXXMethodDecl 0x55cfe604ff08 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55cfe604fc58 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55cfe604fcd0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55cfe604fd50 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55cfe604fdc8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55cfe6058fb0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55cfe6058f90 <col:117> 'int' 0
|-CXXMethodDecl 0x55cfe6050298 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55cfe604ffe0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55cfe6050058 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55cfe60500d8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55cfe6058fc8 <col:99> 'int' 0
| `-ParmVarDecl 0x55cfe6050150 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55cfe6059008 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55cfe6058fe8 <col:119> 'int' 0
|-CXXMethodDecl 0x55cfe60506b8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55cfe6050368 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55cfe60503e8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55cfe6050460 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55cfe60504e0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55cfe6059040 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55cfe6059020 <col:108> 'int' 0
| `-ParmVarDecl 0x55cfe6050560 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55cfe6059078 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55cfe6059058 <col:141> 'int' 0
|-CXXMethodDecl 0x55cfe6050ad8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55cfe6050790 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55cfe6050810 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55cfe6050888 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55cfe6050908 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55cfe6050988 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55cfe6059090 <col:121> 'int' 0
|-CXXMethodDecl 0x55cfe6050f08 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55cfe6050bb8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55cfe6050c38 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55cfe6050cb0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55cfe6050d30 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55cfe60590b0 <col:98> 'int' 0
| `-ParmVarDecl 0x55cfe6050db0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55cfe60590d0 <col:123> 'int' 0
|-CXXMethodDecl 0x55cfe60511e0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55cfe6050fe0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55cfe6051060 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55cfe60510e0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55cfe60590f0 <col:80> 'int' 0
|-EnumDecl 0x55cfe6051298 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55cfe60513a0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55cfe6051630 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe6051380 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55cfe6051360 <col:42> 'int' 1
| |-EnumConstantDecl 0x55cfe6051430 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55cfe6051648 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe6051410 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55cfe60513f0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55cfe60514c0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55cfe6051660 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe60514a0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55cfe6051480 <col:44> 'int' 4
| |-EnumConstantDecl 0x55cfe6051550 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55cfe6051678 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe6051530 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55cfe6051510 <col:36> 'int' 7
| `-EnumConstantDecl 0x55cfe60515e0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55cfe6051690 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55cfe60515c0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55cfe60515a0 <col:34> 'int' 6
|-CXXMethodDecl 0x55cfe6051948 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55cfe60516b8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55cfe6051758 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55cfe60517d8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55cfe6051850 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55cfe60591a8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55cfe6059190 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55cfe6059178 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55cfe6059158 <col:98, col:105> 'String' (CXXTemporary 0x55cfe6059158)
|           `-CXXTemporaryObjectExpr 0x55cfe6059120 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55cfe6051be8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55cfe6051a18 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55cfe6051a90 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55cfe6051b08 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55cfe605a798 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55cfe605a780 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55cfe605a768 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55cfe605a748 <col:94, col:101> 'String' (CXXTemporary 0x55cfe605a748)
| |         `-CXXTemporaryObjectExpr 0x55cfe605a710 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55cfe605af80 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55cfe605aef8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55cfe605aec8 <col:9> '<bound member function type>' ->add_task_handlers 0x55cfe6051948
|     | `-CXXThisExpr 0x55cfe605aeb8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55cfe605af38 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55cfe605ae38 <col:27> 'Task *' lvalue ParmVar 0x55cfe6051a18 'task' 'Task *'
|     |-ImplicitCastExpr 0x55cfe605af50 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55cfe605ae58 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55cfe6051a90 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55cfe605af68 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55cfe605ae78 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55cfe60515e0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55cfe605ae98 <col:62> 'const String' lvalue ParmVar 0x55cfe6051b08 'prefix' 'const String &'
|-CXXMethodDecl 0x55cfe6051df8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55cfe6051cb0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55cfe6051d28 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55cfe605a848 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55cfe605a830 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55cfe605a818 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55cfe605a7f8 <col:70, col:77> 'String' (CXXTemporary 0x55cfe605a7f8)
| |         `-CXXTemporaryObjectExpr 0x55cfe605a7c0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55cfe605b158 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55cfe605b0d0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55cfe605b0a0 <col:9> '<bound member function type>' ->add_task_handlers 0x55cfe6051948
|     | `-CXXThisExpr 0x55cfe605b090 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55cfe605b110 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55cfe605b010 <col:27> 'Task *' lvalue ParmVar 0x55cfe6051cb0 'task' 'Task *'
|     |-ImplicitCastExpr 0x55cfe605b128 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55cfe605b030 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55cfe605b140 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55cfe605b050 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55cfe60515e0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55cfe605b070 <col:57> 'const String' lvalue ParmVar 0x55cfe6051d28 'prefix' 'const String &'
|-CXXMethodDecl 0x55cfe60520d8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55cfe6051ec0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55cfe6051f40 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55cfe6051fb8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55cfe6052388 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55cfe60521a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55cfe6052228 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55cfe60522a8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55cfe6052678 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55cfe6052458 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55cfe60524d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55cfe6052550 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55cfe6052928 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55cfe6052748 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55cfe60527c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55cfe6052848 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55cfe6052bd8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55cfe60529f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55cfe6052a78 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55cfe6052af8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55cfe6052e88 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55cfe6052ca8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55cfe6052d28 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55cfe6052da0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55cfe6053138 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55cfe6052f58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55cfe6052fd8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55cfe6053058 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55cfe60533e8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55cfe6053208 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55cfe6053288 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55cfe6053308 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55cfe60536c8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55cfe60534b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55cfe6053538 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55cfe60535e0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55cfe60539a8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55cfe6053798 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55cfe6053818 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55cfe60538c0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55cfe6053c10 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55cfe6053a78 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55cfe6053af8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55cfe6053b70 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55cfe6053eb8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55cfe6053ce0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55cfe6053d60 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55cfe6053dd8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55cfe6054168 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55cfe6053f88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55cfe6054008 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55cfe6054088 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55cfe6054418 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55cfe6054238 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55cfe60542b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55cfe6054330 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55cfe60546c8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55cfe60544e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55cfe6054568 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55cfe60545e0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55cfe6054998 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55cfe6054798 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55cfe6054818 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55cfe60548b8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55cfe6054cc8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55cfe6054a68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55cfe6054ae8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55cfe6054b60 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55cfe6054bd8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55cfe605a860 <col:93> 'bool' false
|-CXXMethodDecl 0x55cfe6054eb0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55cfe6054d98 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55cfe6054e18 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55cfe6055088 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55cfe6054f70 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55cfe6054ff0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55cfe6055398 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55cfe6055148 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55cfe60551f0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55cfe6055270 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55cfe60552e8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55cfe6055688 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55cfe6055468 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55cfe60554e0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55cfe6055560 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55cfe60555d8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55cfe60558c0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55cfe6055760 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55cfe60557e0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55cfe6055aa8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55cfe6055988 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55cfe6055a08 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55cfe6055b58 prev 0x55cfe604d338 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55cfe6055c50 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55cfe6055ce0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55cfe6055d58 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55cfe6055e18 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55cfe6055ee0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55cfe6056058 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55cfe6055f90 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55cfe6056100 <col:24>
| | `-OptimizeNoneAttr 0x55cfe6056158 <col:34>
| |-CXXMethodDecl 0x55cfe60561a0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55cfe6056458 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55cfe6056250 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55cfe60562c8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55cfe6056348 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55cfe6056510 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55cfe6056548 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55cfe60565b0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55cfe6056638 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55cfe6056958 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55cfe60566f0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55cfe6056768 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55cfe60567e0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55cfe6056860 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55cfe6056a70 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55cfe605e8e0 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55cfe605e8e0
| | `-ParmVarDecl 0x55cfe605e9f8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55cfe605ea98 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55cfe605ea98
| | `-ParmVarDecl 0x55cfe605eba8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55cfe6167c50 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55cfe6056ae8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55cfe6056b88 <col:38> "" ""
|-CXXMethodDecl 0x55cfe6056c18 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55cfe6056cb8 <col:44> "" ""
|-AccessSpecDecl 0x55cfe6056d28 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55cfe6056d50 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55cfe6056e50 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55cfe6056ea0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55cfe6056e30 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55cfe6056e10 <col:27> 'int' 4
|-FieldDecl 0x55cfe6056f58 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55cfe6057108 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55cfe60571c0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55cfe6057220 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55cfe6057288 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55cfe60573d8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55cfe6057318 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55cfe6057588 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55cfe6057498 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55cfe6057768 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55cfe6057648 <col:20> col:23 'int'
| `-ParmVarDecl 0x55cfe60576c8 <col:25> col:28 'int'
|-CXXMethodDecl 0x55cfe6057a10 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55cfe6057830 <col:23> col:26 'int'
| |-ParmVarDecl 0x55cfe60578b0 <col:28> col:31 'int'
| `-ParmVarDecl 0x55cfe6057928 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55cfe6057ac8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55cfe6057b90 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55cfe6057be0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55cfe6057c30 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55cfe6057e10 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55cfe6057cc0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55cfe6057d38 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55cfe60580b8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55cfe6057ed8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55cfe6057f58 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55cfe6057fd0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55cfe60582d8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55cfe6058188 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55cfe6058208 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55cfe6058610 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55cfe6058398 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55cfe6058418 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55cfe6058490 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55cfe6058510 <col:57> col:60 'int'
|-CXXMethodDecl 0x55cfe60587f8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55cfe60586e0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55cfe6058760 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55cfe6058948 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55cfe60588b8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55cfe6058cc8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55cfe6058a08 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55cfe6058a88 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55cfe6058b00 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55cfe6058b80 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55cfe6058de0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class IPAddress>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class ICMPError
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   class IPAddress _src_ip
       108 |     uint32_t _addr
       112 |   int _type
       116 |   int _code
       120 |   class Vector<class IPAddress> _bad_addrs
       120 |     class vector_memory<class sized_array_memory<4> > vm_
       120 |       vector_memory<class sized_array_memory<4> >::type * l_
       128 |       vector_memory::size_type n_
       132 |       vector_memory::size_type capacity_
       136 |   unsigned int _mtu
       140 |   unsigned int _pmtu
       144 |   _Bool _use_fix_anno
       148 |   int id
           | [sizeof=152, dsize=152, align=8,
           |  nvsize=152, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cfe5e49dc0 prev 0x55cfe5db2838 <../dummy_inc/click/ipaddress.hh:15:1, line:154:1> line:15:7 referenced class IPAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55cfe5e49eb8 <col:1, col:7> col:7 implicit referenced class IPAddress
|-AccessSpecDecl 0x55cfe5e49f48 <col:19, col:25> col:19 public
|-TypedefDecl 0x55cfe5e49f80 <line:17:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x55cfe5c375d0 'uninitialized_type'
|   `-CXXRecord 0x55cfe5c37538 'uninitialized_type'
|-CXXConstructorDecl 0x55cfe5e4a040 <line:20:5, line:22:5> line:20:12 used IPAddress 'void ()' inline
| |-CXXCtorInitializer Field 0x55cfe5e4c7c0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55cfe5e4c868 <line:21:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55cfe5e4c828 <col:10> 'int' 0
| `-CompoundStmt 0x55cfe5e4c8b0 <col:13, line:22:5>
|-CXXConstructorDecl 0x55cfe5e4a190 <line:25:5, line:27:5> line:25:12 used IPAddress 'void (unsigned int)' inline
| |-ParmVarDecl 0x55cfe5e4a100 <col:22, col:31> col:31 used x 'unsigned int'
| |-CXXCtorInitializer Field 0x55cfe5e4c7c0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55cfe5e4c900 <line:26:10> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x55cfe5e4c8c0 <col:10> 'unsigned int' lvalue ParmVar 0x55cfe5e4a100 'x' 'unsigned int'
| `-CompoundStmt 0x55cfe5e4c948 <col:13, line:27:5>
|-CXXConstructorDecl 0x55cfe5e4a2e8 <line:29:5, line:31:5> line:29:21 IPAddress 'void (int)' inline
| |-ParmVarDecl 0x55cfe5e4a258 <col:31, col:35> col:35 used x 'int'
| |-CXXCtorInitializer Field 0x55cfe5e4c7c0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55cfe5e4c9b0 <line:30:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55cfe5e4c998 <col:10> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x55cfe5e4c958 <col:10> 'int' lvalue ParmVar 0x55cfe5e4a258 'x' 'int'
| `-CompoundStmt 0x55cfe5e4c9f8 <col:13, line:31:5>
|-CXXConstructorDecl 0x55cfe5e4a440 <line:33:5, line:35:5> line:33:21 IPAddress 'void (unsigned long)' inline
| |-ParmVarDecl 0x55cfe5e4a3b0 <col:31, col:45> col:45 used x 'unsigned long'
| |-CXXCtorInitializer Field 0x55cfe5e4c7c0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55cfe5e4ca60 <line:34:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55cfe5e4ca48 <col:10> 'unsigned long' <LValueToRValue>
| |     `-DeclRefExpr 0x55cfe5e4ca08 <col:10> 'unsigned long' lvalue ParmVar 0x55cfe5e4a3b0 'x' 'unsigned long'
| `-CompoundStmt 0x55cfe5e4caa8 <col:13, line:35:5>
|-CXXConstructorDecl 0x55cfe5e4a598 <line:37:5, line:39:5> line:37:21 IPAddress 'void (long)' inline
| |-ParmVarDecl 0x55cfe5e4a508 <col:31, col:36> col:36 used x 'long'
| |-CXXCtorInitializer Field 0x55cfe5e4c7c0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55cfe5e4cb10 <line:38:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55cfe5e4caf8 <col:10> 'long' <LValueToRValue>
| |     `-DeclRefExpr 0x55cfe5e4cab8 <col:10> 'long' lvalue ParmVar 0x55cfe5e4a508 'x' 'long'
| `-CompoundStmt 0x55cfe5e4cb58 <col:13, line:39:5>
|-CXXConstructorDecl 0x55cfe5e4a758 <line:42:5, line:44:5> line:42:12 IPAddress 'void (struct in_addr)' inline
| |-ParmVarDecl 0x55cfe5e4a668 <col:22, col:37> col:37 used x 'struct in_addr':'in_addr'
| |-CXXCtorInitializer Field 0x55cfe5e4c7c0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55cfe5e4cbd8 <line:43:10, col:12> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55cfe5e4cb88 <col:10, col:12> 'in_addr_t':'unsigned int' lvalue .s_addr 0x55cfe5d09210
| |     `-DeclRefExpr 0x55cfe5e4cb68 <col:10> 'struct in_addr':'in_addr' lvalue ParmVar 0x55cfe5e4a668 'x' 'struct in_addr':'in_addr'
| `-CompoundStmt 0x55cfe5e4cc20 <col:20, line:44:5>
|-CXXConstructorDecl 0x55cfe5e4a8e8 <line:50:5, line:56:5> line:50:14 IPAddress 'void (const unsigned char *)'
| |-ParmVarDecl 0x55cfe5e4a820 <col:24, col:45> col:45 used data 'const unsigned char *'
| `-CompoundStmt 0x55cfe5e4cd88 <col:51, line:56:5>
|   `-BinaryOperator 0x55cfe5e4cd68 <line:52:2, col:52> 'uint32_t':'unsigned int' lvalue '='
|     |-MemberExpr 0x55cfe5e4cc40 <col:2> 'uint32_t':'unsigned int' lvalue ->_addr 0x55cfe5e4c7c0
|     | `-CXXThisExpr 0x55cfe5e4cc30 <col:2> 'IPAddress *' implicit this
|     `-ImplicitCastExpr 0x55cfe5e4cd50 <col:10, col:52> 'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55cfe5e4cd38 <col:10, col:52> 'const unsigned int' lvalue prefix '*' cannot overflow
|         `-ParenExpr 0x55cfe5e4cd18 <col:11, col:52> 'const unsigned int *'
|           `-CXXReinterpretCastExpr 0x55cfe5e4cce8 <col:12, col:51> 'const unsigned int *' reinterpret_cast<const unsigned int *> <BitCast>
|             `-ImplicitCastExpr 0x55cfe5e4ccd0 <col:47> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|               `-DeclRefExpr 0x55cfe5e4cc70 <col:47> 'const unsigned char *' lvalue ParmVar 0x55cfe5e4a820 'data' 'const unsigned char *'
|-CXXConstructorDecl 0x55cfe5e4aa38 <line:63:5, col:39> col:14 IPAddress 'void (const String &)'
| `-ParmVarDecl 0x55cfe5e4a9a8 <col:24, col:38> col:38 x 'const String &'
|-CXXConstructorDecl 0x55cfe5e4abe8 <line:66:5, line:68:5> line:66:12 IPAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x55cfe5e4ab28 <col:22, col:48> col:48 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x55cfe5e4cdf8 <col:56, line:68:5>
|   `-CStyleCastExpr 0x55cfe5e4cdd0 <line:67:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x55cfe5e4cda0 <col:9> 'const uninitialized_type' lvalue ParmVar 0x55cfe5e4ab28 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x55cfe5e4ad78 <line:78:5, col:48> col:22 make_prefix 'IPAddress (int)' static
| `-ParmVarDecl 0x55cfe5e4acb0 <col:34, col:38> col:38 prefix_len 'int'
|-CXXMethodDecl 0x55cfe5e4ae68 <line:81:5, line:83:5> line:81:29 make_broadcast 'IPAddress ()' static inline
| `-CompoundStmt 0x55cfe5e4f998 <col:46, line:83:5>
|   `-ReturnStmt 0x55cfe5e4f988 <line:82:2, col:29>
|     `-ExprWithCleanups 0x55cfe5e4f970 <col:9, col:29> 'IPAddress'
|       `-CXXConstructExpr 0x55cfe5e4f940 <col:9, col:29> 'IPAddress' 'void (IPAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55cfe5e4f7f8 <col:9, col:29> 'IPAddress' xvalue
|           `-CXXFunctionalCastExpr 0x55cfe5e4f6e0 <col:9, col:29> 'IPAddress' functional cast to class IPAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x55cfe5e4f5c8 <col:9, col:29> 'IPAddress' 'void (unsigned int)'
|               `-IntegerLiteral 0x55cfe5e4ce20 <col:19> 'unsigned int' 4294967295
|-CXXMethodDecl 0x55cfe5e4af58 <line:86:5, line:88:5> line:86:17 empty 'bool () const' inline
| `-CompoundStmt 0x55cfe5e4fa48 <col:31, line:88:5>
|   `-ReturnStmt 0x55cfe5e4fa38 <line:87:2, col:10>
|     `-UnaryOperator 0x55cfe5e4fa20 <col:9, col:10> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x55cfe5e4fa08 <col:10> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x55cfe5e4f9f0 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x55cfe5e4f9c0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55cfe5e4c7c0
|             `-CXXThisExpr 0x55cfe5e4f9b0 <col:10> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x55cfe5e4b018 <line:91:5, line:93:5> line:91:21 used addr 'uint32_t () const' inline
| `-CompoundStmt 0x55cfe5e4fac8 <col:34, line:93:5>
|   `-ReturnStmt 0x55cfe5e4fab8 <line:92:2, col:9>
|     `-ImplicitCastExpr 0x55cfe5e4faa0 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55cfe5e4fa70 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55cfe5e4c7c0
|         `-CXXThisExpr 0x55cfe5e4fa60 <col:9> 'const IPAddress *' implicit this
|-CXXConversionDecl 0x55cfe5e4b0e8 <line:99:5, line:101:5> line:99:12 operator unsigned int 'uint32_t () const' inline
| `-CompoundStmt 0x55cfe5e4fb48 <col:38, line:101:5>
|   `-ReturnStmt 0x55cfe5e4fb38 <line:100:2, col:9>
|     `-ImplicitCastExpr 0x55cfe5e4fb20 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55cfe5e4faf0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55cfe5e4c7c0
|         `-CXXThisExpr 0x55cfe5e4fae0 <col:9> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x55cfe5e4b1b8 <line:106:5, line:108:5> line:106:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x55cfe5e4fe18 <col:38, line:108:5>
|   `-ReturnStmt 0x55cfe5e4fe08 <line:107:2, col:58>
|     `-BinaryOperator 0x55cfe5e4fde8 <col:9, col:58> 'bool' '=='
|       |-ParenExpr 0x55cfe5e4fd00 <col:9, col:36> 'unsigned int'
|       | `-BinaryOperator 0x55cfe5e4fce0 <col:10, col:35> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x55cfe5e4fcc8 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x55cfe5e4fb70 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55cfe5e4c7c0
|       |   |   `-CXXThisExpr 0x55cfe5e4fb60 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x55cfe5e4fca0 <col:18, col:35> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x55cfe5e4fc88 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55cfe5e4fc08 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x55cfe5d14708 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x55cfe5e4fbe8 <col:24> 'unsigned int' 4026531840
|       `-CallExpr 0x55cfe5e4fdc0 <col:41, col:58> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x55cfe5e4fda8 <col:41> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55cfe5e4fd88 <col:41> 'uint32_t (uint32_t) throw()' lvalue Function 0x55cfe5d14708 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x55cfe5e4fd68 <col:47> 'unsigned int' 3758096384
|-CXXMethodDecl 0x55cfe5e4b278 <line:110:5, line:112:5> line:110:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x55cfe5e50088 <col:39, line:112:5>
|   `-ReturnStmt 0x55cfe5e50078 <line:111:2, col:56>
|     `-BinaryOperator 0x55cfe5e50058 <col:9, col:56> 'bool' '=='
|       |-ParenExpr 0x55cfe5e4ff70 <col:9, col:35> 'unsigned int'
|       | `-BinaryOperator 0x55cfe5e4ff50 <col:10, col:34> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x55cfe5e4ff38 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x55cfe5e4fe40 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55cfe5e4c7c0
|       |   |   `-CXXThisExpr 0x55cfe5e4fe30 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x55cfe5e4ff10 <col:18, col:34> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x55cfe5e4fef8 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55cfe5e4fed8 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x55cfe5d14708 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x55cfe5e4feb8 <col:24> 'unsigned int' 4294901760
|       `-CallExpr 0x55cfe5e50030 <col:40, col:56> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x55cfe5e50018 <col:40> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55cfe5e4fff8 <col:40> 'uint32_t (uint32_t) throw()' lvalue Function 0x55cfe5d14708 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x55cfe5e4ffd8 <col:46> 'unsigned int' 2851995648
|-CXXMethodDecl 0x55cfe5e4b3a8 <line:114:5, col:37> col:27 used in_addr 'struct in_addr () const' inline
|-CXXConversionDecl 0x55cfe5e4b4b0 <line:115:5, col:38> col:12 operator in_addr 'struct in_addr () const' inline
|-CXXMethodDecl 0x55cfe5e4b5c0 <line:117:5, col:32> col:27 data 'unsigned char *()' inline
|-CXXMethodDecl 0x55cfe5e4b6b0 <line:118:5, col:40> col:33 data 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55cfe5e4b770 <line:120:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55cfe5e4b838 <line:122:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x55cfe5e4ba38 <line:123:5, col:64> col:17 matches_prefix 'bool (IPAddress, IPAddress) const' inline
| |-ParmVarDecl 0x55cfe5e4b8e8 <col:32, col:42> col:42 addr 'IPAddress'
| `-ParmVarDecl 0x55cfe5e4b960 <col:48, col:58> col:58 mask 'IPAddress'
|-CXXMethodDecl 0x55cfe5e4bbb8 <line:124:5, col:50> col:17 mask_as_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x55cfe5e4baf8 <col:34, col:44> col:44 mask 'IPAddress'
|-CXXMethodDecl 0x55cfe5e4bd00 <line:125:5, col:52> col:17 mask_more_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x55cfe5e4bc70 <col:36, col:46> col:46 mask 'IPAddress'
|-CXXMethodDecl 0x55cfe5e4bea8 <line:137:5, col:43> col:23 operator&= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55cfe5e4bdb8 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55cfe5e4bff0 <line:138:5, col:43> col:23 operator|= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55cfe5e4bf60 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55cfe5e4c138 <line:139:5, col:43> col:23 operator^= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55cfe5e4c0a8 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55cfe5e4c200 <line:141:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x55cfe5e4c2c0 <line:142:5, col:27> col:12 unparse_mask 'String () const'
|-CXXMethodDecl 0x55cfe5e4c438 <line:143:5, col:41> col:12 unparse_with_mask 'String (IPAddress) const'
| `-ParmVarDecl 0x55cfe5e4c370 <col:30> col:39 'IPAddress'
|-CXXMethodDecl 0x55cfe5e4c500 <line:145:5, col:23> col:19 s 'String () const' inline
|-CXXConversionDecl 0x55cfe5e4c5e8 <line:146:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x55cfe5e4c690 <col:51> "" ""
|-TypedefDecl 0x55cfe5e4c730 <line:148:5, col:23> col:23 parameter_type 'IPAddress'
| `-RecordType 0x55cfe5db28d0 'IPAddress'
|   `-CXXRecord 0x55cfe5e49dc0 'IPAddress'
|-AccessSpecDecl 0x55cfe5e4c788 <line:150:3, col:10> col:3 private
|-FieldDecl 0x55cfe5e4c7c0 <line:152:5, col:14> col:14 referenced _addr 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55cfe5e4ce68 <line:15:7> col:7 implicit constexpr IPAddress 'void (const IPAddress &)' inline default trivial noexcept-unevaluated 0x55cfe5e4ce68
| `-ParmVarDecl 0x55cfe5e4cf78 <col:7> col:7 'const IPAddress &'
|-CXXConstructorDecl 0x55cfe5e4d018 <col:7> col:7 implicit used constexpr IPAddress 'void (IPAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55cfe5e4d128 <col:7> col:7 used 'IPAddress &&'
| |-CXXCtorInitializer Field 0x55cfe5e4c7c0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55cfe5e4f8e8 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55cfe5e4f8a0 <col:7> 'uint32_t':'unsigned int' xvalue ._addr 0x55cfe5e4c7c0
| |     `-CXXStaticCastExpr 0x55cfe5e4f870 <col:7> 'IPAddress' xvalue static_cast<class IPAddress &&> <NoOp>
| |       `-DeclRefExpr 0x55cfe5e4f840 <col:7> 'IPAddress' lvalue ParmVar 0x55cfe5e4d128 '' 'IPAddress &&'
| `-CompoundStmt 0x55cfe5e4f930 <col:7>
`-CXXDestructorDecl 0x55cfe5e4f5f8 <col:7> col:7 implicit referenced ~IPAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddress = type { i32 }
  NonVirtualBaseLLVMType:%class.IPAddress = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55cfe60638d0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55cfe6063aa8 prev 0x55cfe60638d0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55cfe6063b38 <col:46, col:52> col:46 public
|-TypedefDecl 0x55cfe6063b60 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55cfe5ae1580 'int'
|-TypedefDecl 0x55cfe6065730 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55cfe60656e0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55cfe6064010 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55cfe6063f10 'type'
|     `-TemplateSpecializationType 0x55cfe6063ea0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55cfe6063d80 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55cfe6063d60 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55cfe6063d40 <col:24> 'unsigned long' 4
|       `-RecordType 0x55cfe6063e80 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55cfe6063da0 'char_array'
|-TypedefDecl 0x55cfe60657e8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55cfe60657b0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55cfe6065790 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55cfe6065730 'type'
|     `-ElaboratedType 0x55cfe60656e0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55cfe6064010 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55cfe6063f10 'type'
|         `-TemplateSpecializationType 0x55cfe6063ea0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55cfe6063d80 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55cfe6063d60 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55cfe6063d40 <col:24> 'unsigned long' 4
|           `-RecordType 0x55cfe6063e80 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55cfe6063da0 'char_array'
|-CXXMethodDecl 0x55cfe6065968 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55cfe6065878 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55cfe6065a58 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55cfe6065b38 <line:23:5, col:20> col:5 used ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55cfe6065e08 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55cfe6065d10 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55cfe6066048 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55cfe6065ec0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55cfe6065f38 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55cfe6066218 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55cfe6066108 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55cfe6066180 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55cfe6066378 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55cfe6066448 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55cfe6066730 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55cfe6066508 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55cfe6066580 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55cfe6066988 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55cfe6066800 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55cfe6066878 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55cfe6066b48 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55cfe6066a58 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55cfe6066d08 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55cfe6066c10 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55cfe6066dc0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55cfe6066e70 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55cfe60670a8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55cfe6066f20 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55cfe6066f98 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55cfe6067348 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55cfe6067250 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55cfe6067410 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55cfe6067460 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55cfe60674b0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55cfe5e5a358 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'IPAddress'
|-CXXRecordDecl 0x55cfe6062868 prev 0x55cfe5e5a358 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55cfe6063840 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<IPAddress>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55cfe60637f0 'typename array_memory<IPAddress>::type' sugar
|   `-TypedefType 0x55cfe60637d0 'conditional<true, sized_array_memory<4>, typed_array_memory<IPAddress> >::type' sugar
|     |-Typedef 0x55cfe6063680 'type'
|     `-SubstTemplateTypeParmType 0x55cfe60634a0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55cfe5daefe0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55cfe5daef88 'T'
|       `-RecordType 0x55cfe6062ff0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55cfe6062f08 'sized_array_memory'
|-FieldDecl 0x55cfe6067500 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<IPAddress>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55cfe6067550 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55cfe6067588 <line:118:5, col:15> col:15 value_type 'IPAddress':'IPAddress'
| `-SubstTemplateTypeParmType 0x55cfe6062900 'IPAddress' sugar
|   |-TemplateTypeParmType 0x55cfe5de8f70 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55cfe5de8f18 'T'
|   `-RecordType 0x55cfe5db28d0 'IPAddress'
|     `-CXXRecord 0x55cfe5e49dc0 'IPAddress'
|-TypedefDecl 0x55cfe6067618 <line:119:5, col:16> col:16 reference 'IPAddress &'
| `-LValueReferenceType 0x55cfe60675e0 'IPAddress &'
|   `-SubstTemplateTypeParmType 0x55cfe6062900 'IPAddress' sugar
|     |-TemplateTypeParmType 0x55cfe5de8f70 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55cfe5de8f18 'T'
|     `-RecordType 0x55cfe5db28d0 'IPAddress'
|       `-CXXRecord 0x55cfe5e49dc0 'IPAddress'
|-TypedefDecl 0x55cfe60676a8 <line:120:5, col:22> col:22 const_reference 'const IPAddress &'
| `-LValueReferenceType 0x55cfe6067670 'const IPAddress &'
|   `-QualType 0x55cfe6062901 'const IPAddress' const
|     `-SubstTemplateTypeParmType 0x55cfe6062900 'IPAddress' sugar
|       |-TemplateTypeParmType 0x55cfe5de8f70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55cfe5de8f18 'T'
|       `-RecordType 0x55cfe5db28d0 'IPAddress'
|         `-CXXRecord 0x55cfe5e49dc0 'IPAddress'
|-TypedefDecl 0x55cfe6067738 <line:121:5, col:16> col:16 pointer 'IPAddress *'
| `-PointerType 0x55cfe6067700 'IPAddress *'
|   `-SubstTemplateTypeParmType 0x55cfe6062900 'IPAddress' sugar
|     |-TemplateTypeParmType 0x55cfe5de8f70 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55cfe5de8f18 'T'
|     `-RecordType 0x55cfe5db28d0 'IPAddress'
|       `-CXXRecord 0x55cfe5e49dc0 'IPAddress'
|-TypedefDecl 0x55cfe60677c8 <line:122:5, col:22> col:22 const_pointer 'const IPAddress *'
| `-PointerType 0x55cfe6067790 'const IPAddress *'
|   `-QualType 0x55cfe6062901 'const IPAddress' const
|     `-SubstTemplateTypeParmType 0x55cfe6062900 'IPAddress' sugar
|       |-TemplateTypeParmType 0x55cfe5de8f70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55cfe5de8f18 'T'
|       `-RecordType 0x55cfe5db28d0 'IPAddress'
|         `-CXXRecord 0x55cfe5e49dc0 'IPAddress'
|-TypedefDecl 0x55cfe60685b0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<IPAddress>::type':'IPAddress'
| `-ElaboratedType 0x55cfe6068560 'typename fast_argument<IPAddress>::type' sugar
|   `-TypedefType 0x55cfe6068540 'fast_argument<IPAddress, false>::type' sugar
|     |-Typedef 0x55cfe60684d0 'type'
|     `-SubstTemplateTypeParmType 0x55cfe6068290 'IPAddress' sugar
|       |-TemplateTypeParmType 0x55cfe5dba860 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55cfe5dba810 'T'
|       `-RecordType 0x55cfe5db28d0 'IPAddress'
|         `-CXXRecord 0x55cfe5e49dc0 'IPAddress'
|-TypedefDecl 0x55cfe6068618 <line:126:5, col:22> col:22 const_access_type 'const IPAddress &'
| `-LValueReferenceType 0x55cfe6067670 'const IPAddress &'
|   `-QualType 0x55cfe6062901 'const IPAddress' const
|     `-SubstTemplateTypeParmType 0x55cfe6062900 'IPAddress' sugar
|       |-TemplateTypeParmType 0x55cfe5de8f70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55cfe5de8f18 'T'
|       `-RecordType 0x55cfe5db28d0 'IPAddress'
|         `-CXXRecord 0x55cfe5e49dc0 'IPAddress'
|-TypedefDecl 0x55cfe6068670 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55cfe5ae1580 'int'
|-TypedefDecl 0x55cfe60686d8 <line:130:5, col:16> col:16 iterator 'IPAddress *'
| `-PointerType 0x55cfe6067700 'IPAddress *'
|   `-SubstTemplateTypeParmType 0x55cfe6062900 'IPAddress' sugar
|     |-TemplateTypeParmType 0x55cfe5de8f70 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55cfe5de8f18 'T'
|     `-RecordType 0x55cfe5db28d0 'IPAddress'
|       `-CXXRecord 0x55cfe5e49dc0 'IPAddress'
|-TypedefDecl 0x55cfe6068740 <line:131:5, col:22> col:22 const_iterator 'const IPAddress *'
| `-PointerType 0x55cfe6067790 'const IPAddress *'
|   `-QualType 0x55cfe6062901 'const IPAddress' const
|     `-SubstTemplateTypeParmType 0x55cfe6062900 'IPAddress' sugar
|       |-TemplateTypeParmType 0x55cfe5de8f70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55cfe5de8f18 'T'
|       `-RecordType 0x55cfe5db28d0 'IPAddress'
|         `-CXXRecord 0x55cfe5e49dc0 'IPAddress'
|-EnumDecl 0x55cfe6068798 <line:134:5> col:5
| `-EnumConstantDecl 0x55cfe6068890 <col:12, col:40> col:12 RESERVE_GROW 'Vector<IPAddress>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55cfe6068870 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55cfe5dea1e8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55cfe5dea1c0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55cfe5dea1a0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55cfe6068918 <line:137:5, col:28> col:21 used Vector 'void ()' inline
|-CXXConstructorDecl 0x55cfe6068ba8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<IPAddress>::value_argument_type)' inline
| |-ParmVarDecl 0x55cfe60689d0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55cfe6068a70 <col:41, col:61> col:61 v 'Vector<IPAddress>::value_argument_type':'IPAddress'
|-CXXConstructorDecl 0x55cfe6068e68 <line:139:5, col:37> col:12 Vector 'void (const Vector<IPAddress> &)' inline
| `-ParmVarDecl 0x55cfe6068d50 <col:19, col:36> col:36 x 'const Vector<IPAddress> &'
|-CXXConstructorDecl 0x55cfe6069128 <line:141:5, col:32> col:12 Vector 'void (Vector<IPAddress> &&)' inline
| `-ParmVarDecl 0x55cfe6069010 <col:19, col:31> col:31 x 'Vector<IPAddress> &&'
|-CXXMethodDecl 0x55cfe6069440 <line:144:5, col:51> col:23 operator= 'Vector<IPAddress> &(const Vector<IPAddress> &)' inline
| `-ParmVarDecl 0x55cfe6069320 <col:33, col:50> col:50 x 'const Vector<IPAddress> &'
|-CXXMethodDecl 0x55cfe6069750 <line:146:5, col:46> col:23 operator= 'Vector<IPAddress> &(Vector<IPAddress> &&)' inline
| `-ParmVarDecl 0x55cfe6069630 <col:33, col:45> col:45 x 'Vector<IPAddress> &&'
|-CXXMethodDecl 0x55cfe6069a40 <line:148:5, col:70> col:23 assign 'Vector<IPAddress> &(Vector::size_type, Vector<IPAddress>::value_argument_type)' inline
| |-ParmVarDecl 0x55cfe6069888 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55cfe6069900 <col:43, col:69> col:63 v 'Vector<IPAddress>::value_argument_type':'IPAddress'
|-CXXMethodDecl 0x55cfe6069b98 <line:150:5, col:55> col:49 begin 'Vector<IPAddress>::iterator ()'
| |-NoInlineAttr 0x55cfe6069c78 <col:20> Inherited
| `-OptimizeNoneAttr 0x55cfe6069cd0 <col:30> Inherited
|-CXXMethodDecl 0x55cfe6069d18 <line:151:5, col:53> col:49 end 'Vector<IPAddress>::iterator ()'
| |-NoInlineAttr 0x55cfe6069dc8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55cfe6069e20 <col:30> Inherited
|-CXXMethodDecl 0x55cfe6069ee8 <line:152:5, col:63> col:55 begin 'Vector<IPAddress>::const_iterator () const'
| |-NoInlineAttr 0x55cfe6069f98 <col:20> Inherited
| `-OptimizeNoneAttr 0x55cfe6069ff0 <col:30> Inherited
|-CXXMethodDecl 0x55cfe606a038 <line:153:5, col:61> col:55 end 'Vector<IPAddress>::const_iterator () const'
| |-NoInlineAttr 0x55cfe606a0e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55cfe606a140 <col:30> Inherited
|-CXXMethodDecl 0x55cfe606a188 <line:154:5, col:64> col:55 cbegin 'Vector<IPAddress>::const_iterator () const'
| |-NoInlineAttr 0x55cfe606a238 <col:20> Inherited
| `-OptimizeNoneAttr 0x55cfe606a290 <col:30> Inherited
|-CXXMethodDecl 0x55cfe606a2d8 <line:155:5, col:62> col:55 cend 'Vector<IPAddress>::const_iterator () const'
| |-NoInlineAttr 0x55cfe606a388 <col:20> Inherited
| `-OptimizeNoneAttr 0x55cfe606a3e0 <col:30> Inherited
|-CXXMethodDecl 0x55cfe606a408 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55cfe606a4b8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55cfe606a568 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55cfe606a728 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<IPAddress>::value_argument_type)' inline
| |-ParmVarDecl 0x55cfe606a618 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55cfe606a690 <col:37, col:63> col:57 v 'Vector<IPAddress>::value_argument_type':'IPAddress'
|-CXXMethodDecl 0x55cfe606a878 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55cfe606a7e8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55cfe606aa28 <line:163:5, col:65> col:43 operator[] 'IPAddress &(Vector::size_type)'
| |-ParmVarDecl 0x55cfe606a930 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55cfe606aae0 <col:20>
| `-OptimizeNoneAttr 0x55cfe606ab38 <col:30>
|-CXXMethodDecl 0x55cfe606ac58 <line:164:5, col:73> col:49 operator[] 'const IPAddress &(Vector::size_type) const'
| |-ParmVarDecl 0x55cfe606ab60 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55cfe606ad10 <col:20>
| `-OptimizeNoneAttr 0x55cfe606ad68 <col:30>
|-CXXMethodDecl 0x55cfe606ae20 <line:165:5, col:29> col:15 at 'IPAddress &(Vector::size_type)' inline
| `-ParmVarDecl 0x55cfe606ad90 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55cfe606af68 <line:166:5, col:37> col:21 at 'const IPAddress &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55cfe606aed8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55cfe606b098 <line:167:5, col:21> col:15 front 'IPAddress &()' inline
|-CXXMethodDecl 0x55cfe606b1c8 <line:168:5, col:29> col:21 front 'const IPAddress &() const' inline
|-CXXMethodDecl 0x55cfe606b298 <line:169:5, col:20> col:15 back 'IPAddress &()' inline
|-CXXMethodDecl 0x55cfe606b368 <line:170:5, col:28> col:21 back 'const IPAddress &() const' inline
|-CXXMethodDecl 0x55cfe606b4a8 <line:172:5, col:39> col:15 unchecked_at 'IPAddress &(Vector::size_type)' inline
| `-ParmVarDecl 0x55cfe606b418 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55cfe606b5f0 <line:173:5, col:47> col:21 unchecked_at 'const IPAddress &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55cfe606b560 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55cfe606b738 <line:174:5, col:59> col:15 at_u 'IPAddress &(Vector::size_type)' inline
| |-ParmVarDecl 0x55cfe606b6a8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55cfe606b7f0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55cfe606b8f0 <line:175:5, col:71> col:21 at_u 'const IPAddress &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55cfe606b860 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55cfe606b9a8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55cfe606ba68 <line:177:5, col:20> col:15 data 'IPAddress *()' inline
|-CXXMethodDecl 0x55cfe606bb68 <line:178:5, col:28> col:21 data 'const IPAddress *() const' inline
|-CXXMethodDecl 0x55cfe606bce8 <line:180:5, col:48> col:17 push_back 'void (Vector<IPAddress>::value_argument_type)' inline
| `-ParmVarDecl 0x55cfe606bc28 <col:27, col:47> col:47 v 'Vector<IPAddress>::value_argument_type':'IPAddress'
|-FunctionTemplateDecl 0x55cfe606c4a8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55cfe606bda0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<IPAddress>':'fast_argument<IPAddress, false>'
| `-CXXMethodDecl 0x55cfe606c408 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (IPAddress &&)' inline
|   `-ParmVarDecl 0x55cfe606c308 <col:58, col:62> col:62 v 'IPAddress &&'
|-CXXMethodDecl 0x55cfe606c588 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55cfe606c6d8 <line:186:5, col:49> col:17 push_front 'void (Vector<IPAddress>::value_argument_type)' inline
| `-ParmVarDecl 0x55cfe606c648 <col:28, col:48> col:48 v 'Vector<IPAddress>::value_argument_type':'IPAddress'
|-CXXMethodDecl 0x55cfe606c790 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55cfe606c9d8 <line:189:5, col:62> col:21 insert 'Vector<IPAddress>::iterator (Vector<IPAddress>::iterator, Vector<IPAddress>::value_argument_type)' inline
| |-ParmVarDecl 0x55cfe606c850 <col:28, col:37> col:37 it 'Vector<IPAddress>::iterator':'IPAddress *'
| `-ParmVarDecl 0x55cfe606c8c8 <col:41, col:61> col:61 v 'Vector<IPAddress>::value_argument_type':'IPAddress'
|-CXXMethodDecl 0x55cfe606cb98 <line:190:5, col:38> col:21 erase 'Vector<IPAddress>::iterator (Vector<IPAddress>::iterator)' inline
| `-ParmVarDecl 0x55cfe606caa8 <col:27, col:36> col:36 it 'Vector<IPAddress>::iterator':'IPAddress *'
|-CXXMethodDecl 0x55cfe606cde8 <line:191:5, col:49> col:21 erase 'Vector<IPAddress>::iterator (Vector<IPAddress>::iterator, Vector<IPAddress>::iterator)' inline
| |-ParmVarDecl 0x55cfe606cc60 <col:27, col:36> col:36 a 'Vector<IPAddress>::iterator':'IPAddress *'
| `-ParmVarDecl 0x55cfe606ccd8 <col:39, col:48> col:48 b 'Vector<IPAddress>::iterator':'IPAddress *'
|-CXXMethodDecl 0x55cfe606cea8 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x55cfe606d108 <line:195:5, col:34> col:17 swap 'void (Vector<IPAddress> &)' inline
| `-ParmVarDecl 0x55cfe606d010 <col:22, col:33> col:33 x 'Vector<IPAddress> &'
`-CXXDestructorDecl 0x55cfe606d1d8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit used ~Vector 'void () noexcept' inline default
  `-CompoundStmt 0x55cfe6167c40 <col:29>

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cfe6061a48 <../elements/icmp/icmperror.hh:105:1, line:135:1> line:105:7 class ICMPError definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55cfe6061ba8 <col:1, col:7> col:7 implicit referenced class ICMPError
|-AccessSpecDecl 0x55cfe6061c38 <col:36, col:42> col:36 public
|-CXXConstructorDecl 0x55cfe6061cc0 <line:107:5, col:15> col:5 ICMPError 'void ()'
|-CXXDestructorDecl 0x55cfe6061db0 <line:108:5, col:16> col:5 ~ICMPError 'void ()' noexcept-unevaluated 0x55cfe6061db0
| `-Overrides: [ 0x55cfe60453f8 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55cfe6061ee0 <line:110:5, col:58> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x55cfe604a288 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55cfe606de78 <col:36, col:58>
|   `-ReturnStmt 0x55cfe606de68 <col:38, col:45>
|     `-ImplicitCastExpr 0x55cfe606de50 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55cfe606de28 <col:45> 'const char [10]' lvalue "ICMPError"
|-CXXMethodDecl 0x55cfe6061fa8 <line:111:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x55cfe604a350 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55cfe606ded8 <col:36, col:56>
|   `-ReturnStmt 0x55cfe606dec8 <col:38, col:45>
|     `-ImplicitCastExpr 0x55cfe606deb0 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55cfe606de90 <col:45> 'const char []' lvalue Var 0x55cfe604a600 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x55cfe6062280 <line:113:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55cfe604bb10 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55cfe6062130 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x55cfe60621a8 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x55cfe6062350 <line:114:5, col:54> col:10 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x55cfe604e5d0 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x55cfe606df10 <col:39, col:54>
|   `-ReturnStmt 0x55cfe606df00 <col:41, col:48>
|     `-CXXBoolLiteralExpr 0x55cfe606def0 <col:48> 'bool' true
|-CXXMethodDecl 0x55cfe6062410 <line:115:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x55cfe604bbe0 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x55cfe6062550 <line:117:5, col:35> col:13 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x55cfe6049468 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x55cfe60624c0 <col:27, col:34> col:35 'Packet *'
|-AccessSpecDecl 0x55cfe60625f8 <line:119:3, col:10> col:3 private
|-FieldDecl 0x55cfe6062630 <line:121:5, col:15> col:15 _src_ip 'IPAddress'
|-FieldDecl 0x55cfe6062698 <line:122:5, col:9> col:9 _type 'int'
|-FieldDecl 0x55cfe6062700 <line:123:5, col:9> col:9 _code 'int'
|-FieldDecl 0x55cfe606d2c0 <line:124:5, col:23> col:23 _bad_addrs 'Vector<IPAddress>':'Vector<IPAddress>'
|-FieldDecl 0x55cfe606d328 <line:125:5, col:14> col:14 _mtu 'unsigned int'
|-FieldDecl 0x55cfe606d390 <line:126:5, col:14> col:14 _pmtu 'unsigned int'
|-FieldDecl 0x55cfe606d3f0 <line:127:5, col:10> col:10 _use_fix_anno 'bool'
|-FieldDecl 0x55cfe606d458 <line:128:5, col:14> col:9 id 'int'
| `-IntegerLiteral 0x55cfe606de08 <col:14> 'int' 1
|-CXXMethodDecl 0x55cfe606d550 <line:130:5, col:34> col:17 is_error_type 'bool (int)' static
| `-ParmVarDecl 0x55cfe606d4c0 <col:31> col:34 'int'
|-CXXMethodDecl 0x55cfe606d708 <line:131:5, col:34> col:10 unicast 'bool (struct in_addr) const'
| `-ParmVarDecl 0x55cfe606d618 <col:18, col:25> col:32 'struct in_addr':'in_addr'
|-CXXMethodDecl 0x55cfe606d860 <line:132:5, col:39> col:10 valid_source 'bool (struct in_addr) const'
| `-ParmVarDecl 0x55cfe606d7d0 <col:23, col:30> col:37 'struct in_addr':'in_addr'
|-CXXMethodDecl 0x55cfe606da08 <line:133:5, col:64> col:27 valid_source_route 'const uint8_t *(const click_ip *)' static
| `-ParmVarDecl 0x55cfe606d918 <col:46, col:62> col:62 ip 'const click_ip *'
|-CXXConstructorDecl 0x55cfe606dad8 <line:105:7> col:7 implicit ICMPError 'void (const ICMPError &)' inline default_delete noexcept-unevaluated 0x55cfe606dad8
| `-ParmVarDecl 0x55cfe606dbe8 <col:7> col:7 'const ICMPError &'
`-CXXMethodDecl 0x55cfe606dc88 <col:7> col:7 implicit operator= 'ICMPError &(const ICMPError &)' inline default_delete noexcept-unevaluated 0x55cfe606dc88
  `-ParmVarDecl 0x55cfe606dd98 <col:7> col:7 'const ICMPError &'

Layout: <CGRecordLayout
  LLVMType:%class.ICMPError = type { %class.Element.base, %class.IPAddress, i32, i32, %class.Vector, i32, i32, i8, i32 }
  NonVirtualBaseLLVMType:%class.ICMPError = type { %class.Element.base, %class.IPAddress, i32, i32, %class.Vector, i32, i32, i8, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cfe5e206a0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55cfe5e207b8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55cfe5e20858 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55cfe5e208b8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55cfe5e20918 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55cfe5e209c8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cfe5e20cd0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55cfe5e20de8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55cfe5e20e90 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55cfe5e20ef8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55cfe5e20f88 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55cfe5e24fb0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55cfe5e253e8 <col:12>
|-CXXConstructorDecl 0x55cfe5e250b8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55cfe5e251c8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55cfe5e20e90 'data' 'const char *'
| | `-ImplicitCastExpr 0x55cfe5e29120 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55cfe5e290f0 <col:12> 'const char *const' lvalue .data 0x55cfe5e20e90
| |     `-DeclRefExpr 0x55cfe5e290d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55cfe5e251c8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55cfe5e20ef8 'length' 'int'
| | `-ImplicitCastExpr 0x55cfe5e291b0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55cfe5e29180 <col:12> 'const int' lvalue .length 0x55cfe5e20ef8
| |     `-DeclRefExpr 0x55cfe5e29160 <col:12> 'const String::rep_t' lvalue ParmVar 0x55cfe5e251c8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55cfe5e20f88 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55cfe5e29240 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55cfe5e29210 <col:12> 'String::memo_t *const' lvalue .memo 0x55cfe5e20f88
| |     `-DeclRefExpr 0x55cfe5e291f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55cfe5e251c8 '' 'const String::rep_t &'
| `-CompoundStmt 0x55cfe5e29298 <col:12>
|-CXXConstructorDecl 0x55cfe5e25268 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55cfe5e25268
| `-ParmVarDecl 0x55cfe5e25378 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55cfe5e2bfc0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55cfe5e36a18 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55cfe5e36b28 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55cfe5e37040 <col:12>
|   |-BinaryOperator 0x55cfe5e36e58 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55cfe5e36e10 <col:12> 'const char *' lvalue ->data 0x55cfe5e20e90
|   | | `-CXXThisExpr 0x55cfe5e36e00 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55cfe5e36e40 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55cfe5e36dd0 <col:12> 'const char *const' lvalue .data 0x55cfe5e20e90
|   |     `-DeclRefExpr 0x55cfe5e36db0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55cfe5e36b28 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55cfe5e36f20 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55cfe5e36ed8 <col:12> 'int' lvalue ->length 0x55cfe5e20ef8
|   | | `-CXXThisExpr 0x55cfe5e36ec8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55cfe5e36f08 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55cfe5e36e98 <col:12> 'const int' lvalue .length 0x55cfe5e20ef8
|   |     `-DeclRefExpr 0x55cfe5e36e78 <col:12> 'const String::rep_t' lvalue ParmVar 0x55cfe5e36b28 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55cfe5e36fe8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55cfe5e36fa0 <col:12> 'String::memo_t *' lvalue ->memo 0x55cfe5e20f88
|   | | `-CXXThisExpr 0x55cfe5e36f90 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55cfe5e36fd0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55cfe5e36f60 <col:12> 'String::memo_t *const' lvalue .memo 0x55cfe5e20f88
|   |     `-DeclRefExpr 0x55cfe5e36f40 <col:12> 'const String::rep_t' lvalue ParmVar 0x55cfe5e36b28 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55cfe5e37030 <col:12>
|     `-UnaryOperator 0x55cfe5e37018 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55cfe5e37008 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55cfe5e36b98 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55cfe5e36b98
  `-ParmVarDecl 0x55cfe5e36ca8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cfe5e17be0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55cfe5e17cf8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55cfe5e17d88 <col:16, col:22> col:16 public
|-TypedefDecl 0x55cfe5e17dc8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55cfe5ae1fd0 'const char *'
|   `-QualType 0x55cfe5ae1521 'const char' const
|     `-BuiltinType 0x55cfe5ae1520 'char'
|-TypedefDecl 0x55cfe5e17e50 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55cfe5e17e20 'String::const_iterator' sugar
|   |-Typedef 0x55cfe5e17dc8 'const_iterator'
|   `-PointerType 0x55cfe5ae1fd0 'const char *'
|     `-QualType 0x55cfe5ae1521 'const char' const
|       `-BuiltinType 0x55cfe5ae1520 'char'
|-TypedefDecl 0x55cfe5e17fc0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55cfe5e17f30 'int (String::*)() const'
|   |-RecordType 0x55cfe5e17c70 'String'
|   | `-CXXRecord 0x55cfe5e17be0 'String'
|   `-ParenType 0x55cfe5e17ed0 'int () const' sugar
|     `-FunctionProtoType 0x55cfe5debe20 'int () const' const cdecl
|       `-BuiltinType 0x55cfe5ae1580 'int'
|-TypedefDecl 0x55cfe5e18028 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55cfe5c37b60 'int64_t' sugar
|   |-Typedef 0x55cfe5b4a390 'int64_t'
|   `-TypedefType 0x55cfe5b23630 '__int64_t' sugar
|     |-Typedef 0x55cfe5b23208 '__int64_t'
|     `-BuiltinType 0x55cfe5ae15a0 'long'
|-TypedefDecl 0x55cfe5e18090 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55cfe5c37a80 'uint64_t' sugar
|   |-Typedef 0x55cfe5b4a530 'uint64_t'
|   `-TypedefType 0x55cfe5b236c0 '__uint64_t' sugar
|     |-Typedef 0x55cfe5b23278 '__uint64_t'
|     `-BuiltinType 0x55cfe5ae1640 'unsigned long'
|-TypedefDecl 0x55cfe5e18120 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55cfe5e180f0 'String::intmax_t' sugar
|   |-Typedef 0x55cfe5e18028 'intmax_t'
|   `-TypedefType 0x55cfe5c37b60 'int64_t' sugar
|     |-Typedef 0x55cfe5b4a390 'int64_t'
|     `-TypedefType 0x55cfe5b23630 '__int64_t' sugar
|       |-Typedef 0x55cfe5b23208 '__int64_t'
|       `-BuiltinType 0x55cfe5ae15a0 'long'
|-TypedefDecl 0x55cfe5e181b0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55cfe5e18180 'String::uintmax_t' sugar
|   |-Typedef 0x55cfe5e18090 'uintmax_t'
|   `-TypedefType 0x55cfe5c37a80 'uint64_t' sugar
|     |-Typedef 0x55cfe5b4a530 'uint64_t'
|     `-TypedefType 0x55cfe5b236c0 '__uint64_t' sugar
|       |-Typedef 0x55cfe5b23278 '__uint64_t'
|       `-BuiltinType 0x55cfe5ae1640 'unsigned long'
|-CXXConstructorDecl 0x55cfe5e18270 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55cfe5e18418 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55cfe5e18358 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55cfe5e185c8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55cfe5e18508 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55cfe5e18720 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55cfe5e18690 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55cfe5e18938 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55cfe5e187e8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55cfe5e18868 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55cfe5e18b58 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55cfe5e18a08 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55cfe5e18a88 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55cfe5e18d78 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55cfe5e18c28 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55cfe5e18ca8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55cfe5e18f98 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55cfe5e18e48 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55cfe5e18ec8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55cfe5e19128 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55cfe5e19060 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55cfe5e192a8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55cfe5e191e8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55cfe5e19438 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55cfe5e19370 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55cfe5e19590 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55cfe5e19500 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55cfe5e196e8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55cfe5e19658 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55cfe5e19840 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55cfe5e197b0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55cfe5e19a30 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55cfe5e19908 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55cfe5e19bb8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55cfe5e19af8 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55cfe5e19d48 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55cfe5e19c80 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55cfe5e19ed8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55cfe5e19e10 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55cfe5e19fd0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55cfe5e1a0f8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55cfe5e1a278 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55cfe5e1a1b0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55cfe5e1a3c8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55cfe5e1a338 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55cfe5e1a470 <col:63> "" ""
|-CXXMethodDecl 0x55cfe5e1a5b8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55cfe5e1a4f8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55cfe5e1a7c8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55cfe5e1a678 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55cfe5e1a6f8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55cfe5e1a9e8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55cfe5e1a890 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55cfe5e1a910 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55cfe5e1acc8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55cfe5e1aaa8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55cfe5e1ab28 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55cfe5e24a80 <col:55> 'int' 10
| `-ParmVarDecl 0x55cfe5e1aba0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55cfe5e24aa0 <col:76> 'bool' true
|-CXXMethodDecl 0x55cfe5e1afa8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55cfe5e1ad90 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55cfe5e1ae10 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55cfe5e24ab0 <col:56> 'int' 10
| `-ParmVarDecl 0x55cfe5e1ae88 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55cfe5e24ad0 <col:77> 'bool' true
|-CXXMethodDecl 0x55cfe5e1b0b0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55cfe5e1b178 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55cfe5e1b240 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55cfe5e1b2e0 <col:20>
| `-OptimizeNoneAttr 0x55cfe5e1b338 <col:30>
|-CXXConversionDecl 0x55cfe5e1b428 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55cfe5e1b4f8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55cfe5e1b5b8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55cfe5e1b6a8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55cfe5e1b768 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55cfe5e1b8e8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55cfe5e1b820 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55cfe5e1ba38 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55cfe5e1b9a8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55cfe5e1bb28 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55cfe5e1bbe8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55cfe5e1be38 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55cfe5e1bca0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55cfe5e1bd20 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55cfe5e1c098 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55cfe5e1bf00 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55cfe5e1bf80 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55cfe5e1c168 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55cfe5e1c378 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55cfe5e1c220 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55cfe5e1c2a0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55cfe5e1c598 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55cfe5e1c440 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55cfe5e1c4c0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55cfe5e1c728 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55cfe5e1c660 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55cfe5e1c818 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55cfe5e1c988 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55cfe5e1c8c8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55cfe5e1cb98 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55cfe5e1ca48 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55cfe5e1cac8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55cfe5e1cdb0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55cfe5e1cc58 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55cfe5e1ccd0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55cfe5e1cf40 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55cfe5e1ce70 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55cfe5e1d160 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55cfe5e1d000 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55cfe5e1d080 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55cfe5e1d2b0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55cfe5e1d220 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55cfe5e1d488 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55cfe5e1d370 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55cfe5e1d3f0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55cfe5e1d5d8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55cfe5e1d548 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55cfe5e1d7f0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55cfe5e1d690 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55cfe5e1d710 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55cfe5e24ae0 <col:39> 'int' 0
|-CXXMethodDecl 0x55cfe5e1da40 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55cfe5e1d8b0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55cfe5e1d930 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55cfe5e24b00 <col:48> 'int' 0
|-CXXMethodDecl 0x55cfe5e1dc20 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55cfe5e1db00 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55cfe5e1db80 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55cfe5e24b20 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55cfe5e1dcf0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55cfe5e1ddb0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55cfe5e1de70 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55cfe5e1df30 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55cfe5e1dff0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55cfe5e1e198 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55cfe5e1e0a0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55cfe5e1e318 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55cfe5e1e250 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55cfe5e1e498 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55cfe5e1e3d8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55cfe5e1e618 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55cfe5e1e550 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55cfe5e1e760 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55cfe5e1e6d0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55cfe5e1e8b0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55cfe5e1e820 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55cfe5e1ea88 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55cfe5e1e970 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55cfe5e1e9f0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55cfe5e1ec68 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55cfe5e1eb50 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55cfe5e1ebd0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55cfe5e1edb8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55cfe5e1ed28 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55cfe5e1efc8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55cfe5e1ee78 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55cfe5e1eef8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55cfe5e1f128 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55cfe5e1f090 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55cfe5e1f280 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55cfe5e1f1e8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55cfe5e1f328 <col:57> "" ""
|-CXXMethodDecl 0x55cfe5e1f438 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55cfe5e1f3a8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55cfe5e1f588 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55cfe5e1f4f8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55cfe5e1f708 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55cfe5e1f640 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55cfe5e1f7d0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55cfe5e1f890 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55cfe5e1f950 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55cfe5e1f9f0 <col:49> "" ""
|-CXXMethodDecl 0x55cfe5e1fa80 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55cfe5e1fb40 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55cfe5e1fc30 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55cfe5e1fcf8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55cfe5e1fdb8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55cfe5e1fe78 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55cfe5e1ff70 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55cfe5e20038 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55cfe5e20100 <line:174:5, col:42> col:31 used empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55cfe5e202d8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55cfe5e201b8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55cfe5e20238 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55cfe5e20500 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55cfe5e203a0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55cfe5e20420 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55cfe5e20610 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55cfe5e20678 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55cfe5e206a0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55cfe5e207b8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55cfe5e20858 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55cfe5e208b8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55cfe5e20918 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55cfe5e209c8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55cfe5e20a30 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55cfe5e20c68 <line:201:2, col:32> col:2 referenced MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55cfe5e20cb8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55cfe5e20c48 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55cfe5e20b58 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55cfe5e20b00 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55cfe5e20b40 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55cfe5e20b20 <col:32> 'int' 8
|-CXXRecordDecl 0x55cfe5e20cd0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55cfe5e20de8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55cfe5e20e90 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55cfe5e20ef8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55cfe5e20f88 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55cfe5e24fb0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55cfe5e253e8 <col:12>
| |-CXXConstructorDecl 0x55cfe5e250b8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55cfe5e251c8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55cfe5e20e90 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55cfe5e29120 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55cfe5e290f0 <col:12> 'const char *const' lvalue .data 0x55cfe5e20e90
| | |     `-DeclRefExpr 0x55cfe5e290d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55cfe5e251c8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55cfe5e20ef8 'length' 'int'
| | | `-ImplicitCastExpr 0x55cfe5e291b0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55cfe5e29180 <col:12> 'const int' lvalue .length 0x55cfe5e20ef8
| | |     `-DeclRefExpr 0x55cfe5e29160 <col:12> 'const String::rep_t' lvalue ParmVar 0x55cfe5e251c8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55cfe5e20f88 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55cfe5e29240 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55cfe5e29210 <col:12> 'String::memo_t *const' lvalue .memo 0x55cfe5e20f88
| | |     `-DeclRefExpr 0x55cfe5e291f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55cfe5e251c8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55cfe5e29298 <col:12>
| |-CXXConstructorDecl 0x55cfe5e25268 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55cfe5e25268
| | `-ParmVarDecl 0x55cfe5e25378 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55cfe5e2bfc0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55cfe5e36a18 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55cfe5e36b28 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55cfe5e37040 <col:12>
| |   |-BinaryOperator 0x55cfe5e36e58 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55cfe5e36e10 <col:12> 'const char *' lvalue ->data 0x55cfe5e20e90
| |   | | `-CXXThisExpr 0x55cfe5e36e00 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55cfe5e36e40 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55cfe5e36dd0 <col:12> 'const char *const' lvalue .data 0x55cfe5e20e90
| |   |     `-DeclRefExpr 0x55cfe5e36db0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55cfe5e36b28 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55cfe5e36f20 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55cfe5e36ed8 <col:12> 'int' lvalue ->length 0x55cfe5e20ef8
| |   | | `-CXXThisExpr 0x55cfe5e36ec8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55cfe5e36f08 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55cfe5e36e98 <col:12> 'const int' lvalue .length 0x55cfe5e20ef8
| |   |     `-DeclRefExpr 0x55cfe5e36e78 <col:12> 'const String::rep_t' lvalue ParmVar 0x55cfe5e36b28 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55cfe5e36fe8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55cfe5e36fa0 <col:12> 'String::memo_t *' lvalue ->memo 0x55cfe5e20f88
| |   | | `-CXXThisExpr 0x55cfe5e36f90 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55cfe5e36fd0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55cfe5e36f60 <col:12> 'String::memo_t *const' lvalue .memo 0x55cfe5e20f88
| |   |     `-DeclRefExpr 0x55cfe5e36f40 <col:12> 'const String::rep_t' lvalue ParmVar 0x55cfe5e36b28 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55cfe5e37030 <col:12>
| |     `-UnaryOperator 0x55cfe5e37018 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55cfe5e37008 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55cfe5e36b98 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55cfe5e36b98
|   `-ParmVarDecl 0x55cfe5e36ca8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55cfe5e21000 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55cfe5e21248 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55cfe5e21068 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55cfe5e210e8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55cfe5e21160 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55cfe5e24f70 <col:79, line:261:5>
|   |-BinaryOperator 0x55cfe5e24be8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55cfe5e24b80 <col:2, col:5> 'const char *' lvalue .data 0x55cfe5e20e90
|   | | `-MemberExpr 0x55cfe5e24b50 <col:2> 'String::rep_t' lvalue ->_r 0x55cfe5e21000
|   | |   `-CXXThisExpr 0x55cfe5e24b40 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55cfe5e24bd0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55cfe5e24bb0 <col:12> 'const char *' lvalue ParmVar 0x55cfe5e21068 'data' 'const char *'
|   |-BinaryOperator 0x55cfe5e24cb0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55cfe5e24c48 <col:2, col:5> 'int' lvalue .length 0x55cfe5e20ef8
|   | | `-MemberExpr 0x55cfe5e24c18 <col:2> 'String::rep_t' lvalue ->_r 0x55cfe5e21000
|   | |   `-CXXThisExpr 0x55cfe5e24c08 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55cfe5e24c98 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55cfe5e24c78 <col:14> 'int' lvalue ParmVar 0x55cfe5e210e8 'length' 'int'
|   `-IfStmt 0x55cfe5e24f58 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55cfe5e24dd0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55cfe5e24db8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55cfe5e24d98 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55cfe5e24d78 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55cfe5e24d10 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55cfe5e20f88
|     |       | `-MemberExpr 0x55cfe5e24ce0 <col:7> 'String::rep_t' lvalue ->_r 0x55cfe5e21000
|     |       |   `-CXXThisExpr 0x55cfe5e24cd0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55cfe5e24d60 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55cfe5e24d40 <col:17> 'String::memo_t *' lvalue ParmVar 0x55cfe5e21160 'memo' 'String::memo_t *'
|     `-CallExpr 0x55cfe5e24f30 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55cfe5e24f18 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55cfe5e24e20 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55cfe5e11c88 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55cfe5e24e88 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55cfe5e20858
|         `-ImplicitCastExpr 0x55cfe5e24e70 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55cfe5e24e50 <col:27> 'String::memo_t *' lvalue ParmVar 0x55cfe5e21160 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55cfe5e214f8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55cfe5e21318 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55cfe5e21398 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55cfe5e21410 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55cfe5e21000 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55cfe5e253f8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55cfe5e25588 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55cfe5e254f0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55cfe5e25460 <col:2> '<bound member function type>' ->assign_memo 0x55cfe5e21248
|     | `-ImplicitCastExpr 0x55cfe5e25528 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55cfe5e25450 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55cfe5e25540 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55cfe5e25490 <col:14> 'const char *' lvalue ParmVar 0x55cfe5e21318 'data' 'const char *'
|     |-ImplicitCastExpr 0x55cfe5e25558 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55cfe5e254b0 <col:20> 'int' lvalue ParmVar 0x55cfe5e21398 'length' 'int'
|     `-ImplicitCastExpr 0x55cfe5e25570 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55cfe5e254d0 <col:28> 'String::memo_t *' lvalue ParmVar 0x55cfe5e21410 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55cfe5e21688 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55cfe5e215c8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55cfe5e257e0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55cfe5e25760 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55cfe5e255b0 <col:2> '<bound member function type>' ->assign_memo 0x55cfe5e21248
|     | `-CXXThisExpr 0x55cfe5e255a0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55cfe5e25798 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55cfe5e25630 <col:14, col:19> 'const char *' lvalue .data 0x55cfe5e20e90
|     |   `-MemberExpr 0x55cfe5e25600 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55cfe5e21000
|     |     `-DeclRefExpr 0x55cfe5e255e0 <col:14> 'const String' lvalue ParmVar 0x55cfe5e215c8 'x' 'const String &'
|     |-ImplicitCastExpr 0x55cfe5e257b0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55cfe5e256b0 <col:25, col:30> 'int' lvalue .length 0x55cfe5e20ef8
|     |   `-MemberExpr 0x55cfe5e25680 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55cfe5e21000
|     |     `-DeclRefExpr 0x55cfe5e25660 <col:25> 'const String' lvalue ParmVar 0x55cfe5e215c8 'x' 'const String &'
|     `-ImplicitCastExpr 0x55cfe5e257c8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55cfe5e25730 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55cfe5e20f88
|         `-MemberExpr 0x55cfe5e25700 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55cfe5e21000
|           `-DeclRefExpr 0x55cfe5e256e0 <col:38> 'const String' lvalue ParmVar 0x55cfe5e215c8 'x' 'const String &'
|-CXXMethodDecl 0x55cfe5e21750 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55cfe5e261a0 <col:31, line:278:5>
|   `-IfStmt 0x55cfe5e26188 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55cfe5e25880 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55cfe5e25868 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55cfe5e25838 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55cfe5e20f88
|     |     `-MemberExpr 0x55cfe5e25808 <col:6> 'String::rep_t' lvalue ->_r 0x55cfe5e21000
|     |       `-CXXThisExpr 0x55cfe5e257f8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55cfe5e26160 <col:15, line:277:2>
|       |-ParenExpr 0x55cfe5e25d30 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55cfe5e25d00 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55cfe5e25990 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55cfe5e25978 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55cfe5e25960 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55cfe5e25920 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55cfe5e20858
|       |   |       `-ImplicitCastExpr 0x55cfe5e25908 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55cfe5e258d8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55cfe5e20f88
|       |   |           `-MemberExpr 0x55cfe5e258a8 <col:27> 'String::rep_t' lvalue ->_r 0x55cfe5e21000
|       |   |             `-CXXThisExpr 0x55cfe5e25898 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55cfe5e259f0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55cfe5e259d0 <col:54> 'int' 0
|       |   `-CallExpr 0x55cfe5e25c60 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55cfe5e25c48 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55cfe5e25bc8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55cfe5b7e370 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55cfe5e25ca0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55cfe5e25ad8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55cfe5e25cb8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55cfe5e25b08 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55cfe5e25cd0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55cfe5e25b40 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55cfe5e25ce8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55cfe5e25bb0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55cfe5e25b98 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55cfe5e25b60 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55cfe5e26080 <line:274:6, line:275:22>
|       | |-CallExpr 0x55cfe5e25f40 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55cfe5e25f28 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55cfe5e25ea0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55cfe5e130d0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55cfe5e25e70 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55cfe5e20858
|       | |   `-ImplicitCastExpr 0x55cfe5e25e58 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55cfe5e25e28 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55cfe5e20f88
|       | |       `-MemberExpr 0x55cfe5e25df8 <col:40> 'String::rep_t' lvalue ->_r 0x55cfe5e21000
|       | |         `-CXXThisExpr 0x55cfe5e25de8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55cfe5e26040 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55cfe5e26028 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55cfe5e25f68 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55cfe5e23eb8 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55cfe5e26068 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55cfe5e25fc8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55cfe5e20f88
|       |       `-MemberExpr 0x55cfe5e25f98 <col:15> 'String::rep_t' lvalue ->_r 0x55cfe5e21000
|       |         `-CXXThisExpr 0x55cfe5e25f88 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55cfe5e26140 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55cfe5e260d8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55cfe5e20f88
|         | `-MemberExpr 0x55cfe5e260a8 <col:6> 'String::rep_t' lvalue ->_r 0x55cfe5e21000
|         |   `-CXXThisExpr 0x55cfe5e26098 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55cfe5e26128 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55cfe5e26108 <col:16> 'int' 0
|-CXXMethodDecl 0x55cfe5e23480 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55cfe5e21808 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55cfe5e21888 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55cfe5e21900 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55cfe5e23558 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55cfe5e237a8 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55cfe5e23610 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55cfe5e23690 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55cfe5e23708 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55cfe5e23990 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55cfe5e23878 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55cfe5e238f8 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55cfe5e23a88 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55cfe5e26278 <col:41, line:286:5>
|   `-ReturnStmt 0x55cfe5e26268 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55cfe5e26238 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55cfe5e26200 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55cfe5e261e8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55cfe5e261c8 <col:46> 'int' 1
|-CXXMethodDecl 0x55cfe5e23d28 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55cfe5e23b40 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55cfe5e23bc0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55cfe5e23c40 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55cfe5e23eb8 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55cfe5e23df0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55cfe5e23f88 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55cfe5e24158 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55cfe5e24040 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55cfe5e240c0 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55cfe5e24218 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55cfe5e242e0 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55cfe5e243e8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55cfe5e24460 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55cfe5e244d8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55cfe5e24540 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55cfe5e24640 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55cfe5e24690 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55cfe5e24620 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55cfe5e24600 <col:22> 'int' 14
|-CXXMethodDecl 0x55cfe5e248a8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55cfe5e246c0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55cfe5e24740 <col:38> col:41 'int'
| `-ParmVarDecl 0x55cfe5e247c0 <col:43> col:46 'int'
|-FriendDecl 0x55cfe5e249b0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55cfe5e24a40 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55cfe5ede970 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55cfe5edeb48 prev 0x55cfe5ede970 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55cfe5edebd8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55cfe5edec00 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55cfe5ae1580 'int'
|-TypedefDecl 0x55cfe5ee0560 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55cfe5ee0510 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55cfe5ee04f0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55cfe5edee18 'type'
|     `-SubstTemplateTypeParmType 0x55cfe5edede0 'String' sugar
|       |-TemplateTypeParmType 0x55cfe5ddb230 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55cfe5ddb1e0 'T'
|       `-RecordType 0x55cfe5e17c70 'String'
|         `-CXXRecord 0x55cfe5e17be0 'String'
|-TypedefDecl 0x55cfe5ee0618 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55cfe5ee05e0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55cfe5ee05c0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55cfe5ee0560 'type'
|     `-ElaboratedType 0x55cfe5ee0510 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55cfe5ee04f0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55cfe5edee18 'type'
|         `-SubstTemplateTypeParmType 0x55cfe5edede0 'String' sugar
|           |-TemplateTypeParmType 0x55cfe5ddb230 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55cfe5ddb1e0 'T'
|           `-RecordType 0x55cfe5e17c70 'String'
|             `-CXXRecord 0x55cfe5e17be0 'String'
|-CXXMethodDecl 0x55cfe5ee0798 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55cfe5ee06a8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55cfe5ee0888 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55cfe5ee0968 <line:23:5, col:20> col:5 used ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55cfe5ee0c38 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55cfe5ee0b40 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55cfe5ee0e78 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55cfe5ee0cf0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55cfe5ee0d68 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55cfe5ee1048 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55cfe5ee0f38 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55cfe5ee0fb0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55cfe5ee11a8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55cfe5ee1278 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55cfe5ee14c8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55cfe5ee1338 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55cfe5ee13b0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55cfe5ee1728 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55cfe5ee1598 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55cfe5ee1610 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55cfe5ee18e8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55cfe5ee17f8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55cfe5ee1aa8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55cfe5ee19b0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55cfe5ee1b60 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55cfe5ee1c10 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55cfe5ee1e48 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55cfe5ee1cc0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55cfe5ee1d38 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55cfe5ee20e8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55cfe5ee1ff0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55cfe5ee21b0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55cfe5ee2200 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55cfe5ee2250 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55cfe604b780 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55cfe5edd618 prev 0x55cfe604b780 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55cfe5ede8e0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55cfe5ede890 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55cfe5ede870 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55cfe5ede720 'type'
|     `-SubstTemplateTypeParmType 0x55cfe5ede5b0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55cfe5db1c50 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55cfe5db1bf8 'F'
|       `-RecordType 0x55cfe5ede210 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55cfe5ede130 'typed_array_memory'
|-FieldDecl 0x55cfe5ee22a0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55cfe5ee22f0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55cfe5ee2328 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55cfe5edd6b0 'String' sugar
|   |-TemplateTypeParmType 0x55cfe5de8f70 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55cfe5de8f18 'T'
|   `-RecordType 0x55cfe5e17c70 'String'
|     `-CXXRecord 0x55cfe5e17be0 'String'
|-TypedefDecl 0x55cfe5ee23b8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55cfe5ee2380 'String &'
|   `-SubstTemplateTypeParmType 0x55cfe5edd6b0 'String' sugar
|     |-TemplateTypeParmType 0x55cfe5de8f70 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55cfe5de8f18 'T'
|     `-RecordType 0x55cfe5e17c70 'String'
|       `-CXXRecord 0x55cfe5e17be0 'String'
|-TypedefDecl 0x55cfe5ee2448 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55cfe5ee2410 'const String &'
|   `-QualType 0x55cfe5edd6b1 'const String' const
|     `-SubstTemplateTypeParmType 0x55cfe5edd6b0 'String' sugar
|       |-TemplateTypeParmType 0x55cfe5de8f70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55cfe5de8f18 'T'
|       `-RecordType 0x55cfe5e17c70 'String'
|         `-CXXRecord 0x55cfe5e17be0 'String'
|-TypedefDecl 0x55cfe5ee24d8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55cfe5ee24a0 'String *'
|   `-SubstTemplateTypeParmType 0x55cfe5edd6b0 'String' sugar
|     |-TemplateTypeParmType 0x55cfe5de8f70 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55cfe5de8f18 'T'
|     `-RecordType 0x55cfe5e17c70 'String'
|       `-CXXRecord 0x55cfe5e17be0 'String'
|-TypedefDecl 0x55cfe5ee2568 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55cfe5ee2530 'const String *'
|   `-QualType 0x55cfe5edd6b1 'const String' const
|     `-SubstTemplateTypeParmType 0x55cfe5edd6b0 'String' sugar
|       |-TemplateTypeParmType 0x55cfe5de8f70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55cfe5de8f18 'T'
|       `-RecordType 0x55cfe5e17c70 'String'
|         `-CXXRecord 0x55cfe5e17be0 'String'
|-TypedefDecl 0x55cfe5ee31c0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55cfe5ee3170 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55cfe5ee3150 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55cfe5ee3088 'type'
|     `-LValueReferenceType 0x55cfe5ee3050 'const String &'
|       `-QualType 0x55cfe5ee2df1 'const String' const
|         `-SubstTemplateTypeParmType 0x55cfe5ee2df0 'String' sugar
|           |-TemplateTypeParmType 0x55cfe5dba130 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55cfe5dba0d8 'T'
|           `-RecordType 0x55cfe5e17c70 'String'
|             `-CXXRecord 0x55cfe5e17be0 'String'
|-TypedefDecl 0x55cfe5ee3228 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55cfe5ee2410 'const String &'
|   `-QualType 0x55cfe5edd6b1 'const String' const
|     `-SubstTemplateTypeParmType 0x55cfe5edd6b0 'String' sugar
|       |-TemplateTypeParmType 0x55cfe5de8f70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55cfe5de8f18 'T'
|       `-RecordType 0x55cfe5e17c70 'String'
|         `-CXXRecord 0x55cfe5e17be0 'String'
|-TypedefDecl 0x55cfe5ee3280 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55cfe5ae1580 'int'
|-TypedefDecl 0x55cfe5ee32e8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55cfe5ee24a0 'String *'
|   `-SubstTemplateTypeParmType 0x55cfe5edd6b0 'String' sugar
|     |-TemplateTypeParmType 0x55cfe5de8f70 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55cfe5de8f18 'T'
|     `-RecordType 0x55cfe5e17c70 'String'
|       `-CXXRecord 0x55cfe5e17be0 'String'
|-TypedefDecl 0x55cfe5ee3350 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55cfe5ee2530 'const String *'
|   `-QualType 0x55cfe5edd6b1 'const String' const
|     `-SubstTemplateTypeParmType 0x55cfe5edd6b0 'String' sugar
|       |-TemplateTypeParmType 0x55cfe5de8f70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55cfe5de8f18 'T'
|       `-RecordType 0x55cfe5e17c70 'String'
|         `-CXXRecord 0x55cfe5e17be0 'String'
|-EnumDecl 0x55cfe5ee33a8 <line:134:5> col:5
| `-EnumConstantDecl 0x55cfe5ee34a0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55cfe5ee3480 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55cfe5dea1e8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55cfe5dea1c0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55cfe5dea1a0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55cfe5ee3528 <line:137:5, col:28> col:21 used Vector 'void ()' inline
|-CXXConstructorDecl 0x55cfe5ee37b8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55cfe5ee35e0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55cfe5ee3680 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55cfe5ee3a48 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55cfe5ee3930 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55cfe5ee3d08 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55cfe5ee3bf0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55cfe5ee4020 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55cfe5ee3f00 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55cfe60a0020 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55cfe609ff00 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55cfe60a0310 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55cfe60a0158 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55cfe60a01d0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55cfe60a0438 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55cfe60a04e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55cfe60a0540 <col:30> Inherited
|-CXXMethodDecl 0x55cfe60a0588 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55cfe60a0638 <col:20> Inherited
| `-OptimizeNoneAttr 0x55cfe60a0690 <col:30> Inherited
|-CXXMethodDecl 0x55cfe60a0758 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55cfe60a0808 <col:20> Inherited
| `-OptimizeNoneAttr 0x55cfe60a0860 <col:30> Inherited
|-CXXMethodDecl 0x55cfe60a08a8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55cfe60a0958 <col:20> Inherited
| `-OptimizeNoneAttr 0x55cfe60a09b0 <col:30> Inherited
|-CXXMethodDecl 0x55cfe60a09f8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55cfe60a0aa8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55cfe60a0b00 <col:30> Inherited
|-CXXMethodDecl 0x55cfe60a0b48 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55cfe60a0bf8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55cfe60a0c50 <col:30> Inherited
|-CXXMethodDecl 0x55cfe60a0c78 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55cfe60a0d28 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55cfe60a0dd8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55cfe60a0f98 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55cfe60a0e88 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55cfe60a0f00 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55cfe60a10e8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55cfe60a1058 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55cfe60a1298 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55cfe60a11a0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55cfe60a1350 <col:20>
| `-OptimizeNoneAttr 0x55cfe60a13a8 <col:30>
|-CXXMethodDecl 0x55cfe60a14c8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55cfe60a13d0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55cfe60a1580 <col:20>
| `-OptimizeNoneAttr 0x55cfe60a15d8 <col:30>
|-CXXMethodDecl 0x55cfe60a1690 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55cfe60a1600 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55cfe60a17d8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55cfe60a1748 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55cfe60a1908 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55cfe60a1a08 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55cfe60a1ad8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55cfe60a1ba8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55cfe60a1ce8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55cfe60a1c58 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55cfe60a1e30 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55cfe60a1da0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55cfe60a1f78 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55cfe60a1ee8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55cfe60a2030 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55cfe60a2130 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55cfe60a20a0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55cfe60a21e8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55cfe60a22a8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55cfe60a23a8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55cfe60a2528 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55cfe60a2468 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55cfe60a2cb8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55cfe60a25e0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55cfe60a2c18 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55cfe60a2b18 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55cfe60a2d98 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55cfe60a2ee8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55cfe60a2e58 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55cfe60a2fa0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55cfe60a31e8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55cfe60a3060 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55cfe60a30d8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55cfe60a3378 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55cfe60a32b8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55cfe60a3588 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55cfe60a3440 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55cfe60a34b8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55cfe60a3648 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55cfe60a38a8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55cfe60a37b0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55cfe60a3978 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit used ~Vector 'void () noexcept' inline default
  `-CompoundStmt 0x55cfe6164ef8 <col:29>

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cfe61221c8 prev 0x55cfe5fcf138 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55cfe61222c0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55cfe6122350 <col:22, col:28> col:22 public
|-EnumDecl 0x55cfe6122378 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55cfe6122498 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55cfe6122478 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55cfe6122460 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55cfe6122440 <col:14> 'int' 999
| |-EnumConstantDecl 0x55cfe6122540 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55cfe6122520 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55cfe6122508 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55cfe61224e8 <col:14> 'int' 1
| |-EnumConstantDecl 0x55cfe61225d0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55cfe61225b0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55cfe6122590 <col:17> 'int' 0
| |-EnumConstantDecl 0x55cfe6122660 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55cfe6122640 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55cfe6122620 <col:13> 'int' 1
| |-EnumConstantDecl 0x55cfe61226f0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55cfe61226d0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55cfe61226b0 <col:16> 'int' 2
| |-EnumConstantDecl 0x55cfe6122780 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55cfe6122760 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55cfe6122740 <col:13> 'int' 3
| |-EnumConstantDecl 0x55cfe6122810 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55cfe61227f0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55cfe61227d0 <col:15> 'int' 4
| |-EnumConstantDecl 0x55cfe61228a0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55cfe6122880 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55cfe6122860 <col:14> 'int' 5
| |-EnumConstantDecl 0x55cfe6122930 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55cfe6122910 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55cfe61228f0 <col:12> 'int' 6
| `-EnumConstantDecl 0x55cfe61229c0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55cfe61229a0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55cfe6122980 <col:13> 'int' 7
|-VarDecl 0x55cfe6122a30 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55cfe6122ab8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55cfe6122b40 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55cfe6122bc8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55cfe6122c50 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55cfe6122cd8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55cfe6122d60 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55cfe6122de8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55cfe6122e70 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55cfe6122ef8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55cfe6122f80 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55cfe6123080 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55cfe61283c8 '_nerrors' 'int'
| | `-IntegerLiteral 0x55cfe6128b58 <line:128:13> 'int' 0
| `-CompoundStmt 0x55cfe6128bc8 <col:16, line:129:5>
|-CXXDestructorDecl 0x55cfe6123170 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55cfe6128bd8 <col:29, line:132:5>
|-CXXMethodDecl 0x55cfe6123328 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55cfe6123260 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55cfe61233f0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55cfe61234d8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55cfe6128c30 <col:44, line:161:5>
|   `-ReturnStmt 0x55cfe6128c20 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55cfe6128c08 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55cfe6128be8 <col:9> 'ErrorHandler *' lvalue Var 0x55cfe6128428 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55cfe6123618 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55cfe6123588 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55cfe61236e0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55cfe6128c90 <col:43, line:173:5>
|   `-ReturnStmt 0x55cfe6128c80 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55cfe6128c68 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55cfe6128c48 <col:9> 'ErrorHandler *' lvalue Var 0x55cfe61284a0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55cfe6123798 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55cfe6123818 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55cfe6123928 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55cfe6123898 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55cfe6123a78 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55cfe61239e8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55cfe6123bd0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55cfe6123b38 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55cfe6123d28 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x55cfe6123c90 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55cfe6123e80 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55cfe6123de8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55cfe6124090 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55cfe6123f38 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55cfe6123fb8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55cfe6124268 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55cfe6124150 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55cfe61241d0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55cfe6124488 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55cfe6124328 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55cfe61243a8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55cfe6124668 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55cfe6124548 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55cfe61245c8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55cfe6124848 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55cfe6124728 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55cfe61247a8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55cfe61249d0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55cfe6124908 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55cfe6124ba0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55cfe6124a88 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55cfe6124b00 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55cfe6128ee8 <col:57, line:234:5>
|   `-ReturnStmt 0x55cfe6128ed8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55cfe6128ec0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55cfe6128e68 <col:9, col:41> 'int'
|         |-MemberExpr 0x55cfe6128e38 <col:9> '<bound member function type>' ->xmessage 0x55cfe61249d0
|         | `-CXXThisExpr 0x55cfe6128e28 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55cfe6128ea8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55cfe6128e90 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55cfe6128e08 <col:18, col:40> 'String' (CXXTemporary 0x55cfe6128e08)
|               `-CallExpr 0x55cfe6128dd0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55cfe6128db8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55cfe6128d30 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55cfe6126bf8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55cfe6128d50 <col:31> 'const String' lvalue ParmVar 0x55cfe6124b00 'str' 'const String &'
|                 `-DeclRefExpr 0x55cfe6128d70 <col:36> 'const String' lvalue ParmVar 0x55cfe6124a88 'anno' 'const String &'
|-CXXMethodDecl 0x55cfe6124e80 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55cfe6124c60 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55cfe6124ce0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55cfe6124d58 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55cfe6129178 <col:68, line:243:5>
|   `-ReturnStmt 0x55cfe6129168 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55cfe6129150 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55cfe61290f0 <col:9, col:41> 'int'
|         |-MemberExpr 0x55cfe61290c0 <col:9> '<bound member function type>' ->xmessage 0x55cfe6124ba0
|         | `-CXXThisExpr 0x55cfe61290b0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55cfe6128f88 <col:18> 'const String' lvalue ParmVar 0x55cfe6124c60 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55cfe6129138 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55cfe6129120 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55cfe6129090 <col:24, col:40> 'String' (CXXTemporary 0x55cfe6129090)
|               `-CXXMemberCallExpr 0x55cfe6129028 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55cfe6128fb8 <col:24> '<bound member function type>' ->vformat 0x55cfe6126060
|                 | `-CXXThisExpr 0x55cfe6128fa8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55cfe6129058 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55cfe6128fe8 <col:32> 'const char *' lvalue ParmVar 0x55cfe6124ce0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55cfe6129070 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55cfe6129008 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55cfe6124d58 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55cfe6125120 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55cfe6124f48 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55cfe6124fc0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55cfe6125038 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55cfe61294b8 <col:23, line:254:5>
|   `-ReturnStmt 0x55cfe61294a8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55cfe6129490 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55cfe6129430 <col:9, col:71> 'int'
|         |-MemberExpr 0x55cfe6129400 <col:9> '<bound member function type>' ->xmessage 0x55cfe6124ba0
|         | `-CXXThisExpr 0x55cfe61293f0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55cfe6129478 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55cfe6129460 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55cfe61293b0 <col:18, col:65> 'String' (CXXTemporary 0x55cfe61293b0)
|         |     `-CallExpr 0x55cfe6129348 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55cfe6129330 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55cfe6129218 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55cfe6126bf8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55cfe6129238 <col:31> 'const String' lvalue ParmVar 0x55cfe6124fc0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55cfe6129390 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55cfe6129378 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55cfe6129310 <col:37, col:64> 'String' (CXXTemporary 0x55cfe6129310)
|         |             `-CallExpr 0x55cfe61292e0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55cfe61292c8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55cfe6129258 <col:37> 'String (const String &)' lvalue CXXMethod 0x55cfe6127248 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55cfe6129278 <col:56> 'const String' lvalue ParmVar 0x55cfe6124f48 'landmark' 'const String &'
|         `-DeclRefExpr 0x55cfe61293d0 <col:68> 'const String' lvalue ParmVar 0x55cfe6125038 'str' 'const String &'
|-CXXMethodDecl 0x55cfe61254a0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55cfe61251e8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55cfe6125260 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55cfe61252e0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55cfe6125358 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55cfe6129770 <col:34, line:267:5>
|   `-ReturnStmt 0x55cfe6129760 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55cfe6129748 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55cfe61296e0 <col:9, col:51> 'int'
|         |-MemberExpr 0x55cfe61296b0 <col:9> '<bound member function type>' ->xmessage 0x55cfe6125120
|         | `-CXXThisExpr 0x55cfe61296a0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55cfe6129558 <col:18> 'const String' lvalue ParmVar 0x55cfe61251e8 'landmark' 'const String &'
|         |-DeclRefExpr 0x55cfe6129578 <col:28> 'const String' lvalue ParmVar 0x55cfe6125260 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55cfe6129730 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55cfe6129718 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55cfe6129680 <col:34, col:50> 'String' (CXXTemporary 0x55cfe6129680)
|               `-CXXMemberCallExpr 0x55cfe6129618 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55cfe61295a8 <col:34> '<bound member function type>' ->vformat 0x55cfe6126060
|                 | `-CXXThisExpr 0x55cfe6129598 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55cfe6129648 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55cfe61295d8 <col:42> 'const char *' lvalue ParmVar 0x55cfe61252e0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55cfe6129660 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55cfe61295f8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55cfe6125358 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55cfe61255b0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55cfe61297f0 <col:25, line:288:5>
|   `-ReturnStmt 0x55cfe61297e0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55cfe61297c8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55cfe6129798 <col:9> 'const int' lvalue ->_nerrors 0x55cfe61283c8
|         `-CXXThisExpr 0x55cfe6129788 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55cfe61257c0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55cfe6125668 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55cfe61256e8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55cfe6125aa8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55cfe6125888 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55cfe6125908 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55cfe6125980 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55cfe6125c40 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55cfe6125b78 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55cfe6125e88 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55cfe6125d00 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55cfe6125d78 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55cfe6129a50 <col:58, line:357:5>
|   `-ReturnStmt 0x55cfe6129a40 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55cfe6129a28 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55cfe61299f8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55cfe61299e0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55cfe61299c0 <col:9, col:29> 'String' (CXXTemporary 0x55cfe61299c0)
|             `-CallExpr 0x55cfe6129950 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55cfe6129938 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55cfe61298b8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55cfe6125aa8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55cfe6129858 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55cfe6129988 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55cfe6129878 <col:21> 'const char *' lvalue ParmVar 0x55cfe6125d00 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55cfe61299a0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55cfe6129898 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55cfe6125d78 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55cfe6126060 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55cfe6125f50 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55cfe6125fc8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55cfe61261b8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55cfe6126128 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55cfe6126300 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55cfe6126270 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55cfe61265a0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55cfe61263b8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55cfe6126438 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55cfe61264b0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55cfe6126700 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55cfe6126670 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55cfe6129b68 <col:37, line:441:5>
|   `-IfStmt 0x55cfe6129b50 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55cfe6129ad8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55cfe6129aa8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55cfe6129a68 <col:6> 'int' lvalue ParmVar 0x55cfe6126670 'level' 'int'
|     | `-ImplicitCastExpr 0x55cfe6129ac0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55cfe6129a88 <col:15> 'ErrorHandler::Level' EnumConstant 0x55cfe6122780 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55cfe6129b38 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55cfe6129b08 <col:8> 'int' lvalue ->_nerrors 0x55cfe61283c8
|         `-CXXThisExpr 0x55cfe6129af8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55cfe61267c8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55cfe6129c00 <col:26, line:448:5>
|   `-BinaryOperator 0x55cfe6129be0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55cfe6129b90 <col:2> 'int' lvalue ->_nerrors 0x55cfe61283c8
|     | `-CXXThisExpr 0x55cfe6129b80 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55cfe6129bc0 <col:13> 'int' 0
|-CXXMethodDecl 0x55cfe61269e8 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55cfe6126880 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55cfe6126950 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55cfe6126bf8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55cfe6126aa8 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55cfe6126b20 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55cfe6126ea8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55cfe6126cb8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55cfe6126d38 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55cfe6126db8 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55cfe6126f60 <col:59> 0 0
|-CXXMethodDecl 0x55cfe61270f8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55cfe6126fd8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55cfe6127058 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55cfe612a270 <col:70, line:534:5>
|   |-DeclStmt 0x55cfe6129d70 <line:528:2, col:20>
|   | |-VarDecl 0x55cfe6129c28 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55cfe6129c90 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55cfe6129cc8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55cfe6129d30 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55cfe6129e40 <line:529:2, col:23>
|   | `-VarDecl 0x55cfe6129da0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55cfe6129e28 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55cfe6129e08 <col:18> 'const char *' lvalue ParmVar 0x55cfe6126fd8 'begin' 'const char *'
|   |-DoStmt 0x55cfe612a208 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55cfe612a138 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55cfe612a120 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55cfe612a100 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55cfe6129e58 <col:6> 'const char *' lvalue Var 0x55cfe6129da0 'x' 'const char *'
|   | |     `-CallExpr 0x55cfe612a050 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55cfe612a038 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55cfe6129ff0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55cfe61288a0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55cfe612a0b8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55cfe612a0a0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55cfe6129f10 <col:20, col:27> 'String' (CXXTemporary 0x55cfe6129f10)
|   | |       |     `-CXXTemporaryObjectExpr 0x55cfe6129ed8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55cfe612a0d0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55cfe6129f30 <col:30> 'const char *' lvalue Var 0x55cfe6129da0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55cfe612a0e8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55cfe6129f50 <col:33> 'const char *' lvalue ParmVar 0x55cfe6127058 'end' 'const char *'
|   | |       |-UnaryOperator 0x55cfe6129f90 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55cfe6129f70 <col:39> 'String' lvalue Var 0x55cfe6129c28 'name' 'String'
|   | |       |-UnaryOperator 0x55cfe6129fc8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55cfe6129fa8 <col:46> 'String' lvalue Var 0x55cfe6129cc8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55cfe6129fe0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55cfe612a1f0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55cfe612a1d8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55cfe612a1b8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55cfe612a188 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55cfe5e1b428
|   |         `-ImplicitCastExpr 0x55cfe612a170 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55cfe612a150 <col:11> 'String' lvalue Var 0x55cfe6129c28 'name' 'String'
|   `-ReturnStmt 0x55cfe612a260 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55cfe612a248 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55cfe612a228 <col:9> 'const char *' lvalue Var 0x55cfe6129da0 'x' 'const char *'
|-CXXMethodDecl 0x55cfe6127248 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55cfe61271b8 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55cfe612a878 <col:55, line:550:5>
|   `-IfStmt 0x55cfe612a850 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55cfe612a4b0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55cfe612a498 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55cfe612a480 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55cfe612a460 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55cfe612a430 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55cfe5e1b428
|     | |       `-DeclRefExpr 0x55cfe612a2d0 <col:6> 'const String' lvalue ParmVar 0x55cfe61271b8 'x' 'const String &'
|     | `-BinaryOperator 0x55cfe612a410 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55cfe612a3e0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55cfe612a390 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55cfe612a378 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55cfe612a330 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55cfe5e31e40 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55cfe612a2f0 <col:11> 'const String' lvalue ParmVar 0x55cfe61271b8 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55cfe612a310 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55cfe612a3f8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55cfe612a3c8 <col:19> 'char' 123
|     |-ReturnStmt 0x55cfe612a520 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55cfe612a4f0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55cfe612a4d0 <col:13> 'const String' lvalue ParmVar 0x55cfe61271b8 'x' 'const String &'
|     `-IfStmt 0x55cfe612a828 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55cfe612a5b8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55cfe612a5a0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55cfe612a580 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55cfe612a550 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55cfe5e1b428
|       |       `-DeclRefExpr 0x55cfe612a530 <col:11> 'const String' lvalue ParmVar 0x55cfe61271b8 'x' 'const String &'
|       |-ReturnStmt 0x55cfe612a740 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55cfe612a728 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55cfe612a6f8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55cfe612a6e0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55cfe612a6c0 <col:13, col:29> 'String' (CXXTemporary 0x55cfe612a6c0)
|       |         `-CallExpr 0x55cfe612a670 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55cfe612a658 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55cfe612a5d0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55cfe61269e8 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55cfe612a6a0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55cfe612a5f0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55cfe612a610 <col:28> 'const String' lvalue ParmVar 0x55cfe61271b8 'x' 'const String &'
|       `-ReturnStmt 0x55cfe612a818 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55cfe612a800 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55cfe612a7d0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55cfe612a7b8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55cfe612a798 <col:13, col:20> 'String' (CXXTemporary 0x55cfe612a798)
|                 `-CXXTemporaryObjectExpr 0x55cfe612a760 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55cfe6127410 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55cfe6127300 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55cfe6127378 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55cfe6128b48 <col:71> 'bool' false
|-CXXRecordDecl 0x55cfe61274c0 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55cfe61277b8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55cfe6127750 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55cfe61276f0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55cfe61276b0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55cfe5e17c70 'String'
|       | `-CXXRecord 0x55cfe5e17be0 'String'
|       |-BuiltinType 0x55cfe5ae1580 'int'
|       `-DecayedType 0x55cfe5fd0180 '__va_list_tag *' sugar
|         |-TypedefType 0x55cfe5fd0150 'va_list' sugar
|         | |-Typedef 0x55cfe5d2c430 'va_list'
|         | `-TypedefType 0x55cfe5d2c3e0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55cfe5d27778 '__gnuc_va_list'
|         |   `-TypedefType 0x55cfe5d276e0 '__builtin_va_list' sugar
|         |     |-Typedef 0x55cfe5b22d38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55cfe5b22ce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55cfe5ae22d0 '__va_list_tag'
|         |         `-CXXRecord 0x55cfe5ae2238 '__va_list_tag'
|         `-PointerType 0x55cfe5d33910 '__va_list_tag *'
|           `-RecordType 0x55cfe5ae22d0 '__va_list_tag'
|             `-CXXRecord 0x55cfe5ae2238 '__va_list_tag'
|-EnumDecl 0x55cfe6127810 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55cfe6127910 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55cfe6127e70 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe61278f0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55cfe61278d0 <col:16> 'int' 1
| |-EnumConstantDecl 0x55cfe61279a0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55cfe6127e88 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe6127980 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55cfe6127960 <col:21> 'int' 2
| |-EnumConstantDecl 0x55cfe6127a30 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55cfe6127ea0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe6127a10 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55cfe61279f0 <col:22> 'int' 4
| |-EnumConstantDecl 0x55cfe6127ac0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55cfe6127eb8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe6127aa0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55cfe6127a80 <col:17> 'int' 8
| |-EnumConstantDecl 0x55cfe6127b50 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55cfe6127ed0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe6127b30 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55cfe6127b10 <col:22> 'int' 16
| |-EnumConstantDecl 0x55cfe6127be0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55cfe6127ee8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe6127bc0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55cfe6127ba0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55cfe6127c70 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55cfe6127f00 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe6127c50 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55cfe6127c30 <col:17> 'int' 64
| |-EnumConstantDecl 0x55cfe6127d00 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55cfe6127f18 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe6127ce0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55cfe6127cc0 <col:14> 'int' 128
| |-EnumConstantDecl 0x55cfe6127d90 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55cfe6127f30 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe6127d70 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55cfe6127d50 <col:16> 'int' 256
| `-EnumConstantDecl 0x55cfe6127e20 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55cfe6127f48 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55cfe6127e00 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55cfe6127de0 <col:12> 'int' 1024
|-CXXMethodDecl 0x55cfe6128158 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55cfe6127f70 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55cfe6128010 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55cfe61282e0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55cfe6128218 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55cfe6128388 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55cfe61283c8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55cfe6128428 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55cfe61284a0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55cfe61288a0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55cfe6128518 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55cfe6128598 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55cfe6128618 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55cfe6128690 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55cfe6128708 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55cfe6128780 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55cfe61289c8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55cfe61289c8
| `-ParmVarDecl 0x55cfe6128ad8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55cfe612abd8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55cfe612abd8
  `-ParmVarDecl 0x55cfe612ace8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cfe5fcf1c8 prev 0x55cfe600a038 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55cfe5fcf2c0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55cfe5fcf350 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55cfe5fcf488 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55cfe5fcf388 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55cfe5fd08b0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55cfe5fd0890 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55cfe5fd0428 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55cfe5fd0940 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55cfe5fd0900 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55cfe5fcf388 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55cfe5fd0490 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55cfe5fd09c0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55cfe5fd0980 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55cfe5fd04f0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55cfe5fd0a00 <col:54> 'bool' false
| `-CompoundStmt 0x55cfe60bab70 <col:61, line:38:5>
|   `-BinaryOperator 0x55cfe5fd0ae8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55cfe5fd0a80 <col:9> 'const Element *' lvalue ->_context 0x55cfe5fd03c8
|     | `-CXXThisExpr 0x55cfe5fd0a70 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55cfe5fd0ad0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55cfe5fd0ab0 <col:20> 'int' 0
|-CXXConstructorDecl 0x55cfe5fcf698 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55cfe5fcf548 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55cfe5fcf5c0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55cfe5fd08e8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55cfe5fd08c8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55cfe5fd03c8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55cfe60babc8 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55cfe60bab88 <col:20> 'const Element *' lvalue ParmVar 0x55cfe5fcf548 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55cfe5fd0428 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55cfe60bac48 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55cfe60bac08 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55cfe5fcf5c0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55cfe5fd0490 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55cfe60bacc8 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55cfe60bac88 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55cfe5fd04f0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55cfe60bad08 <col:73> 'bool' false
| `-CompoundStmt 0x55cfe60bad80 <col:80, line:46:5>
|-CXXMethodDecl 0x55cfe5fcf7c8 <line:49:5, line:51:5> line:49:20 used context 'const Element *() const'
| `-CompoundStmt 0x55cfe60badf8 <col:36, line:51:5>
|   `-ReturnStmt 0x55cfe60bade8 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55cfe60badd0 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55cfe60bada0 <col:16> 'const Element *const' lvalue ->_context 0x55cfe5fd03c8
|         `-CXXThisExpr 0x55cfe60bad90 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55cfe5fcf8b8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55cfe60bae78 <col:32, line:57:5>
|   `-ReturnStmt 0x55cfe60bae68 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55cfe60bae50 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55cfe60bae20 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55cfe5fd0428
|         `-CXXThisExpr 0x55cfe60bae10 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55cfe5fcf978 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55cfe5fcfb00 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55cfe5fcfa30 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55cfe5fcfc50 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55cfe5fcfbc0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55cfe5fcfda0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55cfe5fcfd10 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55cfe5fcffa8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55cfe5fcfe58 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55cfe5fcfed0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55cfe5fd02d8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55cfe5fd0068 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55cfe5fd00e8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55cfe5fd01b0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55cfe5fd0390 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55cfe5fd03c8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55cfe5fd0428 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55cfe5fd0490 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55cfe5fd04f0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55cfe5fd0540 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55cfe5fd0540
| `-ParmVarDecl 0x55cfe5fd0658 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55cfe5fd06f8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55cfe5fd06f8
| `-ParmVarDecl 0x55cfe5fd0808 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55cfe6169430 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55cfe60e7ec8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55cfe60e80d8 prev 0x55cfe60e7ec8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55cfe60e90f0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55cfe60e90a0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55cfe60e9080 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55cfe60e8f30 'type'
|     `-SubstTemplateTypeParmType 0x55cfe60634a0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55cfe5daefe0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55cfe5daef88 'T'
|       `-RecordType 0x55cfe6062ff0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55cfe6062f08 'sized_array_memory'
|-FieldDecl 0x55cfe60e91f0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55cfe60e9240 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55cfe60e9278 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55cfe60e8170 'int' sugar
|   |-TemplateTypeParmType 0x55cfe5de8f70 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55cfe5de8f18 'T'
|   `-BuiltinType 0x55cfe5ae1580 'int'
|-TypedefDecl 0x55cfe60e9308 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55cfe60e92d0 'int &'
|   `-SubstTemplateTypeParmType 0x55cfe60e8170 'int' sugar
|     |-TemplateTypeParmType 0x55cfe5de8f70 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55cfe5de8f18 'T'
|     `-BuiltinType 0x55cfe5ae1580 'int'
|-TypedefDecl 0x55cfe60e93c8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55cfe60e9390 'const int &'
|   `-QualType 0x55cfe60e8171 'const int' const
|     `-SubstTemplateTypeParmType 0x55cfe60e8170 'int' sugar
|       |-TemplateTypeParmType 0x55cfe5de8f70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55cfe5de8f18 'T'
|       `-BuiltinType 0x55cfe5ae1580 'int'
|-TypedefDecl 0x55cfe60e9458 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55cfe60e9420 'int *'
|   `-SubstTemplateTypeParmType 0x55cfe60e8170 'int' sugar
|     |-TemplateTypeParmType 0x55cfe5de8f70 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55cfe5de8f18 'T'
|     `-BuiltinType 0x55cfe5ae1580 'int'
|-TypedefDecl 0x55cfe60e94e8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55cfe60e94b0 'const int *'
|   `-QualType 0x55cfe60e8171 'const int' const
|     `-SubstTemplateTypeParmType 0x55cfe60e8170 'int' sugar
|       |-TemplateTypeParmType 0x55cfe5de8f70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55cfe5de8f18 'T'
|       `-BuiltinType 0x55cfe5ae1580 'int'
|-TypedefDecl 0x55cfe60ea0d0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55cfe60ea080 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55cfe60ea060 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55cfe60e9ff0 'type'
|     `-SubstTemplateTypeParmType 0x55cfe60e9db0 'int' sugar
|       |-TemplateTypeParmType 0x55cfe5dba860 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55cfe5dba810 'T'
|       `-BuiltinType 0x55cfe5ae1580 'int'
|-TypedefDecl 0x55cfe60ea138 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55cfe60e9390 'const int &'
|   `-QualType 0x55cfe60e8171 'const int' const
|     `-SubstTemplateTypeParmType 0x55cfe60e8170 'int' sugar
|       |-TemplateTypeParmType 0x55cfe5de8f70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55cfe5de8f18 'T'
|       `-BuiltinType 0x55cfe5ae1580 'int'
|-TypedefDecl 0x55cfe60ea190 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55cfe5ae1580 'int'
|-TypedefDecl 0x55cfe60ea1f8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55cfe60e9420 'int *'
|   `-SubstTemplateTypeParmType 0x55cfe60e8170 'int' sugar
|     |-TemplateTypeParmType 0x55cfe5de8f70 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55cfe5de8f18 'T'
|     `-BuiltinType 0x55cfe5ae1580 'int'
|-TypedefDecl 0x55cfe60ea260 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55cfe60e94b0 'const int *'
|   `-QualType 0x55cfe60e8171 'const int' const
|     `-SubstTemplateTypeParmType 0x55cfe60e8170 'int' sugar
|       |-TemplateTypeParmType 0x55cfe5de8f70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55cfe5de8f18 'T'
|       `-BuiltinType 0x55cfe5ae1580 'int'
|-EnumDecl 0x55cfe60ea2b8 <line:134:5> col:5
| `-EnumConstantDecl 0x55cfe60ea3b0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55cfe60ea390 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55cfe5dea1e8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55cfe5dea1c0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55cfe5dea1a0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55cfe60ea438 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55cfe60ea688 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55cfe60ea4f0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55cfe60ea590 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55cfe60ea948 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55cfe60ea830 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55cfe60eac08 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55cfe60eaaf0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55cfe60eaf50 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55cfe60eae30 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55cfe60eb260 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55cfe60eb140 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55cfe60eb550 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55cfe60eb398 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55cfe60eb410 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55cfe60eb678 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55cfe60eb758 <col:20> Inherited
| `-OptimizeNoneAttr 0x55cfe60eb7b0 <col:30> Inherited
|-CXXMethodDecl 0x55cfe60eb7f8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55cfe60eb8a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55cfe60eb900 <col:30> Inherited
|-CXXMethodDecl 0x55cfe60eb9c8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55cfe60eba78 <col:20> Inherited
| `-OptimizeNoneAttr 0x55cfe60ebad0 <col:30> Inherited
|-CXXMethodDecl 0x55cfe60ebb18 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55cfe60ebbc8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55cfe60ebc20 <col:30> Inherited
|-CXXMethodDecl 0x55cfe60ebc68 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55cfe60ebd18 <col:20> Inherited
| `-OptimizeNoneAttr 0x55cfe60ebd70 <col:30> Inherited
|-CXXMethodDecl 0x55cfe60ebdb8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55cfe60ebe68 <col:20> Inherited
| `-OptimizeNoneAttr 0x55cfe60ebec0 <col:30> Inherited
|-CXXMethodDecl 0x55cfe60ebee8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55cfe60ebf98 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55cfe60ec048 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55cfe60ec208 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55cfe60ec0f8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55cfe60ec170 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55cfe60ec358 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55cfe60ec2c8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55cfe60ec508 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55cfe60ec410 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55cfe60ec5c0 <col:20>
| `-OptimizeNoneAttr 0x55cfe60ec618 <col:30>
|-CXXMethodDecl 0x55cfe60ec738 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55cfe60ec640 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55cfe60ec7f0 <col:20>
| `-OptimizeNoneAttr 0x55cfe60ec848 <col:30>
|-CXXMethodDecl 0x55cfe60ec900 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55cfe60ec870 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55cfe60eca48 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55cfe60ec9b8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55cfe60ecb78 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55cfe60ecca8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55cfe60ecd78 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55cfe60ece48 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55cfe60ecf88 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55cfe60ecef8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55cfe60ed0d0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55cfe60ed040 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55cfe60ed218 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55cfe60ed188 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55cfe60ed2d0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55cfe60ed3d0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55cfe60ed340 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55cfe60ed488 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55cfe60ed548 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55cfe60ed648 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55cfe60ed7c8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55cfe60ed708 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55cfe60edf88 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55cfe60ed880 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55cfe60edee8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55cfe60edde8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55cfe60ee068 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55cfe60ee1b8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55cfe60ee128 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55cfe60ee270 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55cfe60ee4b8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55cfe60ee330 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55cfe60ee3a8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55cfe60ee678 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55cfe60ee588 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55cfe60ee8c8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55cfe60ee740 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55cfe60ee7b8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55cfe60ee988 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55cfe60eebe8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55cfe60eeaf0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55cfe60eecb8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.2 = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector.2 = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cfe60da4d8 prev 0x55cfe60bfd88 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55cfe60da5d0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55cfe60da6c0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55cfe6100f90 <col:16, line:828:9>
|-CXXDestructorDecl 0x55cfe60da7b0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55cfe6100fa0 <col:25, line:830:9>
|-CXXMethodDecl 0x55cfe60da8b0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55cfe60da960 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55cfe60daa08 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55cfe60daa08
| `-ParmVarDecl 0x55cfe60dab18 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55cfe60db2d8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55cfe60db2d8
  `-ParmVarDecl 0x55cfe60db3e8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cfe60bfb98 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55cfe60bfcf8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55cfe60bfd88 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55cfe60bfe40 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55cfe60bff48 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55cfe60bfe78 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55cfe60f2238 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55cfe60f2218 <col:31> 'int' 0
|-CXXConstructorDecl 0x55cfe60c0268 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55cfe60c00e0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55cfe60c0158 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55cfe60f2270 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55cfe60f2250 <col:59> 'int' 0
|-CXXConstructorDecl 0x55cfe60c0440 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55cfe60c0330 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55cfe60c03a8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55cfe60f22a8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55cfe60f2288 <col:55> 'int' 0
|-CXXConstructorDecl 0x55cfe60c07f8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55cfe60c05e0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55cfe60c0658 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55cfe60c06d0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55cfe60f22e0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55cfe60f22c0 <col:31> 'int' 0
|-CXXConstructorDecl 0x55cfe60c09b8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55cfe60c08f8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55cfe60c0ab0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55cfe60c0c98 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55cfe60c0ba0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55cfe60c0d88 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55cfe60f2690 <col:24, line:291:5>
|   `-ReturnStmt 0x55cfe60f2680 <line:290:9, col:79>
|     `-BinaryOperator 0x55cfe60f2660 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55cfe60f2538 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55cfe60f2490 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55cfe60f2470 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55cfe60f2368 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55cfe60f2350 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55cfe60f2338 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55cfe60f2308 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55cfe60e7e60
|       | |   |       `-CXXThisExpr 0x55cfe60f22f8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55cfe60f2458 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55cfe60f2440 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55cfe60f2408 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55cfe60f23d8 <col:28, col:35> '<bound member function type>' ->size 0x55cfe60a0c78
|       | |           `-ImplicitCastExpr 0x55cfe60f2428 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55cfe60f23c0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55cfe60f2390 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55cfe60e7e60
|       | |                 `-CXXThisExpr 0x55cfe60f2380 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55cfe60f2520 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55cfe60f2508 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55cfe60f24f0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55cfe60f24c0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55cfe60eee00
|       |         `-CXXThisExpr 0x55cfe60f24b0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55cfe60f2640 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55cfe60f2628 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55cfe60f2610 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55cfe60f25d0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55cfe60f25b8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55cfe60f2568 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55cfe60eeeb0
|         |     |   `-CXXThisExpr 0x55cfe60f2558 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55cfe60f2598 <col:73> 'int' 0
|         `-IntegerLiteral 0x55cfe60f25f0 <col:79> 'int' 0
|-CXXMethodDecl 0x55cfe60c0e48 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55cfe60f2868 <col:32, line:296:5>
|   `-ReturnStmt 0x55cfe60f2858 <line:295:9, col:49>
|     `-BinaryOperator 0x55cfe60f2838 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55cfe60f2718 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55cfe60f2700 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55cfe60f26e8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55cfe60f26b8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55cfe60eee00
|       |       `-CXXThisExpr 0x55cfe60f26a8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55cfe60f2818 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55cfe60f2800 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55cfe60f27e8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55cfe60f27a8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55cfe60f2790 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55cfe60f2740 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55cfe60eeeb0
|         |     |   `-CXXThisExpr 0x55cfe60f2730 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55cfe60f2770 <col:43> 'int' 0
|         `-IntegerLiteral 0x55cfe60f27c8 <col:49> 'int' 0
|-CXXMethodDecl 0x55cfe60c0f38 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55cfe60f2a78 <col:19, line:306:5>
|   |-IfStmt 0x55cfe60f2998 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55cfe60f28d8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55cfe60f28c0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55cfe60f2890 <col:13> 'Vector<String> *' lvalue ->_conf 0x55cfe60e7e60
|   | |     `-CXXThisExpr 0x55cfe60f2880 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55cfe60f2978 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55cfe60f2948 <col:13, col:20> '<bound member function type>' ->clear 0x55cfe60a3648
|   |     `-ImplicitCastExpr 0x55cfe60f2930 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55cfe60f2900 <col:13> 'Vector<String> *' lvalue ->_conf 0x55cfe60e7e60
|   |         `-CXXThisExpr 0x55cfe60f28f0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55cfe60f2a20 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55cfe60f29f0 <col:9, col:16> '<bound member function type>' .clear 0x55cfe60ee988
|   |   `-MemberExpr 0x55cfe60f29c0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55cfe60eeda0
|   |     `-CXXThisExpr 0x55cfe60f29b0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55cfe60f2a68 <line:305:9, col:17>
|     `-UnaryOperator 0x55cfe60f2a50 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55cfe60f2a40 <col:17> 'Args *' this
|-CXXMethodDecl 0x55cfe60c11b8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55cfe60c10c0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55cfe60c1338 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55cfe60c1270 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55cfe60c16b8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55cfe60c13e0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55cfe60c1618 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55cfe60c1488 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55cfe60c1500 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55cfe60f2d98 <col:67, line:327:5>
|     |-WhileStmt 0x55cfe60f2d48 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55cfe60f2b60 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55cfe60f2ae0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55cfe60024e8 0x55cfe5e50b98 0x55cfe5e50870 0x55cfe5e457c8 0x55cfe5e40bf0 0x55cfe5e404e0 0x55cfe5e16d30 0x55cfe5da2d40
|     | | |-DeclRefExpr 0x55cfe60f2aa0 <col:16> 'Iter' lvalue ParmVar 0x55cfe60c1488 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55cfe60f2ac0 <col:25> 'Iter' lvalue ParmVar 0x55cfe60c1500 'end' 'Iter'
|     | `-CompoundStmt 0x55cfe60f2d28 <col:30, line:325:9>
|     |   |-CallExpr 0x55cfe60f2cc8 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55cfe60f2ba8 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55cfe60f2c98 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55cfe60f2c28 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55cfe6007698 0x55cfe60072b8 0x55cfe6006ee8 0x55cfe6006b08 0x55cfe6006720 0x55cfe60062b8
|     |   |   `-DeclRefExpr 0x55cfe60f2c08 <col:24> 'Iter' lvalue ParmVar 0x55cfe60c1488 'begin' 'Iter'
|     |   `-UnaryOperator 0x55cfe60f2d10 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55cfe60f2cf0 <col:15> 'Iter' lvalue ParmVar 0x55cfe60c1488 'begin' 'Iter'
|     `-ReturnStmt 0x55cfe60f2d88 <line:326:9, col:17>
|       `-UnaryOperator 0x55cfe60f2d70 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55cfe60f2d60 <col:17> 'Args *' this
|-CXXMethodDecl 0x55cfe60c17c0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55cfe60c1730 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55cfe60c1908 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55cfe60c1878 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55cfe60c19d0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55cfe60f2e78 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55cfe60f2e18 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55cfe60f2dc8 <col:9> '<bound member function type>' ->reset_from 0x55cfe60ef228
|   | | `-CXXThisExpr 0x55cfe60f2db8 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55cfe60f2df8 <col:20> 'int' 0
|   `-ReturnStmt 0x55cfe60f2e68 <line:352:9, col:17>
|     `-UnaryOperator 0x55cfe60f2e50 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55cfe60f2e40 <col:17> 'Args *' this
|-VarDecl 0x55cfe60c1a88 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55cfe60c1af0 <col:38> 'int' 1
|-VarDecl 0x55cfe60c1b80 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55cfe60c1be8 <col:39> 'int' 2
|-VarDecl 0x55cfe60c1c78 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55cfe60c1ce0 <col:39> 'int' 4
|-VarDecl 0x55cfe60c1d70 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55cfe60c1dd8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55cfe60c2158 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55cfe60c1e50 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55cfe60c20b8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55cfe60c1f00 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55cfe60c1fa8 <col:37, col:40> col:40 referenced x 'T &'
| | `-CompoundStmt 0x55cfe60f2fd0 <col:43, line:371:5>
| |   `-ReturnStmt 0x55cfe60f2fc0 <line:370:9, col:34>
| |     `-CallExpr 0x55cfe60f2f88 <col:16, col:34> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55cfe60f2ea8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55cfe60f2f28 <col:21> 'const char *' lvalue ParmVar 0x55cfe60c1f00 'keyword' 'const char *'
| |       |-IntegerLiteral 0x55cfe60f2f48 <col:30> 'int' 0
| |       `-DeclRefExpr 0x55cfe60f2f68 <col:33> 'T' lvalue ParmVar 0x55cfe60c1fa8 'x' 'T &'
| |-CXXMethodDecl 0x55cfe61840d8 <line:369:5, line:371:5> line:369:11 used read 'Args &(const char *, unsigned int &)'
| | |-TemplateArgument type 'unsigned int'
| | |-ParmVarDecl 0x55cfe6183ef0 <col:16, col:28> col:28 keyword 'const char *'
| | `-ParmVarDecl 0x55cfe6183fc8 <col:37, col:40> col:40 x 'unsigned int &'
| `-CXXMethodDecl 0x55cfe61846e8 <col:5, line:371:5> line:369:11 used read 'Args &(const char *, bool &)'
|   |-TemplateArgument type 'bool'
|   |-ParmVarDecl 0x55cfe6184500 <col:16, col:28> col:28 keyword 'const char *'
|   `-ParmVarDecl 0x55cfe61845d8 <col:37, col:40> col:40 x 'bool &'
|-FunctionTemplateDecl 0x55cfe60c2488 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55cfe60c21c0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55cfe60c23e8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55cfe60c2270 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60c2318 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55cfe60f3120 <col:45, line:375:5>
|     `-ReturnStmt 0x55cfe60f3110 <line:374:9, col:42>
|       `-CallExpr 0x55cfe60f30d8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cfe60f2ff8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cfe60f3078 <col:21> 'const char *' lvalue ParmVar 0x55cfe60c2270 'keyword' 'const char *'
|         |-DeclRefExpr 0x55cfe60f3098 <col:30> 'const int' lvalue Var 0x55cfe60c1a88 'mandatory' 'const int'
|         `-DeclRefExpr 0x55cfe60f30b8 <col:41> 'T' lvalue ParmVar 0x55cfe60c2318 'x' 'T &'
|-FunctionTemplateDecl 0x55cfe60c27b8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55cfe60c24f0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55cfe60c2718 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55cfe60c25a0 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55cfe60c2648 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x55cfe60f3270 <col:45, line:379:5>
| |   `-ReturnStmt 0x55cfe60f3260 <line:378:9, col:43>
| |     `-CallExpr 0x55cfe60f3228 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55cfe60f3148 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55cfe60f31c8 <col:21> 'const char *' lvalue ParmVar 0x55cfe60c25a0 'keyword' 'const char *'
| |       |-DeclRefExpr 0x55cfe60f31e8 <col:30> 'const int' lvalue Var 0x55cfe60c1b80 'positional' 'const int'
| |       `-DeclRefExpr 0x55cfe60f3208 <col:42> 'T' lvalue ParmVar 0x55cfe60c2648 'x' 'T &'
| `-CXXMethodDecl 0x55cfe6183bd8 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, Vector<IPAddress> &)'
|   |-TemplateArgument type 'Vector<IPAddress>'
|   |-ParmVarDecl 0x55cfe61839f0 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x55cfe6183ac8 <col:39, col:42> col:42 x 'Vector<IPAddress> &'
|-FunctionTemplateDecl 0x55cfe60c2ae8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55cfe60c2820 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55cfe60c2a48 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55cfe60c28d0 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55cfe60c2978 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x55cfe60f3470 <col:46, line:383:5>
| |   `-ReturnStmt 0x55cfe60f3460 <line:382:9, col:55>
| |     `-CallExpr 0x55cfe60f3428 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55cfe60f3298 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55cfe60f3318 <col:21> 'const char *' lvalue ParmVar 0x55cfe60c28d0 'keyword' 'const char *'
| |       |-BinaryOperator 0x55cfe60f33e8 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55cfe60f3398 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55cfe60f3378 <col:30> 'const int' lvalue Var 0x55cfe60c1a88 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55cfe60f33d0 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55cfe60f33b0 <col:42> 'const int' lvalue Var 0x55cfe60c1b80 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x55cfe60f3408 <col:54> 'T' lvalue ParmVar 0x55cfe60c2978 'x' 'T &'
| `-CXXMethodDecl 0x55cfe6169898 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, IPAddress &)'
|   |-TemplateArgument type 'IPAddress'
|   |-ParmVarDecl 0x55cfe61696b0 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x55cfe6169788 <col:40, col:43> col:43 x 'IPAddress &'
|-FunctionTemplateDecl 0x55cfe60c7a28 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55cfe60c7690 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55cfe60c7988 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55cfe60c7740 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60c77c0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55cfe60c7868 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55cfe60f35b0 <col:54, line:388:5>
|     |-CallExpr 0x55cfe60f3538 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55cfe60f3488 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55cfe60f34c8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55cfe60f34d8 <col:30> 'const char *' lvalue ParmVar 0x55cfe60c7740 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55cfe60f34f8 <col:39> 'int' lvalue ParmVar 0x55cfe60c77c0 'flags' 'int'
|     | `-DeclRefExpr 0x55cfe60f3518 <col:46> 'T' lvalue ParmVar 0x55cfe60c7868 'x' 'T &'
|     `-ReturnStmt 0x55cfe60f35a0 <line:387:9, col:17>
|       `-UnaryOperator 0x55cfe60f3588 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55cfe60f3578 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55cfe60c7ed8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55cfe60c7a98 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55cfe60c7b18 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55cfe60c7e38 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55cfe60c7bd8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60c7c78 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55cfe60c7d18 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55cfe60f3720 <col:74, line:403:5>
|     `-ReturnStmt 0x55cfe60f3710 <line:402:9, col:56>
|       `-CallExpr 0x55cfe60f36d0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cfe60f35e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cfe60f3650 <col:28> 'const char *' lvalue ParmVar 0x55cfe60c7bd8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55cfe60f3670 <col:37> 'int' 0
|         |-DeclRefExpr 0x55cfe60f3690 <col:40> 'T' lvalue ParmVar 0x55cfe60c7c78 'x' 'T &'
|         `-DeclRefExpr 0x55cfe60f36b0 <col:43> 'const V' lvalue ParmVar 0x55cfe60c7d18 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55cfe60c8348 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55cfe60c7f48 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55cfe60c7fc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55cfe60c82a8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55cfe60c8088 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60c8128 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55cfe60c81c8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55cfe60f3888 <col:76, line:407:5>
|     `-ReturnStmt 0x55cfe60f3878 <line:406:9, col:65>
|       `-CallExpr 0x55cfe60f3838 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cfe60f3748 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cfe60f37b8 <col:28> 'const char *' lvalue ParmVar 0x55cfe60c8088 'keyword' 'const char *'
|         |-DeclRefExpr 0x55cfe60f37d8 <col:37> 'const int' lvalue Var 0x55cfe60c1b80 'positional' 'const int'
|         |-DeclRefExpr 0x55cfe60f37f8 <col:49> 'T' lvalue ParmVar 0x55cfe60c8128 'x' 'T &'
|         `-DeclRefExpr 0x55cfe60f3818 <col:52> 'const V' lvalue ParmVar 0x55cfe60c81c8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55cfe60c8898 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55cfe60c83b8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55cfe60c8438 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55cfe60c87f8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55cfe60c84f8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60c8578 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55cfe60c8618 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55cfe60c86b8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55cfe60f39f0 <col:85, line:412:5>
|     |-CallExpr 0x55cfe60f3970 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55cfe60f38a0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55cfe60f38e0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55cfe60f38f0 <col:37> 'const char *' lvalue ParmVar 0x55cfe60c84f8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55cfe60f3910 <col:46> 'int' lvalue ParmVar 0x55cfe60c8578 'flags' 'int'
|     | |-DeclRefExpr 0x55cfe60f3930 <col:53> 'T' lvalue ParmVar 0x55cfe60c8618 'x' 'T &'
|     | `-DeclRefExpr 0x55cfe60f3950 <col:56> 'const V' lvalue ParmVar 0x55cfe60c86b8 'default_value' 'const V &'
|     `-ReturnStmt 0x55cfe60f39e0 <line:411:9, col:17>
|       `-UnaryOperator 0x55cfe60f39c8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55cfe60f39b8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55cfe60c8d28 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55cfe60c8910 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cfe60c8988 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55cfe60c8c88 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55cfe60c8a48 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60c8ac0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55cfe60c8b68 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55cfe60f3b70 <col:53, line:425:5>
|     `-ReturnStmt 0x55cfe60f3b60 <line:424:9, col:42>
|       `-CallExpr 0x55cfe60f3b20 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cfe60f3a20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cfe60f3aa0 <col:21> 'const char *' lvalue ParmVar 0x55cfe60c8a48 'keyword' 'const char *'
|         |-IntegerLiteral 0x55cfe60f3ac0 <col:30> 'int' 0
|         |-DeclRefExpr 0x55cfe60f3ae0 <col:33> 'P' lvalue ParmVar 0x55cfe60c8ac0 'parser' 'P'
|         `-DeclRefExpr 0x55cfe60f3b00 <col:41> 'T' lvalue ParmVar 0x55cfe60c8b68 'x' 'T &'
|-FunctionTemplateDecl 0x55cfe60c9178 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55cfe60c8d98 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cfe60c8e18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55cfe60c90d8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55cfe60c8ed8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60c8f50 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55cfe60c8ff8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55cfe60f3ce8 <col:55, line:429:5>
|     `-ReturnStmt 0x55cfe60f3cd8 <line:428:9, col:50>
|       `-CallExpr 0x55cfe60f3c98 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cfe60f3b98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cfe60f3c18 <col:21> 'const char *' lvalue ParmVar 0x55cfe60c8ed8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55cfe60f3c38 <col:30> 'const int' lvalue Var 0x55cfe60c1a88 'mandatory' 'const int'
|         |-DeclRefExpr 0x55cfe60f3c58 <col:41> 'P' lvalue ParmVar 0x55cfe60c8f50 'parser' 'P'
|         `-DeclRefExpr 0x55cfe60f3c78 <col:49> 'T' lvalue ParmVar 0x55cfe60c8ff8 'x' 'T &'
|-FunctionTemplateDecl 0x55cfe60c95c8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55cfe60c91e8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cfe60c9268 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x55cfe60c9528 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x55cfe60c9328 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55cfe60c93a0 <col:39, col:41> col:41 referenced parser 'P'
| | |-ParmVarDecl 0x55cfe60c9448 <col:49, col:52> col:52 referenced x 'T &'
| | `-CompoundStmt 0x55cfe60f3e60 <col:55, line:433:5>
| |   `-ReturnStmt 0x55cfe60f3e50 <line:432:9, col:51>
| |     `-CallExpr 0x55cfe60f3e10 <col:16, col:51> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55cfe60f3d10 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55cfe60f3d90 <col:21> 'const char *' lvalue ParmVar 0x55cfe60c9328 'keyword' 'const char *'
| |       |-DeclRefExpr 0x55cfe60f3db0 <col:30> 'const int' lvalue Var 0x55cfe60c1b80 'positional' 'const int'
| |       |-DeclRefExpr 0x55cfe60f3dd0 <col:42> 'P' lvalue ParmVar 0x55cfe60c93a0 'parser' 'P'
| |       `-DeclRefExpr 0x55cfe60f3df0 <col:50> 'T' lvalue ParmVar 0x55cfe60c9448 'x' 'T &'
| `-CXXMethodDecl 0x55cfe6183640 <line:431:5, line:433:5> line:431:11 used read_p 'Args &(const char *, WordArg, String &)'
|   |-TemplateArgument type 'WordArg'
|   |-TemplateArgument type 'String'
|   |-ParmVarDecl 0x55cfe616ae10 <col:18, col:30> col:30 keyword 'const char *'
|   |-ParmVarDecl 0x55cfe616aeb8 <col:39, col:41> col:41 parser 'WordArg':'WordArg'
|   `-ParmVarDecl 0x55cfe616af88 <col:49, col:52> col:52 x 'String &'
|-FunctionTemplateDecl 0x55cfe60c9a18 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55cfe60c9638 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cfe60c96b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x55cfe60c9978 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x55cfe60c9778 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55cfe60c97f0 <col:40, col:42> col:42 referenced parser 'P'
| | |-ParmVarDecl 0x55cfe60c9898 <col:50, col:53> col:53 referenced x 'T &'
| | `-CompoundStmt 0x55cfe60f4088 <col:56, line:437:5>
| |   `-ReturnStmt 0x55cfe60f4078 <line:436:9, col:63>
| |     `-CallExpr 0x55cfe60f4038 <col:16, col:63> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55cfe60f3e88 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55cfe60f3f08 <col:21> 'const char *' lvalue ParmVar 0x55cfe60c9778 'keyword' 'const char *'
| |       |-BinaryOperator 0x55cfe60f3fd8 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55cfe60f3f88 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55cfe60f3f68 <col:30> 'const int' lvalue Var 0x55cfe60c1a88 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55cfe60f3fc0 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55cfe60f3fa0 <col:42> 'const int' lvalue Var 0x55cfe60c1b80 'positional' 'const int' non_odr_use_constant
| |       |-DeclRefExpr 0x55cfe60f3ff8 <col:54> 'P' lvalue ParmVar 0x55cfe60c97f0 'parser' 'P'
| |       `-DeclRefExpr 0x55cfe60f4018 <col:62> 'T' lvalue ParmVar 0x55cfe60c9898 'x' 'T &'
| `-CXXMethodDecl 0x55cfe616a3f8 <line:435:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, NamedIntArg, int &)'
|   |-TemplateArgument type 'NamedIntArg'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55cfe616a160 <col:19, col:31> col:31 keyword 'const char *'
|   |-ParmVarDecl 0x55cfe616a208 <col:40, col:42> col:42 parser 'NamedIntArg':'NamedIntArg'
|   `-ParmVarDecl 0x55cfe616a2d8 <col:50, col:53> col:53 x 'int &'
|-FunctionTemplateDecl 0x55cfe60c9f48 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55cfe60c9a88 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cfe60c9b08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55cfe60c9ea8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55cfe60c9bc8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60c9c48 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55cfe60c9cc0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55cfe60c9d68 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55cfe60f41f0 <col:64, line:442:5>
|     |-CallExpr 0x55cfe60f4170 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55cfe60f40a0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55cfe60f40e0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55cfe60f40f0 <col:30> 'const char *' lvalue ParmVar 0x55cfe60c9bc8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55cfe60f4110 <col:39> 'int' lvalue ParmVar 0x55cfe60c9c48 'flags' 'int'
|     | |-DeclRefExpr 0x55cfe60f4130 <col:46> 'P' lvalue ParmVar 0x55cfe60c9cc0 'parser' 'P'
|     | `-DeclRefExpr 0x55cfe60f4150 <col:54> 'T' lvalue ParmVar 0x55cfe60c9d68 'x' 'T &'
|     `-ReturnStmt 0x55cfe60f41e0 <line:441:9, col:17>
|       `-UnaryOperator 0x55cfe60f41c8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55cfe60f41b8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55cfe60ca548 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55cfe60c9fc0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cfe60ca038 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55cfe60ca0b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55cfe60ca4a8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55cfe60ca180 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60ca1f8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55cfe60ca298 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55cfe60ca368 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55cfe60f4388 <col:84, line:458:5>
|     `-ReturnStmt 0x55cfe60f4378 <line:457:9, col:64>
|       `-CallExpr 0x55cfe60f4330 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cfe60f4220 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cfe60f4290 <col:28> 'const char *' lvalue ParmVar 0x55cfe60ca180 'keyword' 'const char *'
|         |-IntegerLiteral 0x55cfe60f42b0 <col:37> 'int' 0
|         |-DeclRefExpr 0x55cfe60f42d0 <col:40> 'P' lvalue ParmVar 0x55cfe60ca1f8 'parser' 'P'
|         |-DeclRefExpr 0x55cfe60f42f0 <col:48> 'T' lvalue ParmVar 0x55cfe60ca298 'x' 'T &'
|         `-DeclRefExpr 0x55cfe60f4310 <col:51> 'const V' lvalue ParmVar 0x55cfe60ca368 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55cfe60caac8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55cfe60ca5c0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cfe60ca638 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55cfe60ca6b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55cfe60caa28 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55cfe60ca780 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60ca7f8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55cfe60ca898 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55cfe60ca938 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55cfe60f4518 <col:86, line:462:5>
|     `-ReturnStmt 0x55cfe60f4508 <line:461:9, col:73>
|       `-CallExpr 0x55cfe60f44c0 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cfe60f43b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cfe60f4420 <col:28> 'const char *' lvalue ParmVar 0x55cfe60ca780 'keyword' 'const char *'
|         |-DeclRefExpr 0x55cfe60f4440 <col:37> 'const int' lvalue Var 0x55cfe60c1b80 'positional' 'const int'
|         |-DeclRefExpr 0x55cfe60f4460 <col:49> 'P' lvalue ParmVar 0x55cfe60ca7f8 'parser' 'P'
|         |-DeclRefExpr 0x55cfe60f4480 <col:57> 'T' lvalue ParmVar 0x55cfe60ca898 'x' 'T &'
|         `-DeclRefExpr 0x55cfe60f44a0 <col:60> 'const V' lvalue ParmVar 0x55cfe60ca938 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55cfe60cb128 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55cfe60cab40 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cfe60cabb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55cfe60cac38 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55cfe60cb088 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55cfe60cad00 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60cad80 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55cfe60cadf8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55cfe60cae98 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55cfe60caf38 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55cfe60f46a8 <col:95, line:467:5>
|     |-CallExpr 0x55cfe60f4620 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55cfe60f4530 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55cfe60f4570 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55cfe60f4580 <col:37> 'const char *' lvalue ParmVar 0x55cfe60cad00 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55cfe60f45a0 <col:46> 'int' lvalue ParmVar 0x55cfe60cad80 'flags' 'int'
|     | |-DeclRefExpr 0x55cfe60f45c0 <col:53> 'P' lvalue ParmVar 0x55cfe60cadf8 'parser' 'P'
|     | |-DeclRefExpr 0x55cfe60f45e0 <col:61> 'T' lvalue ParmVar 0x55cfe60cae98 'x' 'T &'
|     | `-DeclRefExpr 0x55cfe60f4600 <col:64> 'const V' lvalue ParmVar 0x55cfe60caf38 'default_value' 'const V &'
|     `-ReturnStmt 0x55cfe60f4698 <line:466:9, col:17>
|       `-UnaryOperator 0x55cfe60f4680 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55cfe60f4670 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55cfe60cb708 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55cfe60cb1a8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cfe60cb228 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55cfe60cb2a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55cfe60cb668 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55cfe60cb370 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60cb3e8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55cfe60cb488 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55cfe60cb528 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55cfe60f4850 <col:63, line:481:5>
|     `-ReturnStmt 0x55cfe60f4840 <line:480:9, col:47>
|       `-CallExpr 0x55cfe60f47f8 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cfe60f46d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cfe60f4758 <col:21> 'const char *' lvalue ParmVar 0x55cfe60cb370 'keyword' 'const char *'
|         |-IntegerLiteral 0x55cfe60f4778 <col:30> 'int' 0
|         |-DeclRefExpr 0x55cfe60f4798 <col:33> 'P' lvalue ParmVar 0x55cfe60cb3e8 'parser' 'P'
|         |-DeclRefExpr 0x55cfe60f47b8 <col:41> 'T1' lvalue ParmVar 0x55cfe60cb488 'x1' 'T1 &'
|         `-DeclRefExpr 0x55cfe60f47d8 <col:45> 'T2' lvalue ParmVar 0x55cfe60cb528 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55cfe60cbc88 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55cfe60cb780 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cfe60cb7f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55cfe60cb878 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55cfe60cbbe8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55cfe60cb940 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60cb9b8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55cfe60cba58 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55cfe60cbaf8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55cfe60f49f0 <col:65, line:485:5>
|     `-ReturnStmt 0x55cfe60f49e0 <line:484:9, col:55>
|       `-CallExpr 0x55cfe60f4998 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cfe60f4878 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cfe60f48f8 <col:21> 'const char *' lvalue ParmVar 0x55cfe60cb940 'keyword' 'const char *'
|         |-DeclRefExpr 0x55cfe60f4918 <col:30> 'const int' lvalue Var 0x55cfe60c1a88 'mandatory' 'const int'
|         |-DeclRefExpr 0x55cfe60f4938 <col:41> 'P' lvalue ParmVar 0x55cfe60cb9b8 'parser' 'P'
|         |-DeclRefExpr 0x55cfe60f4958 <col:49> 'T1' lvalue ParmVar 0x55cfe60cba58 'x1' 'T1 &'
|         `-DeclRefExpr 0x55cfe60f4978 <col:53> 'T2' lvalue ParmVar 0x55cfe60cbaf8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55cfe60cc208 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55cfe60cbd00 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cfe60cbd78 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55cfe60cbdf8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55cfe60cc168 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55cfe60cbec0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60cbf38 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55cfe60cbfd8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55cfe60cc078 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55cfe60f4b90 <col:65, line:489:5>
|     `-ReturnStmt 0x55cfe60f4b80 <line:488:9, col:56>
|       `-CallExpr 0x55cfe60f4b38 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cfe60f4a18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cfe60f4a98 <col:21> 'const char *' lvalue ParmVar 0x55cfe60cbec0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55cfe60f4ab8 <col:30> 'const int' lvalue Var 0x55cfe60c1b80 'positional' 'const int'
|         |-DeclRefExpr 0x55cfe60f4ad8 <col:42> 'P' lvalue ParmVar 0x55cfe60cbf38 'parser' 'P'
|         |-DeclRefExpr 0x55cfe60f4af8 <col:50> 'T1' lvalue ParmVar 0x55cfe60cbfd8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55cfe60f4b18 <col:54> 'T2' lvalue ParmVar 0x55cfe60cc078 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55cfe60cc788 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55cfe60cc280 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cfe60cc2f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55cfe60cc378 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55cfe60cc6e8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55cfe60cc440 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60cc4b8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55cfe60cc558 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55cfe60cc5f8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55cfe60f4de0 <col:66, line:493:5>
|     `-ReturnStmt 0x55cfe60f4dd0 <line:492:9, col:68>
|       `-CallExpr 0x55cfe60f4d88 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cfe60f4bb8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cfe60f4c38 <col:21> 'const char *' lvalue ParmVar 0x55cfe60cc440 'keyword' 'const char *'
|         |-BinaryOperator 0x55cfe60f4d08 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55cfe60f4cb8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55cfe60f4c98 <col:30> 'const int' lvalue Var 0x55cfe60c1a88 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55cfe60f4cf0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55cfe60f4cd0 <col:42> 'const int' lvalue Var 0x55cfe60c1b80 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55cfe60f4d28 <col:54> 'P' lvalue ParmVar 0x55cfe60cc4b8 'parser' 'P'
|         |-DeclRefExpr 0x55cfe60f4d48 <col:62> 'T1' lvalue ParmVar 0x55cfe60cc558 'x1' 'T1 &'
|         `-DeclRefExpr 0x55cfe60f4d68 <col:66> 'T2' lvalue ParmVar 0x55cfe60cc5f8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55cfe60ccde8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55cfe60cc800 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cfe60cc878 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55cfe60cc8f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55cfe60ccd48 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55cfe60cc9c0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60cca40 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55cfe60ccab8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55cfe60ccb58 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55cfe60ccbf8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55cfe60f4f70 <col:74, line:498:5>
|     |-CallExpr 0x55cfe60f4ee8 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55cfe60f4df8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55cfe60f4e38 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55cfe60f4e48 <col:30> 'const char *' lvalue ParmVar 0x55cfe60cc9c0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55cfe60f4e68 <col:39> 'int' lvalue ParmVar 0x55cfe60cca40 'flags' 'int'
|     | |-DeclRefExpr 0x55cfe60f4e88 <col:46> 'P' lvalue ParmVar 0x55cfe60ccab8 'parser' 'P'
|     | |-DeclRefExpr 0x55cfe60f4ea8 <col:54> 'T1' lvalue ParmVar 0x55cfe60ccb58 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55cfe60f4ec8 <col:58> 'T2' lvalue ParmVar 0x55cfe60ccbf8 'x2' 'T2 &'
|     `-ReturnStmt 0x55cfe60f4f60 <line:497:9, col:17>
|       `-UnaryOperator 0x55cfe60f4f48 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55cfe60f4f38 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55cfe60cd148 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55cfe60cce68 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55cfe60cd0a8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55cfe60ccf20 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60ccf98 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55cfe60f50b8 <col:52, line:509:5>
|     `-ReturnStmt 0x55cfe60f50a8 <line:508:9, col:44>
|       `-CallExpr 0x55cfe60f5070 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cfe60f4fa0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cfe60f5010 <col:26> 'const char *' lvalue ParmVar 0x55cfe60ccf20 'keyword' 'const char *'
|         |-IntegerLiteral 0x55cfe60f5030 <col:35> 'int' 0
|         `-DeclRefExpr 0x55cfe60f5050 <col:38> 'P' lvalue ParmVar 0x55cfe60ccf98 'parser' 'P'
|-FunctionTemplateDecl 0x55cfe60cd448 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55cfe60cd1b0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55cfe60cd3a8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55cfe60cd260 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60cd2d8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55cfe60f51f8 <col:54, line:513:5>
|     `-ReturnStmt 0x55cfe60f51e8 <line:512:9, col:52>
|       `-CallExpr 0x55cfe60f51b0 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cfe60f50e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cfe60f5150 <col:26> 'const char *' lvalue ParmVar 0x55cfe60cd260 'keyword' 'const char *'
|         |-DeclRefExpr 0x55cfe60f5170 <col:35> 'const int' lvalue Var 0x55cfe60c1a88 'mandatory' 'const int'
|         `-DeclRefExpr 0x55cfe60f5190 <col:46> 'P' lvalue ParmVar 0x55cfe60cd2d8 'parser' 'P'
|-FunctionTemplateDecl 0x55cfe60cd748 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55cfe60cd4b0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55cfe60cd6a8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55cfe60cd560 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60cd5d8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55cfe60f5338 <col:54, line:517:5>
|     `-ReturnStmt 0x55cfe60f5328 <line:516:9, col:53>
|       `-CallExpr 0x55cfe60f52f0 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cfe60f5220 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cfe60f5290 <col:26> 'const char *' lvalue ParmVar 0x55cfe60cd560 'keyword' 'const char *'
|         |-DeclRefExpr 0x55cfe60f52b0 <col:35> 'const int' lvalue Var 0x55cfe60c1b80 'positional' 'const int'
|         `-DeclRefExpr 0x55cfe60f52d0 <col:47> 'P' lvalue ParmVar 0x55cfe60cd5d8 'parser' 'P'
|-FunctionTemplateDecl 0x55cfe60cda48 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55cfe60cd7b0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55cfe60cd9a8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55cfe60cd860 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60cd8d8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55cfe60f5528 <col:55, line:521:5>
|     `-ReturnStmt 0x55cfe60f5518 <line:520:9, col:65>
|       `-CallExpr 0x55cfe60f54e0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cfe60f5360 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cfe60f53d0 <col:26> 'const char *' lvalue ParmVar 0x55cfe60cd860 'keyword' 'const char *'
|         |-BinaryOperator 0x55cfe60f54a0 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55cfe60f5450 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55cfe60f5430 <col:35> 'const int' lvalue Var 0x55cfe60c1a88 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55cfe60f5488 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55cfe60f5468 <col:47> 'const int' lvalue Var 0x55cfe60c1b80 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55cfe60f54c0 <col:59> 'P' lvalue ParmVar 0x55cfe60cd8d8 'parser' 'P'
|-FunctionTemplateDecl 0x55cfe60cde18 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55cfe60cdab0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55cfe60cdd78 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55cfe60cdb60 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60cdbe0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55cfe60cdc58 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55cfe60f5668 <col:63, line:526:5>
|     |-CallExpr 0x55cfe60f55f0 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55cfe60f5540 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55cfe60f5580 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55cfe60f5590 <col:35> 'const char *' lvalue ParmVar 0x55cfe60cdb60 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55cfe60f55b0 <col:44> 'int' lvalue ParmVar 0x55cfe60cdbe0 'flags' 'int'
|     | `-DeclRefExpr 0x55cfe60f55d0 <col:51> 'P' lvalue ParmVar 0x55cfe60cdc58 'parser' 'P'
|     `-ReturnStmt 0x55cfe60f5658 <line:525:9, col:17>
|       `-UnaryOperator 0x55cfe60f5640 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55cfe60f5630 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55cfe60ce268 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55cfe60cde88 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cfe60cdf08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55cfe60ce1c8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55cfe60cdfc8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60ce040 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55cfe60ce0e8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55cfe60f57c0 <col:58, line:541:5>
|     `-ReturnStmt 0x55cfe60f57b0 <line:540:9, col:39>
|       `-CallExpr 0x55cfe60f5778 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cfe60f5698 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cfe60f5718 <col:21> 'const char *' lvalue ParmVar 0x55cfe60cdfc8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55cfe60f5738 <col:30> 'P' lvalue ParmVar 0x55cfe60ce040 'parser' 'P'
|         `-DeclRefExpr 0x55cfe60f5758 <col:38> 'T' lvalue ParmVar 0x55cfe60ce0e8 'x' 'T &'
|-FunctionTemplateDecl 0x55cfe60ce6b8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55cfe60ce2d8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cfe60ce358 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55cfe60ce618 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55cfe60ce418 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60ce490 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55cfe60ce538 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55cfe60f58f8 <col:60, line:545:5>
|     `-ReturnStmt 0x55cfe60f58e8 <line:544:9, col:41>
|       `-CallExpr 0x55cfe60f58b0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cfe60f57e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cfe60f5850 <col:23> 'const char *' lvalue ParmVar 0x55cfe60ce418 'keyword' 'const char *'
|         |-DeclRefExpr 0x55cfe60f5870 <col:32> 'P' lvalue ParmVar 0x55cfe60ce490 'parser' 'P'
|         `-DeclRefExpr 0x55cfe60f5890 <col:40> 'T' lvalue ParmVar 0x55cfe60ce538 'x' 'T &'
|-FunctionTemplateDecl 0x55cfe60ceb08 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55cfe60ce728 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cfe60ce7a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55cfe60cea68 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55cfe60ce868 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60ce8e0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55cfe60ce988 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55cfe60f5a30 <col:60, line:549:5>
|     `-ReturnStmt 0x55cfe60f5a20 <line:548:9, col:41>
|       `-CallExpr 0x55cfe60f59e8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cfe60f5920 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cfe60f5988 <col:23> 'const char *' lvalue ParmVar 0x55cfe60ce868 'keyword' 'const char *'
|         |-DeclRefExpr 0x55cfe60f59a8 <col:32> 'P' lvalue ParmVar 0x55cfe60ce8e0 'parser' 'P'
|         `-DeclRefExpr 0x55cfe60f59c8 <col:40> 'T' lvalue ParmVar 0x55cfe60ce988 'x' 'T &'
|-FunctionTemplateDecl 0x55cfe60cef58 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55cfe60ceb78 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cfe60cebf8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55cfe60ceeb8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55cfe60cecb8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60ced30 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55cfe60cedd8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55cfe60f5b68 <col:61, line:553:5>
|     `-ReturnStmt 0x55cfe60f5b58 <line:552:9, col:42>
|       `-CallExpr 0x55cfe60f5b20 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cfe60f5a58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cfe60f5ac0 <col:24> 'const char *' lvalue ParmVar 0x55cfe60cecb8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55cfe60f5ae0 <col:33> 'P' lvalue ParmVar 0x55cfe60ced30 'parser' 'P'
|         `-DeclRefExpr 0x55cfe60f5b00 <col:41> 'T' lvalue ParmVar 0x55cfe60cedd8 'x' 'T &'
|-FunctionTemplateDecl 0x55cfe60cf438 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55cfe60cefc8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cfe60cf048 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55cfe60cf398 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55cfe60cf108 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60cf188 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55cfe60cf200 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55cfe60cf2a8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55cfe60f5ce0 <col:69, line:557:5>
|     `-ReturnStmt 0x55cfe60f5cd0 <line:556:9, col:46>
|       `-CallExpr 0x55cfe60f5c90 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cfe60f5b90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cfe60f5c10 <col:21> 'const char *' lvalue ParmVar 0x55cfe60cf108 'keyword' 'const char *'
|         |-DeclRefExpr 0x55cfe60f5c30 <col:30> 'int' lvalue ParmVar 0x55cfe60cf188 'flags' 'int'
|         |-DeclRefExpr 0x55cfe60f5c50 <col:37> 'P' lvalue ParmVar 0x55cfe60cf200 'parser' 'P'
|         `-DeclRefExpr 0x55cfe60f5c70 <col:45> 'T' lvalue ParmVar 0x55cfe60cf2a8 'x' 'T &'
|-FunctionTemplateDecl 0x55cfe60d40e0 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55cfe60cf4b0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55cfe60d4040 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55cfe60cf560 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60cf5d8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55cfe60f5e20 <col:56, line:571:5>
|     `-ReturnStmt 0x55cfe60f5e10 <line:570:9, col:48>
|       `-CallExpr 0x55cfe60f5dd8 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cfe60f5d08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cfe60f5d78 <col:30> 'const char *' lvalue ParmVar 0x55cfe60cf560 'keyword' 'const char *'
|         |-IntegerLiteral 0x55cfe60f5d98 <col:39> 'int' 0
|         `-DeclRefExpr 0x55cfe60f5db8 <col:42> 'P' lvalue ParmVar 0x55cfe60cf5d8 'parser' 'P'
|-FunctionTemplateDecl 0x55cfe60d4478 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55cfe60d4148 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55cfe60d43d8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55cfe60d4200 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60d4280 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55cfe60d42f8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55cfe60f5ff0 <col:67, line:576:5>
|     |-CallExpr 0x55cfe60f5f78 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55cfe60f5e38 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55cfe60f5e78 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55cfe60f5e88 <col:39> 'const char *' lvalue ParmVar 0x55cfe60d4200 'keyword' 'const char *'
|     | |-BinaryOperator 0x55cfe60f5f38 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55cfe60f5ee8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55cfe60f5ea8 <col:48> 'int' lvalue ParmVar 0x55cfe60d4280 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55cfe60f5f20 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55cfe60f5f00 <col:56> 'const int' lvalue Var 0x55cfe60c1d70 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55cfe60f5f58 <col:68> 'P' lvalue ParmVar 0x55cfe60d42f8 'parser' 'P'
|     `-ReturnStmt 0x55cfe60f5fe0 <line:575:9, col:17>
|       `-UnaryOperator 0x55cfe60f5fc8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55cfe60f5fb8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55cfe60d48c8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55cfe60d44e8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cfe60d4568 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55cfe60d4828 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55cfe60d4628 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60d46a0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55cfe60d4748 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55cfe60f6160 <col:62, line:592:5>
|     `-ReturnStmt 0x55cfe60f6150 <line:591:9, col:51>
|       `-CallExpr 0x55cfe60f6110 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cfe60f6020 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cfe60f6090 <col:30> 'const char *' lvalue ParmVar 0x55cfe60d4628 'keyword' 'const char *'
|         |-IntegerLiteral 0x55cfe60f60b0 <col:39> 'int' 0
|         |-DeclRefExpr 0x55cfe60f60d0 <col:42> 'P' lvalue ParmVar 0x55cfe60d46a0 'parser' 'P'
|         `-DeclRefExpr 0x55cfe60f60f0 <col:50> 'T' lvalue ParmVar 0x55cfe60d4748 'x' 'T &'
|-FunctionTemplateDecl 0x55cfe60d4da8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55cfe60d4938 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cfe60d49b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55cfe60d4d08 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55cfe60d4a78 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60d4af8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55cfe60d4b70 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55cfe60d4c18 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55cfe60f6358 <col:73, line:597:5>
|     |-CallExpr 0x55cfe60f62d8 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55cfe60f6178 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55cfe60f61b8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55cfe60f61c8 <col:39> 'const char *' lvalue ParmVar 0x55cfe60d4a78 'keyword' 'const char *'
|     | |-BinaryOperator 0x55cfe60f6278 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55cfe60f6228 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55cfe60f61e8 <col:48> 'int' lvalue ParmVar 0x55cfe60d4af8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55cfe60f6260 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55cfe60f6240 <col:56> 'const int' lvalue Var 0x55cfe60c1d70 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55cfe60f6298 <col:68> 'P' lvalue ParmVar 0x55cfe60d4b70 'parser' 'P'
|     | `-DeclRefExpr 0x55cfe60f62b8 <col:76> 'T' lvalue ParmVar 0x55cfe60d4c18 'x' 'T &'
|     `-ReturnStmt 0x55cfe60f6348 <line:596:9, col:17>
|       `-UnaryOperator 0x55cfe60f6330 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55cfe60f6320 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55cfe60d5358 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55cfe60d4e20 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cfe60d4e98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55cfe60d52b8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55cfe60d4f58 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60d4fd0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55cfe60d5190 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55cfe60f64c8 <col:65, line:614:5>
|     `-ReturnStmt 0x55cfe60f64b8 <line:613:9, col:46>
|       `-CallExpr 0x55cfe60f6478 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cfe60f6388 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cfe60f63f8 <col:25> 'const char *' lvalue ParmVar 0x55cfe60d4f58 'keyword' 'const char *'
|         |-IntegerLiteral 0x55cfe60f6418 <col:34> 'int' 0
|         |-DeclRefExpr 0x55cfe60f6438 <col:37> 'P' lvalue ParmVar 0x55cfe60d4fd0 'parser' 'P'
|         `-DeclRefExpr 0x55cfe60f6458 <col:45> 'Vector<T>' lvalue ParmVar 0x55cfe60d5190 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55cfe60d5788 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55cfe60d53c8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55cfe60d56e8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55cfe60d5480 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60d55d0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55cfe60f66e0 <col:55, line:618:5>
|     `-ReturnStmt 0x55cfe60f66d0 <line:617:9, col:55>
|       `-CallExpr 0x55cfe60f6690 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cfe60f64f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cfe60f6560 <col:25> 'const char *' lvalue ParmVar 0x55cfe60d5480 'keyword' 'const char *'
|         |-IntegerLiteral 0x55cfe60f6580 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55cfe60f6650 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55cfe60f6670 <col:54> 'Vector<T>' lvalue ParmVar 0x55cfe60d55d0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55cfe60d5d58 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55cfe60d57f0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cfe60d5868 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55cfe60d5cb8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55cfe60d5928 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60d59a8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55cfe60d5a20 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55cfe60d5b70 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55cfe60f68d8 <col:76, line:623:5>
|     |-CallExpr 0x55cfe60f6858 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55cfe60f66f8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55cfe60f6738 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55cfe60f6748 <col:34> 'const char *' lvalue ParmVar 0x55cfe60d5928 'keyword' 'const char *'
|     | |-BinaryOperator 0x55cfe60f67f8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55cfe60f67a8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55cfe60f6768 <col:43> 'int' lvalue ParmVar 0x55cfe60d59a8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55cfe60f67e0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55cfe60f67c0 <col:51> 'const int' lvalue Var 0x55cfe60c1d70 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55cfe60f6818 <col:63> 'P' lvalue ParmVar 0x55cfe60d5a20 'parser' 'P'
|     | `-DeclRefExpr 0x55cfe60f6838 <col:71> 'Vector<T>' lvalue ParmVar 0x55cfe60d5b70 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55cfe60f68c8 <line:622:9, col:17>
|       `-UnaryOperator 0x55cfe60f68b0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55cfe60f68a0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55cfe60d6298 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55cfe60d5dd0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cfe60d5e48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55cfe60d61f8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55cfe60d5f08 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60d5f88 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55cfe60d60d0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55cfe60f6b40 <col:66, line:627:5>
|     `-ReturnStmt 0x55cfe60f6b30 <line:626:9, col:59>
|       `-CallExpr 0x55cfe60f6af0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55cfe60f6908 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55cfe60f6978 <col:25> 'const char *' lvalue ParmVar 0x55cfe60d5f08 'keyword' 'const char *'
|         |-DeclRefExpr 0x55cfe60f6998 <col:34> 'int' lvalue ParmVar 0x55cfe60d5f88 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55cfe60f6ab0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55cfe60f6ad0 <col:58> 'Vector<T>' lvalue ParmVar 0x55cfe60d60d0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55cfe60d6328 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55cfe60f6bc0 <col:25, line:633:5>
|   `-ReturnStmt 0x55cfe60f6bb0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55cfe60f6b98 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55cfe60f6b68 <col:16> 'const bool' lvalue ->_status 0x55cfe60e7cc8
|         `-CXXThisExpr 0x55cfe60f6b58 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55cfe60d64a8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55cfe60d63e0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55cfe60f6ca8 <col:27, line:639:5>
|   |-BinaryOperator 0x55cfe60f6c50 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55cfe60f6bd8 <col:9> 'bool' lvalue ParmVar 0x55cfe60d63e0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55cfe60f6c38 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55cfe60f6c08 <col:13> 'bool' lvalue ->_status 0x55cfe60e7cc8
|   |     `-CXXThisExpr 0x55cfe60f6bf8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55cfe60f6c98 <line:638:9, col:17>
|     `-UnaryOperator 0x55cfe60f6c80 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55cfe60f6c70 <col:17> 'Args *' this
|-CXXMethodDecl 0x55cfe60d6628 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55cfe60d6568 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55cfe60f6d98 <col:39, line:644:5>
|   |-BinaryOperator 0x55cfe60f6d40 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55cfe60f6cc8 <col:9> 'bool' lvalue ParmVar 0x55cfe60d6568 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55cfe60f6d28 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55cfe60f6cf8 <col:13> 'const bool' lvalue ->_status 0x55cfe60e7cc8
|   |     `-CXXThisExpr 0x55cfe60f6ce8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55cfe60f6d88 <line:643:9, col:17>
|     `-UnaryOperator 0x55cfe60f6d70 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55cfe60f6d60 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55cfe60d66f0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55cfe60f6e40 <col:30, line:651:5>
|   `-ReturnStmt 0x55cfe60f6e30 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55cfe60f6e18 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55cfe60f6de8 <col:16> 'bool' lvalue ->_read_status 0x55cfe5fd04f0
|         `-ImplicitCastExpr 0x55cfe60f6dc8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55cfe60f6db8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55cfe60d6838 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55cfe60d67a8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55cfe60f6f48 <col:32, line:658:5>
|   |-BinaryOperator 0x55cfe60f6ef0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55cfe60f6e58 <col:9> 'bool' lvalue ParmVar 0x55cfe60d67a8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55cfe60f6ed8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55cfe60f6ea8 <col:13> 'bool' lvalue ->_read_status 0x55cfe5fd04f0
|   |     `-ImplicitCastExpr 0x55cfe60f6e88 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55cfe60f6e78 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55cfe60f6f38 <line:657:9, col:17>
|     `-UnaryOperator 0x55cfe60f6f20 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55cfe60f6f10 <col:17> 'Args *' this
|-CXXMethodDecl 0x55cfe60d6988 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55cfe60d68f8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55cfe60f7058 <col:44, line:663:5>
|   |-BinaryOperator 0x55cfe60f7000 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55cfe60f6f68 <col:9> 'bool' lvalue ParmVar 0x55cfe60d68f8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55cfe60f6fe8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55cfe60f6fb8 <col:13> 'bool' lvalue ->_read_status 0x55cfe5fd04f0
|   |     `-ImplicitCastExpr 0x55cfe60f6f98 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55cfe60f6f88 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55cfe60f7048 <line:662:9, col:17>
|     `-UnaryOperator 0x55cfe60f7030 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55cfe60f7020 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55cfe60d6a50 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55cfe60d6b18 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55cfe60d6be0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55cfe60d6ca8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55cfe60d6fb8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55cfe60d6d48 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55cfe60d6f18 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55cfe60d6e28 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55cfe60f7410 <col:19, line:706:5>
|     `-IfStmt 0x55cfe60f73e8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55cfe60f7158 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55cfe60f7318 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55cfe60f72e8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55cfe60f72a8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55cfe60f71b0 <col:42> '<bound member function type>' ->simple_slot 0x55cfe60f1ea0
|       |     | `-CXXThisExpr 0x55cfe60f71a0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55cfe60f7248 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55cfe60f7200 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55cfe5e528a8
|       |     | `-DeclRefExpr 0x55cfe60f71e0 <col:55> 'T' lvalue ParmVar 0x55cfe60d6e28 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55cfe60f7288 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55cfe60f73d8 <line:705:13, col:34>
|         `-CallExpr 0x55cfe60f73b0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55cfe60f7338 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55cfe60f7390 <col:33> 'T' lvalue ParmVar 0x55cfe60d6e28 'x' 'T &'
|-FunctionTemplateDecl 0x55cfe60d7288 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55cfe60d7018 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55cfe60d71e8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55cfe60d70f8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55cfe60f77f0 <col:31, line:717:5>
|     |-DeclStmt 0x55cfe60f7550 <line:713:9, col:23>
|     | `-VarDecl 0x55cfe60f7438 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55cfe60f7528 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55cfe60f74b0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55cfe60f7508 <col:21> 'T' lvalue ParmVar 0x55cfe60d70f8 'x' 'T &'
|     |-IfStmt 0x55cfe60f77a0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55cfe60f7648 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55cfe60f7780 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55cfe60f7720 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55cfe60f76b0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55cfe6007698 0x55cfe60072b8 0x55cfe6006ee8 0x55cfe6006b08 0x55cfe6006720 0x55cfe60062b8
|     |   | `-DeclRefExpr 0x55cfe60f7690 <col:14> 'T *' lvalue Var 0x55cfe60f7438 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55cfe60f7760 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55cfe60f77d8 <line:716:9, col:16>
|       `-DeclRefExpr 0x55cfe60f77b8 <col:16> 'T *' lvalue Var 0x55cfe60f7438 's' 'T *'
|-FunctionTemplateDecl 0x55cfe60d7698 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55cfe60d72e8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55cfe60d7368 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55cfe60d75f8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55cfe60d7448 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55cfe60d74e8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55cfe60f7b00 <col:37, line:726:5>
|     |-IfStmt 0x55cfe60f7a90 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55cfe60f7ab0 <line:723:13, col:26>
|     | | `-VarDecl 0x55cfe60f7858 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55cfe60f7948 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55cfe60f78d0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55cfe60f7928 <col:25> 'T' lvalue ParmVar 0x55cfe60d7448 'x' 'T &'
|     | |-DeclRefExpr 0x55cfe60f7970 <col:16> 'T *' lvalue Var 0x55cfe60f7858 's' 'T *'
|     | `-BinaryOperator 0x55cfe60f7a70 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55cfe60f7a20 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55cfe60f79b0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55cfe6007698 0x55cfe60072b8 0x55cfe6006ee8 0x55cfe6006b08 0x55cfe6006720 0x55cfe60062b8
|     |   | `-DeclRefExpr 0x55cfe60f7990 <col:14> 'T *' lvalue Var 0x55cfe60f7858 's' 'T *'
|     |   `-DeclRefExpr 0x55cfe60f7a50 <col:18> 'const V' lvalue ParmVar 0x55cfe60d74e8 'value' 'const V &'
|     `-ReturnStmt 0x55cfe60f7af0 <line:725:9, col:17>
|       `-UnaryOperator 0x55cfe60f7ad8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55cfe60f7ac8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55cfe60d7a98 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55cfe60d7700 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55cfe60d79f8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55cfe60d77b0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60d7830 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55cfe60d78d8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55cfe60f8920 <col:65, line:737:5>
|     |-DeclStmt 0x55cfe60f7b98 <line:732:9, col:26>
|     | `-VarDecl 0x55cfe60f7b30 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55cfe60f88e8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55cfe60f8908 <line:733:13, col:58>
|       | `-VarDecl 0x55cfe60f7bc0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55cfe60f7da0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55cfe60f7d70 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55cfe60f7d58 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55cfe60f7d38 <col:26, col:58> 'String' (CXXTemporary 0x55cfe60f7d38)
|       |           `-CXXMemberCallExpr 0x55cfe60f7cc8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55cfe60f7c38 <col:26> '<bound member function type>' ->find 0x55cfe60ef4f8
|       |             | `-CXXThisExpr 0x55cfe60f7c28 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55cfe60f7d00 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55cfe60f7c68 <col:31> 'const char *' lvalue ParmVar 0x55cfe60d77b0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55cfe60f7d18 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55cfe60f7c88 <col:40> 'int' lvalue ParmVar 0x55cfe60d7830 'flags' 'int'
|       |             `-DeclRefExpr 0x55cfe60f7ca8 <col:47> 'Args::Slot *' lvalue Var 0x55cfe60f7b30 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55cfe60f7e58 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55cfe60f7e40 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55cfe60f7e20 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55cfe60f7df0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55cfe5e1b428
|       |       `-ImplicitCastExpr 0x55cfe60f7dd8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55cfe60f7db8 <col:20> 'String' lvalue Var 0x55cfe60f7bc0 'str' 'String'
|       `-CompoundStmt 0x55cfe60f88c8 <col:61, line:736:9>
|         |-DeclStmt 0x55cfe60f8310 <line:734:13, col:76>
|         | `-VarDecl 0x55cfe60f7ea8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55cfe60f82e0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55cfe60f8250 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55cfe60f8298 <col:60> 'T' lvalue ParmVar 0x55cfe60d78d8 'variable' 'T &'
|         |     `-UnaryOperator 0x55cfe60f82c8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55cfe60f82b8 <col:71> 'Args *' this
|         `-CallExpr 0x55cfe60f8898 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55cfe60f8338 <col:13> '<bound member function type>' ->postparse 0x55cfe60ef708
|           | `-CXXThisExpr 0x55cfe60f8328 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55cfe60f8858 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55cfe60f8368 <col:23> 'T *' lvalue Var 0x55cfe60f7ea8 's' 'T *'
|           | `-CallExpr 0x55cfe60f8818 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55cfe60f85f0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55cfe60f86f0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55cfe60f8710 <col:86> 'String' lvalue Var 0x55cfe60f7bc0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55cfe60f87c0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55cfe60f8750 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55cfe6007698 0x55cfe60072b8 0x55cfe6006ee8 0x55cfe6006b08 0x55cfe6006720 0x55cfe60062b8
|           |   | `-DeclRefExpr 0x55cfe60f8730 <col:92> 'T *' lvalue Var 0x55cfe60f7ea8 's' 'T *'
|           |   `-UnaryOperator 0x55cfe60f8800 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55cfe60f87f0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55cfe60f8878 <col:103> 'Args::Slot *' lvalue Var 0x55cfe60f7b30 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55cfe60d7fe8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55cfe60d7b08 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55cfe60d7b88 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55cfe60d7f48 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55cfe60d7c48 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60d7cc8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55cfe60d7d68 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55cfe60d7e08 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55cfe60f97c0 <col:88, line:745:5>
|     |-DeclStmt 0x55cfe60f89b8 <line:741:9, col:26>
|     | `-VarDecl 0x55cfe60f8950 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55cfe60f8bd8 <line:742:9, col:55>
|     | `-VarDecl 0x55cfe60f89e0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55cfe60f8bc0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55cfe60f8b90 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55cfe60f8b78 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55cfe60f8b58 <col:22, col:54> 'String' (CXXTemporary 0x55cfe60f8b58)
|     |           `-CXXMemberCallExpr 0x55cfe60f8ae8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55cfe60f8a58 <col:22> '<bound member function type>' ->find 0x55cfe60ef4f8
|     |             | `-CXXThisExpr 0x55cfe60f8a48 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55cfe60f8b20 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55cfe60f8a88 <col:27> 'const char *' lvalue ParmVar 0x55cfe60d7c48 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55cfe60f8b38 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55cfe60f8aa8 <col:36> 'int' lvalue ParmVar 0x55cfe60d7cc8 'flags' 'int'
|     |             `-DeclRefExpr 0x55cfe60f8ac8 <col:43> 'Args::Slot *' lvalue Var 0x55cfe60f8950 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55cfe60f8fb0 <line:743:9, col:72>
|     | `-VarDecl 0x55cfe60f8c28 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55cfe60f8f80 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55cfe60f8ef0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55cfe60f8f38 <col:56> 'T' lvalue ParmVar 0x55cfe60d7d68 'variable' 'T &'
|     |     `-UnaryOperator 0x55cfe60f8f68 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55cfe60f8f58 <col:67> 'Args *' this
|     `-CallExpr 0x55cfe60f9790 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55cfe60f8fd8 <col:9> '<bound member function type>' ->postparse 0x55cfe60ef708
|       | `-CXXThisExpr 0x55cfe60f8fc8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55cfe60f9750 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55cfe60f9008 <col:19> 'T *' lvalue Var 0x55cfe60f8c28 's' 'T *'
|       | `-ParenExpr 0x55cfe60f9730 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55cfe60f9700 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55cfe60f96e8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55cfe60f96d0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55cfe60f96b0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55cfe60f9680 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55cfe5e1b428
|       |     |       `-ImplicitCastExpr 0x55cfe60f9668 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55cfe60f9028 <col:25> 'String' lvalue Var 0x55cfe60f89e0 'str' 'String'
|       |     |-CallExpr 0x55cfe60f94d8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55cfe60f92b0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55cfe60f93b0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55cfe60f93d0 <col:89> 'String' lvalue Var 0x55cfe60f89e0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55cfe60f9480 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55cfe60f9410 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55cfe6007698 0x55cfe60072b8 0x55cfe6006ee8 0x55cfe6006b08 0x55cfe6006720 0x55cfe60062b8
|       |     | | `-DeclRefExpr 0x55cfe60f93f0 <col:95> 'T *' lvalue Var 0x55cfe60f8c28 's' 'T *'
|       |     | `-UnaryOperator 0x55cfe60f94c0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55cfe60f94b0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55cfe60f9648 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55cfe60f9628 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55cfe60f95f8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55cfe60f95a8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55cfe60f9538 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55cfe6007698 0x55cfe60072b8 0x55cfe6006ee8 0x55cfe6006b08 0x55cfe6006720 0x55cfe60062b8
|       |         | | `-DeclRefExpr 0x55cfe60f9518 <col:109> 'T *' lvalue Var 0x55cfe60f8c28 's' 'T *'
|       |         | `-DeclRefExpr 0x55cfe60f95d8 <col:113> 'const V' lvalue ParmVar 0x55cfe60d7e08 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55cfe60f9618 <col:120> 'bool' true
|       `-DeclRefExpr 0x55cfe60f9770 <col:128> 'Args::Slot *' lvalue Var 0x55cfe60f8950 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55cfe60d8518 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55cfe60d8060 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cfe60d80d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55cfe60d8478 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55cfe60d8198 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60d8218 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55cfe60d8290 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55cfe60d8338 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55cfe60fc5c8 <col:75, line:754:5>
|     |-DeclStmt 0x55cfe60f9868 <line:749:9, col:26>
|     | `-VarDecl 0x55cfe60f9800 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55cfe60fc590 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55cfe60fc5b0 <line:750:13, col:58>
|       | `-VarDecl 0x55cfe60f9890 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55cfe60f9a70 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55cfe60f9a40 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55cfe60f9a28 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55cfe60f9a08 <col:26, col:58> 'String' (CXXTemporary 0x55cfe60f9a08)
|       |           `-CXXMemberCallExpr 0x55cfe60f9998 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55cfe60f9908 <col:26> '<bound member function type>' ->find 0x55cfe60ef4f8
|       |             | `-CXXThisExpr 0x55cfe60f98f8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55cfe60f99d0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55cfe60f9938 <col:31> 'const char *' lvalue ParmVar 0x55cfe60d8198 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55cfe60f99e8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55cfe60f9958 <col:40> 'int' lvalue ParmVar 0x55cfe60d8218 'flags' 'int'
|       |             `-DeclRefExpr 0x55cfe60f9978 <col:47> 'Args::Slot *' lvalue Var 0x55cfe60f9800 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55cfe60fbd30 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55cfe60fbd18 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55cfe60fbcf8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55cfe60fbcc8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55cfe5e1b428
|       |       `-ImplicitCastExpr 0x55cfe60fbcb0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55cfe60fbc90 <col:20> 'String' lvalue Var 0x55cfe60f9890 'str' 'String'
|       `-CompoundStmt 0x55cfe60fc570 <col:61, line:753:9>
|         |-DeclStmt 0x55cfe60fc110 <line:751:13, col:63>
|         | `-VarDecl 0x55cfe60fbd88 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55cfe60fc0e0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55cfe60fc050 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55cfe60fc098 <col:47> 'T' lvalue ParmVar 0x55cfe60d8338 'variable' 'T &'
|         |     `-UnaryOperator 0x55cfe60fc0c8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55cfe60fc0b8 <col:58> 'Args *' this
|         `-CallExpr 0x55cfe60fc540 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55cfe60fc138 <col:13> '<bound member function type>' ->postparse 0x55cfe60ef708
|           | `-CXXThisExpr 0x55cfe60fc128 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55cfe60fc500 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55cfe60fc168 <col:23> 'T *' lvalue Var 0x55cfe60fbd88 's' 'T *'
|           | `-CallExpr 0x55cfe60fc4c0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55cfe60fc350 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55cfe60fc398 <col:56> 'P' lvalue ParmVar 0x55cfe60d8290 'parser' 'P'
|           |   |-DeclRefExpr 0x55cfe60fc3b8 <col:64> 'String' lvalue Var 0x55cfe60f9890 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55cfe60fc468 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55cfe60fc3f8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55cfe6007698 0x55cfe60072b8 0x55cfe6006ee8 0x55cfe6006b08 0x55cfe6006720 0x55cfe60062b8
|           |   | `-DeclRefExpr 0x55cfe60fc3d8 <col:70> 'T *' lvalue Var 0x55cfe60fbd88 's' 'T *'
|           |   `-UnaryOperator 0x55cfe60fc4a8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55cfe60fc498 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55cfe60fc520 <col:81> 'Args::Slot *' lvalue Var 0x55cfe60f9800 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55cfe60d8b78 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55cfe60d8590 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55cfe60d8608 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55cfe60d8688 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55cfe60d8ad8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55cfe60d8750 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60d87d0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55cfe60d8848 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55cfe60d88e8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55cfe60d8988 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55cfe60fd358 <col:98, line:762:5>
|     |-DeclStmt 0x55cfe60fc660 <line:758:9, col:26>
|     | `-VarDecl 0x55cfe60fc5f8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55cfe60fc880 <line:759:9, col:55>
|     | `-VarDecl 0x55cfe60fc688 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55cfe60fc868 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55cfe60fc838 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55cfe60fc820 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55cfe60fc800 <col:22, col:54> 'String' (CXXTemporary 0x55cfe60fc800)
|     |           `-CXXMemberCallExpr 0x55cfe60fc790 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55cfe60fc700 <col:22> '<bound member function type>' ->find 0x55cfe60ef4f8
|     |             | `-CXXThisExpr 0x55cfe60fc6f0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55cfe60fc7c8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55cfe60fc730 <col:27> 'const char *' lvalue ParmVar 0x55cfe60d8750 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55cfe60fc7e0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55cfe60fc750 <col:36> 'int' lvalue ParmVar 0x55cfe60d87d0 'flags' 'int'
|     |             `-DeclRefExpr 0x55cfe60fc770 <col:43> 'Args::Slot *' lvalue Var 0x55cfe60fc5f8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55cfe60fcca0 <line:760:9, col:59>
|     | `-VarDecl 0x55cfe60fc8d8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55cfe60fcc70 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55cfe60fcbe0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55cfe60fcc28 <col:43> 'T' lvalue ParmVar 0x55cfe60d88e8 'variable' 'T &'
|     |     `-UnaryOperator 0x55cfe60fcc58 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55cfe60fcc48 <col:54> 'Args *' this
|     `-CallExpr 0x55cfe60fd328 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55cfe60fccc8 <col:9> '<bound member function type>' ->postparse 0x55cfe60ef708
|       | `-CXXThisExpr 0x55cfe60fccb8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55cfe60fd2e8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55cfe60fccf8 <col:19> 'T *' lvalue Var 0x55cfe60fc8d8 's' 'T *'
|       | `-ParenExpr 0x55cfe60fd2c8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55cfe60fd298 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55cfe60fd280 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55cfe60fd268 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55cfe60fd248 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55cfe60fd218 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55cfe5e1b428
|       |     |       `-ImplicitCastExpr 0x55cfe60fd200 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55cfe60fcd18 <col:25> 'String' lvalue Var 0x55cfe60fc688 'str' 'String'
|       |     |-CallExpr 0x55cfe60fd070 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55cfe60fcf00 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55cfe60fcf48 <col:59> 'P' lvalue ParmVar 0x55cfe60d8848 'parser' 'P'
|       |     | |-DeclRefExpr 0x55cfe60fcf68 <col:67> 'String' lvalue Var 0x55cfe60fc688 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55cfe60fd018 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55cfe60fcfa8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55cfe6007698 0x55cfe60072b8 0x55cfe6006ee8 0x55cfe6006b08 0x55cfe6006720 0x55cfe60062b8
|       |     | | `-DeclRefExpr 0x55cfe60fcf88 <col:73> 'T *' lvalue Var 0x55cfe60fc8d8 's' 'T *'
|       |     | `-UnaryOperator 0x55cfe60fd058 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55cfe60fd048 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55cfe60fd1e0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55cfe60fd1c0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55cfe60fd190 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55cfe60fd140 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55cfe60fd0d0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55cfe6007698 0x55cfe60072b8 0x55cfe6006ee8 0x55cfe6006b08 0x55cfe6006720 0x55cfe60062b8
|       |         | | `-DeclRefExpr 0x55cfe60fd0b0 <col:87> 'T *' lvalue Var 0x55cfe60fc8d8 's' 'T *'
|       |         | `-DeclRefExpr 0x55cfe60fd170 <col:91> 'const V' lvalue ParmVar 0x55cfe60d8988 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55cfe60fd1b0 <col:98> 'bool' true
|       `-DeclRefExpr 0x55cfe60fd308 <col:106> 'Args::Slot *' lvalue Var 0x55cfe60fc5f8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55cfe60d91e8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55cfe60d8bf8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cfe60d8c78 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55cfe60d8cf8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55cfe60d9148 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55cfe60d8dc0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60d8e40 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55cfe60d8eb8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55cfe60d8f58 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55cfe60d8ff8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55cfe60fe338 <col:60, line:773:5>
|     |-DeclStmt 0x55cfe60fd400 <line:767:9, col:26>
|     | `-VarDecl 0x55cfe60fd398 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55cfe60fe300 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55cfe60fe320 <line:768:13, col:58>
|       | `-VarDecl 0x55cfe60fd428 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55cfe60fd608 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55cfe60fd5d8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55cfe60fd5c0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55cfe60fd5a0 <col:26, col:58> 'String' (CXXTemporary 0x55cfe60fd5a0)
|       |           `-CXXMemberCallExpr 0x55cfe60fd530 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55cfe60fd4a0 <col:26> '<bound member function type>' ->find 0x55cfe60ef4f8
|       |             | `-CXXThisExpr 0x55cfe60fd490 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55cfe60fd568 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55cfe60fd4d0 <col:31> 'const char *' lvalue ParmVar 0x55cfe60d8dc0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55cfe60fd580 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55cfe60fd4f0 <col:40> 'int' lvalue ParmVar 0x55cfe60d8e40 'flags' 'int'
|       |             `-DeclRefExpr 0x55cfe60fd510 <col:47> 'Args::Slot *' lvalue Var 0x55cfe60fd398 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55cfe60fd6c0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55cfe60fd6a8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55cfe60fd688 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55cfe60fd658 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55cfe5e1b428
|       |       `-ImplicitCastExpr 0x55cfe60fd640 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55cfe60fd620 <col:20> 'String' lvalue Var 0x55cfe60fd428 'str' 'String'
|       `-CompoundStmt 0x55cfe60fe2d8 <col:61, line:772:9>
|         |-DeclStmt 0x55cfe60fda00 <line:769:13, col:66>
|         | `-VarDecl 0x55cfe60fd718 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55cfe60fd9d0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55cfe60fd940 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55cfe60fd988 <col:49> 'T1' lvalue ParmVar 0x55cfe60d8f58 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55cfe60fd9b8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55cfe60fd9a8 <col:61> 'Args *' this
|         |-DeclStmt 0x55cfe60fdd70 <line:770:13, col:66>
|         | `-VarDecl 0x55cfe60fda88 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55cfe60fdd40 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55cfe60fdcb0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55cfe60fdcf8 <col:49> 'T2' lvalue ParmVar 0x55cfe60d8ff8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55cfe60fdd28 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55cfe60fdd18 <col:61> 'Args *' this
|         `-CallExpr 0x55cfe60fe2a8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55cfe60fdd98 <col:13> '<bound member function type>' ->postparse 0x55cfe60ef708
|           | `-CXXThisExpr 0x55cfe60fdd88 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55cfe60fe268 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55cfe60fde08 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55cfe60fddc8 <col:23> 'T1 *' lvalue Var 0x55cfe60fd718 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55cfe60fdde8 <col:29> 'T2 *' lvalue Var 0x55cfe60fda88 's2' 'T2 *'
|           | `-CallExpr 0x55cfe60fe220 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55cfe60fdff0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55cfe60fe038 <col:63> 'P' lvalue ParmVar 0x55cfe60d8eb8 'parser' 'P'
|           |   |-DeclRefExpr 0x55cfe60fe058 <col:71> 'String' lvalue Var 0x55cfe60fd428 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55cfe60fe108 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55cfe60fe098 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55cfe6007698 0x55cfe60072b8 0x55cfe6006ee8 0x55cfe6006b08 0x55cfe6006720 0x55cfe60062b8
|           |   | `-DeclRefExpr 0x55cfe60fe078 <col:77> 'T1 *' lvalue Var 0x55cfe60fd718 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55cfe60fe1c8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55cfe60fe158 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55cfe6007698 0x55cfe60072b8 0x55cfe6006ee8 0x55cfe6006b08 0x55cfe6006720 0x55cfe60062b8
|           |   | `-DeclRefExpr 0x55cfe60fe138 <col:82> 'T2 *' lvalue Var 0x55cfe60fda88 's2' 'T2 *'
|           |   `-UnaryOperator 0x55cfe60fe208 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55cfe60fe1f8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55cfe60fe288 <col:94> 'Args::Slot *' lvalue Var 0x55cfe60fd398 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55cfe60d95d8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55cfe60d9268 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55cfe60d9538 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55cfe60d9320 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60d93a0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55cfe60d9418 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55cfe60fe850 <col:67, line:780:5>
|     |-DeclStmt 0x55cfe60fe3d0 <line:777:9, col:26>
|     | `-VarDecl 0x55cfe60fe368 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55cfe60fe818 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55cfe60fe838 <line:778:13, col:58>
|       | `-VarDecl 0x55cfe60fe3f8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55cfe60fe5d8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55cfe60fe5a8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55cfe60fe590 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55cfe60fe570 <col:26, col:58> 'String' (CXXTemporary 0x55cfe60fe570)
|       |           `-CXXMemberCallExpr 0x55cfe60fe500 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55cfe60fe470 <col:26> '<bound member function type>' ->find 0x55cfe60ef4f8
|       |             | `-CXXThisExpr 0x55cfe60fe460 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55cfe60fe538 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55cfe60fe4a0 <col:31> 'const char *' lvalue ParmVar 0x55cfe60d9320 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55cfe60fe550 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55cfe60fe4c0 <col:40> 'int' lvalue ParmVar 0x55cfe60d93a0 'flags' 'int'
|       |             `-DeclRefExpr 0x55cfe60fe4e0 <col:47> 'Args::Slot *' lvalue Var 0x55cfe60fe368 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55cfe60fe690 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55cfe60fe678 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55cfe60fe658 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55cfe60fe628 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55cfe5e1b428
|       |       `-ImplicitCastExpr 0x55cfe60fe610 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55cfe60fe5f0 <col:20> 'String' lvalue Var 0x55cfe60fe3f8 'str' 'String'
|       `-CallExpr 0x55cfe60fe7e8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55cfe60fe6b8 <col:13> '<bound member function type>' ->postparse 0x55cfe60ef708
|         | `-CXXThisExpr 0x55cfe60fe6a8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55cfe60fe798 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55cfe60fe708 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55cfe60fe6e8 <col:23> 'P' lvalue ParmVar 0x55cfe60d9418 'parser' 'P'
|         | |-DeclRefExpr 0x55cfe60fe750 <col:36> 'String' lvalue Var 0x55cfe60fe3f8 'str' 'String'
|         | `-UnaryOperator 0x55cfe60fe780 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55cfe60fe770 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55cfe60fe7c8 <col:49> 'Args::Slot *' lvalue Var 0x55cfe60fe368 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55cfe60d9978 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55cfe60d9648 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55cfe60d98d8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55cfe60d9700 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60d9780 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55cfe60d97f8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55cfe60ff1c0 <col:71, line:792:5>
|     |-DeclStmt 0x55cfe60fe8e8 <line:784:9, col:26>
|     | `-VarDecl 0x55cfe60fe880 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55cfe60fe9b8 <line:785:9, col:29>
|     | `-VarDecl 0x55cfe60fe918 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55cfe60fe9a0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55cfe60fe980 <col:28> 'int' 1
|     |-WhileStmt 0x55cfe60ff070 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55cfe60ff090 <line:786:16, col:61>
|     | | `-VarDecl 0x55cfe60fe9e0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55cfe60febc0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55cfe60feb90 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55cfe60feb78 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55cfe60feb58 <col:29, col:61> 'String' (CXXTemporary 0x55cfe60feb58)
|     | |           `-CXXMemberCallExpr 0x55cfe60feae8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55cfe60fea58 <col:29> '<bound member function type>' ->find 0x55cfe60ef4f8
|     | |             | `-CXXThisExpr 0x55cfe60fea48 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55cfe60feb20 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55cfe60fea88 <col:34> 'const char *' lvalue ParmVar 0x55cfe60d9700 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55cfe60feb38 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55cfe60feaa8 <col:43> 'int' lvalue ParmVar 0x55cfe60d9780 'flags' 'int'
|     | |             `-DeclRefExpr 0x55cfe60feac8 <col:50> 'Args::Slot *' lvalue Var 0x55cfe60fe880 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55cfe60fec78 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55cfe60fec60 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55cfe60fec40 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55cfe60fec10 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55cfe5e1b428
|     | |       `-ImplicitCastExpr 0x55cfe60febf8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55cfe60febd8 <col:23> 'String' lvalue Var 0x55cfe60fe9e0 'str' 'String'
|     | `-CompoundStmt 0x55cfe60ff048 <col:64, line:790:9>
|     |   |-CallExpr 0x55cfe60fedd0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55cfe60feca0 <col:13> '<bound member function type>' ->postparse 0x55cfe60ef708
|     |   | | `-CXXThisExpr 0x55cfe60fec90 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55cfe60fed80 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55cfe60fecf0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55cfe60fecd0 <col:23> 'P' lvalue ParmVar 0x55cfe60d97f8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55cfe60fed38 <col:36> 'String' lvalue Var 0x55cfe60fe9e0 'str' 'String'
|     |   | | `-UnaryOperator 0x55cfe60fed68 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55cfe60fed58 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55cfe60fedb0 <col:49> 'Args::Slot *' lvalue Var 0x55cfe60fe880 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55cfe60fef68 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55cfe60fee00 <col:13> 'int' lvalue Var 0x55cfe60fe918 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55cfe60fef50 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55cfe60fef30 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55cfe60fee98 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55cfe60fee78 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55cfe60fee60 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55cfe60fee20 <col:28> 'int' lvalue Var 0x55cfe60fe918 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55cfe60fee40 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55cfe60fef18 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55cfe60feee8 <col:49> 'bool' lvalue ->_read_status 0x55cfe5fd04f0
|     |   |         `-ImplicitCastExpr 0x55cfe60feec8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55cfe60feeb8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55cfe60ff018 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55cfe60fef88 <col:13> 'int' lvalue ParmVar 0x55cfe60d9780 'flags' 'int'
|     |     `-UnaryOperator 0x55cfe60ff000 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55cfe60fefe8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55cfe60fefc8 <col:23> 'const int' lvalue Var 0x55cfe60c1a88 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55cfe60ff1a0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55cfe60ff0d8 <col:9> 'bool' lvalue ->_read_status 0x55cfe5fd04f0
|       | `-ImplicitCastExpr 0x55cfe60ff0b8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55cfe60ff0a8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55cfe60ff180 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55cfe60ff160 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55cfe60ff148 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55cfe60ff108 <col:25> 'int' lvalue Var 0x55cfe60fe918 'read_status' 'int'
|           `-IntegerLiteral 0x55cfe60ff128 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55cfe60d9e58 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55cfe60d99e8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cfe60d9a68 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55cfe60d9db8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55cfe60d9b28 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60d9ba8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55cfe60d9c20 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55cfe60d9cc8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55cfe6100150 <col:84, line:805:5>
|     |-DeclStmt 0x55cfe60ff268 <line:796:9, col:26>
|     | `-VarDecl 0x55cfe60ff200 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55cfe60ff338 <line:797:9, col:29>
|     | `-VarDecl 0x55cfe60ff298 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55cfe60ff320 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55cfe60ff300 <col:28> 'int' 1
|     |-DeclStmt 0x55cfe60ff670 <line:798:9, col:71>
|     | `-VarDecl 0x55cfe60ff388 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55cfe60ff640 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55cfe60ff5b0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55cfe60ff5f8 <col:55> 'T' lvalue ParmVar 0x55cfe60d9cc8 'variable' 'T &'
|     |     `-UnaryOperator 0x55cfe60ff628 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55cfe60ff618 <col:66> 'Args *' this
|     |-WhileStmt 0x55cfe6100000 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55cfe6100020 <line:799:16, col:61>
|     | | `-VarDecl 0x55cfe60ff698 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55cfe60ff878 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55cfe60ff848 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55cfe60ff830 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55cfe60ff810 <col:29, col:61> 'String' (CXXTemporary 0x55cfe60ff810)
|     | |           `-CXXMemberCallExpr 0x55cfe60ff7a0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55cfe60ff710 <col:29> '<bound member function type>' ->find 0x55cfe60ef4f8
|     | |             | `-CXXThisExpr 0x55cfe60ff700 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55cfe60ff7d8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55cfe60ff740 <col:34> 'const char *' lvalue ParmVar 0x55cfe60d9b28 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55cfe60ff7f0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55cfe60ff760 <col:43> 'int' lvalue ParmVar 0x55cfe60d9ba8 'flags' 'int'
|     | |             `-DeclRefExpr 0x55cfe60ff780 <col:50> 'Args::Slot *' lvalue Var 0x55cfe60ff200 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55cfe60ff930 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55cfe60ff918 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55cfe60ff8f8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55cfe60ff8c8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55cfe5e1b428
|     | |       `-ImplicitCastExpr 0x55cfe60ff8b0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55cfe60ff890 <col:23> 'String' lvalue Var 0x55cfe60ff698 'str' 'String'
|     | `-CompoundStmt 0x55cfe60fffd8 <col:64, line:803:9>
|     |   |-CallExpr 0x55cfe60ffd60 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55cfe60ff958 <col:13> '<bound member function type>' ->postparse 0x55cfe60ef708
|     |   | | `-CXXThisExpr 0x55cfe60ff948 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55cfe60ffd20 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55cfe60ff988 <col:23> 'T *' lvalue Var 0x55cfe60ff388 's' 'T *'
|     |   | | `-CallExpr 0x55cfe60ffce0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55cfe60ffb70 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55cfe60ffbb8 <col:56> 'P' lvalue ParmVar 0x55cfe60d9c20 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55cfe60ffbd8 <col:64> 'String' lvalue Var 0x55cfe60ff698 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55cfe60ffc88 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55cfe60ffc18 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55cfe6007698 0x55cfe60072b8 0x55cfe6006ee8 0x55cfe6006b08 0x55cfe6006720 0x55cfe60062b8
|     |   | |   | `-DeclRefExpr 0x55cfe60ffbf8 <col:70> 'T *' lvalue Var 0x55cfe60ff388 's' 'T *'
|     |   | |   `-UnaryOperator 0x55cfe60ffcc8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55cfe60ffcb8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55cfe60ffd40 <col:81> 'Args::Slot *' lvalue Var 0x55cfe60ff200 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55cfe60ffef8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55cfe60ffd90 <col:13> 'int' lvalue Var 0x55cfe60ff298 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55cfe60ffee0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55cfe60ffec0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55cfe60ffe28 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55cfe60ffe08 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55cfe60ffdf0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55cfe60ffdb0 <col:28> 'int' lvalue Var 0x55cfe60ff298 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55cfe60ffdd0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55cfe60ffea8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55cfe60ffe78 <col:49> 'bool' lvalue ->_read_status 0x55cfe5fd04f0
|     |   |         `-ImplicitCastExpr 0x55cfe60ffe58 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55cfe60ffe48 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55cfe60fffa8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55cfe60fff18 <col:13> 'int' lvalue ParmVar 0x55cfe60d9ba8 'flags' 'int'
|     |     `-UnaryOperator 0x55cfe60fff90 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55cfe60fff78 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55cfe60fff58 <col:23> 'const int' lvalue Var 0x55cfe60c1a88 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55cfe6100130 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55cfe6100068 <col:9> 'bool' lvalue ->_read_status 0x55cfe5fd04f0
|       | `-ImplicitCastExpr 0x55cfe6100048 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55cfe6100038 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55cfe6100110 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55cfe61000f0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55cfe61000d8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55cfe6100098 <col:25> 'int' lvalue Var 0x55cfe60ff298 'read_status' 'int'
|           `-IntegerLiteral 0x55cfe61000b8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55cfe60da438 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55cfe60d9ed0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55cfe60d9f48 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55cfe60da398 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55cfe60da008 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55cfe60da088 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55cfe60da100 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55cfe60da250 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55cfe6100f58 <col:87, line:821:5>
|     |-DeclStmt 0x55cfe6100200 <line:809:9, col:26>
|     | `-VarDecl 0x55cfe6100198 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55cfe61002d0 <line:810:9, col:29>
|     | `-VarDecl 0x55cfe6100230 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55cfe61002b8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55cfe6100298 <col:28> 'int' 1
|     |-DeclStmt 0x55cfe6100518 <line:811:9, col:38>
|     | `-VarDecl 0x55cfe6100400 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55cfe61004f0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55cfe6100478 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55cfe61004d0 <col:29> 'Vector<T>' lvalue ParmVar 0x55cfe60da250 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55cfe6100e08 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55cfe6100e28 <line:812:16, col:61>
|     | | `-VarDecl 0x55cfe6100540 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55cfe6100720 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55cfe61006f0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55cfe61006d8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55cfe61006b8 <col:29, col:61> 'String' (CXXTemporary 0x55cfe61006b8)
|     | |           `-CXXMemberCallExpr 0x55cfe6100648 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55cfe61005b8 <col:29> '<bound member function type>' ->find 0x55cfe60ef4f8
|     | |             | `-CXXThisExpr 0x55cfe61005a8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55cfe6100680 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55cfe61005e8 <col:34> 'const char *' lvalue ParmVar 0x55cfe60da008 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55cfe6100698 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55cfe6100608 <col:43> 'int' lvalue ParmVar 0x55cfe60da088 'flags' 'int'
|     | |             `-DeclRefExpr 0x55cfe6100628 <col:50> 'Args::Slot *' lvalue Var 0x55cfe6100198 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55cfe61007d8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55cfe61007c0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55cfe61007a0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55cfe6100770 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55cfe5e1b428
|     | |       `-ImplicitCastExpr 0x55cfe6100758 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55cfe6100738 <col:23> 'String' lvalue Var 0x55cfe6100540 'str' 'String'
|     | `-CompoundStmt 0x55cfe6100dd0 <col:64, line:819:9>
|     |   |-DeclStmt 0x55cfe6100898 <line:813:13, col:23>
|     |   | `-VarDecl 0x55cfe6100800 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55cfe6100878 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55cfe6100a18 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55cfe61008c0 <col:13> '<bound member function type>' ->postparse 0x55cfe60ef708
|     |   | | `-CXXThisExpr 0x55cfe61008b0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55cfe61009c0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55cfe6100910 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55cfe61008f0 <col:23> 'P' lvalue ParmVar 0x55cfe60da100 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55cfe6100958 <col:36> 'String' lvalue Var 0x55cfe6100540 'str' 'String'
|     |   | | |-DeclRefExpr 0x55cfe6100978 <col:41> 'T' lvalue Var 0x55cfe6100800 'sx' 'T'
|     |   | | `-UnaryOperator 0x55cfe61009a8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55cfe6100998 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55cfe61009f8 <col:53> 'Args::Slot *' lvalue Var 0x55cfe6100198 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55cfe6100b70 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55cfe6100aa8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55cfe6100a78 <col:17> 'bool' lvalue ->_read_status 0x55cfe5fd04f0
|     |   | |   `-ImplicitCastExpr 0x55cfe6100a58 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55cfe6100a48 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55cfe6100b48 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55cfe6100ae0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55cfe6100ac0 <col:17> 'Vector<T> *' lvalue Var 0x55cfe6100400 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55cfe6100b28 <col:30> 'T' lvalue Var 0x55cfe6100800 'sx' 'T'
|     |   |-BinaryOperator 0x55cfe6100cf0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55cfe6100b88 <col:13> 'int' lvalue Var 0x55cfe6100230 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55cfe6100cd8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55cfe6100cb8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55cfe6100c20 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55cfe6100c00 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55cfe6100be8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55cfe6100ba8 <col:28> 'int' lvalue Var 0x55cfe6100230 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55cfe6100bc8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55cfe6100ca0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55cfe6100c70 <col:49> 'bool' lvalue ->_read_status 0x55cfe5fd04f0
|     |   |         `-ImplicitCastExpr 0x55cfe6100c50 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55cfe6100c40 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55cfe6100da0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55cfe6100d10 <col:13> 'int' lvalue ParmVar 0x55cfe60da088 'flags' 'int'
|     |     `-UnaryOperator 0x55cfe6100d88 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55cfe6100d70 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55cfe6100d50 <col:23> 'const int' lvalue Var 0x55cfe60c1a88 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55cfe6100f38 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55cfe6100e70 <col:9> 'bool' lvalue ->_read_status 0x55cfe5fd04f0
|       | `-ImplicitCastExpr 0x55cfe6100e50 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55cfe6100e40 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55cfe6100f18 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55cfe6100ef8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55cfe6100ee0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55cfe6100ea0 <col:25> 'int' lvalue Var 0x55cfe6100230 'read_status' 'int'
|           `-IntegerLiteral 0x55cfe6100ec0 <col:40> 'int' 1
|-AccessSpecDecl 0x55cfe60da4b0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55cfe60da4d8 prev 0x55cfe60bfd88 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55cfe60da5d0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55cfe60da6c0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55cfe6100f90 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55cfe60da7b0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55cfe6100fa0 <col:25, line:830:9>
| |-CXXMethodDecl 0x55cfe60da8b0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55cfe60da960 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55cfe60daa08 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55cfe60daa08
| | `-ParmVarDecl 0x55cfe60dab18 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55cfe60db2d8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55cfe60db2d8
|   `-ParmVarDecl 0x55cfe60db3e8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55cfe60dab88 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55cfe60dace8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55cfe60daee0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55cfe60dad90 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55cfe60dae08 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55cfe6101180 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55cfe60db198 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55cfe6100ff0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55cfe6100fb0 <col:20> 'void *' lvalue ParmVar 0x55cfe60dad90 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55cfe60db200 '_slot' 'char *'
| | | `-CXXNewExpr 0x55cfe6101078 <col:32, col:45> 'char *' array Function 0x55cfe5c35568 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55cfe6101060 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55cfe6101030 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55cfe60dae08 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55cfe60db260 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55cfe6101140 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55cfe6101100 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55cfe60dae08 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55cfe6101200 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55cfe60dafe0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55cfe60da7b0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55cfe6101288 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55cfe6101268 <line:840:13, col:22> 'void' array Function 0x55cfe5c358c8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55cfe6101250 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55cfe6101220 <col:22> 'char *' lvalue ->_slot 0x55cfe60db200
| |         `-CXXThisExpr 0x55cfe6101210 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55cfe60db0e0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55cfe60da8b0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55cfe6101478 <col:22, line:844:9>
| |   `-CallExpr 0x55cfe61013e0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55cfe61013c8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55cfe61013a8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55cfe5d6c238 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55cfe6101418 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55cfe61012f8 <col:20> 'void *' lvalue ->_ptr 0x55cfe60db198
| |     |   `-CXXThisExpr 0x55cfe61012e8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55cfe6101448 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55cfe6101430 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55cfe6101338 <col:26> 'char *' lvalue ->_slot 0x55cfe60db200
| |     |     `-CXXThisExpr 0x55cfe6101328 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55cfe6101460 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55cfe6101378 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55cfe60db260
| |         `-CXXThisExpr 0x55cfe6101368 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55cfe60db198 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55cfe60db200 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55cfe60db260 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55cfe60db458 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55cfe60db458
| | `-ParmVarDecl 0x55cfe60db568 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55cfe60db608 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55cfe60db608
|   `-ParmVarDecl 0x55cfe60db718 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55cfe60db8b8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55cfe60db788 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55cfe60db828 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55cfe60dbb50 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55cfe60dbd48 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55cfe60dbc18 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55cfe60dbec8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55cfe61014b0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55cfe6101490 <col:20> 'T *' lvalue ParmVar 0x55cfe60dbc18 'ptr' 'T *'
|   | `-CompoundStmt 0x55cfe6101500 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55cfe60dbe18 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55cfe60da8b0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55cfe61016b0 <col:22, line:857:9>
|   |   `-CallExpr 0x55cfe6101680 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55cfe6101510 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55cfe5e02548 0x55cfe5dabba8
|   |     |-CXXOperatorCallExpr 0x55cfe6101610 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55cfe61015a0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55cfe6007698 0x55cfe60072b8 0x55cfe6006ee8 0x55cfe6006b08 0x55cfe6006720 0x55cfe60062b8
|   |     | `-MemberExpr 0x55cfe6101570 <col:29> 'T *' lvalue ->_ptr 0x55cfe60dbec8
|   |     |   `-CXXThisExpr 0x55cfe6101560 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55cfe6101650 <col:35> 'T' lvalue ->_slot 0x55cfe60dbf28
|   |       `-CXXThisExpr 0x55cfe6101640 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55cfe60dbec8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55cfe60dbf28 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55cfe60e7af0 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55cfe60e7bf0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55cfe60e7c40 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55cfe60e7bd0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55cfe60e7bb0 <col:31> 'int' 48
|-FieldDecl 0x55cfe60e7c68 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55cfe60e7cc8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55cfe60e7d28 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55cfe60e7e60 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55cfe60eeda0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55cfe60eee00 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55cfe60eeeb0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55cfe60ef0d8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55cfe60eefe0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55cfe60ef228 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55cfe60ef198 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55cfe60ef4f8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55cfe60ef2e8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55cfe60ef368 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55cfe60ef410 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55cfe60ef708 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55cfe60ef5c0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55cfe60ef638 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55cfe60ef7d8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55cfe60ef928 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55cfe60ef890 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55cfe60f1c78 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55cfe60ef9e8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55cfe60efa68 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55cfe60f1ad0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55cfe60f1b88 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55cfe60f1ea0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55cfe60f1d50 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55cfe60f1dc8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55cfe60f21b8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55cfe60f1f50 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55cfe60f2118 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55cfe60f2028 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.0*, %class.Vector.2, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.0*, %class.Vector.2, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct NamedIntArg
         0 |   int _type
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cfe61667e8 <../dummy_inc/click/nameinfo.hh:515:1, line:525:1> line:515:8 referenced struct NamedIntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55cfe6166908 <col:1, col:8> col:8 implicit referenced struct NamedIntArg
|-CXXConstructorDecl 0x55cfe6166a78 <line:516:5, line:518:5> line:516:5 used NamedIntArg 'void (uint32_t)'
| |-ParmVarDecl 0x55cfe61669a8 <col:17, col:26> col:26 used type 'uint32_t':'unsigned int'
| |-CXXCtorInitializer Field 0x55cfe6166da0 '_type' 'int'
| | `-ImplicitCastExpr 0x55cfe6166e60 <line:517:10> 'int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55cfe6166e48 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
| |     `-DeclRefExpr 0x55cfe6166e08 <col:10> 'uint32_t':'unsigned int' lvalue ParmVar 0x55cfe61669a8 'type' 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55cfe6166ea8 <col:16, line:518:5>
|-CXXMethodDecl 0x55cfe6166cd0 <line:519:5, line:523:5> line:519:10 parse 'bool (const String &, int &, const ArgContext &)'
| |-ParmVarDecl 0x55cfe6166b38 <col:16, col:30> col:30 used str 'const String &'
| |-ParmVarDecl 0x55cfe6166bb8 <col:35, col:40> col:40 used value 'int &'
| |-ParmVarDecl 0x55cfe6166c30 <col:47, col:65> col:65 used args 'const ArgContext &'
| `-CompoundStmt 0x55cfe6167870 <col:71, line:523:5>
|   `-ReturnStmt 0x55cfe6167860 <line:520:2, line:522:40>
|     `-ExprWithCleanups 0x55cfe6167848 <line:520:9, line:522:40> 'bool'
|       `-BinaryOperator 0x55cfe6167828 <line:520:9, line:522:40> 'bool' '||'
|         |-CallExpr 0x55cfe6167100 <line:520:9, line:521:32> 'bool'
|         | |-ImplicitCastExpr 0x55cfe61670e8 <line:520:9, col:19> 'bool (*)(uint32_t, const Element *, const String &, void *, size_t)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x55cfe6166ef0 <col:9, col:19> 'bool (uint32_t, const Element *, const String &, void *, size_t)' lvalue CXXMethod 0x55cfe614db48 'query' 'bool (uint32_t, const Element *, const String &, void *, size_t)'
|         | |-ImplicitCastExpr 0x55cfe6167160 <col:25> 'uint32_t':'unsigned int' <IntegralCast>
|         | | `-ImplicitCastExpr 0x55cfe6167148 <col:25> 'int' <LValueToRValue>
|         | |   `-MemberExpr 0x55cfe6166f30 <col:25> 'int' lvalue ->_type 0x55cfe6166da0
|         | |     `-CXXThisExpr 0x55cfe6166f20 <col:25> 'NamedIntArg *' implicit this
|         | |-CXXMemberCallExpr 0x55cfe6166fb0 <col:32, col:45> 'const Element *'
|         | | `-MemberExpr 0x55cfe6166f80 <col:32, col:37> '<bound member function type>' .context 0x55cfe5fcf7c8
|         | |   `-DeclRefExpr 0x55cfe6166f60 <col:32> 'const ArgContext' lvalue ParmVar 0x55cfe6166c30 'args' 'const ArgContext &'
|         | |-DeclRefExpr 0x55cfe6166fd0 <col:48> 'const String' lvalue ParmVar 0x55cfe6166b38 'str' 'const String &'
|         | |-ImplicitCastExpr 0x55cfe6167178 <line:521:11, col:12> 'void *' <BitCast>
|         | | `-UnaryOperator 0x55cfe6167010 <col:11, col:12> 'int *' prefix '&' cannot overflow
|         | |   `-DeclRefExpr 0x55cfe6166ff0 <col:12> 'int' lvalue ParmVar 0x55cfe6166bb8 'value' 'int &'
|         | `-UnaryExprOrTypeTraitExpr 0x55cfe6167068 <col:19, col:31> 'unsigned long' sizeof
|         |   `-ParenExpr 0x55cfe6167048 <col:25, col:31> 'int' lvalue
|         |     `-DeclRefExpr 0x55cfe6167028 <col:26> 'int' lvalue ParmVar 0x55cfe6166bb8 'value' 'int &' non_odr_use_unevaluated
|         `-CXXMemberCallExpr 0x55cfe61677f0 <line:522:9, col:40> 'bool'
|           |-MemberExpr 0x55cfe61677a8 <col:9, col:18> '<bound member function type>' .parse 0x55cfe6167698
|           | `-MaterializeTemporaryExpr 0x55cfe61672e0 <col:9, col:16> 'IntArg' xvalue
|           |   `-CXXTemporaryObjectExpr 0x55cfe61671c0 <col:9, col:16> 'IntArg' 'void (int)'
|           |     `-CXXDefaultArgExpr 0x55cfe61671a0 <<invalid sloc>> 'int'
|           |-DeclRefExpr 0x55cfe6167358 <col:24> 'const String' lvalue ParmVar 0x55cfe6166b38 'str' 'const String &'
|           |-DeclRefExpr 0x55cfe6167378 <col:29> 'int' lvalue ParmVar 0x55cfe6166bb8 'value' 'int &'
|           `-DeclRefExpr 0x55cfe6167398 <col:36> 'const ArgContext' lvalue ParmVar 0x55cfe6166c30 'args' 'const ArgContext &'
|-FieldDecl 0x55cfe6166da0 <line:524:5, col:9> col:9 referenced _type 'int'
|-CXXConstructorDecl 0x55cfe6169bd8 <line:515:8> col:8 implicit constexpr NamedIntArg 'void (const NamedIntArg &)' inline default trivial noexcept-unevaluated 0x55cfe6169bd8
| `-ParmVarDecl 0x55cfe6169ce8 <col:8> col:8 'const NamedIntArg &'
|-CXXConstructorDecl 0x55cfe6169d88 <col:8> col:8 implicit used constexpr NamedIntArg 'void (NamedIntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55cfe6169e98 <col:8> col:8 used 'NamedIntArg &&'
| |-CXXCtorInitializer Field 0x55cfe6166da0 '_type' 'int'
| | `-ImplicitCastExpr 0x55cfe616a690 <col:8> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55cfe616a660 <col:8> 'int' xvalue ._type 0x55cfe6166da0
| |     `-CXXStaticCastExpr 0x55cfe616a630 <col:8> 'NamedIntArg' xvalue static_cast<struct NamedIntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55cfe616a600 <col:8> 'NamedIntArg' lvalue ParmVar 0x55cfe6169e98 '' 'NamedIntArg &&'
| `-CompoundStmt 0x55cfe616a6d8 <col:8>
`-CXXDestructorDecl 0x55cfe6169f50 <col:8> col:8 implicit referenced ~NamedIntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.NamedIntArg = type { i32 }
  NonVirtualBaseLLVMType:%struct.NamedIntArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WordArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cfe611fe08 <../dummy_inc/click/args.hh:1369:1, line:1373:1> line:1369:7 referenced class WordArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55cfe611ff28 <col:1, col:7> col:7 implicit class WordArg
|-AccessSpecDecl 0x55cfe611ffb8 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x55cfe61201b0 <line:1370:5, line:1372:5> line:1370:17 parse 'bool (const String &, String &, const ArgContext &)' static
| |-ParmVarDecl 0x55cfe611fff0 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55cfe6120068 <col:42, col:50> col:50 used result 'String &'
| |-ParmVarDecl 0x55cfe61200e0 <col:58, col:79> col:77 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55cfe6120280 <col:79> 'const ArgContext' lvalue Var 0x55cfe61016d8 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55cfe61203f8 <col:91, line:1372:5>
|   `-ReturnStmt 0x55cfe61203e8 <line:1371:9, col:39>
|     `-CallExpr 0x55cfe6120398 <col:16, col:39> 'bool'
|       |-ImplicitCastExpr 0x55cfe6120380 <col:16> 'bool (*)(const String &, String *, String *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55cfe6120360 <col:16> 'bool (const String &, String *, String *)' lvalue Function 0x55cfe611fd50 'cp_word' 'bool (const String &, String *, String *)'
|       |-DeclRefExpr 0x55cfe61202e8 <col:24> 'const String' lvalue ParmVar 0x55cfe611fff0 'str' 'const String &'
|       |-UnaryOperator 0x55cfe6120328 <col:29, col:30> 'String *' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x55cfe6120308 <col:30> 'String' lvalue ParmVar 0x55cfe6120068 'result' 'String &'
|       `-ImplicitCastExpr 0x55cfe61203d0 <col:38> 'String *' <NullToPointer>
|         `-IntegerLiteral 0x55cfe6120340 <col:38> 'int' 0
|-CXXConstructorDecl 0x55cfe616a7c8 <line:1369:7> col:7 implicit referenced constexpr WordArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55cfe616a8c8 <col:7> col:7 implicit constexpr WordArg 'void (const WordArg &)' inline default trivial noexcept-unevaluated 0x55cfe616a8c8
| `-ParmVarDecl 0x55cfe616a9d8 <col:7> col:7 'const WordArg &'
|-CXXConstructorDecl 0x55cfe616aa78 <col:7> col:7 implicit used constexpr WordArg 'void (WordArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55cfe616ab88 <col:7> col:7 'WordArg &&'
| `-CompoundStmt 0x55cfe6183850 <col:7>
`-CXXDestructorDecl 0x55cfe616ac28 <col:7> col:7 implicit referenced ~WordArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.WordArg = type { i8 }
  NonVirtualBaseLLVMType:%class.WordArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cfe5d09028 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55cfe5d09148 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x55cfe5d09210 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x55cfe5e4d1b0 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55cfe5e51318 <col:8>
|-CXXConstructorDecl 0x55cfe5e4d2b8 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x55cfe5e4d2b8
| `-ParmVarDecl 0x55cfe5e4d3c8 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x55cfe5e4d468 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55cfe5e4d578 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x55cfe5d09210 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x55cfe5e51530 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55cfe5e51500 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x55cfe5d09210
| |     `-CXXStaticCastExpr 0x55cfe5e514d0 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x55cfe5e514a0 <col:8> 'in_addr' lvalue ParmVar 0x55cfe5e4d578 '' 'in_addr &&'
| `-CompoundStmt 0x55cfe5e51578 <col:8>
`-CXXDestructorDecl 0x55cfe5e517b0 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cfe5d20770 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55cfe5d20888 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x55cfe5d20970 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x55cfe5d20950 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x55cfe5d20918 <col:22> 'int' 4
|-FieldDecl 0x55cfe5d20a18 <line:29:5, col:21> col:14 ip_v 'unsigned int'
| `-ConstantExpr 0x55cfe5d209f8 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x55cfe5d209c0 <col:21> 'int' 4
|-FieldDecl 0x55cfe5d20a78 <line:33:5, col:13> col:13 ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x55cfe5d20ad8 <line:40:5, col:14> col:14 ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x55cfe5d20b38 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x55cfe5d20b98 <line:42:5, col:14> col:14 ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x55cfe5d20bf8 <line:47:5, col:13> col:13 ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x55cfe5d20c58 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x55cfe5d20cb8 <line:49:5, col:14> col:14 ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x55cfe5d20d28 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x55cfe5d20d98 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping AST Record Layout
         0 | struct click_icmp
         0 |   uint8_t icmp_type
         1 |   uint8_t icmp_code
         2 |   uint16_t icmp_cksum
         4 |   uint32_t padding
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cfe5e0b2b0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55cfe5e0b3c8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55cfe5e0b458 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55cfe5e0b528 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55cfe5e0b610 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55cfe5e0b828 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55cfe5e0b6d0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cfe5e0b9d8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55cfe5e0b8e0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55cfe5e0bb20 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55cfe5e0ba90 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55cfe5e0bc68 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55cfe5e0bbd8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cfe5e0bdb0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55cfe5e0bd20 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cfe5e0be78 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55cfe5e0bfc0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55cfe5e0bf30 <col:28> col:31 'int'
|-CXXMethodDecl 0x55cfe5e0c088 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55cfe5e0c1d0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55cfe5e0c140 <col:28> col:31 'int'
|-CXXMethodDecl 0x55cfe5e0c348 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55cfe5e0c288 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cfe5e0c490 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55cfe5e0c400 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cfe5e0c558 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55cfe5e0c718 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55cfe5e0c608 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55cfe5e0c680 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cfe5e0c968 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55cfe5e0c7d8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55cfe5e0c850 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55cfe5e0ca18 <col:86> "" ""
|-CXXMethodDecl 0x55cfe5e0cc88 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55cfe5e0caf8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55cfe5e0cb70 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cfe5e0ce38 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55cfe5e0cd48 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55cfe5e0cfe8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55cfe5e0cef0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55cfe5e10328 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55cfe5e0d0a0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55cfe5e0d118 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55cfe5e10200 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cfe5e10608 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55cfe5e103f0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55cfe5e10468 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55cfe5e104e0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55cfe5e106c0 <col:115> "" ""
|-AccessSpecDecl 0x55cfe5e10730 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55cfe5e10768 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cfe5e10c18 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55cfe5e10c18
| `-ParmVarDecl 0x55cfe5e10d28 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55cfe5e10dc8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55cfe5e10dc8
| `-ParmVarDecl 0x55cfe5e10ed8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55cfe5e405e8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55cfe6032cc0 <col:7>
|-CXXConstructorDecl 0x55cfe5e406c0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55cfe5e406c0
| `-ParmVarDecl 0x55cfe5e407d8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55cfe5e40848 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55cfe5e40848
| `-ParmVarDecl 0x55cfe5e40958 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55cfe6035630 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cfe6021848 prev 0x55cfe6012250 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55cfe6021940 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55cfe6021a30 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55cfe6021b58 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55cfe6021cd8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55cfe6021e58 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55cfe6021fd8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55cfe6032e28 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55cfe6033698 <col:11>
|-CXXDestructorDecl 0x55cfe6032f00 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55cfe6033038 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55cfe6033038
| `-ParmVarDecl 0x55cfe6033148 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55cfe60331e8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55cfe60331e8
| `-ParmVarDecl 0x55cfe60332f8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55cfe6017078 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55cfe6017188 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55cfe6017408 <col:11>
|   `-ReturnStmt 0x55cfe60173f8 <col:11>
|     `-UnaryOperator 0x55cfe60173e0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55cfe60173d0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55cfe60171f8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55cfe60171f8
  `-ParmVarDecl 0x55cfe6017308 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cfe6022040 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55cfe6022158 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55cfe60221f8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55cfe6022260 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55cfe60222c8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55cfe6022330 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55cfe6022390 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55cfe6022450 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55cfe60224b0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55cfe6022510 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55cfe6032d38 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55cfe60221f8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55cfe60336a8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55cfe6033700 <col:12>
|-CXXConstructorDecl 0x55cfe6033368 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55cfe6033368
| `-ParmVarDecl 0x55cfe6033478 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55cfe6033518 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55cfe6033518
| `-ParmVarDecl 0x55cfe6033628 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55cfe6016760 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cfe600b980 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55cfe600ba98 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55cfe600bb28 <col:16, col:22> col:16 public
|-EnumDecl 0x55cfe600bb50 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55cfe600bc50 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55cfe600bd30 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe600bc30 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55cfe600bc10 <col:21> 'int' 28
| `-EnumConstantDecl 0x55cfe600bce0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55cfe600bd48 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55cfe600bcc0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55cfe600bca0 <col:22> 'int' 64
|-CXXMethodDecl 0x55cfe600c088 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55cfe600bd70 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55cfe600bdf0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55cfe600be68 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55cfe600bee0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55cfe600c148 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55cfe600c348 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55cfe600c1c0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55cfe600c238 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55cfe600c3f8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55cfe600c558 <line:55:5, col:91> col:35 used make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55cfe600c468 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55cfe600c600 <col:72> warn_unused_result ""
|-TypedefDecl 0x55cfe600c930 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55cfe600c8c0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55cfe600c860 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55cfe600c820 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55cfe5ae14e0 'void'
|       |-PointerType 0x55cfe5d1a750 'unsigned char *'
|       | `-BuiltinType 0x55cfe5ae15e0 'unsigned char'
|       |-TypedefType 0x55cfe5b87610 'size_t' sugar
|       | |-Typedef 0x55cfe5b51be0 'size_t'
|       | `-BuiltinType 0x55cfe5ae1640 'unsigned long'
|       `-PointerType 0x55cfe5ae1ce0 'void *'
|         `-BuiltinType 0x55cfe5ae14e0 'void'
|-CXXMethodDecl 0x55cfe600cda8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55cfe600c9a0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55cfe600ca18 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55cfe600cab0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55cfe600cb30 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55cfe60239a0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55cfe6023988 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55cfe6023950 <col:58> 'int' 0
| |-ParmVarDecl 0x55cfe600cbb0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55cfe60239c8 <col:76> 'int' 0
| |-ParmVarDecl 0x55cfe600cc30 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55cfe60239e8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55cfe600ce78 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55cfe600cef8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55cfe600cfb8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55cfe600d058 <col:20>
| `-OptimizeNoneAttr 0x55cfe600d0b0 <col:30>
|-CXXMethodDecl 0x55cfe600d128 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55cfe600d1c8 <col:20>
| `-OptimizeNoneAttr 0x55cfe600d220 <col:30>
|-CXXMethodDecl 0x55cfe600d298 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55cfe600d338 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55cfe600d3e8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55cfe600d488 <col:20>
| |-OptimizeNoneAttr 0x55cfe600d4e0 <col:30>
| `-WarnUnusedResultAttr 0x55cfe600d508 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55cfe600d560 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55cfe600d600 <col:20>
| `-OptimizeNoneAttr 0x55cfe600d658 <col:30>
|-CXXMethodDecl 0x55cfe600d6a8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55cfe600d748 <col:20>
| `-OptimizeNoneAttr 0x55cfe600d7a0 <col:30>
|-CXXMethodDecl 0x55cfe600d7e8 <line:81:5, col:58> col:49 used length 'uint32_t () const'
| |-NoInlineAttr 0x55cfe600d888 <col:20>
| `-OptimizeNoneAttr 0x55cfe600d8e0 <col:30>
|-CXXMethodDecl 0x55cfe600d928 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55cfe600d9e8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55cfe600dab0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55cfe600db78 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55cfe600dc38 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55cfe600dd58 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55cfe6023ab0 <col:54, line:99:5>
|   `-ReturnStmt 0x55cfe6023aa0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55cfe6023a88 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55cfe6023a58 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55cfe6022848
|         `-CXXThisExpr 0x55cfe6023a48 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55cfe600def8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55cfe600de08 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55cfe6023b60 <col:67, line:103:5>
|   `-BinaryOperator 0x55cfe6023b40 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55cfe6023ad8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55cfe6022848
|     | `-CXXThisExpr 0x55cfe6023ac8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55cfe6023b28 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55cfe6023b08 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55cfe600de08 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55cfe600dff0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55cfe6023be0 <col:33, line:107:5>
|   `-ReturnStmt 0x55cfe6023bd0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55cfe6023bb8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55cfe6023b88 <col:16> 'void *' lvalue ->_destructor_argument 0x55cfe60228b0
|         `-CXXThisExpr 0x55cfe6023b78 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55cfe600e0b0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55cfe6024210 <col:25, line:113:5>
|   |-ParenExpr 0x55cfe6023f58 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55cfe6023f28 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55cfe6023c98 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55cfe6023c70 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55cfe6023c38 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55cfe6023c08 <col:24> '<bound member function type>' ->shared 0x55cfe600d128
|   |   |       `-ImplicitCastExpr 0x55cfe6023c58 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55cfe6023bf8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55cfe6023cf8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55cfe6023cd8 <col:42> 'int' 0
|   |   `-CallExpr 0x55cfe6023e88 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55cfe6023e70 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55cfe6023e50 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55cfe5b7e370 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55cfe6023ec8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cfe6023d68 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55cfe6023ee0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cfe6023d90 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55cfe6023ef8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55cfe6023dc8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55cfe6023f10 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55cfe6023e38 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55cfe6023e20 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55cfe6023de8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55cfe6024158 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55cfe6023f88 <col:2> 'unsigned char *' lvalue ->_head 0x55cfe6022650
|   | | `-CXXThisExpr 0x55cfe6023f78 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55cfe6024140 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55cfe6024120 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55cfe6023fc8 <col:10> 'unsigned char *' lvalue ->_data 0x55cfe60226b8
|   |     | `-CXXThisExpr 0x55cfe6023fb8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55cfe6024108 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55cfe60240e8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55cfe6024008 <col:18> 'unsigned char *' lvalue ->_tail 0x55cfe6022720
|   |         | `-CXXThisExpr 0x55cfe6023ff8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55cfe60240d0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55cfe60240b0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55cfe6024048 <col:26> 'unsigned char *' lvalue ->_end 0x55cfe6022788
|   |             | `-CXXThisExpr 0x55cfe6024038 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55cfe6024098 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55cfe6024078 <col:33> 'int' 0
|   `-BinaryOperator 0x55cfe60241f0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55cfe6024188 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55cfe6022848
|     | `-CXXThisExpr 0x55cfe6024178 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55cfe60241d8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55cfe60241b8 <col:16> 'int' 0
|-CXXMethodDecl 0x55cfe600e1f0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55cfe600e160 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55cfe600e298 <col:20>
| |-OptimizeNoneAttr 0x55cfe600e2f0 <col:30>
| `-WarnUnusedResultAttr 0x55cfe600e318 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55cfe600e3e8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55cfe600e358 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55cfe600e490 <col:20>
| |-OptimizeNoneAttr 0x55cfe600e4e8 <col:30>
| `-WarnUnusedResultAttr 0x55cfe600e510 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55cfe600e648 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55cfe600e550 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55cfe600e6f0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55cfe600e810 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55cfe600e780 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55cfe600e8b8 <col:20>
| `-OptimizeNoneAttr 0x55cfe600e910 <col:30>
|-CXXMethodDecl 0x55cfe600e9d8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55cfe600e948 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55cfe600ea80 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55cfe600eb80 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55cfe600eaf0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55cfe600ec28 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55cfe600ed28 <line:245:5, col:62> col:45 used take 'void (uint32_t)'
| |-ParmVarDecl 0x55cfe600ec98 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55cfe600edd0 <col:20>
| `-OptimizeNoneAttr 0x55cfe600ee28 <col:30>
|-CXXMethodDecl 0x55cfe600efb8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55cfe600ee68 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55cfe600eee0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55cfe6023a08 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55cfe600f068 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55cfe600f268 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55cfe600f0e0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55cfe600f158 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cfe600f478 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55cfe600f328 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55cfe600f3a0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cfe600f688 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55cfe600f538 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55cfe600f5b8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55cfe6023a18 <col:39> 'int' 0
|-CXXMethodDecl 0x55cfe600f758 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55cfe600f820 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55cfe600f8e8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55cfe600f9a8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55cfe600fa70 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55cfe600fbb8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55cfe600fb28 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55cfe600fd88 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55cfe600fc78 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55cfe600fcf0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cfe600fe58 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55cfe600ff18 <line:288:5, col:66> col:45 used has_network_header 'bool () const'
| |-NoInlineAttr 0x55cfe600ffb8 <col:20>
| `-OptimizeNoneAttr 0x55cfe6010010 <col:30>
|-CXXMethodDecl 0x55cfe6010060 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55cfe6010100 <col:20>
| `-OptimizeNoneAttr 0x55cfe6010158 <col:30>
|-CXXMethodDecl 0x55cfe60101a8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55cfe6010268 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55cfe6010330 <line:292:5, col:61> col:44 used network_length 'int () const'
| |-NoInlineAttr 0x55cfe60103d0 <col:20>
| `-OptimizeNoneAttr 0x55cfe6010428 <col:30>
|-CXXMethodDecl 0x55cfe6010578 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55cfe6010468 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55cfe60104e0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cfe60106c8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55cfe6010638 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cfe6010790 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55cfe6010850 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55cfe60108f0 <col:20>
| `-OptimizeNoneAttr 0x55cfe6010948 <col:30>
|-CXXMethodDecl 0x55cfe6010998 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55cfe6010a38 <col:20>
| `-OptimizeNoneAttr 0x55cfe6010a90 <col:30>
|-CXXMethodDecl 0x55cfe6010ae0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55cfe6010ba8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55cfe6010c48 <col:20>
| `-OptimizeNoneAttr 0x55cfe6010ca0 <col:30>
|-CXXMethodDecl 0x55cfe6010ce8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55cfe6010e08 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55cfe6010f78 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55cfe6010eb8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55cfe6011068 <line:307:5, col:68> col:56 used ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55cfe6011108 <col:20>
| `-OptimizeNoneAttr 0x55cfe6011160 <col:30>
|-CXXMethodDecl 0x55cfe60111b0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55cfe6011270 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55cfe60114a8 <line:310:5, col:92> col:45 used set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55cfe6011320 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55cfe6011398 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55cfe6011558 <col:20>
| `-OptimizeNoneAttr 0x55cfe60115b0 <col:30>
|-CXXMethodDecl 0x55cfe6011658 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55cfe60116f8 <col:20>
| `-OptimizeNoneAttr 0x55cfe6011750 <col:30>
|-CXXMethodDecl 0x55cfe60117a0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55cfe6011840 <col:20>
| `-OptimizeNoneAttr 0x55cfe6011898 <col:30>
|-CXXMethodDecl 0x55cfe60118e0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55cfe6011980 <col:20>
| `-OptimizeNoneAttr 0x55cfe60119d8 <col:30>
|-CXXMethodDecl 0x55cfe6011ad8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55cfe6011a10 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55cfe6011b80 <col:20>
| `-OptimizeNoneAttr 0x55cfe6011bd8 <col:30>
|-CXXMethodDecl 0x55cfe6011d98 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55cfe6011c10 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55cfe6011c88 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55cfe6011e48 <col:20>
| `-OptimizeNoneAttr 0x55cfe6011ea0 <col:30>
|-CXXMethodDecl 0x55cfe6011f48 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55cfe6012068 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55cfe6012188 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55cfe6012228 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55cfe6012250 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55cfe6012378 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55cfe6012418 <col:20>
| `-OptimizeNoneAttr 0x55cfe6012470 <col:30>
|-CXXMethodDecl 0x55cfe6012518 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55cfe60125b8 <col:20>
| `-OptimizeNoneAttr 0x55cfe6012610 <col:30>
|-AccessSpecDecl 0x55cfe6012638 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55cfe6012660 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55cfe6012770 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55cfe60127c0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55cfe6012750 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55cfe6012720 <col:14> 'int' 48
|-CXXMethodDecl 0x55cfe6012828 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55cfe60128c8 <col:20>
| `-OptimizeNoneAttr 0x55cfe6012920 <col:30>
|-CXXMethodDecl 0x55cfe6012998 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55cfe6012a38 <col:20>
| `-OptimizeNoneAttr 0x55cfe6012a90 <col:30>
|-CXXMethodDecl 0x55cfe6012b58 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55cfe6012ac8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55cfe6012cf8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55cfe6012e98 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55cfe6012da8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55cfe6012f40 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55cfe6013040 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55cfe60133f0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe6013020 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55cfe6013000 <col:9> 'int' 0
| |-EnumConstantDecl 0x55cfe60130d0 <line:370:2, col:14> col:2 referenced BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55cfe6013408 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe60130b0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55cfe6013090 <col:14> 'int' 1
| |-EnumConstantDecl 0x55cfe6013160 <line:372:2, col:14> col:2 referenced MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55cfe6013420 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe6013140 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55cfe6013120 <col:14> 'int' 2
| |-EnumConstantDecl 0x55cfe60131f0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55cfe6013438 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe60131d0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55cfe60131b0 <col:14> 'int' 3
| |-EnumConstantDecl 0x55cfe6013280 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55cfe6013450 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe6013260 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55cfe6013240 <col:13> 'int' 4
| |-EnumConstantDecl 0x55cfe6013310 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55cfe6013468 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe60132f0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55cfe60132d0 <col:13> 'int' 5
| `-EnumConstantDecl 0x55cfe60133a0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55cfe6013480 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55cfe6013380 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55cfe6013360 <col:14> 'int' 6
|-CXXMethodDecl 0x55cfe60134e8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55cfe6013588 <col:20>
| `-OptimizeNoneAttr 0x55cfe60135e0 <col:30>
|-CXXMethodDecl 0x55cfe60136d8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55cfe6013618 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55cfe6013780 <col:20>
| `-OptimizeNoneAttr 0x55cfe60137d8 <col:30>
|-CXXMethodDecl 0x55cfe6013848 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55cfe6013970 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55cfe6013ae8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55cfe6013a20 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55cfe6013bb0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55cfe6013c78 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55cfe6013db8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55cfe6013d28 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55cfe6013e60 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55cfe6013f60 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55cfe6014160 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe6013f40 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55cfe6013f20 <col:23> 'int' 0
| |-EnumConstantDecl 0x55cfe6013ff0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55cfe6014178 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe6013fd0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55cfe6013fb0 <col:45> 'int' 4
| |-EnumConstantDecl 0x55cfe6014080 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55cfe6014190 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe6014060 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55cfe6014040 <col:24> 'int' 0
| `-EnumConstantDecl 0x55cfe6014110 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55cfe60141a8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55cfe60140f0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55cfe60140d0 <col:47> 'int' 16
|-CXXMethodDecl 0x55cfe6014208 <line:431:5, col:36> col:22 used dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55cfe6014378 <line:436:5, col:75> col:45 used set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55cfe60142b8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55cfe6014420 <col:20>
| `-OptimizeNoneAttr 0x55cfe6014478 <col:30>
|-CXXMethodDecl 0x55cfe60144c8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55cfe6024330 <col:18, col:36>
|   `-ReturnStmt 0x55cfe6024320 <col:20, col:33>
|     `-ImplicitCastExpr 0x55cfe6024308 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55cfe60242e8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55cfe60242b8 <col:27> '<bound member function type>' ->xanno 0x55cfe6012518
|           `-CXXThisExpr 0x55cfe60242a8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55cfe60145c0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55cfe6024440 <col:30, col:48>
|   `-ReturnStmt 0x55cfe6024430 <col:32, col:45>
|     `-ImplicitCastExpr 0x55cfe6024418 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55cfe60243f8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55cfe60243c8 <col:39> '<bound member function type>' ->xanno 0x55cfe6012378
|           `-CXXThisExpr 0x55cfe60243b8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55cfe60146a8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55cfe60245d8 <col:24, col:50>
|   `-ReturnStmt 0x55cfe60245c8 <col:26, col:47>
|     `-UnaryOperator 0x55cfe60245b0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55cfe6024590 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55cfe6024578 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55cfe6024528 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55cfe6021b58
|         |   `-CXXMemberCallExpr 0x55cfe6024508 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55cfe60244d8 <col:34> '<bound member function type>' ->xanno 0x55cfe6012518
|         |       `-CXXThisExpr 0x55cfe60244c8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55cfe6024558 <col:46> 'int' 0
|-CXXMethodDecl 0x55cfe6014798 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55cfe60247a8 <col:36, col:62>
|   `-ReturnStmt 0x55cfe6024798 <col:38, col:59>
|     `-UnaryOperator 0x55cfe6024780 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55cfe6024760 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55cfe6024748 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55cfe60246c0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55cfe6021b58
|         |   `-CXXMemberCallExpr 0x55cfe60246a0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55cfe6024670 <col:46> '<bound member function type>' ->xanno 0x55cfe6012378
|         |       `-CXXThisExpr 0x55cfe6024660 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55cfe60246f0 <col:58> 'int' 0
|-CXXMethodDecl 0x55cfe60148b8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55cfe6024940 <col:26, col:53>
|   `-ReturnStmt 0x55cfe6024930 <col:28, col:50>
|     `-UnaryOperator 0x55cfe6024918 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55cfe60248f8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55cfe60248e0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55cfe6024890 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55cfe6021e58
|         |   `-CXXMemberCallExpr 0x55cfe6024870 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55cfe6024840 <col:36> '<bound member function type>' ->xanno 0x55cfe6012518
|         |       `-CXXThisExpr 0x55cfe6024830 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55cfe60248c0 <col:49> 'int' 0
|-CXXMethodDecl 0x55cfe60149d8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55cfe6024b18 <col:38, col:65>
|   `-ReturnStmt 0x55cfe6024b08 <col:40, col:62>
|     `-UnaryOperator 0x55cfe6024af0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55cfe6024ad0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55cfe6024ab8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55cfe6024a28 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55cfe6021e58
|         |   `-CXXMemberCallExpr 0x55cfe6024a08 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55cfe60249d8 <col:48> '<bound member function type>' ->xanno 0x55cfe6012378
|         |       `-CXXThisExpr 0x55cfe60249c8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55cfe6024a58 <col:61> 'int' 0
|-CXXMethodDecl 0x55cfe6014b88 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55cfe6014a90 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55cfe60251e8 <col:34, line:463:5>
|   |-ParenExpr 0x55cfe6025030 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55cfe6025000 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55cfe6024c68 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55cfe6024c38 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55cfe6024b88 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55cfe6024b70 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55cfe6024b30 <col:23> 'int' lvalue ParmVar 0x55cfe6014a90 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55cfe6024b50 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55cfe6024c18 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55cfe6024be8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55cfe6024ba8 <col:33> 'int' lvalue ParmVar 0x55cfe6014a90 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55cfe6024c00 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55cfe6024bc8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55cfe6012770 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55cfe6024cc8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55cfe6024ca8 <col:56> 'int' 0
|   |   `-CallExpr 0x55cfe6024f60 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55cfe6024f48 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55cfe6024f28 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55cfe5b7e370 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55cfe6024fa0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cfe6024db8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55cfe6024fb8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cfe6024de8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55cfe6024fd0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55cfe6024e20 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55cfe6024fe8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55cfe6024f10 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55cfe6024ef8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55cfe6024eb8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55cfe60251d8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55cfe60251c0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55cfe60251a0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55cfe6025170 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55cfe6025120 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55cfe6021b58
|         |   `-CXXMemberCallExpr 0x55cfe6025100 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55cfe60250d0 <col:9> '<bound member function type>' ->xanno 0x55cfe6012378
|         |       `-CXXThisExpr 0x55cfe60250c0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55cfe6025188 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55cfe6025150 <col:21> 'int' lvalue ParmVar 0x55cfe6014a90 'i' 'int'
|-CXXMethodDecl 0x55cfe6014dd8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55cfe6014c48 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55cfe6014cc0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55cfe602dba8 <col:40, line:472:5>
|   |-ParenExpr 0x55cfe602d9c0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55cfe602d990 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55cfe6025340 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55cfe6025310 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55cfe6025260 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55cfe6025248 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55cfe6025208 <col:23> 'int' lvalue ParmVar 0x55cfe6014c48 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55cfe6025228 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55cfe60252f0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55cfe60252c0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55cfe6025280 <col:33> 'int' lvalue ParmVar 0x55cfe6014c48 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55cfe60252d8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55cfe60252a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55cfe6012770 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55cfe60253a0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55cfe6025380 <col:56> 'int' 0
|   |   `-CallExpr 0x55cfe602d8f0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55cfe602d8d8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55cfe602d8b8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55cfe5b7e370 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55cfe602d930 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cfe602d740 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55cfe602d948 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cfe602d770 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55cfe602d960 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55cfe602d7a8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55cfe602d978 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55cfe602d8a0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55cfe602d888 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55cfe602d848 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55cfe602db88 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55cfe602db30 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55cfe602db00 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55cfe602dab0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55cfe6021b58
|     | |   `-CXXMemberCallExpr 0x55cfe602da90 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55cfe602da60 <col:2> '<bound member function type>' ->xanno 0x55cfe6012518
|     | |       `-CXXThisExpr 0x55cfe602da50 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55cfe602db18 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55cfe602dae0 <col:14> 'int' lvalue ParmVar 0x55cfe6014c48 'i' 'int'
|     `-ImplicitCastExpr 0x55cfe602db70 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55cfe602db50 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55cfe6014cc0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55cfe6014f98 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55cfe6014ea0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55cfe602e328 <col:36, line:485:5>
|   |-ParenExpr 0x55cfe602e090 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55cfe602e060 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55cfe602dd40 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55cfe602dd10 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55cfe602dc20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55cfe602dc08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55cfe602dbc8 <col:23> 'int' lvalue ParmVar 0x55cfe6014ea0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55cfe602dbe8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55cfe602dcf0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55cfe602dcd8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55cfe602dc40 <col:33> 'int' lvalue ParmVar 0x55cfe6014ea0 'i' 'int'
|   |   |     `-BinaryOperator 0x55cfe602dcb8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55cfe602dca0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55cfe602dc60 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55cfe6012770 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55cfe602dc80 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55cfe602dda0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55cfe602dd80 <col:60> 'int' 0
|   |   `-CallExpr 0x55cfe602dfc0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55cfe602dfa8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55cfe602df88 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55cfe5b7e370 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55cfe602e000 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cfe602de10 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55cfe602e018 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cfe602de48 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55cfe602e030 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55cfe602de80 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55cfe602e048 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55cfe602df70 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55cfe602df58 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55cfe602df18 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55cfe602e318 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55cfe602e300 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55cfe602e2e8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55cfe602e2b8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55cfe602e258 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55cfe602e228 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55cfe602e1a0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55cfe6021a30
|             |   `-CXXMemberCallExpr 0x55cfe602e180 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55cfe602e150 <col:61> '<bound member function type>' ->xanno 0x55cfe6012378
|             |       `-CXXThisExpr 0x55cfe602e140 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55cfe602e240 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55cfe602e1d0 <col:74> 'int' lvalue ParmVar 0x55cfe6014ea0 'i' 'int'
|-CXXMethodDecl 0x55cfe60151e8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55cfe6015058 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55cfe60150d0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55cfe602ea78 <col:42, line:500:5>
|   |-ParenExpr 0x55cfe602e810 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55cfe602e7e0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55cfe602e4c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55cfe602e490 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55cfe602e3a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55cfe602e388 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55cfe602e348 <col:23> 'int' lvalue ParmVar 0x55cfe6015058 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55cfe602e368 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55cfe602e470 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55cfe602e458 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55cfe602e3c0 <col:33> 'int' lvalue ParmVar 0x55cfe6015058 'i' 'int'
|   |   |     `-BinaryOperator 0x55cfe602e438 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55cfe602e420 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55cfe602e3e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55cfe6012770 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55cfe602e400 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55cfe602e520 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55cfe602e500 <col:60> 'int' 0
|   |   `-CallExpr 0x55cfe602e740 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55cfe602e728 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55cfe602e708 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55cfe5b7e370 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55cfe602e780 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cfe602e590 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55cfe602e798 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cfe602e5c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55cfe602e7b0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55cfe602e600 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55cfe602e7c8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55cfe602e6f0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55cfe602e6d8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55cfe602e698 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55cfe602ea58 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55cfe602ea08 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55cfe602e9d8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55cfe602e980 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55cfe602e950 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55cfe602e900 <col:48, col:57> 'char [48]' lvalue ->c 0x55cfe6021a30
|     |     |   `-CXXMemberCallExpr 0x55cfe602e8e0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55cfe602e8b0 <col:48> '<bound member function type>' ->xanno 0x55cfe6012518
|     |     |       `-CXXThisExpr 0x55cfe602e8a0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55cfe602e968 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55cfe602e930 <col:61> 'int' lvalue ParmVar 0x55cfe6015058 'i' 'int'
|     `-ImplicitCastExpr 0x55cfe602ea40 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55cfe602ea20 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55cfe60150d0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55cfe60153a8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55cfe60152b0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55cfe602f1d8 <col:35, line:513:5>
|   |-ParenExpr 0x55cfe602eee8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55cfe602eeb8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55cfe602ec10 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55cfe602ebe0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55cfe602eaf0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55cfe602ead8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55cfe602ea98 <col:23> 'int' lvalue ParmVar 0x55cfe60152b0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55cfe602eab8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55cfe602ebc0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55cfe602eba8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55cfe602eb10 <col:33> 'int' lvalue ParmVar 0x55cfe60152b0 'i' 'int'
|   |   |     `-BinaryOperator 0x55cfe602eb88 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55cfe602eb70 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55cfe602eb30 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55cfe6012770 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55cfe602eb50 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55cfe602ec70 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55cfe602ec50 <col:60> 'int' 0
|   |   `-CallExpr 0x55cfe602ee18 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55cfe602ee00 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55cfe602ede0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55cfe5b7e370 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55cfe602ee58 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cfe602ece0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55cfe602ee70 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cfe602ed18 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55cfe602ee88 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55cfe602ed50 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55cfe602eea0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55cfe602edc8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55cfe602edb0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55cfe602ed70 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55cfe602f1c8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55cfe602f1b0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55cfe602f198 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55cfe602f168 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55cfe602f0e0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55cfe602f0b0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55cfe602f060 <col:60, col:69> 'char const[48]' lvalue ->c 0x55cfe6021a30
|             |   `-CXXMemberCallExpr 0x55cfe602f040 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55cfe602f010 <col:60> '<bound member function type>' ->xanno 0x55cfe6012378
|             |       `-CXXThisExpr 0x55cfe602f000 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55cfe602f0c8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55cfe602f090 <col:73> 'int' lvalue ParmVar 0x55cfe60152b0 'i' 'int'
|-CXXMethodDecl 0x55cfe60155f8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55cfe6015468 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55cfe60154e0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55cfe602f8e8 <col:41, line:528:5>
|   |-ParenExpr 0x55cfe602f680 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55cfe602f650 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55cfe602f370 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55cfe602f340 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55cfe602f250 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55cfe602f238 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55cfe602f1f8 <col:23> 'int' lvalue ParmVar 0x55cfe6015468 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55cfe602f218 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55cfe602f320 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55cfe602f308 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55cfe602f270 <col:33> 'int' lvalue ParmVar 0x55cfe6015468 'i' 'int'
|   |   |     `-BinaryOperator 0x55cfe602f2e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55cfe602f2d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55cfe602f290 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55cfe6012770 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55cfe602f2b0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55cfe602f3d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55cfe602f3b0 <col:60> 'int' 0
|   |   `-CallExpr 0x55cfe602f5b0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55cfe602f598 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55cfe602f578 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55cfe5b7e370 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55cfe602f5f0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cfe602f440 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55cfe602f608 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cfe602f478 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55cfe602f620 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55cfe602f4b0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55cfe602f638 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55cfe602f560 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55cfe602f548 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55cfe602f508 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55cfe602f8c8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55cfe602f878 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55cfe602f848 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55cfe602f7f0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55cfe602f7c0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55cfe602f770 <col:47, col:56> 'char [48]' lvalue ->c 0x55cfe6021a30
|     |     |   `-CXXMemberCallExpr 0x55cfe602f750 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55cfe602f720 <col:47> '<bound member function type>' ->xanno 0x55cfe6012518
|     |     |       `-CXXThisExpr 0x55cfe602f710 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55cfe602f7d8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55cfe602f7a0 <col:60> 'int' lvalue ParmVar 0x55cfe6015468 'i' 'int'
|     `-ImplicitCastExpr 0x55cfe602f8b0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55cfe602f890 <col:65> 'int16_t':'short' lvalue ParmVar 0x55cfe60154e0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55cfe60157b8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55cfe60156c0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55cfe602ffb8 <col:36, line:541:5>
|   |-ParenExpr 0x55cfe602fd58 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55cfe602fd28 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55cfe602fa80 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55cfe602fa50 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55cfe602f960 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55cfe602f948 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55cfe602f908 <col:23> 'int' lvalue ParmVar 0x55cfe60156c0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55cfe602f928 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55cfe602fa30 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55cfe602fa18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55cfe602f980 <col:33> 'int' lvalue ParmVar 0x55cfe60156c0 'i' 'int'
|   |   |     `-BinaryOperator 0x55cfe602f9f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55cfe602f9e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55cfe602f9a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55cfe6012770 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55cfe602f9c0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55cfe602fae0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55cfe602fac0 <col:60> 'int' 0
|   |   `-CallExpr 0x55cfe602fc88 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55cfe602fc70 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55cfe602fc50 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55cfe5b7e370 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55cfe602fcc8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cfe602fb50 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55cfe602fce0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cfe602fb88 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55cfe602fcf8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55cfe602fbc0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55cfe602fd10 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55cfe602fc38 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55cfe602fc20 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55cfe602fbe0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55cfe602ffa8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55cfe602ff90 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55cfe602ff78 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55cfe602ff48 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55cfe602fef0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55cfe602fec0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55cfe602fe70 <col:61, col:70> 'char const[48]' lvalue ->c 0x55cfe6021a30
|             |   `-CXXMemberCallExpr 0x55cfe602fe50 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55cfe602fe20 <col:61> '<bound member function type>' ->xanno 0x55cfe6012378
|             |       `-CXXThisExpr 0x55cfe602fe10 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55cfe602fed8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55cfe602fea0 <col:74> 'int' lvalue ParmVar 0x55cfe60156c0 'i' 'int'
|-CXXMethodDecl 0x55cfe6015988 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55cfe6015878 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55cfe60158f0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55cfe6015a38 <col:20>
| `-OptimizeNoneAttr 0x55cfe6015a90 <col:30>
|-CXXMethodDecl 0x55cfe6015bc8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55cfe6015ad0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55cfe6030688 <col:35, line:562:5>
|   |-ParenExpr 0x55cfe6030428 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55cfe60303f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55cfe6030150 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55cfe6030120 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55cfe6030030 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55cfe6030018 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55cfe602ffd8 <col:23> 'int' lvalue ParmVar 0x55cfe6015ad0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55cfe602fff8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55cfe6030100 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55cfe60300e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55cfe6030050 <col:33> 'int' lvalue ParmVar 0x55cfe6015ad0 'i' 'int'
|   |   |     `-BinaryOperator 0x55cfe60300c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55cfe60300b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55cfe6030070 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55cfe6012770 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55cfe6030090 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55cfe60301b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55cfe6030190 <col:60> 'int' 0
|   |   `-CallExpr 0x55cfe6030358 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55cfe6030340 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55cfe6030320 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55cfe5b7e370 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55cfe6030398 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cfe6030220 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55cfe60303b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cfe6030258 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55cfe60303c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55cfe6030290 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55cfe60303e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55cfe6030308 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55cfe60302f0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55cfe60302b0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55cfe6030678 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55cfe6030660 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55cfe6030648 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55cfe6030618 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55cfe60305c0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55cfe6030590 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55cfe6030540 <col:60, col:69> 'char const[48]' lvalue ->c 0x55cfe6021a30
|             |   `-CXXMemberCallExpr 0x55cfe6030520 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55cfe60304f0 <col:60> '<bound member function type>' ->xanno 0x55cfe6012378
|             |       `-CXXThisExpr 0x55cfe60304e0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55cfe60305a8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55cfe6030570 <col:73> 'int' lvalue ParmVar 0x55cfe6015ad0 'i' 'int'
|-CXXMethodDecl 0x55cfe6015dd8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55cfe6015c88 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55cfe6015d00 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55cfe6030d68 <col:41, line:577:5>
|   |-ParenExpr 0x55cfe6030af8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55cfe6030ac8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55cfe6030820 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55cfe60307f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55cfe6030700 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55cfe60306e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55cfe60306a8 <col:23> 'int' lvalue ParmVar 0x55cfe6015c88 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55cfe60306c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55cfe60307d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55cfe60307b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55cfe6030720 <col:33> 'int' lvalue ParmVar 0x55cfe6015c88 'i' 'int'
|   |   |     `-BinaryOperator 0x55cfe6030798 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55cfe6030780 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55cfe6030740 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55cfe6012770 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55cfe6030760 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55cfe6030880 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55cfe6030860 <col:60> 'int' 0
|   |   `-CallExpr 0x55cfe6030a28 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55cfe6030a10 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55cfe60309f0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55cfe5b7e370 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55cfe6030a68 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cfe60308f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55cfe6030a80 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cfe6030928 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55cfe6030a98 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55cfe6030960 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55cfe6030ab0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55cfe60309d8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55cfe60309c0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55cfe6030980 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55cfe6030d48 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55cfe6030cf8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55cfe6030cc8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55cfe6030c68 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55cfe6030c38 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55cfe6030be8 <col:47, col:56> 'char [48]' lvalue ->c 0x55cfe6021a30
|     |     |   `-CXXMemberCallExpr 0x55cfe6030bc8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55cfe6030b98 <col:47> '<bound member function type>' ->xanno 0x55cfe6012518
|     |     |       `-CXXThisExpr 0x55cfe6030b88 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55cfe6030c50 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55cfe6030c18 <col:60> 'int' lvalue ParmVar 0x55cfe6015c88 'i' 'int'
|     `-ImplicitCastExpr 0x55cfe6030d30 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55cfe6030d10 <col:65> 'int32_t':'int' lvalue ParmVar 0x55cfe6015d00 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55cfe6015f98 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55cfe6015ea0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55cfe6031498 <col:36, line:591:5>
|   |-ParenExpr 0x55cfe60311d8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55cfe60311a8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55cfe6030f00 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55cfe6030ed0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55cfe6030de0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55cfe6030dc8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55cfe6030d88 <col:23> 'int' lvalue ParmVar 0x55cfe6015ea0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55cfe6030da8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55cfe6030eb0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55cfe6030e98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55cfe6030e00 <col:33> 'int' lvalue ParmVar 0x55cfe6015ea0 'i' 'int'
|   |   |     `-BinaryOperator 0x55cfe6030e78 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55cfe6030e60 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55cfe6030e20 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55cfe6012770 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55cfe6030e40 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55cfe6030f60 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55cfe6030f40 <col:60> 'int' 0
|   |   `-CallExpr 0x55cfe6031108 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55cfe60310f0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55cfe60310d0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55cfe5b7e370 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55cfe6031148 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cfe6030fd0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55cfe6031160 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cfe6031008 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55cfe6031178 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55cfe6031040 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55cfe6031190 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55cfe60310b8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55cfe60310a0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55cfe6031060 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55cfe6031488 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55cfe6031470 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55cfe6031458 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55cfe6031428 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55cfe60313a0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55cfe6031370 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55cfe6031320 <col:61, col:70> 'char const[48]' lvalue ->c 0x55cfe6021a30
|             |   `-CXXMemberCallExpr 0x55cfe6031300 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55cfe60312d0 <col:61> '<bound member function type>' ->xanno 0x55cfe6012378
|             |       `-CXXThisExpr 0x55cfe60312c0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55cfe6031388 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55cfe6031350 <col:74> 'int' lvalue ParmVar 0x55cfe6015ea0 'i' 'int'
|-CXXMethodDecl 0x55cfe60161e8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55cfe6016058 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55cfe60160d0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55cfe6031b88 <col:42, line:606:5>
|   |-ParenExpr 0x55cfe6031920 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55cfe60318f0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55cfe6031630 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55cfe6031600 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55cfe6031510 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55cfe60314f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55cfe60314b8 <col:23> 'int' lvalue ParmVar 0x55cfe6016058 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55cfe60314d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55cfe60315e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55cfe60315c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55cfe6031530 <col:33> 'int' lvalue ParmVar 0x55cfe6016058 'i' 'int'
|   |   |     `-BinaryOperator 0x55cfe60315a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55cfe6031590 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55cfe6031550 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55cfe6012770 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55cfe6031570 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55cfe6031690 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55cfe6031670 <col:60> 'int' 0
|   |   `-CallExpr 0x55cfe6031850 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55cfe6031838 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55cfe6031818 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55cfe5b7e370 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55cfe6031890 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cfe6031700 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55cfe60318a8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cfe6031750 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55cfe60318c0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55cfe6031788 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55cfe60318d8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55cfe6031800 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55cfe60317e8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55cfe60317a8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55cfe6031b68 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55cfe6031b18 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55cfe6031ae8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55cfe6031a90 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55cfe6031a60 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55cfe6031a10 <col:48, col:57> 'char [48]' lvalue ->c 0x55cfe6021a30
|     |     |   `-CXXMemberCallExpr 0x55cfe60319f0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55cfe60319c0 <col:48> '<bound member function type>' ->xanno 0x55cfe6012518
|     |     |       `-CXXThisExpr 0x55cfe60319b0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55cfe6031a78 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55cfe6031a40 <col:61> 'int' lvalue ParmVar 0x55cfe6016058 'i' 'int'
|     `-ImplicitCastExpr 0x55cfe6031b50 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55cfe6031b30 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55cfe60160d0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55cfe6016380 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55cfe60162b0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55cfe60323f8 <col:33, line:620:5>
|   |-ParenExpr 0x55cfe6032170 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55cfe6032140 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55cfe6031d90 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55cfe6031d60 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55cfe6031c00 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55cfe6031be8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55cfe6031ba8 <col:23> 'int' lvalue ParmVar 0x55cfe60162b0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55cfe6031bc8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55cfe6031d40 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55cfe6031d28 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55cfe6031c20 <col:33> 'int' lvalue ParmVar 0x55cfe60162b0 'i' 'int'
|   |   |     `-BinaryOperator 0x55cfe6031d08 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55cfe6031cf0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55cfe6031c40 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55cfe6012770 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55cfe6031cc8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55cfe6031cb0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55cfe6031c78 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55cfe6031df0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55cfe6031dd0 <col:79> 'int' 0
|   |   `-CallExpr 0x55cfe60320a0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55cfe6032088 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55cfe6032068 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55cfe5b7e370 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55cfe60320e0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cfe6031ed8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55cfe60320f8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cfe6031f20 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55cfe6032110 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55cfe6031f58 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55cfe6032128 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55cfe6032050 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55cfe6032038 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55cfe6031ff8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55cfe60323e8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55cfe60323d0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55cfe60323b8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55cfe6032388 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55cfe6032300 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55cfe60322d0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55cfe6032280 <col:67, col:76> 'char const[48]' lvalue ->c 0x55cfe6021a30
|             |   `-CXXMemberCallExpr 0x55cfe6032260 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55cfe6032230 <col:67> '<bound member function type>' ->xanno 0x55cfe6012378
|             |       `-CXXThisExpr 0x55cfe6032220 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55cfe60322e8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55cfe60322b0 <col:80> 'int' lvalue ParmVar 0x55cfe60162b0 'i' 'int'
|-CXXMethodDecl 0x55cfe6016598 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55cfe6016440 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55cfe60164c0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55cfe6032c20 <col:45, line:635:5>
|   |-ParenExpr 0x55cfe6032968 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55cfe6032938 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55cfe6032600 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55cfe60325d0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55cfe6032470 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55cfe6032458 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55cfe6032418 <col:23> 'int' lvalue ParmVar 0x55cfe6016440 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55cfe6032438 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55cfe60325b0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55cfe6032598 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55cfe6032490 <col:33> 'int' lvalue ParmVar 0x55cfe6016440 'i' 'int'
|   |   |     `-BinaryOperator 0x55cfe6032578 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55cfe6032560 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55cfe60324b0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55cfe6012770 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55cfe6032538 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55cfe6032520 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55cfe60324e8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55cfe6032660 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55cfe6032640 <col:79> 'int' 0
|   |   `-CallExpr 0x55cfe6032898 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55cfe6032880 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55cfe6032860 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55cfe5b7e370 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55cfe60328d8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cfe60326d0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55cfe60328f0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55cfe6032718 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55cfe6032908 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55cfe6032750 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55cfe6032920 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55cfe6032848 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55cfe6032830 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55cfe60327e8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55cfe6032c00 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55cfe6032b68 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55cfe6032b38 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55cfe6032ad8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55cfe6032aa8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55cfe6032a58 <col:54, col:63> 'char [48]' lvalue ->c 0x55cfe6021a30
|     |     |   `-CXXMemberCallExpr 0x55cfe6032a38 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55cfe6032a08 <col:54> '<bound member function type>' ->xanno 0x55cfe6012518
|     |     |       `-CXXThisExpr 0x55cfe60329f8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55cfe6032ac0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55cfe6032a88 <col:67> 'int' lvalue ParmVar 0x55cfe6016440 'i' 'int'
|     `-CXXConstCastExpr 0x55cfe6032bd0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55cfe6032bb8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55cfe6032b80 <col:91> 'const void *' lvalue ParmVar 0x55cfe60164c0 'x' 'const void *'
|-CXXMethodDecl 0x55cfe6016668 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55cfe6032ca8 <col:34, line:640:5>
|   `-ReturnStmt 0x55cfe6032c98 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55cfe6032c80 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55cfe6032c50 <col:16> 'Packet *' lvalue ->_data_packet 0x55cfe60225e8
|         `-CXXThisExpr 0x55cfe6032c40 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55cfe601c2c0 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55cfe601c230 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55cfe6023a38 <col:46> 'bool' true
|-CXXMethodDecl 0x55cfe601c438 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55cfe601c378 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55cfe601c4e0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55cfe601cc90 <line:660:22> "" ""
| |-EnumConstantDecl 0x55cfe601c5e0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55cfe601cd00 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe601c5c0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55cfe601c5a0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55cfe600bc50 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55cfe601c670 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55cfe601cd18 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe601c650 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55cfe601c630 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55cfe600bce0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55cfe601c700 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55cfe601cd30 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe601c6e0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55cfe601c6c0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55cfe601c790 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55cfe601cd48 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe601c770 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55cfe601c750 <col:19> 'int' 16
| |-EnumConstantDecl 0x55cfe601c820 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55cfe601cd60 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe601c800 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55cfe601c7e0 <col:21> 'int' 16
| |-EnumConstantDecl 0x55cfe601c8b0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55cfe601cd78 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe601c890 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55cfe601c870 <col:19> 'int' 32
| |-EnumConstantDecl 0x55cfe601c940 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55cfe601cd90 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe601c920 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55cfe601c900 <col:19> 'int' EnumConstant 0x55cfe601c790 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55cfe601c9d0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55cfe601cda8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe601c9b0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55cfe601c990 <col:19> 'int' EnumConstant 0x55cfe601c8b0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55cfe601caa0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55cfe601cdc0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe601ca80 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55cfe601ca60 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55cfe601ca20 <col:23> 'int' EnumConstant 0x55cfe601c9d0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55cfe601ca40 <col:40> 'int' 2
| |-EnumConstantDecl 0x55cfe601cb70 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55cfe601cdd8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe601cb50 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55cfe601cb30 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55cfe601caf0 <col:23> 'int' EnumConstant 0x55cfe601c9d0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55cfe601cb10 <col:40> 'int' 4
| `-EnumConstantDecl 0x55cfe601cc40 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55cfe601cdf0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55cfe601cc20 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55cfe601cc00 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55cfe601cbc0 <col:23> 'int' EnumConstant 0x55cfe601c9d0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55cfe601cbe0 <col:40> 'int' 8
|-CXXMethodDecl 0x55cfe601ce30 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55cfe601ced0 <col:68> "" ""
|-CXXMethodDecl 0x55cfe601cf68 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55cfe601d008 <col:45> "" ""
|-CXXMethodDecl 0x55cfe601d0a0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55cfe601d140 <col:57> "" ""
|-CXXMethodDecl 0x55cfe601d1d8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55cfe601d278 <col:45> "" ""
|-CXXMethodDecl 0x55cfe601d310 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55cfe601d3b0 <col:57> "" ""
|-CXXMethodDecl 0x55cfe601d440 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55cfe601d4e0 <col:51> "" ""
|-CXXMethodDecl 0x55cfe601d570 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55cfe601d610 <col:63> "" ""
|-CXXMethodDecl 0x55cfe601d6a0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55cfe601d740 <col:53> "" ""
|-CXXMethodDecl 0x55cfe601d7d0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55cfe601d870 <col:65> "" ""
|-CXXMethodDecl 0x55cfe601d988 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55cfe601d8f8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55cfe601da30 <col:61> "" ""
|-CXXMethodDecl 0x55cfe601dbc8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55cfe601dab8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55cfe601db30 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55cfe601dc78 <col:67> "" ""
|-CXXMethodDecl 0x55cfe601dd90 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55cfe601dd00 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55cfe601de38 <col:63> "" ""
|-CXXMethodDecl 0x55cfe601dfd0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55cfe601dec0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55cfe601df38 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55cfe601e080 <col:69> "" ""
|-CXXMethodDecl 0x55cfe601e198 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55cfe601e108 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55cfe601e240 <col:63> "" ""
|-CXXMethodDecl 0x55cfe601e3d8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55cfe601e2c8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55cfe601e340 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55cfe601e488 <col:69> "" ""
|-CXXMethodDecl 0x55cfe601e5a0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55cfe601e510 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55cfe601e648 <col:62> "" ""
|-CXXMethodDecl 0x55cfe601e7e0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55cfe601e6d0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55cfe601e748 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55cfe601e890 <col:68> "" ""
|-CXXMethodDecl 0x55cfe601e9a8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55cfe601e918 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55cfe601ea50 <col:63> "" ""
|-CXXMethodDecl 0x55cfe601ebe8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55cfe601ead8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55cfe601eb50 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55cfe601ec98 <col:69> "" ""
|-CXXMethodDecl 0x55cfe601ed28 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55cfe601edc8 <col:64> "" ""
|-CXXMethodDecl 0x55cfe601ee58 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55cfe601eef8 <col:52> "" ""
|-CXXMethodDecl 0x55cfe601ef88 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55cfe601f028 <col:67> "" ""
|-CXXMethodDecl 0x55cfe601f0b8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55cfe601f158 <col:55> "" ""
|-CXXMethodDecl 0x55cfe601f270 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55cfe601f1e0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55cfe601f318 <col:58> "" ""
|-CXXMethodDecl 0x55cfe601f4b0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55cfe601f3a0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55cfe601f418 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55cfe601f560 <col:62> "" ""
|-CXXMethodDecl 0x55cfe601f678 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55cfe601f5e8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55cfe601f720 <col:58> "" ""
|-CXXMethodDecl 0x55cfe601f8b8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55cfe601f7a8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55cfe601f820 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55cfe601f968 <col:62> "" ""
|-CXXMethodDecl 0x55cfe601fa80 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55cfe601f9f0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55cfe601fb28 <col:60> "" ""
|-CXXMethodDecl 0x55cfe601fcc0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55cfe601fbb0 <col:34> col:37 'int'
| |-ParmVarDecl 0x55cfe601fc28 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55cfe601fd70 <col:64> "" ""
|-CXXMethodDecl 0x55cfe601fe88 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55cfe601fdf8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55cfe601ff30 <col:58> "" ""
|-CXXMethodDecl 0x55cfe60200c8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55cfe601ffb8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55cfe6020030 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55cfe6020178 <col:62> "" ""
|-CXXMethodDecl 0x55cfe60214c0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55cfe6021430 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55cfe6021568 <col:59> "" ""
|-CXXMethodDecl 0x55cfe6021700 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55cfe60215f0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55cfe6021668 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55cfe60217b0 <col:63> "" ""
|-AccessSpecDecl 0x55cfe6021820 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55cfe6021848 prev 0x55cfe6012250 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55cfe6021940 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55cfe6021a30 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55cfe6021b58 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55cfe6021cd8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55cfe6021e58 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55cfe6021fd8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55cfe6032e28 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55cfe6033698 <col:11>
| |-CXXDestructorDecl 0x55cfe6032f00 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55cfe6033038 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55cfe6033038
| | `-ParmVarDecl 0x55cfe6033148 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55cfe60331e8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55cfe60331e8
| | `-ParmVarDecl 0x55cfe60332f8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55cfe6017078 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55cfe6017188 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55cfe6017408 <col:11>
| |   `-ReturnStmt 0x55cfe60173f8 <col:11>
| |     `-UnaryOperator 0x55cfe60173e0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55cfe60173d0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55cfe60171f8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55cfe60171f8
|   `-ParmVarDecl 0x55cfe6017308 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55cfe6022040 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55cfe6022158 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55cfe60221f8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55cfe6022260 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55cfe60222c8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55cfe6022330 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55cfe6022390 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55cfe6022450 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55cfe60224b0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55cfe6022510 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55cfe6032d38 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55cfe60221f8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55cfe60336a8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55cfe6033700 <col:12>
| |-CXXConstructorDecl 0x55cfe6033368 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55cfe6033368
| | `-ParmVarDecl 0x55cfe6033478 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55cfe6033518 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55cfe6033518
| | `-ParmVarDecl 0x55cfe6033628 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55cfe6016760 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55cfe6022588 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55cfe60225e8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55cfe6022650 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55cfe60226b8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55cfe6022720 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55cfe6022788 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55cfe60227e8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55cfe6022848 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55cfe60228b0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55cfe6022938 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55cfe6022588 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55cfe6032cd0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55cfe60227e8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55cfe6033710 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55cfe6033770 <col:21, line:755:5>
|-CXXConstructorDecl 0x55cfe6022ad8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55cfe6022a18 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55cfe6022bd0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55cfe6022db8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55cfe6022cc0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55cfe6023088 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55cfe6022e70 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55cfe6022ee8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55cfe6022f60 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cfe60232a8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55cfe6023158 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55cfe60231d0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55cfe6023578 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55cfe6023368 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55cfe60233e0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55cfe6023458 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55cfe60236d0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55cfe6023640 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cfe6023818 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55cfe6023788 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55cfe6023910 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cfe6033780 prev 0x55cfe600b8d0 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x55cfe60338b8 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x55cfe6033948 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x55cfe60339f0 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x55cfe6033a90 <col:20>
| `-OptimizeNoneAttr 0x55cfe6033ae8 <col:30>
|-CXXMethodDecl 0x55cfe6033b38 <line:781:5, col:66> col:55 used end_data 'unsigned char *() const'
| |-NoInlineAttr 0x55cfe6033bd8 <col:20>
| `-OptimizeNoneAttr 0x55cfe6033c30 <col:30>
|-CXXMethodDecl 0x55cfe6033c80 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55cfe6033d48 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55cfe6033e10 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55cfe6033f28 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x55cfe6033ff0 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x55cfe6034090 <col:20>
| `-OptimizeNoneAttr 0x55cfe60340e8 <col:30>
|-CXXMethodDecl 0x55cfe6034158 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x55cfe60341f8 <col:20>
| `-OptimizeNoneAttr 0x55cfe6034250 <col:30>
|-CXXMethodDecl 0x55cfe60342f8 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x55cfe6034398 <col:20>
| `-OptimizeNoneAttr 0x55cfe60343f0 <col:30>
|-CXXMethodDecl 0x55cfe6034440 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55cfe6034558 <line:790:5, col:38> col:24 used icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x55cfe6034678 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x55cfe6034798 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x55cfe6034860 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x55cfe6034900 <col:62> "" ""
|-AccessSpecDecl 0x55cfe6034970 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x55cfe60349d0 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x55cfe60355c8 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x55cfe6016840 <col:29, col:31>
|-CXXMethodDecl 0x55cfe6034a98 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x55cfe6034bd8 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x55cfe6034b48 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x55cfe6034cd0 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x55cfe6016850 <col:23, col:25>
|-CXXMethodDecl 0x55cfe6034e88 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x55cfe6034dc0 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x55cfe6035158 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55cfe6034f40 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55cfe6034fb8 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55cfe6035030 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cfe60352e8 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x55cfe6035220 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x55cfe60353e0 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x55cfe6035448 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x55cfe6035448
  `-ParmVarDecl 0x55cfe6035558 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cfe5d23b30 <../dummy_inc/clicknet/icmp.h:17:1, line:23:1> line:17:8 referenced struct click_icmp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55cfe5d23c48 <col:1, col:8> col:8 implicit struct click_icmp
|-FieldDecl 0x55cfe5d23ce8 <line:18:5, col:13> col:13 referenced icmp_type 'uint8_t':'unsigned char'
|-FieldDecl 0x55cfe5d23d48 <line:19:5, col:13> col:13 referenced icmp_code 'uint8_t':'unsigned char'
|-FieldDecl 0x55cfe5d23da8 <line:20:5, col:14> col:14 referenced icmp_cksum 'uint16_t':'unsigned short'
`-FieldDecl 0x55cfe5d23e08 <line:21:5, col:14> col:14 referenced padding 'uint32_t':'unsigned int'

Layout: <CGRecordLayout
  LLVMType:%struct.click_icmp = type { i8, i8, i16, i32 }
  NonVirtualBaseLLVMType:%struct.click_icmp = type { i8, i8, i16, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_icmp_paramprob
         0 |   uint8_t icmp_type
         1 |   uint8_t icmp_code
         2 |   uint16_t icmp_cksum
         4 |   uint8_t icmp_pointer
         5 |   uint8_t [3] padding
           | [sizeof=8, dsize=8, align=2,
           |  nvsize=8, nvalign=2]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cfe5d24210 <../dummy_inc/clicknet/icmp.h:36:1, line:43:1> line:36:8 referenced struct click_icmp_paramprob definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55cfe5d24328 <col:1, col:8> col:8 implicit struct click_icmp_paramprob
|-FieldDecl 0x55cfe5d243c8 <line:37:5, col:13> col:13 icmp_type 'uint8_t':'unsigned char'
|-FieldDecl 0x55cfe5d24428 <line:38:5, col:13> col:13 icmp_code 'uint8_t':'unsigned char'
|-FieldDecl 0x55cfe5d24488 <line:39:5, col:14> col:14 icmp_cksum 'uint16_t':'unsigned short'
|-FieldDecl 0x55cfe5d244e8 <line:40:5, col:13> col:13 referenced icmp_pointer 'uint8_t':'unsigned char'
`-FieldDecl 0x55cfe5d24618 <line:41:5, col:22> col:13 padding 'uint8_t [3]'

Layout: <CGRecordLayout
  LLVMType:%struct.click_icmp_paramprob = type { i8, i8, i16, i8, [3 x i8] }
  NonVirtualBaseLLVMType:%struct.click_icmp_paramprob = type { i8, i8, i16, i8, [3 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_icmp_redirect
         0 |   uint8_t icmp_type
         1 |   uint8_t icmp_code
         2 |   uint16_t icmp_cksum
         4 |   struct in_addr icmp_gateway
         4 |     in_addr_t s_addr
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cfe5d24680 <../dummy_inc/clicknet/icmp.h:46:1, line:52:1> line:46:8 referenced struct click_icmp_redirect definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55cfe5d24798 <col:1, col:8> col:8 implicit struct click_icmp_redirect
|-FieldDecl 0x55cfe5d24838 <line:47:5, col:13> col:13 icmp_type 'uint8_t':'unsigned char'
|-FieldDecl 0x55cfe5d24898 <line:48:5, col:13> col:13 icmp_code 'uint8_t':'unsigned char'
|-FieldDecl 0x55cfe5d248f8 <line:49:5, col:14> col:14 icmp_cksum 'uint16_t':'unsigned short'
`-FieldDecl 0x55cfe5d24968 <line:50:5, col:20> col:20 referenced icmp_gateway 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_icmp_redirect = type { i8, i8, i16, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_icmp_redirect = type { i8, i8, i16, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_icmp_needfrag
         0 |   uint8_t icmp_type
         1 |   uint8_t icmp_code
         2 |   uint16_t icmp_cksum
         4 |   uint16_t padding
         6 |   uint16_t icmp_nextmtu
           | [sizeof=8, dsize=8, align=2,
           |  nvsize=8, nvalign=2]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cfe5d26f18 <../dummy_inc/clicknet/icmp.h:67:1, line:74:1> line:67:8 referenced struct click_icmp_needfrag definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55cfe5d27038 <col:1, col:8> col:8 implicit struct click_icmp_needfrag
|-FieldDecl 0x55cfe5d270d8 <line:68:5, col:13> col:13 icmp_type 'uint8_t':'unsigned char'
|-FieldDecl 0x55cfe5d27138 <line:69:5, col:13> col:13 icmp_code 'uint8_t':'unsigned char'
|-FieldDecl 0x55cfe5d27198 <line:70:5, col:14> col:14 icmp_cksum 'uint16_t':'unsigned short'
|-FieldDecl 0x55cfe5d271f8 <line:71:5, col:14> col:14 padding 'uint16_t':'unsigned short'
`-FieldDecl 0x55cfe5d27258 <line:72:5, col:14> col:14 referenced icmp_nextmtu 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_icmp_needfrag = type { i8, i8, i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_icmp_needfrag = type { i8, i8, i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cfe5fddc40 prev 0x55cfe5fd79e0 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55cfe5fddd38 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x55cfe5fdddd8 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x55cfe5fe5978 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55cfe5fe5d58 <col:11>
|-CXXConstructorDecl 0x55cfe5fe5a50 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55cfe5fe5b38 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55cfe5fe64a0 <col:11>
|-CXXConstructorDecl 0x55cfe5fe5bd8 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55cfe5fe5ce8 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x55cfe5ff2a38 <col:11>
|-CXXDestructorDecl 0x55cfe5fe7008 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55cfe5ce97b8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55cfe5ce98c8 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55cfe5cea190 <col:11>
|   `-ReturnStmt 0x55cfe5cea180 <col:11>
|     `-UnaryOperator 0x55cfe5cea168 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55cfe5cea158 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x55cfe5ce9938 <col:11> col:11 implicit constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&)' inline default trivial noexcept-unevaluated 0x55cfe5ce9938
  `-ParmVarDecl 0x55cfe5ce9a48 <col:11> col:11 'Timestamp::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cfe5fd6b98 prev 0x55cfe5fd68a8 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55cfe5fd6c90 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x55cfe5fd6d20 <col:19, col:25> col:19 public
|-TypedefDecl 0x55cfe5fd6d58 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x55cfe5c379a0 'int32_t' sugar
|   |-Typedef 0x55cfe5b4a328 'int32_t'
|   `-TypedefType 0x55cfe5b23510 '__int32_t' sugar
|     |-Typedef 0x55cfe5b23128 '__int32_t'
|     `-BuiltinType 0x55cfe5ae1580 'int'
|-TypedefDecl 0x55cfe5fd6dc0 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x55cfe5c37b60 'int64_t' sugar
|   |-Typedef 0x55cfe5b4a390 'int64_t'
|   `-TypedefType 0x55cfe5b23630 '__int64_t' sugar
|     |-Typedef 0x55cfe5b23208 '__int64_t'
|     `-BuiltinType 0x55cfe5ae15a0 'long'
|-EnumDecl 0x55cfe5fd6e18 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x55cfe5fd6f90 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x55cfe5fd6f70 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x55cfe5fd6f48 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x55cfe5fd6f30 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x55cfe5fd6f00 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x55cfe5fd7088 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x55cfe5fd7068 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x55cfe5fd7040 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x55cfe5fd7028 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x55cfe5fd7000 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x55cfe5fd6fe0 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x55cfe5fd70d8 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x55cfe5fd71e0 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55cfe5fd7730 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe5fd71c0 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x55cfe5fd71a0 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x55cfe5fd7270 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55cfe5fd7748 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe5fd7250 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x55cfe5fd7230 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x55cfe5fd7300 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55cfe5fd7760 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe5fd72e0 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x55cfe5fd72c0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x55cfe5fd7390 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55cfe5fd7778 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe5fd7370 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x55cfe5fd7350 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x55cfe5fd7420 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55cfe5fd7790 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe5fd7400 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x55cfe5fd73e0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x55cfe5fd74b0 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55cfe5fd77a8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe5fd7490 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x55cfe5fd7470 <col:24> 'int' 1000
| |-EnumConstantDecl 0x55cfe5fd7540 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55cfe5fd77c0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe5fd7520 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x55cfe5fd7500 <col:26> 'int' EnumConstant 0x55cfe5fd71e0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x55cfe5fd7610 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55cfe5fd77d8 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe5fd75f0 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x55cfe5fd75d0 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x55cfe5fd7590 <col:27> 'int' EnumConstant 0x55cfe5fd7540 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x55cfe5fd75b0 <col:44> 'int' EnumConstant 0x55cfe5fd74b0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x55cfe5fd76e0 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x55cfe5fd77f0 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55cfe5fd76c0 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x55cfe5fd76a0 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x55cfe5fd7660 <col:27> 'int' EnumConstant 0x55cfe5fd7540 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x55cfe5fd7680 <col:44> 'int' EnumConstant 0x55cfe5fd7390 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x55cfe5fd7808 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x55cfe5fd7910 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x55cfe5fd7960 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55cfe5fd78f0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x55cfe5fd78d0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55cfe5fd7540 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x55cfe5fd7988 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x55cfe5c375d0 'uninitialized_type'
|   `-CXXRecord 0x55cfe5c37538 'uninitialized_type'
|-CXXRecordDecl 0x55cfe5fd79e0 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x55cfe5fd7af0 <line:174:5, line:176:5> line:174:12 Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x55cfe5fe3cc8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55cfe5fe5d68 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55cfe5fe5e88 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x55cfe5fe5e40 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x55cfe5fe5dd0 <col:9> '<bound member function type>' ->assign 0x55cfe5fdbe68
|     | `-CXXThisExpr 0x55cfe5fe5dc0 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x55cfe5fe5e00 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x55cfe5fe5e70 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x55cfe5fe5e20 <col:19> 'int' 0
|-CXXConstructorDecl 0x55cfe5fd7d38 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x55cfe5fd7bb0 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x55cfe5fd7c28 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55cfe5fe5810 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55cfe5fe57f0 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x55cfe5fe3cc8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55cfe5fe5ea0 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55cfe5fe5ff0 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x55cfe5fe5f78 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x55cfe5fe5f08 <col:9> '<bound member function type>' ->assign 0x55cfe5fdbe68
|     | `-CXXThisExpr 0x55cfe5fe5ef8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55cfe5fe5fc0 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55cfe5fe5fa8 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x55cfe5fe5f38 <col:16> 'long' lvalue ParmVar 0x55cfe5fd7bb0 'sec' 'long'
|     `-ImplicitCastExpr 0x55cfe5fe5fd8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55cfe5fe5f58 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55cfe5fd7c28 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55cfe5fd7f98 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55cfe5fd7e08 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x55cfe5fd7e80 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55cfe5fe5848 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55cfe5fe5828 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x55cfe5fe3cc8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55cfe5fe6008 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55cfe5fe6140 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x55cfe5fe60e0 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x55cfe5fe6070 <col:9> '<bound member function type>' ->assign 0x55cfe5fdbe68
|     | `-CXXThisExpr 0x55cfe5fe6060 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55cfe5fe6110 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55cfe5fe60a0 <col:16> 'int' lvalue ParmVar 0x55cfe5fd7e08 'sec' 'int'
|     `-ImplicitCastExpr 0x55cfe5fe6128 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55cfe5fe60c0 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55cfe5fd7e80 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55cfe5fd81f8 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x55cfe5fd8068 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x55cfe5fd80e0 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55cfe5fe5880 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55cfe5fe5860 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x55cfe5fe3cc8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55cfe5fe6158 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55cfe5fe62a8 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x55cfe5fe6230 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x55cfe5fe61c0 <col:9> '<bound member function type>' ->assign 0x55cfe5fdbe68
|     | `-CXXThisExpr 0x55cfe5fe61b0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55cfe5fe6278 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55cfe5fe6260 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x55cfe5fe61f0 <col:16> 'unsigned long' lvalue ParmVar 0x55cfe5fd8068 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x55cfe5fe6290 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55cfe5fe6210 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55cfe5fd80e0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55cfe5fd8458 <line:199:5, line:201:5> line:199:21 Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x55cfe5fd82c8 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x55cfe5fd8340 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55cfe5fe58b8 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55cfe5fe5898 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x55cfe5fe3cc8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55cfe5fe62c0 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55cfe5fe6410 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x55cfe5fe6398 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x55cfe5fe6328 <col:9> '<bound member function type>' ->assign 0x55cfe5fdbe68
|     | `-CXXThisExpr 0x55cfe5fe6318 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55cfe5fe63e0 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55cfe5fe63c8 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55cfe5fe6358 <col:16> 'unsigned int' lvalue ParmVar 0x55cfe5fd82c8 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x55cfe5fe63f8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55cfe5fe6378 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55cfe5fd8340 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55cfe5fd85b8 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x55cfe5fd8528 <col:31> col:37 'double'
|-CXXConstructorDecl 0x55cfe5fd8758 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x55cfe5fd8690 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x55cfe5fd8988 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x55cfe5fd8890 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x55cfe5fd8b38 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x55cfe5fd8a78 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x55cfe5fe3cc8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55cfe5fe64b0 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x55cfe5fe6428 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x55cfe5fd8a78 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55cfe5fe6510 <col:19, line:214:5>
|-CXXConstructorDecl 0x55cfe5fd8d08 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x55cfe5fd8c48 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x55cfe5fe3cc8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55cfe5fe6520 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55cfe5fe65d0 <col:53, line:219:5>
|   `-CStyleCastExpr 0x55cfe5fe65a8 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x55cfe5fe6578 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x55cfe5fd8c48 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x55cfe5fd8ef8 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x55cfe5fd8e70 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x55cfe5fd6940 'Timestamp'
|   | `-CXXRecord 0x55cfe5fd6b98 'Timestamp'
|   `-ParenType 0x55cfe5fd8e10 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x55cfe5fd8de0 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x55cfe5fd6ee0 'Timestamp::seconds_type' sugar
|         |-Typedef 0x55cfe5fd6d58 'seconds_type'
|         `-TypedefType 0x55cfe5c379a0 'int32_t' sugar
|           |-Typedef 0x55cfe5b4a328 'int32_t'
|           `-TypedefType 0x55cfe5b23510 '__int32_t' sugar
|             |-Typedef 0x55cfe5b23128 '__int32_t'
|             `-BuiltinType 0x55cfe5ae1580 'int'
|-CXXConversionDecl 0x55cfe5fd9038 <line:222:5, col:45> col:12 operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55cfe5fd9108 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x55cfe5fe66d8 <col:37, line:231:5>
|   `-ReturnStmt 0x55cfe5fe66c8 <line:227:9, col:23>
|     `-BinaryOperator 0x55cfe5fe66a8 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x55cfe5fe6678 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55cfe5fe6628 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x55cfe5fdddd8
|       |   `-MemberExpr 0x55cfe5fe65f8 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x55cfe5fe3cc8
|       |     `-CXXThisExpr 0x55cfe5fe65e8 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55cfe5fe6690 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x55cfe5fe6658 <col:23> 'int' 0
|-CXXMethodDecl 0x55cfe5fd91c8 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x55cfe5fd9288 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x55cfe5fd9348 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x55cfe5fd9408 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x55cfe5fd94c8 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x55cfe5fd9638 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x55cfe5fd9578 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x55cfe5fd9780 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x55cfe5fd96f0 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cfe5fd9848 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x55cfe5fd98e8 <col:54> "" ""
|-CXXMethodDecl 0x55cfe5fd9978 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x55cfe5fd9a18 <col:54> "" ""
|-CXXMethodDecl 0x55cfe5fd9aa8 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x55cfe5fd9b48 <col:54> "" ""
|-CXXMethodDecl 0x55cfe5fd9c48 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x55cfe5fd9d18 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x55cfe5fd9e48 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x55cfe5fd9f40 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x55cfe5fda078 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55cfe5fe68f0 <col:39, line:271:5>
|   `-ReturnStmt 0x55cfe5fe68e0 <line:267:9, col:61>
|     `-CallExpr 0x55cfe5fe6880 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x55cfe5fe6868 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55cfe5fe66f0 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55cfe5fe3ff8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x55cfe5fe68b0 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55cfe5fe6750 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x55cfe5fdddd8
|       |   `-MemberExpr 0x55cfe5fe6720 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x55cfe5fe3cc8
|       |     `-CXXThisExpr 0x55cfe5fe6710 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55cfe5fe68c8 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x55cfe5fe67f0 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x55cfe5fe67c0 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x55cfe5fe6780 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55cfe5fd7540 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x55cfe5fe67d8 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x55cfe5fe67a0 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55cfe5fd74b0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55cfe5fda138 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55cfe5fe6ab0 <col:39, line:279:5>
|   `-ReturnStmt 0x55cfe5fe6aa0 <line:275:9, col:61>
|     `-CallExpr 0x55cfe5fe6a40 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x55cfe5fe6a28 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55cfe5fe6908 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55cfe5fe3ff8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x55cfe5fe6a70 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55cfe5fe6968 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x55cfe5fdddd8
|       |   `-MemberExpr 0x55cfe5fe6938 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x55cfe5fe3cc8
|       |     `-CXXThisExpr 0x55cfe5fe6928 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55cfe5fe6a88 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x55cfe5fe6a08 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x55cfe5fe69d8 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x55cfe5fe6998 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55cfe5fd7540 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x55cfe5fe69f0 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x55cfe5fe69b8 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55cfe5fd7390 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55cfe5fda1f8 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55cfe5fe6c48 <col:39, line:287:5>
|   `-ReturnStmt 0x55cfe5fe6c38 <line:283:9, col:53>
|     `-BinaryOperator 0x55cfe5fe6c18 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x55cfe5fe6be8 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55cfe5fe6b08 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x55cfe5fdddd8
|       |   `-MemberExpr 0x55cfe5fe6ad8 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x55cfe5fe3cc8
|       |     `-CXXThisExpr 0x55cfe5fe6ac8 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55cfe5fe6c00 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x55cfe5fe6bc8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55cfe5fe6ba8 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x55cfe5fe6b78 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55cfe5fe6b38 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55cfe5fd71e0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55cfe5fe6b90 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55cfe5fe6b58 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55cfe5fd7540 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55cfe5fda2e8 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x55cfe5ff2c20 <col:40, line:293:5>
|   |-DeclStmt 0x55cfe5fe6d90 <line:291:9, col:48>
|   | `-VarDecl 0x55cfe5fe6c70 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x55cfe5fe6d70 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x55cfe5fe6d18 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x55cfe5fe6ce8 <col:22> '<bound member function type>' ->subsec 0x55cfe5fd9288
|   |     |   `-CXXThisExpr 0x55cfe5fe6cd8 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x55cfe5fe6d58 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x55cfe5fe6d38 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55cfe5fd7610 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55cfe5ff2c10 <line:292:9, col:70>
|     `-ExprWithCleanups 0x55cfe5ff2bf8 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x55cfe5ff2bc8 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55cfe5ff2bb0 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x55cfe5ff2b90 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x55cfe5ff2b60 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x55cfe5ff28f8 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x55cfe5ff28e0 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x55cfe5fe6da8 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x55cfe5fe6c70 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x55cfe5ff2b00 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x55cfe5ff2ae8 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x55cfe5ff2ab8 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x55cfe5ff2910 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x55cfe5ff2880 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x55cfe5ff2868 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x55cfe5ff2818 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55cfe5fd6ae8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x55cfe5ff27b8 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x55cfe5fe6dd8 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x55cfe5fe6dc8 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x55cfe5ff2800 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x55cfe5ff27e8 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x55cfe5fe7298 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x55cfe5fe6e00 <col:39> 'int' 0
|               |               `-BinaryOperator 0x55cfe5fe6e90 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x55cfe5fe6e60 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x55cfe5fe6e20 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55cfe5fd7610 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x55cfe5fe6e78 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x55cfe5fe6e40 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x55cfe5fe6c70 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x55cfe5ff2b30 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x55cfe5ff28c8 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x55cfe5ff28b8 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x55cfe5fda3a8 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x55cfe5ff3178 <col:40, line:302:5>
|   |-DeclStmt 0x55cfe5ff2d70 <line:297:9, col:48>
|   | `-VarDecl 0x55cfe5ff2c50 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x55cfe5ff2d50 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x55cfe5ff2cf8 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x55cfe5ff2cc8 <col:22> '<bound member function type>' ->subsec 0x55cfe5fd9288
|   |     |   `-CXXThisExpr 0x55cfe5ff2cb8 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x55cfe5ff2d38 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x55cfe5ff2d18 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55cfe5fd76e0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55cfe5ff3168 <line:298:9, col:70>
|     `-ExprWithCleanups 0x55cfe5ff3150 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x55cfe5ff3120 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55cfe5ff3108 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x55cfe5ff30e8 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x55cfe5ff30b8 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x55cfe5ff2fe0 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x55cfe5ff2fc8 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x55cfe5ff2d88 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x55cfe5ff2c50 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x55cfe5ff3058 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x55cfe5ff3040 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x55cfe5ff3010 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x55cfe5ff2ff8 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x55cfe5ff2f68 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x55cfe5ff2f50 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x55cfe5ff2f30 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55cfe5fd6ae8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x55cfe5ff2ed0 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x55cfe5ff2db8 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x55cfe5ff2da8 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x55cfe5ff2f18 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x55cfe5ff2f00 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x55cfe5ff2e90 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x55cfe5ff2de0 <col:39> 'int' 0
|               |               `-BinaryOperator 0x55cfe5ff2e70 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x55cfe5ff2e40 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x55cfe5ff2e00 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55cfe5fd76e0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x55cfe5ff2e58 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x55cfe5ff2e20 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x55cfe5ff2c50 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x55cfe5ff3088 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x55cfe5ff2fb0 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x55cfe5ff2fa0 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x55cfe5fdaac0 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x55cfe5ff3200 <col:40, line:306:5>
|   `-ReturnStmt 0x55cfe5ff31f0 <line:305:9, col:17>
|     `-CXXConstructExpr 0x55cfe5ff31c0 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x55cfe5ff31a8 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55cfe5ff3198 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x55cfe5fdac68 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x55cfe5fdab70 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x55cfe5fdae38 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x55cfe5fdad40 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x55cfe5fdaf28 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x55cfe5fdb098 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x55cfe5fdafd8 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x55cfe5ff3348 <col:56, line:320:5>
|   `-ReturnStmt 0x55cfe5ff3338 <line:319:9, col:32>
|     `-ExprWithCleanups 0x55cfe5ff3320 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x55cfe5ff32f0 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55cfe5ff32d8 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55cfe5ff3298 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55cfe5ff3268 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55cfe5ff3228 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55cfe5fdafd8 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x55cfe5ff3280 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x55cfe5ff3248 <col:31> 'int' 0
|-CXXMethodDecl 0x55cfe5fdb2d8 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x55cfe5fdb150 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55cfe5fdb1c8 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55cfe5ff3518 <col:72, line:326:5>
|   `-ReturnStmt 0x55cfe5ff3508 <line:325:9, col:51>
|     `-ExprWithCleanups 0x55cfe5ff34f0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55cfe5ff34c0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55cfe5ff34a8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55cfe5ff3468 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55cfe5ff3450 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55cfe5ff3370 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55cfe5fdb150 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55cfe5ff3410 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55cfe5ff33f8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55cfe5ff3390 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55cfe5fdd530 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55cfe5ff3438 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55cfe5ff33b0 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x55cfe5fdb1c8 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cfe5fdb488 <line:328:5, line:337:5> line:328:29 make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x55cfe5fdb398 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55cfe5ff3be0 <col:56, line:337:5>
|   |-DeclStmt 0x55cfe5ff3818 <line:329:9, col:51>
|   | `-VarDecl 0x55cfe5ff3540 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55cfe5ff3800 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55cfe5ff37d0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55cfe5ff37b8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55cfe5ff37a0 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55cfe5ff3770 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55cfe5ff3758 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55cfe5ff3740 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55cfe5ff3630 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55cfe5ff39d0 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55cfe5ff3880 <col:9, col:14> 'int64_t':'long' lvalue .x 0x55cfe5fdddd8
|   | | `-MemberExpr 0x55cfe5ff3850 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55cfe5fe3cc8
|   | |   `-DeclRefExpr 0x55cfe5ff3830 <col:9> 'Timestamp' lvalue Var 0x55cfe5ff3540 't' 'Timestamp'
|   | `-BinaryOperator 0x55cfe5ff39b0 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x55cfe5ff3980 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55cfe5ff38b0 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x55cfe5fdb398 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55cfe5ff3998 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x55cfe5ff3960 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x55cfe5ff3940 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x55cfe5ff3910 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x55cfe5ff38d0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55cfe5fd7540 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x55cfe5ff3928 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x55cfe5ff38f0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55cfe5fd74b0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55cfe5ff3bc8 <line:336:9, col:16>
|     `-CXXConstructExpr 0x55cfe5ff3b98 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55cfe5ff3b80 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55cfe5ff3b60 <col:16> 'Timestamp' lvalue Var 0x55cfe5ff3540 't' 'Timestamp'
|-CXXMethodDecl 0x55cfe5fdb650 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x55cfe5fdb540 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55cfe5fdb5b8 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55cfe5ff3d98 <col:72, line:343:5>
|   `-ReturnStmt 0x55cfe5ff3d88 <line:342:9, col:51>
|     `-ExprWithCleanups 0x55cfe5ff3d70 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55cfe5ff3d40 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55cfe5ff3d28 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55cfe5ff3ce8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55cfe5ff3cd0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55cfe5ff3c18 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55cfe5fdb540 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55cfe5ff3c90 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55cfe5ff3c78 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55cfe5ff3c38 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55cfe5fdd678 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55cfe5ff3cb8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55cfe5ff3c58 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x55cfe5fdb5b8 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cfe5fdb7a0 <line:345:5, line:354:5> line:345:29 make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x55cfe5fdb710 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55cfe5ff41e0 <col:56, line:354:5>
|   |-DeclStmt 0x55cfe5ff3f88 <line:346:9, col:51>
|   | `-VarDecl 0x55cfe5ff3dc0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55cfe5ff3f70 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55cfe5ff3f40 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55cfe5ff3f28 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55cfe5ff3f10 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55cfe5ff3ee0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55cfe5ff3ec8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55cfe5ff3eb0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55cfe5ff3e80 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55cfe5ff4140 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55cfe5ff3ff0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x55cfe5fdddd8
|   | | `-MemberExpr 0x55cfe5ff3fc0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55cfe5fe3cc8
|   | |   `-DeclRefExpr 0x55cfe5ff3fa0 <col:9> 'Timestamp' lvalue Var 0x55cfe5ff3dc0 't' 'Timestamp'
|   | `-BinaryOperator 0x55cfe5ff4120 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x55cfe5ff40f0 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55cfe5ff4020 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x55cfe5fdb710 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55cfe5ff4108 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x55cfe5ff40d0 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x55cfe5ff40b0 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x55cfe5ff4080 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x55cfe5ff4040 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55cfe5fd7540 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x55cfe5ff4098 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x55cfe5ff4060 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55cfe5fd7390 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55cfe5ff41c8 <line:353:9, col:16>
|     `-CXXConstructExpr 0x55cfe5ff4198 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55cfe5ff4180 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55cfe5ff4160 <col:16> 'Timestamp' lvalue Var 0x55cfe5ff3dc0 't' 'Timestamp'
|-CXXMethodDecl 0x55cfe5fdb968 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x55cfe5fdb858 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55cfe5fdb8d0 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55cfe5ff4398 <col:72, line:360:5>
|   `-ReturnStmt 0x55cfe5ff4388 <line:359:9, col:51>
|     `-ExprWithCleanups 0x55cfe5ff4370 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55cfe5ff4340 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55cfe5ff4328 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55cfe5ff42e8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55cfe5ff42d0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55cfe5ff4218 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55cfe5fdb858 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55cfe5ff4290 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55cfe5ff4278 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55cfe5ff4238 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55cfe5fdd7c0 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55cfe5ff42b8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55cfe5ff4258 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x55cfe5fdb8d0 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cfe5fdbab8 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x55cfe5fdba28 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55cfe5ff4808 <col:56, line:371:5>
|   |-DeclStmt 0x55cfe5ff4588 <line:363:9, col:51>
|   | `-VarDecl 0x55cfe5ff43c0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55cfe5ff4570 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55cfe5ff4540 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55cfe5ff4528 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55cfe5ff4510 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55cfe5ff44e0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55cfe5ff44c8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55cfe5ff44b0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55cfe5ff4480 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55cfe5ff4768 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55cfe5ff45f0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x55cfe5fdddd8
|   | | `-MemberExpr 0x55cfe5ff45c0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55cfe5fe3cc8
|   | |   `-DeclRefExpr 0x55cfe5ff45a0 <col:9> 'Timestamp' lvalue Var 0x55cfe5ff43c0 't' 'Timestamp'
|   | `-CallExpr 0x55cfe5ff4708 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x55cfe5ff46f0 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55cfe5ff4620 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55cfe5fe3ff8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x55cfe5ff4738 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55cfe5ff4640 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x55cfe5fdba28 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55cfe5ff4750 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x55cfe5ff46d0 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x55cfe5ff46a0 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x55cfe5ff4660 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55cfe5fd71e0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x55cfe5ff46b8 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x55cfe5ff4680 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55cfe5fd7540 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55cfe5ff47f0 <line:370:9, col:16>
|     `-CXXConstructExpr 0x55cfe5ff47c0 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55cfe5ff47a8 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55cfe5ff4788 <col:16> 'Timestamp' lvalue Var 0x55cfe5ff43c0 't' 'Timestamp'
|-CXXMethodDecl 0x55cfe5fdbba8 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x55cfe5ff4948 <col:39, line:377:5>
|   `-ReturnStmt 0x55cfe5ff4938 <line:376:9, col:30>
|     `-ExprWithCleanups 0x55cfe5ff4920 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x55cfe5ff48f0 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55cfe5ff48d8 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55cfe5ff4898 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x55cfe5ff4840 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x55cfe5ff4880 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x55cfe5ff4860 <col:29> 'int' 1
|-CXXMethodDecl 0x55cfe5fdbc68 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x55cfe5ff4a28 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x55cfe5ff49e0 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x55cfe5ff4970 <col:9> '<bound member function type>' ->assign 0x55cfe5fdbe68
|     | `-CXXThisExpr 0x55cfe5ff4960 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x55cfe5ff49a0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x55cfe5ff4a10 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x55cfe5ff49c0 <col:19> 'int' 0
|-CXXMethodDecl 0x55cfe5fdbe68 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55cfe5fdbd18 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55cfe5fdbd90 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55cfe5fe58f0 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55cfe5fe58d0 <col:60> 'int' 0
| `-CompoundStmt 0x55cfe5ff4c20 <col:63, line:395:5>
|   `-BinaryOperator 0x55cfe5ff4c00 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x55cfe5ff4a80 <col:9, col:12> 'int64_t':'long' lvalue .x 0x55cfe5fdddd8
|     | `-MemberExpr 0x55cfe5ff4a50 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x55cfe5fe3cc8
|     |   `-CXXThisExpr 0x55cfe5ff4a40 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x55cfe5ff4be0 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x55cfe5ff4b70 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x55cfe5ff4b10 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x55cfe5ff4af8 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x55cfe5ff4ae0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x55cfe5ff4ab0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55cfe5fdbd18 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x55cfe5ff4b58 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x55cfe5ff4b38 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55cfe5fd7540 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x55cfe5ff4bc8 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x55cfe5ff4bb0 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x55cfe5ff4b90 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x55cfe5fdbd90 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cfe5fdc038 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55cfe5fdbf28 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55cfe5fdbfa0 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55cfe5ff4d78 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x55cfe5ff4d30 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x55cfe5ff4c48 <col:9> '<bound member function type>' ->assign 0x55cfe5fdbe68
|     | `-CXXThisExpr 0x55cfe5ff4c38 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55cfe5ff4d60 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55cfe5ff4c78 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55cfe5fdbf28 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x55cfe5ff4cf0 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55cfe5ff4cd8 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55cfe5ff4c98 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55cfe5fdd678 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x55cfe5ff4d18 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55cfe5ff4cb8 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x55cfe5fdbfa0 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cfe5fdc208 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55cfe5fdc0f8 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55cfe5fdc170 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55cfe5ff4ed0 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x55cfe5ff4e88 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x55cfe5ff4da0 <col:9> '<bound member function type>' ->assign 0x55cfe5fdbe68
|     | `-CXXThisExpr 0x55cfe5ff4d90 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55cfe5ff4eb8 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55cfe5ff4dd0 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55cfe5fdc0f8 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x55cfe5ff4e48 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55cfe5ff4e30 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55cfe5ff4df0 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55cfe5fdd7c0 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x55cfe5ff4e70 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55cfe5ff4e10 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x55cfe5fdc170 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cfe5fdc3d8 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55cfe5fdc2c8 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55cfe5fdc340 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55cfe5fe5928 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55cfe5fe5908 <col:57> 'int' 0
| `-DeprecatedAttr 0x55cfe5fdc488 <col:75> "" ""
|-CXXMethodDecl 0x55cfe5fdc618 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55cfe5fdc508 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55cfe5fdc580 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55cfe5fdc6c8 <col:74> "" ""
|-CXXMethodDecl 0x55cfe5fdc858 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55cfe5fdc748 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55cfe5fdc7c0 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55cfe5fdc908 <col:74> "" ""
|-CXXMethodDecl 0x55cfe5fdc998 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x55cfe5fdca38 <col:42> "" ""
|-CXXMethodDecl 0x55cfe5fdcbe0 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x55cfe5fdcac0 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55cfe5fdcb40 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x55cfe5fdccb0 <line:432:5, col:33> col:29 now 'Timestamp ()' static inline
|-CXXMethodDecl 0x55cfe5fdcd70 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x55cfe5fdce10 <col:20>
| `-OptimizeNoneAttr 0x55cfe5fdce68 <col:30>
|-CXXMethodDecl 0x55cfe5fdceb0 <line:446:5, col:36> col:29 recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x55cfe5fdcf70 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x55cfe5fdd030 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x55cfe5fdd0f0 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x55cfe5fdd1b0 <line:481:5, col:43> col:29 recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x55cfe5fdd270 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x55cfe5fdd330 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x55cfe5fdd3f0 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x55cfe5fdd530 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55cfe5fdd4a0 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55cfe5ff5018 <col:58, line:512:5>
|   `-ReturnStmt 0x55cfe5ff5008 <line:511:9, col:53>
|     `-BinaryOperator 0x55cfe5ff4fe8 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55cfe5ff4fb8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55cfe5ff4ee8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55cfe5fdd4a0 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55cfe5ff4fd0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55cfe5ff4f98 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55cfe5ff4f78 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55cfe5ff4f48 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55cfe5ff4f08 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55cfe5fd7540 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55cfe5ff4f60 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55cfe5ff4f28 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55cfe5fd74b0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55cfe5fdd678 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55cfe5fdd5e8 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55cfe5ff5160 <col:58, line:516:5>
|   `-ReturnStmt 0x55cfe5ff5150 <line:515:9, col:53>
|     `-BinaryOperator 0x55cfe5ff5130 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55cfe5ff5100 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55cfe5ff5030 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55cfe5fdd5e8 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55cfe5ff5118 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55cfe5ff50e0 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55cfe5ff50c0 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55cfe5ff5090 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55cfe5ff5050 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55cfe5fd7540 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55cfe5ff50a8 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55cfe5ff5070 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55cfe5fd7390 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55cfe5fdd7c0 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55cfe5fdd730 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55cfe5ff52a8 <col:58, line:520:5>
|   `-ReturnStmt 0x55cfe5ff5298 <line:519:9, col:53>
|     `-BinaryOperator 0x55cfe5ff5278 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55cfe5ff5248 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55cfe5ff5178 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55cfe5fdd730 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55cfe5ff5260 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55cfe5ff5228 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55cfe5ff5208 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x55cfe5ff51d8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55cfe5ff5198 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55cfe5fd71e0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55cfe5ff51f0 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55cfe5ff51b8 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55cfe5fd7540 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55cfe5fdd908 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55cfe5fdd878 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55cfe5ff53f0 <col:60, line:524:5>
|   `-ReturnStmt 0x55cfe5ff53e0 <line:523:9, col:55>
|     `-BinaryOperator 0x55cfe5ff53c0 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55cfe5ff5390 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55cfe5ff52c0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55cfe5fdd878 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55cfe5ff53a8 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55cfe5ff5370 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55cfe5ff5350 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x55cfe5ff5320 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55cfe5ff52e0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55cfe5fd7540 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55cfe5ff5338 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55cfe5ff5300 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55cfe5fd74b0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55cfe5fdda50 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55cfe5fdd9c0 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55cfe5ff5538 <col:60, line:528:5>
|   `-ReturnStmt 0x55cfe5ff5528 <line:527:9, col:55>
|     `-BinaryOperator 0x55cfe5ff5508 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55cfe5ff54d8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55cfe5ff5408 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55cfe5fdd9c0 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55cfe5ff54f0 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55cfe5ff54b8 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55cfe5ff5498 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x55cfe5ff5468 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55cfe5ff5428 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55cfe5fd7540 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55cfe5ff5480 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55cfe5ff5448 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55cfe5fd7390 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55cfe5fddb98 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55cfe5fddb08 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55cfe5ff5680 <col:60, line:532:5>
|   `-ReturnStmt 0x55cfe5ff5670 <line:531:9, col:55>
|     `-BinaryOperator 0x55cfe5ff5650 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55cfe5ff5620 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55cfe5ff5550 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55cfe5fddb08 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55cfe5ff5638 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55cfe5ff5600 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55cfe5ff55e0 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55cfe5ff55b0 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55cfe5ff5570 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55cfe5fd71e0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55cfe5ff55c8 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55cfe5ff5590 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55cfe5fd7540 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x55cfe5fddc40 prev 0x55cfe5fd79e0 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55cfe5fddd38 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x55cfe5fdddd8 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x55cfe5fe5978 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55cfe5fe5d58 <col:11>
| |-CXXConstructorDecl 0x55cfe5fe5a50 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55cfe5fe5b38 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x55cfe5fe64a0 <col:11>
| |-CXXConstructorDecl 0x55cfe5fe5bd8 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x55cfe5fe5ce8 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x55cfe5ff2a38 <col:11>
| |-CXXDestructorDecl 0x55cfe5fe7008 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55cfe5ce97b8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55cfe5ce98c8 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x55cfe5cea190 <col:11>
| |   `-ReturnStmt 0x55cfe5cea180 <col:11>
| |     `-UnaryOperator 0x55cfe5cea168 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55cfe5cea158 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x55cfe5ce9938 <col:11> col:11 implicit constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&)' inline default trivial noexcept-unevaluated 0x55cfe5ce9938
|   `-ParmVarDecl 0x55cfe5ce9a48 <col:11> col:11 'Timestamp::rep_t &&'
|-EnumDecl 0x55cfe5fdde40 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x55cfe5fddf40 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x55cfe5fde140 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe5fddf20 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55cfe5fddf00 <col:21> 'int' 0
| |-EnumConstantDecl 0x55cfe5fddfd0 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x55cfe5fde158 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe5fddfb0 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x55cfe5fddf90 <col:23> 'int' 1
| |-EnumConstantDecl 0x55cfe5fde060 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x55cfe5fde170 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe5fde040 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x55cfe5fde020 <col:23> 'int' 2
| `-EnumConstantDecl 0x55cfe5fde0f0 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x55cfe5fde188 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55cfe5fde0d0 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x55cfe5fde0b0 <col:27> 'int' 3
|-CXXMethodDecl 0x55cfe5fde1c8 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x55cfe5fde290 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x55cfe5fde498 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x55cfe5fde340 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x55cfe5fde3c0 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x55cfe5fe5940 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x55cfe5fde6a8 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x55cfe5fde558 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x55cfe5fde5d0 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x55cfe5fde778 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x55cfe5fde838 <line:635:5, col:37> col:24 warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x55cfe5fde9a8 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x55cfe5fde8e8 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x55cfe5fe39b0 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x55cfe5fe3a70 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x55cfe5fe3b30 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x55cfe5fe3bf0 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x55cfe5fe3c90 <line:670:3, col:10> col:3 private
|-FieldDecl 0x55cfe5fe3cc8 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x55cfe5fe3d38 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x55cfe5ff5698 <col:27, line:684:5>
|-CXXMethodDecl 0x55cfe5fe3df8 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x55cfe5ff56a8 <col:27, line:696:5>
|-CXXMethodDecl 0x55cfe5fe3ff8 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x55cfe5fe3ea8 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x55cfe5fe3f20 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55cfe5ff5830 <col:66, line:700:5>
|   `-ReturnStmt 0x55cfe5ff5820 <line:699:9, col:31>
|     `-CallExpr 0x55cfe5ff57c0 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x55cfe5ff57a8 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55cfe5ff5758 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x55cfe5e63d18 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x55cfe5ff57f0 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x55cfe5ff5718 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x55cfe5fe3ea8 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x55cfe5ff5808 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55cfe5ff5738 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x55cfe5fe3f20 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55cfe5fe4368 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x55cfe5fe40b8 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x55cfe5fe4130 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x55cfe5fe41a8 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x55cfe5fe4220 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55cfe5ff5b80 <col:64, line:707:5>
|   |-DeclStmt 0x55cfe5ff58c0 <line:704:9, col:24>
|   | `-VarDecl 0x55cfe5ff5858 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x55cfe5ff5ad0 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x55cfe5ff58d8 <col:9> 'int32_t':'int' lvalue ParmVar 0x55cfe5fe4130 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x55cfe5ff5ab8 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x55cfe5ff5a50 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x55cfe5ff5a38 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55cfe5ff59b8 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x55cfe5e69008 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x55cfe5ff5a88 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x55cfe5ff5958 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x55cfe5fe41a8 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x55cfe5ff5aa0 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x55cfe5ff5978 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x55cfe5fe4220 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x55cfe5ff5998 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x55cfe5ff5858 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x55cfe5ff5b60 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x55cfe5ff5af0 <col:9> 'int32_t':'int' lvalue ParmVar 0x55cfe5fe40b8 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x55cfe5ff5b48 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x55cfe5ff5b30 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x55cfe5ff5b10 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x55cfe5ff5858 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x55cfe5fe4608 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x55cfe5fe4438 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x55cfe5fe44b0 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x55cfe5fe4528 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x55cfe5fe48a8 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x55cfe5fe46d0 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x55cfe5fe4748 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x55cfe5fe47c0 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x55cfe5fe4a38 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x55cfe5fe4970 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x55cfe5fe4c38 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x55cfe5fe4af0 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x55cfe5fe4b68 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x55cfe5fe4f08 <line:717:5, col:73> col:24
| `-FunctionDecl 0x55cfe5fe4e48 parent 0x55cfe5ae1488 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55cfe5fe4cf8 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x55cfe5fe4d70 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x55cfe5fe5128 <line:718:5, col:72> col:24
| `-FunctionDecl 0x55cfe5fe5068 parent 0x55cfe5ae1488 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55cfe5fe4f58 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x55cfe5fe4fd0 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x55cfe5fe52f0 <line:719:5, col:57> col:29
| `-FunctionDecl 0x55cfe5fe5238 parent 0x55cfe5ae1488 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x55cfe5fe5178 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x55cfe5fe5578 <line:720:5, col:73> col:30
| `-FunctionDecl 0x55cfe5fe54b8 parent 0x55cfe5ae1488 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55cfe5fe5368 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x55cfe5fe53e0 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x55cfe5fe5798 <line:721:5, col:73> col:30
| `-FunctionDecl 0x55cfe5fe56d8 parent 0x55cfe5ae1488 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55cfe5fe55c8 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x55cfe5fe5640 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x55cfe5fe6eb0 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x55cfe5fe6f98 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x55cfe5fe3cc8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55cfe5ff2748 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x55cfe5ff2700 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x55cfe5fe3cc8
| |     `-DeclRefExpr 0x55cfe5ff26e0 <col:7> 'const Timestamp' lvalue ParmVar 0x55cfe5fe6f98 '' 'const Timestamp &'
| `-CompoundStmt 0x55cfe5ff27a8 <col:7>
|-CXXConstructorDecl 0x55cfe5fe7118 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55cfe5fe7228 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x55cfe5fe3cc8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55cfe5ff2a48 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x55cfe5ff29f0 <col:7> 'Timestamp::rep_t' xvalue ._t 0x55cfe5fe3cc8
| |     `-CXXStaticCastExpr 0x55cfe5ff29c0 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x55cfe5ff2990 <col:7> 'Timestamp' lvalue ParmVar 0x55cfe5fe7228 '' 'Timestamp &&'
| `-CompoundStmt 0x55cfe5ff2aa8 <col:7>
|-CXXDestructorDecl 0x55cfe5fe72d8 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55cfe5ce9610 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x55cfe5ce9718 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x55cfe5cea208 <col:7>
|   |-CXXMemberCallExpr 0x55cfe5cea1a8 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x55cfe5cea0e8 <col:7> '<bound member function type>' .operator= 0x55cfe5ce97b8
|   | | `-MemberExpr 0x55cfe5ce9ff8 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x55cfe5fe3cc8
|   | |   `-CXXThisExpr 0x55cfe5ce9fe8 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x55cfe5cea0b8 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x55cfe5fe3cc8
|   |   `-DeclRefExpr 0x55cfe5cea098 <col:7> 'const Timestamp' lvalue ParmVar 0x55cfe5ce9718 '' 'const Timestamp &'
|   `-ReturnStmt 0x55cfe5cea1f8 <col:7>
|     `-UnaryOperator 0x55cfe5cea1e0 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55cfe5cea1d0 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x55cfe5ce9ab8 <col:7> col:7 implicit operator= 'Timestamp &(Timestamp &&)' inline default trivial noexcept-unevaluated 0x55cfe5ce9ab8
  `-ParmVarDecl 0x55cfe5ce9bc8 <col:7> col:7 'Timestamp &&'

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct char_array<4>
         0 |   char [4] x
           | [sizeof=4, dsize=4, align=1,
           |  nvsize=4, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55cfe6063da0 <../dummy_inc/click/type_traits.hh:165:1, line:167:1> line:165:28 struct char_array definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument integral 4
|-PackedAttr 0x55cfe6208a58 <line:167:18>
|-CXXRecordDecl 0x55cfe6208b18 prev 0x55cfe6063da0 <line:165:21, col:28> col:28 implicit struct char_array
`-FieldDecl 0x55cfe6208c28 <line:166:5, col:13> col:10 x 'char [4]'

Layout: <CGRecordLayout
  LLVMType:%struct.char_array = type { [4 x i8] }
  NonVirtualBaseLLVMType:%struct.char_array = type { [4 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class IPAddress>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class IPAddress * _ptr
        24 |   class IPAddress _slot
        24 |     uint32_t _addr
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class String>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class String * _ptr
        24 |   class String _slot
        24 |     struct String::rep_t _r
        24 |       const char * data
        32 |       int length
        40 |       struct String::memo_t * memo
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class Vector<class IPAddress> >
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class Vector<class IPAddress> * _ptr
        24 |   class Vector<class IPAddress> _slot
        24 |     class vector_memory<class sized_array_memory<4> > vm_
        24 |       vector_memory<class sized_array_memory<4> >::type * l_
        32 |       vector_memory::size_type n_
        36 |       vector_memory::size_type capacity_
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPAddressArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class IPAddress> (empty)
         0 |   class IPAddressArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cfe5e59650 prev 0x55cfe5e49b88 <../dummy_inc/click/ipaddress.hh:367:1, line:378:1> line:367:7 referenced class IPAddressArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55cfe5e59748 <col:1, col:7> col:7 implicit class IPAddressArg
|-AccessSpecDecl 0x55cfe5e597d8 <col:22, col:28> col:22 public
|-CXXMethodDecl 0x55cfe5e59c00 <line:368:5, line:369:43> line:368:24 basic_parse 'const char *(const char *, const char *, unsigned char *, int &)' static
| |-ParmVarDecl 0x55cfe5e59818 <col:36, col:48> col:48 begin 'const char *'
| |-ParmVarDecl 0x55cfe5e59898 <col:55, col:67> col:67 end 'const char *'
| |-ParmVarDecl 0x55cfe5e599d0 <line:369:8, col:29> col:22 value 'unsigned char *':'unsigned char *'
| `-ParmVarDecl 0x55cfe5e59a80 <col:32, col:37> col:37 nbytes 'int &'
|-CXXMethodDecl 0x55cfe5e59ec8 <line:370:5, line:371:44> line:370:17 used parse 'bool (const String &, IPAddress &, const ArgContext &)' static
| |-ParmVarDecl 0x55cfe5e59cd0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55cfe5e59d48 <col:42, col:53> col:53 result 'IPAddress &'
| `-ParmVarDecl 0x55cfe5e59de8 <line:371:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55cfe5e5a7c8 <col:34> 'const ArgContext' lvalue Var 0x55cfe5e49b20 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55cfe5e5a218 <line:372:5, line:375:5> line:372:17 parse 'bool (const String &, struct in_addr &, const ArgContext &)' static
| |-ParmVarDecl 0x55cfe5e59f90 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55cfe5e5a080 <col:42, col:58> col:58 used result 'struct in_addr &'
| |-ParmVarDecl 0x55cfe5e5a0f8 <line:373:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55cfe5e5a7e8 <col:34> 'const ArgContext' lvalue Var 0x55cfe5e49b20 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55cfe5e5a9c8 <col:46, line:375:5>
|   `-ReturnStmt 0x55cfe5e5a9b8 <line:374:2, col:63>
|     `-CallExpr 0x55cfe5e5a980 <col:9, col:63> 'bool'
|       |-ImplicitCastExpr 0x55cfe5e5a968 <col:9> 'bool (*)(const String &, IPAddress &, const ArgContext &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55cfe5e5a920 <col:9> 'bool (const String &, IPAddress &, const ArgContext &)' lvalue CXXMethod 0x55cfe5e59ec8 'parse' 'bool (const String &, IPAddress &, const ArgContext &)'
|       |-DeclRefExpr 0x55cfe5e5a880 <col:15> 'const String' lvalue ParmVar 0x55cfe5e59f90 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x55cfe5e5a8d0 <col:20, col:56> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x55cfe5e5a8a0 <col:50> 'struct in_addr':'in_addr' lvalue ParmVar 0x55cfe5e5a080 'result' 'struct in_addr &'
|       `-DeclRefExpr 0x55cfe5e5a900 <col:59> 'const ArgContext' lvalue ParmVar 0x55cfe5e5a0f8 'args' 'const ArgContext &'
|-CXXMethodDecl 0x55cfe5e5a6f8 <line:376:5, line:377:44> line:376:17 used parse 'bool (const String &, Vector<IPAddress> &, const ArgContext &)' static
| |-ParmVarDecl 0x55cfe5e5a2e0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55cfe5e5a560 <col:42, col:61> col:61 result 'Vector<IPAddress> &'
| `-ParmVarDecl 0x55cfe5e5a5d8 <line:377:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55cfe5e5a808 <col:34> 'const ArgContext' lvalue Var 0x55cfe5e49b20 'blank_args' 'const ArgContext'
|-CXXConstructorDecl 0x55cfe620dc18 <line:367:7> col:7 implicit constexpr IPAddressArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x55cfe620dcf0 <col:7> col:7 implicit ~IPAddressArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55cfe620de28 <col:7> col:7 implicit constexpr IPAddressArg 'void (const IPAddressArg &)' inline default trivial noexcept-unevaluated 0x55cfe620de28
| `-ParmVarDecl 0x55cfe620df38 <col:7> col:7 'const IPAddressArg &'
`-CXXConstructorDecl 0x55cfe620dfd8 <col:7> col:7 implicit used constexpr IPAddressArg 'void (IPAddressArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55cfe620e0e8 <col:7> col:7 'IPAddressArg &&'
  `-CompoundStmt 0x55cfe620ed40 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.IPAddressArg = type { i8 }
  NonVirtualBaseLLVMType:%class.IPAddressArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55cfe5e5b7f8 <../dummy_inc/click/ipaddress.hh:398:1, col:64> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IPAddressArg'
|-TemplateArgument type 'IPAddress'
|-CXXRecordDecl 0x55cfe5e5ba58 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55cfe620db28 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55cfe620e158 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<IPAddress> &)' inline default trivial noexcept-unevaluated 0x55cfe620e158
| `-ParmVarDecl 0x55cfe620e268 <col:19> col:19 'const DefaultArg<IPAddress> &'
|-CXXConstructorDecl 0x55cfe620e308 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<IPAddress> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55cfe620e418 <col:19> col:19 used 'DefaultArg<IPAddress> &&'
| |-CXXCtorInitializer 'IPAddressArg'
| | `-CXXConstructExpr 0x55cfe620ed50 <col:19> 'IPAddressArg' 'void (IPAddressArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55cfe620ed20 <col:19> 'IPAddressArg' xvalue <UncheckedDerivedToBase (IPAddressArg)>
| |     `-CXXStaticCastExpr 0x55cfe620ecf0 <col:19> 'DefaultArg<IPAddress>' xvalue static_cast<struct DefaultArg<class IPAddress> &&> <NoOp>
| |       `-DeclRefExpr 0x55cfe620ecc0 <col:19> 'DefaultArg<IPAddress>' lvalue ParmVar 0x55cfe620e418 '' 'DefaultArg<IPAddress> &&'
| `-CompoundStmt 0x55cfe620edc0 <col:19>
`-CXXDestructorDecl 0x55cfe620e4b8 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cfe610ca90 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55cfe610cba8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55cfe610cc38 <col:16, col:22> col:16 public
|-EnumDecl 0x55cfe610cc60 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55cfe610cd60 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55cfe610cfb0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe610cd40 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55cfe610cd20 <col:21> 'int' 0
| |-EnumConstantDecl 0x55cfe610cdf0 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55cfe610cfc8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe610cdd0 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55cfe610cdb0 <col:24> 'int' 22
| |-EnumConstantDecl 0x55cfe610ce80 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55cfe610cfe0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe610ce60 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55cfe610ce40 <col:24> 'int' 34
| |-EnumConstantDecl 0x55cfe610cf10 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55cfe610cff8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55cfe610cef0 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55cfe610ced0 <col:25> 'int' 95
| `-EnumConstantDecl 0x55cfe610cf60 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55cfe610e998 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55cfe610edc8 <col:7>
|-CXXConstructorDecl 0x55cfe610ea98 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55cfe610ea98
| `-ParmVarDecl 0x55cfe610eba8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55cfe610ec48 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55cfe610ed58 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x55cfe623a180 <col:7>
`-CXXDestructorDecl 0x55cfe6110ec8 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cfe610d028 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55cfe610d188 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55cfe610d218 <col:32, col:38> col:32 public
|-TypedefDecl 0x55cfe610d250 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55cfe5c378c0 'uint32_t' sugar
|   |-Typedef 0x55cfe5b4a4c8 'uint32_t'
|   `-TypedefType 0x55cfe5b235a0 '__uint32_t' sugar
|     |-Typedef 0x55cfe5b23198 '__uint32_t'
|     `-BuiltinType 0x55cfe5ae1620 'unsigned int'
|-CXXConstructorDecl 0x55cfe610d398 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55cfe610d2c0 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55cfe610e878 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55cfe610edd8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55cfe610e130 'base' 'int'
| | `-ImplicitCastExpr 0x55cfe610e940 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55cfe610e8d8 <col:16> 'int' lvalue ParmVar 0x55cfe610d2c0 'b' 'int'
| `-CompoundStmt 0x55cfe610ee48 <col:19, line:1046:5>
|-CXXMethodDecl 0x55cfe610d890 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55cfe610d460 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55cfe610d4e0 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55cfe610d558 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55cfe610d5d8 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55cfe610d698 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55cfe610d718 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55cfe610dce8 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55cfe610d960 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55cfe610dc48 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55cfe610da08 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x55cfe610daa8 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x55cfe610db20 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55cfe610e898 <col:82> 'const ArgContext' lvalue Var 0x55cfe61016d8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55cfe610fd78 <col:94, line:1067:5>
| |   |-DeclStmt 0x55cfe610efd8 <line:1054:9, col:64>
| |   | `-VarDecl 0x55cfe610ee68 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x55cfe610ef90 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x55cfe610f1f8 <line:1055:9, col:91>
| |   | `-VarDecl 0x55cfe610f008 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x55cfe610f1d0 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x55cfe610f1b0 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x55cfe610f160 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x55cfe610f140 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x55cfe610f0e8 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x55cfe610f098 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x55cfe610f0c8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x55cfe610f128 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x55cfe610f108 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x55cfe610f190 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x55cfe610f358 <line:1056:9, col:27>
| |   | `-VarDecl 0x55cfe610f2f0 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x55cfe610f7a0 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x55cfe610f6d0 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x55cfe610f650 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55cfe60024e8 0x55cfe5e50b98 0x55cfe5e50870 0x55cfe5e457c8 0x55cfe5e40bf0 0x55cfe5e404e0 0x55cfe5e16d30 0x55cfe5da2d40
| |   | | |-CallExpr 0x55cfe610f590 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x55cfe610f380 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x55cfe610f430 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55cfe610f400 <col:19, col:23> '<bound member function type>' .begin 0x55cfe5e31258
| |   | | | |   `-DeclRefExpr 0x55cfe610f3e0 <col:19> 'const String' lvalue ParmVar 0x55cfe610da08 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x55cfe610f4a0 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55cfe610f470 <col:32, col:36> '<bound member function type>' .end 0x55cfe5e31470
| |   | | | |   `-DeclRefExpr 0x55cfe610f450 <col:32> 'const String' lvalue ParmVar 0x55cfe610da08 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x55cfe610f4c0 <col:43> 'const bool' lvalue Var 0x55cfe610ee68 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x55cfe610f528 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x55cfe610f508 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x55cfe610f550 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55cfe610f2f0 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x55cfe610f570 <col:73> 'const int' lvalue Var 0x55cfe610f008 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x55cfe610f630 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x55cfe610f600 <col:16, col:20> '<bound member function type>' .end 0x55cfe5e31470
| |   | |     `-DeclRefExpr 0x55cfe610f5e0 <col:16> 'const String' lvalue ParmVar 0x55cfe610da08 'str' 'const String &'
| |   | `-BinaryOperator 0x55cfe610f780 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x55cfe610f718 <col:13> 'int' lvalue ->status 0x55cfe610e198
| |   |   | `-CXXThisExpr 0x55cfe610f708 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x55cfe610f768 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x55cfe610f748 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55cfe610cdf0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x55cfe610f9f0 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x55cfe610f8d8 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x55cfe610f8c0 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x55cfe610f8a8 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x55cfe610f7c8 <col:13> 'int' lvalue ->status 0x55cfe610e198
| |   | | |     `-CXXThisExpr 0x55cfe610f7b8 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x55cfe610f888 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x55cfe610f858 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x55cfe610f808 <col:23> 'int' lvalue ->status 0x55cfe610e198
| |   | |   |   `-CXXThisExpr 0x55cfe610f7f8 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x55cfe610f870 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x55cfe610f838 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55cfe610ce80 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x55cfe610f9d0 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x55cfe610f970 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x55cfe610f918 <col:13, col:18> '<bound member function type>' .error 0x55cfe5fcfb00
| |   |   | | `-DeclRefExpr 0x55cfe610f8f8 <col:13> 'const ArgContext' lvalue ParmVar 0x55cfe610db20 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x55cfe610f998 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x55cfe610f948 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x55cfe610f9c0 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x55cfe610f9b0 <col:20> 'bool' false
| |   |-DeclStmt 0x55cfe610fbc8 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x55cfe610fb70 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x55cfe610fb00 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x55cfe610fd28 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x55cfe610fbe0 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55cfe5dd5c78
| |   | |-DeclRefExpr 0x55cfe610fc28 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55cfe610f2f0 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x55cfe610fcf8 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x55cfe610fc70 <col:64> 'V' lvalue ParmVar 0x55cfe610daa8 'result' 'V &'
| |   `-ReturnStmt 0x55cfe610fd68 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x55cfe610fd58 <col:16> 'bool' true
| |-CXXMethodDecl 0x55cfe6205b98 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, int &, const ArgContext &)'
| | |-TemplateArgument type 'int'
| | |-ParmVarDecl 0x55cfe6205970 <col:27, col:41> col:41 used str 'const String &'
| | |-ParmVarDecl 0x55cfe6205a48 <col:46, col:49> col:49 used result 'int &'
| | |-ParmVarDecl 0x55cfe6205ab0 <col:57, col:82> col:75 used args 'const ArgContext &'
| | `-CompoundStmt 0x55cfe6207930 <col:94, line:1067:5>
| |   |-DeclStmt 0x55cfe62063a8 <line:1054:9, col:64>
| |   | `-VarDecl 0x55cfe62061c8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-ImplicitCastExpr 0x55cfe6206338 <col:36, col:55> 'bool' <LValueToRValue>
| |   |     `-DeclRefExpr 0x55cfe6206308 <col:36, col:55> 'const bool' lvalue Var 0x55cfe5dc6de8 'is_signed' 'const bool' non_odr_use_constant
| |   |-DeclStmt 0x55cfe6206588 <line:1055:9, col:91>
| |   | `-VarDecl 0x55cfe62063c0 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x55cfe6206508 <col:31, col:90> 'int' functional cast to int <NoOp>
| |   |     `-ImplicitCastExpr 0x55cfe62064f0 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
| |   |       `-BinaryOperator 0x55cfe62064d0 <col:35, col:89> 'unsigned long' '/'
| |   |         |-ParenExpr 0x55cfe62064b0 <col:35, col:69> 'unsigned long'
| |   |         | `-BinaryOperator 0x55cfe6206490 <col:36, col:68> 'unsigned long' '-'
| |   |         |   |-BinaryOperator 0x55cfe6206458 <col:36, col:64> 'unsigned long' '+'
| |   |         |   | |-UnaryExprOrTypeTraitExpr 0x55cfe6206438 <col:36, col:44> 'unsigned long' sizeof 'int':'int'
| |   |         |   | `-UnaryExprOrTypeTraitExpr 0x55cfe610f0c8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |         |   `-ImplicitCastExpr 0x55cfe6206478 <col:68> 'unsigned long' <IntegralCast>
| |   |         |     `-IntegerLiteral 0x55cfe610f108 <col:68> 'int' 1
| |   |         `-UnaryExprOrTypeTraitExpr 0x55cfe610f190 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x55cfe6206720 <line:1056:9, col:27>
| |   | `-VarDecl 0x55cfe62066b8 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
| |   |-IfStmt 0x55cfe6206ba8 <line:1057:9, line:1059:22>
| |   | |-BinaryOperator 0x55cfe6206b50 <line:1057:13, line:1058:24> 'bool' '!='
| |   | | |-CXXMemberCallExpr 0x55cfe6206a08 <line:1057:13, col:78> 'const char *'
| |   | | | |-MemberExpr 0x55cfe62069d8 <col:13> '<bound member function type>' ->parse 0x55cfe610d890
| |   | | | | `-CXXThisExpr 0x55cfe62069c8 <col:13> 'IntArg *' implicit this
| |   | | | |-CXXMemberCallExpr 0x55cfe6206868 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55cfe6206838 <col:19, col:23> '<bound member function type>' .begin 0x55cfe5e31258
| |   | | | |   `-DeclRefExpr 0x55cfe6206818 <col:19> 'const String' lvalue ParmVar 0x55cfe6205970 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x55cfe62068d8 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55cfe62068a8 <col:32, col:36> '<bound member function type>' .end 0x55cfe5e31470
| |   | | | |   `-DeclRefExpr 0x55cfe6206888 <col:32> 'const String' lvalue ParmVar 0x55cfe6205970 'str' 'const String &'
| |   | | | |-ImplicitCastExpr 0x55cfe6206a78 <col:43> 'bool' <LValueToRValue>
| |   | | | | `-DeclRefExpr 0x55cfe6206a58 <col:43> 'const bool' lvalue Var 0x55cfe62061c8 'is_signed' 'const bool' non_odr_use_constant
| |   | | | |-CXXFunctionalCastExpr 0x55cfe6206960 <col:54, col:67> 'int' functional cast to int <NoOp>
| |   | | | | `-ImplicitCastExpr 0x55cfe6206948 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
| |   | | | |   `-UnaryExprOrTypeTraitExpr 0x55cfe6206928 <col:58, col:66> 'unsigned long' sizeof 'int':'int'
| |   | | | |-ImplicitCastExpr 0x55cfe6206a90 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
| |   | | | | `-DeclRefExpr 0x55cfe6206988 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x55cfe62066b8 'x' 'IntArg::limb_type [1]'
| |   | | | `-ImplicitCastExpr 0x55cfe6206ac8 <col:73> 'int' <LValueToRValue>
| |   | | |   `-DeclRefExpr 0x55cfe6206aa8 <col:73> 'const int' lvalue Var 0x55cfe62063c0 'nlimb' 'const int' non_odr_use_constant
| |   | | `-CXXMemberCallExpr 0x55cfe6206b30 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x55cfe6206b00 <col:16, col:20> '<bound member function type>' .end 0x55cfe5e31470
| |   | |     `-DeclRefExpr 0x55cfe6206ae0 <col:16> 'const String' lvalue ParmVar 0x55cfe6205970 'str' 'const String &'
| |   | `-BinaryOperator 0x55cfe6206b88 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x55cfe610f718 <col:13> 'int' lvalue ->status 0x55cfe610e198
| |   |   | `-CXXThisExpr 0x55cfe610f708 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x55cfe6206b70 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x55cfe610f748 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55cfe610cdf0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x55cfe6206d20 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x55cfe6206c40 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x55cfe6206c28 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x55cfe6206c10 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x55cfe610f7c8 <col:13> 'int' lvalue ->status 0x55cfe610e198
| |   | | |     `-CXXThisExpr 0x55cfe610f7b8 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x55cfe6206bf0 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x55cfe6206bc0 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x55cfe610f808 <col:23> 'int' lvalue ->status 0x55cfe610e198
| |   | |   |   `-CXXThisExpr 0x55cfe610f7f8 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x55cfe6206bd8 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x55cfe610f838 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55cfe610ce80 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x55cfe6206d00 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x55cfe6206cb0 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x55cfe6206c80 <col:13, col:18> '<bound member function type>' .error 0x55cfe5fcfb00
| |   |   | | `-DeclRefExpr 0x55cfe6206c60 <col:13> 'const ArgContext' lvalue ParmVar 0x55cfe6205ab0 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x55cfe6206cd8 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x55cfe610f948 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x55cfe6206cf0 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x55cfe610f9b0 <col:20> 'bool' false
| |   |-DeclStmt 0x55cfe6207268 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x55cfe6207210 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<int>::type':'unsigned int'
| |   |   `-ElaboratedType 0x55cfe62071c0 'typename make_unsigned<int>::type' sugar
| |   |     `-TypedefType 0x55cfe62071a0 'make_unsigned<int>::type' sugar
| |   |       |-Typedef 0x55cfe6207130 'type'
| |   |       `-ElaboratedType 0x55cfe62070e0 'typename integer_traits<int>::unsigned_type' sugar
| |   |         `-TypedefType 0x55cfe62070c0 'integer_traits<int>::unsigned_type' sugar
| |   |           |-Typedef 0x55cfe5dc6f40 'unsigned_type'
| |   |           `-BuiltinType 0x55cfe5ae1620 'unsigned int'
| |   |-CallExpr 0x55cfe62078c0 <line:1065:9, col:71> 'void'
| |   | |-ImplicitCastExpr 0x55cfe62078a8 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x55cfe6207828 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x55cfe6207708 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x55cfe5dd5c78 'extract_integer')
| |   | |-ImplicitCastExpr 0x55cfe6207908 <col:25> 'const unsigned int *' <NoOp>
| |   | | `-ImplicitCastExpr 0x55cfe62078f0 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
| |   | |   `-DeclRefExpr 0x55cfe62072c8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x55cfe62066b8 'x' 'IntArg::limb_type [1]'
| |   | `-CXXReinterpretCastExpr 0x55cfe6207398 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <LValueBitCast>
| |   |   `-DeclRefExpr 0x55cfe6207348 <col:64> 'int':'int' lvalue ParmVar 0x55cfe6205a48 'result' 'int &'
| |   `-ReturnStmt 0x55cfe6207920 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x55cfe610fd58 <col:16> 'bool' true
| `-CXXMethodDecl 0x55cfe623da68 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x55cfe623d840 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x55cfe623d918 <col:46, col:49> col:49 used result 'unsigned int &'
|   |-ParmVarDecl 0x55cfe623d980 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x55cfe623f338 <col:94, line:1067:5>
|     |-DeclStmt 0x55cfe623e278 <line:1054:9, col:64>
|     | `-VarDecl 0x55cfe623e098 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x55cfe623e208 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x55cfe623e1d8 <col:36, col:55> 'const bool' lvalue Var 0x55cfe5dc6090 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x55cfe623e458 <line:1055:9, col:91>
|     | `-VarDecl 0x55cfe623e290 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55cfe623e3d8 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x55cfe623e3c0 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x55cfe623e3a0 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x55cfe623e380 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x55cfe623e360 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x55cfe623e328 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x55cfe623e308 <col:36, col:44> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x55cfe610f0c8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x55cfe623e348 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x55cfe610f108 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x55cfe610f190 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55cfe623e570 <line:1056:9, col:27>
|     | `-VarDecl 0x55cfe623e508 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x55cfe623e9f8 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x55cfe623e9a0 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x55cfe623e858 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x55cfe623e828 <col:13> '<bound member function type>' ->parse 0x55cfe610d890
|     | | | | `-CXXThisExpr 0x55cfe623e818 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x55cfe623e6b8 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55cfe623e688 <col:19, col:23> '<bound member function type>' .begin 0x55cfe5e31258
|     | | | |   `-DeclRefExpr 0x55cfe623e668 <col:19> 'const String' lvalue ParmVar 0x55cfe623d840 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55cfe623e728 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55cfe623e6f8 <col:32, col:36> '<bound member function type>' .end 0x55cfe5e31470
|     | | | |   `-DeclRefExpr 0x55cfe623e6d8 <col:32> 'const String' lvalue ParmVar 0x55cfe623d840 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x55cfe623e8c8 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x55cfe623e8a8 <col:43> 'const bool' lvalue Var 0x55cfe623e098 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x55cfe623e7b0 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x55cfe623e798 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x55cfe623e778 <col:58, col:66> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     | | | |-ImplicitCastExpr 0x55cfe623e8e0 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x55cfe623e7d8 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x55cfe623e508 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x55cfe623e918 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55cfe623e8f8 <col:73> 'const int' lvalue Var 0x55cfe623e290 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x55cfe623e980 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55cfe623e950 <col:16, col:20> '<bound member function type>' .end 0x55cfe5e31470
|     | |     `-DeclRefExpr 0x55cfe623e930 <col:16> 'const String' lvalue ParmVar 0x55cfe623d840 'str' 'const String &'
|     | `-BinaryOperator 0x55cfe623e9d8 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55cfe610f718 <col:13> 'int' lvalue ->status 0x55cfe610e198
|     |   | `-CXXThisExpr 0x55cfe610f708 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55cfe623e9c0 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55cfe610f748 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55cfe610cdf0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55cfe623eb70 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55cfe623ea90 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55cfe623ea78 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55cfe623ea60 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55cfe610f7c8 <col:13> 'int' lvalue ->status 0x55cfe610e198
|     | | |     `-CXXThisExpr 0x55cfe610f7b8 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55cfe623ea40 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55cfe623ea10 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55cfe610f808 <col:23> 'int' lvalue ->status 0x55cfe610e198
|     | |   |   `-CXXThisExpr 0x55cfe610f7f8 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55cfe623ea28 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55cfe610f838 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55cfe610ce80 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55cfe623eb50 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55cfe623eb00 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55cfe623ead0 <col:13, col:18> '<bound member function type>' .error 0x55cfe5fcfb00
|     |   | | `-DeclRefExpr 0x55cfe623eab0 <col:13> 'const ArgContext' lvalue ParmVar 0x55cfe623d980 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55cfe623eb28 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55cfe610f948 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55cfe623eb40 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55cfe610f9b0 <col:20> 'bool' false
|     |-DeclStmt 0x55cfe623f0b8 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55cfe623f060 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned int>::type':'unsigned int'
|     |   `-ElaboratedType 0x55cfe623f010 'typename make_unsigned<unsigned int>::type' sugar
|     |     `-TypedefType 0x55cfe623eff0 'make_unsigned<unsigned int>::type' sugar
|     |       |-Typedef 0x55cfe623ef80 'type'
|     |       `-ElaboratedType 0x55cfe623ef30 'typename integer_traits<unsigned int>::unsigned_type' sugar
|     |         `-TypedefType 0x55cfe623ef10 'integer_traits<unsigned int>::unsigned_type' sugar
|     |           |-Typedef 0x55cfe5dc61e8 'unsigned_type'
|     |           `-BuiltinType 0x55cfe5ae1620 'unsigned int'
|     |-CallExpr 0x55cfe623f2c8 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x55cfe623f2b0 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55cfe623f288 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x55cfe6207708 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x55cfe5dd5c78 'extract_integer')
|     | |-ImplicitCastExpr 0x55cfe623f310 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x55cfe623f2f8 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x55cfe623f118 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x55cfe623e508 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x55cfe623f1e8 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x55cfe623f198 <col:64> 'unsigned int':'unsigned int' lvalue ParmVar 0x55cfe623d918 'result' 'unsigned int &'
|     `-ReturnStmt 0x55cfe623f328 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x55cfe610fd58 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55cfe610e0a8 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55cfe610dd58 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55cfe610e008 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55cfe610de08 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55cfe610dea8 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55cfe610df20 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55cfe610e8b8 <col:71> 'const ArgContext' lvalue Var 0x55cfe61016d8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55cfe61104e8 <col:83, line:1083:5>
| |   |-DeclStmt 0x55cfe610fe40 <line:1071:9, col:12>
| |   | `-VarDecl 0x55cfe610fdd8 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x55cfe61104c0 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55cfe61100d0 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x55cfe610ff58 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x55cfe610ff20 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x55cfe610fe68 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x55cfe610fec0 <col:31> 'const String' lvalue ParmVar 0x55cfe610de08 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55cfe610fee0 <col:36> 'V' lvalue Var 0x55cfe610fdd8 'x' 'V'
| |     | |   `-DeclRefExpr 0x55cfe610ff00 <col:39> 'const ArgContext' lvalue ParmVar 0x55cfe610df20 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55cfe61100b0 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55cfe6110090 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55cfe6110078 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55cfe6110060 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55cfe610ff80 <col:17> 'int' lvalue ->status 0x55cfe610e198
| |     |     |     `-CXXThisExpr 0x55cfe610ff70 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55cfe6110040 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55cfe6110010 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55cfe610ffc0 <col:27> 'int' lvalue ->status 0x55cfe610e198
| |     |       |   `-CXXThisExpr 0x55cfe610ffb0 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55cfe6110028 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55cfe610fff0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55cfe610ce80 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55cfe6110100 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55cfe61100f0 <col:20> 'bool' false
| |     `-IfStmt 0x55cfe6110498 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55cfe61101a0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55cfe6110170 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55cfe6110120 <col:18> 'int' lvalue ->status 0x55cfe610e198
| |       | |   `-CXXThisExpr 0x55cfe6110110 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55cfe6110188 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55cfe6110150 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55cfe610ce80 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55cfe61103d8 <col:42, line:1079:9>
| |       | |-CallExpr 0x55cfe6110380 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x55cfe61101d0 <line:1076:13> '<bound member function type>' ->range_error 0x55cfe610e7a8
| |       | | | `-CXXThisExpr 0x55cfe61101c0 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55cfe6110200 <col:25> 'const ArgContext' lvalue ParmVar 0x55cfe610df20 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x55cfe61102e0 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x55cfe6110358 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x55cfe6110338 <col:43> 'V' lvalue Var 0x55cfe610fdd8 'x' 'V'
| |       | `-ReturnStmt 0x55cfe61103c8 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55cfe61103b8 <col:20> 'bool' false
| |       `-CompoundStmt 0x55cfe6110478 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55cfe6110438 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x55cfe61103f8 <col:13> 'V' lvalue ParmVar 0x55cfe610dea8 'result' 'V &'
| |         | `-DeclRefExpr 0x55cfe6110418 <col:22> 'V' lvalue Var 0x55cfe610fdd8 'x' 'V'
| |         `-ReturnStmt 0x55cfe6110468 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55cfe6110458 <col:20> 'bool' true
| |-CXXMethodDecl 0x55cfe6167698 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
| | |-TemplateArgument type 'int'
| | |-ParmVarDecl 0x55cfe6167478 <col:16, col:30> col:30 used str 'const String &'
| | |-ParmVarDecl 0x55cfe6167548 <col:35, col:38> col:38 used result 'int &'
| | |-ParmVarDecl 0x55cfe61675b0 <col:46, col:71> col:64 used args 'const ArgContext &'
| | `-CompoundStmt 0x55cfe62061a8 <col:83, line:1083:5>
| |   |-DeclStmt 0x55cfe62057b0 <line:1071:9, col:12>
| |   | `-VarDecl 0x55cfe6205748 <col:9, col:11> col:11 used x 'int':'int'
| |   `-IfStmt 0x55cfe6206180 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55cfe6205e10 <line:1072:13, line:1073:49> 'bool' '||'
| |     | |-UnaryOperator 0x55cfe6205d38 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
| |     | | `-CXXMemberCallExpr 0x55cfe6205d00 <col:14, col:43> 'bool'
| |     | |   |-MemberExpr 0x55cfe6205cb8 <col:14> '<bound member function type>' ->parse_saturating 0x55cfe6205b98
| |     | |   | `-CXXThisExpr 0x55cfe6205ca8 <col:14> 'IntArg *' implicit this
| |     | |   |-DeclRefExpr 0x55cfe6205820 <col:31> 'const String' lvalue ParmVar 0x55cfe6167478 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55cfe6205840 <col:36> 'int':'int' lvalue Var 0x55cfe6205748 'x' 'int':'int'
| |     | |   `-DeclRefExpr 0x55cfe6205860 <col:39> 'const ArgContext' lvalue ParmVar 0x55cfe61675b0 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55cfe6205df0 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55cfe6205dd0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55cfe6205db8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55cfe6205da0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55cfe610ff80 <col:17> 'int' lvalue ->status 0x55cfe610e198
| |     |     |     `-CXXThisExpr 0x55cfe610ff70 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55cfe6205d80 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55cfe6205d50 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55cfe610ffc0 <col:27> 'int' lvalue ->status 0x55cfe610e198
| |     |       |   `-CXXThisExpr 0x55cfe610ffb0 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55cfe6205d68 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55cfe610fff0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55cfe610ce80 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55cfe6205e30 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55cfe61100f0 <col:20> 'bool' false
| |     `-IfStmt 0x55cfe6206158 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55cfe6205e70 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55cfe6205e40 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55cfe6110120 <col:18> 'int' lvalue ->status 0x55cfe610e198
| |       | |   `-CXXThisExpr 0x55cfe6110110 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55cfe6205e58 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55cfe6110150 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55cfe610ce80 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55cfe6206090 <col:42, line:1079:9>
| |       | |-CXXMemberCallExpr 0x55cfe6206000 <line:1076:13, line:1077:45> 'void'
| |       | | |-MemberExpr 0x55cfe61101d0 <line:1076:13> '<bound member function type>' ->range_error 0x55cfe610e7a8
| |       | | | `-CXXThisExpr 0x55cfe61101c0 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55cfe6205e90 <col:25> 'const ArgContext' lvalue ParmVar 0x55cfe61675b0 'args' 'const ArgContext &'
| |       | | |-ImplicitCastExpr 0x55cfe6206068 <col:31, col:50> 'bool' <LValueToRValue>
| |       | | | `-DeclRefExpr 0x55cfe6206038 <col:31, col:50> 'const bool' lvalue Var 0x55cfe5dc6de8 'is_signed' 'const bool' non_odr_use_constant
| |       | | `-CXXFunctionalCastExpr 0x55cfe6205fd8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
| |       | |   `-ImplicitCastExpr 0x55cfe6205fc0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
| |       | |     `-ImplicitCastExpr 0x55cfe6205fa8 <col:43> 'int':'int' <LValueToRValue> part_of_explicit_cast
| |       | |       `-DeclRefExpr 0x55cfe6205f88 <col:43> 'int':'int' lvalue Var 0x55cfe6205748 'x' 'int':'int'
| |       | `-ReturnStmt 0x55cfe6206080 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55cfe61103b8 <col:20> 'bool' false
| |       `-CompoundStmt 0x55cfe6206138 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55cfe6206108 <line:1080:13, col:22> 'int':'int' lvalue '='
| |         | |-DeclRefExpr 0x55cfe62060b0 <col:13> 'int':'int' lvalue ParmVar 0x55cfe6167548 'result' 'int &'
| |         | `-ImplicitCastExpr 0x55cfe62060f0 <col:22> 'int':'int' <LValueToRValue>
| |         |   `-DeclRefExpr 0x55cfe62060d0 <col:22> 'int':'int' lvalue Var 0x55cfe6205748 'x' 'int':'int'
| |         `-ReturnStmt 0x55cfe6206128 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55cfe6110458 <col:20> 'bool' true
| `-CXXMethodDecl 0x55cfe623d4a8 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x55cfe623d280 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x55cfe623d358 <col:35, col:38> col:38 used result 'unsigned int &'
|   |-ParmVarDecl 0x55cfe623d3c0 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x55cfe623e078 <col:83, line:1083:5>
|     |-DeclStmt 0x55cfe623d730 <line:1071:9, col:12>
|     | `-VarDecl 0x55cfe623d6c8 <col:9, col:11> col:11 used x 'unsigned int':'unsigned int'
|     `-IfStmt 0x55cfe623e050 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x55cfe623dce0 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x55cfe623dc08 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x55cfe623dbd0 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x55cfe623db88 <col:14> '<bound member function type>' ->parse_saturating 0x55cfe623da68
|       | |   | `-CXXThisExpr 0x55cfe623db78 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x55cfe623d7a0 <col:31> 'const String' lvalue ParmVar 0x55cfe623d280 'str' 'const String &'
|       | |   |-DeclRefExpr 0x55cfe623d7c0 <col:36> 'unsigned int':'unsigned int' lvalue Var 0x55cfe623d6c8 'x' 'unsigned int':'unsigned int'
|       | |   `-DeclRefExpr 0x55cfe623d7e0 <col:39> 'const ArgContext' lvalue ParmVar 0x55cfe623d3c0 'args' 'const ArgContext &'
|       | `-ParenExpr 0x55cfe623dcc0 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x55cfe623dca0 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x55cfe623dc88 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x55cfe623dc70 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x55cfe610ff80 <col:17> 'int' lvalue ->status 0x55cfe610e198
|       |     |     `-CXXThisExpr 0x55cfe610ff70 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x55cfe623dc50 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x55cfe623dc20 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x55cfe610ffc0 <col:27> 'int' lvalue ->status 0x55cfe610e198
|       |       |   `-CXXThisExpr 0x55cfe610ffb0 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x55cfe623dc38 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x55cfe610fff0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55cfe610ce80 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x55cfe623dd00 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x55cfe61100f0 <col:20> 'bool' false
|       `-IfStmt 0x55cfe623e028 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x55cfe623dd40 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x55cfe623dd10 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x55cfe6110120 <col:18> 'int' lvalue ->status 0x55cfe610e198
|         | |   `-CXXThisExpr 0x55cfe6110110 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x55cfe623dd28 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x55cfe6110150 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55cfe610ce80 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x55cfe623df60 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x55cfe623ded0 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x55cfe61101d0 <line:1076:13> '<bound member function type>' ->range_error 0x55cfe610e7a8
|         | | | `-CXXThisExpr 0x55cfe61101c0 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x55cfe623dd60 <col:25> 'const ArgContext' lvalue ParmVar 0x55cfe623d3c0 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x55cfe623df38 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x55cfe623df08 <col:31, col:50> 'const bool' lvalue Var 0x55cfe5dc6090 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x55cfe623dea8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x55cfe623de90 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x55cfe623de78 <col:43> 'unsigned int':'unsigned int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x55cfe623de58 <col:43> 'unsigned int':'unsigned int' lvalue Var 0x55cfe623d6c8 'x' 'unsigned int':'unsigned int'
|         | `-ReturnStmt 0x55cfe623df50 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x55cfe61103b8 <col:20> 'bool' false
|         `-CompoundStmt 0x55cfe623e008 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x55cfe623dfd8 <line:1080:13, col:22> 'unsigned int':'unsigned int' lvalue '='
|           | |-DeclRefExpr 0x55cfe623df80 <col:13> 'unsigned int':'unsigned int' lvalue ParmVar 0x55cfe623d358 'result' 'unsigned int &'
|           | `-ImplicitCastExpr 0x55cfe623dfc0 <col:22> 'unsigned int':'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x55cfe623dfa0 <col:22> 'unsigned int':'unsigned int' lvalue Var 0x55cfe623d6c8 'x' 'unsigned int':'unsigned int'
|           `-ReturnStmt 0x55cfe623dff8 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x55cfe6110458 <col:20> 'bool' true
|-FieldDecl 0x55cfe610e130 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x55cfe610e198 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55cfe610e1e8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55cfe610e4a0 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55cfe610e228 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55cfe610e2a8 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55cfe610e320 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55cfe610e3a0 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55cfe610e7a8 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55cfe610e570 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55cfe610e5e8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55cfe610e680 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x55cfe6110d48 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x55cfe6110d48
| `-ParmVarDecl 0x55cfe6110e58 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x55cfe6110fd8 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55cfe61110e8 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55cfe623a190 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55cfe623a160 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x55cfe623a130 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55cfe623a100 <col:7> 'IntArg' lvalue ParmVar 0x55cfe61110e8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55cfe610e130 'base' 'int'
| | `-ImplicitCastExpr 0x55cfe623a288 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55cfe623a258 <col:7> 'int' xvalue .base 0x55cfe610e130
| |     `-CXXStaticCastExpr 0x55cfe623a228 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55cfe623a1f8 <col:7> 'IntArg' lvalue ParmVar 0x55cfe61110e8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55cfe610e198 'status' 'int'
| | `-ImplicitCastExpr 0x55cfe623a358 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55cfe623a328 <col:7> 'int' xvalue .status 0x55cfe610e198
| |     `-CXXStaticCastExpr 0x55cfe623a2f8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55cfe623a2c8 <col:7> 'IntArg' lvalue ParmVar 0x55cfe61110e8 '' 'IntArg &&'
| `-CompoundStmt 0x55cfe623a3b0 <col:7>
`-CXXDestructorDecl 0x55cfe61671f8 <col:7> col:7 implicit referenced ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55cfe6224de8 <../dummy_inc/click/args.hh:850:5, line:860:5> line:851:12 struct SlotT definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Args::Slot'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55cfe62251e8 prev 0x55cfe6224de8 <col:5, col:12> col:12 implicit struct SlotT
|-CXXConstructorDecl 0x55cfe62253e0 <line:852:9, line:854:9> line:852:9 used SlotT 'void (String *)'
| |-ParmVarDecl 0x55cfe62252e8 <col:15, col:18> col:18 used ptr 'String *'
| |-CXXCtorInitializer 'Args::Slot'
| | `-CXXConstructExpr 0x55cfe6226328 <col:9> 'Args::Slot' 'void ()'
| |-CXXCtorInitializer Field 0x55cfe6225560 '_ptr' 'String *'
| | `-ImplicitCastExpr 0x55cfe62262e8 <line:853:20> 'String *' <LValueToRValue>
| |   `-DeclRefExpr 0x55cfe62262a8 <col:20> 'String *' lvalue ParmVar 0x55cfe62252e8 'ptr' 'String *'
| |-CXXCtorInitializer Field 0x55cfe62255c0 '_slot' 'String':'String'
| | `-CXXConstructExpr 0x55cfe6226388 <line:852:9> 'String':'String' 'void ()'
| `-CompoundStmt 0x55cfe6101500 <line:853:25, line:854:9>
|-CXXMethodDecl 0x55cfe62254a0 <line:855:9, line:857:9> line:855:14 used store 'void ()'
| |-Overrides: [ 0x55cfe60da8b0 Slot::store 'void ()' ]
| `-CompoundStmt 0x55cfe6226a48 <col:22, line:857:9>
|   `-CallExpr 0x55cfe6226a00 <line:856:13, col:40> 'void'
|     |-ImplicitCastExpr 0x55cfe62269e8 <col:13> 'void (*)(String &, const String &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55cfe6226968 <col:13> 'void (String &, const String &)' lvalue Function 0x55cfe6226848 'assign_consume' 'void (String &, const String &)' (FunctionTemplate 0x55cfe5dabba8 'assign_consume')
|     |-UnaryOperator 0x55cfe6226518 <col:28, col:29> 'String':'String' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x55cfe6226500 <col:29> 'String *' <LValueToRValue>
|     |   `-MemberExpr 0x55cfe62264d0 <col:29> 'String *' lvalue ->_ptr 0x55cfe6225560
|     |     `-CXXThisExpr 0x55cfe62264c0 <col:29> 'Args::SlotT<String> *' implicit this
|     `-ImplicitCastExpr 0x55cfe6226a30 <col:35> 'const String':'const String' lvalue <NoOp>
|       `-MemberExpr 0x55cfe6226540 <col:35> 'String':'String' lvalue ->_slot 0x55cfe62255c0
|         `-CXXThisExpr 0x55cfe6226530 <col:35> 'Args::SlotT<String> *' implicit this
|-FieldDecl 0x55cfe6225560 <line:858:9, col:12> col:12 referenced _ptr 'String *'
|-FieldDecl 0x55cfe62255c0 <line:859:9, col:11> col:11 referenced _slot 'String':'String'
|-CXXConstructorDecl 0x55cfe6225638 <line:851:12> col:12 implicit SlotT 'void (const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x55cfe6225638
| `-ParmVarDecl 0x55cfe6225748 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXConstructorDecl 0x55cfe62257e8 <col:12> col:12 implicit SlotT 'void (Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x55cfe62257e8
| `-ParmVarDecl 0x55cfe62258f8 <col:12> col:12 'Args::SlotT<String> &&'
|-CXXMethodDecl 0x55cfe6225998 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x55cfe6225998
| `-ParmVarDecl 0x55cfe6225aa8 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXMethodDecl 0x55cfe6225b18 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x55cfe6225b18
| `-ParmVarDecl 0x55cfe6225c28 <col:12> col:12 'Args::SlotT<String> &&'
`-CXXDestructorDecl 0x55cfe6225cb0 <col:12> col:12 implicit used ~SlotT 'void () noexcept' inline default
  |-Overrides: [ 0x55cfe60da7b0 Slot::~Slot 'void () noexcept' ]
  `-CompoundStmt 0x55cfe62263f0 <col:12>

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  NonVirtualBaseLLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<Vector<class IPAddress> > (empty)
         0 |   class IPAddressArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55cfe5e5bf10 <../dummy_inc/click/ipaddress.hh:400:1, col:73> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IPAddressArg'
|-TemplateArgument type 'Vector<IPAddress>'
|-CXXRecordDecl 0x55cfe5e5c168 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55cfe622e778 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55cfe622e878 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<Vector<IPAddress> > &)' inline default trivial noexcept-unevaluated 0x55cfe622e878
| `-ParmVarDecl 0x55cfe622e988 <col:19> col:19 'const DefaultArg<Vector<IPAddress> > &'
|-CXXConstructorDecl 0x55cfe622ea28 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<Vector<IPAddress> > &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55cfe622eb38 <col:19> col:19 used 'DefaultArg<Vector<IPAddress> > &&'
| |-CXXCtorInitializer 'IPAddressArg'
| | `-CXXConstructExpr 0x55cfe622f430 <col:19> 'IPAddressArg' 'void (IPAddressArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55cfe622f410 <col:19> 'IPAddressArg' xvalue <UncheckedDerivedToBase (IPAddressArg)>
| |     `-CXXStaticCastExpr 0x55cfe622f3e0 <col:19> 'DefaultArg<Vector<IPAddress> >' xvalue static_cast<struct DefaultArg<Vector<class IPAddress> > &&> <NoOp>
| |       `-DeclRefExpr 0x55cfe622f3b0 <col:19> 'DefaultArg<Vector<IPAddress> >' lvalue ParmVar 0x55cfe622eb38 '' 'DefaultArg<Vector<IPAddress> > &&'
| `-CompoundStmt 0x55cfe622f4a0 <col:19>
`-CXXDestructorDecl 0x55cfe622ebd8 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.3 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.3 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55cfe6230498 <../dummy_inc/click/args.hh:850:5, line:860:5> line:851:12 struct SlotT definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Args::Slot'
|-TemplateArgument type 'Vector<IPAddress>'
|-CXXRecordDecl 0x55cfe6230898 prev 0x55cfe6230498 <col:5, col:12> col:12 implicit struct SlotT
|-CXXConstructorDecl 0x55cfe6230ac0 <line:852:9, line:854:9> line:852:9 used SlotT 'void (Vector<IPAddress> *)'
| |-ParmVarDecl 0x55cfe6230998 <col:15, col:18> col:18 used ptr 'Vector<IPAddress> *'
| |-CXXCtorInitializer 'Args::Slot'
| | `-CXXConstructExpr 0x55cfe6231a08 <col:9> 'Args::Slot' 'void ()'
| |-CXXCtorInitializer Field 0x55cfe6230c40 '_ptr' 'Vector<IPAddress> *'
| | `-ImplicitCastExpr 0x55cfe62319c8 <line:853:20> 'Vector<IPAddress> *' <LValueToRValue>
| |   `-DeclRefExpr 0x55cfe6231988 <col:20> 'Vector<IPAddress> *' lvalue ParmVar 0x55cfe6230998 'ptr' 'Vector<IPAddress> *'
| |-CXXCtorInitializer Field 0x55cfe6230ca0 '_slot' 'Vector<IPAddress>':'Vector<IPAddress>'
| | `-CXXConstructExpr 0x55cfe6231a68 <line:852:9> 'Vector<IPAddress>':'Vector<IPAddress>' 'void ()'
| `-CompoundStmt 0x55cfe6101500 <line:853:25, line:854:9>
|-CXXMethodDecl 0x55cfe6230b80 <line:855:9, line:857:9> line:855:14 used store 'void ()'
| |-Overrides: [ 0x55cfe60da8b0 Slot::store 'void ()' ]
| `-CompoundStmt 0x55cfe62325c0 <col:22, line:857:9>
|   `-CallExpr 0x55cfe6232590 <line:856:13, col:40> 'void'
|     |-ImplicitCastExpr 0x55cfe6232578 <col:13> 'void (*)(Vector<IPAddress> &, Vector<IPAddress> &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55cfe62324f8 <col:13> 'void (Vector<IPAddress> &, Vector<IPAddress> &)' lvalue Function 0x55cfe6232028 'assign_consume' 'void (Vector<IPAddress> &, Vector<IPAddress> &)' (FunctionTemplate 0x55cfe5e02548 'assign_consume')
|     |-UnaryOperator 0x55cfe6231bf8 <col:28, col:29> 'Vector<IPAddress>':'Vector<IPAddress>' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x55cfe6231be0 <col:29> 'Vector<IPAddress> *' <LValueToRValue>
|     |   `-MemberExpr 0x55cfe6231bb0 <col:29> 'Vector<IPAddress> *' lvalue ->_ptr 0x55cfe6230c40
|     |     `-CXXThisExpr 0x55cfe6231ba0 <col:29> 'Args::SlotT<Vector<IPAddress> > *' implicit this
|     `-MemberExpr 0x55cfe6231c20 <col:35> 'Vector<IPAddress>':'Vector<IPAddress>' lvalue ->_slot 0x55cfe6230ca0
|       `-CXXThisExpr 0x55cfe6231c10 <col:35> 'Args::SlotT<Vector<IPAddress> > *' implicit this
|-FieldDecl 0x55cfe6230c40 <line:858:9, col:12> col:12 referenced _ptr 'Vector<IPAddress> *'
|-FieldDecl 0x55cfe6230ca0 <line:859:9, col:11> col:11 referenced _slot 'Vector<IPAddress>':'Vector<IPAddress>'
|-CXXConstructorDecl 0x55cfe6230d18 <line:851:12> col:12 implicit SlotT 'void (const Args::SlotT<Vector<IPAddress> > &)' inline default noexcept-unevaluated 0x55cfe6230d18
| `-ParmVarDecl 0x55cfe6230e28 <col:12> col:12 'const Args::SlotT<Vector<IPAddress> > &'
|-CXXConstructorDecl 0x55cfe6230ec8 <col:12> col:12 implicit SlotT 'void (Args::SlotT<Vector<IPAddress> > &&)' inline default noexcept-unevaluated 0x55cfe6230ec8
| `-ParmVarDecl 0x55cfe6230fd8 <col:12> col:12 'Args::SlotT<Vector<IPAddress> > &&'
|-CXXMethodDecl 0x55cfe6231078 <col:12> col:12 implicit operator= 'Args::SlotT<Vector<IPAddress> > &(const Args::SlotT<Vector<IPAddress> > &)' inline default noexcept-unevaluated 0x55cfe6231078
| `-ParmVarDecl 0x55cfe6231188 <col:12> col:12 'const Args::SlotT<Vector<IPAddress> > &'
|-CXXMethodDecl 0x55cfe62311f8 <col:12> col:12 implicit operator= 'Args::SlotT<Vector<IPAddress> > &(Args::SlotT<Vector<IPAddress> > &&)' inline default noexcept-unevaluated 0x55cfe62311f8
| `-ParmVarDecl 0x55cfe6231308 <col:12> col:12 'Args::SlotT<Vector<IPAddress> > &&'
`-CXXDestructorDecl 0x55cfe6231390 <col:12> col:12 implicit used ~SlotT 'void () noexcept' inline default
  |-Overrides: [ 0x55cfe60da7b0 Slot::~Slot 'void () noexcept' ]
  `-CompoundStmt 0x55cfe6231ad0 <col:12>

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::SlotT.4" = type { %"struct.Args::Slot", %class.Vector*, %class.Vector }
  NonVirtualBaseLLVMType:%"struct.Args::SlotT.4" = type { %"struct.Args::Slot", %class.Vector*, %class.Vector }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55cfe61152e0 <../dummy_inc/click/args.hh:1182:1, col:61> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x55cfe6115538 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55cfe62392f8 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55cfe6239790 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55cfe6239770 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55cfe6239800 <col:19>
|-CXXConstructorDecl 0x55cfe62393f8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned int> &)' inline default trivial noexcept-unevaluated 0x55cfe62393f8
| `-ParmVarDecl 0x55cfe6239508 <col:19> col:19 'const DefaultArg<unsigned int> &'
|-CXXConstructorDecl 0x55cfe62395a8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55cfe62396b8 <col:19> col:19 used 'DefaultArg<unsigned int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55cfe623a3c0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55cfe623a0e0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55cfe623a0b0 <col:19> 'DefaultArg<unsigned int>' xvalue static_cast<struct DefaultArg<unsigned int> &&> <NoOp>
| |       `-DeclRefExpr 0x55cfe623a080 <col:19> 'DefaultArg<unsigned int>' lvalue ParmVar 0x55cfe62396b8 '' 'DefaultArg<unsigned int> &&'
| `-CompoundStmt 0x55cfe623a430 <col:19>
`-CXXDestructorDecl 0x55cfe6239840 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.5 = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg.5 = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55cfe611a6b0 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55cfe611a7c8 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x55cfe611a858 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x55cfe611aa98 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x55cfe611a890 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55cfe611a910 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x55cfe611a988 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55cfe611acb0 <col:81> 'const ArgContext' lvalue Var 0x55cfe61016d8 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55cfe611abf0 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x55cfe611ab60 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x55cfe611ae08 <col:35, line:1261:5>
|   `-ReturnStmt 0x55cfe611adf8 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x55cfe611ade0 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x55cfe611adb0 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55cfe611ad98 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x55cfe611ad70 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x55cfe611ad50 <col:16, col:24> 'String' (CXXTemporary 0x55cfe611ad50)
|               `-CXXConstructExpr 0x55cfe611ad18 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x55cfe611ad00 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x55cfe611ace0 <col:23> 'bool' lvalue ParmVar 0x55cfe611ab60 'x' 'bool'
|-CXXConstructorDecl 0x55cfe6248cd8 <line:1257:7> col:7 implicit constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x55cfe6248db0 <col:7> col:7 implicit ~BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55cfe6248ee8 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x55cfe6248ee8
| `-ParmVarDecl 0x55cfe6248ff8 <col:7> col:7 'const BoolArg &'
`-CXXConstructorDecl 0x55cfe6249098 <col:7> col:7 implicit used constexpr BoolArg 'void (BoolArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55cfe62491a8 <col:7> col:7 'BoolArg &&'
  `-CompoundStmt 0x55cfe6249e00 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55cfe611ae48 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x55cfe611b0a8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55cfe6248be8 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55cfe6249218 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x55cfe6249218
| `-ParmVarDecl 0x55cfe6249328 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x55cfe62493c8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55cfe62494d8 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x55cfe6249e10 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55cfe6249de0 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x55cfe6249db0 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x55cfe6249d80 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x55cfe62494d8 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x55cfe6249e80 <col:19>
`-CXXDestructorDecl 0x55cfe6249578 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.6 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.6 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
