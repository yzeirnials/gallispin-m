
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | struct TimerSet::heap_element
         0 |   class Timestamp expiry_s
         0 |     union Timestamp::rep_t _t
         0 |       int64_t x
         8 |   class Timer * t
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct pollfd
         0 |   int fd
         4 |   short events
         6 |   short revents
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct SelectSet::SelectorInfo
         0 |   class Element * read
         8 |   class Element * write
        16 |   int pollfd
           | [sizeof=24, dsize=20, align=8,
           |  nvsize=20, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Router::Port
         0 |   int idx
         4 |   int port
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct Router::element_landmark_t
         0 |   uint32_t first_landmarkid
         8 |   class String filename
         8 |     struct String::rep_t _r
         8 |       const char * data
        16 |       int length
        24 |       struct String::memo_t * memo
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Router::Connection
         0 |   struct Router::Port [2] p
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | struct StringAccum::rep_t
         0 |   unsigned char * s
         8 |   int len
        12 |   int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563645203718 prev 0x5636451faeb8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563645203810 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x5636452038a0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x563645203918 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x5636452039d8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x563645203aa0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x563645203c18 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x563645203b50 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x563645203cc0 <col:24>
| `-OptimizeNoneAttr 0x563645203d18 <col:34>
|-CXXMethodDecl 0x563645203d60 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x563645204018 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x563645203e10 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x563645203e88 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x563645203f08 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x5636452040d0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x563645204108 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x563645204170 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x5636452041f8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x563645204518 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x5636452042b0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x563645204328 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x5636452043a0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x563645204420 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x563645204630 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x56364520af98 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x56364520af98
| `-ParmVarDecl 0x56364520b0a8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x56364520b148 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x56364520b148
| `-ParmVarDecl 0x56364520b258 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x5636453d8428 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<8> >
         0 |   vector_memory<class sized_array_memory<8> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class Element *>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<unsigned int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<struct Router::element_landmark_t> >
         0 |   vector_memory<class typed_array_memory<struct Router::element_landmark_t> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct Router::element_landmark_t>
         0 |   class vector_memory<class typed_array_memory<struct Router::element_landmark_t> > vm_
         0 |     vector_memory<class typed_array_memory<struct Router::element_landmark_t> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<16> >
         0 |   vector_memory<class sized_array_memory<16> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct Router::Connection>
         0 |   class vector_memory<class sized_array_memory<16> > vm_
         0 |     vector_memory<class sized_array_memory<16> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<void *>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Router
         0 |   class Master * _master
         8 |   class atomic_uint32_t _runcount
         8 |     uint32_t _val
        12 |   volatile int _state
    16:0-0 |   _Bool _have_connections
    16:1-1 |   _Bool _conn_sorted
    16:2-2 |   _Bool _have_configuration
        20 |   volatile int _running
        24 |   class atomic_uint32_t _refcount
        24 |     uint32_t _val
        32 |   class Vector<class Element *> _elements
        32 |     class vector_memory<class sized_array_memory<8> > vm_
        32 |       vector_memory<class sized_array_memory<8> >::type * l_
        40 |       vector_memory::size_type n_
        44 |       vector_memory::size_type capacity_
        48 |   class Vector<class String> _element_names
        48 |     class vector_memory<class typed_array_memory<class String> > vm_
        48 |       vector_memory<class typed_array_memory<class String> >::type * l_
        56 |       vector_memory::size_type n_
        60 |       vector_memory::size_type capacity_
        64 |   class Vector<class String> _element_configurations
        64 |     class vector_memory<class typed_array_memory<class String> > vm_
        64 |       vector_memory<class typed_array_memory<class String> >::type * l_
        72 |       vector_memory::size_type n_
        76 |       vector_memory::size_type capacity_
        80 |   class Vector<unsigned int> _element_landmarkids
        80 |     class vector_memory<class sized_array_memory<4> > vm_
        80 |       vector_memory<class sized_array_memory<4> >::type * l_
        88 |       vector_memory::size_type n_
        92 |       vector_memory::size_type capacity_
        96 |   class Vector<int> _element_home_thread_ids
        96 |     class vector_memory<class sized_array_memory<4> > vm_
        96 |       vector_memory<class sized_array_memory<4> >::type * l_
       104 |       vector_memory::size_type n_
       108 |       vector_memory::size_type capacity_
       112 |   class Vector<struct Router::element_landmark_t> _element_landmarks
       112 |     class vector_memory<class typed_array_memory<struct Router::element_landmark_t> > vm_
       112 |       vector_memory<class typed_array_memory<struct Router::element_landmark_t> >::type * l_
       120 |       vector_memory::size_type n_
       124 |       vector_memory::size_type capacity_
       128 |   uint32_t _last_landmarkid
       136 |   class Vector<int> _element_name_sorter
       136 |     class vector_memory<class sized_array_memory<4> > vm_
       136 |       vector_memory<class sized_array_memory<4> >::type * l_
       144 |       vector_memory::size_type n_
       148 |       vector_memory::size_type capacity_
       152 |   Vector<int> [2] _element_gport_offset
       184 |   class Vector<int> _element_configure_order
       184 |     class vector_memory<class sized_array_memory<4> > vm_
       184 |       vector_memory<class sized_array_memory<4> >::type * l_
       192 |       vector_memory::size_type n_
       196 |       vector_memory::size_type capacity_
       200 |   class Vector<struct Router::Connection> _conn
       200 |     class vector_memory<class sized_array_memory<16> > vm_
       200 |       vector_memory<class sized_array_memory<16> >::type * l_
       208 |       vector_memory::size_type n_
       212 |       vector_memory::size_type capacity_
       216 |   class Vector<int> _conn_output_sorter
       216 |     class vector_memory<class sized_array_memory<4> > vm_
       216 |       vector_memory<class sized_array_memory<4> >::type * l_
       224 |       vector_memory::size_type n_
       228 |       vector_memory::size_type capacity_
       232 |   class Vector<class String> _requirements
       232 |     class vector_memory<class typed_array_memory<class String> > vm_
       232 |       vector_memory<class typed_array_memory<class String> >::type * l_
       240 |       vector_memory::size_type n_
       244 |       vector_memory::size_type capacity_
       248 |   class Vector<int> _ehandler_first_by_element
       248 |     class vector_memory<class sized_array_memory<4> > vm_
       248 |       vector_memory<class sized_array_memory<4> >::type * l_
       256 |       vector_memory::size_type n_
       260 |       vector_memory::size_type capacity_
       264 |   class Vector<int> _ehandler_to_handler
       264 |     class vector_memory<class sized_array_memory<4> > vm_
       264 |       vector_memory<class sized_array_memory<4> >::type * l_
       272 |       vector_memory::size_type n_
       276 |       vector_memory::size_type capacity_
       280 |   class Vector<int> _ehandler_next
       280 |     class vector_memory<class sized_array_memory<4> > vm_
       280 |       vector_memory<class sized_array_memory<4> >::type * l_
       288 |       vector_memory::size_type n_
       292 |       vector_memory::size_type capacity_
       296 |   class Vector<int> _handler_first_by_name
       296 |     class vector_memory<class sized_array_memory<4> > vm_
       296 |       vector_memory<class sized_array_memory<4> >::type * l_
       304 |       vector_memory::size_type n_
       308 |       vector_memory::size_type capacity_
       312 |   class Handler ** _handler_bufs
       320 |   int _nhandlers_bufs
       324 |   int _free_handler
       328 |   class Vector<class String> _attachment_names
       328 |     class vector_memory<class typed_array_memory<class String> > vm_
       328 |       vector_memory<class typed_array_memory<class String> >::type * l_
       336 |       vector_memory::size_type n_
       340 |       vector_memory::size_type capacity_
       344 |   class Vector<void *> _attachments
       344 |     class vector_memory<class sized_array_memory<8> > vm_
       344 |       vector_memory<class sized_array_memory<8> >::type * l_
       352 |       vector_memory::size_type n_
       356 |       vector_memory::size_type capacity_
       360 |   class Element * _root_element
       368 |   class String _configuration
       368 |     struct String::rep_t _r
       368 |       const char * data
       376 |       int length
       384 |       struct String::memo_t * memo
       392 |   struct Router::notifier_signals_t * _notifier_signals
       400 |   class HashMap_ArenaFactory * _arena_factory
       408 |   class Router * _hotswap_router
       416 |   class ThreadSched * _thread_sched
       424 |   class NameInfo * _name_info
       432 |   class Vector<int> _flow_code_override_eindex
       432 |     class vector_memory<class sized_array_memory<4> > vm_
       432 |       vector_memory<class sized_array_memory<4> >::type * l_
       440 |       vector_memory::size_type n_
       444 |       vector_memory::size_type capacity_
       448 |   class Vector<class String> _flow_code_override
       448 |     class vector_memory<class typed_array_memory<class String> > vm_
       448 |       vector_memory<class typed_array_memory<class String> >::type * l_
       456 |       vector_memory::size_type n_
       460 |       vector_memory::size_type capacity_
       464 |   class Router * _next_router
           | [sizeof=472, dsize=472, align=8,
           |  nvsize=472, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563644fb2000 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563644fb2118 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x563644fb21a8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x563644fb2278 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x563644fb2360 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x563644fb2578 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x563644fb2420 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563644fb2728 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x563644fb2630 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x563644fb2870 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x563644fb27e0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x563644fb29b8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x563644fb2928 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563644fb2b00 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x563644fb2a70 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563644fb2bc8 <line:67:5, col:28> col:17 used operator++ 'void ()' inline
|-CXXMethodDecl 0x563644fb2d10 <line:68:5, col:31> col:17 used operator++ 'void (int)' inline
| `-ParmVarDecl 0x563644fb2c80 <col:28> col:31 'int'
|-CXXMethodDecl 0x563644fb2dd8 <line:69:5, col:28> col:17 used operator-- 'void ()' inline
|-CXXMethodDecl 0x563644fb2f20 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x563644fb2e90 <col:28> col:31 'int'
|-CXXMethodDecl 0x563644fb3098 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x563644fb2fd8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563644fb31e0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x563644fb3150 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563644fb32a8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x563644fb3468 <line:75:5, col:69> col:21 used compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x563644fb3358 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x563644fb33d0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563644fb36b8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x563644fb3528 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x563644fb35a0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x563644fb3768 <col:86> "" ""
|-CXXMethodDecl 0x563644fb39d8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x563644fb3848 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x563644fb38c0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563644fb3b88 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x563644fb3a98 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x563644fb3d38 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x563644fb3c40 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x563644fb4008 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x563644fb3df0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x563644fb3e68 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x563644fb3ee0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563644fb42e8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x563644fb40d0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x563644fb4148 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x563644fb41c0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x563644fb43a0 <col:115> "" ""
|-AccessSpecDecl 0x563644fb4410 <line:84:3, col:10> col:3 private
|-FieldDecl 0x563644fb4448 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563644fb5960 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x563644fb5960
| `-ParmVarDecl 0x563644fb5a68 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x563644fb5b08 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x563644fb5b08
| `-ParmVarDecl 0x563644fb5c18 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x563644feb248 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5636451dd810 <col:7>
|-CXXConstructorDecl 0x563644feb320 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x563644feb320
| `-ParmVarDecl 0x563644feb438 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x563644feb4a8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x563644feb4a8
| `-ParmVarDecl 0x563644feb5b8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x5636451e2c20 <col:7> col:7 implicit referenced ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5636453079d0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<8>'
|-CXXRecordDecl 0x563645307ba8 prev 0x5636453079d0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x563645307c38 <col:46, col:52> col:46 public
|-TypedefDecl 0x563645307c60 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563644c8d370 'int'
|-TypedefDecl 0x563645309830 <line:13:5, col:31> col:31 type 'typename sized_array_memory<8>::type':'char_array<8>'
| `-ElaboratedType 0x5636453097e0 'typename sized_array_memory<8>::type' sugar
|   `-TypedefType 0x563645308110 'sized_array_memory<8>::type' sugar
|     |-Typedef 0x563645308010 'type'
|     `-TemplateSpecializationType 0x563645307fa0 'char_array<8UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x563645307e80 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|       |   `-SubstNonTypeTemplateParmExpr 0x563645307e60 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x563645307e40 <col:24> 'unsigned long' 8
|       `-RecordType 0x563645307f80 'char_array<8>'
|         `-ClassTemplateSpecialization 0x563645307ea0 'char_array'
|-TypedefDecl 0x56364530a328 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<8> >::type *'
| `-PointerType 0x56364530a2f0 'vector_memory<sized_array_memory<8> >::type *'
|   `-TypedefType 0x56364530a2d0 'vector_memory<sized_array_memory<8> >::type' sugar
|     |-Typedef 0x563645309830 'type'
|     `-ElaboratedType 0x5636453097e0 'typename sized_array_memory<8>::type' sugar
|       `-TypedefType 0x563645308110 'sized_array_memory<8>::type' sugar
|         |-Typedef 0x563645308010 'type'
|         `-TemplateSpecializationType 0x563645307fa0 'char_array<8UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x563645307e80 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|           |   `-SubstNonTypeTemplateParmExpr 0x563645307e60 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x563645307e40 <col:24> 'unsigned long' 8
|           `-RecordType 0x563645307f80 'char_array<8>'
|             `-ClassTemplateSpecialization 0x563645307ea0 'char_array'
|-CXXMethodDecl 0x56364530a4a8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<8> >::type *) const' inline
| `-ParmVarDecl 0x56364530a3b8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXConstructorDecl 0x56364530a598 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x56364530a678 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x56364530a678
|-CXXMethodDecl 0x56364530a948 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x56364530a850 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<8> > &'
|-CXXMethodDecl 0x56364530ab88 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x56364530aa00 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56364530aa78 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x56364530ad58 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x56364530ac48 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56364530acc0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x56364530aeb8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x56364530af88 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x56364530b1d8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x56364530b048 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x56364530b0c0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x56364530b438 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, vector_memory<sized_array_memory<8> >::iterator)'
| |-ParmVarDecl 0x56364530b2a8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x56364530b320 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x56364530b5f8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x56364530b508 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x56364530b7b8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x56364530b6c0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x56364530b870 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56364530b920 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56364530bb58 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x56364530b9d0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56364530ba48 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x56364530bdf8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x56364530bd00 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<8> > &'
|-FieldDecl 0x56364530bec0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<8> >::type *'
|-FieldDecl 0x56364530bf10 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56364530bf60 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x563645367d28 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'Element *'
|-CXXRecordDecl 0x5636450a9688 prev 0x563645367d28 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5636450aa6a0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<Element *>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x5636450aa650 'typename array_memory<Element *>::type' sugar
|   `-TypedefType 0x5636450aa630 'conditional<true, sized_array_memory<8>, typed_array_memory<Element *> >::type' sugar
|     |-Typedef 0x5636450aa4e0 'type'
|     `-SubstTemplateTypeParmType 0x5636453075a0 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x563644f57610 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f575b8 'T'
|       `-RecordType 0x5636453070f0 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x563645307008 'sized_array_memory'
|-FieldDecl 0x5636450aa7a0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<Element *>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x5636450aa7f0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5636450aa828 <line:118:5, col:15> col:15 value_type 'Element *':'Element *'
| `-SubstTemplateTypeParmType 0x5636450a9720 'Element *' sugar
|   |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x563644f8f2a8 'T'
|   `-PointerType 0x5636451ecc60 'Element *'
|     `-RecordType 0x5636451ec9e0 'Element'
|       `-CXXRecord 0x5636451f6730 'Element'
|-TypedefDecl 0x5636450aa8b8 <line:119:5, col:16> col:16 reference 'Element *&'
| `-LValueReferenceType 0x5636450aa880 'Element *&'
|   `-SubstTemplateTypeParmType 0x5636450a9720 'Element *' sugar
|     |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563644f8f2a8 'T'
|     `-PointerType 0x5636451ecc60 'Element *'
|       `-RecordType 0x5636451ec9e0 'Element'
|         `-CXXRecord 0x5636451f6730 'Element'
|-TypedefDecl 0x5636450aa978 <line:120:5, col:22> col:22 const_reference 'Element *const &'
| `-LValueReferenceType 0x5636450aa940 'Element *const &'
|   `-QualType 0x5636450a9721 'Element *const' const
|     `-SubstTemplateTypeParmType 0x5636450a9720 'Element *' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-PointerType 0x5636451ecc60 'Element *'
|         `-RecordType 0x5636451ec9e0 'Element'
|           `-CXXRecord 0x5636451f6730 'Element'
|-TypedefDecl 0x5636450aaa08 <line:121:5, col:16> col:16 pointer 'Element **'
| `-PointerType 0x5636450aa9d0 'Element **'
|   `-SubstTemplateTypeParmType 0x5636450a9720 'Element *' sugar
|     |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563644f8f2a8 'T'
|     `-PointerType 0x5636451ecc60 'Element *'
|       `-RecordType 0x5636451ec9e0 'Element'
|         `-CXXRecord 0x5636451f6730 'Element'
|-TypedefDecl 0x5636450aaac8 <line:122:5, col:22> col:22 const_pointer 'Element *const *'
| `-PointerType 0x5636450aaa90 'Element *const *'
|   `-QualType 0x5636450a9721 'Element *const' const
|     `-SubstTemplateTypeParmType 0x5636450a9720 'Element *' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-PointerType 0x5636451ecc60 'Element *'
|         `-RecordType 0x5636451ec9e0 'Element'
|           `-CXXRecord 0x5636451f6730 'Element'
|-TypedefDecl 0x5636450ab6a0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<Element *>::type':'Element *'
| `-ElaboratedType 0x5636450ab650 'typename fast_argument<Element *>::type' sugar
|   `-TypedefType 0x5636450ab630 'fast_argument<Element *, false>::type' sugar
|     |-Typedef 0x5636450ab5c0 'type'
|     `-SubstTemplateTypeParmType 0x5636450ab380 'Element *' sugar
|       |-TemplateTypeParmType 0x563644f62410 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f623c0 'T'
|       `-PointerType 0x5636451ecc60 'Element *'
|         `-RecordType 0x5636451ec9e0 'Element'
|           `-CXXRecord 0x5636451f6730 'Element'
|-TypedefDecl 0x5636450ab708 <line:126:5, col:22> col:22 const_access_type 'Element *const &'
| `-LValueReferenceType 0x5636450aa940 'Element *const &'
|   `-QualType 0x5636450a9721 'Element *const' const
|     `-SubstTemplateTypeParmType 0x5636450a9720 'Element *' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-PointerType 0x5636451ecc60 'Element *'
|         `-RecordType 0x5636451ec9e0 'Element'
|           `-CXXRecord 0x5636451f6730 'Element'
|-TypedefDecl 0x5636450ab760 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563644c8d370 'int'
|-TypedefDecl 0x5636450ab7c8 <line:130:5, col:16> col:16 iterator 'Element **'
| `-PointerType 0x5636450aa9d0 'Element **'
|   `-SubstTemplateTypeParmType 0x5636450a9720 'Element *' sugar
|     |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563644f8f2a8 'T'
|     `-PointerType 0x5636451ecc60 'Element *'
|       `-RecordType 0x5636451ec9e0 'Element'
|         `-CXXRecord 0x5636451f6730 'Element'
|-TypedefDecl 0x5636450ab830 <line:131:5, col:22> col:22 const_iterator 'Element *const *'
| `-PointerType 0x5636450aaa90 'Element *const *'
|   `-QualType 0x5636450a9721 'Element *const' const
|     `-SubstTemplateTypeParmType 0x5636450a9720 'Element *' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-PointerType 0x5636451ecc60 'Element *'
|         `-RecordType 0x5636451ec9e0 'Element'
|           `-CXXRecord 0x5636451f6730 'Element'
|-EnumDecl 0x5636450ab888 <line:134:5> col:5
| `-EnumConstantDecl 0x5636450ab980 <col:12, col:40> col:12 RESERVE_GROW 'Vector<Element *>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5636450ab960 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x563644f90ba8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x563644f90b80 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x563644f90b60 <col:40> 'int' 1
|-CXXConstructorDecl 0x5636450aba08 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5636450abc98 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<Element *>::value_argument_type)' inline
| |-ParmVarDecl 0x5636450abac0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5636450abb60 <col:41, col:61> col:61 v 'Vector<Element *>::value_argument_type':'Element *'
|-CXXConstructorDecl 0x5636450abf28 <line:139:5, col:37> col:12 Vector 'void (const Vector<Element *> &)' inline
| `-ParmVarDecl 0x5636450abe10 <col:19, col:36> col:36 x 'const Vector<Element *> &'
|-CXXConstructorDecl 0x5636450ac1e8 <line:141:5, col:32> col:12 Vector 'void (Vector<Element *> &&)' inline
| `-ParmVarDecl 0x5636450ac0d0 <col:19, col:31> col:31 x 'Vector<Element *> &&'
|-CXXMethodDecl 0x5636450ac500 <line:144:5, col:51> col:23 operator= 'Vector<Element *> &(const Vector<Element *> &)' inline
| `-ParmVarDecl 0x5636450ac3e0 <col:33, col:50> col:50 x 'const Vector<Element *> &'
|-CXXMethodDecl 0x5636450ac810 <line:146:5, col:46> col:23 operator= 'Vector<Element *> &(Vector<Element *> &&)' inline
| `-ParmVarDecl 0x5636450ac6f0 <col:33, col:45> col:45 x 'Vector<Element *> &&'
|-CXXMethodDecl 0x5636450acb00 <line:148:5, col:70> col:23 assign 'Vector<Element *> &(Vector::size_type, Vector<Element *>::value_argument_type)' inline
| |-ParmVarDecl 0x5636450ac948 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5636450ac9c0 <col:43, col:69> col:63 v 'Vector<Element *>::value_argument_type':'Element *'
|-CXXMethodDecl 0x5636450acc58 <line:150:5, col:55> col:49 begin 'Vector<Element *>::iterator ()'
| |-NoInlineAttr 0x5636450acd38 <col:20> Inherited
| `-OptimizeNoneAttr 0x5636450acd90 <col:30> Inherited
|-CXXMethodDecl 0x5636450acdd8 <line:151:5, col:53> col:49 end 'Vector<Element *>::iterator ()'
| |-NoInlineAttr 0x5636450ace88 <col:20> Inherited
| `-OptimizeNoneAttr 0x5636450acee0 <col:30> Inherited
|-CXXMethodDecl 0x5636450acfa8 <line:152:5, col:63> col:55 begin 'Vector<Element *>::const_iterator () const'
| |-NoInlineAttr 0x5636450ad058 <col:20> Inherited
| `-OptimizeNoneAttr 0x5636450ad0b0 <col:30> Inherited
|-CXXMethodDecl 0x5636450ad0f8 <line:153:5, col:61> col:55 end 'Vector<Element *>::const_iterator () const'
| |-NoInlineAttr 0x5636450ad1a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5636450ad200 <col:30> Inherited
|-CXXMethodDecl 0x5636450ad248 <line:154:5, col:64> col:55 cbegin 'Vector<Element *>::const_iterator () const'
| |-NoInlineAttr 0x5636450ad2f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5636450ad350 <col:30> Inherited
|-CXXMethodDecl 0x5636450ad398 <line:155:5, col:62> col:55 cend 'Vector<Element *>::const_iterator () const'
| |-NoInlineAttr 0x5636450ad448 <col:20> Inherited
| `-OptimizeNoneAttr 0x5636450ad4a0 <col:30> Inherited
|-CXXMethodDecl 0x5636450ad4c8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5636450ad578 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5636450ad628 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5636450ad7e8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<Element *>::value_argument_type)' inline
| |-ParmVarDecl 0x5636450ad6d8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5636450ad750 <col:37, col:63> col:57 v 'Vector<Element *>::value_argument_type':'Element *'
|-CXXMethodDecl 0x56364536e1a0 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56364536e110 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56364536e348 <line:163:5, col:65> col:43 operator[] 'Element *&(Vector::size_type)'
| |-ParmVarDecl 0x56364536e258 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56364536e400 <col:20>
| `-OptimizeNoneAttr 0x56364536e458 <col:30>
|-CXXMethodDecl 0x56364536e578 <line:164:5, col:73> col:49 operator[] 'Element *const &(Vector::size_type) const'
| |-ParmVarDecl 0x56364536e480 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56364536e630 <col:20>
| `-OptimizeNoneAttr 0x56364536e688 <col:30>
|-CXXMethodDecl 0x56364536e740 <line:165:5, col:29> col:15 at 'Element *&(Vector::size_type)' inline
| `-ParmVarDecl 0x56364536e6b0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56364536e888 <line:166:5, col:37> col:21 at 'Element *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56364536e7f8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56364536e9b8 <line:167:5, col:21> col:15 front 'Element *&()' inline
|-CXXMethodDecl 0x56364536eae8 <line:168:5, col:29> col:21 front 'Element *const &() const' inline
|-CXXMethodDecl 0x56364536ebb8 <line:169:5, col:20> col:15 back 'Element *&()' inline
|-CXXMethodDecl 0x56364536ec88 <line:170:5, col:28> col:21 back 'Element *const &() const' inline
|-CXXMethodDecl 0x56364536edc8 <line:172:5, col:39> col:15 unchecked_at 'Element *&(Vector::size_type)' inline
| `-ParmVarDecl 0x56364536ed38 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56364536ef10 <line:173:5, col:47> col:21 unchecked_at 'Element *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56364536ee80 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56364536f058 <line:174:5, col:59> col:15 at_u 'Element *&(Vector::size_type)' inline
| |-ParmVarDecl 0x56364536efc8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56364536f110 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56364536f210 <line:175:5, col:71> col:21 at_u 'Element *const &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56364536f180 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56364536f2c8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56364536f388 <line:177:5, col:20> col:15 data 'Element **()' inline
|-CXXMethodDecl 0x56364536f488 <line:178:5, col:28> col:21 data 'Element *const *() const' inline
|-CXXMethodDecl 0x56364536f608 <line:180:5, col:48> col:17 push_back 'void (Vector<Element *>::value_argument_type)' inline
| `-ParmVarDecl 0x56364536f548 <col:27, col:47> col:47 v 'Vector<Element *>::value_argument_type':'Element *'
|-FunctionTemplateDecl 0x56364536fdc8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56364536f6c0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<Element *>':'fast_argument<Element *, false>'
| `-CXXMethodDecl 0x56364536fd28 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (Element *&&)' inline
|   `-ParmVarDecl 0x56364536fc28 <col:58, col:62> col:62 v 'Element *&&'
|-CXXMethodDecl 0x56364536fea8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56364536fff8 <line:186:5, col:49> col:17 push_front 'void (Vector<Element *>::value_argument_type)' inline
| `-ParmVarDecl 0x56364536ff68 <col:28, col:48> col:48 v 'Vector<Element *>::value_argument_type':'Element *'
|-CXXMethodDecl 0x5636453700b0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5636453702f8 <line:189:5, col:62> col:21 insert 'Vector<Element *>::iterator (Vector<Element *>::iterator, Vector<Element *>::value_argument_type)' inline
| |-ParmVarDecl 0x563645370170 <col:28, col:37> col:37 it 'Vector<Element *>::iterator':'Element **'
| `-ParmVarDecl 0x5636453701e8 <col:41, col:61> col:61 v 'Vector<Element *>::value_argument_type':'Element *'
|-CXXMethodDecl 0x5636453704b8 <line:190:5, col:38> col:21 erase 'Vector<Element *>::iterator (Vector<Element *>::iterator)' inline
| `-ParmVarDecl 0x5636453703c8 <col:27, col:36> col:36 it 'Vector<Element *>::iterator':'Element **'
|-CXXMethodDecl 0x563645370708 <line:191:5, col:49> col:21 erase 'Vector<Element *>::iterator (Vector<Element *>::iterator, Vector<Element *>::iterator)' inline
| |-ParmVarDecl 0x563645370580 <col:27, col:36> col:36 a 'Vector<Element *>::iterator':'Element **'
| `-ParmVarDecl 0x5636453705f8 <col:39, col:48> col:48 b 'Vector<Element *>::iterator':'Element **'
|-CXXMethodDecl 0x5636453707c8 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x563645370a28 <line:195:5, col:34> col:17 swap 'void (Vector<Element *> &)' inline
| `-ParmVarDecl 0x563645370930 <col:22, col:33> col:33 x 'Vector<Element *> &'
`-CXXDestructorDecl 0x563645370af8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x563645370af8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563644fc73f0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x563644fc7508 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x563644fc75a8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x563644fc7608 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x563644fc7668 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x563644fc7718 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563644fc7a20 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563644fc7b38 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x563644fc7be0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x563644fc7c48 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x563644fc7cd8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x563644fcdd70 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x563644fce1a8 <col:12>
|-CXXConstructorDecl 0x563644fcde78 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x563644fcdf88 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x563644fc7be0 'data' 'const char *'
| | `-ImplicitCastExpr 0x563644fd0730 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x563644fd0700 <col:12> 'const char *const' lvalue .data 0x563644fc7be0
| |     `-DeclRefExpr 0x563644fd06e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x563644fcdf88 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x563644fc7c48 'length' 'int'
| | `-ImplicitCastExpr 0x563644fd07c0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x563644fd0790 <col:12> 'const int' lvalue .length 0x563644fc7c48
| |     `-DeclRefExpr 0x563644fd0770 <col:12> 'const String::rep_t' lvalue ParmVar 0x563644fcdf88 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x563644fc7cd8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x563644fd0850 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x563644fd0820 <col:12> 'String::memo_t *const' lvalue .memo 0x563644fc7cd8
| |     `-DeclRefExpr 0x563644fd0800 <col:12> 'const String::rep_t' lvalue ParmVar 0x563644fcdf88 '' 'const String::rep_t &'
| `-CompoundStmt 0x563644fd08a8 <col:12>
|-CXXConstructorDecl 0x563644fce028 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x563644fce028
| `-ParmVarDecl 0x563644fce138 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x563644fd3690 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x563644fdf0a8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x563644fdf1b8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x563644fdf6d0 <col:12>
|   |-BinaryOperator 0x563644fdf4e8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x563644fdf4a0 <col:12> 'const char *' lvalue ->data 0x563644fc7be0
|   | | `-CXXThisExpr 0x563644fdf490 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x563644fdf4d0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x563644fdf460 <col:12> 'const char *const' lvalue .data 0x563644fc7be0
|   |     `-DeclRefExpr 0x563644fdf440 <col:12> 'const String::rep_t' lvalue ParmVar 0x563644fdf1b8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x563644fdf5b0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x563644fdf568 <col:12> 'int' lvalue ->length 0x563644fc7c48
|   | | `-CXXThisExpr 0x563644fdf558 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x563644fdf598 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x563644fdf528 <col:12> 'const int' lvalue .length 0x563644fc7c48
|   |     `-DeclRefExpr 0x563644fdf508 <col:12> 'const String::rep_t' lvalue ParmVar 0x563644fdf1b8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x563644fdf678 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x563644fdf630 <col:12> 'String::memo_t *' lvalue ->memo 0x563644fc7cd8
|   | | `-CXXThisExpr 0x563644fdf620 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x563644fdf660 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x563644fdf5f0 <col:12> 'String::memo_t *const' lvalue .memo 0x563644fc7cd8
|   |     `-DeclRefExpr 0x563644fdf5d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x563644fdf1b8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x563644fdf6c0 <col:12>
|     `-UnaryOperator 0x563644fdf6a8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x563644fdf698 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x563644fdf228 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x563644fdf228
  `-ParmVarDecl 0x563644fdf338 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563644fbe960 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x563644fbea78 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x563644fbeb08 <col:16, col:22> col:16 public
|-TypedefDecl 0x563644fbeb48 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x563644c8ddc0 'const char *'
|   `-QualType 0x563644c8d311 'const char' const
|     `-BuiltinType 0x563644c8d310 'char'
|-TypedefDecl 0x563644fbebd0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x563644fbeba0 'String::const_iterator' sugar
|   |-Typedef 0x563644fbeb48 'const_iterator'
|   `-PointerType 0x563644c8ddc0 'const char *'
|     `-QualType 0x563644c8d311 'const char' const
|       `-BuiltinType 0x563644c8d310 'char'
|-TypedefDecl 0x563644fbed40 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x563644fbecb0 'int (String::*)() const'
|   |-RecordType 0x563644fbe9f0 'String'
|   | `-CXXRecord 0x563644fbe960 'String'
|   `-ParenType 0x563644fbec50 'int () const' sugar
|     `-FunctionProtoType 0x563644f927e0 'int () const' const cdecl
|       `-BuiltinType 0x563644c8d370 'int'
|-TypedefDecl 0x563644fbeda8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x563644de71a0 'int64_t' sugar
|   |-Typedef 0x563644cf62d0 'int64_t'
|   `-TypedefType 0x563644ccf4d0 '__int64_t' sugar
|     |-Typedef 0x563644ccf0a8 '__int64_t'
|     `-BuiltinType 0x563644c8d390 'long'
|-TypedefDecl 0x563644fbee10 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x563644de70c0 'uint64_t' sugar
|   |-Typedef 0x563644cf6470 'uint64_t'
|   `-TypedefType 0x563644ccf560 '__uint64_t' sugar
|     |-Typedef 0x563644ccf118 '__uint64_t'
|     `-BuiltinType 0x563644c8d430 'unsigned long'
|-TypedefDecl 0x563644fbeea0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x563644fbee70 'String::intmax_t' sugar
|   |-Typedef 0x563644fbeda8 'intmax_t'
|   `-TypedefType 0x563644de71a0 'int64_t' sugar
|     |-Typedef 0x563644cf62d0 'int64_t'
|     `-TypedefType 0x563644ccf4d0 '__int64_t' sugar
|       |-Typedef 0x563644ccf0a8 '__int64_t'
|       `-BuiltinType 0x563644c8d390 'long'
|-TypedefDecl 0x563644fbef30 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x563644fbef00 'String::uintmax_t' sugar
|   |-Typedef 0x563644fbee10 'uintmax_t'
|   `-TypedefType 0x563644de70c0 'uint64_t' sugar
|     |-Typedef 0x563644cf6470 'uint64_t'
|     `-TypedefType 0x563644ccf560 '__uint64_t' sugar
|       |-Typedef 0x563644ccf118 '__uint64_t'
|       `-BuiltinType 0x563644c8d430 'unsigned long'
|-CXXConstructorDecl 0x563644fbeff0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x563644fbf198 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x563644fbf0d8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x563644fbf348 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x563644fbf288 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x563644fbf4a0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x563644fbf410 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x563644fbf6b8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x563644fbf568 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x563644fbf5e8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x563644fbf8d8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x563644fbf788 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x563644fbf808 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x563644fbfaf8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x563644fbf9a8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x563644fbfa28 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x563644fbfd18 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x563644fbfbc8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x563644fbfc48 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x563644fbfea8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x563644fbfde0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x563644fc0028 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x563644fbff68 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x563644fc01b8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x563644fc00f0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x563644fc0310 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x563644fc0280 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x563644fc0468 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x563644fc03d8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x563644fc05c0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x563644fc0530 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x563644fc0748 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x563644fc0688 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x563644fc08d8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x563644fc0810 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x563644fc0a68 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x563644fc09a0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x563644fc0bf8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x563644fc0b30 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x563644fc0cf0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x563644fc0e18 <line:69:5, col:44> col:33 used make_empty 'const String &()' static inline
|-CXXMethodDecl 0x563644fc0f98 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x563644fc0ed0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x563644fc10e8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x563644fc1058 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x563644fc11a0 <col:63> "" ""
|-CXXMethodDecl 0x563644fc12e8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x563644fc1228 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x563644fc14f8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x563644fc13a8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x563644fc1428 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x563644fc1718 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x563644fc15c0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x563644fc1640 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x563644fc19f8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x563644fc17d8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x563644fc1858 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x563644fcd840 <col:55> 'int' 10
| `-ParmVarDecl 0x563644fc18d0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x563644fcd860 <col:76> 'bool' true
|-CXXMethodDecl 0x563644fc1cd8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x563644fc1ac0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x563644fc1b40 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x563644fcd870 <col:56> 'int' 10
| `-ParmVarDecl 0x563644fc1bb8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x563644fcd890 <col:77> 'bool' true
|-CXXMethodDecl 0x563644fc1de0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x563644fc1ea8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x563644fc1f70 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x563644fc2010 <col:20>
| `-OptimizeNoneAttr 0x563644fc2068 <col:30>
|-CXXConversionDecl 0x563644fc2158 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x563644fc2228 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x563644fc22e8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x563644fc23d8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x563644fc2498 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x563644fc2618 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x563644fc2550 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x563644fc2768 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x563644fc26d8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x563644fc2858 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x563644fc2918 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x563644fc2b68 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x563644fc29d0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x563644fc2a50 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x563644fc2dc8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x563644fc2c30 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x563644fc2cb0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x563644fc2e98 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x563644fc30a8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x563644fc2f50 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x563644fc2fd0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x563644fc32c8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x563644fc3170 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x563644fc31f0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x563644fc3458 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x563644fc3390 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x563644fc3548 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x563644fc36b8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x563644fc35f8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x563644fc38c8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x563644fc3778 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x563644fc37f8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x563644fc3ae0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x563644fc3988 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x563644fc3a00 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x563644fc3c70 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x563644fc3ba0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x563644fc3e90 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x563644fc3d30 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x563644fc3db0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x563644fc3fe0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x563644fc3f50 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x563644fc41b8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x563644fc40a0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x563644fc4120 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x563644fc4308 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x563644fc4278 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x563644fc4520 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x563644fc43c0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x563644fc4440 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x563644fcd8a0 <col:39> 'int' 0
|-CXXMethodDecl 0x563644fc4740 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x563644fc45e0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x563644fc4660 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x563644fcd8c0 <col:48> 'int' 0
|-CXXMethodDecl 0x563644fc4920 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x563644fc4800 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x563644fc4880 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x563644fcd8e0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x563644fc49f0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x563644fc4ab0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x563644fc4b70 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x563644fc4c30 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x563644fc4cf0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x563644fc4e98 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x563644fc4da0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x563644fc5018 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x563644fc4f50 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x563644fc51f0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x563644fc50d8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x563644fc5368 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x563644fc52a8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x563644fc54b0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x563644fc5420 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x563644fc5600 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x563644fc5570 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x563644fc57d8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x563644fc56c0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x563644fc5740 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x563644fc59b8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x563644fc58a0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x563644fc5920 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x563644fc5b08 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x563644fc5a78 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x563644fc5d18 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x563644fc5bc8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x563644fc5c48 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x563644fc5e78 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x563644fc5de0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x563644fc5fd0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x563644fc5f38 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x563644fc6078 <col:57> "" ""
|-CXXMethodDecl 0x563644fc6188 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x563644fc60f8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x563644fc62d8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x563644fc6248 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x563644fc6458 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x563644fc6390 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x563644fc6520 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x563644fc65e0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x563644fc66a0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x563644fc6740 <col:49> "" ""
|-CXXMethodDecl 0x563644fc67d0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x563644fc6890 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x563644fc6980 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x563644fc6a48 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x563644fc6b08 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x563644fc6bc8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x563644fc6cc0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x563644fc6d88 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x563644fc6e50 <line:174:5, col:42> col:31 used empty_data 'const char *()' static inline
|-CXXMethodDecl 0x563644fc7028 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x563644fc6f08 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x563644fc6f88 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x563644fc7250 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x563644fc70f0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x563644fc7170 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x563644fc7360 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x563644fc73c8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x563644fc73f0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x563644fc7508 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x563644fc75a8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x563644fc7608 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x563644fc7668 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x563644fc7718 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x563644fc7780 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x563644fc79b8 <line:201:2, col:32> col:2 referenced MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x563644fc7a08 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563644fc7998 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x563644fc78a8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x563644fc7850 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x563644fc7890 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x563644fc7870 <col:32> 'int' 8
|-CXXRecordDecl 0x563644fc7a20 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x563644fc7b38 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x563644fc7be0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x563644fc7c48 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x563644fc7cd8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x563644fcdd70 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x563644fce1a8 <col:12>
| |-CXXConstructorDecl 0x563644fcde78 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x563644fcdf88 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x563644fc7be0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x563644fd0730 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x563644fd0700 <col:12> 'const char *const' lvalue .data 0x563644fc7be0
| | |     `-DeclRefExpr 0x563644fd06e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x563644fcdf88 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x563644fc7c48 'length' 'int'
| | | `-ImplicitCastExpr 0x563644fd07c0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x563644fd0790 <col:12> 'const int' lvalue .length 0x563644fc7c48
| | |     `-DeclRefExpr 0x563644fd0770 <col:12> 'const String::rep_t' lvalue ParmVar 0x563644fcdf88 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x563644fc7cd8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x563644fd0850 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x563644fd0820 <col:12> 'String::memo_t *const' lvalue .memo 0x563644fc7cd8
| | |     `-DeclRefExpr 0x563644fd0800 <col:12> 'const String::rep_t' lvalue ParmVar 0x563644fcdf88 '' 'const String::rep_t &'
| | `-CompoundStmt 0x563644fd08a8 <col:12>
| |-CXXConstructorDecl 0x563644fce028 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x563644fce028
| | `-ParmVarDecl 0x563644fce138 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x563644fd3690 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x563644fdf0a8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x563644fdf1b8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x563644fdf6d0 <col:12>
| |   |-BinaryOperator 0x563644fdf4e8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x563644fdf4a0 <col:12> 'const char *' lvalue ->data 0x563644fc7be0
| |   | | `-CXXThisExpr 0x563644fdf490 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x563644fdf4d0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x563644fdf460 <col:12> 'const char *const' lvalue .data 0x563644fc7be0
| |   |     `-DeclRefExpr 0x563644fdf440 <col:12> 'const String::rep_t' lvalue ParmVar 0x563644fdf1b8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x563644fdf5b0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x563644fdf568 <col:12> 'int' lvalue ->length 0x563644fc7c48
| |   | | `-CXXThisExpr 0x563644fdf558 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x563644fdf598 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x563644fdf528 <col:12> 'const int' lvalue .length 0x563644fc7c48
| |   |     `-DeclRefExpr 0x563644fdf508 <col:12> 'const String::rep_t' lvalue ParmVar 0x563644fdf1b8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x563644fdf678 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x563644fdf630 <col:12> 'String::memo_t *' lvalue ->memo 0x563644fc7cd8
| |   | | `-CXXThisExpr 0x563644fdf620 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x563644fdf660 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x563644fdf5f0 <col:12> 'String::memo_t *const' lvalue .memo 0x563644fc7cd8
| |   |     `-DeclRefExpr 0x563644fdf5d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x563644fdf1b8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x563644fdf6c0 <col:12>
| |     `-UnaryOperator 0x563644fdf6a8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x563644fdf698 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x563644fdf228 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x563644fdf228
|   `-ParmVarDecl 0x563644fdf338 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x563644fc7d50 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x563644fc7f98 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x563644fc7db8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x563644fc7e38 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x563644fc7eb0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x563644fcdd30 <col:79, line:261:5>
|   |-BinaryOperator 0x563644fcd9a8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x563644fcd940 <col:2, col:5> 'const char *' lvalue .data 0x563644fc7be0
|   | | `-MemberExpr 0x563644fcd910 <col:2> 'String::rep_t' lvalue ->_r 0x563644fc7d50
|   | |   `-CXXThisExpr 0x563644fcd900 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x563644fcd990 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x563644fcd970 <col:12> 'const char *' lvalue ParmVar 0x563644fc7db8 'data' 'const char *'
|   |-BinaryOperator 0x563644fcda70 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x563644fcda08 <col:2, col:5> 'int' lvalue .length 0x563644fc7c48
|   | | `-MemberExpr 0x563644fcd9d8 <col:2> 'String::rep_t' lvalue ->_r 0x563644fc7d50
|   | |   `-CXXThisExpr 0x563644fcd9c8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x563644fcda58 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x563644fcda38 <col:14> 'int' lvalue ParmVar 0x563644fc7e38 'length' 'int'
|   `-IfStmt 0x563644fcdd18 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x563644fcdb90 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x563644fcdb78 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x563644fcdb58 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x563644fcdb38 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x563644fcdad0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x563644fc7cd8
|     |       | `-MemberExpr 0x563644fcdaa0 <col:7> 'String::rep_t' lvalue ->_r 0x563644fc7d50
|     |       |   `-CXXThisExpr 0x563644fcda90 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x563644fcdb20 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x563644fcdb00 <col:17> 'String::memo_t *' lvalue ParmVar 0x563644fc7eb0 'memo' 'String::memo_t *'
|     `-CallExpr 0x563644fcdcf0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x563644fcdcd8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563644fcdbe0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x563644fb69c8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x563644fcdc48 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x563644fc75a8
|         `-ImplicitCastExpr 0x563644fcdc30 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x563644fcdc10 <col:27> 'String::memo_t *' lvalue ParmVar 0x563644fc7eb0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x563644fc8248 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x563644fc8068 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x563644fc80e8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x563644fc8160 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x563644fc7d50 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x563644fce1b8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x563644fce348 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x563644fce2b0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x563644fce220 <col:2> '<bound member function type>' ->assign_memo 0x563644fc7f98
|     | `-ImplicitCastExpr 0x563644fce2e8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x563644fce210 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x563644fce300 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x563644fce250 <col:14> 'const char *' lvalue ParmVar 0x563644fc8068 'data' 'const char *'
|     |-ImplicitCastExpr 0x563644fce318 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x563644fce270 <col:20> 'int' lvalue ParmVar 0x563644fc80e8 'length' 'int'
|     `-ImplicitCastExpr 0x563644fce330 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x563644fce290 <col:28> 'String::memo_t *' lvalue ParmVar 0x563644fc8160 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x563644fc83d8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x563644fc8318 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x563644fce5a0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x563644fce520 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x563644fce370 <col:2> '<bound member function type>' ->assign_memo 0x563644fc7f98
|     | `-CXXThisExpr 0x563644fce360 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x563644fce558 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x563644fce3f0 <col:14, col:19> 'const char *' lvalue .data 0x563644fc7be0
|     |   `-MemberExpr 0x563644fce3c0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x563644fc7d50
|     |     `-DeclRefExpr 0x563644fce3a0 <col:14> 'const String' lvalue ParmVar 0x563644fc8318 'x' 'const String &'
|     |-ImplicitCastExpr 0x563644fce570 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x563644fce470 <col:25, col:30> 'int' lvalue .length 0x563644fc7c48
|     |   `-MemberExpr 0x563644fce440 <col:25, col:27> 'String::rep_t' lvalue ._r 0x563644fc7d50
|     |     `-DeclRefExpr 0x563644fce420 <col:25> 'const String' lvalue ParmVar 0x563644fc8318 'x' 'const String &'
|     `-ImplicitCastExpr 0x563644fce588 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x563644fce4f0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x563644fc7cd8
|         `-MemberExpr 0x563644fce4c0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x563644fc7d50
|           `-DeclRefExpr 0x563644fce4a0 <col:38> 'const String' lvalue ParmVar 0x563644fc8318 'x' 'const String &'
|-CXXMethodDecl 0x563644fc84a0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x563644fcef60 <col:31, line:278:5>
|   `-IfStmt 0x563644fcef48 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x563644fce640 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x563644fce628 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x563644fce5f8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x563644fc7cd8
|     |     `-MemberExpr 0x563644fce5c8 <col:6> 'String::rep_t' lvalue ->_r 0x563644fc7d50
|     |       `-CXXThisExpr 0x563644fce5b8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x563644fcef20 <col:15, line:277:2>
|       |-ParenExpr 0x563644fceaf0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x563644fceac0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x563644fce750 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x563644fce738 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x563644fce720 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x563644fce6e0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x563644fc75a8
|       |   |       `-ImplicitCastExpr 0x563644fce6c8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x563644fce698 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x563644fc7cd8
|       |   |           `-MemberExpr 0x563644fce668 <col:27> 'String::rep_t' lvalue ->_r 0x563644fc7d50
|       |   |             `-CXXThisExpr 0x563644fce658 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x563644fce7b0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x563644fce790 <col:54> 'int' 0
|       |   `-CallExpr 0x563644fcea20 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x563644fcea08 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x563644fce988 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563644d2da00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x563644fcea60 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x563644fce898 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x563644fcea78 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x563644fce8c8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x563644fcea90 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x563644fce900 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x563644fceaa8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x563644fce970 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x563644fce958 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x563644fce920 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x563644fcee40 <line:274:6, line:275:22>
|       | |-CallExpr 0x563644fced00 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x563644fcece8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x563644fcec60 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x563644fb7e10 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x563644fcec30 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x563644fc75a8
|       | |   `-ImplicitCastExpr 0x563644fcec18 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x563644fcebe8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x563644fc7cd8
|       | |       `-MemberExpr 0x563644fcebb8 <col:40> 'String::rep_t' lvalue ->_r 0x563644fc7d50
|       | |         `-CXXThisExpr 0x563644fceba8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x563644fcee00 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x563644fcede8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x563644fced28 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x563644fccc80 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x563644fcee28 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x563644fced88 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x563644fc7cd8
|       |       `-MemberExpr 0x563644fced58 <col:15> 'String::rep_t' lvalue ->_r 0x563644fc7d50
|       |         `-CXXThisExpr 0x563644fced48 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x563644fcef00 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x563644fcee98 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x563644fc7cd8
|         | `-MemberExpr 0x563644fcee68 <col:6> 'String::rep_t' lvalue ->_r 0x563644fc7d50
|         |   `-CXXThisExpr 0x563644fcee58 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x563644fceee8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x563644fceec8 <col:16> 'int' 0
|-CXXMethodDecl 0x563644fc8738 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x563644fc8558 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x563644fc85d8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x563644fc8650 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x563644fc8810 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x563644fc8a60 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x563644fc88c8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x563644fc8948 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x563644fc89c0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x563644fc8c48 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x563644fc8b30 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x563644fc8bb0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x563644fc8d48 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x563644fcf038 <col:41, line:286:5>
|   `-ReturnStmt 0x563644fcf028 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x563644fceff8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x563644fcefc0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x563644fcefa8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x563644fcef88 <col:46> 'int' 1
|-CXXMethodDecl 0x563644fc8fe8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x563644fc8e00 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x563644fc8e80 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x563644fc8f00 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x563644fccc80 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x563644fc90b0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x563644fccd50 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x563644fccf20 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x563644fcce08 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x563644fcce88 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x563644fccfe0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x563644fcd0a8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x563644fcd1a8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x563644fcd220 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x563644fcd298 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x563644fcd300 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x563644fcd400 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x563644fcd450 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563644fcd3e0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x563644fcd3c0 <col:22> 'int' 14
|-CXXMethodDecl 0x563644fcd668 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x563644fcd480 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x563644fcd500 <col:38> col:41 'int'
| `-ParmVarDecl 0x563644fcd580 <col:43> col:46 'int'
|-FriendDecl 0x563644fcd770 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x563644fcd800 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x563645259500 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x5636452596d8 prev 0x563645259500 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x563645259768 <col:46, col:52> col:46 public
|-TypedefDecl 0x563645259790 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563644c8d370 'int'
|-TypedefDecl 0x56364525b0f0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x56364525b0a0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x56364525b080 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x5636452599a8 'type'
|     `-SubstTemplateTypeParmType 0x563645259970 'String' sugar
|       |-TemplateTypeParmType 0x563644f81fe0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f81f90 'T'
|       `-RecordType 0x563644fbe9f0 'String'
|         `-CXXRecord 0x563644fbe960 'String'
|-TypedefDecl 0x56364525b1a8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x56364525b170 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x56364525b150 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x56364525b0f0 'type'
|     `-ElaboratedType 0x56364525b0a0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x56364525b080 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x5636452599a8 'type'
|         `-SubstTemplateTypeParmType 0x563645259970 'String' sugar
|           |-TemplateTypeParmType 0x563644f81fe0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x563644f81f90 'T'
|           `-RecordType 0x563644fbe9f0 'String'
|             `-CXXRecord 0x563644fbe960 'String'
|-CXXMethodDecl 0x56364525b328 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x56364525b238 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x56364525b418 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x56364525b4f8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x56364525b4f8
|-CXXMethodDecl 0x56364525b7c8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x56364525b6d0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x56364525ba08 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56364525b880 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56364525b8f8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56364525bbd8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56364525bac8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56364525bb40 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56364525bd38 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x56364525be08 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x56364525c058 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56364525bec8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x56364525bf40 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56364525c2b8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x56364525c128 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x56364525c1a0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56364525c478 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x56364525c388 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56364525c638 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x56364525c540 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56364525c6f0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56364525c7a0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56364525c9d8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56364525c850 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56364525c8c8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56364525cc78 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x56364525cb80 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x56364525cd40 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x56364525cd90 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56364525cde0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5636451f9370 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x563645257f68 prev 0x5636451f9370 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x563645259470 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x563645259420 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x563645259400 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5636452592b0 'type'
|     `-SubstTemplateTypeParmType 0x563645259140 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x563644f57d90 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x563644f57d38 'F'
|       `-RecordType 0x563645258da0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x563645258cc0 'typed_array_memory'
|-FieldDecl 0x56364525ce30 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x56364525ce80 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56364525ceb8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x563645258000 'String' sugar
|   |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x563644f8f2a8 'T'
|   `-RecordType 0x563644fbe9f0 'String'
|     `-CXXRecord 0x563644fbe960 'String'
|-TypedefDecl 0x56364525cf48 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x56364525cf10 'String &'
|   `-SubstTemplateTypeParmType 0x563645258000 'String' sugar
|     |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563644f8f2a8 'T'
|     `-RecordType 0x563644fbe9f0 'String'
|       `-CXXRecord 0x563644fbe960 'String'
|-TypedefDecl 0x56364525cfd8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x56364525cfa0 'const String &'
|   `-QualType 0x563645258001 'const String' const
|     `-SubstTemplateTypeParmType 0x563645258000 'String' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-RecordType 0x563644fbe9f0 'String'
|         `-CXXRecord 0x563644fbe960 'String'
|-TypedefDecl 0x56364525d068 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x56364525d030 'String *'
|   `-SubstTemplateTypeParmType 0x563645258000 'String' sugar
|     |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563644f8f2a8 'T'
|     `-RecordType 0x563644fbe9f0 'String'
|       `-CXXRecord 0x563644fbe960 'String'
|-TypedefDecl 0x56364525d0f8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x56364525d0c0 'const String *'
|   `-QualType 0x563645258001 'const String' const
|     `-SubstTemplateTypeParmType 0x563645258000 'String' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-RecordType 0x563644fbe9f0 'String'
|         `-CXXRecord 0x563644fbe960 'String'
|-TypedefDecl 0x56364525dd70 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x56364525dd20 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x56364525dd00 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x56364525dc18 'type'
|     `-LValueReferenceType 0x56364525dbe0 'const String &'
|       `-QualType 0x56364525d981 'const String' const
|         `-SubstTemplateTypeParmType 0x56364525d980 'String' sugar
|           |-TemplateTypeParmType 0x563644f61ce0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x563644f61c88 'T'
|           `-RecordType 0x563644fbe9f0 'String'
|             `-CXXRecord 0x563644fbe960 'String'
|-TypedefDecl 0x56364525ddd8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x56364525cfa0 'const String &'
|   `-QualType 0x563645258001 'const String' const
|     `-SubstTemplateTypeParmType 0x563645258000 'String' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-RecordType 0x563644fbe9f0 'String'
|         `-CXXRecord 0x563644fbe960 'String'
|-TypedefDecl 0x56364525de30 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563644c8d370 'int'
|-TypedefDecl 0x56364525de98 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x56364525d030 'String *'
|   `-SubstTemplateTypeParmType 0x563645258000 'String' sugar
|     |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563644f8f2a8 'T'
|     `-RecordType 0x563644fbe9f0 'String'
|       `-CXXRecord 0x563644fbe960 'String'
|-TypedefDecl 0x56364525df00 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x56364525d0c0 'const String *'
|   `-QualType 0x563645258001 'const String' const
|     `-SubstTemplateTypeParmType 0x563645258000 'String' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-RecordType 0x563644fbe9f0 'String'
|         `-CXXRecord 0x563644fbe960 'String'
|-EnumDecl 0x56364525df58 <line:134:5> col:5
| `-EnumConstantDecl 0x56364525e050 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56364525e030 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x563644f90ba8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x563644f90b80 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x563644f90b60 <col:40> 'int' 1
|-CXXConstructorDecl 0x56364525e0d8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56364525e368 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56364525e190 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56364525e230 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x56364525e5f8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x56364525e4e0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x56364525e8b8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x56364525e7a0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x56364525ebd0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x56364525eab0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x56364525eee0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x56364525edc0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x56364525f1d0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56364525f018 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56364525f090 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56364525f2f8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x56364525f3a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56364525f400 <col:30> Inherited
|-CXXMethodDecl 0x56364525f448 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x56364525f4f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56364525f550 <col:30> Inherited
|-CXXMethodDecl 0x56364525f618 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56364525f6c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56364525f720 <col:30> Inherited
|-CXXMethodDecl 0x56364525f768 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56364525f818 <col:20> Inherited
| `-OptimizeNoneAttr 0x56364525f870 <col:30> Inherited
|-CXXMethodDecl 0x56364525f8b8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56364525f968 <col:20> Inherited
| `-OptimizeNoneAttr 0x56364525f9c0 <col:30> Inherited
|-CXXMethodDecl 0x56364525fa08 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56364525fab8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56364525fb10 <col:30> Inherited
|-CXXMethodDecl 0x56364525fb38 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56364525fbe8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56364525fc98 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x56364525fe58 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56364525fd48 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56364525fdc0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56364525ffa8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56364525ff18 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x563645260158 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x563645260060 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x563645260210 <col:20>
| `-OptimizeNoneAttr 0x563645260268 <col:30>
|-CXXMethodDecl 0x563645260388 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x563645260290 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x563645260440 <col:20>
| `-OptimizeNoneAttr 0x563645260498 <col:30>
|-CXXMethodDecl 0x563645260550 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5636452604c0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563645260698 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x563645260608 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5636452607c8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x5636452608c8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x563645260998 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x563645260a68 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x563645260ba8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x563645260b18 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563645260cf0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x563645260c60 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563645260e38 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x563645260da8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x563645260ef0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x563645260ff0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x563645260f60 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5636452610a8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x563645261168 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x563645261268 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x5636452613e8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x563645261328 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x563645261ba8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5636452614a0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x563645261b08 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x563645261a08 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x563645261c88 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x563645261dd8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x563645261d48 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x563645261e90 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5636452620d8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x563645261f50 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x563645261fc8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x563645262268 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x5636452621a8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x563645262478 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x563645262330 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5636452623a8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x563645262538 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x563645262798 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x5636452626a0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x563645262868 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x563645262868

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x563645298b20 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x563645298cf8 prev 0x563645298b20 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x563645298d88 <col:46, col:52> col:46 public
|-TypedefDecl 0x563645298db0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563644c8d370 'int'
|-TypedefDecl 0x56364529a980 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x56364529a930 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x563645299260 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x563645299160 'type'
|     `-TemplateSpecializationType 0x5636452990f0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x563645298fd0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x563645298fb0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x563645298f90 <col:24> 'unsigned long' 4
|       `-RecordType 0x5636452990d0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x563645298ff0 'char_array'
|-TypedefDecl 0x56364529aa38 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x56364529aa00 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x56364529a9e0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x56364529a980 'type'
|     `-ElaboratedType 0x56364529a930 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x563645299260 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x563645299160 'type'
|         `-TemplateSpecializationType 0x5636452990f0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x563645298fd0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x563645298fb0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x563645298f90 <col:24> 'unsigned long' 4
|           `-RecordType 0x5636452990d0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x563645298ff0 'char_array'
|-CXXMethodDecl 0x56364529abb8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x56364529aac8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x56364529aca8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x56364529ad88 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x56364529ad88
|-CXXMethodDecl 0x56364529b058 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x56364529af60 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x56364529b298 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56364529b110 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56364529b188 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56364529b468 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56364529b358 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56364529b3d0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56364529b5c8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x56364529b698 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x56364529b8e8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56364529b758 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x56364529b7d0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56364529bb48 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x56364529b9b8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x56364529ba30 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56364529bd08 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x56364529bc18 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56364529bec8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x56364529bdd0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56364529bf80 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56364529c030 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56364529c268 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56364529c0e0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56364529c158 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56364529c508 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x56364529c410 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x56364529c5d0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x56364529c620 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56364529c670 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.3 = type { %struct.char_array.4*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.3 = type { %struct.char_array.4*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x563645370e40 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x563645371048 prev 0x563645370e40 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x563645372060 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<unsigned int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x563645372010 'typename array_memory<unsigned int>::type' sugar
|   `-TypedefType 0x563645371ff0 'conditional<true, sized_array_memory<4>, typed_array_memory<unsigned int> >::type' sugar
|     |-Typedef 0x563645371ea0 'type'
|     `-SubstTemplateTypeParmType 0x5636452986f0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x563644f57610 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f575b8 'T'
|       `-RecordType 0x563645298240 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x563645298158 'sized_array_memory'
|-FieldDecl 0x563645372160 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<unsigned int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x5636453721b0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5636453721e8 <line:118:5, col:15> col:15 value_type 'unsigned int':'unsigned int'
| `-SubstTemplateTypeParmType 0x5636453710e0 'unsigned int' sugar
|   |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x563644f8f2a8 'T'
|   `-BuiltinType 0x563644c8d410 'unsigned int'
|-TypedefDecl 0x563645372278 <line:119:5, col:16> col:16 reference 'unsigned int &'
| `-LValueReferenceType 0x563645372240 'unsigned int &'
|   `-SubstTemplateTypeParmType 0x5636453710e0 'unsigned int' sugar
|     |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563644f8f2a8 'T'
|     `-BuiltinType 0x563644c8d410 'unsigned int'
|-TypedefDecl 0x563645372338 <line:120:5, col:22> col:22 const_reference 'const unsigned int &'
| `-LValueReferenceType 0x563645372300 'const unsigned int &'
|   `-QualType 0x5636453710e1 'const unsigned int' const
|     `-SubstTemplateTypeParmType 0x5636453710e0 'unsigned int' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-BuiltinType 0x563644c8d410 'unsigned int'
|-TypedefDecl 0x5636453723c8 <line:121:5, col:16> col:16 pointer 'unsigned int *'
| `-PointerType 0x563645372390 'unsigned int *'
|   `-SubstTemplateTypeParmType 0x5636453710e0 'unsigned int' sugar
|     |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563644f8f2a8 'T'
|     `-BuiltinType 0x563644c8d410 'unsigned int'
|-TypedefDecl 0x563645372458 <line:122:5, col:22> col:22 const_pointer 'const unsigned int *'
| `-PointerType 0x563645372420 'const unsigned int *'
|   `-QualType 0x5636453710e1 'const unsigned int' const
|     `-SubstTemplateTypeParmType 0x5636453710e0 'unsigned int' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-BuiltinType 0x563644c8d410 'unsigned int'
|-TypedefDecl 0x563645373040 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<unsigned int>::type':'unsigned int'
| `-ElaboratedType 0x563645372ff0 'typename fast_argument<unsigned int>::type' sugar
|   `-TypedefType 0x563645372fd0 'fast_argument<unsigned int, false>::type' sugar
|     |-Typedef 0x563645372f60 'type'
|     `-SubstTemplateTypeParmType 0x563645372d20 'unsigned int' sugar
|       |-TemplateTypeParmType 0x563644f62410 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f623c0 'T'
|       `-BuiltinType 0x563644c8d410 'unsigned int'
|-TypedefDecl 0x5636453730a8 <line:126:5, col:22> col:22 const_access_type 'const unsigned int &'
| `-LValueReferenceType 0x563645372300 'const unsigned int &'
|   `-QualType 0x5636453710e1 'const unsigned int' const
|     `-SubstTemplateTypeParmType 0x5636453710e0 'unsigned int' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-BuiltinType 0x563644c8d410 'unsigned int'
|-TypedefDecl 0x563645373100 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563644c8d370 'int'
|-TypedefDecl 0x563645373168 <line:130:5, col:16> col:16 iterator 'unsigned int *'
| `-PointerType 0x563645372390 'unsigned int *'
|   `-SubstTemplateTypeParmType 0x5636453710e0 'unsigned int' sugar
|     |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563644f8f2a8 'T'
|     `-BuiltinType 0x563644c8d410 'unsigned int'
|-TypedefDecl 0x5636453731d0 <line:131:5, col:22> col:22 const_iterator 'const unsigned int *'
| `-PointerType 0x563645372420 'const unsigned int *'
|   `-QualType 0x5636453710e1 'const unsigned int' const
|     `-SubstTemplateTypeParmType 0x5636453710e0 'unsigned int' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-BuiltinType 0x563644c8d410 'unsigned int'
|-EnumDecl 0x563645373228 <line:134:5> col:5
| `-EnumConstantDecl 0x563645373320 <col:12, col:40> col:12 RESERVE_GROW 'Vector<unsigned int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x563645373300 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x563644f90ba8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x563644f90b80 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x563644f90b60 <col:40> 'int' 1
|-CXXConstructorDecl 0x5636453733a8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5636453735f8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<unsigned int>::value_argument_type)' inline
| |-ParmVarDecl 0x563645373460 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x563645373500 <col:41, col:61> col:61 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-CXXConstructorDecl 0x5636453738b8 <line:139:5, col:37> col:12 Vector 'void (const Vector<unsigned int> &)' inline
| `-ParmVarDecl 0x5636453737a0 <col:19, col:36> col:36 x 'const Vector<unsigned int> &'
|-CXXConstructorDecl 0x563645373b78 <line:141:5, col:32> col:12 Vector 'void (Vector<unsigned int> &&)' inline
| `-ParmVarDecl 0x563645373a60 <col:19, col:31> col:31 x 'Vector<unsigned int> &&'
|-CXXMethodDecl 0x563645373ec0 <line:144:5, col:51> col:23 operator= 'Vector<unsigned int> &(const Vector<unsigned int> &)' inline
| `-ParmVarDecl 0x563645373da0 <col:33, col:50> col:50 x 'const Vector<unsigned int> &'
|-CXXMethodDecl 0x5636453741d0 <line:146:5, col:46> col:23 operator= 'Vector<unsigned int> &(Vector<unsigned int> &&)' inline
| `-ParmVarDecl 0x5636453740b0 <col:33, col:45> col:45 x 'Vector<unsigned int> &&'
|-CXXMethodDecl 0x5636453744c0 <line:148:5, col:70> col:23 assign 'Vector<unsigned int> &(Vector::size_type, Vector<unsigned int>::value_argument_type)' inline
| |-ParmVarDecl 0x563645374308 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x563645374380 <col:43, col:69> col:63 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-CXXMethodDecl 0x5636453745e8 <line:150:5, col:55> col:49 begin 'Vector<unsigned int>::iterator ()'
| |-NoInlineAttr 0x5636453746c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x563645374720 <col:30> Inherited
|-CXXMethodDecl 0x563645374768 <line:151:5, col:53> col:49 end 'Vector<unsigned int>::iterator ()'
| |-NoInlineAttr 0x563645374818 <col:20> Inherited
| `-OptimizeNoneAttr 0x563645374870 <col:30> Inherited
|-CXXMethodDecl 0x563645374908 <line:152:5, col:63> col:55 begin 'Vector<unsigned int>::const_iterator () const'
| |-NoInlineAttr 0x5636453749b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x563645374a10 <col:30> Inherited
|-CXXMethodDecl 0x563645374a58 <line:153:5, col:61> col:55 end 'Vector<unsigned int>::const_iterator () const'
| |-NoInlineAttr 0x563645374b08 <col:20> Inherited
| `-OptimizeNoneAttr 0x563645374b60 <col:30> Inherited
|-CXXMethodDecl 0x563645374ba8 <line:154:5, col:64> col:55 cbegin 'Vector<unsigned int>::const_iterator () const'
| |-NoInlineAttr 0x563645374c58 <col:20> Inherited
| `-OptimizeNoneAttr 0x563645374cb0 <col:30> Inherited
|-CXXMethodDecl 0x563645374cf8 <line:155:5, col:62> col:55 cend 'Vector<unsigned int>::const_iterator () const'
| |-NoInlineAttr 0x563645374da8 <col:20> Inherited
| `-OptimizeNoneAttr 0x563645374e00 <col:30> Inherited
|-CXXMethodDecl 0x563645374e28 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x563645374ed8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x563645374f88 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x563645375148 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<unsigned int>::value_argument_type)' inline
| |-ParmVarDecl 0x563645375038 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5636453750b0 <col:37, col:63> col:57 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-CXXMethodDecl 0x563645375298 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x563645375208 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x563645375448 <line:163:5, col:65> col:43 operator[] 'unsigned int &(Vector::size_type)'
| |-ParmVarDecl 0x563645375350 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x563645375500 <col:20>
| `-OptimizeNoneAttr 0x563645375558 <col:30>
|-CXXMethodDecl 0x563645375678 <line:164:5, col:73> col:49 operator[] 'const unsigned int &(Vector::size_type) const'
| |-ParmVarDecl 0x563645375580 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x563645375730 <col:20>
| `-OptimizeNoneAttr 0x563645375788 <col:30>
|-CXXMethodDecl 0x563645375840 <line:165:5, col:29> col:15 at 'unsigned int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5636453757b0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563645375988 <line:166:5, col:37> col:21 at 'const unsigned int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5636453758f8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563645375ab8 <line:167:5, col:21> col:15 front 'unsigned int &()' inline
|-CXXMethodDecl 0x563645375be8 <line:168:5, col:29> col:21 front 'const unsigned int &() const' inline
|-CXXMethodDecl 0x563645375cb8 <line:169:5, col:20> col:15 back 'unsigned int &()' inline
|-CXXMethodDecl 0x563645375d88 <line:170:5, col:28> col:21 back 'const unsigned int &() const' inline
|-CXXMethodDecl 0x563645375ec8 <line:172:5, col:39> col:15 unchecked_at 'unsigned int &(Vector::size_type)' inline
| `-ParmVarDecl 0x563645375e38 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563645376010 <line:173:5, col:47> col:21 unchecked_at 'const unsigned int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x563645375f80 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563645377340 <line:174:5, col:59> col:15 at_u 'unsigned int &(Vector::size_type)' inline
| |-ParmVarDecl 0x5636453772b0 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5636453773f8 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5636453774f8 <line:175:5, col:71> col:21 at_u 'const unsigned int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x563645377468 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5636453775b0 <col:60> Inherited "" ""
|-CXXMethodDecl 0x563645377668 <line:177:5, col:20> col:15 data 'unsigned int *()' inline
|-CXXMethodDecl 0x563645377768 <line:178:5, col:28> col:21 data 'const unsigned int *() const' inline
|-CXXMethodDecl 0x5636453778e8 <line:180:5, col:48> col:17 push_back 'void (Vector<unsigned int>::value_argument_type)' inline
| `-ParmVarDecl 0x563645377828 <col:27, col:47> col:47 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-FunctionTemplateDecl 0x5636453780a8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5636453779a0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<unsigned int>':'fast_argument<unsigned int, false>'
| `-CXXMethodDecl 0x563645378008 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (unsigned int &&)' inline
|   `-ParmVarDecl 0x563645377f08 <col:58, col:62> col:62 v 'unsigned int &&'
|-CXXMethodDecl 0x563645378188 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5636453782d8 <line:186:5, col:49> col:17 push_front 'void (Vector<unsigned int>::value_argument_type)' inline
| `-ParmVarDecl 0x563645378248 <col:28, col:48> col:48 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-CXXMethodDecl 0x563645378390 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5636453785d8 <line:189:5, col:62> col:21 insert 'Vector<unsigned int>::iterator (Vector<unsigned int>::iterator, Vector<unsigned int>::value_argument_type)' inline
| |-ParmVarDecl 0x563645378450 <col:28, col:37> col:37 it 'Vector<unsigned int>::iterator':'unsigned int *'
| `-ParmVarDecl 0x5636453784c8 <col:41, col:61> col:61 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-CXXMethodDecl 0x563645378798 <line:190:5, col:38> col:21 erase 'Vector<unsigned int>::iterator (Vector<unsigned int>::iterator)' inline
| `-ParmVarDecl 0x5636453786a8 <col:27, col:36> col:36 it 'Vector<unsigned int>::iterator':'unsigned int *'
|-CXXMethodDecl 0x5636453789e8 <line:191:5, col:49> col:21 erase 'Vector<unsigned int>::iterator (Vector<unsigned int>::iterator, Vector<unsigned int>::iterator)' inline
| |-ParmVarDecl 0x563645378860 <col:27, col:36> col:36 a 'Vector<unsigned int>::iterator':'unsigned int *'
| `-ParmVarDecl 0x5636453788d8 <col:39, col:48> col:48 b 'Vector<unsigned int>::iterator':'unsigned int *'
|-CXXMethodDecl 0x563645378aa8 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x563645378d08 <line:195:5, col:34> col:17 swap 'void (Vector<unsigned int> &)' inline
| `-ParmVarDecl 0x563645378c10 <col:22, col:33> col:33 x 'Vector<unsigned int> &'
`-CXXDestructorDecl 0x563645378dd8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x563645378dd8

Layout: <CGRecordLayout
  LLVMType:%class.Vector.2 = type { %class.vector_memory.3 }
  NonVirtualBaseLLVMType:%class.Vector.2 = type { %class.vector_memory.3 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x563645297528 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x563645297738 prev 0x563645297528 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x563645298a90 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x563645298a40 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x563645298a20 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x5636452988d0 'type'
|     `-SubstTemplateTypeParmType 0x5636452986f0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x563644f57610 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f575b8 'T'
|       `-RecordType 0x563645298240 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x563645298158 'sized_array_memory'
|-FieldDecl 0x56364529c6c0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x56364529c710 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56364529c748 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x5636452977d0 'int' sugar
|   |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x563644f8f2a8 'T'
|   `-BuiltinType 0x563644c8d370 'int'
|-TypedefDecl 0x56364529c7d8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x56364529c7a0 'int &'
|   `-SubstTemplateTypeParmType 0x5636452977d0 'int' sugar
|     |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563644f8f2a8 'T'
|     `-BuiltinType 0x563644c8d370 'int'
|-TypedefDecl 0x56364529c898 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x56364529c860 'const int &'
|   `-QualType 0x5636452977d1 'const int' const
|     `-SubstTemplateTypeParmType 0x5636452977d0 'int' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-BuiltinType 0x563644c8d370 'int'
|-TypedefDecl 0x56364529c928 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x56364529c8f0 'int *'
|   `-SubstTemplateTypeParmType 0x5636452977d0 'int' sugar
|     |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563644f8f2a8 'T'
|     `-BuiltinType 0x563644c8d370 'int'
|-TypedefDecl 0x56364529c9b8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x56364529c980 'const int *'
|   `-QualType 0x5636452977d1 'const int' const
|     `-SubstTemplateTypeParmType 0x5636452977d0 'int' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-BuiltinType 0x563644c8d370 'int'
|-TypedefDecl 0x56364529d5a0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x56364529d550 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x56364529d530 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x56364529d4c0 'type'
|     `-SubstTemplateTypeParmType 0x56364529d280 'int' sugar
|       |-TemplateTypeParmType 0x563644f62410 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f623c0 'T'
|       `-BuiltinType 0x563644c8d370 'int'
|-TypedefDecl 0x56364529d608 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x56364529c860 'const int &'
|   `-QualType 0x5636452977d1 'const int' const
|     `-SubstTemplateTypeParmType 0x5636452977d0 'int' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-BuiltinType 0x563644c8d370 'int'
|-TypedefDecl 0x56364529d660 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563644c8d370 'int'
|-TypedefDecl 0x56364529d6c8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x56364529c8f0 'int *'
|   `-SubstTemplateTypeParmType 0x5636452977d0 'int' sugar
|     |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563644f8f2a8 'T'
|     `-BuiltinType 0x563644c8d370 'int'
|-TypedefDecl 0x56364529d730 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x56364529c980 'const int *'
|   `-QualType 0x5636452977d1 'const int' const
|     `-SubstTemplateTypeParmType 0x5636452977d0 'int' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-BuiltinType 0x563644c8d370 'int'
|-EnumDecl 0x56364529d788 <line:134:5> col:5
| `-EnumConstantDecl 0x56364529d880 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56364529d860 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x563644f90ba8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x563644f90b80 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x563644f90b60 <col:40> 'int' 1
|-CXXConstructorDecl 0x56364529d908 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56364529db58 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56364529d9c0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56364529da60 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x56364529de18 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x56364529dd00 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x5636452a1c18 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x56364529dfc0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x5636452a1f60 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x5636452a1e40 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x5636452a2270 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x5636452a2150 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x5636452a2560 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5636452a23a8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5636452a2420 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5636452a2688 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5636452a2768 <col:20> Inherited
| `-OptimizeNoneAttr 0x5636452a27c0 <col:30> Inherited
|-CXXMethodDecl 0x5636452a2808 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5636452a28b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5636452a2910 <col:30> Inherited
|-CXXMethodDecl 0x5636452a29d8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5636452a2a88 <col:20> Inherited
| `-OptimizeNoneAttr 0x5636452a2ae0 <col:30> Inherited
|-CXXMethodDecl 0x5636452a2b28 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5636452a2bd8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5636452a2c30 <col:30> Inherited
|-CXXMethodDecl 0x5636452a2c78 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5636452a2d28 <col:20> Inherited
| `-OptimizeNoneAttr 0x5636452a2d80 <col:30> Inherited
|-CXXMethodDecl 0x5636452a2dc8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5636452a2e78 <col:20> Inherited
| `-OptimizeNoneAttr 0x5636452a2ed0 <col:30> Inherited
|-CXXMethodDecl 0x5636452a2ef8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5636452a2fa8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5636452a3058 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5636452a3218 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5636452a3108 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5636452a3180 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5636452a3368 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5636452a32d8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5636452a3518 <line:163:5, col:65> col:43 used operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x5636452a3420 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5636452a35d0 <col:20>
| `-OptimizeNoneAttr 0x5636452a3628 <col:30>
|-CXXMethodDecl 0x5636452a3748 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x5636452a3650 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5636452a3800 <col:20>
| `-OptimizeNoneAttr 0x5636452a3858 <col:30>
|-CXXMethodDecl 0x5636452a3910 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5636452a3880 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5636452a3a58 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5636452a39c8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5636452a3b88 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x5636452a3cb8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x5636452a3d88 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x5636452a3e58 <line:170:5, col:28> col:21 used back 'const int &() const' inline
|-CXXMethodDecl 0x5636452a3f98 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5636452a3f08 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5636452a40e0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5636452a4050 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5636452a4228 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x5636452a4198 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5636452a42e0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5636452a43e0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5636452a4350 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5636452a4498 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5636452a4558 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x5636452a4658 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x5636452a47d8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5636452a4718 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x5636452a4f98 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5636452a4890 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x5636452a4ef8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x5636452a4df8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x5636452a5078 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5636452a51c8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5636452a5138 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5636452a5280 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5636452a54c8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5636452a5340 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5636452a53b8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5636452a5688 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x5636452a5598 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5636452a58d8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x5636452a5750 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5636452a57c8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5636452a5998 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5636452a5bf8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x5636452a5b00 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x5636452a5cc8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5636452a5cc8

Layout: <CGRecordLayout
  LLVMType:%class.Vector.5 = type { %class.vector_memory.3 }
  NonVirtualBaseLLVMType:%class.Vector.5 = type { %class.vector_memory.3 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563645379020 <../dummy_inc/click/router.hh:247:5, line:250:5> line:247:12 referenced struct element_landmark_t definition
|-DefinitionData aggregate standard_layout has_mutable_fields
| |-DefaultConstructor exists non_trivial needs_implicit
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-CXXRecordDecl 0x563645379138 <col:5, col:12> col:12 implicit struct element_landmark_t
|-FieldDecl 0x5636453791d8 <line:248:9, col:18> col:18 first_landmarkid 'uint32_t':'unsigned int'
|-FieldDecl 0x563645379238 <line:249:9, col:16> col:16 filename 'String'
|-CXXConstructorDecl 0x5636453792d0 <line:247:12> col:12 implicit element_landmark_t 'void (const Router::element_landmark_t &)' inline default noexcept-unevaluated 0x5636453792d0
| `-ParmVarDecl 0x5636453793e8 <col:12> col:12 'const Router::element_landmark_t &'
|-CXXConstructorDecl 0x563645379488 <col:12> col:12 implicit element_landmark_t 'void (Router::element_landmark_t &&)' inline default noexcept-unevaluated 0x563645379488
| `-ParmVarDecl 0x563645379598 <col:12> col:12 'Router::element_landmark_t &&'
|-CXXMethodDecl 0x563645379638 <col:12> col:12 implicit operator= 'Router::element_landmark_t &(const Router::element_landmark_t &)' inline default noexcept-unevaluated 0x563645379638
| `-ParmVarDecl 0x563645379748 <col:12> col:12 'const Router::element_landmark_t &'
|-CXXMethodDecl 0x5636453797b8 <col:12> col:12 implicit operator= 'Router::element_landmark_t &(Router::element_landmark_t &&)' inline default noexcept-unevaluated 0x5636453797b8
| `-ParmVarDecl 0x5636453798c8 <col:12> col:12 'Router::element_landmark_t &&'
`-CXXDestructorDecl 0x563645379950 <col:12> col:12 implicit ~element_landmark_t 'void ()' inline default noexcept-unevaluated 0x563645379950

Layout: <CGRecordLayout
  LLVMType:%"struct.Router::element_landmark_t" = type { i32, %class.String }
  NonVirtualBaseLLVMType:%"struct.Router::element_landmark_t" = type { i32, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56364537aee0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<Router::element_landmark_t>'
|-CXXRecordDecl 0x56364537b0b8 prev 0x56364537aee0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x56364537b148 <col:46, col:52> col:46 public
|-TypedefDecl 0x56364537b170 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563644c8d370 'int'
|-TypedefDecl 0x56364537cb30 <line:13:5, col:31> col:31 type 'typename typed_array_memory<element_landmark_t>::type':'Router::element_landmark_t'
| `-ElaboratedType 0x56364537cae0 'typename typed_array_memory<element_landmark_t>::type' sugar
|   `-TypedefType 0x56364537cac0 'typed_array_memory<Router::element_landmark_t>::type' sugar
|     |-Typedef 0x56364537b388 'type'
|     `-SubstTemplateTypeParmType 0x56364537b350 'Router::element_landmark_t' sugar
|       |-TemplateTypeParmType 0x563644f81fe0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f81f90 'T'
|       `-RecordType 0x5636453790b0 'Router::element_landmark_t'
|         `-CXXRecord 0x563645379020 'element_landmark_t'
|-TypedefDecl 0x56364537cbe8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
| `-PointerType 0x56364537cbb0 'vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|   `-TypedefType 0x56364537cb90 'vector_memory<typed_array_memory<Router::element_landmark_t> >::type' sugar
|     |-Typedef 0x56364537cb30 'type'
|     `-ElaboratedType 0x56364537cae0 'typename typed_array_memory<element_landmark_t>::type' sugar
|       `-TypedefType 0x56364537cac0 'typed_array_memory<Router::element_landmark_t>::type' sugar
|         |-Typedef 0x56364537b388 'type'
|         `-SubstTemplateTypeParmType 0x56364537b350 'Router::element_landmark_t' sugar
|           |-TemplateTypeParmType 0x563644f81fe0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x563644f81f90 'T'
|           `-RecordType 0x5636453790b0 'Router::element_landmark_t'
|             `-CXXRecord 0x563645379020 'element_landmark_t'
|-CXXMethodDecl 0x56364537cd68 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *) const' inline
| `-ParmVarDecl 0x56364537cc78 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-CXXConstructorDecl 0x56364537ce58 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x56364537cf38 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x56364537cf38
|-CXXMethodDecl 0x56364537d208 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<Router::element_landmark_t> > &)'
| `-ParmVarDecl 0x56364537d110 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<Router::element_landmark_t> > &'
|-CXXMethodDecl 0x56364537d448 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *)'
| |-ParmVarDecl 0x56364537d2c0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56364537d338 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-CXXMethodDecl 0x56364537d618 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *)'
| |-ParmVarDecl 0x56364537d508 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56364537d580 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-CXXMethodDecl 0x56364537d778 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator ()'
|-CXXMethodDecl 0x56364537d848 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator ()'
|-CXXMethodDecl 0x56364537da98 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator (vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator, const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *)'
| |-ParmVarDecl 0x56364537d908 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator':'vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
| `-ParmVarDecl 0x56364537d980 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-CXXMethodDecl 0x56364537dcf8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator (vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator, vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator)'
| |-ParmVarDecl 0x56364537db68 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator':'vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
| `-ParmVarDecl 0x56364537dbe0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<Router::element_landmark_t> >::iterator':'vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-CXXMethodDecl 0x56364537deb8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *)' inline
| `-ParmVarDecl 0x56364537ddc8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-CXXMethodDecl 0x56364537e078 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<Router::element_landmark_t> >::type *)' inline
| `-ParmVarDecl 0x56364537df80 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-CXXMethodDecl 0x56364537e130 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56364537e1e0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56364537e418 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *)'
| |-ParmVarDecl 0x56364537e290 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56364537e308 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-CXXMethodDecl 0x56364537e6b8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<Router::element_landmark_t> > &)'
| `-ParmVarDecl 0x56364537e5c0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<Router::element_landmark_t> > &'
|-FieldDecl 0x56364537e780 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<Router::element_landmark_t> >::type *'
|-FieldDecl 0x56364537e7d0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56364537e820 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.7 = type { %"struct.Router::element_landmark_t"*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.7 = type { %"struct.Router::element_landmark_t"*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x563645379a40 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'Router::element_landmark_t'
|-CXXRecordDecl 0x563645379c48 prev 0x563645379a40 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x56364537ae50 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<element_landmark_t>::type':'typed_array_memory<Router::element_landmark_t>'
| `-ElaboratedType 0x56364537ae00 'typename array_memory<element_landmark_t>::type' sugar
|   `-TypedefType 0x56364537ade0 'conditional<false, sized_array_memory<32>, typed_array_memory<Router::element_landmark_t> >::type' sugar
|     |-Typedef 0x56364537ac90 'type'
|     `-SubstTemplateTypeParmType 0x56364537ab20 'typed_array_memory<Router::element_landmark_t>' sugar
|       |-TemplateTypeParmType 0x563644f57d90 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x563644f57d38 'F'
|       `-RecordType 0x56364537a780 'typed_array_memory<Router::element_landmark_t>'
|         `-ClassTemplateSpecialization 0x56364537a6a0 'typed_array_memory'
|-FieldDecl 0x56364537e870 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<Router::element_landmark_t>::array_memory_type>':'vector_memory<typed_array_memory<Router::element_landmark_t> >' mutable
|-AccessSpecDecl 0x56364537e8c0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56364537e8f8 <line:118:5, col:15> col:15 value_type 'Router::element_landmark_t':'Router::element_landmark_t'
| `-SubstTemplateTypeParmType 0x563645379ce0 'Router::element_landmark_t' sugar
|   |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x563644f8f2a8 'T'
|   `-RecordType 0x5636453790b0 'Router::element_landmark_t'
|     `-CXXRecord 0x563645379020 'element_landmark_t'
|-TypedefDecl 0x56364537e988 <line:119:5, col:16> col:16 reference 'Router::element_landmark_t &'
| `-LValueReferenceType 0x56364537e950 'Router::element_landmark_t &'
|   `-SubstTemplateTypeParmType 0x563645379ce0 'Router::element_landmark_t' sugar
|     |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563644f8f2a8 'T'
|     `-RecordType 0x5636453790b0 'Router::element_landmark_t'
|       `-CXXRecord 0x563645379020 'element_landmark_t'
|-TypedefDecl 0x56364537ea18 <line:120:5, col:22> col:22 const_reference 'const Router::element_landmark_t &'
| `-LValueReferenceType 0x56364537e9e0 'const Router::element_landmark_t &'
|   `-QualType 0x563645379ce1 'const Router::element_landmark_t' const
|     `-SubstTemplateTypeParmType 0x563645379ce0 'Router::element_landmark_t' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-RecordType 0x5636453790b0 'Router::element_landmark_t'
|         `-CXXRecord 0x563645379020 'element_landmark_t'
|-TypedefDecl 0x56364537eaa8 <line:121:5, col:16> col:16 pointer 'Router::element_landmark_t *'
| `-PointerType 0x56364537ea70 'Router::element_landmark_t *'
|   `-SubstTemplateTypeParmType 0x563645379ce0 'Router::element_landmark_t' sugar
|     |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563644f8f2a8 'T'
|     `-RecordType 0x5636453790b0 'Router::element_landmark_t'
|       `-CXXRecord 0x563645379020 'element_landmark_t'
|-TypedefDecl 0x56364537eb38 <line:122:5, col:22> col:22 const_pointer 'const Router::element_landmark_t *'
| `-PointerType 0x56364537eb00 'const Router::element_landmark_t *'
|   `-QualType 0x563645379ce1 'const Router::element_landmark_t' const
|     `-SubstTemplateTypeParmType 0x563645379ce0 'Router::element_landmark_t' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-RecordType 0x5636453790b0 'Router::element_landmark_t'
|         `-CXXRecord 0x563645379020 'element_landmark_t'
|-TypedefDecl 0x563645381a10 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<element_landmark_t>::type':'const Router::element_landmark_t &'
| `-ElaboratedType 0x5636453819c0 'typename fast_argument<element_landmark_t>::type' sugar
|   `-TypedefType 0x5636453819a0 'fast_argument<Router::element_landmark_t, true>::type' sugar
|     |-Typedef 0x5636453818d8 'type'
|     `-LValueReferenceType 0x5636453818a0 'const Router::element_landmark_t &'
|       `-QualType 0x563645381641 'const Router::element_landmark_t' const
|         `-SubstTemplateTypeParmType 0x563645381640 'Router::element_landmark_t' sugar
|           |-TemplateTypeParmType 0x563644f61ce0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x563644f61c88 'T'
|           `-RecordType 0x5636453790b0 'Router::element_landmark_t'
|             `-CXXRecord 0x563645379020 'element_landmark_t'
|-TypedefDecl 0x563645381a78 <line:126:5, col:22> col:22 const_access_type 'const Router::element_landmark_t &'
| `-LValueReferenceType 0x56364537e9e0 'const Router::element_landmark_t &'
|   `-QualType 0x563645379ce1 'const Router::element_landmark_t' const
|     `-SubstTemplateTypeParmType 0x563645379ce0 'Router::element_landmark_t' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-RecordType 0x5636453790b0 'Router::element_landmark_t'
|         `-CXXRecord 0x563645379020 'element_landmark_t'
|-TypedefDecl 0x563645381ad0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563644c8d370 'int'
|-TypedefDecl 0x563645381b38 <line:130:5, col:16> col:16 iterator 'Router::element_landmark_t *'
| `-PointerType 0x56364537ea70 'Router::element_landmark_t *'
|   `-SubstTemplateTypeParmType 0x563645379ce0 'Router::element_landmark_t' sugar
|     |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563644f8f2a8 'T'
|     `-RecordType 0x5636453790b0 'Router::element_landmark_t'
|       `-CXXRecord 0x563645379020 'element_landmark_t'
|-TypedefDecl 0x563645381ba0 <line:131:5, col:22> col:22 const_iterator 'const Router::element_landmark_t *'
| `-PointerType 0x56364537eb00 'const Router::element_landmark_t *'
|   `-QualType 0x563645379ce1 'const Router::element_landmark_t' const
|     `-SubstTemplateTypeParmType 0x563645379ce0 'Router::element_landmark_t' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-RecordType 0x5636453790b0 'Router::element_landmark_t'
|         `-CXXRecord 0x563645379020 'element_landmark_t'
|-EnumDecl 0x563645381bf8 <line:134:5> col:5
| `-EnumConstantDecl 0x563645381cf0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<Router::element_landmark_t>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x563645381cd0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x563644f90ba8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x563644f90b80 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x563644f90b60 <col:40> 'int' 1
|-CXXConstructorDecl 0x563645381d78 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x563645382008 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<Router::element_landmark_t>::value_argument_type)' inline
| |-ParmVarDecl 0x563645381e30 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x563645381ed0 <col:41, col:61> col:61 v 'Vector<Router::element_landmark_t>::value_argument_type':'const Router::element_landmark_t &'
|-CXXConstructorDecl 0x5636453822c8 <line:139:5, col:37> col:12 Vector 'void (const Vector<Router::element_landmark_t> &)' inline
| `-ParmVarDecl 0x5636453821b0 <col:19, col:36> col:36 x 'const Vector<Router::element_landmark_t> &'
|-CXXConstructorDecl 0x563645382588 <line:141:5, col:32> col:12 Vector 'void (Vector<Router::element_landmark_t> &&)' inline
| `-ParmVarDecl 0x563645382470 <col:19, col:31> col:31 x 'Vector<Router::element_landmark_t> &&'
|-CXXMethodDecl 0x5636453828d0 <line:144:5, col:51> col:23 operator= 'Vector<Router::element_landmark_t> &(const Vector<Router::element_landmark_t> &)' inline
| `-ParmVarDecl 0x5636453827b0 <col:33, col:50> col:50 x 'const Vector<Router::element_landmark_t> &'
|-CXXMethodDecl 0x563645382be0 <line:146:5, col:46> col:23 operator= 'Vector<Router::element_landmark_t> &(Vector<Router::element_landmark_t> &&)' inline
| `-ParmVarDecl 0x563645382ac0 <col:33, col:45> col:45 x 'Vector<Router::element_landmark_t> &&'
|-CXXMethodDecl 0x563645382ed0 <line:148:5, col:70> col:23 assign 'Vector<Router::element_landmark_t> &(Vector::size_type, Vector<Router::element_landmark_t>::value_argument_type)' inline
| |-ParmVarDecl 0x563645382d18 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x563645382d90 <col:43, col:69> col:63 v 'Vector<Router::element_landmark_t>::value_argument_type':'const Router::element_landmark_t &'
|-CXXMethodDecl 0x563645382ff8 <line:150:5, col:55> col:49 begin 'Vector<Router::element_landmark_t>::iterator ()'
| |-NoInlineAttr 0x5636453830d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x563645383130 <col:30> Inherited
|-CXXMethodDecl 0x563645383178 <line:151:5, col:53> col:49 end 'Vector<Router::element_landmark_t>::iterator ()'
| |-NoInlineAttr 0x563645383228 <col:20> Inherited
| `-OptimizeNoneAttr 0x563645383280 <col:30> Inherited
|-CXXMethodDecl 0x563645383348 <line:152:5, col:63> col:55 begin 'Vector<Router::element_landmark_t>::const_iterator () const'
| |-NoInlineAttr 0x5636453833f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x563645383450 <col:30> Inherited
|-CXXMethodDecl 0x563645383498 <line:153:5, col:61> col:55 end 'Vector<Router::element_landmark_t>::const_iterator () const'
| |-NoInlineAttr 0x563645383548 <col:20> Inherited
| `-OptimizeNoneAttr 0x5636453835a0 <col:30> Inherited
|-CXXMethodDecl 0x5636453835e8 <line:154:5, col:64> col:55 cbegin 'Vector<Router::element_landmark_t>::const_iterator () const'
| |-NoInlineAttr 0x563645383698 <col:20> Inherited
| `-OptimizeNoneAttr 0x5636453836f0 <col:30> Inherited
|-CXXMethodDecl 0x563645383738 <line:155:5, col:62> col:55 cend 'Vector<Router::element_landmark_t>::const_iterator () const'
| |-NoInlineAttr 0x5636453837e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x563645383840 <col:30> Inherited
|-CXXMethodDecl 0x563645383868 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x563645383918 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5636453839c8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x563645383b88 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<Router::element_landmark_t>::value_argument_type)' inline
| |-ParmVarDecl 0x563645383a78 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x563645383af0 <col:37, col:63> col:57 v 'Vector<Router::element_landmark_t>::value_argument_type':'const Router::element_landmark_t &'
|-CXXMethodDecl 0x563645383cd8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x563645383c48 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x563645383e88 <line:163:5, col:65> col:43 operator[] 'Router::element_landmark_t &(Vector::size_type)'
| |-ParmVarDecl 0x563645383d90 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x563645383f40 <col:20>
| `-OptimizeNoneAttr 0x563645383f98 <col:30>
|-CXXMethodDecl 0x5636453840b8 <line:164:5, col:73> col:49 operator[] 'const Router::element_landmark_t &(Vector::size_type) const'
| |-ParmVarDecl 0x563645383fc0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x563645384170 <col:20>
| `-OptimizeNoneAttr 0x5636453841c8 <col:30>
|-CXXMethodDecl 0x563645384280 <line:165:5, col:29> col:15 at 'Router::element_landmark_t &(Vector::size_type)' inline
| `-ParmVarDecl 0x5636453841f0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5636453843c8 <line:166:5, col:37> col:21 at 'const Router::element_landmark_t &(Vector::size_type) const' inline
| `-ParmVarDecl 0x563645384338 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5636453844f8 <line:167:5, col:21> col:15 front 'Router::element_landmark_t &()' inline
|-CXXMethodDecl 0x563645384628 <line:168:5, col:29> col:21 front 'const Router::element_landmark_t &() const' inline
|-CXXMethodDecl 0x5636453846f8 <line:169:5, col:20> col:15 back 'Router::element_landmark_t &()' inline
|-CXXMethodDecl 0x5636453847c8 <line:170:5, col:28> col:21 back 'const Router::element_landmark_t &() const' inline
|-CXXMethodDecl 0x563645384908 <line:172:5, col:39> col:15 unchecked_at 'Router::element_landmark_t &(Vector::size_type)' inline
| `-ParmVarDecl 0x563645384878 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563645384a50 <line:173:5, col:47> col:21 unchecked_at 'const Router::element_landmark_t &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5636453849c0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563645384b98 <line:174:5, col:59> col:15 at_u 'Router::element_landmark_t &(Vector::size_type)' inline
| |-ParmVarDecl 0x563645384b08 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x563645384c50 <col:48> Inherited "" ""
|-CXXMethodDecl 0x563645384d50 <line:175:5, col:71> col:21 at_u 'const Router::element_landmark_t &(Vector::size_type) const' inline
| |-ParmVarDecl 0x563645384cc0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x563645384e08 <col:60> Inherited "" ""
|-CXXMethodDecl 0x563645384ec8 <line:177:5, col:20> col:15 data 'Router::element_landmark_t *()' inline
|-CXXMethodDecl 0x563645384fc8 <line:178:5, col:28> col:21 data 'const Router::element_landmark_t *() const' inline
|-CXXMethodDecl 0x563645385148 <line:180:5, col:48> col:17 push_back 'void (Vector<Router::element_landmark_t>::value_argument_type)' inline
| `-ParmVarDecl 0x563645385088 <col:27, col:47> col:47 v 'Vector<Router::element_landmark_t>::value_argument_type':'const Router::element_landmark_t &'
|-FunctionTemplateDecl 0x5636453858d8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x563645385200 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<Router::element_landmark_t>':'fast_argument<Router::element_landmark_t, true>'
| `-CXXMethodDecl 0x563645385838 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (Router::element_landmark_t &&)' inline
|   `-ParmVarDecl 0x563645385738 <col:58, col:62> col:62 v 'Router::element_landmark_t &&'
|-CXXMethodDecl 0x5636453859b8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x563645385b08 <line:186:5, col:49> col:17 push_front 'void (Vector<Router::element_landmark_t>::value_argument_type)' inline
| `-ParmVarDecl 0x563645385a78 <col:28, col:48> col:48 v 'Vector<Router::element_landmark_t>::value_argument_type':'const Router::element_landmark_t &'
|-CXXMethodDecl 0x563645385bc0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x563645385e08 <line:189:5, col:62> col:21 insert 'Vector<Router::element_landmark_t>::iterator (Vector<Router::element_landmark_t>::iterator, Vector<Router::element_landmark_t>::value_argument_type)' inline
| |-ParmVarDecl 0x563645385c80 <col:28, col:37> col:37 it 'Vector<Router::element_landmark_t>::iterator':'Router::element_landmark_t *'
| `-ParmVarDecl 0x563645385cf8 <col:41, col:61> col:61 v 'Vector<Router::element_landmark_t>::value_argument_type':'const Router::element_landmark_t &'
|-CXXMethodDecl 0x563645385f98 <line:190:5, col:38> col:21 erase 'Vector<Router::element_landmark_t>::iterator (Vector<Router::element_landmark_t>::iterator)' inline
| `-ParmVarDecl 0x563645385ed8 <col:27, col:36> col:36 it 'Vector<Router::element_landmark_t>::iterator':'Router::element_landmark_t *'
|-CXXMethodDecl 0x5636453861a8 <line:191:5, col:49> col:21 erase 'Vector<Router::element_landmark_t>::iterator (Vector<Router::element_landmark_t>::iterator, Vector<Router::element_landmark_t>::iterator)' inline
| |-ParmVarDecl 0x563645386060 <col:27, col:36> col:36 a 'Vector<Router::element_landmark_t>::iterator':'Router::element_landmark_t *'
| `-ParmVarDecl 0x5636453860d8 <col:39, col:48> col:48 b 'Vector<Router::element_landmark_t>::iterator':'Router::element_landmark_t *'
|-CXXMethodDecl 0x563645386268 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5636453864c8 <line:195:5, col:34> col:17 swap 'void (Vector<Router::element_landmark_t> &)' inline
| `-ParmVarDecl 0x5636453863d0 <col:22, col:33> col:33 x 'Vector<Router::element_landmark_t> &'
`-CXXDestructorDecl 0x563645386598 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x563645386598

Layout: <CGRecordLayout
  LLVMType:%class.Vector.6 = type { %class.vector_memory.7 }
  NonVirtualBaseLLVMType:%class.Vector.6 = type { %class.vector_memory.7 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5636452fcce0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<16>'
|-CXXRecordDecl 0x5636452fceb8 prev 0x5636452fcce0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5636452fcf48 <col:46, col:52> col:46 public
|-TypedefDecl 0x5636452fcf70 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563644c8d370 'int'
|-TypedefDecl 0x5636452feb40 <line:13:5, col:31> col:31 type 'typename sized_array_memory<16>::type':'char_array<16>'
| `-ElaboratedType 0x5636452feaf0 'typename sized_array_memory<16>::type' sugar
|   `-TypedefType 0x5636452fd420 'sized_array_memory<16>::type' sugar
|     |-Typedef 0x5636452fd320 'type'
|     `-TemplateSpecializationType 0x5636452fd2b0 'char_array<16UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5636452fd190 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 16
|       |   `-SubstNonTypeTemplateParmExpr 0x5636452fd170 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5636452fd150 <col:24> 'unsigned long' 16
|       `-RecordType 0x5636452fd290 'char_array<16>'
|         `-ClassTemplateSpecialization 0x5636452fd1b0 'char_array'
|-TypedefDecl 0x5636452febf8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<16> >::type *'
| `-PointerType 0x5636452febc0 'vector_memory<sized_array_memory<16> >::type *'
|   `-TypedefType 0x5636452feba0 'vector_memory<sized_array_memory<16> >::type' sugar
|     |-Typedef 0x5636452feb40 'type'
|     `-ElaboratedType 0x5636452feaf0 'typename sized_array_memory<16>::type' sugar
|       `-TypedefType 0x5636452fd420 'sized_array_memory<16>::type' sugar
|         |-Typedef 0x5636452fd320 'type'
|         `-TemplateSpecializationType 0x5636452fd2b0 'char_array<16UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5636452fd190 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 16
|           |   `-SubstNonTypeTemplateParmExpr 0x5636452fd170 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5636452fd150 <col:24> 'unsigned long' 16
|           `-RecordType 0x5636452fd290 'char_array<16>'
|             `-ClassTemplateSpecialization 0x5636452fd1b0 'char_array'
|-CXXMethodDecl 0x5636452fed78 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<16> >::type *) const' inline
| `-ParmVarDecl 0x5636452fec88 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXConstructorDecl 0x5636452fee68 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5636452fef48 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5636452fef48
|-CXXMethodDecl 0x5636452ff218 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<16> > &)'
| `-ParmVarDecl 0x5636452ff120 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<16> > &'
|-CXXMethodDecl 0x5636452ff458 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x5636452ff2d0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5636452ff348 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5636452ff628 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x5636452ff518 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5636452ff590 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5636452ff788 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<16> >::iterator ()'
|-CXXMethodDecl 0x5636452ff858 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<16> >::iterator ()'
|-CXXMethodDecl 0x5636452ffaa8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<16> >::iterator (vector_memory<sized_array_memory<16> >::iterator, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x5636452ff918 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
| `-ParmVarDecl 0x5636452ff990 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5636452ffd08 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<16> >::iterator (vector_memory<sized_array_memory<16> >::iterator, vector_memory<sized_array_memory<16> >::iterator)'
| |-ParmVarDecl 0x5636452ffb78 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
| `-ParmVarDecl 0x5636452ffbf0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5636452ffec8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<16> >::type *)' inline
| `-ParmVarDecl 0x5636452ffdd8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x563645300088 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<16> >::type *)' inline
| `-ParmVarDecl 0x5636452fff90 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x563645300140 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5636453001f0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x563645300428 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x5636453002a0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x563645300318 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5636453006c8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<16> > &)'
| `-ParmVarDecl 0x5636453005d0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<16> > &'
|-FieldDecl 0x563645300790 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<16> >::type *'
|-FieldDecl 0x5636453007e0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x563645300830 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.9 = type { %struct.char_array.10*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.9 = type { %struct.char_array.10*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x563645386cb0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'Router::Connection'
|-CXXRecordDecl 0x563645386eb8 prev 0x563645386cb0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x563645387f80 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<Connection>::type':'sized_array_memory<16>'
| `-ElaboratedType 0x563645387f30 'typename array_memory<Connection>::type' sugar
|   `-TypedefType 0x563645387f10 'conditional<true, sized_array_memory<16>, typed_array_memory<Router::Connection> >::type' sugar
|     |-Typedef 0x563645387dc0 'type'
|     `-SubstTemplateTypeParmType 0x5636452fc8b0 'sized_array_memory<16>' sugar
|       |-TemplateTypeParmType 0x563644f57610 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f575b8 'T'
|       `-RecordType 0x5636452fc400 'sized_array_memory<16>'
|         `-ClassTemplateSpecialization 0x5636452fc318 'sized_array_memory'
|-FieldDecl 0x563645388080 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<Router::Connection>::array_memory_type>':'vector_memory<sized_array_memory<16> >' mutable
|-AccessSpecDecl 0x5636453880d0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x563645388108 <line:118:5, col:15> col:15 value_type 'Router::Connection':'Router::Connection'
| `-SubstTemplateTypeParmType 0x563645386f50 'Router::Connection' sugar
|   |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x563644f8f2a8 'T'
|   `-RecordType 0x5636450a7d20 'Router::Connection'
|     `-CXXRecord 0x5636450a7c90 'Connection'
|-TypedefDecl 0x5636453881c8 <line:119:5, col:16> col:16 reference 'Router::Connection &'
| `-LValueReferenceType 0x563645388190 'Router::Connection &'
|   `-SubstTemplateTypeParmType 0x563645386f50 'Router::Connection' sugar
|     |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563644f8f2a8 'T'
|     `-RecordType 0x5636450a7d20 'Router::Connection'
|       `-CXXRecord 0x5636450a7c90 'Connection'
|-TypedefDecl 0x563645388258 <line:120:5, col:22> col:22 const_reference 'const Router::Connection &'
| `-LValueReferenceType 0x563645388220 'const Router::Connection &'
|   `-QualType 0x563645386f51 'const Router::Connection' const
|     `-SubstTemplateTypeParmType 0x563645386f50 'Router::Connection' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-RecordType 0x5636450a7d20 'Router::Connection'
|         `-CXXRecord 0x5636450a7c90 'Connection'
|-TypedefDecl 0x5636453882e8 <line:121:5, col:16> col:16 pointer 'Router::Connection *'
| `-PointerType 0x5636453882b0 'Router::Connection *'
|   `-SubstTemplateTypeParmType 0x563645386f50 'Router::Connection' sugar
|     |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563644f8f2a8 'T'
|     `-RecordType 0x5636450a7d20 'Router::Connection'
|       `-CXXRecord 0x5636450a7c90 'Connection'
|-TypedefDecl 0x563645388378 <line:122:5, col:22> col:22 const_pointer 'const Router::Connection *'
| `-PointerType 0x563645388340 'const Router::Connection *'
|   `-QualType 0x563645386f51 'const Router::Connection' const
|     `-SubstTemplateTypeParmType 0x563645386f50 'Router::Connection' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-RecordType 0x5636450a7d20 'Router::Connection'
|         `-CXXRecord 0x5636450a7c90 'Connection'
|-TypedefDecl 0x563645388fd0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<Connection>::type':'const Router::Connection &'
| `-ElaboratedType 0x563645388f80 'typename fast_argument<Connection>::type' sugar
|   `-TypedefType 0x563645388f60 'fast_argument<Router::Connection, true>::type' sugar
|     |-Typedef 0x563645388e98 'type'
|     `-LValueReferenceType 0x563645388e60 'const Router::Connection &'
|       `-QualType 0x563645388c01 'const Router::Connection' const
|         `-SubstTemplateTypeParmType 0x563645388c00 'Router::Connection' sugar
|           |-TemplateTypeParmType 0x563644f61ce0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x563644f61c88 'T'
|           `-RecordType 0x5636450a7d20 'Router::Connection'
|             `-CXXRecord 0x5636450a7c90 'Connection'
|-TypedefDecl 0x563645389038 <line:126:5, col:22> col:22 const_access_type 'const Router::Connection &'
| `-LValueReferenceType 0x563645388220 'const Router::Connection &'
|   `-QualType 0x563645386f51 'const Router::Connection' const
|     `-SubstTemplateTypeParmType 0x563645386f50 'Router::Connection' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-RecordType 0x5636450a7d20 'Router::Connection'
|         `-CXXRecord 0x5636450a7c90 'Connection'
|-TypedefDecl 0x563645389090 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563644c8d370 'int'
|-TypedefDecl 0x5636453890f8 <line:130:5, col:16> col:16 iterator 'Router::Connection *'
| `-PointerType 0x5636453882b0 'Router::Connection *'
|   `-SubstTemplateTypeParmType 0x563645386f50 'Router::Connection' sugar
|     |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563644f8f2a8 'T'
|     `-RecordType 0x5636450a7d20 'Router::Connection'
|       `-CXXRecord 0x5636450a7c90 'Connection'
|-TypedefDecl 0x563645389160 <line:131:5, col:22> col:22 const_iterator 'const Router::Connection *'
| `-PointerType 0x563645388340 'const Router::Connection *'
|   `-QualType 0x563645386f51 'const Router::Connection' const
|     `-SubstTemplateTypeParmType 0x563645386f50 'Router::Connection' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-RecordType 0x5636450a7d20 'Router::Connection'
|         `-CXXRecord 0x5636450a7c90 'Connection'
|-EnumDecl 0x5636453891b8 <line:134:5> col:5
| `-EnumConstantDecl 0x5636453892b0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<Router::Connection>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x563645389290 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x563644f90ba8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x563644f90b80 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x563644f90b60 <col:40> 'int' 1
|-CXXConstructorDecl 0x563645389338 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56364538ac58 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<Router::Connection>::value_argument_type)' inline
| |-ParmVarDecl 0x5636453893f0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x563645389490 <col:41, col:61> col:61 v 'Vector<Router::Connection>::value_argument_type':'const Router::Connection &'
|-CXXConstructorDecl 0x56364538af18 <line:139:5, col:37> col:12 Vector 'void (const Vector<Router::Connection> &)' inline
| `-ParmVarDecl 0x56364538ae00 <col:19, col:36> col:36 x 'const Vector<Router::Connection> &'
|-CXXConstructorDecl 0x56364538b1d8 <line:141:5, col:32> col:12 Vector 'void (Vector<Router::Connection> &&)' inline
| `-ParmVarDecl 0x56364538b0c0 <col:19, col:31> col:31 x 'Vector<Router::Connection> &&'
|-CXXMethodDecl 0x56364538b520 <line:144:5, col:51> col:23 operator= 'Vector<Router::Connection> &(const Vector<Router::Connection> &)' inline
| `-ParmVarDecl 0x56364538b400 <col:33, col:50> col:50 x 'const Vector<Router::Connection> &'
|-CXXMethodDecl 0x56364538b830 <line:146:5, col:46> col:23 operator= 'Vector<Router::Connection> &(Vector<Router::Connection> &&)' inline
| `-ParmVarDecl 0x56364538b710 <col:33, col:45> col:45 x 'Vector<Router::Connection> &&'
|-CXXMethodDecl 0x56364538bb20 <line:148:5, col:70> col:23 assign 'Vector<Router::Connection> &(Vector::size_type, Vector<Router::Connection>::value_argument_type)' inline
| |-ParmVarDecl 0x56364538b968 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56364538b9e0 <col:43, col:69> col:63 v 'Vector<Router::Connection>::value_argument_type':'const Router::Connection &'
|-CXXMethodDecl 0x56364538bc78 <line:150:5, col:55> col:49 begin 'Vector<Router::Connection>::iterator ()'
| |-NoInlineAttr 0x56364538bd58 <col:20> Inherited
| `-OptimizeNoneAttr 0x56364538bdb0 <col:30> Inherited
|-CXXMethodDecl 0x56364538bdf8 <line:151:5, col:53> col:49 end 'Vector<Router::Connection>::iterator ()'
| |-NoInlineAttr 0x56364538bea8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56364538bf00 <col:30> Inherited
|-CXXMethodDecl 0x56364538bfc8 <line:152:5, col:63> col:55 begin 'Vector<Router::Connection>::const_iterator () const'
| |-NoInlineAttr 0x56364538c078 <col:20> Inherited
| `-OptimizeNoneAttr 0x56364538c0d0 <col:30> Inherited
|-CXXMethodDecl 0x56364538c118 <line:153:5, col:61> col:55 end 'Vector<Router::Connection>::const_iterator () const'
| |-NoInlineAttr 0x56364538c1c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56364538c220 <col:30> Inherited
|-CXXMethodDecl 0x56364538c268 <line:154:5, col:64> col:55 cbegin 'Vector<Router::Connection>::const_iterator () const'
| |-NoInlineAttr 0x56364538c318 <col:20> Inherited
| `-OptimizeNoneAttr 0x56364538c370 <col:30> Inherited
|-CXXMethodDecl 0x56364538c3b8 <line:155:5, col:62> col:55 cend 'Vector<Router::Connection>::const_iterator () const'
| |-NoInlineAttr 0x56364538c468 <col:20> Inherited
| `-OptimizeNoneAttr 0x56364538c4c0 <col:30> Inherited
|-CXXMethodDecl 0x56364538c4e8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56364538c598 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56364538c648 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x56364538c808 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<Router::Connection>::value_argument_type)' inline
| |-ParmVarDecl 0x56364538c6f8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56364538c770 <col:37, col:63> col:57 v 'Vector<Router::Connection>::value_argument_type':'const Router::Connection &'
|-CXXMethodDecl 0x56364538c958 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56364538c8c8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56364538cb08 <line:163:5, col:65> col:43 operator[] 'Router::Connection &(Vector::size_type)'
| |-ParmVarDecl 0x56364538ca10 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56364538cbc0 <col:20>
| `-OptimizeNoneAttr 0x56364538cc18 <col:30>
|-CXXMethodDecl 0x56364538cd38 <line:164:5, col:73> col:49 operator[] 'const Router::Connection &(Vector::size_type) const'
| |-ParmVarDecl 0x56364538cc40 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56364538cdf0 <col:20>
| `-OptimizeNoneAttr 0x56364538ce48 <col:30>
|-CXXMethodDecl 0x56364538cf00 <line:165:5, col:29> col:15 at 'Router::Connection &(Vector::size_type)' inline
| `-ParmVarDecl 0x56364538ce70 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56364538d048 <line:166:5, col:37> col:21 at 'const Router::Connection &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56364538cfb8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56364538d178 <line:167:5, col:21> col:15 front 'Router::Connection &()' inline
|-CXXMethodDecl 0x56364538d2a8 <line:168:5, col:29> col:21 front 'const Router::Connection &() const' inline
|-CXXMethodDecl 0x56364538d378 <line:169:5, col:20> col:15 back 'Router::Connection &()' inline
|-CXXMethodDecl 0x56364538d448 <line:170:5, col:28> col:21 back 'const Router::Connection &() const' inline
|-CXXMethodDecl 0x56364538d588 <line:172:5, col:39> col:15 unchecked_at 'Router::Connection &(Vector::size_type)' inline
| `-ParmVarDecl 0x56364538d4f8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56364538d6d0 <line:173:5, col:47> col:21 unchecked_at 'const Router::Connection &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56364538d640 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56364538d818 <line:174:5, col:59> col:15 at_u 'Router::Connection &(Vector::size_type)' inline
| |-ParmVarDecl 0x56364538d788 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56364538d8d0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56364538d9d0 <line:175:5, col:71> col:21 at_u 'const Router::Connection &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56364538d940 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56364538da88 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56364538db48 <line:177:5, col:20> col:15 data 'Router::Connection *()' inline
|-CXXMethodDecl 0x56364538dc48 <line:178:5, col:28> col:21 data 'const Router::Connection *() const' inline
|-CXXMethodDecl 0x56364538ddf8 <line:180:5, col:48> col:17 push_back 'void (Vector<Router::Connection>::value_argument_type)' inline
| `-ParmVarDecl 0x56364538dd08 <col:27, col:47> col:47 v 'Vector<Router::Connection>::value_argument_type':'const Router::Connection &'
|-FunctionTemplateDecl 0x56364538e5b8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56364538deb0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<Router::Connection>':'fast_argument<Router::Connection, true>'
| `-CXXMethodDecl 0x56364538e518 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (Router::Connection &&)' inline
|   `-ParmVarDecl 0x56364538e418 <col:58, col:62> col:62 v 'Router::Connection &&'
|-CXXMethodDecl 0x56364538e698 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56364538e7e8 <line:186:5, col:49> col:17 push_front 'void (Vector<Router::Connection>::value_argument_type)' inline
| `-ParmVarDecl 0x56364538e758 <col:28, col:48> col:48 v 'Vector<Router::Connection>::value_argument_type':'const Router::Connection &'
|-CXXMethodDecl 0x56364538e8a0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x56364538eae8 <line:189:5, col:62> col:21 insert 'Vector<Router::Connection>::iterator (Vector<Router::Connection>::iterator, Vector<Router::Connection>::value_argument_type)' inline
| |-ParmVarDecl 0x56364538e960 <col:28, col:37> col:37 it 'Vector<Router::Connection>::iterator':'Router::Connection *'
| `-ParmVarDecl 0x56364538e9d8 <col:41, col:61> col:61 v 'Vector<Router::Connection>::value_argument_type':'const Router::Connection &'
|-CXXMethodDecl 0x56364538eca8 <line:190:5, col:38> col:21 erase 'Vector<Router::Connection>::iterator (Vector<Router::Connection>::iterator)' inline
| `-ParmVarDecl 0x56364538ebb8 <col:27, col:36> col:36 it 'Vector<Router::Connection>::iterator':'Router::Connection *'
|-CXXMethodDecl 0x56364538eef8 <line:191:5, col:49> col:21 erase 'Vector<Router::Connection>::iterator (Vector<Router::Connection>::iterator, Vector<Router::Connection>::iterator)' inline
| |-ParmVarDecl 0x56364538ed70 <col:27, col:36> col:36 a 'Vector<Router::Connection>::iterator':'Router::Connection *'
| `-ParmVarDecl 0x56364538ede8 <col:39, col:48> col:48 b 'Vector<Router::Connection>::iterator':'Router::Connection *'
|-CXXMethodDecl 0x56364538efb8 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x56364538f218 <line:195:5, col:34> col:17 swap 'void (Vector<Router::Connection> &)' inline
| `-ParmVarDecl 0x56364538f120 <col:22, col:33> col:33 x 'Vector<Router::Connection> &'
`-CXXDestructorDecl 0x56364538f2e8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x56364538f2e8

Layout: <CGRecordLayout
  LLVMType:%class.Vector.8 = type { %class.vector_memory.9 }
  NonVirtualBaseLLVMType:%class.Vector.8 = type { %class.vector_memory.9 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Handler::(anonymous at ../dummy_inc/click/handler.hh:290:5)
         0 |   HandlerCallback h
         0 |   ReadHandlerCallback r
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | union Handler::(anonymous at ../dummy_inc/click/handler.hh:294:5)
         0 |   HandlerCallback h
         0 |   WriteHandlerCallback w
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Handler
         0 |   class String _name
         0 |     struct String::rep_t _r
         0 |       const char * data
         8 |       int length
        16 |       struct String::memo_t * memo
        24 |   union Handler::(anonymous at ../dummy_inc/click/handler.hh:290:5) _read_hook
        24 |     HandlerCallback h
        24 |     ReadHandlerCallback r
        32 |   union Handler::(anonymous at ../dummy_inc/click/handler.hh:294:5) _write_hook
        32 |     HandlerCallback h
        32 |     WriteHandlerCallback w
        40 |   void * _read_user_data
        48 |   void * _write_user_data
        56 |   uint32_t _flags
        60 |   int _use_count
        64 |   int _next_by_name
           | [sizeof=72, dsize=68, align=8,
           |  nvsize=68, nvalign=8]

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636452d8038 prev 0x56364526d3e8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5636452d8130 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x5636452d81c0 <col:22, col:28> col:22 public
|-EnumDecl 0x5636452d81e8 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x5636452d8308 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x5636452d82e8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x5636452d82d0 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5636452d82b0 <col:14> 'int' 999
| |-EnumConstantDecl 0x5636452d83b0 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x5636452d8390 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x5636452d8378 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5636452d8358 <col:14> 'int' 1
| |-EnumConstantDecl 0x5636452d8440 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x5636452d8420 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x5636452d8400 <col:17> 'int' 0
| |-EnumConstantDecl 0x5636452d84d0 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x5636452d84b0 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x5636452d8490 <col:13> 'int' 1
| |-EnumConstantDecl 0x5636452d8560 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x5636452d8540 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x5636452d8520 <col:16> 'int' 2
| |-EnumConstantDecl 0x5636452d85f0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x5636452d85d0 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x5636452d85b0 <col:13> 'int' 3
| |-EnumConstantDecl 0x5636452d8680 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x5636452d8660 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x5636452d8640 <col:15> 'int' 4
| |-EnumConstantDecl 0x5636452d8710 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x5636452d86f0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x5636452d86d0 <col:14> 'int' 5
| |-EnumConstantDecl 0x5636452d87a0 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x5636452d8780 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x5636452d8760 <col:12> 'int' 6
| `-EnumConstantDecl 0x5636452d8830 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x5636452d8810 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x5636452d87f0 <col:13> 'int' 7
|-VarDecl 0x5636452d88a0 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x5636452d8928 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x5636452d89b0 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x5636452d8a38 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x5636452d8ac0 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x5636452d8b48 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x5636452d8bd0 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x5636452d8c58 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x5636452d8ce0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x5636452d8d68 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x5636452d8df0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x5636452d8ef0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x5636452de1d8 '_nerrors' 'int'
| | `-IntegerLiteral 0x5636452de968 <line:128:13> 'int' 0
| `-CompoundStmt 0x5636452de9d8 <col:16, line:129:5>
|-CXXDestructorDecl 0x5636452d8fe0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x5636452de9e8 <col:29, line:132:5>
|-CXXMethodDecl 0x5636452d9198 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x5636452d90d0 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5636452d9260 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5636452d9348 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5636452dea40 <col:44, line:161:5>
|   `-ReturnStmt 0x5636452dea30 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x5636452dea18 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5636452de9f8 <col:9> 'ErrorHandler *' lvalue Var 0x5636452de238 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x5636452d9488 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x5636452d93f8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5636452d9550 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5636452deaa0 <col:43, line:173:5>
|   `-ReturnStmt 0x5636452dea90 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x5636452dea78 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5636452dea58 <col:9> 'ErrorHandler *' lvalue Var 0x5636452de2b0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x5636452d9608 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x5636452d9688 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x5636452d9798 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x5636452d9708 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5636452d98e8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x5636452d9858 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5636452d9a40 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x5636452d99a8 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x5636452d9b98 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x5636452d9b00 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5636452d9cf0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x5636452d9c58 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5636452d9f00 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5636452d9da8 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x5636452d9e28 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x5636452da0d8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5636452d9fc0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x5636452da040 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x5636452da2f8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5636452da198 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x5636452da218 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x5636452da4d8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5636452da3b8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5636452da438 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5636452da6b8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5636452da598 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5636452da618 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5636452da840 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x5636452da778 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x5636452daa10 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x5636452da8f8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5636452da970 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x5636452decf8 <col:57, line:234:5>
|   `-ReturnStmt 0x5636452dece8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x5636452decd0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5636452dec78 <col:9, col:41> 'int'
|         |-MemberExpr 0x5636452dec48 <col:9> '<bound member function type>' ->xmessage 0x5636452da840
|         | `-CXXThisExpr 0x5636452dec38 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x5636452decb8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5636452deca0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5636452dec18 <col:18, col:40> 'String' (CXXTemporary 0x5636452dec18)
|               `-CallExpr 0x5636452debe0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x5636452debc8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x5636452deb40 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5636452dca08 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x5636452deb60 <col:31> 'const String' lvalue ParmVar 0x5636452da970 'str' 'const String &'
|                 `-DeclRefExpr 0x5636452deb80 <col:36> 'const String' lvalue ParmVar 0x5636452da8f8 'anno' 'const String &'
|-CXXMethodDecl 0x5636452dacf0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5636452daad0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5636452dab50 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x5636452dabc8 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5636452def88 <col:68, line:243:5>
|   `-ReturnStmt 0x5636452def78 <line:242:2, col:41>
|     `-ExprWithCleanups 0x5636452def60 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5636452def00 <col:9, col:41> 'int'
|         |-MemberExpr 0x5636452deed0 <col:9> '<bound member function type>' ->xmessage 0x5636452daa10
|         | `-CXXThisExpr 0x5636452deec0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5636452ded98 <col:18> 'const String' lvalue ParmVar 0x5636452daad0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5636452def48 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5636452def30 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5636452deea0 <col:24, col:40> 'String' (CXXTemporary 0x5636452deea0)
|               `-CXXMemberCallExpr 0x5636452dee38 <col:24, col:40> 'String'
|                 |-MemberExpr 0x5636452dedc8 <col:24> '<bound member function type>' ->vformat 0x5636452dbed0
|                 | `-CXXThisExpr 0x5636452dedb8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5636452dee68 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5636452dedf8 <col:32> 'const char *' lvalue ParmVar 0x5636452dab50 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5636452dee80 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5636452dee18 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5636452dabc8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5636452daf90 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x5636452dadb8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5636452dae30 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5636452daea8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x5636452df2c8 <col:23, line:254:5>
|   `-ReturnStmt 0x5636452df2b8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x5636452df2a0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x5636452df240 <col:9, col:71> 'int'
|         |-MemberExpr 0x5636452df210 <col:9> '<bound member function type>' ->xmessage 0x5636452daa10
|         | `-CXXThisExpr 0x5636452df200 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x5636452df288 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x5636452df270 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x5636452df1c0 <col:18, col:65> 'String' (CXXTemporary 0x5636452df1c0)
|         |     `-CallExpr 0x5636452df158 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x5636452df140 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x5636452df028 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5636452dca08 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x5636452df048 <col:31> 'const String' lvalue ParmVar 0x5636452dae30 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x5636452df1a0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x5636452df188 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x5636452df120 <col:37, col:64> 'String' (CXXTemporary 0x5636452df120)
|         |             `-CallExpr 0x5636452df0f0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x5636452df0d8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x5636452df068 <col:37> 'String (const String &)' lvalue CXXMethod 0x5636452dd058 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x5636452df088 <col:56> 'const String' lvalue ParmVar 0x5636452dadb8 'landmark' 'const String &'
|         `-DeclRefExpr 0x5636452df1e0 <col:68> 'const String' lvalue ParmVar 0x5636452daea8 'str' 'const String &'
|-CXXMethodDecl 0x5636452db310 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5636452db058 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5636452db0d0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5636452db150 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x5636452db1c8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5636452df580 <col:34, line:267:5>
|   `-ReturnStmt 0x5636452df570 <line:266:2, col:51>
|     `-ExprWithCleanups 0x5636452df558 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x5636452df4f0 <col:9, col:51> 'int'
|         |-MemberExpr 0x5636452df4c0 <col:9> '<bound member function type>' ->xmessage 0x5636452daf90
|         | `-CXXThisExpr 0x5636452df4b0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5636452df368 <col:18> 'const String' lvalue ParmVar 0x5636452db058 'landmark' 'const String &'
|         |-DeclRefExpr 0x5636452df388 <col:28> 'const String' lvalue ParmVar 0x5636452db0d0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5636452df540 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x5636452df528 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5636452df490 <col:34, col:50> 'String' (CXXTemporary 0x5636452df490)
|               `-CXXMemberCallExpr 0x5636452df428 <col:34, col:50> 'String'
|                 |-MemberExpr 0x5636452df3b8 <col:34> '<bound member function type>' ->vformat 0x5636452dbed0
|                 | `-CXXThisExpr 0x5636452df3a8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5636452df458 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5636452df3e8 <col:42> 'const char *' lvalue ParmVar 0x5636452db150 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5636452df470 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5636452df408 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5636452db1c8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5636452db420 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x5636452df600 <col:25, line:288:5>
|   `-ReturnStmt 0x5636452df5f0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x5636452df5d8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x5636452df5a8 <col:9> 'const int' lvalue ->_nerrors 0x5636452de1d8
|         `-CXXThisExpr 0x5636452df598 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x5636452db630 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x5636452db4d8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x5636452db558 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x5636452db918 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5636452db6f8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x5636452db778 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x5636452db7f0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5636452dbab0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x5636452db9e8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x5636452dbcf8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5636452dbb70 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x5636452dbbe8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5636452df878 <col:58, line:357:5>
|   `-ReturnStmt 0x5636452df868 <line:356:2, col:29>
|     `-ExprWithCleanups 0x5636452df850 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x5636452df808 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5636452df7f0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5636452df7d0 <col:9, col:29> 'String' (CXXTemporary 0x5636452df7d0)
|             `-CallExpr 0x5636452df760 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x5636452df748 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5636452df6c8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x5636452db918 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x5636452df668 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x5636452df798 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x5636452df688 <col:21> 'const char *' lvalue ParmVar 0x5636452dbb70 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x5636452df7b0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x5636452df6a8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5636452dbbe8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5636452dbed0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x5636452dbdc0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x5636452dbe38 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5636452dc028 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x5636452dbf98 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x5636452dc170 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x5636452dc0e0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x5636452dc410 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x5636452dc228 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x5636452dc2a8 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x5636452dc320 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x5636452dc570 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x5636452dc4e0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x5636452df990 <col:37, line:441:5>
|   `-IfStmt 0x5636452df978 <line:439:2, line:440:8>
|     |-BinaryOperator 0x5636452df900 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x5636452df8d0 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x5636452df890 <col:6> 'int' lvalue ParmVar 0x5636452dc4e0 'level' 'int'
|     | `-ImplicitCastExpr 0x5636452df8e8 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x5636452df8b0 <col:15> 'ErrorHandler::Level' EnumConstant 0x5636452d85f0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x5636452df960 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x5636452df930 <col:8> 'int' lvalue ->_nerrors 0x5636452de1d8
|         `-CXXThisExpr 0x5636452df920 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x5636452dc638 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x5636452dfa28 <col:26, line:448:5>
|   `-BinaryOperator 0x5636452dfa08 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x5636452df9b8 <col:2> 'int' lvalue ->_nerrors 0x5636452de1d8
|     | `-CXXThisExpr 0x5636452df9a8 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x5636452df9e8 <col:13> 'int' 0
|-CXXMethodDecl 0x5636452dc800 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x5636452dc6f0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5636452dc768 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x5636452dca08 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x5636452dc8c0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x5636452dc938 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x5636452dccb8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x5636452dcac8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x5636452dcb48 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x5636452dcbc8 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x5636452dcd70 <col:59> 0 0
|-CXXMethodDecl 0x5636452dcf08 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x5636452dcde8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x5636452dce68 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x5636452e00a0 <col:70, line:534:5>
|   |-DeclStmt 0x5636452dfb98 <line:528:2, col:20>
|   | |-VarDecl 0x5636452dfa50 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x5636452dfab8 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x5636452dfaf0 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x5636452dfb58 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x5636452dfc68 <line:529:2, col:23>
|   | `-VarDecl 0x5636452dfbc8 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x5636452dfc50 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5636452dfc30 <col:18> 'const char *' lvalue ParmVar 0x5636452dcde8 'begin' 'const char *'
|   |-DoStmt 0x5636452e0038 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x5636452dff68 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x5636452dff50 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x5636452dff30 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x5636452dfc80 <col:6> 'const char *' lvalue Var 0x5636452dfbc8 'x' 'const char *'
|   | |     `-CallExpr 0x5636452dfe80 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x5636452dfe68 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5636452dfe18 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x5636452de6b0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x5636452dfee8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x5636452dfed0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x5636452dfd38 <col:20, col:27> 'String' (CXXTemporary 0x5636452dfd38)
|   | |       |     `-CXXTemporaryObjectExpr 0x5636452dfd00 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x5636452dff00 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5636452dfd58 <col:30> 'const char *' lvalue Var 0x5636452dfbc8 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x5636452dff18 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5636452dfd78 <col:33> 'const char *' lvalue ParmVar 0x5636452dce68 'end' 'const char *'
|   | |       |-UnaryOperator 0x5636452dfdb8 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5636452dfd98 <col:39> 'String' lvalue Var 0x5636452dfa50 'name' 'String'
|   | |       |-UnaryOperator 0x5636452dfdf0 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5636452dfdd0 <col:46> 'String' lvalue Var 0x5636452dfaf0 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x5636452dfe08 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x5636452e0020 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x5636452e0008 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x5636452dffe8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x5636452dffb8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x563644fc2158
|   |         `-ImplicitCastExpr 0x5636452dffa0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x5636452dff80 <col:11> 'String' lvalue Var 0x5636452dfa50 'name' 'String'
|   `-ReturnStmt 0x5636452e0090 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x5636452e0078 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x5636452e0058 <col:9> 'const char *' lvalue Var 0x5636452dfbc8 'x' 'const char *'
|-CXXMethodDecl 0x5636452dd058 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x5636452dcfc8 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x5636452e06a8 <col:55, line:550:5>
|   `-IfStmt 0x5636452e0680 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x5636452e02e0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x5636452e02c8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5636452e02b0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5636452e0290 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5636452e0260 <col:6> '<bound member function type>' .operator int (String::*)() const 0x563644fc2158
|     | |       `-DeclRefExpr 0x5636452e0100 <col:6> 'const String' lvalue ParmVar 0x5636452dcfc8 'x' 'const String &'
|     | `-BinaryOperator 0x5636452e0240 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x5636452e0210 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x5636452e01c0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x5636452e01a8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5636452e0160 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x563644fdb990 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x5636452e0120 <col:11> 'const String' lvalue ParmVar 0x5636452dcfc8 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x5636452e0140 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x5636452e0228 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x5636452e01f8 <col:19> 'char' 123
|     |-ReturnStmt 0x5636452e0350 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x5636452e0320 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x5636452e0300 <col:13> 'const String' lvalue ParmVar 0x5636452dcfc8 'x' 'const String &'
|     `-IfStmt 0x5636452e0658 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x5636452e03e8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5636452e03d0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5636452e03b0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5636452e0380 <col:11> '<bound member function type>' .operator int (String::*)() const 0x563644fc2158
|       |       `-DeclRefExpr 0x5636452e0360 <col:11> 'const String' lvalue ParmVar 0x5636452dcfc8 'x' 'const String &'
|       |-ReturnStmt 0x5636452e0570 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x5636452e0558 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x5636452e0528 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x5636452e0510 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x5636452e04f0 <col:13, col:29> 'String' (CXXTemporary 0x5636452e04f0)
|       |         `-CallExpr 0x5636452e04a0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x5636452e0488 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x5636452e0400 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x5636452dc800 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x5636452e04d0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x5636452e0420 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x5636452e0440 <col:28> 'const String' lvalue ParmVar 0x5636452dcfc8 'x' 'const String &'
|       `-ReturnStmt 0x5636452e0648 <line:549:6, col:20>
|         `-ExprWithCleanups 0x5636452e0630 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x5636452e0600 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x5636452e05e8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x5636452e05c8 <col:13, col:20> 'String' (CXXTemporary 0x5636452e05c8)
|                 `-CXXTemporaryObjectExpr 0x5636452e0590 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x5636452dd220 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x5636452dd110 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x5636452dd188 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5636452de958 <col:71> 'bool' false
|-CXXRecordDecl 0x5636452dd2d0 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x5636452dd5c8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x5636452dd560 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x5636452dd500 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x5636452dd4c0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x563644fbe9f0 'String'
|       | `-CXXRecord 0x563644fbe960 'String'
|       |-BuiltinType 0x563644c8d370 'int'
|       `-DecayedType 0x56364526e450 '__va_list_tag *' sugar
|         |-TypedefType 0x56364526e420 'va_list' sugar
|         | |-Typedef 0x563644eaf880 'va_list'
|         | `-TypedefType 0x563644eaf830 '__gnuc_va_list' sugar
|         |   |-Typedef 0x563644de7458 '__gnuc_va_list'
|         |   `-TypedefType 0x563644de73c0 '__builtin_va_list' sugar
|         |     |-Typedef 0x563644ccebd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x563644cceb80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x563644c8e0c0 '__va_list_tag'
|         |         `-CXXRecord 0x563644c8e028 '__va_list_tag'
|         `-PointerType 0x563644eb5120 '__va_list_tag *'
|           `-RecordType 0x563644c8e0c0 '__va_list_tag'
|             `-CXXRecord 0x563644c8e028 '__va_list_tag'
|-EnumDecl 0x5636452dd620 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x5636452dd720 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5636452ddc80 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636452dd700 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x5636452dd6e0 <col:16> 'int' 1
| |-EnumConstantDecl 0x5636452dd7b0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5636452ddc98 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636452dd790 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x5636452dd770 <col:21> 'int' 2
| |-EnumConstantDecl 0x5636452dd840 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5636452ddcb0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636452dd820 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x5636452dd800 <col:22> 'int' 4
| |-EnumConstantDecl 0x5636452dd8d0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5636452ddcc8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636452dd8b0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x5636452dd890 <col:17> 'int' 8
| |-EnumConstantDecl 0x5636452dd960 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5636452ddce0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636452dd940 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x5636452dd920 <col:22> 'int' 16
| |-EnumConstantDecl 0x5636452dd9f0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5636452ddcf8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636452dd9d0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5636452dd9b0 <col:19> 'int' 32
| |-EnumConstantDecl 0x5636452dda80 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5636452ddd10 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636452dda60 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x5636452dda40 <col:17> 'int' 64
| |-EnumConstantDecl 0x5636452ddb10 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5636452ddd28 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636452ddaf0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x5636452ddad0 <col:14> 'int' 128
| |-EnumConstantDecl 0x5636452ddba0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5636452ddd40 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636452ddb80 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x5636452ddb60 <col:16> 'int' 256
| `-EnumConstantDecl 0x5636452ddc30 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x5636452ddd58 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5636452ddc10 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x5636452ddbf0 <col:12> 'int' 1024
|-CXXMethodDecl 0x5636452ddf68 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x5636452ddd80 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x5636452dde20 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x5636452de0f0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x5636452de028 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x5636452de198 <line:580:3, col:10> col:3 private
|-FieldDecl 0x5636452de1d8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x5636452de238 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x5636452de2b0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x5636452de6b0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x5636452de328 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x5636452de3a8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x5636452de428 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x5636452de4a0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x5636452de518 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x5636452de590 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x5636452de7d8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x5636452de7d8
| `-ParmVarDecl 0x5636452de8e8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x5636452e0a08 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x5636452e0a08
  `-ParmVarDecl 0x5636452e0b18 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636451f1c90 <../dummy_inc/click/handler.hh:290:5, line:293:5> line:290:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x5636451f1de0 <line:291:2, col:18> col:18 h 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
|-FieldDecl 0x5636451f1e60 <line:292:2, col:22> col:22 referenced r 'ReadHandlerCallback':'String (*)(Element *, void *)'
|-CXXConstructorDecl 0x5636451f2c58 <line:290:5> col:5 implicit constexpr  'void (const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &)' inline default trivial noexcept-unevaluated 0x5636451f2c58
| `-ParmVarDecl 0x5636451f2d68 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &'
|-CXXConstructorDecl 0x5636451f2e08 <col:5> col:5 implicit constexpr  'void (Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&)' inline default trivial noexcept-unevaluated 0x5636451f2e08
| `-ParmVarDecl 0x5636451f2f18 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&'
|-CXXDestructorDecl 0x5636451f2f88 <col:5> col:5 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x5636451f2f88
|-CXXMethodDecl 0x5636451f3858 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &(const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &)' inline default trivial noexcept-unevaluated 0x5636451f3858
| `-ParmVarDecl 0x5636451f3968 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &'
|-CXXMethodDecl 0x5636451f39d8 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &(Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&)' inline default trivial noexcept-unevaluated 0x5636451f39d8
| `-ParmVarDecl 0x5636451f3ae8 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&'
`-CXXConstructorDecl 0x5636451a8440 <col:5> col:5 implicit used  'void () noexcept' inline default trivial
  `-CompoundStmt 0x5636451a8520 <col:5>

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { i32 (i32, %class.String*, %class.Element*, %class.Handler*, %class.ErrorHandler*)* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636451f1f90 <../dummy_inc/click/handler.hh:294:5, line:297:5> line:294:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x5636451f20b8 <line:295:2, col:18> col:18 h 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
|-FieldDecl 0x5636451f2140 <line:296:2, col:23> col:23 referenced w 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
|-CXXConstructorDecl 0x5636451f30b8 <line:294:5> col:5 implicit constexpr  'void (const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &)' inline default trivial noexcept-unevaluated 0x5636451f30b8
| `-ParmVarDecl 0x5636451f31c8 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &'
|-CXXConstructorDecl 0x5636451f3268 <col:5> col:5 implicit constexpr  'void (Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&)' inline default trivial noexcept-unevaluated 0x5636451f3268
| `-ParmVarDecl 0x5636451f3378 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&'
|-CXXDestructorDecl 0x5636451f33e8 <col:5> col:5 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x5636451f33e8
|-CXXMethodDecl 0x5636451f3b88 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &(const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &)' inline default trivial noexcept-unevaluated 0x5636451f3b88
| `-ParmVarDecl 0x5636451f3c98 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &'
|-CXXMethodDecl 0x5636451f3d08 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &(Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&)' inline default trivial noexcept-unevaluated 0x5636451f3d08
| `-ParmVarDecl 0x5636451f3e18 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&'
`-CXXConstructorDecl 0x5636451a8580 <col:5> col:5 implicit used  'void () noexcept' inline default trivial
  `-CompoundStmt 0x5636451a8660 <col:5>

Layout: <CGRecordLayout
  LLVMType:%union.anon.11 = type { i32 (i32, %class.String*, %class.Element*, %class.Handler*, %class.ErrorHandler*)* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636451ed618 prev 0x5636451ecab0 <../dummy_inc/click/handler.hh:19:1, line:313:1> line:19:7 class Handler definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-CXXRecordDecl 0x5636451ed710 <col:1, col:7> col:7 implicit referenced class Handler
|-AccessSpecDecl 0x5636451ed7a0 <col:17, col:23> col:17 public
|-EnumDecl 0x5636451ed7c8 <line:21:5, line:59:5> line:21:10 Flags
| |-EnumConstantDecl 0x5636451ed8d0 <line:22:2, col:11> col:2 referenced f_read 'Handler::Flags'
| | `-ImplicitCastExpr 0x5636451ee620 <col:11> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451ed8b0 <col:11> 'int' Int: 1
| |     `-IntegerLiteral 0x5636451ed890 <col:11> 'int' 1
| |-EnumConstantDecl 0x5636451ed960 <line:23:2, col:12> col:2 referenced f_write 'Handler::Flags'
| | `-ImplicitCastExpr 0x5636451ee638 <col:12> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451ed940 <col:12> 'int' Int: 2
| |     `-IntegerLiteral 0x5636451ed920 <col:12> 'int' 2
| |-EnumConstantDecl 0x5636451ed9f0 <line:24:2, col:17> col:2 referenced f_read_param 'Handler::Flags'
| | `-ImplicitCastExpr 0x5636451ee650 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451ed9d0 <col:17> 'int' Int: 4
| |     `-IntegerLiteral 0x5636451ed9b0 <col:17> 'int' 4
| |-EnumConstantDecl 0x5636451eda80 <line:25:2, col:16> col:2 referenced f_exclusive 'Handler::Flags'
| | `-ImplicitCastExpr 0x5636451ee668 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451eda60 <col:16> 'int' Int: 0
| |     `-IntegerLiteral 0x5636451eda40 <col:16> 'int' 0
| |-EnumConstantDecl 0x5636451edb10 <line:28:2, col:19> col:2 referenced f_nonexclusive 'Handler::Flags'
| | `-ImplicitCastExpr 0x5636451ee680 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451edaf0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5636451edad0 <col:19> 'int' 32
| |-EnumConstantDecl 0x5636451edba0 <line:31:2, col:10> col:2 referenced f_raw 'Handler::Flags'
| | `-ImplicitCastExpr 0x5636451ee698 <col:10> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451edb80 <col:10> 'int' Int: 64
| |     `-IntegerLiteral 0x5636451edb60 <col:10> 'int' 64
| |-EnumConstantDecl 0x5636451edc30 <line:32:2, col:19> col:2 referenced f_read_private 'Handler::Flags'
| | `-ImplicitCastExpr 0x5636451ee6b0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451edc10 <col:19> 'int' Int: 128
| |     `-IntegerLiteral 0x5636451edbf0 <col:19> 'int' 128
| |-EnumConstantDecl 0x5636451edcc0 <line:34:2, col:20> col:2 referenced f_write_private 'Handler::Flags'
| | `-ImplicitCastExpr 0x5636451ee6c8 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451edca0 <col:20> 'int' Int: 256
| |     `-IntegerLiteral 0x5636451edc80 <col:20> 'int' 256
| |-EnumConstantDecl 0x5636451edd50 <line:36:2, col:17> col:2 referenced f_deprecated 'Handler::Flags'
| | `-ImplicitCastExpr 0x5636451ee6e0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451edd30 <col:17> 'int' Int: 512
| |     `-IntegerLiteral 0x5636451edd10 <col:17> 'int' 512
| |-EnumConstantDecl 0x5636451edde0 <line:38:2, col:15> col:2 referenced f_uncommon 'Handler::Flags'
| | `-ImplicitCastExpr 0x5636451ee6f8 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451eddc0 <col:15> 'int' Int: 1024
| |     `-IntegerLiteral 0x5636451edda0 <col:15> 'int' 1024
| |-EnumConstantDecl 0x5636451ede70 <line:40:2, col:11> col:2 referenced f_calm 'Handler::Flags'
| | `-ImplicitCastExpr 0x5636451ee710 <col:11> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451ede50 <col:11> 'int' Int: 2048
| |     `-IntegerLiteral 0x5636451ede30 <col:11> 'int' 2048
| |-EnumConstantDecl 0x5636451edf00 <line:41:2, col:16> col:2 referenced f_expensive 'Handler::Flags'
| | `-ImplicitCastExpr 0x5636451ee728 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451edee0 <col:16> 'int' Int: 4096
| |     `-IntegerLiteral 0x5636451edec0 <col:16> 'int' 4096
| |-EnumConstantDecl 0x5636451edf90 <line:42:2, col:13> col:2 referenced f_button 'Handler::Flags'
| | `-ImplicitCastExpr 0x5636451ee740 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451edf70 <col:13> 'int' Int: 8192
| |     `-IntegerLiteral 0x5636451edf50 <col:13> 'int' 8192
| |-EnumConstantDecl 0x5636451ee020 <line:43:2, col:15> col:2 referenced f_checkbox 'Handler::Flags'
| | `-ImplicitCastExpr 0x5636451ee758 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451ee000 <col:15> 'int' Int: 16384
| |     `-IntegerLiteral 0x5636451edfe0 <col:15> 'int' 16384
| |-EnumConstantDecl 0x5636451ee0f0 <line:45:2, col:20> col:2 referenced f_driver0 'Handler::Flags'
| | `-ConstantExpr 0x5636451ee0d0 <col:14, col:20> 'unsigned int' Int: 67108864
| |   `-BinaryOperator 0x5636451ee0b0 <col:14, col:20> 'unsigned int' '<<'
| |     |-IntegerLiteral 0x5636451ee070 <col:14> 'unsigned int' 1
| |     `-IntegerLiteral 0x5636451ee090 <col:20> 'int' 26
| |-EnumConstantDecl 0x5636451ee1c0 <line:46:9, col:27> col:9 referenced f_driver1 'Handler::Flags'
| | `-ConstantExpr 0x5636451ee1a0 <col:21, col:27> 'unsigned int' Int: 134217728
| |   `-BinaryOperator 0x5636451ee180 <col:21, col:27> 'unsigned int' '<<'
| |     |-IntegerLiteral 0x5636451ee140 <col:21> 'unsigned int' 1
| |     `-IntegerLiteral 0x5636451ee160 <col:27> 'int' 27
| |-EnumConstantDecl 0x5636451ee250 <line:48:2, col:17> col:2 referenced f_user_shift 'Handler::Flags'
| | `-ImplicitCastExpr 0x5636451ee770 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451ee230 <col:17> 'int' Int: 28
| |     `-IntegerLiteral 0x5636451ee210 <col:17> 'int' 28
| |-EnumConstantDecl 0x5636451ee320 <line:49:2, col:18> col:2 referenced f_user0 'Handler::Flags'
| | `-ConstantExpr 0x5636451ee300 <col:12, col:18> 'unsigned int' Int: 268435456
| |   `-BinaryOperator 0x5636451ee2e0 <col:12, col:18> 'unsigned int' '<<'
| |     |-IntegerLiteral 0x5636451ee2a0 <col:12> 'unsigned int' 1
| |     `-DeclRefExpr 0x5636451ee2c0 <col:18> 'int' EnumConstant 0x5636451ee250 'f_user_shift' 'Handler::Flags'
| |-EnumConstantDecl 0x5636451ee3b0 <line:54:2, col:25> col:2 referenced f_read_comprehensive 'Handler::Flags'
| | `-ImplicitCastExpr 0x5636451ee788 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451ee390 <col:25> 'int' Int: 8
| |     `-IntegerLiteral 0x5636451ee370 <col:25> 'int' 8
| |-EnumConstantDecl 0x5636451ee440 <line:55:2, col:26> col:2 referenced f_write_comprehensive 'Handler::Flags'
| | `-ImplicitCastExpr 0x5636451ee7a0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451ee420 <col:26> 'int' Int: 16
| |     `-IntegerLiteral 0x5636451ee400 <col:26> 'int' 16
| `-EnumConstantDecl 0x5636451ee5d0 <line:56:2, col:71> col:2 referenced f_special 'Handler::Flags'
|   `-ImplicitCastExpr 0x5636451ee7b8 <col:14, col:71> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5636451ee5b0 <col:14, col:71> 'int' Int: 31
|       `-BinaryOperator 0x5636451ee590 <col:14, col:71> 'int' '|'
|         |-BinaryOperator 0x5636451ee550 <col:14, col:48> 'int' '|'
|         | |-BinaryOperator 0x5636451ee510 <col:14, col:33> 'int' '|'
|         | | |-BinaryOperator 0x5636451ee4d0 <col:14, col:23> 'int' '|'
|         | | | |-DeclRefExpr 0x5636451ee490 <col:14> 'int' EnumConstant 0x5636451ed8d0 'f_read' 'Handler::Flags'
|         | | | `-DeclRefExpr 0x5636451ee4b0 <col:23> 'int' EnumConstant 0x5636451ed960 'f_write' 'Handler::Flags'
|         | | `-DeclRefExpr 0x5636451ee4f0 <col:33> 'int' EnumConstant 0x5636451ed9f0 'f_read_param' 'Handler::Flags'
|         | `-DeclRefExpr 0x5636451ee530 <col:48> 'int' EnumConstant 0x5636451ee3b0 'f_read_comprehensive' 'Handler::Flags'
|         `-DeclRefExpr 0x5636451ee570 <col:71> 'int' EnumConstant 0x5636451ee440 'f_write_comprehensive' 'Handler::Flags'
|-CXXMethodDecl 0x5636451ee818 <line:62:5, line:64:5> line:62:26 name 'const String &() const' inline
| `-CompoundStmt 0x5636451f4238 <col:39, line:64:5>
|   `-ReturnStmt 0x5636451f4228 <line:63:2, col:9>
|     `-MemberExpr 0x5636451f41f8 <col:9> 'const String' lvalue ->_name 0x5636451f1c40
|       `-CXXThisExpr 0x5636451f41e8 <col:9> 'const Handler *' implicit this
|-CXXMethodDecl 0x5636451ee8d8 <line:69:5, line:71:5> line:69:21 flags 'uint32_t () const' inline
| `-CompoundStmt 0x5636451f42b8 <col:35, line:71:5>
|   `-ReturnStmt 0x5636451f42a8 <line:70:2, col:9>
|     `-ImplicitCastExpr 0x5636451f4290 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5636451f4260 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5636451f2350
|         `-CXXThisExpr 0x5636451f4250 <col:9> 'const Handler *' implicit this
|-CXXMethodDecl 0x5636451eea28 <line:75:5, line:77:5> line:75:18 user_data 'void *(int) const' inline
| |-ParmVarDecl 0x5636451ee990 <col:28, col:32> col:32 used op 'int'
| `-CompoundStmt 0x5636451f4438 <col:42, line:77:5>
|   `-ReturnStmt 0x5636451f4428 <line:76:2, col:44>
|     `-ImplicitCastExpr 0x5636451f4410 <col:9, col:44> 'void *' <LValueToRValue>
|       `-ConditionalOperator 0x5636451f43e0 <col:9, col:44> 'void *const' lvalue
|         |-BinaryOperator 0x5636451f4340 <col:9, col:15> 'bool' '=='
|         | |-ImplicitCastExpr 0x5636451f4310 <col:9> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5636451f42d0 <col:9> 'int' lvalue ParmVar 0x5636451ee990 'op' 'int'
|         | `-ImplicitCastExpr 0x5636451f4328 <col:15> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x5636451f42f0 <col:15> 'Handler::Flags' EnumConstant 0x5636451ed960 'f_write' 'Handler::Flags'
|         |-MemberExpr 0x5636451f4370 <col:25> 'void *const' lvalue ->_write_user_data 0x5636451f22f0
|         | `-CXXThisExpr 0x5636451f4360 <col:25> 'const Handler *' implicit this
|         `-MemberExpr 0x5636451f43b0 <col:44> 'void *const' lvalue ->_read_user_data 0x5636451f2288
|           `-CXXThisExpr 0x5636451f43a0 <col:44> 'const Handler *' implicit this
|-CXXMethodDecl 0x5636451eeaf8 <line:80:5, line:82:5> line:80:18 read_user_data 'void *() const' inline
| `-CompoundStmt 0x5636451f44b8 <col:41, line:82:5>
|   `-ReturnStmt 0x5636451f44a8 <line:81:2, col:9>
|     `-ImplicitCastExpr 0x5636451f4490 <col:9> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5636451f4460 <col:9> 'void *const' lvalue ->_read_user_data 0x5636451f2288
|         `-CXXThisExpr 0x5636451f4450 <col:9> 'const Handler *' implicit this
|-CXXMethodDecl 0x5636451eebc0 <line:85:5, line:87:5> line:85:18 write_user_data 'void *() const' inline
| `-CompoundStmt 0x5636451f4538 <col:42, line:87:5>
|   `-ReturnStmt 0x5636451f4528 <line:86:2, col:9>
|     `-ImplicitCastExpr 0x5636451f4510 <col:9> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5636451f44e0 <col:9> 'void *const' lvalue ->_write_user_data 0x5636451f22f0
|         `-CXXThisExpr 0x5636451f44d0 <col:9> 'const Handler *' implicit this
|-CXXMethodDecl 0x5636451eec88 <line:90:5, col:63> col:18 user_data1 'void *() const' inline
| `-DeprecatedAttr 0x5636451eed28 <col:52> "" ""
|-CXXMethodDecl 0x5636451eedc0 <line:91:5, col:63> col:18 user_data2 'void *() const' inline
| `-DeprecatedAttr 0x5636451eee60 <col:52> "" ""
|-CXXMethodDecl 0x5636451eeef0 <line:96:5, line:98:5> line:96:17 readable 'bool () const' inline
| `-CompoundStmt 0x5636451f4628 <col:34, line:98:5>
|   `-ReturnStmt 0x5636451f4618 <line:97:2, col:18>
|     `-ImplicitCastExpr 0x5636451f4600 <col:9, col:18> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x5636451f45e0 <col:9, col:18> 'unsigned int' '&'
|         |-ImplicitCastExpr 0x5636451f45b0 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-MemberExpr 0x5636451f4560 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5636451f2350
|         |   `-CXXThisExpr 0x5636451f4550 <col:9> 'const Handler *' implicit this
|         `-ImplicitCastExpr 0x5636451f45c8 <col:18> 'unsigned int' <IntegralCast>
|           `-DeclRefExpr 0x5636451f4590 <col:18> 'Handler::Flags' EnumConstant 0x5636451ed8d0 'f_read' 'Handler::Flags'
|-CXXMethodDecl 0x5636451eefb0 <line:102:5, line:104:5> line:102:17 read_param 'bool () const' inline
| `-CompoundStmt 0x5636451f4718 <col:36, line:104:5>
|   `-ReturnStmt 0x5636451f4708 <line:103:2, col:18>
|     `-ImplicitCastExpr 0x5636451f46f0 <col:9, col:18> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x5636451f46d0 <col:9, col:18> 'unsigned int' '&'
|         |-ImplicitCastExpr 0x5636451f46a0 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-MemberExpr 0x5636451f4650 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5636451f2350
|         |   `-CXXThisExpr 0x5636451f4640 <col:9> 'const Handler *' implicit this
|         `-ImplicitCastExpr 0x5636451f46b8 <col:18> 'unsigned int' <IntegralCast>
|           `-DeclRefExpr 0x5636451f4680 <col:18> 'Handler::Flags' EnumConstant 0x5636451ed9f0 'f_read_param' 'Handler::Flags'
|-CXXMethodDecl 0x5636451ef070 <line:111:5, line:113:5> line:111:17 used read_visible 'bool () const' inline
| `-CompoundStmt 0x5636451f48f8 <col:38, line:113:5>
|   `-ReturnStmt 0x5636451f48e8 <line:112:2, col:49>
|     `-BinaryOperator 0x5636451f48c8 <col:9, col:49> 'bool' '=='
|       |-ParenExpr 0x5636451f4870 <col:9, col:44> 'unsigned int'
|       | `-BinaryOperator 0x5636451f4850 <col:10, col:43> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x5636451f4820 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x5636451f4740 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5636451f2350
|       |   |   `-CXXThisExpr 0x5636451f4730 <col:10> 'const Handler *' implicit this
|       |   `-ImplicitCastExpr 0x5636451f4838 <col:19, col:43> 'unsigned int' <IntegralCast>
|       |     `-ParenExpr 0x5636451f4800 <col:19, col:43> 'int'
|       |       `-BinaryOperator 0x5636451f47e0 <col:20, col:29> 'int' '|'
|       |         |-ImplicitCastExpr 0x5636451f47b0 <col:20> 'int' <IntegralCast>
|       |         | `-DeclRefExpr 0x5636451f4770 <col:20> 'Handler::Flags' EnumConstant 0x5636451ed8d0 'f_read' 'Handler::Flags'
|       |         `-ImplicitCastExpr 0x5636451f47c8 <col:29> 'int' <IntegralCast>
|       |           `-DeclRefExpr 0x5636451f4790 <col:29> 'Handler::Flags' EnumConstant 0x5636451edc30 'f_read_private' 'Handler::Flags'
|       `-ImplicitCastExpr 0x5636451f48b0 <col:49> 'unsigned int' <IntegralCast>
|         `-DeclRefExpr 0x5636451f4890 <col:49> 'Handler::Flags' EnumConstant 0x5636451ed8d0 'f_read' 'Handler::Flags'
|-CXXMethodDecl 0x5636451ef130 <line:116:5, line:118:5> line:116:17 writable 'bool () const' inline
| `-CompoundStmt 0x5636451f49e8 <col:34, line:118:5>
|   `-ReturnStmt 0x5636451f49d8 <line:117:2, col:18>
|     `-ImplicitCastExpr 0x5636451f49c0 <col:9, col:18> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x5636451f49a0 <col:9, col:18> 'unsigned int' '&'
|         |-ImplicitCastExpr 0x5636451f4970 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-MemberExpr 0x5636451f4920 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5636451f2350
|         |   `-CXXThisExpr 0x5636451f4910 <col:9> 'const Handler *' implicit this
|         `-ImplicitCastExpr 0x5636451f4988 <col:18> 'unsigned int' <IntegralCast>
|           `-DeclRefExpr 0x5636451f4950 <col:18> 'Handler::Flags' EnumConstant 0x5636451ed960 'f_write' 'Handler::Flags'
|-CXXMethodDecl 0x5636451ef1f0 <line:125:5, line:127:5> line:125:17 used write_visible 'bool () const' inline
| `-CompoundStmt 0x5636451f4bc8 <col:39, line:127:5>
|   `-ReturnStmt 0x5636451f4bb8 <line:126:2, col:51>
|     `-BinaryOperator 0x5636451f4b98 <col:9, col:51> 'bool' '=='
|       |-ParenExpr 0x5636451f4b40 <col:9, col:46> 'unsigned int'
|       | `-BinaryOperator 0x5636451f4b20 <col:10, col:45> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x5636451f4af0 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x5636451f4a10 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5636451f2350
|       |   |   `-CXXThisExpr 0x5636451f4a00 <col:10> 'const Handler *' implicit this
|       |   `-ImplicitCastExpr 0x5636451f4b08 <col:19, col:45> 'unsigned int' <IntegralCast>
|       |     `-ParenExpr 0x5636451f4ad0 <col:19, col:45> 'int'
|       |       `-BinaryOperator 0x5636451f4ab0 <col:20, col:30> 'int' '|'
|       |         |-ImplicitCastExpr 0x5636451f4a80 <col:20> 'int' <IntegralCast>
|       |         | `-DeclRefExpr 0x5636451f4a40 <col:20> 'Handler::Flags' EnumConstant 0x5636451ed960 'f_write' 'Handler::Flags'
|       |         `-ImplicitCastExpr 0x5636451f4a98 <col:30> 'int' <IntegralCast>
|       |           `-DeclRefExpr 0x5636451f4a60 <col:30> 'Handler::Flags' EnumConstant 0x5636451edcc0 'f_write_private' 'Handler::Flags'
|       `-ImplicitCastExpr 0x5636451f4b80 <col:51> 'unsigned int' <IntegralCast>
|         `-DeclRefExpr 0x5636451f4b60 <col:51> 'Handler::Flags' EnumConstant 0x5636451ed960 'f_write' 'Handler::Flags'
|-CXXMethodDecl 0x5636451ef2b0 <line:130:5, line:132:5> line:130:17 visible 'bool () const' inline
| `-CompoundStmt 0x5636451f4cd0 <col:33, line:132:5>
|   `-ReturnStmt 0x5636451f4cc0 <line:131:2, col:41>
|     `-BinaryOperator 0x5636451f4ca0 <col:9, col:41> 'bool' '||'
|       |-CXXMemberCallExpr 0x5636451f4c20 <col:9, col:22> 'bool'
|       | `-MemberExpr 0x5636451f4bf0 <col:9> '<bound member function type>' ->read_visible 0x5636451ef070
|       |   `-CXXThisExpr 0x5636451f4be0 <col:9> 'const Handler *' implicit this
|       `-CXXMemberCallExpr 0x5636451f4c80 <col:27, col:41> 'bool'
|         `-MemberExpr 0x5636451f4c50 <col:27> '<bound member function type>' ->write_visible 0x5636451ef1f0
|           `-CXXThisExpr 0x5636451f4c40 <col:27> 'const Handler *' implicit this
|-CXXMethodDecl 0x5636451ef370 <line:136:5, line:138:5> line:136:17 allow_concurrent_handlers 'bool () const' inline
| `-CompoundStmt 0x5636451f4e08 <col:51, line:138:5>
|   `-ReturnStmt 0x5636451f4df8 <line:137:9, col:40>
|     `-ImplicitCastExpr 0x5636451f4de0 <col:16, col:40> 'bool' <IntegralToBoolean>
|       `-ParenExpr 0x5636451f4dc0 <col:16, col:40> 'unsigned int'
|         `-BinaryOperator 0x5636451f4d78 <col:17, col:26> 'unsigned int' '&'
|           |-ImplicitCastExpr 0x5636451f4d48 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|           | `-MemberExpr 0x5636451f4cf8 <col:17> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5636451f2350
|           |   `-CXXThisExpr 0x5636451f4ce8 <col:17> 'const Handler *' implicit this
|           `-ImplicitCastExpr 0x5636451f4d60 <col:26> 'unsigned int' <IntegralCast>
|             `-DeclRefExpr 0x5636451f4d28 <col:26> 'Handler::Flags' EnumConstant 0x5636451edb10 'f_nonexclusive' 'Handler::Flags'
|-CXXMethodDecl 0x5636451ef430 <line:142:5, line:144:5> line:142:17 allow_concurrent_threads 'bool () const' inline
| `-CompoundStmt 0x5636451f4f18 <col:50, line:144:5>
|   `-ReturnStmt 0x5636451f4f08 <line:143:9, col:40>
|     `-ImplicitCastExpr 0x5636451f4ef0 <col:16, col:40> 'bool' <IntegralToBoolean>
|       `-ParenExpr 0x5636451f4ed0 <col:16, col:40> 'unsigned int'
|         `-BinaryOperator 0x5636451f4eb0 <col:17, col:26> 'unsigned int' '&'
|           |-ImplicitCastExpr 0x5636451f4e80 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|           | `-MemberExpr 0x5636451f4e30 <col:17> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5636451f2350
|           |   `-CXXThisExpr 0x5636451f4e20 <col:17> 'const Handler *' implicit this
|           `-ImplicitCastExpr 0x5636451f4e98 <col:26> 'unsigned int' <IntegralCast>
|             `-DeclRefExpr 0x5636451f4e60 <col:26> 'Handler::Flags' EnumConstant 0x5636451edb10 'f_nonexclusive' 'Handler::Flags'
|-CXXMethodDecl 0x5636451ef4f0 <line:164:5, line:166:5> line:164:17 raw 'bool () const' inline
| `-CompoundStmt 0x5636451f5008 <col:29, line:166:5>
|   `-ReturnStmt 0x5636451f4ff8 <line:165:2, col:18>
|     `-ImplicitCastExpr 0x5636451f4fe0 <col:9, col:18> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x5636451f4fc0 <col:9, col:18> 'unsigned int' '&'
|         |-ImplicitCastExpr 0x5636451f4f90 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-MemberExpr 0x5636451f4f40 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5636451f2350
|         |   `-CXXThisExpr 0x5636451f4f30 <col:9> 'const Handler *' implicit this
|         `-ImplicitCastExpr 0x5636451f4fa8 <col:18> 'unsigned int' <IntegralCast>
|           `-DeclRefExpr 0x5636451f4f70 <col:18> 'Handler::Flags' EnumConstant 0x5636451edba0 'f_raw' 'Handler::Flags'
|-CXXMethodDecl 0x5636451ef778 <line:177:5, col:75> col:12 used call_read 'String (Element *, const String &, ErrorHandler *) const'
| |-ParmVarDecl 0x5636451ef5a0 <col:22, col:31> col:31 e 'Element *'
| |-ParmVarDecl 0x5636451ef618 <col:34, col:48> col:48 param 'const String &'
| `-ParmVarDecl 0x5636451ef690 <col:55, col:69> col:69 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5636451ef988 <line:186:5, line:188:5> line:186:19 call_read 'String (Element *, ErrorHandler *) const' inline
| |-ParmVarDecl 0x5636451ef840 <col:29, col:38> col:38 used e 'Element *'
| |-ParmVarDecl 0x5636451ef8b8 <col:41, col:62> col:55 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5636451f4120 <col:62> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5636451f4100 <col:62> 'int' 0
| `-CompoundStmt 0x5636451f52a8 <col:71, line:188:5>
|   `-ReturnStmt 0x5636451f5298 <line:187:2, col:36>
|     `-ExprWithCleanups 0x5636451f5280 <col:9, col:36> 'String'
|       `-CXXConstructExpr 0x5636451f5250 <col:9, col:36> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5636451f5238 <col:9, col:36> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5636451f5218 <col:9, col:36> 'String' (CXXTemporary 0x5636451f5218)
|             `-CXXMemberCallExpr 0x5636451f5178 <col:9, col:36> 'String'
|               |-MemberExpr 0x5636451f5148 <col:9> '<bound member function type>' ->call_read 0x5636451ef778
|               | `-CXXThisExpr 0x5636451f5138 <col:9> 'const Handler *' implicit this
|               |-ImplicitCastExpr 0x5636451f51b0 <col:19> 'Element *' <LValueToRValue>
|               | `-DeclRefExpr 0x5636451f5090 <col:19> 'Element *' lvalue ParmVar 0x5636451ef840 'e' 'Element *'
|               |-MaterializeTemporaryExpr 0x5636451f51e0 <col:22, col:29> 'const String' lvalue
|               | `-ImplicitCastExpr 0x5636451f51c8 <col:22, col:29> 'const String' <NoOp>
|               |   `-CXXBindTemporaryExpr 0x5636451f50f8 <col:22, col:29> 'String' (CXXTemporary 0x5636451f50f8)
|               |     `-CXXTemporaryObjectExpr 0x5636451f50c0 <col:22, col:29> 'String' 'void ()'
|               `-ImplicitCastExpr 0x5636451f51f8 <col:32> 'ErrorHandler *' <LValueToRValue>
|                 `-DeclRefExpr 0x5636451f5118 <col:32> 'ErrorHandler *' lvalue ParmVar 0x5636451ef8b8 'errh' 'ErrorHandler *'
|-CXXMethodDecl 0x5636451efc20 <line:198:5, col:73> col:9 used call_write 'int (const String &, Element *, ErrorHandler *) const'
| |-ParmVarDecl 0x5636451efa48 <col:20, col:34> col:34 value 'const String &'
| |-ParmVarDecl 0x5636451efac0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5636451efb38 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5636451efda8 <line:207:5, col:37> col:12 unparse_name 'String (Element *) const'
| `-ParmVarDecl 0x5636451efce8 <col:25, col:34> col:34 e 'Element *'
|-CXXMethodDecl 0x5636451effd8 <line:216:5, col:63> col:19 unparse_name 'String (Element *, const String &)' static
| |-ParmVarDecl 0x5636451efe60 <col:32, col:41> col:41 e 'Element *'
| `-ParmVarDecl 0x5636451efed8 <col:44, col:58> col:58 hname 'const String &'
|-CXXMethodDecl 0x5636451f00d8 <line:223:5, line:225:5> line:223:34 used blank_handler 'const Handler *()' static inline
| `-CompoundStmt 0x5636451f5308 <col:50, line:225:5>
|   `-ReturnStmt 0x5636451f52f8 <line:224:2, col:9>
|     `-ImplicitCastExpr 0x5636451f52e0 <col:9> 'const Handler *' <LValueToRValue>
|       `-DeclRefExpr 0x5636451f52c0 <col:9> 'const Handler *' lvalue Var 0x5636451f2480 'the_blank_handler' 'const Handler *'
|-EnumDecl 0x5636451f0178 <line:229:5, line:251:5> line:229:5
| |-EnumConstantDecl 0x5636451f0280 <line:230:2, col:11> col:2 h_read 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5636451f0e20 <col:11> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f0260 <col:11> 'Handler::Flags' Int: 1
| |     `-DeclRefExpr 0x5636451f0240 <col:11> 'Handler::Flags' EnumConstant 0x5636451ed8d0 'f_read' 'Handler::Flags'
| |-EnumConstantDecl 0x5636451f0310 <line:231:2, col:12> col:2 h_write 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5636451f0e38 <col:12> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f02f0 <col:12> 'Handler::Flags' Int: 2
| |     `-DeclRefExpr 0x5636451f02d0 <col:12> 'Handler::Flags' EnumConstant 0x5636451ed960 'f_write' 'Handler::Flags'
| |-EnumConstantDecl 0x5636451f03a0 <line:232:2, col:17> col:2 h_read_param 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5636451f0e50 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f0380 <col:17> 'Handler::Flags' Int: 4
| |     `-DeclRefExpr 0x5636451f0360 <col:17> 'Handler::Flags' EnumConstant 0x5636451ed9f0 'f_read_param' 'Handler::Flags'
| |-EnumConstantDecl 0x5636451f0430 <line:233:2, col:16> col:2 h_exclusive 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5636451f0e68 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f0410 <col:16> 'Handler::Flags' Int: 0
| |     `-DeclRefExpr 0x5636451f03f0 <col:16> 'Handler::Flags' EnumConstant 0x5636451eda80 'f_exclusive' 'Handler::Flags'
| |-EnumConstantDecl 0x5636451f04c0 <line:234:2, col:19> col:2 h_nonexclusive 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5636451f0e80 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f04a0 <col:19> 'Handler::Flags' Int: 32
| |     `-DeclRefExpr 0x5636451f0480 <col:19> 'Handler::Flags' EnumConstant 0x5636451edb10 'f_nonexclusive' 'Handler::Flags'
| |-EnumConstantDecl 0x5636451f0550 <line:235:2, col:10> col:2 h_raw 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5636451f0e98 <col:10> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f0530 <col:10> 'Handler::Flags' Int: 64
| |     `-DeclRefExpr 0x5636451f0510 <col:10> 'Handler::Flags' EnumConstant 0x5636451edba0 'f_raw' 'Handler::Flags'
| |-EnumConstantDecl 0x5636451f05e0 <line:236:2, col:19> col:2 h_read_private 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5636451f0eb0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f05c0 <col:19> 'Handler::Flags' Int: 128
| |     `-DeclRefExpr 0x5636451f05a0 <col:19> 'Handler::Flags' EnumConstant 0x5636451edc30 'f_read_private' 'Handler::Flags'
| |-EnumConstantDecl 0x5636451f0670 <line:237:2, col:20> col:2 h_write_private 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5636451f0ec8 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f0650 <col:20> 'Handler::Flags' Int: 256
| |     `-DeclRefExpr 0x5636451f0630 <col:20> 'Handler::Flags' EnumConstant 0x5636451edcc0 'f_write_private' 'Handler::Flags'
| |-EnumConstantDecl 0x5636451f0700 <line:238:2, col:17> col:2 h_deprecated 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5636451f0ee0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f06e0 <col:17> 'Handler::Flags' Int: 512
| |     `-DeclRefExpr 0x5636451f06c0 <col:17> 'Handler::Flags' EnumConstant 0x5636451edd50 'f_deprecated' 'Handler::Flags'
| |-EnumConstantDecl 0x5636451f0790 <line:239:2, col:15> col:2 h_uncommon 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5636451f0ef8 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f0770 <col:15> 'Handler::Flags' Int: 1024
| |     `-DeclRefExpr 0x5636451f0750 <col:15> 'Handler::Flags' EnumConstant 0x5636451edde0 'f_uncommon' 'Handler::Flags'
| |-EnumConstantDecl 0x5636451f0820 <line:240:2, col:11> col:2 h_calm 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5636451f0f10 <col:11> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f0800 <col:11> 'Handler::Flags' Int: 2048
| |     `-DeclRefExpr 0x5636451f07e0 <col:11> 'Handler::Flags' EnumConstant 0x5636451ede70 'f_calm' 'Handler::Flags'
| |-EnumConstantDecl 0x5636451f08b0 <line:241:2, col:16> col:2 h_expensive 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5636451f0f28 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f0890 <col:16> 'Handler::Flags' Int: 4096
| |     `-DeclRefExpr 0x5636451f0870 <col:16> 'Handler::Flags' EnumConstant 0x5636451edf00 'f_expensive' 'Handler::Flags'
| |-EnumConstantDecl 0x5636451f0940 <line:242:2, col:13> col:2 h_button 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5636451f0f40 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f0920 <col:13> 'Handler::Flags' Int: 8192
| |     `-DeclRefExpr 0x5636451f0900 <col:13> 'Handler::Flags' EnumConstant 0x5636451edf90 'f_button' 'Handler::Flags'
| |-EnumConstantDecl 0x5636451f09d0 <line:243:2, col:15> col:2 h_checkbox 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5636451f0f58 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f09b0 <col:15> 'Handler::Flags' Int: 16384
| |     `-DeclRefExpr 0x5636451f0990 <col:15> 'Handler::Flags' EnumConstant 0x5636451ee020 'f_checkbox' 'Handler::Flags'
| |-EnumConstantDecl 0x5636451f0a60 <line:244:2, col:20> col:2 h_driver_flag_0 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5636451f0f70 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f0a40 <col:20> 'Handler::Flags' Int: 67108864
| |     `-DeclRefExpr 0x5636451f0a20 <col:20> 'Handler::Flags' EnumConstant 0x5636451ee0f0 'f_driver0' 'Handler::Flags'
| |-EnumConstantDecl 0x5636451f0af0 <line:245:9, col:27> col:9 h_driver_flag_1 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5636451f0f88 <col:27> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f0ad0 <col:27> 'Handler::Flags' Int: 134217728
| |     `-DeclRefExpr 0x5636451f0ab0 <col:27> 'Handler::Flags' EnumConstant 0x5636451ee1c0 'f_driver1' 'Handler::Flags'
| |-EnumConstantDecl 0x5636451f0b80 <line:246:2, col:22> col:2 h_user_flag_shift 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5636451f0fa0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f0b60 <col:22> 'Handler::Flags' Int: 28
| |     `-DeclRefExpr 0x5636451f0b40 <col:22> 'Handler::Flags' EnumConstant 0x5636451ee250 'f_user_shift' 'Handler::Flags'
| |-EnumConstantDecl 0x5636451f0c10 <line:247:2, col:18> col:2 h_user_flag_0 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5636451f0fb8 <col:18> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f0bf0 <col:18> 'Handler::Flags' Int: 268435456
| |     `-DeclRefExpr 0x5636451f0bd0 <col:18> 'Handler::Flags' EnumConstant 0x5636451ee320 'f_user0' 'Handler::Flags'
| |-EnumConstantDecl 0x5636451f0ca0 <line:248:2, col:25> col:2 h_read_comprehensive 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5636451f0fd0 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f0c80 <col:25> 'Handler::Flags' Int: 8
| |     `-DeclRefExpr 0x5636451f0c60 <col:25> 'Handler::Flags' EnumConstant 0x5636451ee3b0 'f_read_comprehensive' 'Handler::Flags'
| |-EnumConstantDecl 0x5636451f0d30 <line:249:2, col:26> col:2 h_write_comprehensive 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5636451f0fe8 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f0d10 <col:26> 'Handler::Flags' Int: 16
| |     `-DeclRefExpr 0x5636451f0cf0 <col:26> 'Handler::Flags' EnumConstant 0x5636451ee440 'f_write_comprehensive' 'Handler::Flags'
| `-EnumConstantDecl 0x5636451f0dd0 <line:250:2, col:20> col:2 h_special_flags 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
|   `-ImplicitCastExpr 0x5636451f1000 <col:20> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5636451f0db0 <col:20> 'Handler::Flags' Int: 31
|       `-DeclRefExpr 0x5636451f0d80 <col:20> 'Handler::Flags' EnumConstant 0x5636451ee5d0 'f_special' 'Handler::Flags'
|-EnumDecl 0x5636451f1018 <line:252:5, line:267:5> line:252:10 DeprecatedFlags
| |-EnumConstantDecl 0x5636451f1120 <line:253:2, col:12> col:2 OP_READ 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5636451f1680 <col:12> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f1100 <col:12> 'Handler::Flags' Int: 1
| |     `-DeclRefExpr 0x5636451f10e0 <col:12> 'Handler::Flags' EnumConstant 0x5636451ed8d0 'f_read' 'Handler::Flags'
| |-EnumConstantDecl 0x5636451f11b0 <line:254:2, col:13> col:2 OP_WRITE 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5636451f1698 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f1190 <col:13> 'Handler::Flags' Int: 2
| |     `-DeclRefExpr 0x5636451f1170 <col:13> 'Handler::Flags' EnumConstant 0x5636451ed960 'f_write' 'Handler::Flags'
| |-EnumConstantDecl 0x5636451f1240 <line:255:2, col:15> col:2 READ_PARAM 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5636451f16b0 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f1220 <col:15> 'Handler::Flags' Int: 4
| |     `-DeclRefExpr 0x5636451f1200 <col:15> 'Handler::Flags' EnumConstant 0x5636451ed9f0 'f_read_param' 'Handler::Flags'
| |-EnumConstantDecl 0x5636451f12d0 <line:256:2, col:8> col:2 RAW 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5636451f16c8 <col:8> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f12b0 <col:8> 'Handler::Flags' Int: 64
| |     `-DeclRefExpr 0x5636451f1290 <col:8> 'Handler::Flags' EnumConstant 0x5636451edba0 'f_raw' 'Handler::Flags'
| |-EnumConstantDecl 0x5636451f1360 <line:261:2, col:9> col:2 CALM 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5636451f16e0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f1340 <col:9> 'Handler::Flags' Int: 2048
| |     `-DeclRefExpr 0x5636451f1320 <col:9> 'Handler::Flags' EnumConstant 0x5636451ede70 'f_calm' 'Handler::Flags'
| |-EnumConstantDecl 0x5636451f13f0 <line:262:2, col:14> col:2 EXPENSIVE 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5636451f16f8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f13d0 <col:14> 'Handler::Flags' Int: 4096
| |     `-DeclRefExpr 0x5636451f13b0 <col:14> 'Handler::Flags' EnumConstant 0x5636451edf00 'f_expensive' 'Handler::Flags'
| |-EnumConstantDecl 0x5636451f1480 <line:263:2, col:11> col:2 BUTTON 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5636451f1710 <col:11> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f1460 <col:11> 'Handler::Flags' Int: 8192
| |     `-DeclRefExpr 0x5636451f1440 <col:11> 'Handler::Flags' EnumConstant 0x5636451edf90 'f_button' 'Handler::Flags'
| |-EnumConstantDecl 0x5636451f1510 <line:264:2, col:13> col:2 CHECKBOX 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5636451f1728 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f14f0 <col:13> 'Handler::Flags' Int: 16384
| |     `-DeclRefExpr 0x5636451f14d0 <col:13> 'Handler::Flags' EnumConstant 0x5636451ee020 'f_checkbox' 'Handler::Flags'
| |-EnumConstantDecl 0x5636451f15a0 <line:265:2, col:20> col:2 USER_FLAG_SHIFT 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5636451f1740 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f1580 <col:20> 'Handler::Flags' Int: 28
| |     `-DeclRefExpr 0x5636451f1560 <col:20> 'Handler::Flags' EnumConstant 0x5636451ee250 'f_user_shift' 'Handler::Flags'
| `-EnumConstantDecl 0x5636451f1630 <line:266:2, col:16> col:2 USER_FLAG_0 'Handler::DeprecatedFlags'
|   `-ImplicitCastExpr 0x5636451f1758 <col:16> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5636451f1610 <col:16> 'Handler::Flags' Int: 268435456
|       `-DeclRefExpr 0x5636451f15f0 <col:16> 'Handler::Flags' EnumConstant 0x5636451ee320 'f_user0' 'Handler::Flags'
|-EnumDecl 0x5636451f1770 <line:268:5, line:271:5> line:268:5
| |-DeprecatedAttr 0x5636451f1830 <col:25> "" ""
| |-EnumConstantDecl 0x5636451f18e0 <line:269:2, col:14> col:2 EXCLUSIVE 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:268:5)'
| | `-ImplicitCastExpr 0x5636451f19c0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f18c0 <col:14> 'Handler::Flags' Int: 0
| |     `-DeclRefExpr 0x5636451f18a0 <col:14> 'Handler::Flags' EnumConstant 0x5636451eda80 'f_exclusive' 'Handler::Flags'
| `-EnumConstantDecl 0x5636451f1970 <line:270:2, col:17> col:2 NONEXCLUSIVE 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:268:5)'
|   `-ImplicitCastExpr 0x5636451f19d8 <col:17> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5636451f1950 <col:17> 'Handler::Flags' Int: 32
|       `-DeclRefExpr 0x5636451f1930 <col:17> 'Handler::Flags' EnumConstant 0x5636451edb10 'f_nonexclusive' 'Handler::Flags'
|-CXXMethodDecl 0x5636451f1b58 <line:281:5, line:284:5> line:281:19 __call_read 'String (Element *, void *) const' inline
| |-ParmVarDecl 0x5636451f1a00 <col:31, col:40> col:40 used e 'Element *'
| |-ParmVarDecl 0x5636451f1a80 <col:43, col:49> col:49 used new_user_data 'void *'
| `-CompoundStmt 0x5636451f59c8 <col:70, line:284:5>
|   |-ParenExpr 0x5636451f57e8 <line:282:2, col:233> 'void'
|   | `-ConditionalOperator 0x5636451f57b8 <col:3, col:232> 'void'
|   |   |-CXXStaticCastExpr 0x5636451f54e8 <col:3, col:75> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5636451f54b8 <col:23, col:69> 'bool' '=='
|   |   |   |-ParenExpr 0x5636451f5460 <col:23, col:64> 'unsigned int'
|   |   |   | `-BinaryOperator 0x5636451f5440 <col:24, col:63> 'unsigned int' '&'
|   |   |   |   |-ImplicitCastExpr 0x5636451f5410 <col:24> 'uint32_t':'unsigned int' <LValueToRValue>
|   |   |   |   | `-MemberExpr 0x5636451f5330 <col:24> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5636451f2350
|   |   |   |   |   `-CXXThisExpr 0x5636451f5320 <col:24> 'const Handler *' implicit this
|   |   |   |   `-ImplicitCastExpr 0x5636451f5428 <col:33, col:63> 'unsigned int' <IntegralCast>
|   |   |   |     `-ParenExpr 0x5636451f53f0 <col:33, col:63> 'int'
|   |   |   |       `-BinaryOperator 0x5636451f53d0 <col:34, col:43> 'int' '|'
|   |   |   |         |-ImplicitCastExpr 0x5636451f53a0 <col:34> 'int' <IntegralCast>
|   |   |   |         | `-DeclRefExpr 0x5636451f5360 <col:34> 'Handler::Flags' EnumConstant 0x5636451ed8d0 'f_read' 'Handler::Flags'
|   |   |   |         `-ImplicitCastExpr 0x5636451f53b8 <col:43> 'int' <IntegralCast>
|   |   |   |           `-DeclRefExpr 0x5636451f5380 <col:43> 'Handler::Flags' EnumConstant 0x5636451ee3b0 'f_read_comprehensive' 'Handler::Flags'
|   |   |   `-ImplicitCastExpr 0x5636451f54a0 <col:69> 'unsigned int' <IntegralCast>
|   |   |     `-DeclRefExpr 0x5636451f5480 <col:69> 'Handler::Flags' EnumConstant 0x5636451ed8d0 'f_read' 'Handler::Flags'
|   |   |-CXXFunctionalCastExpr 0x5636451f5548 <col:79, col:86> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5636451f5528 <col:85> 'int' 0
|   |   `-CallExpr 0x5636451f5718 <col:90, col:232> 'void'
|   |     |-ImplicitCastExpr 0x5636451f5700 <col:90> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5636451f56e0 <col:90> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563644d2da00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5636451f5758 <col:105> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636451f55b8 <col:105> 'const char [53]' lvalue "(_flags & (f_read | f_read_comprehensive)) == f_read"
|   |     |-ImplicitCastExpr 0x5636451f5770 <col:161> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636451f5608 <col:161> 'const char [30]' lvalue "../dummy_inc/click/handler.hh"
|   |     |-ImplicitCastExpr 0x5636451f5788 <col:194> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5636451f5640 <col:194> 'int' 282
|   |     `-ImplicitCastExpr 0x5636451f57a0 <col:199, col:213> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5636451f56c8 <col:199, col:213> 'const char [53]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5636451f56b0 <col:213> 'const char [53]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5636451f5660 <col:213> 'const char [53]' lvalue "String Handler::__call_read(Element *, void *) const"
|   `-ReturnStmt 0x5636451f59b8 <line:283:2, col:38>
|     `-ExprWithCleanups 0x5636451f59a0 <col:9, col:38> 'String'
|       `-CXXConstructExpr 0x5636451f5970 <col:9, col:38> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5636451f5958 <col:9, col:38> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5636451f5938 <col:9, col:38> 'String' (CXXTemporary 0x5636451f5938)
|             `-CallExpr 0x5636451f58d0 <col:9, col:38> 'String'
|               |-ImplicitCastExpr 0x5636451f58b8 <col:9, col:20> 'ReadHandlerCallback':'String (*)(Element *, void *)' <LValueToRValue>
|               | `-MemberExpr 0x5636451f5848 <col:9, col:20> 'const ReadHandlerCallback':'String (*const)(Element *, void *)' lvalue .r 0x5636451f1e60
|               |   `-MemberExpr 0x5636451f5818 <col:9> 'const union (anonymous union at ../dummy_inc/click/handler.hh:290:5)':'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5)' lvalue ->_read_hook 0x5636451f1f28
|               |     `-CXXThisExpr 0x5636451f5808 <col:9> 'const Handler *' implicit this
|               |-ImplicitCastExpr 0x5636451f5900 <col:22> 'Element *' <LValueToRValue>
|               | `-DeclRefExpr 0x5636451f5878 <col:22> 'Element *' lvalue ParmVar 0x5636451f1a00 'e' 'Element *'
|               `-ImplicitCastExpr 0x5636451f5918 <col:25> 'void *' <LValueToRValue>
|                 `-DeclRefExpr 0x5636451f5898 <col:25> 'void *' lvalue ParmVar 0x5636451f1a80 'new_user_data' 'void *'
|-AccessSpecDecl 0x5636451f1c08 <line:287:3, col:10> col:3 private
|-FieldDecl 0x5636451f1c40 <line:289:5, col:12> col:12 referenced _name 'String'
|-CXXRecordDecl 0x5636451f1c90 <line:290:5, line:293:5> line:290:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x5636451f1de0 <line:291:2, col:18> col:18 h 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-FieldDecl 0x5636451f1e60 <line:292:2, col:22> col:22 referenced r 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-CXXConstructorDecl 0x5636451f2c58 <line:290:5> col:5 implicit constexpr  'void (const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &)' inline default trivial noexcept-unevaluated 0x5636451f2c58
| | `-ParmVarDecl 0x5636451f2d68 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &'
| |-CXXConstructorDecl 0x5636451f2e08 <col:5> col:5 implicit constexpr  'void (Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&)' inline default trivial noexcept-unevaluated 0x5636451f2e08
| | `-ParmVarDecl 0x5636451f2f18 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&'
| |-CXXDestructorDecl 0x5636451f2f88 <col:5> col:5 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x5636451f2f88
| |-CXXMethodDecl 0x5636451f3858 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &(const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &)' inline default trivial noexcept-unevaluated 0x5636451f3858
| | `-ParmVarDecl 0x5636451f3968 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &'
| |-CXXMethodDecl 0x5636451f39d8 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &(Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&)' inline default trivial noexcept-unevaluated 0x5636451f39d8
| | `-ParmVarDecl 0x5636451f3ae8 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&'
| `-CXXConstructorDecl 0x5636451a8440 <col:5> col:5 implicit used  'void () noexcept' inline default trivial
|   `-CompoundStmt 0x5636451a8520 <col:5>
|-FieldDecl 0x5636451f1f28 <col:5, line:293:7> col:7 referenced _read_hook 'union (anonymous union at ../dummy_inc/click/handler.hh:290:5)':'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5)'
|-CXXRecordDecl 0x5636451f1f90 <line:294:5, line:297:5> line:294:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x5636451f20b8 <line:295:2, col:18> col:18 h 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-FieldDecl 0x5636451f2140 <line:296:2, col:23> col:23 referenced w 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-CXXConstructorDecl 0x5636451f30b8 <line:294:5> col:5 implicit constexpr  'void (const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &)' inline default trivial noexcept-unevaluated 0x5636451f30b8
| | `-ParmVarDecl 0x5636451f31c8 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &'
| |-CXXConstructorDecl 0x5636451f3268 <col:5> col:5 implicit constexpr  'void (Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&)' inline default trivial noexcept-unevaluated 0x5636451f3268
| | `-ParmVarDecl 0x5636451f3378 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&'
| |-CXXDestructorDecl 0x5636451f33e8 <col:5> col:5 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x5636451f33e8
| |-CXXMethodDecl 0x5636451f3b88 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &(const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &)' inline default trivial noexcept-unevaluated 0x5636451f3b88
| | `-ParmVarDecl 0x5636451f3c98 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &'
| |-CXXMethodDecl 0x5636451f3d08 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &(Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&)' inline default trivial noexcept-unevaluated 0x5636451f3d08
| | `-ParmVarDecl 0x5636451f3e18 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&'
| `-CXXConstructorDecl 0x5636451a8580 <col:5> col:5 implicit used  'void () noexcept' inline default trivial
|   `-CompoundStmt 0x5636451a8660 <col:5>
|-FieldDecl 0x5636451f2208 <col:5, line:297:7> col:7 referenced _write_hook 'union (anonymous union at ../dummy_inc/click/handler.hh:294:5)':'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5)'
|-FieldDecl 0x5636451f2288 <line:298:5, col:11> col:11 referenced _read_user_data 'void *'
|-FieldDecl 0x5636451f22f0 <line:299:5, col:11> col:11 referenced _write_user_data 'void *'
|-FieldDecl 0x5636451f2350 <line:300:5, col:14> col:14 referenced _flags 'uint32_t':'unsigned int'
|-FieldDecl 0x5636451f23b8 <line:301:5, col:9> col:9 _use_count 'int'
|-FieldDecl 0x5636451f2420 <line:302:5, col:9> col:9 _next_by_name 'int'
|-VarDecl 0x5636451f2480 <line:304:5, col:27> col:27 used the_blank_handler 'const Handler *' static
|-CXXConstructorDecl 0x5636451f25a0 <line:306:5, col:38> col:5 Handler 'void (const String &)'
| `-ParmVarDecl 0x5636451f24f8 <col:13, col:37> col:28 'const String &' cinit
|   `-ExprWithCleanups 0x5636451f41d0 <col:30, col:37> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5636451f41b8 <col:30, col:37> 'const String' lvalue
|       `-ImplicitCastExpr 0x5636451f41a0 <col:30, col:37> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5636451f4180 <col:30, col:37> 'String' (CXXTemporary 0x5636451f4180)
|           `-CXXTemporaryObjectExpr 0x5636451f4148 <col:30, col:37> 'String' 'void ()'
|-CXXMethodDecl 0x5636451f2748 <line:308:5, col:41> col:17 combine 'void (const Handler &)' inline
| `-ParmVarDecl 0x5636451f2688 <col:25, col:40> col:40 x 'const Handler &'
|-CXXMethodDecl 0x5636451f28c8 <line:309:5, col:46> col:17 compatible 'bool (const Handler &) const' inline
| `-ParmVarDecl 0x5636451f2800 <col:28, col:43> col:43 x 'const Handler &'
|-FriendDecl 0x5636451f2a88 <line:311:5, col:18> col:12 'class Router':'Router'
|-CXXConstructorDecl 0x5636451f2ac8 <line:19:7> col:7 implicit Handler 'void (const Handler &)' inline default noexcept-unevaluated 0x5636451f2ac8
| `-ParmVarDecl 0x5636451f2ba8 <col:7> col:7 'const Handler &'
|-CXXConstructorDecl 0x5636451f34f8 <col:7> col:7 implicit Handler 'void (Handler &&)' inline default noexcept-unevaluated 0x5636451f34f8
| `-ParmVarDecl 0x5636451f3608 <col:7> col:7 'Handler &&'
|-CXXMethodDecl 0x5636451f36a8 <col:7> col:7 implicit operator= 'Handler &(const Handler &)' inline default noexcept-unevaluated 0x5636451f36a8
| `-ParmVarDecl 0x5636451f37b8 <col:7> col:7 'const Handler &'
|-CXXMethodDecl 0x5636451f3e88 <col:7> col:7 implicit operator= 'Handler &(Handler &&)' inline default noexcept-unevaluated 0x5636451f3e88
| `-ParmVarDecl 0x5636451f3f98 <col:7> col:7 'Handler &&'
`-CXXDestructorDecl 0x5636451f4020 <col:7> col:7 implicit ~Handler 'void ()' inline default noexcept-unevaluated 0x5636451f4020

Layout: <CGRecordLayout
  LLVMType:%class.Handler = type <{ %class.String, %union.anon, %union.anon.11, i8*, i8*, i32, i32, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Handler.base = type <{ %class.String, %union.anon, %union.anon.11, i8*, i8*, i32, i32, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56364538fe58 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'void *'
|-CXXRecordDecl 0x563645390068 prev 0x56364538fe58 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x563645391080 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<void *>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x563645391030 'typename array_memory<void *>::type' sugar
|   `-TypedefType 0x563645391010 'conditional<true, sized_array_memory<8>, typed_array_memory<void *> >::type' sugar
|     |-Typedef 0x563645390ec0 'type'
|     `-SubstTemplateTypeParmType 0x5636453075a0 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x563644f57610 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f575b8 'T'
|       `-RecordType 0x5636453070f0 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x563645307008 'sized_array_memory'
|-FieldDecl 0x563645391180 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<void *>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x5636453911d0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x563645391208 <line:118:5, col:15> col:15 value_type 'void *':'void *'
| `-SubstTemplateTypeParmType 0x563645390100 'void *' sugar
|   |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x563644f8f2a8 'T'
|   `-PointerType 0x563644c8dad0 'void *'
|     `-BuiltinType 0x563644c8d2d0 'void'
|-TypedefDecl 0x563645391298 <line:119:5, col:16> col:16 reference 'void *&'
| `-LValueReferenceType 0x563645391260 'void *&'
|   `-SubstTemplateTypeParmType 0x563645390100 'void *' sugar
|     |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563644f8f2a8 'T'
|     `-PointerType 0x563644c8dad0 'void *'
|       `-BuiltinType 0x563644c8d2d0 'void'
|-TypedefDecl 0x563645391358 <line:120:5, col:22> col:22 const_reference 'void *const &'
| `-LValueReferenceType 0x563645391320 'void *const &'
|   `-QualType 0x563645390101 'void *const' const
|     `-SubstTemplateTypeParmType 0x563645390100 'void *' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-PointerType 0x563644c8dad0 'void *'
|         `-BuiltinType 0x563644c8d2d0 'void'
|-TypedefDecl 0x5636453913e8 <line:121:5, col:16> col:16 pointer 'void **'
| `-PointerType 0x5636453913b0 'void **'
|   `-SubstTemplateTypeParmType 0x563645390100 'void *' sugar
|     |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563644f8f2a8 'T'
|     `-PointerType 0x563644c8dad0 'void *'
|       `-BuiltinType 0x563644c8d2d0 'void'
|-TypedefDecl 0x563645391478 <line:122:5, col:22> col:22 const_pointer 'void *const *'
| `-PointerType 0x563645391440 'void *const *'
|   `-QualType 0x563645390101 'void *const' const
|     `-SubstTemplateTypeParmType 0x563645390100 'void *' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-PointerType 0x563644c8dad0 'void *'
|         `-BuiltinType 0x563644c8d2d0 'void'
|-TypedefDecl 0x563645392060 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<void *>::type':'void *'
| `-ElaboratedType 0x563645392010 'typename fast_argument<void *>::type' sugar
|   `-TypedefType 0x563645391ff0 'fast_argument<void *, false>::type' sugar
|     |-Typedef 0x563645391f80 'type'
|     `-SubstTemplateTypeParmType 0x563645391d40 'void *' sugar
|       |-TemplateTypeParmType 0x563644f62410 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f623c0 'T'
|       `-PointerType 0x563644c8dad0 'void *'
|         `-BuiltinType 0x563644c8d2d0 'void'
|-TypedefDecl 0x5636453920c8 <line:126:5, col:22> col:22 const_access_type 'void *const &'
| `-LValueReferenceType 0x563645391320 'void *const &'
|   `-QualType 0x563645390101 'void *const' const
|     `-SubstTemplateTypeParmType 0x563645390100 'void *' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-PointerType 0x563644c8dad0 'void *'
|         `-BuiltinType 0x563644c8d2d0 'void'
|-TypedefDecl 0x563645392120 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563644c8d370 'int'
|-TypedefDecl 0x563645392188 <line:130:5, col:16> col:16 iterator 'void **'
| `-PointerType 0x5636453913b0 'void **'
|   `-SubstTemplateTypeParmType 0x563645390100 'void *' sugar
|     |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563644f8f2a8 'T'
|     `-PointerType 0x563644c8dad0 'void *'
|       `-BuiltinType 0x563644c8d2d0 'void'
|-TypedefDecl 0x5636453921f0 <line:131:5, col:22> col:22 const_iterator 'void *const *'
| `-PointerType 0x563645391440 'void *const *'
|   `-QualType 0x563645390101 'void *const' const
|     `-SubstTemplateTypeParmType 0x563645390100 'void *' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-PointerType 0x563644c8dad0 'void *'
|         `-BuiltinType 0x563644c8d2d0 'void'
|-EnumDecl 0x563645392248 <line:134:5> col:5
| `-EnumConstantDecl 0x563645392340 <col:12, col:40> col:12 RESERVE_GROW 'Vector<void *>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x563645392320 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x563644f90ba8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x563644f90b80 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x563644f90b60 <col:40> 'int' 1
|-CXXConstructorDecl 0x5636453923c8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x563645392618 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<void *>::value_argument_type)' inline
| |-ParmVarDecl 0x563645392480 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x563645392520 <col:41, col:61> col:61 v 'Vector<void *>::value_argument_type':'void *'
|-CXXConstructorDecl 0x5636453928d8 <line:139:5, col:37> col:12 Vector 'void (const Vector<void *> &)' inline
| `-ParmVarDecl 0x5636453927c0 <col:19, col:36> col:36 x 'const Vector<void *> &'
|-CXXConstructorDecl 0x563645395340 <line:141:5, col:32> col:12 Vector 'void (Vector<void *> &&)' inline
| `-ParmVarDecl 0x563645392a80 <col:19, col:31> col:31 x 'Vector<void *> &&'
|-CXXMethodDecl 0x563645395680 <line:144:5, col:51> col:23 operator= 'Vector<void *> &(const Vector<void *> &)' inline
| `-ParmVarDecl 0x563645395560 <col:33, col:50> col:50 x 'const Vector<void *> &'
|-CXXMethodDecl 0x563645395990 <line:146:5, col:46> col:23 operator= 'Vector<void *> &(Vector<void *> &&)' inline
| `-ParmVarDecl 0x563645395870 <col:33, col:45> col:45 x 'Vector<void *> &&'
|-CXXMethodDecl 0x563645395c80 <line:148:5, col:70> col:23 assign 'Vector<void *> &(Vector::size_type, Vector<void *>::value_argument_type)' inline
| |-ParmVarDecl 0x563645395ac8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x563645395b40 <col:43, col:69> col:63 v 'Vector<void *>::value_argument_type':'void *'
|-CXXMethodDecl 0x563645395dd8 <line:150:5, col:55> col:49 begin 'Vector<void *>::iterator ()'
| |-NoInlineAttr 0x563645395eb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x563645395f10 <col:30> Inherited
|-CXXMethodDecl 0x563645395f58 <line:151:5, col:53> col:49 end 'Vector<void *>::iterator ()'
| |-NoInlineAttr 0x563645396008 <col:20> Inherited
| `-OptimizeNoneAttr 0x563645396060 <col:30> Inherited
|-CXXMethodDecl 0x563645396128 <line:152:5, col:63> col:55 begin 'Vector<void *>::const_iterator () const'
| |-NoInlineAttr 0x5636453961d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x563645396230 <col:30> Inherited
|-CXXMethodDecl 0x563645396278 <line:153:5, col:61> col:55 end 'Vector<void *>::const_iterator () const'
| |-NoInlineAttr 0x563645396328 <col:20> Inherited
| `-OptimizeNoneAttr 0x563645396380 <col:30> Inherited
|-CXXMethodDecl 0x5636453963c8 <line:154:5, col:64> col:55 cbegin 'Vector<void *>::const_iterator () const'
| |-NoInlineAttr 0x563645396478 <col:20> Inherited
| `-OptimizeNoneAttr 0x5636453964d0 <col:30> Inherited
|-CXXMethodDecl 0x563645396518 <line:155:5, col:62> col:55 cend 'Vector<void *>::const_iterator () const'
| |-NoInlineAttr 0x5636453965c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x563645396620 <col:30> Inherited
|-CXXMethodDecl 0x563645396648 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5636453966f8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5636453967a8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x563645396968 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<void *>::value_argument_type)' inline
| |-ParmVarDecl 0x563645396858 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5636453968d0 <col:37, col:63> col:57 v 'Vector<void *>::value_argument_type':'void *'
|-CXXMethodDecl 0x563645396ab8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x563645396a28 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x563645396c68 <line:163:5, col:65> col:43 operator[] 'void *&(Vector::size_type)'
| |-ParmVarDecl 0x563645396b70 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x563645396d20 <col:20>
| `-OptimizeNoneAttr 0x563645396d78 <col:30>
|-CXXMethodDecl 0x563645396e98 <line:164:5, col:73> col:49 operator[] 'void *const &(Vector::size_type) const'
| |-ParmVarDecl 0x563645396da0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x563645396f50 <col:20>
| `-OptimizeNoneAttr 0x563645396fa8 <col:30>
|-CXXMethodDecl 0x563645397060 <line:165:5, col:29> col:15 at 'void *&(Vector::size_type)' inline
| `-ParmVarDecl 0x563645396fd0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5636453971a8 <line:166:5, col:37> col:21 at 'void *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x563645397118 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5636453972d8 <line:167:5, col:21> col:15 front 'void *&()' inline
|-CXXMethodDecl 0x563645397408 <line:168:5, col:29> col:21 front 'void *const &() const' inline
|-CXXMethodDecl 0x5636453974d8 <line:169:5, col:20> col:15 back 'void *&()' inline
|-CXXMethodDecl 0x5636453975a8 <line:170:5, col:28> col:21 back 'void *const &() const' inline
|-CXXMethodDecl 0x5636453976e8 <line:172:5, col:39> col:15 unchecked_at 'void *&(Vector::size_type)' inline
| `-ParmVarDecl 0x563645397658 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563645397830 <line:173:5, col:47> col:21 unchecked_at 'void *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5636453977a0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563645397978 <line:174:5, col:59> col:15 at_u 'void *&(Vector::size_type)' inline
| |-ParmVarDecl 0x5636453978e8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x563645397a30 <col:48> Inherited "" ""
|-CXXMethodDecl 0x563645397b30 <line:175:5, col:71> col:21 at_u 'void *const &(Vector::size_type) const' inline
| |-ParmVarDecl 0x563645397aa0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x563645397be8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x563645397ca8 <line:177:5, col:20> col:15 data 'void **()' inline
|-CXXMethodDecl 0x563645397da8 <line:178:5, col:28> col:21 data 'void *const *() const' inline
|-CXXMethodDecl 0x563645397f28 <line:180:5, col:48> col:17 push_back 'void (Vector<void *>::value_argument_type)' inline
| `-ParmVarDecl 0x563645397e68 <col:27, col:47> col:47 v 'Vector<void *>::value_argument_type':'void *'
|-FunctionTemplateDecl 0x5636453986e8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x563645397fe0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<void *>':'fast_argument<void *, false>'
| `-CXXMethodDecl 0x563645398648 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (void *&&)' inline
|   `-ParmVarDecl 0x563645398548 <col:58, col:62> col:62 v 'void *&&'
|-CXXMethodDecl 0x5636453987c8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x563645398918 <line:186:5, col:49> col:17 push_front 'void (Vector<void *>::value_argument_type)' inline
| `-ParmVarDecl 0x563645398888 <col:28, col:48> col:48 v 'Vector<void *>::value_argument_type':'void *'
|-CXXMethodDecl 0x5636453989d0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x563645398c18 <line:189:5, col:62> col:21 insert 'Vector<void *>::iterator (Vector<void *>::iterator, Vector<void *>::value_argument_type)' inline
| |-ParmVarDecl 0x563645398a90 <col:28, col:37> col:37 it 'Vector<void *>::iterator':'void **'
| `-ParmVarDecl 0x563645398b08 <col:41, col:61> col:61 v 'Vector<void *>::value_argument_type':'void *'
|-CXXMethodDecl 0x563645398dd8 <line:190:5, col:38> col:21 erase 'Vector<void *>::iterator (Vector<void *>::iterator)' inline
| `-ParmVarDecl 0x563645398ce8 <col:27, col:36> col:36 it 'Vector<void *>::iterator':'void **'
|-CXXMethodDecl 0x563645399028 <line:191:5, col:49> col:21 erase 'Vector<void *>::iterator (Vector<void *>::iterator, Vector<void *>::iterator)' inline
| |-ParmVarDecl 0x563645398ea0 <col:27, col:36> col:36 a 'Vector<void *>::iterator':'void **'
| `-ParmVarDecl 0x563645398f18 <col:39, col:48> col:48 b 'Vector<void *>::iterator':'void **'
|-CXXMethodDecl 0x5636453990e8 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x563645399348 <line:195:5, col:34> col:17 swap 'void (Vector<void *> &)' inline
| `-ParmVarDecl 0x563645399250 <col:22, col:33> col:33 x 'Vector<void *> &'
`-CXXDestructorDecl 0x563645399418 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x563645399418

Layout: <CGRecordLayout
  LLVMType:%class.Vector.12 = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector.12 = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Router::notifier_signals_t
         0 |   class String name
         0 |     struct String::rep_t _r
         0 |       const char * data
         8 |       int length
        16 |       struct String::memo_t * memo
        24 |   int nsig
        28 |   class atomic_uint32_t [128] sig
       544 |   struct Router::notifier_signals_t * next
           | [sizeof=552, dsize=552, align=8,
           |  nvsize=552, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563645399610 <../dummy_inc/click/router.hh:280:5, line:290:5> line:280:12 referenced struct notifier_signals_t definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-CXXRecordDecl 0x563645399728 <col:5, col:12> col:12 implicit referenced struct notifier_signals_t
|-EnumDecl 0x5636453997b8 <line:281:9, col:32> col:9
| `-EnumConstantDecl 0x5636453998c0 <col:16, col:27> col:16 referenced capacity 'Router::notifier_signals_t::(anonymous enum at ../dummy_inc/click/router.hh:281:9)'
|   `-ImplicitCastExpr 0x563645399910 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5636453998a0 <col:27> 'int' Int: 4096
|       `-IntegerLiteral 0x563645399880 <col:27> 'int' 4096
|-FieldDecl 0x563645399938 <line:282:9, col:16> col:16 name 'String'
|-FieldDecl 0x5636453999a0 <line:283:9, col:13> col:13 nsig 'int'
|-FieldDecl 0x563645399b98 <line:284:9, col:42> col:25 referenced sig 'atomic_uint32_t [128]'
|-FieldDecl 0x563645399c28 <line:285:9, col:29> col:29 next 'Router::notifier_signals_t *'
|-CXXConstructorDecl 0x563645399de8 <line:286:9, line:289:9> line:286:9 notifier_signals_t 'void (const String &, Router::notifier_signals_t *)'
| |-ParmVarDecl 0x563645399c88 <col:28, col:42> col:42 used n 'const String &'
| |-ParmVarDecl 0x563645399d00 <col:45, col:65> col:65 used nx 'Router::notifier_signals_t *'
| |-CXXCtorInitializer Field 0x563645399938 'name' 'String'
| | `-CXXConstructExpr 0x5636453a4928 <line:287:15, col:21> 'String' 'void (const String &)'
| |   `-DeclRefExpr 0x5636453a48e8 <col:20> 'const String' lvalue ParmVar 0x563645399c88 'n' 'const String &'
| |-CXXCtorInitializer Field 0x5636453999a0 'nsig' 'int'
| | `-IntegerLiteral 0x5636453a4980 <col:29> 'int' 0
| |-CXXCtorInitializer Field 0x563645399b98 'sig' 'atomic_uint32_t [128]'
| | `-CXXConstructExpr 0x5636453a4a68 <line:286:9> 'atomic_uint32_t [128]' 'void () noexcept'
| |-CXXCtorInitializer Field 0x563645399c28 'next' 'Router::notifier_signals_t *'
| | `-ImplicitCastExpr 0x5636453a4a28 <line:287:38> 'Router::notifier_signals_t *' <LValueToRValue>
| |   `-DeclRefExpr 0x5636453a49e8 <col:38> 'Router::notifier_signals_t *' lvalue ParmVar 0x563645399d00 'nx' 'Router::notifier_signals_t *'
| `-CompoundStmt 0x5636453a4cf8 <col:42, line:289:9>
|   `-CallExpr 0x5636453a4ca8 <line:288:13, col:43> 'void *'
|     |-ImplicitCastExpr 0x5636453a4c90 <col:13> 'void *(*)(void *, int, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5636453a4c70 <col:13> 'void *(void *, int, size_t) throw()' lvalue Function 0x563644ef1cc8 'memset' 'void *(void *, int, size_t) throw()'
|     |-ImplicitCastExpr 0x5636453a4ce0 <col:20, col:26> 'void *' <BitCast>
|     | `-UnaryOperator 0x5636453a4bb8 <col:20, col:26> 'atomic_uint32_t *' prefix '&' cannot overflow
|     |   `-ArraySubscriptExpr 0x5636453a4b98 <col:21, col:26> 'atomic_uint32_t' lvalue
|     |     |-ImplicitCastExpr 0x5636453a4b80 <col:21> 'atomic_uint32_t *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5636453a4b30 <col:21> 'atomic_uint32_t [128]' lvalue ->sig 0x563645399b98
|     |     |   `-CXXThisExpr 0x5636453a4b20 <col:21> 'Router::notifier_signals_t *' implicit this
|     |     `-IntegerLiteral 0x5636453a4b60 <col:25> 'int' 0
|     |-IntegerLiteral 0x5636453a4bd0 <col:29> 'int' 0
|     `-UnaryExprOrTypeTraitExpr 0x5636453a4c50 <col:32, col:42> 'unsigned long' sizeof
|       `-ParenExpr 0x5636453a4c30 <col:38, col:42> 'atomic_uint32_t [128]' lvalue
|         `-MemberExpr 0x5636453a4c00 <col:39> 'atomic_uint32_t [128]' lvalue ->sig 0x563645399b98 non_odr_use_unevaluated
|           `-CXXThisExpr 0x5636453a4bf0 <col:39> 'Router::notifier_signals_t *' implicit this
|-CXXConstructorDecl 0x563645399ec8 <line:280:12> col:12 implicit notifier_signals_t 'void (const Router::notifier_signals_t &)' inline default noexcept-unevaluated 0x563645399ec8
| `-ParmVarDecl 0x563645399fd8 <col:12> col:12 'const Router::notifier_signals_t &'
|-CXXConstructorDecl 0x56364539a078 <col:12> col:12 implicit notifier_signals_t 'void (Router::notifier_signals_t &&)' inline default noexcept-unevaluated 0x56364539a078
| `-ParmVarDecl 0x56364539a188 <col:12> col:12 'Router::notifier_signals_t &&'
|-CXXMethodDecl 0x56364539a228 <col:12> col:12 implicit operator= 'Router::notifier_signals_t &(const Router::notifier_signals_t &)' inline default noexcept-unevaluated 0x56364539a228
| `-ParmVarDecl 0x56364539a338 <col:12> col:12 'const Router::notifier_signals_t &'
|-CXXMethodDecl 0x56364539a3a8 <col:12> col:12 implicit operator= 'Router::notifier_signals_t &(Router::notifier_signals_t &&)' inline default noexcept-unevaluated 0x56364539a3a8
| `-ParmVarDecl 0x56364539a4b8 <col:12> col:12 'Router::notifier_signals_t &&'
`-CXXDestructorDecl 0x56364539a540 <col:12> col:12 implicit ~notifier_signals_t 'void ()' inline default noexcept-unevaluated 0x56364539a540

Layout: <CGRecordLayout
  LLVMType:%"struct.Router::notifier_signals_t" = type { %class.String, i32, [128 x %class.atomic_uint32_t], %"struct.Router::notifier_signals_t"* }
  NonVirtualBaseLLVMType:%"struct.Router::notifier_signals_t" = type { %class.String, i32, [128 x %class.atomic_uint32_t], %"struct.Router::notifier_signals_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ThreadSched
         0 |   (ThreadSched vtable pointer)
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563645366228 <../dummy_inc/click/standard/threadsched.hh:6:1, line:15:1> line:6:7 class ThreadSched definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x563645366348 <col:1, col:7> col:7 implicit referenced class ThreadSched
|-AccessSpecDecl 0x5636453663d8 <col:21, col:27> col:21 public
|-EnumDecl 0x563645366400 <line:8:5, col:58> col:5
| |-EnumConstantDecl 0x563645366518 <col:12, col:32> col:12 THREAD_QUIESCENT 'ThreadSched::(anonymous enum at ../dummy_inc/click/standard/threadsched.hh:8:5)'
| | `-ConstantExpr 0x5636453664f8 <col:31, col:32> 'int' Int: -1
| |   `-UnaryOperator 0x5636453664e0 <col:31, col:32> 'int' prefix '-'
| |     `-IntegerLiteral 0x5636453664c0 <col:32> 'int' 1
| `-EnumConstantDecl 0x5636453665c0 <col:35, col:53> col:35 THREAD_UNKNOWN 'ThreadSched::(anonymous enum at ../dummy_inc/click/standard/threadsched.hh:8:5)'
|   `-ConstantExpr 0x5636453665a0 <col:52, col:53> 'int' Int: -1000
|     `-UnaryOperator 0x563645366588 <col:52, col:53> 'int' prefix '-'
|       `-IntegerLiteral 0x563645366568 <col:53> 'int' 1000
|-CXXConstructorDecl 0x563645366670 <line:10:5, col:21> col:5 ThreadSched 'void ()'
| `-CompoundStmt 0x563645366ba8 <col:19, col:21>
|-CXXDestructorDecl 0x563645366760 <line:11:5, col:30> col:13 ~ThreadSched 'void () noexcept' virtual
| `-CompoundStmt 0x563645366bb8 <col:28, col:30>
|-CXXMethodDecl 0x563645366920 <line:13:5, col:56> col:17 initial_home_thread_id 'int (const Element *)' virtual
| `-ParmVarDecl 0x563645366850 <col:40, col:55> col:55 e 'const Element *'
`-CXXMethodDecl 0x563645366a28 <line:6:7> col:7 implicit operator= 'ThreadSched &(const ThreadSched &)' inline default noexcept-unevaluated 0x563645366a28
  `-ParmVarDecl 0x563645366b38 <col:7> col:7 'const ThreadSched &'

Layout: <CGRecordLayout
  LLVMType:%class.ThreadSched = type { i32 (...)** }
  NonVirtualBaseLLVMType:%class.ThreadSched = type { i32 (...)** }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563645367160 prev 0x56364533da70 <../dummy_inc/click/router.hh:23:1, line:352:1> line:23:7 referenced class Router definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-CXXRecordDecl 0x563645367258 <col:1, col:7> col:7 implicit referenced class Router
|-AccessSpecDecl 0x5636453672e8 <col:16, col:22> col:16 public
|-CXXMethodDecl 0x563645367358 <line:28:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x563645367418 <line:31:5, col:31> col:17 used initialized 'bool () const' inline
|-CXXMethodDecl 0x5636453674d8 <line:32:5, col:34> col:17 handlers_ready 'bool () const' inline
|-CXXMethodDecl 0x563645367598 <line:33:5, col:27> col:17 running 'bool () const' inline
|-CXXMethodDecl 0x563645367658 <line:34:5, col:25> col:17 dying 'bool () const' inline
|-EnumDecl 0x5636453676f8 <line:37:5, col:44> col:5
| `-EnumConstantDecl 0x563645367858 <col:12, col:42> col:12 STOP_RUNCOUNT 'Router::(anonymous enum at ../dummy_inc/click/router.hh:37:5)'
|   `-ConstantExpr 0x563645367838 <col:28, col:42> 'int' Int: -2147483648
|     `-BinaryOperator 0x563645367818 <col:28, col:42> 'int' '-'
|       |-UnaryOperator 0x5636453677e0 <col:28, col:29> 'int' prefix '-'
|       | `-IntegerLiteral 0x5636453677c0 <col:29> 'int' 2147483647
|       `-IntegerLiteral 0x5636453677f8 <col:42> 'int' 1
|-CXXMethodDecl 0x5636453678f8 <line:38:5, col:31> col:20 runcount 'int32_t () const' inline
|-CXXMethodDecl 0x563645367a68 <line:39:5, col:39> col:10 used adjust_runcount 'void (int32_t)'
| `-ParmVarDecl 0x5636453679a8 <col:26, col:34> col:34 delta 'int32_t':'int'
|-CXXMethodDecl 0x563645367bb0 <line:40:5, col:33> col:10 set_runcount 'void (int32_t)'
| `-ParmVarDecl 0x563645367b20 <col:23, col:31> col:31 rc 'int32_t':'int'
|-CXXMethodDecl 0x563645367c78 <line:41:5, col:36> col:17 please_stop_driver 'void ()' inline
|-CXXMethodDecl 0x563645367fa0 <line:44:5, col:47> col:36 elements 'const Vector<Element *> &() const' inline
|-CXXMethodDecl 0x563645368068 <line:45:5, col:28> col:16 nelements 'int () const' inline
|-CXXMethodDecl 0x5636453681e8 <line:46:5, col:36> col:21 element 'Element *(int) const' inline
| `-ParmVarDecl 0x563645368120 <col:29, col:33> col:33 i 'int'
|-CXXMethodDecl 0x5636453682b0 <line:47:5, col:36> col:21 root_element 'Element *() const' inline
|-CXXMethodDecl 0x5636453684b8 <line:48:5, col:56> col:21 used element 'Element *(const Router *, int)' static
| |-ParmVarDecl 0x563645368360 <col:29, col:43> col:43 router 'const Router *'
| `-ParmVarDecl 0x5636453683e0 <col:51, col:55> col:55 i 'int'
|-CXXMethodDecl 0x563645368610 <line:50:5, col:32> col:19 ename 'const String &(int) const'
| `-ParmVarDecl 0x563645368580 <col:25, col:29> col:29 i 'int'
|-CXXMethodDecl 0x563645368760 <line:51:5, col:33> col:12 ename_context 'String (int) const'
| `-ParmVarDecl 0x5636453686d0 <col:26, col:30> col:30 i 'int'
|-CXXMethodDecl 0x5636453688b0 <line:52:5, col:29> col:12 elandmark 'String (int) const'
| `-ParmVarDecl 0x563645368820 <col:22, col:26> col:26 i 'int'
|-CXXMethodDecl 0x563645368a00 <line:53:5, col:41> col:19 econfiguration 'const String &(int) const'
| `-ParmVarDecl 0x563645368970 <col:34, col:38> col:38 i 'int'
|-CXXMethodDecl 0x563645368bd0 <line:54:5, col:54> col:10 set_econfiguration 'void (int, const String &)'
| |-ParmVarDecl 0x563645368ac0 <col:29, col:33> col:33 i 'int'
| `-ParmVarDecl 0x563645368b38 <col:36, col:50> col:50 conf 'const String &'
|-CXXMethodDecl 0x563645368dd8 <line:56:5, col:63> col:14 find 'Element *(const String &, ErrorHandler *) const'
| |-ParmVarDecl 0x563645368c90 <col:19, col:33> col:33 name 'const String &'
| `-ParmVarDecl 0x563645368d08 <col:39, col:60> col:53 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5636453a1570 <col:60> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5636453a1550 <col:60> 'int' 0
|-CXXMethodDecl 0x563645369068 <line:57:5, col:79> col:14 used find 'Element *(const String &, String, ErrorHandler *) const'
| |-ParmVarDecl 0x563645368e98 <col:19, col:33> col:33 name 'const String &'
| |-ParmVarDecl 0x563645368f10 <col:39, col:46> col:46 context 'String' destroyed
| `-ParmVarDecl 0x563645368f88 <col:55, col:76> col:69 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5636453a15a8 <col:76> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5636453a1588 <col:76> 'int' 0
|-CXXMethodDecl 0x563645369308 <line:58:5, col:87> col:14 find 'Element *(const String &, const Element *, ErrorHandler *) const'
| |-ParmVarDecl 0x563645369130 <col:19, col:33> col:33 name 'const String &'
| |-ParmVarDecl 0x5636453691a8 <col:39, col:54> col:54 context 'const Element *'
| `-ParmVarDecl 0x563645369220 <col:63, col:84> col:77 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5636453a15e0 <col:84> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5636453a15c0 <col:84> 'int' 0
|-CXXMethodDecl 0x563645369660 <line:60:5, col:76> col:9 used visit 'int (Element *, bool, int, RouterVisitor *) const'
| |-ParmVarDecl 0x5636453693d0 <col:15, col:24> col:24 e 'Element *'
| |-ParmVarDecl 0x563645369448 <col:27, col:32> col:32 isoutput 'bool'
| |-ParmVarDecl 0x5636453694c8 <col:42, col:46> col:46 port 'int'
| `-ParmVarDecl 0x563645369568 <col:52, col:67> col:67 visitor 'RouterVisitor *'
|-CXXMethodDecl 0x563645369910 <line:61:5, col:72> col:9 visit_downstream 'int (Element *, int, RouterVisitor *) const'
| |-ParmVarDecl 0x563645369730 <col:26, col:35> col:35 e 'Element *'
| |-ParmVarDecl 0x5636453697b0 <col:38, col:42> col:42 port 'int'
| `-ParmVarDecl 0x563645369828 <col:48, col:63> col:63 visitor 'RouterVisitor *'
|-CXXMethodDecl 0x563645369b78 <line:62:5, col:70> col:9 visit_upstream 'int (Element *, int, RouterVisitor *) const'
| |-ParmVarDecl 0x5636453699d8 <col:24, col:33> col:33 e 'Element *'
| |-ParmVarDecl 0x563645369a58 <col:36, col:40> col:40 port 'int'
| `-ParmVarDecl 0x563645369ad0 <col:46, col:61> col:61 visitor 'RouterVisitor *'
|-CXXMethodDecl 0x56364536a030 <line:64:5, col:126> col:9 downstream_elements 'int (Element *, int, ElementFilter *, Vector<Element *> &)'
| |-ParmVarDecl 0x563645369c40 <col:29, col:38> col:38 e 'Element *'
| |-ParmVarDecl 0x563645369cc0 <col:41, col:45> col:45 port 'int'
| |-ParmVarDecl 0x563645369d68 <col:51, col:66> col:66 filter 'ElementFilter *'
| |-ParmVarDecl 0x563645369ee0 <col:74, col:92> col:92 result 'Vector<Element *> &'
| `-DeprecatedAttr 0x56364536a0f0 <col:115> "" ""
|-CXXMethodDecl 0x56364536a4b0 <line:65:5, col:124> col:9 upstream_elements 'int (Element *, int, ElementFilter *, Vector<Element *> &)'
| |-ParmVarDecl 0x56364536a170 <col:27, col:36> col:36 e 'Element *'
| |-ParmVarDecl 0x56364536a1f0 <col:39, col:43> col:43 port 'int'
| |-ParmVarDecl 0x56364536a268 <col:49, col:64> col:64 filter 'ElementFilter *'
| |-ParmVarDecl 0x56364536a3b0 <col:72, col:90> col:90 result 'Vector<Element *> &'
| `-DeprecatedAttr 0x56364536a570 <col:113> "" ""
|-CXXMethodDecl 0x56364536a6c0 <line:67:5, col:55> col:24 flow_code_override 'const char *(int) const' inline
| `-ParmVarDecl 0x56364536a5f8 <col:43, col:47> col:47 eindex 'int'
|-CXXMethodDecl 0x56364536a890 <line:68:5, col:68> col:10 set_flow_code_override 'void (int, const String &)'
| |-ParmVarDecl 0x56364536a780 <col:33, col:37> col:37 eindex 'int'
| `-ParmVarDecl 0x56364536a7f8 <col:45, col:59> col:59 flow_code 'const String &'
|-CXXMethodDecl 0x56364536aa98 <line:72:5, col:72> col:27 handler 'const Handler *(const Element *, const String &)' static
| |-ParmVarDecl 0x56364536a950 <col:35, col:50> col:50 e 'const Element *'
| `-ParmVarDecl 0x56364536a9c8 <col:53, col:67> col:67 hname 'const String &'
|-CXXMethodDecl 0x56364536ae98 <line:73:5, col:138> col:17 add_read_handler 'void (const Element *, const String &, ReadHandlerCallback, void *, uint32_t)' static
| |-ParmVarDecl 0x56364536ab58 <col:34, col:49> col:49 e 'const Element *'
| |-ParmVarDecl 0x56364536abd0 <col:52, col:66> col:66 hname 'const String &'
| |-ParmVarDecl 0x56364536ac48 <col:73, col:93> col:93 callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x56364536acc8 <col:103, col:109> col:109 user_data 'void *'
| `-ParmVarDecl 0x56364536ad40 <col:120, col:137> col:129 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5636453a1618 <col:137> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5636453a15f8 <col:137> 'int' 0
|-CXXMethodDecl 0x56364536b2a8 <line:74:5, col:140> col:17 add_write_handler 'void (const Element *, const String &, WriteHandlerCallback, void *, uint32_t)' static
| |-ParmVarDecl 0x56364536af70 <col:35, col:50> col:50 e 'const Element *'
| |-ParmVarDecl 0x56364536afe8 <col:53, col:67> col:67 hname 'const String &'
| |-ParmVarDecl 0x56364536b060 <col:74, col:95> col:95 callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x56364536b0e0 <col:105, col:111> col:111 user_data 'void *'
| `-ParmVarDecl 0x56364536b158 <col:122, col:139> col:131 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5636453a1650 <col:139> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5636453a1630 <col:139> 'int' 0
|-CXXMethodDecl 0x56364536b758 <line:75:5, col:161> col:17 set_handler 'void (const Element *, const String &, uint32_t, HandlerCallback, void *, void *)' static
| |-ParmVarDecl 0x56364536b380 <col:29, col:44> col:44 e 'const Element *'
| |-ParmVarDecl 0x56364536b3f8 <col:47, col:61> col:61 hname 'const String &'
| |-ParmVarDecl 0x56364536b470 <col:68, col:77> col:77 flags 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56364536b4e8 <col:84, col:100> col:100 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x56364536b568 <col:110, col:133> col:116 read_user_data 'void *' cinit
| | `-ImplicitCastExpr 0x5636453a1688 <col:133> 'void *' <NullToPointer>
| |   `-IntegerLiteral 0x5636453a1668 <col:133> 'int' 0
| `-ParmVarDecl 0x56364536b5e8 <col:136, col:160> col:142 write_user_data 'void *' cinit
|   `-ImplicitCastExpr 0x5636453a16c0 <col:160> 'void *' <NullToPointer>
|     `-IntegerLiteral 0x5636453a16a0 <col:160> 'int' 0
|-CXXMethodDecl 0x56364536baf0 <line:76:5, col:117> col:16 set_handler_flags 'int (const Element *, const String &, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x56364536b838 <col:34, col:49> col:49 e 'const Element *'
| |-ParmVarDecl 0x56364536b8b0 <col:52, col:66> col:66 hname 'const String &'
| |-ParmVarDecl 0x56364536b928 <col:73, col:82> col:82 set_flags 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56364536b9a0 <col:93, col:116> col:102 clear_flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5636453a16f8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5636453a16d8 <col:116> 'int' 0
|-EnumDecl 0x56364536bbb0 <line:78:5, col:46> col:5
| `-EnumConstantDecl 0x56364536bcb0 <col:12, col:35> col:12 FIRST_GLOBAL_HANDLER 'Router::(anonymous enum at ../dummy_inc/click/router.hh:78:5)'
|   `-ImplicitCastExpr 0x56364536bd00 <col:35> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56364536bc90 <col:35> 'int' Int: 1073741824
|       `-IntegerLiteral 0x56364536bc70 <col:35> 'int' 1073741824
|-CXXMethodDecl 0x56364536be80 <line:79:5, col:60> col:16 hindex 'int (const Element *, const String &)' static
| |-ParmVarDecl 0x56364536bd28 <col:23, col:38> col:38 e 'const Element *'
| `-ParmVarDecl 0x56364536bda0 <col:41, col:55> col:55 hname 'const String &'
|-CXXMethodDecl 0x56364536c098 <line:80:5, col:67> col:27 handler 'const Handler *(const Router *, int)' static
| |-ParmVarDecl 0x56364536bf40 <col:35, col:49> col:49 router 'const Router *'
| `-ParmVarDecl 0x56364536bfc0 <col:57, col:61> col:61 hindex 'int'
|-CXXMethodDecl 0x56364536c3c8 <line:81:5, col:71> col:17 element_hindexes 'void (const Element *, Vector<int> &)' static
| |-ParmVarDecl 0x56364536c158 <col:34, col:49> col:49 e 'const Element *'
| `-ParmVarDecl 0x56364536c2b0 <col:52, col:65> col:65 result 'Vector<int> &'
|-CXXMethodDecl 0x56364536c550 <line:84:5, col:43> col:11 attachment 'void *(const String &) const'
| `-ParmVarDecl 0x56364536c488 <col:22, col:36> col:36 aname 'const String &'
|-CXXMethodDecl 0x56364536c6d0 <line:85:5, col:48> col:12 force_attachment 'void *&(const String &)'
| `-ParmVarDecl 0x56364536c608 <col:29, col:43> col:43 aname 'const String &'
|-CXXMethodDecl 0x56364536c8e0 <line:86:5, col:58> col:11 set_attachment 'void *(const String &, void *)'
| |-ParmVarDecl 0x56364536c788 <col:26, col:40> col:40 aname 'const String &'
| `-ParmVarDecl 0x56364536c808 <col:47, col:53> col:53 value 'void *'
|-CXXMethodDecl 0x56364536ca68 <line:88:5, col:63> col:19 chatter_channel 'ErrorHandler *(const String &) const'
| `-ParmVarDecl 0x56364536c9a0 <col:35, col:49> col:49 channel_name 'const String &'
|-CXXMethodDecl 0x56364536cb88 <line:89:5, col:43> col:27 arena_factory 'HashMap_ArenaFactory *() const'
|-CXXMethodDecl 0x56364536cc78 <line:91:5, col:40> col:25 thread_sched 'ThreadSched *() const' inline
|-CXXMethodDecl 0x56364536cde8 <line:92:5, col:56> col:17 set_thread_sched 'void (ThreadSched *)' inline
| `-ParmVarDecl 0x56364536cd28 <col:34, col:47> col:47 scheduler 'ThreadSched *'
|-CXXMethodDecl 0x56364536cf70 <line:93:5, col:49> col:16 home_thread_id 'int (const Element *) const' inline
| `-ParmVarDecl 0x56364536cea0 <col:31, col:46> col:46 e 'const Element *'
|-CXXMethodDecl 0x56364536d178 <line:94:5, col:69> col:17 set_home_thread_id 'void (const Element *, int)' inline
| |-ParmVarDecl 0x56364536d028 <col:36, col:51> col:51 e 'const Element *'
| `-ParmVarDecl 0x56364536d0a8 <col:54, col:58> col:58 home_thread 'int'
|-CXXMethodDecl 0x56364536d2a8 <line:98:5, col:34> col:22 name_info 'NameInfo *() const' inline
|-CXXMethodDecl 0x56364536d398 <line:99:5, col:31> col:15 force_name_info 'NameInfo *()'
|-CXXMethodDecl 0x56364536d458 <line:103:5, col:35> col:12 configuration_string 'String () const'
|-CXXMethodDecl 0x56364536d658 <line:104:5, col:68> col:10 unparse 'void (StringAccum &, const String &) const'
| |-ParmVarDecl 0x56364536d508 <col:18, col:31> col:31 sa 'StringAccum &'
| `-ParmVarDecl 0x56364536d580 <col:35, col:65> col:49 indent 'const String &' cinit
|   `-ExprWithCleanups 0x5636453a17a8 <col:58, col:65> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5636453a1790 <col:58, col:65> 'const String' lvalue
|       `-ImplicitCastExpr 0x5636453a1778 <col:58, col:65> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5636453a1758 <col:58, col:65> 'String' (CXXTemporary 0x5636453a1758)
|           `-CXXTemporaryObjectExpr 0x5636453a1720 <col:58, col:65> 'String' 'void ()'
|-CXXMethodDecl 0x56364536d828 <line:105:5, col:81> col:10 unparse_requirements 'void (StringAccum &, const String &) const'
| |-ParmVarDecl 0x56364536d718 <col:31, col:44> col:44 sa 'StringAccum &'
| `-ParmVarDecl 0x56364536d790 <col:48, col:78> col:62 indent 'const String &' cinit
|   `-ExprWithCleanups 0x5636453a1858 <col:71, col:78> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5636453a1840 <col:71, col:78> 'const String' lvalue
|       `-ImplicitCastExpr 0x5636453a1828 <col:71, col:78> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5636453a1808 <col:71, col:78> 'String' (CXXTemporary 0x5636453a1808)
|           `-CXXTemporaryObjectExpr 0x5636453a17d0 <col:71, col:78> 'String' 'void ()'
|-CXXMethodDecl 0x56364536d9f8 <line:106:5, col:81> col:10 unparse_declarations 'void (StringAccum &, const String &) const'
| |-ParmVarDecl 0x56364536d8e8 <col:31, col:44> col:44 sa 'StringAccum &'
| `-ParmVarDecl 0x56364536d960 <col:48, col:78> col:62 indent 'const String &' cinit
|   `-ExprWithCleanups 0x5636453a1908 <col:71, col:78> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5636453a18f0 <col:71, col:78> 'const String' lvalue
|       `-ImplicitCastExpr 0x5636453a18d8 <col:71, col:78> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5636453a18b8 <col:71, col:78> 'String' (CXXTemporary 0x5636453a18b8)
|           `-CXXTemporaryObjectExpr 0x5636453a1880 <col:71, col:78> 'String' 'void ()'
|-CXXMethodDecl 0x56364536dbc8 <line:107:5, col:80> col:10 unparse_connections 'void (StringAccum &, const String &) const'
| |-ParmVarDecl 0x56364536dab8 <col:30, col:43> col:43 sa 'StringAccum &'
| `-ParmVarDecl 0x56364536db30 <col:47, col:77> col:61 indent 'const String &' cinit
|   `-ExprWithCleanups 0x5636453a19b8 <col:70, col:77> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5636453a19a0 <col:70, col:77> 'const String' lvalue
|       `-ImplicitCastExpr 0x5636453a1988 <col:70, col:77> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5636453a1968 <col:70, col:77> 'String' (CXXTemporary 0x5636453a1968)
|           `-CXXTemporaryObjectExpr 0x5636453a1930 <col:70, col:77> 'String' 'void ()'
|-CXXMethodDecl 0x56364536dd48 <line:109:5, col:51> col:12 element_ports_string 'String (const Element *) const'
| `-ParmVarDecl 0x56364536dc88 <col:33, col:48> col:48 e 'const Element *'
|-CXXConstructorDecl 0x56364536df68 <line:115:5, col:55> col:5 Router 'void (const String &, Master *)'
| |-ParmVarDecl 0x56364536de00 <col:12, col:26> col:26 configuration 'const String &'
| `-ParmVarDecl 0x56364536de78 <col:41, col:49> col:49 master 'Master *'
|-CXXDestructorDecl 0x5636450a5890 <line:116:5, col:13> col:5 ~Router 'void ()' noexcept-unevaluated 0x5636450a5890
|-CXXMethodDecl 0x5636450a5990 <line:118:5, col:35> col:17 static_initialize 'void ()' static
|-CXXMethodDecl 0x5636450a5a50 <line:119:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5636450a5b10 <line:121:5, col:21> col:17 use 'void ()' inline
|-CXXMethodDecl 0x5636450a5bd0 <line:122:5, col:16> col:10 unuse 'void ()'
|-CXXMethodDecl 0x5636450a5dc8 <line:124:5, col:65> col:10 add_requirement 'void (const String &, const String &)'
| |-ParmVarDecl 0x5636450a5c80 <col:26, col:40> col:40 type 'const String &'
| `-ParmVarDecl 0x5636450a5cf8 <col:46, col:60> col:60 value 'const String &'
|-CXXMethodDecl 0x5636450a6180 <line:125:5, col:112> col:9 add_element 'int (Element *, const String &, const String &, const String &, unsigned int)'
| |-ParmVarDecl 0x5636450a5e88 <col:21, col:30> col:30 e 'Element *'
| |-ParmVarDecl 0x5636450a5f00 <col:33, col:47> col:47 name 'const String &'
| |-ParmVarDecl 0x5636450a5f78 <col:53, col:67> col:67 conf 'const String &'
| |-ParmVarDecl 0x5636450a5ff0 <col:73, col:87> col:87 filename 'const String &'
| `-ParmVarDecl 0x5636450a6070 <col:97, col:106> col:106 lineno 'unsigned int'
|-CXXMethodDecl 0x5636450a64e0 <line:126:5, col:76> col:9 add_connection 'int (int, int, int, int)'
| |-ParmVarDecl 0x5636450a6260 <col:24, col:28> col:28 from_idx 'int'
| |-ParmVarDecl 0x5636450a62e0 <col:38, col:42> col:42 from_port 'int'
| |-ParmVarDecl 0x5636450a6360 <col:53, col:57> col:57 to_idx 'int'
| `-ParmVarDecl 0x5636450a63e0 <col:65, col:69> col:69 to_port 'int'
|-CXXMethodDecl 0x5636450a65c0 <line:131:5, col:37> col:20 hotswap_router 'Router *() const' inline
|-CXXMethodDecl 0x5636450a6700 <line:132:5, col:43> col:10 set_hotswap_router 'void (Router *)'
| `-ParmVarDecl 0x5636450a6670 <col:29, col:37> col:37 router 'Router *'
|-CXXMethodDecl 0x5636450a6850 <line:134:5, col:38> col:9 initialize 'int (ErrorHandler *)'
| `-ParmVarDecl 0x5636450a67b8 <col:20, col:34> col:34 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5636450a6a58 <line:135:5, col:54> col:10 used activate 'void (bool, ErrorHandler *)'
| |-ParmVarDecl 0x5636450a6908 <col:19, col:24> col:24 foreground 'bool'
| `-ParmVarDecl 0x5636450a6980 <col:36, col:50> col:50 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5636450a6ba8 <line:136:5, col:44> col:17 activate 'void (ErrorHandler *)' inline
| `-ParmVarDecl 0x5636450a6b18 <col:26, col:40> col:40 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5636450a6cf0 <line:137:5, col:47> col:17 set_foreground 'void (bool)' inline
| `-ParmVarDecl 0x5636450a6c60 <col:32, col:37> col:37 foreground 'bool'
|-CXXMethodDecl 0x5636450a6f30 <line:139:5, col:69> col:9 new_notifier_signal 'int (const char *, NotifierSignal &)'
| |-ParmVarDecl 0x5636450a6db0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5636450a6e58 <col:47, col:63> col:63 signal 'NotifierSignal &'
|-CXXMethodDecl 0x5636450a70b8 <line:140:5, col:64> col:12 notifier_signal_name 'String (const atomic_uint32_t *) const'
| `-ParmVarDecl 0x5636450a6ff0 <col:33, col:56> col:56 signal 'const atomic_uint32_t *'
|-CXXRecordDecl 0x5636450a7160 <line:145:5, line:167:5> line:145:12 referenced struct Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5636450a7278 <col:5, col:12> col:12 implicit referenced struct Port
| |-FieldDecl 0x5636450a7320 <line:146:9, col:13> col:13 referenced idx 'int'
| |-FieldDecl 0x5636450a7388 <line:147:9, col:13> col:13 referenced port 'int'
| |-CXXConstructorDecl 0x5636450a7440 <line:149:9, line:150:9> line:149:9 used Port 'void ()'
| | `-CompoundStmt 0x5636453a19e0 <col:16, line:150:9>
| |-CXXConstructorDecl 0x5636450a7618 <line:151:9, line:153:9> line:151:9 used Port 'void (int, int)'
| | |-ParmVarDecl 0x5636450a7500 <col:14, col:18> col:18 used i 'int'
| | |-ParmVarDecl 0x5636450a7580 <col:21, col:25> col:25 used p 'int'
| | |-CXXCtorInitializer Field 0x5636450a7320 'idx' 'int'
| | | `-ImplicitCastExpr 0x5636453a1a30 <line:152:19> 'int' <LValueToRValue>
| | |   `-DeclRefExpr 0x5636453a19f0 <col:19> 'int' lvalue ParmVar 0x5636450a7500 'i' 'int'
| | |-CXXCtorInitializer Field 0x5636450a7388 'port' 'int'
| | | `-ImplicitCastExpr 0x5636453a1ab0 <col:28> 'int' <LValueToRValue>
| | |   `-DeclRefExpr 0x5636453a1a70 <col:28> 'int' lvalue ParmVar 0x5636450a7580 'p' 'int'
| | `-CompoundStmt 0x5636453a1b00 <col:31, line:153:9>
| |-CXXMethodDecl 0x5636450a77f8 <line:155:9, line:157:9> line:155:14 used operator== 'bool (const Router::Port &) const'
| | |-ParmVarDecl 0x5636450a7708 <col:25, col:37> col:37 used x 'const Router::Port &'
| | `-CompoundStmt 0x5636453a1d00 <col:46, line:157:9>
| |   `-ReturnStmt 0x5636453a1cf0 <line:156:13, col:46>
| |     `-BinaryOperator 0x5636453a1cd0 <col:20, col:46> 'bool' '&&'
| |       |-BinaryOperator 0x5636453a1bd0 <col:20, col:29> 'bool' '=='
| |       | |-ImplicitCastExpr 0x5636453a1ba0 <col:20> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5636453a1b20 <col:20> 'const int' lvalue ->idx 0x5636450a7320
| |       | |   `-CXXThisExpr 0x5636453a1b10 <col:20> 'const Router::Port *' implicit this
| |       | `-ImplicitCastExpr 0x5636453a1bb8 <col:27, col:29> 'int' <LValueToRValue>
| |       |   `-MemberExpr 0x5636453a1b70 <col:27, col:29> 'const int' lvalue .idx 0x5636450a7320
| |       |     `-DeclRefExpr 0x5636453a1b50 <col:27> 'const Router::Port' lvalue ParmVar 0x5636450a7708 'x' 'const Router::Port &'
| |       `-BinaryOperator 0x5636453a1cb0 <col:36, col:46> 'bool' '=='
| |         |-ImplicitCastExpr 0x5636453a1c80 <col:36> 'int' <LValueToRValue>
| |         | `-MemberExpr 0x5636453a1c00 <col:36> 'const int' lvalue ->port 0x5636450a7388
| |         |   `-CXXThisExpr 0x5636453a1bf0 <col:36> 'const Router::Port *' implicit this
| |         `-ImplicitCastExpr 0x5636453a1c98 <col:44, col:46> 'int' <LValueToRValue>
| |           `-MemberExpr 0x5636453a1c50 <col:44, col:46> 'const int' lvalue .port 0x5636450a7388
| |             `-DeclRefExpr 0x5636453a1c30 <col:44> 'const Router::Port' lvalue ParmVar 0x5636450a7708 'x' 'const Router::Port &'
| |-CXXMethodDecl 0x5636450a7940 <line:158:9, line:160:9> line:158:14 operator!= 'bool (const Router::Port &) const'
| | |-ParmVarDecl 0x5636450a78b0 <col:25, col:37> col:37 used x 'const Router::Port &'
| | `-CompoundStmt 0x5636453a1f08 <col:46, line:160:9>
| |   `-ReturnStmt 0x5636453a1ef8 <line:159:13, col:46>
| |     `-BinaryOperator 0x5636453a1ed8 <col:20, col:46> 'bool' '||'
| |       |-BinaryOperator 0x5636453a1dd8 <col:20, col:29> 'bool' '!='
| |       | |-ImplicitCastExpr 0x5636453a1da8 <col:20> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5636453a1d28 <col:20> 'const int' lvalue ->idx 0x5636450a7320
| |       | |   `-CXXThisExpr 0x5636453a1d18 <col:20> 'const Router::Port *' implicit this
| |       | `-ImplicitCastExpr 0x5636453a1dc0 <col:27, col:29> 'int' <LValueToRValue>
| |       |   `-MemberExpr 0x5636453a1d78 <col:27, col:29> 'const int' lvalue .idx 0x5636450a7320
| |       |     `-DeclRefExpr 0x5636453a1d58 <col:27> 'const Router::Port' lvalue ParmVar 0x5636450a78b0 'x' 'const Router::Port &'
| |       `-BinaryOperator 0x5636453a1eb8 <col:36, col:46> 'bool' '!='
| |         |-ImplicitCastExpr 0x5636453a1e88 <col:36> 'int' <LValueToRValue>
| |         | `-MemberExpr 0x5636453a1e08 <col:36> 'const int' lvalue ->port 0x5636450a7388
| |         |   `-CXXThisExpr 0x5636453a1df8 <col:36> 'const Router::Port *' implicit this
| |         `-ImplicitCastExpr 0x5636453a1ea0 <col:44, col:46> 'int' <LValueToRValue>
| |           `-MemberExpr 0x5636453a1e58 <col:44, col:46> 'const int' lvalue .port 0x5636450a7388
| |             `-DeclRefExpr 0x5636453a1e38 <col:44> 'const Router::Port' lvalue ParmVar 0x5636450a78b0 'x' 'const Router::Port &'
| |-CXXMethodDecl 0x5636450a7a88 <line:161:9, line:163:9> line:161:14 used operator< 'bool (const Router::Port &) const'
| | |-ParmVarDecl 0x5636450a79f8 <col:24, col:36> col:36 used x 'const Router::Port &'
| | `-CompoundStmt 0x5636453a2230 <col:45, line:163:9>
| |   `-ReturnStmt 0x5636453a2220 <line:162:13, col:65>
| |     `-BinaryOperator 0x5636453a2200 <col:20, col:65> 'bool' '||'
| |       |-BinaryOperator 0x5636453a1fe0 <col:20, col:28> 'bool' '<'
| |       | |-ImplicitCastExpr 0x5636453a1fb0 <col:20> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5636453a1f30 <col:20> 'const int' lvalue ->idx 0x5636450a7320
| |       | |   `-CXXThisExpr 0x5636453a1f20 <col:20> 'const Router::Port *' implicit this
| |       | `-ImplicitCastExpr 0x5636453a1fc8 <col:26, col:28> 'int' <LValueToRValue>
| |       |   `-MemberExpr 0x5636453a1f80 <col:26, col:28> 'const int' lvalue .idx 0x5636450a7320
| |       |     `-DeclRefExpr 0x5636453a1f60 <col:26> 'const Router::Port' lvalue ParmVar 0x5636450a79f8 'x' 'const Router::Port &'
| |       `-ParenExpr 0x5636453a21e0 <col:35, col:65> 'bool'
| |         `-BinaryOperator 0x5636453a21c0 <col:36, col:61> 'bool' '&&'
| |           |-BinaryOperator 0x5636453a20c0 <col:36, col:45> 'bool' '=='
| |           | |-ImplicitCastExpr 0x5636453a2090 <col:36> 'int' <LValueToRValue>
| |           | | `-MemberExpr 0x5636453a2010 <col:36> 'const int' lvalue ->idx 0x5636450a7320
| |           | |   `-CXXThisExpr 0x5636453a2000 <col:36> 'const Router::Port *' implicit this
| |           | `-ImplicitCastExpr 0x5636453a20a8 <col:43, col:45> 'int' <LValueToRValue>
| |           |   `-MemberExpr 0x5636453a2060 <col:43, col:45> 'const int' lvalue .idx 0x5636450a7320
| |           |     `-DeclRefExpr 0x5636453a2040 <col:43> 'const Router::Port' lvalue ParmVar 0x5636450a79f8 'x' 'const Router::Port &'
| |           `-BinaryOperator 0x5636453a21a0 <col:52, col:61> 'bool' '<'
| |             |-ImplicitCastExpr 0x5636453a2170 <col:52> 'int' <LValueToRValue>
| |             | `-MemberExpr 0x5636453a20f0 <col:52> 'const int' lvalue ->port 0x5636450a7388
| |             |   `-CXXThisExpr 0x5636453a20e0 <col:52> 'const Router::Port *' implicit this
| |             `-ImplicitCastExpr 0x5636453a2188 <col:59, col:61> 'int' <LValueToRValue>
| |               `-MemberExpr 0x5636453a2140 <col:59, col:61> 'const int' lvalue .port 0x5636450a7388
| |                 `-DeclRefExpr 0x5636453a2120 <col:59> 'const Router::Port' lvalue ParmVar 0x5636450a79f8 'x' 'const Router::Port &'
| |-CXXMethodDecl 0x5636450a7bd0 <line:164:9, line:166:9> line:164:14 operator<= 'bool (const Router::Port &) const'
| | |-ParmVarDecl 0x5636450a7b40 <col:25, col:37> col:37 used x 'const Router::Port &'
| | `-CompoundStmt 0x5636453a2558 <col:46, line:166:9>
| |   `-ReturnStmt 0x5636453a2548 <line:165:13, col:66>
| |     `-BinaryOperator 0x5636453a2528 <col:20, col:66> 'bool' '||'
| |       |-BinaryOperator 0x5636453a2308 <col:20, col:28> 'bool' '<'
| |       | |-ImplicitCastExpr 0x5636453a22d8 <col:20> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5636453a2258 <col:20> 'const int' lvalue ->idx 0x5636450a7320
| |       | |   `-CXXThisExpr 0x5636453a2248 <col:20> 'const Router::Port *' implicit this
| |       | `-ImplicitCastExpr 0x5636453a22f0 <col:26, col:28> 'int' <LValueToRValue>
| |       |   `-MemberExpr 0x5636453a22a8 <col:26, col:28> 'const int' lvalue .idx 0x5636450a7320
| |       |     `-DeclRefExpr 0x5636453a2288 <col:26> 'const Router::Port' lvalue ParmVar 0x5636450a7b40 'x' 'const Router::Port &'
| |       `-ParenExpr 0x5636453a2508 <col:35, col:66> 'bool'
| |         `-BinaryOperator 0x5636453a24e8 <col:36, col:62> 'bool' '&&'
| |           |-BinaryOperator 0x5636453a23e8 <col:36, col:45> 'bool' '=='
| |           | |-ImplicitCastExpr 0x5636453a23b8 <col:36> 'int' <LValueToRValue>
| |           | | `-MemberExpr 0x5636453a2338 <col:36> 'const int' lvalue ->idx 0x5636450a7320
| |           | |   `-CXXThisExpr 0x5636453a2328 <col:36> 'const Router::Port *' implicit this
| |           | `-ImplicitCastExpr 0x5636453a23d0 <col:43, col:45> 'int' <LValueToRValue>
| |           |   `-MemberExpr 0x5636453a2388 <col:43, col:45> 'const int' lvalue .idx 0x5636450a7320
| |           |     `-DeclRefExpr 0x5636453a2368 <col:43> 'const Router::Port' lvalue ParmVar 0x5636450a7b40 'x' 'const Router::Port &'
| |           `-BinaryOperator 0x5636453a24c8 <col:52, col:62> 'bool' '<='
| |             |-ImplicitCastExpr 0x5636453a2498 <col:52> 'int' <LValueToRValue>
| |             | `-MemberExpr 0x5636453a2418 <col:52> 'const int' lvalue ->port 0x5636450a7388
| |             |   `-CXXThisExpr 0x5636453a2408 <col:52> 'const Router::Port *' implicit this
| |             `-ImplicitCastExpr 0x5636453a24b0 <col:60, col:62> 'int' <LValueToRValue>
| |               `-MemberExpr 0x5636453a2468 <col:60, col:62> 'const int' lvalue .port 0x5636450a7388
| |                 `-DeclRefExpr 0x5636453a2448 <col:60> 'const Router::Port' lvalue ParmVar 0x5636450a7b40 'x' 'const Router::Port &'
| |-CXXConstructorDecl 0x5636453a2570 <line:145:12> col:12 implicit constexpr Port 'void (const Router::Port &)' inline default trivial noexcept-unevaluated 0x5636453a2570
| | `-ParmVarDecl 0x5636453a2688 <col:12> col:12 'const Router::Port &'
| |-CXXConstructorDecl 0x5636453a2728 <col:12> col:12 implicit constexpr Port 'void (Router::Port &&)' inline default trivial noexcept-unevaluated 0x5636453a2728
| | `-ParmVarDecl 0x5636453a2838 <col:12> col:12 'Router::Port &&'
| |-CXXDestructorDecl 0x5636453a28d0 <col:12> col:12 implicit referenced ~Port 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5636453a2ba0 <col:12> col:12 implicit operator= 'Router::Port &(const Router::Port &)' inline default trivial noexcept-unevaluated 0x5636453a2ba0
| | `-ParmVarDecl 0x5636453a2ca8 <col:12> col:12 'const Router::Port &'
| `-CXXMethodDecl 0x5636453a2d18 <col:12> col:12 implicit used operator= 'Router::Port &(Router::Port &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x5636453a2e28 <col:12> col:12 used 'Router::Port &&'
|   `-CompoundStmt 0x5636453a3148 <col:12>
|     |-BinaryOperator 0x5636453a2fe8 <col:12> 'int' lvalue '='
|     | |-MemberExpr 0x5636453a2fa0 <col:12> 'int' lvalue ->idx 0x5636450a7320
|     | | `-CXXThisExpr 0x5636453a2f90 <col:12> 'Router::Port *' this
|     | `-ImplicitCastExpr 0x5636453a2fd0 <col:12> 'int' <LValueToRValue>
|     |   `-MemberExpr 0x5636453a2f60 <col:12> 'int' xvalue .idx 0x5636450a7320
|     |     `-CXXStaticCastExpr 0x5636453a2f30 <col:12> 'Router::Port' xvalue static_cast<struct Router::Port &&> <NoOp>
|     |       `-DeclRefExpr 0x5636453a2f00 <col:12> 'Router::Port' lvalue ParmVar 0x5636453a2e28 '' 'Router::Port &&'
|     |-BinaryOperator 0x5636453a30f0 <col:12> 'int' lvalue '='
|     | |-MemberExpr 0x5636453a30a8 <col:12> 'int' lvalue ->port 0x5636450a7388
|     | | `-CXXThisExpr 0x5636453a3098 <col:12> 'Router::Port *' this
|     | `-ImplicitCastExpr 0x5636453a30d8 <col:12> 'int' <LValueToRValue>
|     |   `-MemberExpr 0x5636453a3068 <col:12> 'int' xvalue .port 0x5636450a7388
|     |     `-CXXStaticCastExpr 0x5636453a3038 <col:12> 'Router::Port' xvalue static_cast<struct Router::Port &&> <NoOp>
|     |       `-DeclRefExpr 0x5636453a3008 <col:12> 'Router::Port' lvalue ParmVar 0x5636453a2e28 '' 'Router::Port &&'
|     `-ReturnStmt 0x5636453a3138 <col:12>
|       `-UnaryOperator 0x5636453a3120 <col:12> 'Router::Port' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5636453a3110 <col:12> 'Router::Port *' this
|-CXXRecordDecl 0x5636450a7c90 <line:169:5, line:194:5> line:169:12 referenced struct Connection definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5636450a7da8 <col:5, col:12> col:12 implicit referenced struct Connection
| |-FieldDecl 0x5636450a7f98 <line:170:9, col:17> col:14 referenced p 'Router::Port [2]'
| |-CXXConstructorDecl 0x5636450a8050 <line:172:9, line:173:9> line:172:9 Connection 'void ()'
| | |-CXXCtorInitializer Field 0x5636450a7f98 'p' 'Router::Port [2]'
| | | `-CXXConstructExpr 0x5636453a28a8 <col:9> 'Router::Port [2]' 'void ()'
| | `-CompoundStmt 0x5636453a29e0 <col:22, line:173:9>
| |-CXXConstructorDecl 0x5636450a8388 <line:174:9, line:177:9> line:174:9 Connection 'void (int, int, int, int)'
| | |-ParmVarDecl 0x5636450a8110 <col:20, col:24> col:24 used from_idx 'int'
| | |-ParmVarDecl 0x5636450a8190 <col:34, col:38> col:38 used from_port 'int'
| | |-ParmVarDecl 0x5636450a8210 <col:49, col:53> col:53 used to_idx 'int'
| | |-ParmVarDecl 0x5636450a8290 <col:61, col:65> col:65 used to_port 'int'
| | |-CXXCtorInitializer Field 0x5636450a7f98 'p' 'Router::Port [2]'
| | | `-CXXConstructExpr 0x5636453a29f0 <col:9> 'Router::Port [2]' 'void ()'
| | `-CompoundStmt 0x5636453a3428 <col:74, line:177:9>
| |   |-ExprWithCleanups 0x5636453a3218 <line:175:13, col:40> 'Router::Port' lvalue
| |   | `-CXXOperatorCallExpr 0x5636453a31e0 <col:13, col:40> 'Router::Port' lvalue
| |   |   |-ImplicitCastExpr 0x5636453a31c8 <col:18> 'Router::Port &(*)(Router::Port &&) noexcept' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x5636453a2eb0 <col:18> 'Router::Port &(Router::Port &&) noexcept' lvalue CXXMethod 0x5636453a2d18 'operator=' 'Router::Port &(Router::Port &&) noexcept'
| |   |   |-ArraySubscriptExpr 0x5636453a2ac0 <col:13, col:16> 'Router::Port' lvalue
| |   |   | |-ImplicitCastExpr 0x5636453a2aa8 <col:13> 'Router::Port *' <ArrayToPointerDecay>
| |   |   | | `-MemberExpr 0x5636453a2a58 <col:13> 'Router::Port [2]' lvalue ->p 0x5636450a7f98
| |   |   | |   `-CXXThisExpr 0x5636453a2a48 <col:13> 'Router::Connection *' implicit this
| |   |   | `-IntegerLiteral 0x5636453a2a88 <col:15> 'int' 0
| |   |   `-MaterializeTemporaryExpr 0x5636453a2e98 <col:20, col:40> 'Router::Port' xvalue
| |   |     `-CXXTemporaryObjectExpr 0x5636453a2b60 <col:20, col:40> 'Router::Port' 'void (int, int)'
| |   |       |-ImplicitCastExpr 0x5636453a2b30 <col:25> 'int' <LValueToRValue>
| |   |       | `-DeclRefExpr 0x5636453a2af0 <col:25> 'int' lvalue ParmVar 0x5636450a8210 'to_idx' 'int'
| |   |       `-ImplicitCastExpr 0x5636453a2b48 <col:33> 'int' <LValueToRValue>
| |   |         `-DeclRefExpr 0x5636453a2b10 <col:33> 'int' lvalue ParmVar 0x5636450a8290 'to_port' 'int'
| |   `-ExprWithCleanups 0x5636453a3410 <line:176:13, col:44> 'Router::Port' lvalue
| |     `-CXXOperatorCallExpr 0x5636453a33d8 <col:13, col:44> 'Router::Port' lvalue
| |       |-ImplicitCastExpr 0x5636453a33c0 <col:18> 'Router::Port &(*)(Router::Port &&) noexcept' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5636453a33a0 <col:18> 'Router::Port &(Router::Port &&) noexcept' lvalue CXXMethod 0x5636453a2d18 'operator=' 'Router::Port &(Router::Port &&) noexcept'
| |       |-ArraySubscriptExpr 0x5636453a32a8 <col:13, col:16> 'Router::Port' lvalue
| |       | |-ImplicitCastExpr 0x5636453a3290 <col:13> 'Router::Port *' <ArrayToPointerDecay>
| |       | | `-MemberExpr 0x5636453a3240 <col:13> 'Router::Port [2]' lvalue ->p 0x5636450a7f98
| |       | |   `-CXXThisExpr 0x5636453a3230 <col:13> 'Router::Connection *' implicit this
| |       | `-IntegerLiteral 0x5636453a3270 <col:15> 'int' 1
| |       `-MaterializeTemporaryExpr 0x5636453a3388 <col:20, col:44> 'Router::Port' xvalue
| |         `-CXXTemporaryObjectExpr 0x5636453a3348 <col:20, col:44> 'Router::Port' 'void (int, int)'
| |           |-ImplicitCastExpr 0x5636453a3318 <col:25> 'int' <LValueToRValue>
| |           | `-DeclRefExpr 0x5636453a32d8 <col:25> 'int' lvalue ParmVar 0x5636450a8110 'from_idx' 'int'
| |           `-ImplicitCastExpr 0x5636453a3330 <col:35> 'int' <LValueToRValue>
| |             `-DeclRefExpr 0x5636453a32f8 <col:35> 'int' lvalue ParmVar 0x5636450a8190 'from_port' 'int'
| |-CXXMethodDecl 0x5636450a8558 <line:179:9, line:182:9> line:179:21 operator[] 'const Router::Port &(int) const'
| | |-ParmVarDecl 0x5636450a8468 <col:32, col:36> col:36 used i 'int'
| | `-CompoundStmt 0x5636453a39e8 <col:45, line:182:9>
| |   |-ParenExpr 0x5636453a38c8 <line:180:13, col:169> 'void'
| |   | `-ConditionalOperator 0x5636453a3898 <col:14, col:168> 'void'
| |   |   |-CXXStaticCastExpr 0x5636453a3568 <col:14, col:49> 'bool' static_cast<_Bool> <NoOp>
| |   |   | `-BinaryOperator 0x5636453a3538 <col:34, col:48> 'bool' '&&'
| |   |   |   |-BinaryOperator 0x5636453a34a0 <col:34, col:39> 'bool' '>='
| |   |   |   | |-ImplicitCastExpr 0x5636453a3488 <col:34> 'int' <LValueToRValue>
| |   |   |   | | `-DeclRefExpr 0x5636453a3448 <col:34> 'int' lvalue ParmVar 0x5636450a8468 'i' 'int'
| |   |   |   | `-IntegerLiteral 0x5636453a3468 <col:39> 'int' 0
| |   |   |   `-BinaryOperator 0x5636453a3518 <col:44, col:48> 'bool' '<'
| |   |   |     |-ImplicitCastExpr 0x5636453a3500 <col:44> 'int' <LValueToRValue>
| |   |   |     | `-DeclRefExpr 0x5636453a34c0 <col:44> 'int' lvalue ParmVar 0x5636450a8468 'i' 'int'
| |   |   |     `-IntegerLiteral 0x5636453a34e0 <col:48> 'int' 2
| |   |   |-CXXFunctionalCastExpr 0x5636453a35c8 <col:53, col:60> 'void' functional cast to void <ToVoid>
| |   |   | `-IntegerLiteral 0x5636453a35a8 <col:59> 'int' 0
| |   |   `-CallExpr 0x5636453a37f8 <col:64, col:168> 'void'
| |   |     |-ImplicitCastExpr 0x5636453a37e0 <col:64> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 0x5636453a37c0 <col:64> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563644d2da00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
| |   |     |-ImplicitCastExpr 0x5636453a3838 <col:79> 'const char *' <ArrayToPointerDecay>
| |   |     | `-StringLiteral 0x5636453a3638 <col:79> 'const char [16]' lvalue "i >= 0 && i < 2"
| |   |     |-ImplicitCastExpr 0x5636453a3850 <col:98> 'const char *' <ArrayToPointerDecay>
| |   |     | `-StringLiteral 0x5636453a3660 <col:98> 'const char [29]' lvalue "../dummy_inc/click/router.hh"
| |   |     |-ImplicitCastExpr 0x5636453a3868 <col:130> 'unsigned int' <IntegralCast>
| |   |     | `-IntegerLiteral 0x5636453a3698 <col:130> 'int' 180
| |   |     `-ImplicitCastExpr 0x5636453a3880 <col:135, col:149> 'const char *' <ArrayToPointerDecay>
| |   |       `-UnaryOperator 0x5636453a37a8 <col:135, col:149> 'const char [62]' lvalue prefix '__extension__' cannot overflow
| |   |         `-PredefinedExpr 0x5636453a3790 <col:149> 'const char [62]' lvalue __PRETTY_FUNCTION__
| |   |           `-StringLiteral 0x5636453a3738 <col:149> 'const char [62]' lvalue "const Router::Port &Router::Connection::operator[](int) const"
| |   `-ReturnStmt 0x5636453a39d8 <line:181:13, col:23>
| |     `-ArraySubscriptExpr 0x5636453a39b8 <col:20, col:23> 'const Router::Port' lvalue
| |       |-ImplicitCastExpr 0x5636453a3988 <col:20> 'const Router::Port *' <ArrayToPointerDecay>
| |       | `-MemberExpr 0x5636453a38f8 <col:20> 'Router::Port const[2]' lvalue ->p 0x5636450a7f98
| |       |   `-CXXThisExpr 0x5636453a38e8 <col:20> 'const Router::Connection *' implicit this
| |       `-ImplicitCastExpr 0x5636453a39a0 <col:22> 'int' <LValueToRValue>
| |         `-DeclRefExpr 0x5636453a3928 <col:22> 'int' lvalue ParmVar 0x5636450a8468 'i' 'int'
| |-CXXMethodDecl 0x5636450a8708 <line:183:9, line:186:9> line:183:15 operator[] 'Router::Port &(int)'
| | |-ParmVarDecl 0x5636450a8618 <col:26, col:30> col:30 used i 'int'
| | `-CompoundStmt 0x5636453a3f60 <col:33, line:186:9>
| |   |-ParenExpr 0x5636453a3e80 <line:184:13, col:169> 'void'
| |   | `-ConditionalOperator 0x5636453a3e50 <col:14, col:168> 'void'
| |   |   |-CXXStaticCastExpr 0x5636453a3b28 <col:14, col:49> 'bool' static_cast<_Bool> <NoOp>
| |   |   | `-BinaryOperator 0x5636453a3af8 <col:34, col:48> 'bool' '&&'
| |   |   |   |-BinaryOperator 0x5636453a3a60 <col:34, col:39> 'bool' '>='
| |   |   |   | |-ImplicitCastExpr 0x5636453a3a48 <col:34> 'int' <LValueToRValue>
| |   |   |   | | `-DeclRefExpr 0x5636453a3a08 <col:34> 'int' lvalue ParmVar 0x5636450a8618 'i' 'int'
| |   |   |   | `-IntegerLiteral 0x5636453a3a28 <col:39> 'int' 0
| |   |   |   `-BinaryOperator 0x5636453a3ad8 <col:44, col:48> 'bool' '<'
| |   |   |     |-ImplicitCastExpr 0x5636453a3ac0 <col:44> 'int' <LValueToRValue>
| |   |   |     | `-DeclRefExpr 0x5636453a3a80 <col:44> 'int' lvalue ParmVar 0x5636450a8618 'i' 'int'
| |   |   |     `-IntegerLiteral 0x5636453a3aa0 <col:48> 'int' 2
| |   |   |-CXXFunctionalCastExpr 0x5636453a3b88 <col:53, col:60> 'void' functional cast to void <ToVoid>
| |   |   | `-IntegerLiteral 0x5636453a3b68 <col:59> 'int' 0
| |   |   `-CallExpr 0x5636453a3db0 <col:64, col:168> 'void'
| |   |     |-ImplicitCastExpr 0x5636453a3d98 <col:64> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 0x5636453a3d78 <col:64> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563644d2da00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
| |   |     |-ImplicitCastExpr 0x5636453a3df0 <col:79> 'const char *' <ArrayToPointerDecay>
| |   |     | `-StringLiteral 0x5636453a3bf8 <col:79> 'const char [16]' lvalue "i >= 0 && i < 2"
| |   |     |-ImplicitCastExpr 0x5636453a3e08 <col:98> 'const char *' <ArrayToPointerDecay>
| |   |     | `-StringLiteral 0x5636453a3c20 <col:98> 'const char [29]' lvalue "../dummy_inc/click/router.hh"
| |   |     |-ImplicitCastExpr 0x5636453a3e20 <col:130> 'unsigned int' <IntegralCast>
| |   |     | `-IntegerLiteral 0x5636453a3c58 <col:130> 'int' 184
| |   |     `-ImplicitCastExpr 0x5636453a3e38 <col:135, col:149> 'const char *' <ArrayToPointerDecay>
| |   |       `-UnaryOperator 0x5636453a3d60 <col:135, col:149> 'const char [50]' lvalue prefix '__extension__' cannot overflow
| |   |         `-PredefinedExpr 0x5636453a3d48 <col:149> 'const char [50]' lvalue __PRETTY_FUNCTION__
| |   |           `-StringLiteral 0x5636453a3cf8 <col:149> 'const char [50]' lvalue "Router::Port &Router::Connection::operator[](int)"
| |   `-ReturnStmt 0x5636453a3f50 <line:185:13, col:23>
| |     `-ArraySubscriptExpr 0x5636453a3f30 <col:20, col:23> 'Router::Port' lvalue
| |       |-ImplicitCastExpr 0x5636453a3f00 <col:20> 'Router::Port *' <ArrayToPointerDecay>
| |       | `-MemberExpr 0x5636453a3eb0 <col:20> 'Router::Port [2]' lvalue ->p 0x5636450a7f98
| |       |   `-CXXThisExpr 0x5636453a3ea0 <col:20> 'Router::Connection *' implicit this
| |       `-ImplicitCastExpr 0x5636453a3f18 <col:22> 'int' <LValueToRValue>
| |         `-DeclRefExpr 0x5636453a3ee0 <col:22> 'int' lvalue ParmVar 0x5636450a8618 'i' 'int'
| |-CXXMethodDecl 0x5636450a88a8 <line:188:9, line:190:9> line:188:14 operator== 'bool (const Router::Connection &) const'
| | |-ParmVarDecl 0x5636450a87e8 <col:25, col:43> col:43 used x 'const Router::Connection &'
| | `-CompoundStmt 0x5636453a4338 <col:52, line:190:9>
| |   `-ReturnStmt 0x5636453a4328 <line:189:13, col:51>
| |     `-BinaryOperator 0x5636453a4308 <col:20, col:51> 'bool' '&&'
| |       |-CXXOperatorCallExpr 0x5636453a4120 <col:20, col:33> 'bool'
| |       | |-ImplicitCastExpr 0x5636453a4108 <col:25> 'bool (*)(const Router::Port &) const' <FunctionToPointerDecay>
| |       | | `-DeclRefExpr 0x5636453a40c0 <col:25> 'bool (const Router::Port &) const' lvalue CXXMethod 0x5636450a77f8 'operator==' 'bool (const Router::Port &) const'
| |       | |-ArraySubscriptExpr 0x5636453a3ff8 <col:20, col:23> 'const Router::Port' lvalue
| |       | | |-ImplicitCastExpr 0x5636453a3fe0 <col:20> 'const Router::Port *' <ArrayToPointerDecay>
| |       | | | `-MemberExpr 0x5636453a3f90 <col:20> 'Router::Port const[2]' lvalue ->p 0x5636450a7f98
| |       | | |   `-CXXThisExpr 0x5636453a3f80 <col:20> 'const Router::Connection *' implicit this
| |       | | `-IntegerLiteral 0x5636453a3fc0 <col:22> 'int' 0
| |       | `-ArraySubscriptExpr 0x5636453a40a0 <col:28, col:33> 'const Router::Port' lvalue
| |       |   |-ImplicitCastExpr 0x5636453a4088 <col:28, col:30> 'const Router::Port *' <ArrayToPointerDecay>
| |       |   | `-MemberExpr 0x5636453a4038 <col:28, col:30> 'Router::Port const[2]' lvalue .p 0x5636450a7f98
| |       |   |   `-DeclRefExpr 0x5636453a4018 <col:28> 'const Router::Connection' lvalue ParmVar 0x5636450a87e8 'x' 'const Router::Connection &'
| |       |   `-IntegerLiteral 0x5636453a4068 <col:32> 'int' 0
| |       `-CXXOperatorCallExpr 0x5636453a42d0 <col:38, col:51> 'bool'
| |         |-ImplicitCastExpr 0x5636453a42b8 <col:43> 'bool (*)(const Router::Port &) const' <FunctionToPointerDecay>
| |         | `-DeclRefExpr 0x5636453a4298 <col:43> 'bool (const Router::Port &) const' lvalue CXXMethod 0x5636450a77f8 'operator==' 'bool (const Router::Port &) const'
| |         |-ArraySubscriptExpr 0x5636453a41d0 <col:38, col:41> 'const Router::Port' lvalue
| |         | |-ImplicitCastExpr 0x5636453a41b8 <col:38> 'const Router::Port *' <ArrayToPointerDecay>
| |         | | `-MemberExpr 0x5636453a4168 <col:38> 'Router::Port const[2]' lvalue ->p 0x5636450a7f98
| |         | |   `-CXXThisExpr 0x5636453a4158 <col:38> 'const Router::Connection *' implicit this
| |         | `-IntegerLiteral 0x5636453a4198 <col:40> 'int' 1
| |         `-ArraySubscriptExpr 0x5636453a4278 <col:46, col:51> 'const Router::Port' lvalue
| |           |-ImplicitCastExpr 0x5636453a4260 <col:46, col:48> 'const Router::Port *' <ArrayToPointerDecay>
| |           | `-MemberExpr 0x5636453a4210 <col:46, col:48> 'Router::Port const[2]' lvalue .p 0x5636450a7f98
| |           |   `-DeclRefExpr 0x5636453a41f0 <col:46> 'const Router::Connection' lvalue ParmVar 0x5636450a87e8 'x' 'const Router::Connection &'
| |           `-IntegerLiteral 0x5636453a4240 <col:50> 'int' 1
| `-CXXMethodDecl 0x5636450a89f0 <line:191:9, line:193:9> line:191:14 operator< 'bool (const Router::Connection &) const'
|   |-ParmVarDecl 0x5636450a8960 <col:24, col:42> col:42 used x 'const Router::Connection &'
|   `-CompoundStmt 0x5636453a48d0 <col:51, line:193:9>
|     `-ReturnStmt 0x5636453a48c0 <line:192:13, col:69>
|       `-BinaryOperator 0x5636453a48a0 <col:20, col:69> 'bool' '||'
|         |-CXXOperatorCallExpr 0x5636453a44c8 <col:20, col:32> 'bool'
|         | |-ImplicitCastExpr 0x5636453a44b0 <col:25> 'bool (*)(const Router::Port &) const' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x5636453a4490 <col:25> 'bool (const Router::Port &) const' lvalue CXXMethod 0x5636450a7a88 'operator<' 'bool (const Router::Port &) const'
|         | |-ArraySubscriptExpr 0x5636453a43c8 <col:20, col:23> 'const Router::Port' lvalue
|         | | |-ImplicitCastExpr 0x5636453a43b0 <col:20> 'const Router::Port *' <ArrayToPointerDecay>
|         | | | `-MemberExpr 0x5636453a4360 <col:20> 'Router::Port const[2]' lvalue ->p 0x5636450a7f98
|         | | |   `-CXXThisExpr 0x5636453a4350 <col:20> 'const Router::Connection *' implicit this
|         | | `-IntegerLiteral 0x5636453a4390 <col:22> 'int' 0
|         | `-ArraySubscriptExpr 0x5636453a4470 <col:27, col:32> 'const Router::Port' lvalue
|         |   |-ImplicitCastExpr 0x5636453a4458 <col:27, col:29> 'const Router::Port *' <ArrayToPointerDecay>
|         |   | `-MemberExpr 0x5636453a4408 <col:27, col:29> 'Router::Port const[2]' lvalue .p 0x5636450a7f98
|         |   |   `-DeclRefExpr 0x5636453a43e8 <col:27> 'const Router::Connection' lvalue ParmVar 0x5636450a8960 'x' 'const Router::Connection &'
|         |   `-IntegerLiteral 0x5636453a4438 <col:31> 'int' 0
|         `-ParenExpr 0x5636453a4880 <col:37, col:69> 'bool'
|           `-BinaryOperator 0x5636453a4860 <col:38, col:68> 'bool' '&&'
|             |-CXXOperatorCallExpr 0x5636453a4678 <col:38, col:51> 'bool'
|             | |-ImplicitCastExpr 0x5636453a4660 <col:43> 'bool (*)(const Router::Port &) const' <FunctionToPointerDecay>
|             | | `-DeclRefExpr 0x5636453a4640 <col:43> 'bool (const Router::Port &) const' lvalue CXXMethod 0x5636450a77f8 'operator==' 'bool (const Router::Port &) const'
|             | |-ArraySubscriptExpr 0x5636453a4578 <col:38, col:41> 'const Router::Port' lvalue
|             | | |-ImplicitCastExpr 0x5636453a4560 <col:38> 'const Router::Port *' <ArrayToPointerDecay>
|             | | | `-MemberExpr 0x5636453a4510 <col:38> 'Router::Port const[2]' lvalue ->p 0x5636450a7f98
|             | | |   `-CXXThisExpr 0x5636453a4500 <col:38> 'const Router::Connection *' implicit this
|             | | `-IntegerLiteral 0x5636453a4540 <col:40> 'int' 0
|             | `-ArraySubscriptExpr 0x5636453a4620 <col:46, col:51> 'const Router::Port' lvalue
|             |   |-ImplicitCastExpr 0x5636453a4608 <col:46, col:48> 'const Router::Port *' <ArrayToPointerDecay>
|             |   | `-MemberExpr 0x5636453a45b8 <col:46, col:48> 'Router::Port const[2]' lvalue .p 0x5636450a7f98
|             |   |   `-DeclRefExpr 0x5636453a4598 <col:46> 'const Router::Connection' lvalue ParmVar 0x5636450a8960 'x' 'const Router::Connection &'
|             |   `-IntegerLiteral 0x5636453a45e8 <col:50> 'int' 0
|             `-CXXOperatorCallExpr 0x5636453a4828 <col:56, col:68> 'bool'
|               |-ImplicitCastExpr 0x5636453a4810 <col:61> 'bool (*)(const Router::Port &) const' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5636453a47f0 <col:61> 'bool (const Router::Port &) const' lvalue CXXMethod 0x5636450a7a88 'operator<' 'bool (const Router::Port &) const'
|               |-ArraySubscriptExpr 0x5636453a4728 <col:56, col:59> 'const Router::Port' lvalue
|               | |-ImplicitCastExpr 0x5636453a4710 <col:56> 'const Router::Port *' <ArrayToPointerDecay>
|               | | `-MemberExpr 0x5636453a46c0 <col:56> 'Router::Port const[2]' lvalue ->p 0x5636450a7f98
|               | |   `-CXXThisExpr 0x5636453a46b0 <col:56> 'const Router::Connection *' implicit this
|               | `-IntegerLiteral 0x5636453a46f0 <col:58> 'int' 1
|               `-ArraySubscriptExpr 0x5636453a47d0 <col:63, col:68> 'const Router::Port' lvalue
|                 |-ImplicitCastExpr 0x5636453a47b8 <col:63, col:65> 'const Router::Port *' <ArrayToPointerDecay>
|                 | `-MemberExpr 0x5636453a4768 <col:63, col:65> 'Router::Port const[2]' lvalue .p 0x5636450a7f98
|                 |   `-DeclRefExpr 0x5636453a4748 <col:63> 'const Router::Connection' lvalue ParmVar 0x5636450a8960 'x' 'const Router::Connection &'
|                 `-IntegerLiteral 0x5636453a4798 <col:67> 'int' 1
|-AccessSpecDecl 0x5636450a8ab0 <line:216:3, col:10> col:3 private
|-CXXRecordDecl 0x5636450a8ad8 <line:218:5, col:11> col:11 class RouterContextErrh
|-EnumDecl 0x5636450a8b90 <line:220:5, line:223:5> line:220:5
| |-EnumConstantDecl 0x5636450a8c50 <line:221:9> col:9 ROUTER_NEW 'Router::(anonymous enum at ../dummy_inc/click/router.hh:220:5)'
| |-EnumConstantDecl 0x5636450a8ca0 <col:21> col:21 referenced ROUTER_PRECONFIGURE 'Router::(anonymous enum at ../dummy_inc/click/router.hh:220:5)'
| |-EnumConstantDecl 0x5636450a8cf0 <col:42> col:42 ROUTER_PREINITIALIZE 'Router::(anonymous enum at ../dummy_inc/click/router.hh:220:5)'
| |-EnumConstantDecl 0x5636450a8d40 <line:222:9> col:9 referenced ROUTER_LIVE 'Router::(anonymous enum at ../dummy_inc/click/router.hh:220:5)'
| `-EnumConstantDecl 0x5636450a8d90 <col:22> col:22 ROUTER_DEAD 'Router::(anonymous enum at ../dummy_inc/click/router.hh:220:5)'
|-EnumDecl 0x5636450a8de0 <line:224:5, line:227:5> line:224:5
| |-EnumConstantDecl 0x5636450a8ef8 <line:225:9, col:25> col:9 referenced RUNNING_DEAD 'Router::(anonymous enum at ../dummy_inc/click/router.hh:224:5)'
| | `-ConstantExpr 0x5636450a8ed8 <col:24, col:25> 'int' Int: -2
| |   `-UnaryOperator 0x5636450a8ec0 <col:24, col:25> 'int' prefix '-'
| |     `-IntegerLiteral 0x5636450a8ea0 <col:25> 'int' 2
| |-EnumConstantDecl 0x5636450a8fa0 <col:28, col:48> col:28 RUNNING_INACTIVE 'Router::(anonymous enum at ../dummy_inc/click/router.hh:224:5)'
| | `-ConstantExpr 0x5636450a8f80 <col:47, col:48> 'int' Int: -1
| |   `-UnaryOperator 0x5636450a8f68 <col:47, col:48> 'int' prefix '-'
| |     `-IntegerLiteral 0x5636450a8f48 <col:48> 'int' 1
| |-EnumConstantDecl 0x5636450a9030 <col:51, col:71> col:51 RUNNING_PREPARING 'Router::(anonymous enum at ../dummy_inc/click/router.hh:224:5)'
| | `-ConstantExpr 0x5636450a9010 <col:71> 'int' Int: 0
| |   `-IntegerLiteral 0x5636450a8ff0 <col:71> 'int' 0
| |-EnumConstantDecl 0x5636450a90c0 <line:226:9, col:30> col:9 referenced RUNNING_BACKGROUND 'Router::(anonymous enum at ../dummy_inc/click/router.hh:224:5)'
| | `-ConstantExpr 0x5636450a90a0 <col:30> 'int' Int: 1
| |   `-IntegerLiteral 0x5636450a9080 <col:30> 'int' 1
| `-EnumConstantDecl 0x5636450a9150 <col:33, col:50> col:33 referenced RUNNING_ACTIVE 'Router::(anonymous enum at ../dummy_inc/click/router.hh:224:5)'
|   `-ConstantExpr 0x5636450a9130 <col:50> 'int' Int: 2
|     `-IntegerLiteral 0x5636450a9110 <col:50> 'int' 2
|-FieldDecl 0x5636450a91b0 <line:229:5, col:13> col:13 referenced _master 'Master *'
|-FieldDecl 0x5636450a9210 <line:231:5, col:21> col:21 referenced _runcount 'atomic_uint32_t'
|-FieldDecl 0x5636450a9278 <line:233:5, col:18> col:18 referenced _state 'volatile int'
|-FieldDecl 0x5636450a9318 <line:234:5, col:30> col:10 _have_connections 'bool'
| `-ConstantExpr 0x5636450a92f8 <col:30> 'int' Int: 1
|   `-IntegerLiteral 0x5636450a92c8 <col:30> 'int' 1
|-FieldDecl 0x5636450a93b8 <line:235:5, col:33> col:18 _conn_sorted 'bool' mutable
| `-ConstantExpr 0x5636450a9398 <col:33> 'int' Int: 1
|   `-IntegerLiteral 0x5636450a9368 <col:33> 'int' 1
|-FieldDecl 0x5636450a9458 <line:236:5, col:32> col:10 _have_configuration 'bool'
| `-ConstantExpr 0x5636450a9438 <col:32> 'int' Int: 1
|   `-IntegerLiteral 0x5636450a9408 <col:32> 'int' 1
|-FieldDecl 0x5636450a94c0 <line:237:5, col:18> col:18 referenced _running 'volatile int'
|-FieldDecl 0x5636450a9520 <line:239:5, col:21> col:21 referenced _refcount 'atomic_uint32_t'
|-FieldDecl 0x563645370be0 <line:241:5, col:23> col:23 referenced _elements 'Vector<Element *>':'Vector<Element *>'
|-FieldDecl 0x563645370ce0 <line:242:5, col:20> col:20 _element_names 'Vector<String>':'Vector<String>'
|-FieldDecl 0x563645370de0 <line:243:5, col:20> col:20 _element_configurations 'Vector<String>':'Vector<String>'
|-FieldDecl 0x563645378ec0 <line:244:5, col:22> col:22 _element_landmarkids 'Vector<uint32_t>':'Vector<unsigned int>'
|-FieldDecl 0x563645378fd0 <line:245:5, col:25> col:25 referenced _element_home_thread_ids 'Vector<int>':'Vector<int>' mutable
|-CXXRecordDecl 0x563645379020 <line:247:5, line:250:5> line:247:12 referenced struct element_landmark_t definition
| |-DefinitionData aggregate standard_layout has_mutable_fields
| | |-DefaultConstructor exists non_trivial needs_implicit
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | `-Destructor simple non_trivial needs_overload_resolution
| |-CXXRecordDecl 0x563645379138 <col:5, col:12> col:12 implicit struct element_landmark_t
| |-FieldDecl 0x5636453791d8 <line:248:9, col:18> col:18 first_landmarkid 'uint32_t':'unsigned int'
| |-FieldDecl 0x563645379238 <line:249:9, col:16> col:16 filename 'String'
| |-CXXConstructorDecl 0x5636453792d0 <line:247:12> col:12 implicit element_landmark_t 'void (const Router::element_landmark_t &)' inline default noexcept-unevaluated 0x5636453792d0
| | `-ParmVarDecl 0x5636453793e8 <col:12> col:12 'const Router::element_landmark_t &'
| |-CXXConstructorDecl 0x563645379488 <col:12> col:12 implicit element_landmark_t 'void (Router::element_landmark_t &&)' inline default noexcept-unevaluated 0x563645379488
| | `-ParmVarDecl 0x563645379598 <col:12> col:12 'Router::element_landmark_t &&'
| |-CXXMethodDecl 0x563645379638 <col:12> col:12 implicit operator= 'Router::element_landmark_t &(const Router::element_landmark_t &)' inline default noexcept-unevaluated 0x563645379638
| | `-ParmVarDecl 0x563645379748 <col:12> col:12 'const Router::element_landmark_t &'
| |-CXXMethodDecl 0x5636453797b8 <col:12> col:12 implicit operator= 'Router::element_landmark_t &(Router::element_landmark_t &&)' inline default noexcept-unevaluated 0x5636453797b8
| | `-ParmVarDecl 0x5636453798c8 <col:12> col:12 'Router::element_landmark_t &&'
| `-CXXDestructorDecl 0x563645379950 <col:12> col:12 implicit ~element_landmark_t 'void ()' inline default noexcept-unevaluated 0x563645379950
|-FieldDecl 0x563645386680 <line:251:5, col:32> col:32 _element_landmarks 'Vector<Router::element_landmark_t>':'Vector<Router::element_landmark_t>'
|-FieldDecl 0x5636453866e0 <line:252:5, col:14> col:14 _last_landmarkid 'uint32_t':'unsigned int'
|-FieldDecl 0x5636453867f0 <line:254:5, col:25> col:25 _element_name_sorter 'Vector<int>':'Vector<int>' mutable
|-FieldDecl 0x563645386b48 <line:255:5, col:40> col:17 referenced _element_gport_offset 'Vector<int> [2]'
|-FieldDecl 0x563645386c50 <line:256:5, col:17> col:17 _element_configure_order 'Vector<int>':'Vector<int>'
|-FieldDecl 0x56364538f3d0 <line:258:5, col:32> col:32 _conn 'Vector<Router::Connection>':'Vector<Router::Connection>' mutable
|-FieldDecl 0x56364538f4e0 <line:259:5, col:25> col:25 _conn_output_sorter 'Vector<int>':'Vector<int>' mutable
|-FieldDecl 0x56364538f5e0 <line:261:5, col:20> col:20 _requirements 'Vector<String>':'Vector<String>'
|-FieldDecl 0x56364538f6f0 <line:263:5, col:17> col:17 _ehandler_first_by_element 'Vector<int>':'Vector<int>'
|-FieldDecl 0x56364538f800 <line:264:5, col:17> col:17 _ehandler_to_handler 'Vector<int>':'Vector<int>'
|-FieldDecl 0x56364538f910 <line:265:5, col:17> col:17 _ehandler_next 'Vector<int>':'Vector<int>'
|-FieldDecl 0x56364538fa20 <line:267:5, col:17> col:17 _handler_first_by_name 'Vector<int>':'Vector<int>'
|-EnumDecl 0x56364538fa70 <line:269:5, col:33> col:5
| `-EnumConstantDecl 0x56364538fb70 <col:12, col:29> col:12 HANDLER_BUFSIZ 'Router::(anonymous enum at ../dummy_inc/click/router.hh:269:5)'
|   `-ImplicitCastExpr 0x56364538fbc0 <col:29> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56364538fb50 <col:29> 'int' Int: 256
|       `-IntegerLiteral 0x56364538fb30 <col:29> 'int' 256
|-FieldDecl 0x56364538fc20 <line:270:5, col:15> col:15 _handler_bufs 'Handler **'
|-FieldDecl 0x56364538fc88 <line:271:5, col:9> col:9 _nhandlers_bufs 'int'
|-FieldDecl 0x56364538fcf0 <line:272:5, col:9> col:9 _free_handler 'int'
|-FieldDecl 0x56364538fdf0 <line:274:5, col:20> col:20 _attachment_names 'Vector<String>':'Vector<String>'
|-FieldDecl 0x563645399500 <line:275:5, col:19> col:19 _attachments 'Vector<void *>':'Vector<void *>'
|-FieldDecl 0x563645399560 <line:277:5, col:14> col:14 referenced _root_element 'Element *'
|-FieldDecl 0x5636453995c0 <line:278:5, col:12> col:12 _configuration 'String'
|-CXXRecordDecl 0x563645399610 <line:280:5, line:290:5> line:280:12 referenced struct notifier_signals_t definition
| |-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveAssignment exists simple non_trivial needs_overload_resolution
| | `-Destructor simple non_trivial needs_overload_resolution
| |-CXXRecordDecl 0x563645399728 <col:5, col:12> col:12 implicit referenced struct notifier_signals_t
| |-EnumDecl 0x5636453997b8 <line:281:9, col:32> col:9
| | `-EnumConstantDecl 0x5636453998c0 <col:16, col:27> col:16 referenced capacity 'Router::notifier_signals_t::(anonymous enum at ../dummy_inc/click/router.hh:281:9)'
| |   `-ImplicitCastExpr 0x563645399910 <col:27> 'unsigned int' <IntegralCast>
| |     `-ConstantExpr 0x5636453998a0 <col:27> 'int' Int: 4096
| |       `-IntegerLiteral 0x563645399880 <col:27> 'int' 4096
| |-FieldDecl 0x563645399938 <line:282:9, col:16> col:16 name 'String'
| |-FieldDecl 0x5636453999a0 <line:283:9, col:13> col:13 nsig 'int'
| |-FieldDecl 0x563645399b98 <line:284:9, col:42> col:25 referenced sig 'atomic_uint32_t [128]'
| |-FieldDecl 0x563645399c28 <line:285:9, col:29> col:29 next 'Router::notifier_signals_t *'
| |-CXXConstructorDecl 0x563645399de8 <line:286:9, line:289:9> line:286:9 notifier_signals_t 'void (const String &, Router::notifier_signals_t *)'
| | |-ParmVarDecl 0x563645399c88 <col:28, col:42> col:42 used n 'const String &'
| | |-ParmVarDecl 0x563645399d00 <col:45, col:65> col:65 used nx 'Router::notifier_signals_t *'
| | |-CXXCtorInitializer Field 0x563645399938 'name' 'String'
| | | `-CXXConstructExpr 0x5636453a4928 <line:287:15, col:21> 'String' 'void (const String &)'
| | |   `-DeclRefExpr 0x5636453a48e8 <col:20> 'const String' lvalue ParmVar 0x563645399c88 'n' 'const String &'
| | |-CXXCtorInitializer Field 0x5636453999a0 'nsig' 'int'
| | | `-IntegerLiteral 0x5636453a4980 <col:29> 'int' 0
| | |-CXXCtorInitializer Field 0x563645399b98 'sig' 'atomic_uint32_t [128]'
| | | `-CXXConstructExpr 0x5636453a4a68 <line:286:9> 'atomic_uint32_t [128]' 'void () noexcept'
| | |-CXXCtorInitializer Field 0x563645399c28 'next' 'Router::notifier_signals_t *'
| | | `-ImplicitCastExpr 0x5636453a4a28 <line:287:38> 'Router::notifier_signals_t *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5636453a49e8 <col:38> 'Router::notifier_signals_t *' lvalue ParmVar 0x563645399d00 'nx' 'Router::notifier_signals_t *'
| | `-CompoundStmt 0x5636453a4cf8 <col:42, line:289:9>
| |   `-CallExpr 0x5636453a4ca8 <line:288:13, col:43> 'void *'
| |     |-ImplicitCastExpr 0x5636453a4c90 <col:13> 'void *(*)(void *, int, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5636453a4c70 <col:13> 'void *(void *, int, size_t) throw()' lvalue Function 0x563644ef1cc8 'memset' 'void *(void *, int, size_t) throw()'
| |     |-ImplicitCastExpr 0x5636453a4ce0 <col:20, col:26> 'void *' <BitCast>
| |     | `-UnaryOperator 0x5636453a4bb8 <col:20, col:26> 'atomic_uint32_t *' prefix '&' cannot overflow
| |     |   `-ArraySubscriptExpr 0x5636453a4b98 <col:21, col:26> 'atomic_uint32_t' lvalue
| |     |     |-ImplicitCastExpr 0x5636453a4b80 <col:21> 'atomic_uint32_t *' <ArrayToPointerDecay>
| |     |     | `-MemberExpr 0x5636453a4b30 <col:21> 'atomic_uint32_t [128]' lvalue ->sig 0x563645399b98
| |     |     |   `-CXXThisExpr 0x5636453a4b20 <col:21> 'Router::notifier_signals_t *' implicit this
| |     |     `-IntegerLiteral 0x5636453a4b60 <col:25> 'int' 0
| |     |-IntegerLiteral 0x5636453a4bd0 <col:29> 'int' 0
| |     `-UnaryExprOrTypeTraitExpr 0x5636453a4c50 <col:32, col:42> 'unsigned long' sizeof
| |       `-ParenExpr 0x5636453a4c30 <col:38, col:42> 'atomic_uint32_t [128]' lvalue
| |         `-MemberExpr 0x5636453a4c00 <col:39> 'atomic_uint32_t [128]' lvalue ->sig 0x563645399b98 non_odr_use_unevaluated
| |           `-CXXThisExpr 0x5636453a4bf0 <col:39> 'Router::notifier_signals_t *' implicit this
| |-CXXConstructorDecl 0x563645399ec8 <line:280:12> col:12 implicit notifier_signals_t 'void (const Router::notifier_signals_t &)' inline default noexcept-unevaluated 0x563645399ec8
| | `-ParmVarDecl 0x563645399fd8 <col:12> col:12 'const Router::notifier_signals_t &'
| |-CXXConstructorDecl 0x56364539a078 <col:12> col:12 implicit notifier_signals_t 'void (Router::notifier_signals_t &&)' inline default noexcept-unevaluated 0x56364539a078
| | `-ParmVarDecl 0x56364539a188 <col:12> col:12 'Router::notifier_signals_t &&'
| |-CXXMethodDecl 0x56364539a228 <col:12> col:12 implicit operator= 'Router::notifier_signals_t &(const Router::notifier_signals_t &)' inline default noexcept-unevaluated 0x56364539a228
| | `-ParmVarDecl 0x56364539a338 <col:12> col:12 'const Router::notifier_signals_t &'
| |-CXXMethodDecl 0x56364539a3a8 <col:12> col:12 implicit operator= 'Router::notifier_signals_t &(Router::notifier_signals_t &&)' inline default noexcept-unevaluated 0x56364539a3a8
| | `-ParmVarDecl 0x56364539a4b8 <col:12> col:12 'Router::notifier_signals_t &&'
| `-CXXDestructorDecl 0x56364539a540 <col:12> col:12 implicit ~notifier_signals_t 'void ()' inline default noexcept-unevaluated 0x56364539a540
|-FieldDecl 0x56364539a630 <line:291:5, col:25> col:25 _notifier_signals 'Router::notifier_signals_t *'
|-FieldDecl 0x56364539a690 <line:292:5, col:27> col:27 referenced _arena_factory 'HashMap_ArenaFactory *'
|-FieldDecl 0x56364539a6f0 <line:293:5, col:13> col:13 referenced _hotswap_router 'Router *'
|-FieldDecl 0x56364539a750 <line:294:5, col:18> col:18 referenced _thread_sched 'ThreadSched *'
|-FieldDecl 0x56364539a7b0 <line:295:5, col:23> col:23 referenced _name_info 'NameInfo *' mutable
|-FieldDecl 0x56364539a8c0 <line:296:5, col:17> col:17 _flow_code_override_eindex 'Vector<int>':'Vector<int>'
|-FieldDecl 0x56364539a9c0 <line:297:5, col:20> col:20 referenced _flow_code_override 'Vector<String>':'Vector<String>'
|-FieldDecl 0x56364539aa20 <line:299:5, col:13> col:13 _next_router 'Router *'
|-CXXConstructorDecl 0x56364539ab68 <line:305:5, col:25> col:5 Router 'void (const Router &)'
| `-ParmVarDecl 0x56364539aaa8 <col:12, col:24> col:25 'const Router &'
|-CXXMethodDecl 0x56364539ad18 <line:306:5, col:36> col:13 operator= 'Router &(const Router &)'
| `-ParmVarDecl 0x56364539ac28 <col:23, col:35> col:36 'const Router &'
|-CXXMethodDecl 0x56364539ae60 <line:308:5, col:49> col:17 remove_connection 'Router::Connection *(Router::Connection *)'
| `-ParmVarDecl 0x56364539add0 <col:35, col:47> col:47 cp 'Router::Connection *'
|-CXXMethodDecl 0x56364539b208 <line:309:5, line:310:62> line:309:10 hookup_error 'void (const Router::Port &, bool, const char *, ErrorHandler *, bool)'
| |-ParmVarDecl 0x56364539af18 <col:23, col:35> col:35 p 'const Router::Port &'
| |-ParmVarDecl 0x56364539af90 <col:38, col:43> col:43 isoutput 'bool'
| |-ParmVarDecl 0x56364539b010 <col:53, col:65> col:65 message 'const char *'
| |-ParmVarDecl 0x56364539b088 <line:310:23, col:37> col:37 errh 'ErrorHandler *'
| `-ParmVarDecl 0x56364539b100 <col:43, col:57> col:48 active 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5636453a19d0 <col:57> 'bool' false
|-CXXMethodDecl 0x56364539b378 <line:311:5, col:44> col:9 check_hookup_elements 'int (ErrorHandler *)'
| `-ParmVarDecl 0x56364539b2e0 <col:31, col:43> col:44 'ErrorHandler *'
|-CXXMethodDecl 0x56364539b4c8 <line:312:5, col:41> col:9 check_hookup_range 'int (ErrorHandler *)'
| `-ParmVarDecl 0x56364539b430 <col:28, col:40> col:41 'ErrorHandler *'
|-CXXMethodDecl 0x56364539b618 <line:313:5, col:48> col:9 check_hookup_completeness 'int (ErrorHandler *)'
| `-ParmVarDecl 0x56364539b580 <col:35, col:47> col:48 'ErrorHandler *'
|-CXXMethodDecl 0x56364539b770 <line:315:5, col:48> col:17 used hard_flow_code_override 'const char *(int) const'
| `-ParmVarDecl 0x56364539b6d8 <col:41, col:45> col:45 e 'int'
|-CXXMethodDecl 0x56364539ba90 <line:316:5, col:74> col:9 processing_error 'int (const Router::Connection &, bool, int, ErrorHandler *)'
| |-ParmVarDecl 0x56364539b828 <col:26, col:44> col:44 conn 'const Router::Connection &'
| |-ParmVarDecl 0x56364539b8a0 <col:50> col:54 'bool'
| |-ParmVarDecl 0x56364539b920 <col:56> col:59 'int'
| `-ParmVarDecl 0x56364539b998 <col:61, col:73> col:74 'ErrorHandler *'
|-CXXMethodDecl 0x56364539bbf8 <line:317:5, col:42> col:9 check_push_and_pull 'int (ErrorHandler *)'
| `-ParmVarDecl 0x56364539bb60 <col:29, col:41> col:42 'ErrorHandler *'
|-CXXMethodDecl 0x56364539bcc0 <line:319:5, col:26> col:10 set_connections 'void ()'
|-CXXMethodDecl 0x56364539bd80 <line:320:5, col:29> col:10 sort_connections 'void () const'
|-CXXMethodDecl 0x56364539bf80 <line:321:5, col:64> col:9 connindex_lower_bound 'int (bool, const Router::Port &) const'
| |-ParmVarDecl 0x56364539be30 <col:31, col:36> col:36 isoutput 'bool'
| `-ParmVarDecl 0x56364539bea8 <col:46, col:58> col:58 port 'const Router::Port &'
|-CXXMethodDecl 0x56364539c050 <line:323:5, col:22> col:10 make_gports 'void ()'
|-CXXMethodDecl 0x56364539c198 <line:324:5, line:326:5> line:324:16 ngports 'int (bool) const' inline
| |-ParmVarDecl 0x56364539c100 <col:24, col:29> col:29 used isout 'bool'
| `-CompoundStmt 0x5636453a4f30 <col:42, line:326:5>
|   `-ReturnStmt 0x5636453a4f20 <line:325:9, col:50>
|     `-ImplicitCastExpr 0x5636453a4f08 <col:16, col:50> 'int':'int' <LValueToRValue>
|       `-CXXMemberCallExpr 0x5636453a4ee8 <col:16, col:50> 'const int':'const int' lvalue
|         `-MemberExpr 0x5636453a4eb8 <col:16, col:45> '<bound member function type>' .back 0x5636452a3e58
|           `-ArraySubscriptExpr 0x5636453a4e38 <col:16, col:43> 'const Vector<int>':'const Vector<int>' lvalue
|             |-ImplicitCastExpr 0x5636453a4e08 <col:16> 'const Vector<int> *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5636453a4d20 <col:16> 'Vector<int> const[2]' lvalue ->_element_gport_offset 0x563645386b48
|             |   `-CXXThisExpr 0x5636453a4d10 <col:16> 'const Router *' implicit this
|             `-ImplicitCastExpr 0x5636453a4e20 <col:38> 'bool' <LValueToRValue>
|               `-DeclRefExpr 0x5636453a4d50 <col:38> 'bool' lvalue ParmVar 0x56364539c100 'isout' 'bool'
|-CXXMethodDecl 0x56364539c368 <line:327:5, col:55> col:16 gport 'int (bool, const Router::Port &) const' inline
| |-ParmVarDecl 0x56364539c250 <col:22, col:27> col:27 isoutput 'bool'
| `-ParmVarDecl 0x56364539c2c8 <col:37, col:49> col:49 port 'const Router::Port &'
|-CXXMethodDecl 0x56364539c4c0 <line:329:5, col:47> col:9 used hard_home_thread_id 'int (const Element *) const'
| `-ParmVarDecl 0x56364539c428 <col:29, col:44> col:44 e 'const Element *'
|-CXXMethodDecl 0x56364539c768 <line:331:5, col:67> col:9 element_lerror 'int (ErrorHandler *, Element *, const char *, ...) const'
| |-ParmVarDecl 0x56364539c578 <col:24, col:36> col:37 'ErrorHandler *'
| |-ParmVarDecl 0x56364539c5f0 <col:39, col:46> col:47 'Element *'
| `-ParmVarDecl 0x56364539c670 <col:49, col:59> col:60 'const char *'
|-CXXMethodDecl 0x56364539c940 <line:334:5, col:40> col:10 initialize_handlers 'void (bool, bool)'
| |-ParmVarDecl 0x56364539c830 <col:30> col:34 'bool'
| `-ParmVarDecl 0x56364539c8a8 <col:36> col:40 'bool'
|-CXXMethodDecl 0x56364539cac8 <line:335:5, col:35> col:21 xhandler 'Handler *(int) const' inline
| `-ParmVarDecl 0x56364539ca08 <col:30> col:33 'int'
|-CXXMethodDecl 0x56364539cd60 <line:336:5, col:60> col:9 find_ehandler 'int (int, const String &, bool) const'
| |-ParmVarDecl 0x56364539cb88 <col:23> col:26 'int'
| |-ParmVarDecl 0x56364539cc00 <col:28, col:40> col:41 'const String &'
| `-ParmVarDecl 0x56364539cc78 <col:43, col:48> col:48 allow_star 'bool'
|-CXXMethodDecl 0x56364539cf78 <line:337:5, col:70> col:27 fetch_handler 'Handler (const Element *, const String &)' static inline
| |-ParmVarDecl 0x56364539ce28 <col:41, col:54> col:55 'const Element *'
| `-ParmVarDecl 0x56364539cea0 <col:57, col:69> col:70 'const String &'
|-CXXMethodDecl 0x56364539d188 <line:338:5, col:52> col:10 store_local_handler 'void (int, Handler &)'
| |-ParmVarDecl 0x56364539d040 <col:30, col:34> col:34 eindex 'int'
| `-ParmVarDecl 0x56364539d0b8 <col:42, col:51> col:51 h 'Handler &'
|-CXXMethodDecl 0x5636453a0a90 <line:339:5, col:48> col:17 store_global_handler 'void (Handler &)' static
| `-ParmVarDecl 0x56364539d248 <col:38, col:47> col:47 h 'Handler &'
|-CXXMethodDecl 0x5636453a0c98 <line:340:5, col:72> col:24 store_handler 'void (const Element *, Handler &)' static inline
| |-ParmVarDecl 0x5636453a0b48 <col:38, col:53> col:53 element 'const Element *'
| `-ParmVarDecl 0x5636453a0bc0 <col:62, col:71> col:71 h 'Handler &'
|-CXXMethodDecl 0x5636453a0e70 <line:343:5, col:66> col:19 router_read_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5636453a0d58 <col:39, col:48> col:48 e 'Element *'
| `-ParmVarDecl 0x5636453a0dd8 <col:51, col:57> col:57 user_data 'void *'
|-CXXMethodDecl 0x5636453a1150 <line:344:5, col:103> col:16 router_write_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5636453a0f30 <col:37, col:51> col:51 str 'const String &'
| |-ParmVarDecl 0x5636453a0fa8 <col:56, col:65> col:65 e 'Element *'
| |-ParmVarDecl 0x5636453a1028 <col:68, col:74> col:74 user_data 'void *'
| `-ParmVarDecl 0x5636453a10a0 <col:85, col:99> col:99 errh 'ErrorHandler *'
|-FriendDecl 0x5636453a1230 <line:347:5, col:18> col:12 'class Master':'Master'
|-FriendDecl 0x5636453a1290 <line:348:5, col:18> col:12 'class Task':'Task'
`-FriendDecl 0x5636453a1510 <line:349:5, col:44> col:25
  `-CXXMethodDecl 0x5636453a1410 parent 0x5636451f6730 prev 0x563645205348 <col:5, col:44> col:25 set_nports 'int (int, int)'
    |-ParmVarDecl 0x5636453a12f0 <col:36> col:39 'int'
    `-ParmVarDecl 0x5636453a1370 <col:41> col:44 'int'

Layout: <CGRecordLayout
  LLVMType:%class.Router = type { %class.Master*, %class.atomic_uint32_t, i32, i8, i32, %class.atomic_uint32_t, %class.Vector, %class.Vector.0, %class.Vector.0, %class.Vector.2, %class.Vector.5, %class.Vector.6, i32, %class.Vector.5, [2 x %class.Vector.5], %class.Vector.5, %class.Vector.8, %class.Vector.5, %class.Vector.0, %class.Vector.5, %class.Vector.5, %class.Vector.5, %class.Vector.5, %class.Handler**, i32, i32, %class.Vector.0, %class.Vector.12, %class.Element*, %class.String, %"struct.Router::notifier_signals_t"*, %class.HashMap_ArenaFactory*, %class.Router*, %class.ThreadSched*, %class.NameInfo*, %class.Vector.5, %class.Vector.0, %class.Router* }
  NonVirtualBaseLLVMType:%class.Router = type { %class.Master*, %class.atomic_uint32_t, i32, i8, i32, %class.atomic_uint32_t, %class.Vector, %class.Vector.0, %class.Vector.0, %class.Vector.2, %class.Vector.5, %class.Vector.6, i32, %class.Vector.5, [2 x %class.Vector.5], %class.Vector.5, %class.Vector.8, %class.Vector.5, %class.Vector.0, %class.Vector.5, %class.Vector.5, %class.Vector.5, %class.Vector.5, %class.Handler**, i32, i32, %class.Vector.0, %class.Vector.12, %class.Element*, %class.String, %"struct.Router::notifier_signals_t"*, %class.HashMap_ArenaFactory*, %class.Router*, %class.ThreadSched*, %class.NameInfo*, %class.Vector.5, %class.Vector.0, %class.Router* }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:1 IsSigned:0 StorageSize:8 StorageOffset:16>
    <CGBitFieldInfo Offset:1 Size:1 IsSigned:0 StorageSize:8 StorageOffset:16>
    <CGBitFieldInfo Offset:2 Size:1 IsSigned:0 StorageSize:8 StorageOffset:16>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636451f6730 prev 0x5636451f64b0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5636451f6828 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x5636451f68b8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5636451f6918 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x5636451f6a08 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x5636451f6b08 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x5636451f6cd8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x5636451f6b88 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x5636451f6c00 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x5636451f6e68 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5636451f6da0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x5636451f6f10 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x5636451f7048 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x5636451f6f80 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x5636451f71e8 <line:40:5, col:37> col:18 used run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x5636451f7128 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x5636451f7388 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x5636451f72c8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x5636451f7430 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x5636451f7530 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x5636451f7610 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f7510 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x5636451f74f0 <col:26> 'int' 1
| `-EnumConstantDecl 0x5636451f75c0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x5636451f7628 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5636451f75a0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x5636451f7580 <col:44> 'int' 2
|-CXXMethodDecl 0x5636451f7770 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x5636451f7658 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5636451f76d8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x5636451f78c8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x5636451f7838 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x5636451f7b08 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x5636451f7988 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x5636451f7a00 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x5636451f7bb8 <col:20>
| `-OptimizeNoneAttr 0x5636451f7c10 <col:30>
|-CXXMethodDecl 0x5636451f7d18 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x5636451f7c50 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x5636451f7dc0 <col:20>
| `-OptimizeNoneAttr 0x5636451f7e18 <col:30>
|-CXXMethodDecl 0x5636451f7e68 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x5636451f7f30 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x5636451f8048 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x5636451f80d0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x5636451f8158 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x5636451f81e0 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x5636451f8268 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x5636451f82f8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x5636451f83b8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x5636451f8440 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x5636451f84c8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x5636451f8550 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x5636451f85d8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x5636451f8660 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x5636451f86f0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x5636451f87b0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x5636451f8840 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x5636451f8990 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x5636451f88f8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x5636451f8b20 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x5636451f8a50 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x5636451f8dd0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x5636451f8bd8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x5636451f8c58 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x5636451f8cd8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x5636451f8e88 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x5636451f8f90 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5636451f9220 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f8f70 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x5636451f8f50 <col:33> 'int' 0
| |-EnumConstantDecl 0x5636451f9020 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5636451f9238 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f9000 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x5636451f8fe0 <col:32> 'int' 20
| |-EnumConstantDecl 0x5636451f90b0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5636451f9250 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f9090 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x5636451f9070 <col:38> 'int' 90
| |-EnumConstantDecl 0x5636451f9140 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5636451f9268 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f9120 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x5636451f9100 <col:35> 'int' 100
| `-EnumConstantDecl 0x5636451f91d0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x5636451f9280 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5636451f91b0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x5636451f9190 <col:32> 'int' 2000
|-CXXMethodDecl 0x5636451f92c0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x5636451f9700 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5636451f9570 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x5636451f95e8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5636451f97d0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x5636451f9950 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x5636451f9880 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5636451f9b58 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5636451f9a08 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x5636451f9a80 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5636451f9c58 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x5636451f9cf8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x5636451f9dc0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x5636451f9e50 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x5636451fa080 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451f9e30 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x5636451f9e10 <col:36> 'int' EnumConstant 0x5636451f9dc0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x5636451f9ea0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5636451f9ef0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5636451f9f40 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5636451f9f90 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5636451f9fe0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x5636451fa030 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x5636451fa168 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x5636451fa0a8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5636451fa230 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x5636451fa2f0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x5636451fa3b0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5636451fa470 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5636451fa588 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5636451fa650 <line:117:5, col:25> col:16 used eindex 'int () const' inline
|-CXXMethodDecl 0x5636451fa7d0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x5636451fa700 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x5636451fa8f8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5636451faaf8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x5636451fa9a8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x5636451faa28 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x563645207438 <col:54, line:127:5>
|   |-ParenExpr 0x5636452072e8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x5636452072b8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x563645206fa8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x563645206f80 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x563645206f68 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x563645206f50 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x563645206f20 <col:31> 'Router *' lvalue ->_router 0x563645204e00
|   |   |         `-CXXThisExpr 0x563645206f10 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x563645207008 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563645206fe8 <col:48> 'int' 0
|   |   `-CallExpr 0x563645207218 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x563645207200 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5636452071e0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563644d2da00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563645207258 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563645207078 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x563645207270 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563645207098 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x563645207288 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5636452070d0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x5636452072a0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5636452071c8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5636452071b0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563645207168 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x563645207380 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x563645207318 <col:9> 'Router *' lvalue ->_router 0x563645204e00
|   | | `-CXXThisExpr 0x563645207308 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x563645207368 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x563645207348 <col:19> 'Router *' lvalue ParmVar 0x5636451fa9a8 'r' 'Router *'
|   `-BinaryOperator 0x563645207418 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x5636452073b0 <col:9> 'int' lvalue ->_eindex 0x563645204e68
|     | `-CXXThisExpr 0x5636452073a0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x563645207400 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5636452073e0 <col:19> 'int' lvalue ParmVar 0x5636451faa28 'eindex' 'int'
|-CXXMethodDecl 0x5636451fac80 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x5636451fabb8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x5636451fad50 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x5636451fae18 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x5636451faeb8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x5636451fb108 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x5636451faf80 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x5636451fb000 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x5636451fb1b8 <col:20>
| `-OptimizeNoneAttr 0x5636451fb210 <col:30>
|-CXXMethodDecl 0x5636451fb318 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5636451fb250 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x5636451fb3c0 <col:20>
| `-OptimizeNoneAttr 0x5636451fb418 <col:30>
|-CXXMethodDecl 0x5636451fb4e8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5636451fb458 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x5636451fb590 <col:20>
| `-OptimizeNoneAttr 0x5636451fb5e8 <col:30>
|-CXXMethodDecl 0x5636451fb778 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x5636451fb620 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5636451fb6a0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x5636451fb908 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5636451fb840 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5636451fba58 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5636451fb9c8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5636451fbba8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5636451fbb18 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5636451fbcf8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5636451fbc68 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5636451fbfb8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x5636451fbdb0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x5636451fbe30 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x5636451fbed8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x5636451fc090 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x5636451fc150 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x5636451fc420 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5636451fc2d0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x5636451fc348 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x5636451fc548 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x5636451fc720 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x5636451fc600 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5636451fc680 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x5636451fc908 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x5636451fc7e8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x5636451fc868 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x5636451fcc78 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5636451fc9c8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5636451fca40 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5636451fcac0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x563645206a20 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x563645206a00 <col:106> 'int' 0
| `-ParmVarDecl 0x5636451fcb38 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x563645206a58 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x563645206a38 <col:126> 'int' 0
|-CXXMethodDecl 0x5636451fd018 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5636451fcd48 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5636451fcde0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5636451fce60 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x5636451fced8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x563645206a90 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x563645206a70 <col:114> 'int' 0
|-CXXMethodDecl 0x5636451fd3a8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5636451fd0f0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x5636451fd168 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5636451fd1e8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x563645206aa8 <col:96> 'int' 0
| `-ParmVarDecl 0x5636451fd260 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x563645206ae8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x563645206ac8 <col:116> 'int' 0
|-CXXMethodDecl 0x5636451fd728 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5636451fd478 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5636451fd4f0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5636451fd570 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x563645206b20 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x563645206b00 <col:109> 'int' 0
| `-ParmVarDecl 0x5636451fd5e8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x563645206b58 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x563645206b38 <col:129> 'int' 0
|-CXXMethodDecl 0x5636451fdaa8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5636451fd7f8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5636451fd870 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5636451fd8f0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x5636451fd968 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x563645206b90 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x563645206b70 <col:117> 'int' 0
|-CXXMethodDecl 0x5636451fde38 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5636451fdb80 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5636451fdbf8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5636451fdc78 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x563645206ba8 <col:99> 'int' 0
| `-ParmVarDecl 0x5636451fdcf0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x563645206be8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x563645206bc8 <col:119> 'int' 0
|-CXXMethodDecl 0x5636451fe258 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x5636451fdf08 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5636451fdf88 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5636451fe000 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5636451fe080 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x563645206c20 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x563645206c00 <col:108> 'int' 0
| `-ParmVarDecl 0x5636451fe100 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x563645206c58 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x563645206c38 <col:141> 'int' 0
|-CXXMethodDecl 0x5636451fe678 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5636451fe330 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5636451fe3b0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5636451fe428 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5636451fe4a8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x5636451fe528 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x563645206c70 <col:121> 'int' 0
|-CXXMethodDecl 0x5636451feaa8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5636451fe758 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x5636451fe7d8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x5636451fe850 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5636451fe8d0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x563645206c90 <col:98> 'int' 0
| `-ParmVarDecl 0x5636451fe950 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x563645206cb0 <col:123> 'int' 0
|-CXXMethodDecl 0x5636451fed70 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x5636451feb80 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5636451fec00 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x5636451fec80 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x563645206cd0 <col:80> 'int' 0
|-EnumDecl 0x5636451fee28 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x5636451fef30 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5636451ff1c0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451fef10 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x5636451feef0 <col:42> 'int' 1
| |-EnumConstantDecl 0x5636451fefc0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5636451ff1d8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451fefa0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x5636451fef80 <col:40> 'int' 2
| |-EnumConstantDecl 0x5636451ff050 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5636451ff1f0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451ff030 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x5636451ff010 <col:44> 'int' 4
| |-EnumConstantDecl 0x5636451ff0e0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5636451ff208 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451ff0c0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x5636451ff0a0 <col:36> 'int' 7
| `-EnumConstantDecl 0x5636451ff170 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x5636451ff220 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5636451ff150 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x5636451ff130 <col:34> 'int' 6
|-CXXMethodDecl 0x5636451ff4d8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x5636451ff248 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x5636451ff2e8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5636451ff368 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x5636451ff3e0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x563645206d88 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x563645206d70 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x563645206d58 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x563645206d38 <col:98, col:105> 'String' (CXXTemporary 0x563645206d38)
|           `-CXXTemporaryObjectExpr 0x563645206d00 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5636451ff778 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5636451ff5a8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5636451ff620 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5636451ff698 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x563645206e38 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x563645206e20 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x563645206e08 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x563645206de8 <col:94, col:101> 'String' (CXXTemporary 0x563645206de8)
| |         `-CXXTemporaryObjectExpr 0x563645206db0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x563645207620 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x563645207598 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x563645207568 <col:9> '<bound member function type>' ->add_task_handlers 0x5636451ff4d8
|     | `-CXXThisExpr 0x563645207558 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5636452075d8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5636452074d8 <col:27> 'Task *' lvalue ParmVar 0x5636451ff5a8 'task' 'Task *'
|     |-ImplicitCastExpr 0x5636452075f0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x5636452074f8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x5636451ff620 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x563645207608 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x563645207518 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5636451ff170 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x563645207538 <col:62> 'const String' lvalue ParmVar 0x5636451ff698 'prefix' 'const String &'
|-CXXMethodDecl 0x5636451ff988 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x5636451ff840 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5636451ff8b8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x563645206ee8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x563645206ed0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x563645206eb8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x563645206e98 <col:70, col:77> 'String' (CXXTemporary 0x563645206e98)
| |         `-CXXTemporaryObjectExpr 0x563645206e60 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x5636452077f8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x563645207770 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x563645207740 <col:9> '<bound member function type>' ->add_task_handlers 0x5636451ff4d8
|     | `-CXXThisExpr 0x563645207730 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5636452077b0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5636452076b0 <col:27> 'Task *' lvalue ParmVar 0x5636451ff840 'task' 'Task *'
|     |-ImplicitCastExpr 0x5636452077c8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x5636452076d0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x5636452077e0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5636452076f0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5636451ff170 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x563645207710 <col:57> 'const String' lvalue ParmVar 0x5636451ff8b8 'prefix' 'const String &'
|-CXXMethodDecl 0x5636451ffc68 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x5636451ffa50 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5636451ffad0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5636451ffb48 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x5636451fff18 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x5636451ffd38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5636451ffdb8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5636451ffe38 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x563645200208 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5636451fffe8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563645200068 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5636452000e0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x5636452004b8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x5636452002d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563645200358 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5636452003d8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x563645200768 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x563645200588 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563645200608 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563645200688 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x563645200a18 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x563645200838 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5636452008b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563645200930 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x563645200cc8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x563645200ae8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563645200b68 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563645200be8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x563645200fd8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x563645200df0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563645200e70 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563645200ef0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x5636452012b8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x5636452010a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563645201128 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5636452011d0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x563645201598 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x563645201388 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563645201408 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5636452014b0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x563645201800 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x563645201668 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5636452016e8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x563645201760 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x563645201aa8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x5636452018d0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x563645201950 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5636452019c8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x563645201d58 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x563645201b78 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563645201bf8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563645201c78 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x563645202008 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x563645201e28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563645201ea8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563645201f20 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x5636452022b8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x5636452020d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563645202158 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5636452021d0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x563645202588 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x563645202388 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563645202408 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5636452024a8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x5636452028b8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x563645202658 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5636452026d8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x563645202750 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x5636452027c8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x563645206f00 <col:93> 'bool' false
|-CXXMethodDecl 0x563645202aa0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x563645202988 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x563645202a08 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x563645202c78 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x563645202b60 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x563645202be0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x563645202f58 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x563645202d38 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x563645202db0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x563645202e30 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x563645202ea8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x563645203248 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x563645203028 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x5636452030a0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x563645203120 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x563645203198 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x563645203480 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x563645203320 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x5636452033a0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x563645203668 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x563645203548 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x5636452035c8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x563645203718 prev 0x5636451faeb8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x563645203810 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x5636452038a0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x563645203918 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x5636452039d8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x563645203aa0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x563645203c18 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x563645203b50 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x563645203cc0 <col:24>
| | `-OptimizeNoneAttr 0x563645203d18 <col:34>
| |-CXXMethodDecl 0x563645203d60 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x563645204018 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x563645203e10 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x563645203e88 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x563645203f08 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x5636452040d0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x563645204108 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x563645204170 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x5636452041f8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x563645204518 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x5636452042b0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x563645204328 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x5636452043a0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x563645204420 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x563645204630 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x56364520af98 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x56364520af98
| | `-ParmVarDecl 0x56364520b0a8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x56364520b148 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x56364520b148
| | `-ParmVarDecl 0x56364520b258 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x5636453d8428 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5636452046a8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x563645204748 <col:38> "" ""
|-CXXMethodDecl 0x5636452047d8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x563645204878 <col:44> "" ""
|-AccessSpecDecl 0x5636452048e8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x563645204910 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x563645204a10 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x563645204a60 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5636452049f0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x5636452049d0 <col:27> 'int' 4
|-FieldDecl 0x563645204b18 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x563645204cc8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x563645204d80 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x563645204e00 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x563645204e68 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x563645204fb8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x563645204ef8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x563645205168 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x563645205078 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x563645205348 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x563645205228 <col:20> col:23 'int'
| `-ParmVarDecl 0x5636452052a8 <col:25> col:28 'int'
|-CXXMethodDecl 0x5636452055f0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x563645205410 <col:23> col:26 'int'
| |-ParmVarDecl 0x563645205490 <col:28> col:31 'int'
| `-ParmVarDecl 0x563645205508 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x5636452056a8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x563645205770 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x5636452057c0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x563645205810 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x5636452059f0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x5636452058a0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x563645205918 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x563645205c98 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x563645205ab8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x563645205b38 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x563645205bb0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x563645205eb8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x563645205d68 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x563645205de8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x5636452061f0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x563645205f78 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x563645205ff8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x563645206070 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x5636452060f0 <col:57> col:60 'int'
|-CXXMethodDecl 0x5636452063d8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5636452062c0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x563645206340 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x563645206528 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x563645206498 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x5636452068a8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x5636452065e8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x563645206668 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x5636452066e0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x563645206760 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x5636452069c0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5)
         0 |   TimerCallback callback
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timer
         0 |   int _schedpos1
         8 |   class Timestamp _expiry_s
         8 |     union Timestamp::rep_t _t
         8 |       int64_t x
        16 |   union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
        16 |     TimerCallback callback
        24 |   void * _thunk
        32 |   class Element * _owner
        40 |   class RouterThread * _thread
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | class ICMPPingSource
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   struct in_addr _src
       108 |     in_addr_t s_addr
       112 |   struct in_addr _dst
       112 |     in_addr_t s_addr
       116 |   int _count
       120 |   int _limit
       124 |   uint16_t _icmp_id
       128 |   uint32_t _interval
       136 |   class Timer _timer
       136 |     int _schedpos1
       144 |     class Timestamp _expiry_s
       144 |       union Timestamp::rep_t _t
       144 |         int64_t x
       152 |     union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
       152 |       TimerCallback callback
       160 |     void * _thunk
       168 |     class Element * _owner
       176 |     class RouterThread * _thread
       184 |   class String _data
       184 |     struct String::rep_t _r
       184 |       const char * data
       192 |       int length
       200 |       struct String::memo_t * memo
       208 |   _Bool _active
       209 |   _Bool _verbose
       210 |   _Bool _stop
       211 |   _Bool _mirror
       216 |   struct ICMPPingSource::ReceiverInfo * _receiver
           | [sizeof=224, dsize=224, align=8,
           |  nvsize=224, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563644f27f08 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563644f28028 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x563644f280f0 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x563644ff88e0 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x563644ffdbf8 <col:8>
|-CXXConstructorDecl 0x563644ff89e8 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x563644ff89e8
| `-ParmVarDecl 0x563644ff8af8 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x563644ff8b98 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x563644ff8ca8 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x563644f280f0 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x563644ffde10 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x563644ffdde0 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x563644f280f0
| |     `-CXXStaticCastExpr 0x563644ffddb0 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x563644ffdd80 <col:8> 'in_addr' lvalue ParmVar 0x563644ff8ca8 '' 'in_addr &&'
| `-CompoundStmt 0x563644ffde58 <col:8>
`-CXXDestructorDecl 0x563644ffe090 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56364518c0d0 prev 0x563645182ed0 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56364518c1c8 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x56364518c268 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x563645193030 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x563645193418 <col:11>
|-CXXConstructorDecl 0x563645193110 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5636451931f8 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x563645193b60 <col:11>
|-CXXConstructorDecl 0x563645193298 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5636451933a8 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x5636451953b8 <col:11>
|-CXXDestructorDecl 0x5636451946c8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x563644e9ae08 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x563644e9af18 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x563644e9b7e0 <col:11>
|   `-ReturnStmt 0x563644e9b7d0 <col:11>
|     `-UnaryOperator 0x563644e9b7b8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x563644e9b7a8 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x563644e9af88 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
  |-ParmVarDecl 0x563644e9b098 <col:11> col:11 'Timestamp::rep_t &&'
  `-CompoundStmt 0x563645177120 <col:11>
    `-ReturnStmt 0x563645177110 <col:11>
      `-UnaryOperator 0x5636451770f8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x5636451770e8 <col:11> 'Timestamp::rep_t *' this

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563645182088 prev 0x563645181d98 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563645182180 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x563645182210 <col:19, col:25> col:19 public
|-TypedefDecl 0x563645182248 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x563644de6fe0 'int32_t' sugar
|   |-Typedef 0x563644cf6268 'int32_t'
|   `-TypedefType 0x563644ccf3b0 '__int32_t' sugar
|     |-Typedef 0x563644ccefc8 '__int32_t'
|     `-BuiltinType 0x563644c8d370 'int'
|-TypedefDecl 0x5636451822b0 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x563644de71a0 'int64_t' sugar
|   |-Typedef 0x563644cf62d0 'int64_t'
|   `-TypedefType 0x563644ccf4d0 '__int64_t' sugar
|     |-Typedef 0x563644ccf0a8 '__int64_t'
|     `-BuiltinType 0x563644c8d390 'long'
|-EnumDecl 0x563645182308 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x563645182480 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x563645182460 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x563645182438 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x563645182420 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x5636451823f0 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x563645182578 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x563645182558 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x563645182530 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x563645182518 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x5636451824f0 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x5636451824d0 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x5636451825c8 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x5636451826d0 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x563645182c20 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451826b0 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x563645182690 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x563645182760 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x563645182c38 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563645182740 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x563645182720 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x5636451827f0 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x563645182c50 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451827d0 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x5636451827b0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x563645182880 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x563645182c68 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563645182860 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x563645182840 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x563645182910 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x563645182c80 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451828f0 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x5636451828d0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x5636451829a0 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x563645182c98 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563645182980 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x563645182960 <col:24> 'int' 1000
| |-EnumConstantDecl 0x563645182a30 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x563645182cb0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563645182a10 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x5636451829f0 <col:26> 'int' EnumConstant 0x5636451826d0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x563645182b00 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x563645182cc8 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563645182ae0 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x563645182ac0 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x563645182a80 <col:27> 'int' EnumConstant 0x563645182a30 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x563645182aa0 <col:44> 'int' EnumConstant 0x5636451829a0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x563645182bd0 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x563645182ce0 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563645182bb0 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x563645182b90 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x563645182b50 <col:27> 'int' EnumConstant 0x563645182a30 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x563645182b70 <col:44> 'int' EnumConstant 0x563645182880 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x563645182cf8 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x563645182e00 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x563645182e50 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563645182de0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x563645182dc0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x563645182a30 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x563645182e78 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x563644de6c10 'uninitialized_type'
|   `-CXXRecord 0x563644de6b78 'uninitialized_type'
|-CXXRecordDecl 0x563645182ed0 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x563645182fe0 <line:174:5, line:176:5> line:174:12 used Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x56364518d218 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x563645193428 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x563645193548 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x563645193500 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x563645193490 <col:9> '<bound member function type>' ->assign 0x563645187c68
|     | `-CXXThisExpr 0x563645193480 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x5636451934c0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x563645193530 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5636451934e0 <col:19> 'int' 0
|-CXXConstructorDecl 0x563645183228 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x5636451830a0 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x563645183118 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x56364518ed60 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x56364518ed40 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x56364518d218 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x563645193560 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5636451936b0 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x563645193638 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x5636451935c8 <col:9> '<bound member function type>' ->assign 0x563645187c68
|     | `-CXXThisExpr 0x5636451935b8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x563645193680 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x563645193668 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x5636451935f8 <col:16> 'long' lvalue ParmVar 0x5636451830a0 'sec' 'long'
|     `-ImplicitCastExpr 0x563645193698 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x563645193618 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x563645183118 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x563645183488 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5636451832f8 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x563645183370 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x56364518ed98 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x56364518ed78 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x56364518d218 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5636451936c8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x563645193800 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x5636451937a0 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x563645193730 <col:9> '<bound member function type>' ->assign 0x563645187c68
|     | `-CXXThisExpr 0x563645193720 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5636451937d0 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x563645193760 <col:16> 'int' lvalue ParmVar 0x5636451832f8 'sec' 'int'
|     `-ImplicitCastExpr 0x5636451937e8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x563645193780 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x563645183370 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5636451836e8 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x563645183558 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x5636451835d0 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x56364518edd0 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x56364518edb0 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x56364518d218 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x563645193818 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x563645193968 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x5636451938f0 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x563645193880 <col:9> '<bound member function type>' ->assign 0x563645187c68
|     | `-CXXThisExpr 0x563645193870 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x563645193938 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x563645193920 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x5636451938b0 <col:16> 'unsigned long' lvalue ParmVar 0x563645183558 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x563645193950 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5636451938d0 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5636451835d0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5636451848c0 <line:199:5, line:201:5> line:199:21 used Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x5636451837b8 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x563645183830 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x56364518ee08 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x56364518ede8 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x56364518d218 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x563645193980 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x563645193ad0 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x563645193a58 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x5636451939e8 <col:9> '<bound member function type>' ->assign 0x563645187c68
|     | `-CXXThisExpr 0x5636451939d8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x563645193aa0 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x563645193a88 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x563645193a18 <col:16> 'unsigned int' lvalue ParmVar 0x5636451837b8 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x563645193ab8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x563645193a38 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x563645183830 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x563645184a20 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x563645184990 <col:31> col:37 'double'
|-CXXConstructorDecl 0x563645184bb8 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x563645184af8 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x563645184de8 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x563645184cf0 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x563645184f98 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x563645184ed8 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x56364518d218 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x563645193b70 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x563645193ae8 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x563645184ed8 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x563645193bd0 <col:19, line:214:5>
|-CXXConstructorDecl 0x563645185168 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x5636451850a8 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x56364518d218 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x563645193be0 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x563645193c90 <col:53, line:219:5>
|   `-CStyleCastExpr 0x563645193c68 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x563645193c38 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x5636451850a8 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x563645185358 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x5636451852d0 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x563645181e30 'Timestamp'
|   | `-CXXRecord 0x563645182088 'Timestamp'
|   `-ParenType 0x563645185270 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x563645185240 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x5636451823d0 'Timestamp::seconds_type' sugar
|         |-Typedef 0x563645182248 'seconds_type'
|         `-TypedefType 0x563644de6fe0 'int32_t' sugar
|           |-Typedef 0x563644cf6268 'int32_t'
|           `-TypedefType 0x563644ccf3b0 '__int32_t' sugar
|             |-Typedef 0x563644ccefc8 '__int32_t'
|             `-BuiltinType 0x563644c8d370 'int'
|-CXXConversionDecl 0x563645185498 <line:222:5, col:45> col:12 used operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x563645185568 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x563645193d98 <col:37, line:231:5>
|   `-ReturnStmt 0x563645193d88 <line:227:9, col:23>
|     `-BinaryOperator 0x563645193d68 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x563645193d38 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x563645193ce8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x56364518c268
|       |   `-MemberExpr 0x563645193cb8 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x56364518d218
|       |     `-CXXThisExpr 0x563645193ca8 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x563645193d50 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x563645193d18 <col:23> 'int' 0
|-CXXMethodDecl 0x563645185628 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x5636451856e8 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x5636451857a8 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x563645185868 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x563645185928 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x563645185a98 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x5636451859d8 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x563645185be0 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x563645185b50 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563645185ca8 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x563645185d48 <col:54> "" ""
|-CXXMethodDecl 0x563645185dd8 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x563645185e78 <col:54> "" ""
|-CXXMethodDecl 0x563645185f08 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x563645185fa8 <col:54> "" ""
|-CXXMethodDecl 0x5636451860a8 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x563645186178 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x5636451862a8 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x5636451863a0 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x5636451864d8 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x563645193fb0 <col:39, line:271:5>
|   `-ReturnStmt 0x563645193fa0 <line:267:9, col:61>
|     `-CallExpr 0x563645193f40 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x563645193f28 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563645193db0 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x56364518d548 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x563645193f70 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x563645193e10 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x56364518c268
|       |   `-MemberExpr 0x563645193de0 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x56364518d218
|       |     `-CXXThisExpr 0x563645193dd0 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x563645193f88 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x563645193eb0 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x563645193e80 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x563645193e40 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x563645182a30 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x563645193e98 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x563645193e60 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636451829a0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x563645186598 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x563645194170 <col:39, line:279:5>
|   `-ReturnStmt 0x563645194160 <line:275:9, col:61>
|     `-CallExpr 0x563645194100 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x5636451940e8 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563645193fc8 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x56364518d548 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x563645194130 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x563645194028 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x56364518c268
|       |   `-MemberExpr 0x563645193ff8 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x56364518d218
|       |     `-CXXThisExpr 0x563645193fe8 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x563645194148 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x5636451940c8 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x563645194098 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x563645194058 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x563645182a30 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x5636451940b0 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x563645194078 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x563645182880 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x563645186658 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x563645194308 <col:39, line:287:5>
|   `-ReturnStmt 0x5636451942f8 <line:283:9, col:53>
|     `-BinaryOperator 0x5636451942d8 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x5636451942a8 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5636451941c8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x56364518c268
|       |   `-MemberExpr 0x563645194198 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x56364518d218
|       |     `-CXXThisExpr 0x563645194188 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5636451942c0 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x563645194288 <col:23, col:53> 'int'
|           `-BinaryOperator 0x563645194268 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x563645194238 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5636451941f8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636451826d0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x563645194250 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x563645194218 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x563645182a30 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x563645186748 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5636451955a0 <col:40, line:293:5>
|   |-DeclStmt 0x563645194450 <line:291:9, col:48>
|   | `-VarDecl 0x563645194330 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x563645194430 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x5636451943d8 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x5636451943a8 <col:22> '<bound member function type>' ->subsec 0x5636451856e8
|   |     |   `-CXXThisExpr 0x563645194398 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x563645194418 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x5636451943f8 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x563645182b00 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x563645195590 <line:292:9, col:70>
|     `-ExprWithCleanups 0x563645195578 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x563645195548 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x563645195530 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x563645195510 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x5636451954e0 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x563645195278 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x563645195260 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x563645194468 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x563645194330 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x563645195480 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x563645195468 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x563645195438 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x563645195290 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x563645195200 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x5636451951e8 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x563645195198 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x563645181fd8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x563645195138 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x563645194498 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x563645194488 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x563645195180 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x563645195168 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x563645194958 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x5636451944c0 <col:39> 'int' 0
|               |               `-BinaryOperator 0x563645194550 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x563645194520 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x5636451944e0 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x563645182b00 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x563645194538 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x563645194500 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x563645194330 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x5636451954b0 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x563645195248 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x563645195238 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x563645186808 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x563645195af8 <col:40, line:302:5>
|   |-DeclStmt 0x5636451956f0 <line:297:9, col:48>
|   | `-VarDecl 0x5636451955d0 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x5636451956d0 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x563645195678 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x563645195648 <col:22> '<bound member function type>' ->subsec 0x5636451856e8
|   |     |   `-CXXThisExpr 0x563645195638 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x5636451956b8 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x563645195698 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x563645182bd0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x563645195ae8 <line:298:9, col:70>
|     `-ExprWithCleanups 0x563645195ad0 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x563645195aa0 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x563645195a88 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x563645195a68 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x563645195a38 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x563645195960 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x563645195948 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x563645195708 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x5636451955d0 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x5636451959d8 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x5636451959c0 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x563645195990 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x563645195978 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x5636451958e8 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x5636451958d0 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x5636451958b0 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x563645181fd8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x563645195850 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x563645195738 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x563645195728 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x563645195898 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x563645195880 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x563645195810 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x563645195760 <col:39> 'int' 0
|               |               `-BinaryOperator 0x5636451957f0 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x5636451957c0 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x563645195780 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x563645182bd0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x5636451957d8 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x5636451957a0 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x5636451955d0 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x563645195a08 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x563645195930 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x563645195920 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x5636451868c8 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x563645195b80 <col:40, line:306:5>
|   `-ReturnStmt 0x563645195b70 <line:305:9, col:17>
|     `-CXXConstructExpr 0x563645195b40 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x563645195b28 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563645195b18 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x563645186a68 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x563645186978 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x563645186c38 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x563645186b40 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x563645186d28 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x563645186e98 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x563645186dd8 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x563645195cc8 <col:56, line:320:5>
|   `-ReturnStmt 0x563645195cb8 <line:319:9, col:32>
|     `-ExprWithCleanups 0x563645195ca0 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x563645195c70 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x563645195c58 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x563645195c18 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x563645195be8 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x563645195ba8 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x563645186dd8 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x563645195c00 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x563645195bc8 <col:31> 'int' 0
|-CXXMethodDecl 0x5636451870d8 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x563645186f50 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x563645186fc8 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x563645195e98 <col:72, line:326:5>
|   `-ReturnStmt 0x563645195e88 <line:325:9, col:51>
|     `-ExprWithCleanups 0x563645195e70 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x563645195e40 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x563645195e28 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x563645195de8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x563645195dd0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x563645195cf0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x563645186f50 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x563645195d90 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x563645195d78 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x563645195d10 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x56364518b9c0 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x563645195db8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x563645195d30 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x563645186fc8 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563645187288 <line:328:5, line:337:5> line:328:29 used make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x563645187198 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x563645196560 <col:56, line:337:5>
|   |-DeclStmt 0x563645196198 <line:329:9, col:51>
|   | `-VarDecl 0x563645195ec0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x563645196180 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x563645196150 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x563645196138 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x563645196120 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5636451960f0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5636451960d8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5636451960c0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x563645195fb0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x563645196350 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x563645196200 <col:9, col:14> 'int64_t':'long' lvalue .x 0x56364518c268
|   | | `-MemberExpr 0x5636451961d0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x56364518d218
|   | |   `-DeclRefExpr 0x5636451961b0 <col:9> 'Timestamp' lvalue Var 0x563645195ec0 't' 'Timestamp'
|   | `-BinaryOperator 0x563645196330 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x563645196300 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x563645196230 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x563645187198 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x563645196318 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x5636451962e0 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x5636451962c0 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x563645196290 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x563645196250 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x563645182a30 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x5636451962a8 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x563645196270 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636451829a0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x563645196548 <line:336:9, col:16>
|     `-CXXConstructExpr 0x563645196518 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x563645196500 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5636451964e0 <col:16> 'Timestamp' lvalue Var 0x563645195ec0 't' 'Timestamp'
|-CXXMethodDecl 0x563645187450 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x563645187340 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5636451873b8 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x563645196718 <col:72, line:343:5>
|   `-ReturnStmt 0x563645196708 <line:342:9, col:51>
|     `-ExprWithCleanups 0x5636451966f0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5636451966c0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5636451966a8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x563645196668 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x563645196650 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x563645196598 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x563645187340 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x563645196610 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5636451965f8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5636451965b8 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x56364518bb08 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x563645196638 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5636451965d8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5636451873b8 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636451875a0 <line:345:5, line:354:5> line:345:29 used make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x563645187510 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x563645196b60 <col:56, line:354:5>
|   |-DeclStmt 0x563645196908 <line:346:9, col:51>
|   | `-VarDecl 0x563645196740 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5636451968f0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5636451968c0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5636451968a8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x563645196890 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x563645196860 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x563645196848 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x563645196830 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x563645196800 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x563645196ac0 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x563645196970 <col:9, col:14> 'int64_t':'long' lvalue .x 0x56364518c268
|   | | `-MemberExpr 0x563645196940 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x56364518d218
|   | |   `-DeclRefExpr 0x563645196920 <col:9> 'Timestamp' lvalue Var 0x563645196740 't' 'Timestamp'
|   | `-BinaryOperator 0x563645196aa0 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x563645196a70 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5636451969a0 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x563645187510 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x563645196a88 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x563645196a50 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x563645196a30 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x563645196a00 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x5636451969c0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x563645182a30 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x563645196a18 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x5636451969e0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x563645182880 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x563645196b48 <line:353:9, col:16>
|     `-CXXConstructExpr 0x563645196b18 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x563645196b00 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x563645196ae0 <col:16> 'Timestamp' lvalue Var 0x563645196740 't' 'Timestamp'
|-CXXMethodDecl 0x563645187768 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x563645187658 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5636451876d0 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x563645196d18 <col:72, line:360:5>
|   `-ReturnStmt 0x563645196d08 <line:359:9, col:51>
|     `-ExprWithCleanups 0x563645196cf0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x563645196cc0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x563645196ca8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x563645196c68 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x563645196c50 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x563645196b98 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x563645187658 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x563645196c10 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x563645196bf8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x563645196bb8 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x56364518bc50 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x563645196c38 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x563645196bd8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5636451876d0 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636451878b8 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x563645187828 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5636451a3688 <col:56, line:371:5>
|   |-DeclStmt 0x563645196f08 <line:363:9, col:51>
|   | `-VarDecl 0x563645196d40 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x563645196ef0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x563645196ec0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x563645196ea8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x563645196e90 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x563645196e60 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x563645196e48 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x563645196e30 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x563645196e00 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5636451a35e8 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x563645196f70 <col:9, col:14> 'int64_t':'long' lvalue .x 0x56364518c268
|   | | `-MemberExpr 0x563645196f40 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x56364518d218
|   | |   `-DeclRefExpr 0x563645196f20 <col:9> 'Timestamp' lvalue Var 0x563645196d40 't' 'Timestamp'
|   | `-CallExpr 0x5636451a3588 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x5636451a3570 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x563645196fa0 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x56364518d548 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x5636451a35b8 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x563645196fc0 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x563645187828 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5636451a35d0 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x5636451a3550 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x5636451a3520 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x563645196fe0 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636451826d0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x5636451a3538 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x563645197000 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x563645182a30 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5636451a3670 <line:370:9, col:16>
|     `-CXXConstructExpr 0x5636451a3640 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5636451a3628 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5636451a3608 <col:16> 'Timestamp' lvalue Var 0x563645196d40 't' 'Timestamp'
|-CXXMethodDecl 0x5636451879a8 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x5636451a37c8 <col:39, line:377:5>
|   `-ReturnStmt 0x5636451a37b8 <line:376:9, col:30>
|     `-ExprWithCleanups 0x5636451a37a0 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x5636451a3770 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5636451a3758 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5636451a3718 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x5636451a36c0 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x5636451a3700 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5636451a36e0 <col:29> 'int' 1
|-CXXMethodDecl 0x563645187a68 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x5636451a38a8 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x5636451a3860 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x5636451a37f0 <col:9> '<bound member function type>' ->assign 0x563645187c68
|     | `-CXXThisExpr 0x5636451a37e0 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x5636451a3820 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x5636451a3890 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5636451a3840 <col:19> 'int' 0
|-CXXMethodDecl 0x563645187c68 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x563645187b18 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x563645187b90 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x56364518ee40 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x56364518ee20 <col:60> 'int' 0
| `-CompoundStmt 0x5636451a3aa0 <col:63, line:395:5>
|   `-BinaryOperator 0x5636451a3a80 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x5636451a3900 <col:9, col:12> 'int64_t':'long' lvalue .x 0x56364518c268
|     | `-MemberExpr 0x5636451a38d0 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x56364518d218
|     |   `-CXXThisExpr 0x5636451a38c0 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x5636451a3a60 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x5636451a39f0 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x5636451a3990 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x5636451a3978 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x5636451a3960 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x5636451a3930 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x563645187b18 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x5636451a39d8 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x5636451a39b8 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x563645182a30 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x5636451a3a48 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x5636451a3a30 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x5636451a3a10 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x563645187b90 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563645187e38 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x563645187d28 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x563645187da0 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5636451a3bf8 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x5636451a3bb0 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x5636451a3ac8 <col:9> '<bound member function type>' ->assign 0x563645187c68
|     | `-CXXThisExpr 0x5636451a3ab8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5636451a3be0 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5636451a3af8 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x563645187d28 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x5636451a3b70 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5636451a3b58 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5636451a3b18 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x56364518bb08 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x5636451a3b98 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5636451a3b38 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x563645187da0 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563645188008 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x563645187ef8 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x563645187f70 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5636451a3d50 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x5636451a3d08 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x5636451a3c20 <col:9> '<bound member function type>' ->assign 0x563645187c68
|     | `-CXXThisExpr 0x5636451a3c10 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5636451a3d38 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5636451a3c50 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x563645187ef8 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x5636451a3cc8 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5636451a3cb0 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5636451a3c70 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x56364518bc50 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x5636451a3cf0 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5636451a3c90 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x563645187f70 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636451881d8 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5636451880c8 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x563645188140 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x56364518ee78 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x56364518ee58 <col:57> 'int' 0
| `-DeprecatedAttr 0x563645188288 <col:75> "" ""
|-CXXMethodDecl 0x563645188418 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x563645188308 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x563645188380 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5636451884c8 <col:74> "" ""
|-CXXMethodDecl 0x563645188658 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x563645188548 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5636451885c0 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x563645188708 <col:74> "" ""
|-CXXMethodDecl 0x563645188798 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x563645188838 <col:42> "" ""
|-CXXMethodDecl 0x56364518b070 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x56364518af50 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x56364518afd0 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x56364518b140 <line:432:5, col:33> col:29 now 'Timestamp ()' static inline
|-CXXMethodDecl 0x56364518b200 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x56364518b2a0 <col:20>
| `-OptimizeNoneAttr 0x56364518b2f8 <col:30>
|-CXXMethodDecl 0x56364518b340 <line:446:5, col:36> col:29 used recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x56364518b400 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x56364518b4c0 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x56364518b580 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x56364518b640 <line:481:5, col:43> col:29 used recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x56364518b700 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x56364518b7c0 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x56364518b880 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x56364518b9c0 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56364518b930 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5636451a3e98 <col:58, line:512:5>
|   `-ReturnStmt 0x5636451a3e88 <line:511:9, col:53>
|     `-BinaryOperator 0x5636451a3e68 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5636451a3e38 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5636451a3d68 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56364518b930 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5636451a3e50 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5636451a3e18 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5636451a3df8 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5636451a3dc8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5636451a3d88 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x563645182a30 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5636451a3de0 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5636451a3da8 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636451829a0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56364518bb08 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56364518ba78 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5636451a3fe0 <col:58, line:516:5>
|   `-ReturnStmt 0x5636451a3fd0 <line:515:9, col:53>
|     `-BinaryOperator 0x5636451a3fb0 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5636451a3f80 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5636451a3eb0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56364518ba78 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5636451a3f98 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5636451a3f60 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5636451a3f40 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5636451a3f10 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5636451a3ed0 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x563645182a30 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5636451a3f28 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5636451a3ef0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x563645182880 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56364518bc50 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56364518bbc0 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5636451a4128 <col:58, line:520:5>
|   `-ReturnStmt 0x5636451a4118 <line:519:9, col:53>
|     `-BinaryOperator 0x5636451a40f8 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5636451a40c8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5636451a3ff8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56364518bbc0 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5636451a40e0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5636451a40a8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5636451a4088 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x5636451a4058 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5636451a4018 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636451826d0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5636451a4070 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5636451a4038 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x563645182a30 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56364518bd98 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56364518bd08 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5636451a4270 <col:60, line:524:5>
|   `-ReturnStmt 0x5636451a4260 <line:523:9, col:55>
|     `-BinaryOperator 0x5636451a4240 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5636451a4210 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5636451a4140 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56364518bd08 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5636451a4228 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5636451a41f0 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5636451a41d0 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x5636451a41a0 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5636451a4160 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x563645182a30 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5636451a41b8 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5636451a4180 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636451829a0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56364518bee0 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56364518be50 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5636451a43b8 <col:60, line:528:5>
|   `-ReturnStmt 0x5636451a43a8 <line:527:9, col:55>
|     `-BinaryOperator 0x5636451a4388 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5636451a4358 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5636451a4288 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56364518be50 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5636451a4370 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5636451a4338 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5636451a4318 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x5636451a42e8 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5636451a42a8 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x563645182a30 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5636451a4300 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5636451a42c8 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x563645182880 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56364518c028 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56364518bf98 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5636451a4500 <col:60, line:532:5>
|   `-ReturnStmt 0x5636451a44f0 <line:531:9, col:55>
|     `-BinaryOperator 0x5636451a44d0 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5636451a44a0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5636451a43d0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56364518bf98 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5636451a44b8 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5636451a4480 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5636451a4460 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5636451a4430 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5636451a43f0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5636451826d0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5636451a4448 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5636451a4410 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x563645182a30 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x56364518c0d0 prev 0x563645182ed0 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56364518c1c8 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x56364518c268 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x563645193030 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x563645193418 <col:11>
| |-CXXConstructorDecl 0x563645193110 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5636451931f8 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x563645193b60 <col:11>
| |-CXXConstructorDecl 0x563645193298 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x5636451933a8 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x5636451953b8 <col:11>
| |-CXXDestructorDecl 0x5636451946c8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x563644e9ae08 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x563644e9af18 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x563644e9b7e0 <col:11>
| |   `-ReturnStmt 0x563644e9b7d0 <col:11>
| |     `-UnaryOperator 0x563644e9b7b8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x563644e9b7a8 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x563644e9af88 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x563644e9b098 <col:11> col:11 'Timestamp::rep_t &&'
|   `-CompoundStmt 0x563645177120 <col:11>
|     `-ReturnStmt 0x563645177110 <col:11>
|       `-UnaryOperator 0x5636451770f8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5636451770e8 <col:11> 'Timestamp::rep_t *' this
|-EnumDecl 0x56364518c2d0 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x56364518c3d0 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x56364518c5d0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56364518c3b0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x56364518c390 <col:21> 'int' 0
| |-EnumConstantDecl 0x56364518c460 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x56364518c5e8 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56364518c440 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x56364518c420 <col:23> 'int' 1
| |-EnumConstantDecl 0x56364518c4f0 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x56364518c600 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56364518c4d0 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x56364518c4b0 <col:23> 'int' 2
| `-EnumConstantDecl 0x56364518c580 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x56364518c618 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56364518c560 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x56364518c540 <col:27> 'int' 3
|-CXXMethodDecl 0x56364518c658 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x56364518c720 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x56364518c928 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x56364518c7d0 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x56364518c850 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x56364518ee90 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x56364518cb38 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x56364518c9e8 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x56364518ca60 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x56364518cc08 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x56364518ccc8 <line:635:5, col:37> col:24 used warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x56364518ce38 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x56364518cd78 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x56364518cf00 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x56364518cfc0 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x56364518d080 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x56364518d140 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x56364518d1e0 <line:670:3, col:10> col:3 private
|-FieldDecl 0x56364518d218 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x56364518d288 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x5636451a4518 <col:27, line:684:5>
|-CXXMethodDecl 0x56364518d348 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x5636451a4528 <col:27, line:696:5>
|-CXXMethodDecl 0x56364518d548 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x56364518d3f8 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x56364518d470 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5636451a46b0 <col:66, line:700:5>
|   `-ReturnStmt 0x5636451a46a0 <line:699:9, col:31>
|     `-CallExpr 0x5636451a4640 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x5636451a4628 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5636451a45d8 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x56364500f6a8 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x5636451a4670 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x5636451a4598 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x56364518d3f8 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x5636451a4688 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5636451a45b8 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x56364518d470 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56364518d8b8 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x56364518d608 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x56364518d680 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x56364518d6f8 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x56364518d770 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5636451a4a00 <col:64, line:707:5>
|   |-DeclStmt 0x5636451a4740 <line:704:9, col:24>
|   | `-VarDecl 0x5636451a46d8 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x5636451a4950 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x5636451a4758 <col:9> 'int32_t':'int' lvalue ParmVar 0x56364518d680 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x5636451a4938 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x5636451a48d0 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x5636451a48b8 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5636451a4838 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x563645014978 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x5636451a4908 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5636451a47d8 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x56364518d6f8 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x5636451a4920 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5636451a47f8 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x56364518d770 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x5636451a4818 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x5636451a46d8 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x5636451a49e0 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x5636451a4970 <col:9> 'int32_t':'int' lvalue ParmVar 0x56364518d608 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x5636451a49c8 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x5636451a49b0 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x5636451a4990 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x5636451a46d8 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x56364518db58 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x56364518d988 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x56364518da00 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x56364518da78 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x56364518ddf8 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x56364518dc20 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x56364518dc98 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x56364518dd10 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x56364518df88 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x56364518dec0 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x56364518e188 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x56364518e040 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x56364518e0b8 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x56364518e458 <line:717:5, col:73> col:24
| `-FunctionDecl 0x56364518e398 parent 0x563644c8d278 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x56364518e248 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x56364518e2c0 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x56364518e678 <line:718:5, col:72> col:24
| `-FunctionDecl 0x56364518e5b8 parent 0x563644c8d278 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x56364518e4a8 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x56364518e520 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x56364518e840 <line:719:5, col:57> col:29
| `-FunctionDecl 0x56364518e788 parent 0x563644c8d278 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x56364518e6c8 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x56364518eac8 <line:720:5, col:73> col:30
| `-FunctionDecl 0x56364518ea08 parent 0x563644c8d278 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x56364518e8b8 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x56364518e930 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x56364518ece8 <line:721:5, col:73> col:30
| `-FunctionDecl 0x56364518ec28 parent 0x563644c8d278 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x56364518eb18 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x56364518eb90 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x563645194570 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x563645194658 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x56364518d218 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5636451950c8 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x563645195080 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x56364518d218
| |     `-DeclRefExpr 0x563645195060 <col:7> 'const Timestamp' lvalue ParmVar 0x563645194658 '' 'const Timestamp &'
| `-CompoundStmt 0x563645195128 <col:7>
|-CXXConstructorDecl 0x5636451947d8 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5636451948e8 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x56364518d218 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5636451953c8 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x563645195370 <col:7> 'Timestamp::rep_t' xvalue ._t 0x56364518d218
| |     `-CXXStaticCastExpr 0x563645195340 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x563645195310 <col:7> 'Timestamp' lvalue ParmVar 0x5636451948e8 '' 'Timestamp &&'
| `-CompoundStmt 0x563645195428 <col:7>
|-CXXDestructorDecl 0x563645194998 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x563644e9ac58 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x563644e9ad68 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x563644e9b858 <col:7>
|   |-CXXMemberCallExpr 0x563644e9b7f8 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x563644e9b738 <col:7> '<bound member function type>' .operator= 0x563644e9ae08
|   | | `-MemberExpr 0x563644e9b648 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x56364518d218
|   | |   `-CXXThisExpr 0x563644e9b638 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x563644e9b708 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x56364518d218
|   |   `-DeclRefExpr 0x563644e9b6e8 <col:7> 'const Timestamp' lvalue ParmVar 0x563644e9ad68 '' 'const Timestamp &'
|   `-ReturnStmt 0x563644e9b848 <col:7>
|     `-UnaryOperator 0x563644e9b830 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x563644e9b820 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x563644e9b108 <col:7> col:7 implicit used operator= 'Timestamp &(Timestamp &&) noexcept' inline default trivial
  |-ParmVarDecl 0x563644e9b218 <col:7> col:7 used 'Timestamp &&'
  `-CompoundStmt 0x563645177198 <col:7>
    |-CXXMemberCallExpr 0x563645177138 <col:7> 'Timestamp::rep_t' lvalue
    | |-MemberExpr 0x5636451770a0 <col:7> '<bound member function type>' .operator= 0x563644e9af88
    | | `-MemberExpr 0x563645176f70 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x56364518d218
    | |   `-CXXThisExpr 0x563645176f60 <col:7> 'Timestamp *' this
    | `-MemberExpr 0x563645177070 <col:7> 'Timestamp::rep_t' xvalue ._t 0x56364518d218
    |   `-CXXStaticCastExpr 0x563645177040 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
    |     `-DeclRefExpr 0x563645177010 <col:7> 'Timestamp' lvalue ParmVar 0x563644e9b218 '' 'Timestamp &&'
    `-ReturnStmt 0x563645177188 <col:7>
      `-UnaryOperator 0x563645177170 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x563645177160 <col:7> 'Timestamp *' this

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563645174178 <../dummy_inc/click/timer.hh:343:5, line:345:5> line:343:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x5636451742a8 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
`-CXXDestructorDecl 0x563645174d98 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%union.anon.13 = type { void (%class.Timer*, i8*)* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct TaskLink
         0 |   struct TaskLink * _prev
         8 |   struct TaskLink * _next
        16 |   unsigned int _pass
           | [sizeof=24, dsize=20, align=8,
           |  nvsize=20, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct TimerSet::heap_element>
         0 |   class vector_memory<class sized_array_memory<16> > vm_
         0 |     vector_memory<class sized_array_memory<16> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class Timer *>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class SimpleSpinlock (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=0, nvalign=1]

*** Dumping AST Record Layout
         0 | class TimerSet
         0 |   class Timestamp _timer_expiry
         0 |     union Timestamp::rep_t _t
         0 |       int64_t x
         8 |   unsigned int _max_timer_stride
        12 |   unsigned int _timer_stride
        16 |   unsigned int _timer_count
        24 |   class Vector<struct TimerSet::heap_element> _timer_heap
        24 |     class vector_memory<class sized_array_memory<16> > vm_
        24 |       vector_memory<class sized_array_memory<16> >::type * l_
        32 |       vector_memory::size_type n_
        36 |       vector_memory::size_type capacity_
        40 |   class Vector<class Timer *> _timer_runchunk
        40 |     class vector_memory<class sized_array_memory<8> > vm_
        40 |       vector_memory<class sized_array_memory<8> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   class SimpleSpinlock _timer_lock (empty)
        64 |   class Timestamp _timer_check
        64 |     union Timestamp::rep_t _t
        64 |       int64_t x
        72 |   uint32_t _timer_check_reports
           | [sizeof=80, dsize=76, align=8,
           |  nvsize=76, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct pollfd>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<24> >
         0 |   vector_memory<class sized_array_memory<24> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct SelectSet::SelectorInfo>
         0 |   class vector_memory<class sized_array_memory<24> > vm_
         0 |     vector_memory<class sized_array_memory<24> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class SelectSet
         0 |   int [2] _wake_pipe
         8 |   volatile _Bool _wake_pipe_pending
        16 |   class Vector<struct pollfd> _pollfds
        16 |     class vector_memory<class sized_array_memory<8> > vm_
        16 |       vector_memory<class sized_array_memory<8> >::type * l_
        24 |       vector_memory::size_type n_
        28 |       vector_memory::size_type capacity_
        32 |   class Vector<struct SelectSet::SelectorInfo> _selinfo
        32 |     class vector_memory<class sized_array_memory<24> > vm_
        32 |       vector_memory<class sized_array_memory<24> >::type * l_
        40 |       vector_memory::size_type n_
        44 |       vector_memory::size_type capacity_
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | class Spinlock (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=0, nvalign=1]

*** Dumping AST Record Layout
         0 | union Task::Pending
         0 |   class Task * t
         0 |   uintptr_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class SpinlockIRQ (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=0, nvalign=1]

*** Dumping AST Record Layout
         0 | class RouterThread
         0 |   struct TaskLink _task_link
         0 |     struct TaskLink * _prev
         8 |     struct TaskLink * _next
        16 |     unsigned int _pass
        24 |   volatile _Bool _stop_flag
        32 |   class TimerSet _timers
        32 |     class Timestamp _timer_expiry
        32 |       union Timestamp::rep_t _t
        32 |         int64_t x
        40 |     unsigned int _max_timer_stride
        44 |     unsigned int _timer_stride
        48 |     unsigned int _timer_count
        56 |     class Vector<struct TimerSet::heap_element> _timer_heap
        56 |       class vector_memory<class sized_array_memory<16> > vm_
        56 |         vector_memory<class sized_array_memory<16> >::type * l_
        64 |         vector_memory::size_type n_
        68 |         vector_memory::size_type capacity_
        72 |     class Vector<class Timer *> _timer_runchunk
        72 |       class vector_memory<class sized_array_memory<8> > vm_
        72 |         vector_memory<class sized_array_memory<8> >::type * l_
        80 |         vector_memory::size_type n_
        84 |         vector_memory::size_type capacity_
        88 |     class SimpleSpinlock _timer_lock (empty)
        96 |     class Timestamp _timer_check
        96 |       union Timestamp::rep_t _t
        96 |         int64_t x
       104 |     uint32_t _timer_check_reports
       112 |   class SelectSet _selects
       112 |     int [2] _wake_pipe
       120 |     volatile _Bool _wake_pipe_pending
       128 |     class Vector<struct pollfd> _pollfds
       128 |       class vector_memory<class sized_array_memory<8> > vm_
       128 |         vector_memory<class sized_array_memory<8> >::type * l_
       136 |         vector_memory::size_type n_
       140 |         vector_memory::size_type capacity_
       144 |     class Vector<struct SelectSet::SelectorInfo> _selinfo
       144 |       class vector_memory<class sized_array_memory<24> > vm_
       144 |         vector_memory<class sized_array_memory<24> >::type * l_
       152 |         vector_memory::size_type n_
       156 |         vector_memory::size_type capacity_
       192 |   class Spinlock _task_lock (empty)
       196 |   class atomic_uint32_t _task_blocker
       196 |     uint32_t _val
       200 |   class atomic_uint32_t _task_blocker_waiting
       200 |     uint32_t _val
       208 |   union Task::Pending _pending_head
       208 |     class Task * t
       208 |     uintptr_t x
       216 |   class Task::Pending * _pending_tail
       224 |   class SpinlockIRQ _pending_lock (empty)
       256 |   class Master * _master
       264 |   int _id
       268 |   _Bool _driver_entered
       272 |   unsigned int _tasks_per_iter
       276 |   unsigned int _iters_per_os
           | [sizeof=320, dsize=280, align=64,
           |  nvsize=280, nvalign=64]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636452ea8c0 <../dummy_inc/click/task.hh:31:1, line:47:1> line:31:8 referenced struct TaskLink definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5636452ea9d8 <col:1, col:8> col:8 implicit referenced struct TaskLink
|-FieldDecl 0x5636452eaaa8 <line:33:5, col:15> col:15 referenced _prev 'TaskLink *'
|-FieldDecl 0x5636452eab08 <line:34:5, col:15> col:15 referenced _next 'TaskLink *'
|-FieldDecl 0x5636452eab70 <line:37:5, col:14> col:14 referenced _pass 'unsigned int'
|-CXXConstructorDecl 0x5636452eabf8 <line:39:5, line:46:5> line:39:5 used TaskLink 'void ()'
| `-CompoundStmt 0x5636452eae60 <col:16, line:46:5>
|   |-BinaryOperator 0x5636452eada8 <line:41:9, col:25> 'TaskLink *' lvalue '='
|   | |-MemberExpr 0x5636452eacc8 <col:9> 'TaskLink *' lvalue ->_prev 0x5636452eaaa8
|   | | `-CXXThisExpr 0x5636452eacb8 <col:9> 'TaskLink *' implicit this
|   | `-ImplicitCastExpr 0x5636452ead90 <col:17, col:25> 'TaskLink *' <LValueToRValue>
|   |   `-BinaryOperator 0x5636452ead70 <col:17, col:25> 'TaskLink *' lvalue '='
|   |     |-MemberExpr 0x5636452ead08 <col:17> 'TaskLink *' lvalue ->_next 0x5636452eab08
|   |     | `-CXXThisExpr 0x5636452eacf8 <col:17> 'TaskLink *' implicit this
|   |     `-ImplicitCastExpr 0x5636452ead58 <col:25> 'TaskLink *' <NullToPointer>
|   |       `-IntegerLiteral 0x5636452ead38 <col:25> 'int' 0
|   `-BinaryOperator 0x5636452eae40 <line:44:9, col:17> 'unsigned int' lvalue '='
|     |-MemberExpr 0x5636452eadd8 <col:9> 'unsigned int' lvalue ->_pass 0x5636452eab70
|     | `-CXXThisExpr 0x5636452eadc8 <col:9> 'TaskLink *' implicit this
|     `-ImplicitCastExpr 0x5636452eae28 <col:17> 'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5636452eae08 <col:17> 'int' 0
|-CXXConstructorDecl 0x563645356018 <line:31:8> col:8 implicit constexpr TaskLink 'void (const TaskLink &)' inline default trivial noexcept-unevaluated 0x563645356018
| `-ParmVarDecl 0x563645356128 <col:8> col:8 'const TaskLink &'
|-CXXConstructorDecl 0x5636453561c8 <col:8> col:8 implicit constexpr TaskLink 'void (TaskLink &&)' inline default trivial noexcept-unevaluated 0x5636453561c8
| `-ParmVarDecl 0x5636453562d8 <col:8> col:8 'TaskLink &&'
|-CXXDestructorDecl 0x5636453564c8 <col:8> col:8 implicit ~TaskLink 'void ()' inline default trivial noexcept-unevaluated 0x5636453564c8
|-CXXMethodDecl 0x563645356cc8 <col:8> col:8 implicit operator= 'TaskLink &(const TaskLink &)' inline default trivial noexcept-unevaluated 0x563645356cc8
| `-ParmVarDecl 0x563645356dd8 <col:8> col:8 'const TaskLink &'
`-CXXMethodDecl 0x563645356e48 <col:8> col:8 implicit operator= 'TaskLink &(TaskLink &&)' inline default trivial noexcept-unevaluated 0x563645356e48
  `-ParmVarDecl 0x563645356f58 <col:8> col:8 'TaskLink &&'

Layout: <CGRecordLayout
  LLVMType:%struct.TaskLink = type <{ %struct.TaskLink*, %struct.TaskLink*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%struct.TaskLink.base = type <{ %struct.TaskLink*, %struct.TaskLink*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5636452fb838 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'TimerSet::heap_element'
|-CXXRecordDecl 0x5636452fba48 prev 0x5636452fb838 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5636452fcc50 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<heap_element>::type':'sized_array_memory<16>'
| `-ElaboratedType 0x5636452fcc00 'typename array_memory<heap_element>::type' sugar
|   `-TypedefType 0x5636452fcbe0 'conditional<true, sized_array_memory<16>, typed_array_memory<TimerSet::heap_element> >::type' sugar
|     |-Typedef 0x5636452fca90 'type'
|     `-SubstTemplateTypeParmType 0x5636452fc8b0 'sized_array_memory<16>' sugar
|       |-TemplateTypeParmType 0x563644f57610 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f575b8 'T'
|       `-RecordType 0x5636452fc400 'sized_array_memory<16>'
|         `-ClassTemplateSpecialization 0x5636452fc318 'sized_array_memory'
|-FieldDecl 0x563645300880 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<TimerSet::heap_element>::array_memory_type>':'vector_memory<sized_array_memory<16> >' mutable
|-AccessSpecDecl 0x5636453008d0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x563645300908 <line:118:5, col:15> col:15 value_type 'TimerSet::heap_element':'TimerSet::heap_element'
| `-SubstTemplateTypeParmType 0x5636452fbae0 'TimerSet::heap_element' sugar
|   |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x563644f8f2a8 'T'
|   `-RecordType 0x5636452faa40 'TimerSet::heap_element'
|     `-CXXRecord 0x5636452fa9b0 'heap_element'
|-TypedefDecl 0x5636453009c8 <line:119:5, col:16> col:16 reference 'TimerSet::heap_element &'
| `-LValueReferenceType 0x563645300990 'TimerSet::heap_element &'
|   `-SubstTemplateTypeParmType 0x5636452fbae0 'TimerSet::heap_element' sugar
|     |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563644f8f2a8 'T'
|     `-RecordType 0x5636452faa40 'TimerSet::heap_element'
|       `-CXXRecord 0x5636452fa9b0 'heap_element'
|-TypedefDecl 0x563645300a58 <line:120:5, col:22> col:22 const_reference 'const TimerSet::heap_element &'
| `-LValueReferenceType 0x563645300a20 'const TimerSet::heap_element &'
|   `-QualType 0x5636452fbae1 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x5636452fbae0 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-RecordType 0x5636452faa40 'TimerSet::heap_element'
|         `-CXXRecord 0x5636452fa9b0 'heap_element'
|-TypedefDecl 0x563645300ae8 <line:121:5, col:16> col:16 pointer 'TimerSet::heap_element *'
| `-PointerType 0x563645300ab0 'TimerSet::heap_element *'
|   `-SubstTemplateTypeParmType 0x5636452fbae0 'TimerSet::heap_element' sugar
|     |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563644f8f2a8 'T'
|     `-RecordType 0x5636452faa40 'TimerSet::heap_element'
|       `-CXXRecord 0x5636452fa9b0 'heap_element'
|-TypedefDecl 0x563645300ba8 <line:122:5, col:22> col:22 const_pointer 'const TimerSet::heap_element *'
| `-PointerType 0x563645300b70 'const TimerSet::heap_element *'
|   `-QualType 0x5636452fbae1 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x5636452fbae0 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-RecordType 0x5636452faa40 'TimerSet::heap_element'
|         `-CXXRecord 0x5636452fa9b0 'heap_element'
|-TypedefDecl 0x563645301800 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<heap_element>::type':'const TimerSet::heap_element &'
| `-ElaboratedType 0x5636453017b0 'typename fast_argument<heap_element>::type' sugar
|   `-TypedefType 0x563645301790 'fast_argument<TimerSet::heap_element, true>::type' sugar
|     |-Typedef 0x5636453016c8 'type'
|     `-LValueReferenceType 0x563645301690 'const TimerSet::heap_element &'
|       `-QualType 0x563645301431 'const TimerSet::heap_element' const
|         `-SubstTemplateTypeParmType 0x563645301430 'TimerSet::heap_element' sugar
|           |-TemplateTypeParmType 0x563644f61ce0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x563644f61c88 'T'
|           `-RecordType 0x5636452faa40 'TimerSet::heap_element'
|             `-CXXRecord 0x5636452fa9b0 'heap_element'
|-TypedefDecl 0x563645301890 <line:126:5, col:22> col:22 const_access_type 'const TimerSet::heap_element &'
| `-LValueReferenceType 0x563645300a20 'const TimerSet::heap_element &'
|   `-QualType 0x5636452fbae1 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x5636452fbae0 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-RecordType 0x5636452faa40 'TimerSet::heap_element'
|         `-CXXRecord 0x5636452fa9b0 'heap_element'
|-TypedefDecl 0x5636453018e8 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563644c8d370 'int'
|-TypedefDecl 0x563645301950 <line:130:5, col:16> col:16 iterator 'TimerSet::heap_element *'
| `-PointerType 0x563645300ab0 'TimerSet::heap_element *'
|   `-SubstTemplateTypeParmType 0x5636452fbae0 'TimerSet::heap_element' sugar
|     |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563644f8f2a8 'T'
|     `-RecordType 0x5636452faa40 'TimerSet::heap_element'
|       `-CXXRecord 0x5636452fa9b0 'heap_element'
|-TypedefDecl 0x5636453019b8 <line:131:5, col:22> col:22 const_iterator 'const TimerSet::heap_element *'
| `-PointerType 0x563645300b70 'const TimerSet::heap_element *'
|   `-QualType 0x5636452fbae1 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x5636452fbae0 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-RecordType 0x5636452faa40 'TimerSet::heap_element'
|         `-CXXRecord 0x5636452fa9b0 'heap_element'
|-EnumDecl 0x563645301a10 <line:134:5> col:5
| `-EnumConstantDecl 0x563645301b00 <col:12, col:40> col:12 RESERVE_GROW 'Vector<TimerSet::heap_element>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x563645301ae0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x563644f90ba8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x563644f90b80 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x563644f90b60 <col:40> 'int' 1
|-CXXConstructorDecl 0x563645301b88 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x563645301e18 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x563645301c40 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x563645301ce0 <col:41, col:61> col:61 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXConstructorDecl 0x5636453020d8 <line:139:5, col:37> col:12 Vector 'void (const Vector<TimerSet::heap_element> &)' inline
| `-ParmVarDecl 0x563645301fc0 <col:19, col:36> col:36 x 'const Vector<TimerSet::heap_element> &'
|-CXXConstructorDecl 0x563645302398 <line:141:5, col:32> col:12 Vector 'void (Vector<TimerSet::heap_element> &&)' inline
| `-ParmVarDecl 0x563645302280 <col:19, col:31> col:31 x 'Vector<TimerSet::heap_element> &&'
|-CXXMethodDecl 0x5636453026e0 <line:144:5, col:51> col:23 operator= 'Vector<TimerSet::heap_element> &(const Vector<TimerSet::heap_element> &)' inline
| `-ParmVarDecl 0x5636453025c0 <col:33, col:50> col:50 x 'const Vector<TimerSet::heap_element> &'
|-CXXMethodDecl 0x5636453029f0 <line:146:5, col:46> col:23 operator= 'Vector<TimerSet::heap_element> &(Vector<TimerSet::heap_element> &&)' inline
| `-ParmVarDecl 0x5636453028d0 <col:33, col:45> col:45 x 'Vector<TimerSet::heap_element> &&'
|-CXXMethodDecl 0x563645302ce0 <line:148:5, col:70> col:23 assign 'Vector<TimerSet::heap_element> &(Vector::size_type, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x563645302b28 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x563645302ba0 <col:43, col:69> col:63 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x563645302e38 <line:150:5, col:55> col:49 begin 'Vector<TimerSet::heap_element>::iterator ()'
| |-NoInlineAttr 0x563645302f18 <col:20> Inherited
| `-OptimizeNoneAttr 0x563645302f70 <col:30> Inherited
|-CXXMethodDecl 0x563645302fb8 <line:151:5, col:53> col:49 end 'Vector<TimerSet::heap_element>::iterator ()'
| |-NoInlineAttr 0x563645303068 <col:20> Inherited
| `-OptimizeNoneAttr 0x5636453030c0 <col:30> Inherited
|-CXXMethodDecl 0x563645303188 <line:152:5, col:63> col:55 begin 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x563645303238 <col:20> Inherited
| `-OptimizeNoneAttr 0x563645303290 <col:30> Inherited
|-CXXMethodDecl 0x5636453032d8 <line:153:5, col:61> col:55 end 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x563645303388 <col:20> Inherited
| `-OptimizeNoneAttr 0x5636453033e0 <col:30> Inherited
|-CXXMethodDecl 0x563645303428 <line:154:5, col:64> col:55 cbegin 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x5636453034d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x563645303530 <col:30> Inherited
|-CXXMethodDecl 0x563645303578 <line:155:5, col:62> col:55 cend 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x563645303628 <col:20> Inherited
| `-OptimizeNoneAttr 0x563645303680 <col:30> Inherited
|-CXXMethodDecl 0x5636453036a8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x563645303758 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x563645303808 <line:159:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5636453039c8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x5636453038b8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x563645303930 <col:37, col:63> col:57 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x563645303b18 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x563645303a88 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x563645303cc8 <line:163:5, col:65> col:43 operator[] 'TimerSet::heap_element &(Vector::size_type)'
| |-ParmVarDecl 0x563645303bd0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x563645303d80 <col:20>
| `-OptimizeNoneAttr 0x563645303dd8 <col:30>
|-CXXMethodDecl 0x563645303ef8 <line:164:5, col:73> col:49 operator[] 'const TimerSet::heap_element &(Vector::size_type) const'
| |-ParmVarDecl 0x563645303e00 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x563645303fb0 <col:20>
| `-OptimizeNoneAttr 0x563645304008 <col:30>
|-CXXMethodDecl 0x5636453040c0 <line:165:5, col:29> col:15 at 'TimerSet::heap_element &(Vector::size_type)' inline
| `-ParmVarDecl 0x563645304030 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563645304208 <line:166:5, col:37> col:21 at 'const TimerSet::heap_element &(Vector::size_type) const' inline
| `-ParmVarDecl 0x563645304178 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563645304338 <line:167:5, col:21> col:15 front 'TimerSet::heap_element &()' inline
|-CXXMethodDecl 0x563645304468 <line:168:5, col:29> col:21 front 'const TimerSet::heap_element &() const' inline
|-CXXMethodDecl 0x563645304538 <line:169:5, col:20> col:15 back 'TimerSet::heap_element &()' inline
|-CXXMethodDecl 0x563645304608 <line:170:5, col:28> col:21 back 'const TimerSet::heap_element &() const' inline
|-CXXMethodDecl 0x563645304748 <line:172:5, col:39> col:15 used unchecked_at 'TimerSet::heap_element &(Vector::size_type)' inline
| `-ParmVarDecl 0x5636453046b8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563645304890 <line:173:5, col:47> col:21 unchecked_at 'const TimerSet::heap_element &(Vector::size_type) const' inline
| `-ParmVarDecl 0x563645304800 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5636453049d8 <line:174:5, col:59> col:15 at_u 'TimerSet::heap_element &(Vector::size_type)' inline
| |-ParmVarDecl 0x563645304948 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x563645304a90 <col:48> Inherited "" ""
|-CXXMethodDecl 0x563645304b90 <line:175:5, col:71> col:21 at_u 'const TimerSet::heap_element &(Vector::size_type) const' inline
| |-ParmVarDecl 0x563645304b00 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x563645304c48 <col:60> Inherited "" ""
|-CXXMethodDecl 0x563645304d08 <line:177:5, col:20> col:15 data 'TimerSet::heap_element *()' inline
|-CXXMethodDecl 0x563645304e08 <line:178:5, col:28> col:21 data 'const TimerSet::heap_element *() const' inline
|-CXXMethodDecl 0x563645304fb8 <line:180:5, col:48> col:17 push_back 'void (Vector<TimerSet::heap_element>::value_argument_type)' inline
| `-ParmVarDecl 0x563645304ec8 <col:27, col:47> col:47 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-FunctionTemplateDecl 0x563645305778 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x563645305070 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<TimerSet::heap_element>':'fast_argument<TimerSet::heap_element, true>'
| `-CXXMethodDecl 0x5636453056d8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (TimerSet::heap_element &&)' inline
|   `-ParmVarDecl 0x5636453055d8 <col:58, col:62> col:62 v 'TimerSet::heap_element &&'
|-CXXMethodDecl 0x563645305858 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5636453059a8 <line:186:5, col:49> col:17 push_front 'void (Vector<TimerSet::heap_element>::value_argument_type)' inline
| `-ParmVarDecl 0x563645305918 <col:28, col:48> col:48 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x563645305a60 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x563645305ca8 <line:189:5, col:62> col:21 insert 'Vector<TimerSet::heap_element>::iterator (Vector<TimerSet::heap_element>::iterator, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x563645305b20 <col:28, col:37> col:37 it 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
| `-ParmVarDecl 0x563645305b98 <col:41, col:61> col:61 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x563645305e68 <line:190:5, col:38> col:21 erase 'Vector<TimerSet::heap_element>::iterator (Vector<TimerSet::heap_element>::iterator)' inline
| `-ParmVarDecl 0x563645305d78 <col:27, col:36> col:36 it 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
|-CXXMethodDecl 0x5636453060b8 <line:191:5, col:49> col:21 erase 'Vector<TimerSet::heap_element>::iterator (Vector<TimerSet::heap_element>::iterator, Vector<TimerSet::heap_element>::iterator)' inline
| |-ParmVarDecl 0x563645305f30 <col:27, col:36> col:36 a 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
| `-ParmVarDecl 0x563645305fa8 <col:39, col:48> col:48 b 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
|-CXXMethodDecl 0x563645306178 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5636453063d8 <line:195:5, col:34> col:17 swap 'void (Vector<TimerSet::heap_element> &)' inline
| `-ParmVarDecl 0x5636453062e0 <col:22, col:33> col:33 x 'Vector<TimerSet::heap_element> &'
`-CXXDestructorDecl 0x5636453064a8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5636453064a8

Layout: <CGRecordLayout
  LLVMType:%class.Vector.14 = type { %class.vector_memory.9 }
  NonVirtualBaseLLVMType:%class.Vector.14 = type { %class.vector_memory.9 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5636453065f0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'Timer *'
|-CXXRecordDecl 0x5636453067f8 prev 0x5636453065f0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x563645307940 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<Timer *>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x5636453078f0 'typename array_memory<Timer *>::type' sugar
|   `-TypedefType 0x5636453078d0 'conditional<true, sized_array_memory<8>, typed_array_memory<Timer *> >::type' sugar
|     |-Typedef 0x563645307780 'type'
|     `-SubstTemplateTypeParmType 0x5636453075a0 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x563644f57610 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f575b8 'T'
|       `-RecordType 0x5636453070f0 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x563645307008 'sized_array_memory'
|-FieldDecl 0x56364530bfb0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<Timer *>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x56364530c000 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56364530c038 <line:118:5, col:15> col:15 value_type 'Timer *':'Timer *'
| `-SubstTemplateTypeParmType 0x563645306890 'Timer *' sugar
|   |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x563644f8f2a8 'T'
|   `-PointerType 0x5636451f7290 'Timer *'
|     `-RecordType 0x5636451f63e0 'Timer'
|       `-CXXRecord 0x563645212ef8 'Timer'
|-TypedefDecl 0x56364530c0f8 <line:119:5, col:16> col:16 reference 'Timer *&'
| `-LValueReferenceType 0x56364530c0c0 'Timer *&'
|   `-SubstTemplateTypeParmType 0x563645306890 'Timer *' sugar
|     |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563644f8f2a8 'T'
|     `-PointerType 0x5636451f7290 'Timer *'
|       `-RecordType 0x5636451f63e0 'Timer'
|         `-CXXRecord 0x563645212ef8 'Timer'
|-TypedefDecl 0x56364530c1b8 <line:120:5, col:22> col:22 const_reference 'Timer *const &'
| `-LValueReferenceType 0x56364530c180 'Timer *const &'
|   `-QualType 0x563645306891 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x563645306890 'Timer *' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-PointerType 0x5636451f7290 'Timer *'
|         `-RecordType 0x5636451f63e0 'Timer'
|           `-CXXRecord 0x563645212ef8 'Timer'
|-TypedefDecl 0x56364530c278 <line:121:5, col:16> col:16 pointer 'Timer **'
| `-PointerType 0x56364530c240 'Timer **'
|   `-SubstTemplateTypeParmType 0x563645306890 'Timer *' sugar
|     |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563644f8f2a8 'T'
|     `-PointerType 0x5636451f7290 'Timer *'
|       `-RecordType 0x5636451f63e0 'Timer'
|         `-CXXRecord 0x563645212ef8 'Timer'
|-TypedefDecl 0x56364530c338 <line:122:5, col:22> col:22 const_pointer 'Timer *const *'
| `-PointerType 0x56364530c300 'Timer *const *'
|   `-QualType 0x563645306891 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x563645306890 'Timer *' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-PointerType 0x5636451f7290 'Timer *'
|         `-RecordType 0x5636451f63e0 'Timer'
|           `-CXXRecord 0x563645212ef8 'Timer'
|-TypedefDecl 0x56364530cf10 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<Timer *>::type':'Timer *'
| `-ElaboratedType 0x56364530cec0 'typename fast_argument<Timer *>::type' sugar
|   `-TypedefType 0x56364530cea0 'fast_argument<Timer *, false>::type' sugar
|     |-Typedef 0x56364530ce30 'type'
|     `-SubstTemplateTypeParmType 0x56364530cbf0 'Timer *' sugar
|       |-TemplateTypeParmType 0x563644f62410 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f623c0 'T'
|       `-PointerType 0x5636451f7290 'Timer *'
|         `-RecordType 0x5636451f63e0 'Timer'
|           `-CXXRecord 0x563645212ef8 'Timer'
|-TypedefDecl 0x56364530cf78 <line:126:5, col:22> col:22 const_access_type 'Timer *const &'
| `-LValueReferenceType 0x56364530c180 'Timer *const &'
|   `-QualType 0x563645306891 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x563645306890 'Timer *' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-PointerType 0x5636451f7290 'Timer *'
|         `-RecordType 0x5636451f63e0 'Timer'
|           `-CXXRecord 0x563645212ef8 'Timer'
|-TypedefDecl 0x56364530cfd0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563644c8d370 'int'
|-TypedefDecl 0x56364530d038 <line:130:5, col:16> col:16 iterator 'Timer **'
| `-PointerType 0x56364530c240 'Timer **'
|   `-SubstTemplateTypeParmType 0x563645306890 'Timer *' sugar
|     |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563644f8f2a8 'T'
|     `-PointerType 0x5636451f7290 'Timer *'
|       `-RecordType 0x5636451f63e0 'Timer'
|         `-CXXRecord 0x563645212ef8 'Timer'
|-TypedefDecl 0x56364530d0a0 <line:131:5, col:22> col:22 const_iterator 'Timer *const *'
| `-PointerType 0x56364530c300 'Timer *const *'
|   `-QualType 0x563645306891 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x563645306890 'Timer *' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-PointerType 0x5636451f7290 'Timer *'
|         `-RecordType 0x5636451f63e0 'Timer'
|           `-CXXRecord 0x563645212ef8 'Timer'
|-EnumDecl 0x56364530d0f8 <line:134:5> col:5
| `-EnumConstantDecl 0x56364530d1f0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<Timer *>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56364530d1d0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x563644f90ba8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x563644f90b80 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x563644f90b60 <col:40> 'int' 1
|-CXXConstructorDecl 0x56364530d278 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56364530d508 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x56364530d330 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56364530d3d0 <col:41, col:61> col:61 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXConstructorDecl 0x56364530d7c8 <line:139:5, col:37> col:12 Vector 'void (const Vector<Timer *> &)' inline
| `-ParmVarDecl 0x56364530d6b0 <col:19, col:36> col:36 x 'const Vector<Timer *> &'
|-CXXConstructorDecl 0x56364530da88 <line:141:5, col:32> col:12 Vector 'void (Vector<Timer *> &&)' inline
| `-ParmVarDecl 0x56364530d970 <col:19, col:31> col:31 x 'Vector<Timer *> &&'
|-CXXMethodDecl 0x56364530ddd0 <line:144:5, col:51> col:23 operator= 'Vector<Timer *> &(const Vector<Timer *> &)' inline
| `-ParmVarDecl 0x56364530dcb0 <col:33, col:50> col:50 x 'const Vector<Timer *> &'
|-CXXMethodDecl 0x56364530e0e0 <line:146:5, col:46> col:23 operator= 'Vector<Timer *> &(Vector<Timer *> &&)' inline
| `-ParmVarDecl 0x56364530dfc0 <col:33, col:45> col:45 x 'Vector<Timer *> &&'
|-CXXMethodDecl 0x56364530e3d0 <line:148:5, col:70> col:23 assign 'Vector<Timer *> &(Vector::size_type, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x56364530e218 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56364530e290 <col:43, col:69> col:63 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x56364530e528 <line:150:5, col:55> col:49 begin 'Vector<Timer *>::iterator ()'
| |-NoInlineAttr 0x56364530e608 <col:20> Inherited
| `-OptimizeNoneAttr 0x56364530e660 <col:30> Inherited
|-CXXMethodDecl 0x56364530e6a8 <line:151:5, col:53> col:49 end 'Vector<Timer *>::iterator ()'
| |-NoInlineAttr 0x56364530e758 <col:20> Inherited
| `-OptimizeNoneAttr 0x56364530e7b0 <col:30> Inherited
|-CXXMethodDecl 0x56364530e878 <line:152:5, col:63> col:55 begin 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x56364530e928 <col:20> Inherited
| `-OptimizeNoneAttr 0x56364530e980 <col:30> Inherited
|-CXXMethodDecl 0x56364530e9c8 <line:153:5, col:61> col:55 end 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x56364530ea78 <col:20> Inherited
| `-OptimizeNoneAttr 0x56364530ead0 <col:30> Inherited
|-CXXMethodDecl 0x56364530eb18 <line:154:5, col:64> col:55 cbegin 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x56364530ebc8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56364530ec20 <col:30> Inherited
|-CXXMethodDecl 0x56364530ec68 <line:155:5, col:62> col:55 cend 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x56364530ed18 <col:20> Inherited
| `-OptimizeNoneAttr 0x56364530ed70 <col:30> Inherited
|-CXXMethodDecl 0x56364530ed98 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56364530ee48 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56364530eef8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x56364530f0b8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x56364530efa8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56364530f020 <col:37, col:63> col:57 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x56364530f208 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56364530f178 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56364530f3b8 <line:163:5, col:65> col:43 operator[] 'Timer *&(Vector::size_type)'
| |-ParmVarDecl 0x56364530f2c0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56364530f470 <col:20>
| `-OptimizeNoneAttr 0x56364530f4c8 <col:30>
|-CXXMethodDecl 0x56364530f5e8 <line:164:5, col:73> col:49 operator[] 'Timer *const &(Vector::size_type) const'
| |-ParmVarDecl 0x56364530f4f0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56364530f6a0 <col:20>
| `-OptimizeNoneAttr 0x56364530f6f8 <col:30>
|-CXXMethodDecl 0x56364530f7b0 <line:165:5, col:29> col:15 at 'Timer *&(Vector::size_type)' inline
| `-ParmVarDecl 0x56364530f720 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56364530f8f8 <line:166:5, col:37> col:21 at 'Timer *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56364530f868 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56364530fa28 <line:167:5, col:21> col:15 front 'Timer *&()' inline
|-CXXMethodDecl 0x56364530fb58 <line:168:5, col:29> col:21 front 'Timer *const &() const' inline
|-CXXMethodDecl 0x56364530fc28 <line:169:5, col:20> col:15 back 'Timer *&()' inline
|-CXXMethodDecl 0x56364530fcf8 <line:170:5, col:28> col:21 back 'Timer *const &() const' inline
|-CXXMethodDecl 0x56364530fe38 <line:172:5, col:39> col:15 unchecked_at 'Timer *&(Vector::size_type)' inline
| `-ParmVarDecl 0x56364530fda8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56364530ff80 <line:173:5, col:47> col:21 unchecked_at 'Timer *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56364530fef0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5636453100c8 <line:174:5, col:59> col:15 at_u 'Timer *&(Vector::size_type)' inline
| |-ParmVarDecl 0x563645310038 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x563645310180 <col:48> Inherited "" ""
|-CXXMethodDecl 0x563645310280 <line:175:5, col:71> col:21 at_u 'Timer *const &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5636453101f0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x563645310338 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5636453103f8 <line:177:5, col:20> col:15 data 'Timer **()' inline
|-CXXMethodDecl 0x5636453104f8 <line:178:5, col:28> col:21 data 'Timer *const *() const' inline
|-CXXMethodDecl 0x563645310678 <line:180:5, col:48> col:17 push_back 'void (Vector<Timer *>::value_argument_type)' inline
| `-ParmVarDecl 0x5636453105b8 <col:27, col:47> col:47 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-FunctionTemplateDecl 0x563645310e38 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x563645310730 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<Timer *>':'fast_argument<Timer *, false>'
| `-CXXMethodDecl 0x563645310d98 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (Timer *&&)' inline
|   `-ParmVarDecl 0x563645310c98 <col:58, col:62> col:62 v 'Timer *&&'
|-CXXMethodDecl 0x563645310f18 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x563645311068 <line:186:5, col:49> col:17 push_front 'void (Vector<Timer *>::value_argument_type)' inline
| `-ParmVarDecl 0x563645310fd8 <col:28, col:48> col:48 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x563645311120 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x563645311368 <line:189:5, col:62> col:21 insert 'Vector<Timer *>::iterator (Vector<Timer *>::iterator, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x5636453111e0 <col:28, col:37> col:37 it 'Vector<Timer *>::iterator':'Timer **'
| `-ParmVarDecl 0x563645311258 <col:41, col:61> col:61 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x563645311528 <line:190:5, col:38> col:21 erase 'Vector<Timer *>::iterator (Vector<Timer *>::iterator)' inline
| `-ParmVarDecl 0x563645311438 <col:27, col:36> col:36 it 'Vector<Timer *>::iterator':'Timer **'
|-CXXMethodDecl 0x563645311778 <line:191:5, col:49> col:21 erase 'Vector<Timer *>::iterator (Vector<Timer *>::iterator, Vector<Timer *>::iterator)' inline
| |-ParmVarDecl 0x5636453115f0 <col:27, col:36> col:36 a 'Vector<Timer *>::iterator':'Timer **'
| `-ParmVarDecl 0x563645311668 <col:39, col:48> col:48 b 'Vector<Timer *>::iterator':'Timer **'
|-CXXMethodDecl 0x563645311838 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x563645311a98 <line:195:5, col:34> col:17 swap 'void (Vector<Timer *> &)' inline
| `-ParmVarDecl 0x5636453119a0 <col:22, col:33> col:33 x 'Vector<Timer *> &'
`-CXXDestructorDecl 0x563645311b68 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x563645311b68

Layout: <CGRecordLayout
  LLVMType:%class.Vector.15 = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector.15 = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56364520f930 <../dummy_inc/click/sync.hh:194:1, line:211:1> line:194:7 referenced class SimpleSpinlock definition
|-DefinitionData empty standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56364520fa48 <col:1, col:7> col:7 implicit referenced class SimpleSpinlock
|-AccessSpecDecl 0x56364520fad8 <col:24, col:30> col:24 public
|-CXXConstructorDecl 0x56364520fb60 <line:196:5, col:27> col:12 SimpleSpinlock 'void ()' inline
|-CXXDestructorDecl 0x56364520fc50 <line:197:5, col:28> col:12 ~SimpleSpinlock 'void () noexcept' inline
|-CXXMethodDecl 0x56364520fd50 <line:199:5, col:25> col:17 acquire 'void ()' inline
|-CXXMethodDecl 0x56364520fe10 <line:200:5, col:25> col:17 release 'void ()' inline
|-CXXMethodDecl 0x56364520fed0 <line:201:5, col:25> col:17 attempt 'bool ()' inline
|-CXXConstructorDecl 0x56364520fff8 <line:194:7> col:7 implicit constexpr SimpleSpinlock 'void (const SimpleSpinlock &)' inline default trivial noexcept-unevaluated 0x56364520fff8
| `-ParmVarDecl 0x563645210108 <col:7> col:7 'const SimpleSpinlock &'
`-CXXMethodDecl 0x563645313b28 <col:7> col:7 implicit operator= 'SimpleSpinlock &(const SimpleSpinlock &)' inline default trivial noexcept-unevaluated 0x563645313b28
  `-ParmVarDecl 0x563645313c38 <col:7> col:7 'const SimpleSpinlock &'

Layout: <CGRecordLayout
  LLVMType:%class.SimpleSpinlock = type { i8 }
  NonVirtualBaseLLVMType:%class.SimpleSpinlock.base = type {}
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636452f9b28 prev 0x563645174c28 <../dummy_inc/click/timerset.hh:12:1, line:90:1> line:12:7 referenced class TimerSet definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-CXXRecordDecl 0x5636452f9c20 <col:1, col:7> col:7 implicit referenced class TimerSet
|-AccessSpecDecl 0x5636452f9cb0 <col:18, col:24> col:18 public
|-CXXConstructorDecl 0x5636452f9d40 <line:14:5, col:14> col:5 TimerSet 'void ()'
|-CXXMethodDecl 0x5636452f9e38 <line:16:5, col:67> col:15 timer_expiry_steady 'Timestamp () const'
| `-CompoundStmt 0x563645313fa0 <col:43, col:67>
|   `-ReturnStmt 0x563645313f90 <col:45, col:52>
|     `-CXXConstructExpr 0x563645313f60 <col:52> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-MemberExpr 0x563645313f30 <col:52> 'const Timestamp' lvalue ->_timer_expiry 0x5636452fb620
|         `-CXXThisExpr 0x563645313f20 <col:52> 'const TimerSet *' implicit this
|-CXXMethodDecl 0x5636452f9ef8 <line:17:5, col:53> col:22 timer_expiry_steady_adjusted 'Timestamp () const' inline
|-CXXMethodDecl 0x5636452fa100 <line:19:5, col:64> col:16 next_timer_delay 'int (bool, Timestamp &) const' inline
| |-ParmVarDecl 0x5636452f9fa8 <col:33, col:38> col:38 more_tasks 'bool'
| `-ParmVarDecl 0x5636452fa020 <col:50, col:61> col:61 t 'Timestamp &'
|-CXXMethodDecl 0x5636452fa1f8 <line:22:5, col:23> col:12 next_timer 'Timer *()'
|-CXXMethodDecl 0x5636452fa2c0 <line:24:5, col:67> col:14 max_timer_stride 'unsigned int () const'
| `-CompoundStmt 0x563645314020 <col:39, col:67>
|   `-ReturnStmt 0x563645314010 <col:41, col:48>
|     `-ImplicitCastExpr 0x563645313ff8 <col:48> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x563645313fc8 <col:48> 'const unsigned int' lvalue ->_max_timer_stride 0x5636452fb708
|         `-CXXThisExpr 0x563645313fb8 <col:48> 'const TimerSet *' implicit this
|-CXXMethodDecl 0x5636452fa388 <line:25:5, col:59> col:14 timer_stride 'unsigned int () const'
| `-CompoundStmt 0x5636453140a0 <col:35, col:59>
|   `-ReturnStmt 0x563645314090 <col:37, col:44>
|     `-ImplicitCastExpr 0x563645314078 <col:44> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x563645314048 <col:44> 'const unsigned int' lvalue ->_timer_stride 0x5636452fb770
|         `-CXXThisExpr 0x563645314038 <col:44> 'const TimerSet *' implicit this
|-CXXMethodDecl 0x5636452fa4d0 <line:26:5, col:52> col:10 set_max_timer_stride 'void (unsigned int)'
| `-ParmVarDecl 0x5636452fa440 <col:31, col:40> col:40 timer_stride 'unsigned int'
|-CXXMethodDecl 0x5636452fa618 <line:28:5, col:36> col:10 kill_router 'void (Router *)'
| `-ParmVarDecl 0x5636452fa588 <col:22, col:30> col:30 router 'Router *'
|-CXXMethodDecl 0x5636452fa818 <line:30:5, col:57> col:10 run_timers 'void (RouterThread *, Master *)'
| |-ParmVarDecl 0x5636452fa6d0 <col:21, col:35> col:35 thread 'RouterThread *'
| `-ParmVarDecl 0x5636452fa748 <col:43, col:51> col:51 master 'Master *'
|-CXXMethodDecl 0x5636452fa8e8 <line:32:5, col:23> col:17 fence 'void ()' inline
|-AccessSpecDecl 0x5636452fa988 <line:34:3, col:10> col:3 private
|-CXXRecordDecl 0x5636452fa9b0 <line:36:5, line:45:5> line:36:12 referenced struct heap_element definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5636452faac8 <col:5, col:12> col:12 implicit referenced struct heap_element
| |-FieldDecl 0x5636452fab68 <line:37:2, col:12> col:12 referenced expiry_s 'Timestamp'
| |-FieldDecl 0x5636452fabc8 <line:38:2, col:9> col:9 referenced t 'Timer *'
| `-CXXConstructorDecl 0x5636452facf8 <line:42:2, line:44:2> line:42:2 heap_element 'void (Timer *)'
|   |-ParmVarDecl 0x5636452fac28 <col:15, col:22> col:22 used t_ 'Timer *'
|   |-CXXCtorInitializer Field 0x5636452fab68 'expiry_s' 'Timestamp'
|   | `-CXXConstructExpr 0x563645314178 <line:43:8, col:36> 'Timestamp' 'void (const Timestamp &) noexcept'
|   |   `-CXXMemberCallExpr 0x563645314120 <col:17, col:35> 'const Timestamp' lvalue
|   |     `-MemberExpr 0x5636453140f0 <col:17, col:21> '<bound member function type>' ->expiry_steady 0x563645214568
|   |       `-ImplicitCastExpr 0x563645314140 <col:17> 'const Timer *' <NoOp>
|   |         `-ImplicitCastExpr 0x5636453140d8 <col:17> 'Timer *' <LValueToRValue>
|   |           `-DeclRefExpr 0x5636453140b8 <col:17> 'Timer *' lvalue ParmVar 0x5636452fac28 't_' 'Timer *'
|   |-CXXCtorInitializer Field 0x5636452fabc8 't' 'Timer *'
|   | `-ImplicitCastExpr 0x563645314210 <col:41> 'Timer *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5636453141d0 <col:41> 'Timer *' lvalue ParmVar 0x5636452fac28 't_' 'Timer *'
|   `-CompoundStmt 0x563645314260 <col:45, line:44:2>
|-CXXRecordDecl 0x5636452fadc0 <line:46:5, line:50:5> line:46:12 struct heap_less definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5636452faed8 <col:5, col:12> col:12 implicit struct heap_less
| `-CXXMethodDecl 0x5636452fb128 <line:47:2, line:49:2> line:47:14 operator() 'bool (const TimerSet::heap_element &, const TimerSet::heap_element &)' inline
|   |-ParmVarDecl 0x5636452fafa8 <col:25, col:45> col:45 used a 'const TimerSet::heap_element &'
|   |-ParmVarDecl 0x5636452fb020 <col:48, col:68> col:68 used b 'const TimerSet::heap_element &'
|   `-CompoundStmt 0x563645314390 <col:71, line:49:2>
|     `-ReturnStmt 0x563645314380 <line:48:6, col:28>
|       `-CXXOperatorCallExpr 0x563645314348 <col:13, col:28> 'bool'
|         |-ImplicitCastExpr 0x563645314330 <col:24> 'bool (*)(const Timestamp &, const Timestamp &)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x563645314310 <col:24> 'bool (const Timestamp &, const Timestamp &)' lvalue Function 0x5636451b1668 'operator<' 'bool (const Timestamp &, const Timestamp &)'
|         |-MemberExpr 0x563645314290 <col:13, col:15> 'const Timestamp' lvalue .expiry_s 0x5636452fab68
|         | `-DeclRefExpr 0x563645314270 <col:13> 'const TimerSet::heap_element' lvalue ParmVar 0x5636452fafa8 'a' 'const TimerSet::heap_element &'
|         `-MemberExpr 0x5636453142e0 <col:26, col:28> 'const Timestamp' lvalue .expiry_s 0x5636452fab68
|           `-DeclRefExpr 0x5636453142c0 <col:26> 'const TimerSet::heap_element' lvalue ParmVar 0x5636452fb020 'b' 'const TimerSet::heap_element &'
|-CXXRecordDecl 0x5636452fb1f0 <line:51:5, line:55:5> line:51:12 struct heap_place definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5636452fb308 <col:5, col:12> col:12 implicit struct heap_place
| `-CXXMethodDecl 0x5636452fb528 <line:52:2, line:54:2> line:52:14 operator() 'void (TimerSet::heap_element *, TimerSet::heap_element *)' inline
|   |-ParmVarDecl 0x5636452fb3a8 <col:25, col:39> col:39 used begin 'TimerSet::heap_element *'
|   |-ParmVarDecl 0x5636452fb420 <col:46, col:60> col:60 used t 'TimerSet::heap_element *'
|   `-CompoundStmt 0x563645314598 <col:63, line:54:2>
|     `-BinaryOperator 0x563645314578 <line:53:6, col:39> 'int' lvalue '='
|       |-MemberExpr 0x563645314428 <col:6, col:12> 'int' lvalue ->_schedpos1 0x5636451740c8
|       | `-ImplicitCastExpr 0x563645314410 <col:6, col:9> 'Timer *' <LValueToRValue>
|       |   `-MemberExpr 0x5636453143e0 <col:6, col:9> 'Timer *' lvalue ->t 0x5636452fabc8
|       |     `-ImplicitCastExpr 0x5636453143c8 <col:6> 'TimerSet::heap_element *' <LValueToRValue>
|       |       `-DeclRefExpr 0x5636453143a8 <col:6> 'TimerSet::heap_element *' lvalue ParmVar 0x5636452fb420 't' 'TimerSet::heap_element *'
|       `-ImplicitCastExpr 0x563645314560 <col:25, col:39> 'int' <IntegralCast>
|         `-BinaryOperator 0x563645314540 <col:25, col:39> 'long' '+'
|           |-ParenExpr 0x5636453144e8 <col:25, col:35> 'long'
|           | `-BinaryOperator 0x5636453144c8 <col:26, col:30> 'long' '-'
|           |   |-ImplicitCastExpr 0x563645314498 <col:26> 'TimerSet::heap_element *' <LValueToRValue>
|           |   | `-DeclRefExpr 0x563645314458 <col:26> 'TimerSet::heap_element *' lvalue ParmVar 0x5636452fb420 't' 'TimerSet::heap_element *'
|           |   `-ImplicitCastExpr 0x5636453144b0 <col:30> 'TimerSet::heap_element *' <LValueToRValue>
|           |     `-DeclRefExpr 0x563645314478 <col:30> 'TimerSet::heap_element *' lvalue ParmVar 0x5636452fb3a8 'begin' 'TimerSet::heap_element *'
|           `-ImplicitCastExpr 0x563645314528 <col:39> 'long' <IntegralCast>
|             `-IntegerLiteral 0x563645314508 <col:39> 'int' 1
|-FieldDecl 0x5636452fb620 <line:58:5, col:15> col:15 referenced _timer_expiry 'Timestamp'
| `-AlignedAttr 0x5636452fb690 <col:44, col:53> aligned
|   `-ConstantExpr 0x5636452fb670 <col:52> 'int' Int: 8
|     `-IntegerLiteral 0x5636452fb5f0 <col:52> 'int' 8
|-FieldDecl 0x5636452fb708 <line:60:5, col:14> col:14 referenced _max_timer_stride 'unsigned int'
|-FieldDecl 0x5636452fb770 <line:61:5, col:14> col:14 referenced _timer_stride 'unsigned int'
|-FieldDecl 0x5636452fb7d8 <line:62:5, col:14> col:14 _timer_count 'unsigned int'
|-FieldDecl 0x563645306590 <line:63:5, col:26> col:26 referenced _timer_heap 'Vector<TimerSet::heap_element>':'Vector<TimerSet::heap_element>'
|-FieldDecl 0x563645311c50 <line:64:5, col:21> col:21 _timer_runchunk 'Vector<Timer *>':'Vector<Timer *>'
|-FieldDecl 0x563645311cb0 <line:65:5, col:20> col:20 _timer_lock 'SimpleSpinlock'
|-FieldDecl 0x563645311d10 <line:71:5, col:15> col:15 _timer_check 'Timestamp'
|-FieldDecl 0x563645311d70 <line:72:5, col:14> col:14 _timer_check_reports 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563645311e60 <line:74:5, col:38> col:17 run_one_timer 'void (Timer *)' inline
| `-ParmVarDecl 0x563645311dd0 <col:31, col:37> col:38 'Timer *'
|-CXXMethodDecl 0x563645311f28 <line:76:5, line:81:5> line:76:10 set_timer_expiry 'void ()'
| `-CompoundStmt 0x5636453149f0 <col:29, line:81:5>
|   `-IfStmt 0x5636453149c8 <line:77:2, line:80:32> has_else
|     |-ImplicitCastExpr 0x563645314680 <line:77:6, col:23> 'bool' <IntegralToBoolean>
|     | `-CXXMemberCallExpr 0x563645314620 <col:6, col:23> 'Vector::size_type':'int'
|     |   `-MemberExpr 0x5636453145f0 <col:6, col:18> '<bound member function type>' .size 0x5636453036a8
|     |     `-ImplicitCastExpr 0x563645314668 <col:6> 'const Vector<TimerSet::heap_element>' lvalue <NoOp>
|     |       `-MemberExpr 0x5636453145c0 <col:6> 'Vector<TimerSet::heap_element>':'Vector<TimerSet::heap_element>' lvalue ->_timer_heap 0x563645306590
|     |         `-CXXThisExpr 0x5636453145b0 <col:6> 'TimerSet *' implicit this
|     |-CXXOperatorCallExpr 0x563645314870 <line:78:6, col:50> 'Timestamp' lvalue
|     | |-ImplicitCastExpr 0x563645314858 <col:20> 'Timestamp &(*)(const Timestamp &) noexcept' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x563645314838 <col:20> 'Timestamp &(const Timestamp &) noexcept' lvalue CXXMethod 0x563644e9ac58 'operator=' 'Timestamp &(const Timestamp &) noexcept'
|     | |-MemberExpr 0x5636453146a8 <col:6> 'Timestamp' lvalue ->_timer_expiry 0x5636452fb620
|     | | `-CXXThisExpr 0x563645314698 <col:6> 'TimerSet *' implicit this
|     | `-ImplicitCastExpr 0x563645314820 <col:22, col:50> 'const Timestamp' lvalue <NoOp>
|     |   `-MemberExpr 0x5636453147f0 <col:22, col:50> 'Timestamp' lvalue .expiry_s 0x5636452fab68
|     |     `-CXXMemberCallExpr 0x5636453147c8 <col:22, col:48> 'TimerSet::heap_element':'TimerSet::heap_element' lvalue
|     |       |-MemberExpr 0x563645314798 <col:22, col:34> '<bound member function type>' .unchecked_at 0x563645304748
|     |       | `-MemberExpr 0x5636453146e8 <col:22> 'Vector<TimerSet::heap_element>':'Vector<TimerSet::heap_element>' lvalue ->_timer_heap 0x563645306590
|     |       |   `-CXXThisExpr 0x5636453146d8 <col:22> 'TimerSet *' implicit this
|     |       `-IntegerLiteral 0x563645314778 <col:47> 'int' 0
|     `-ExprWithCleanups 0x5636453149b0 <line:80:6, col:32> 'Timestamp' lvalue
|       `-CXXOperatorCallExpr 0x563645314978 <col:6, col:32> 'Timestamp' lvalue
|         |-ImplicitCastExpr 0x563645314960 <col:20> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x563645314940 <col:20> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x563644e9b108 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|         |-MemberExpr 0x5636453148b8 <col:6> 'Timestamp' lvalue ->_timer_expiry 0x5636452fb620
|         | `-CXXThisExpr 0x5636453148a8 <col:6> 'TimerSet *' implicit this
|         `-MaterializeTemporaryExpr 0x563645314928 <col:22, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5636453148f8 <col:22, col:32> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x563645312068 <line:82:5, col:37> col:10 check_timer_expiry 'void (Timer *)'
| `-ParmVarDecl 0x563645311fd8 <col:29, col:36> col:36 t 'Timer *'
|-CXXMethodDecl 0x563645312130 <line:84:5, col:29> col:17 used lock_timers 'void ()' inline
|-CXXMethodDecl 0x5636453121f0 <line:85:5, col:37> col:17 attempt_lock_timers 'bool ()' inline
|-CXXMethodDecl 0x5636453134c0 <line:86:5, col:31> col:17 used unlock_timers 'void ()' inline
|-FriendDecl 0x5636453135b0 <line:88:5, col:18> col:12 'class Timer':'Timer'
|-CXXConstructorDecl 0x563645313618 <line:12:7> col:7 implicit TimerSet 'void (const TimerSet &)' inline default noexcept-unevaluated 0x563645313618
| `-ParmVarDecl 0x563645313728 <col:7> col:7 'const TimerSet &'
|-CXXConstructorDecl 0x5636453137c8 <col:7> col:7 implicit TimerSet 'void (TimerSet &&)' inline default noexcept-unevaluated 0x5636453137c8
| `-ParmVarDecl 0x5636453138d8 <col:7> col:7 'TimerSet &&'
|-CXXMethodDecl 0x563645313978 <col:7> col:7 implicit operator= 'TimerSet &(const TimerSet &)' inline default noexcept-unevaluated 0x563645313978
| `-ParmVarDecl 0x563645313a88 <col:7> col:7 'const TimerSet &'
|-CXXMethodDecl 0x563645313ca8 <col:7> col:7 implicit operator= 'TimerSet &(TimerSet &&)' inline default noexcept-unevaluated 0x563645313ca8
| `-ParmVarDecl 0x563645313db8 <col:7> col:7 'TimerSet &&'
`-CXXDestructorDecl 0x563645313e40 <col:7> col:7 implicit ~TimerSet 'void ()' inline default noexcept-unevaluated 0x563645313e40

Layout: <CGRecordLayout
  LLVMType:%class.TimerSet = type <{ %class.Timestamp, i32, i32, i32, [4 x i8], %class.Vector.14, %class.Vector.15, %class.SimpleSpinlock, [7 x i8], %class.Timestamp, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.TimerSet.base = type <{ %class.Timestamp, i32, i32, i32, [4 x i8], %class.Vector.14, %class.Vector.15, %class.SimpleSpinlock, [7 x i8], %class.Timestamp, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56364533eed8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'pollfd'
|-CXXRecordDecl 0x56364533f0e8 prev 0x56364533eed8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5636453401c0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<pollfd>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x563645340170 'typename array_memory<pollfd>::type' sugar
|   `-TypedefType 0x563645340150 'conditional<true, sized_array_memory<8>, typed_array_memory<pollfd> >::type' sugar
|     |-Typedef 0x563645340000 'type'
|     `-SubstTemplateTypeParmType 0x5636453075a0 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x563644f57610 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f575b8 'T'
|       `-RecordType 0x5636453070f0 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x563645307008 'sized_array_memory'
|-FieldDecl 0x5636453402c0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<pollfd>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x563645340310 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x563645340348 <line:118:5, col:15> col:15 value_type 'pollfd':'pollfd'
| `-SubstTemplateTypeParmType 0x56364533f180 'pollfd' sugar
|   |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x563644f8f2a8 'T'
|   `-RecordType 0x56364533cf90 'pollfd'
|     `-CXXRecord 0x56364533cf00 'pollfd'
|-TypedefDecl 0x563645340408 <line:119:5, col:16> col:16 reference 'pollfd &'
| `-LValueReferenceType 0x5636453403d0 'pollfd &'
|   `-SubstTemplateTypeParmType 0x56364533f180 'pollfd' sugar
|     |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563644f8f2a8 'T'
|     `-RecordType 0x56364533cf90 'pollfd'
|       `-CXXRecord 0x56364533cf00 'pollfd'
|-TypedefDecl 0x5636453404c8 <line:120:5, col:22> col:22 const_reference 'const pollfd &'
| `-LValueReferenceType 0x563645340490 'const pollfd &'
|   `-QualType 0x56364533f181 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x56364533f180 'pollfd' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-RecordType 0x56364533cf90 'pollfd'
|         `-CXXRecord 0x56364533cf00 'pollfd'
|-TypedefDecl 0x563645340558 <line:121:5, col:16> col:16 pointer 'pollfd *'
| `-PointerType 0x563645340520 'pollfd *'
|   `-SubstTemplateTypeParmType 0x56364533f180 'pollfd' sugar
|     |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563644f8f2a8 'T'
|     `-RecordType 0x56364533cf90 'pollfd'
|       `-CXXRecord 0x56364533cf00 'pollfd'
|-TypedefDecl 0x563645340618 <line:122:5, col:22> col:22 const_pointer 'const pollfd *'
| `-PointerType 0x5636453405e0 'const pollfd *'
|   `-QualType 0x56364533f181 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x56364533f180 'pollfd' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-RecordType 0x56364533cf90 'pollfd'
|         `-CXXRecord 0x56364533cf00 'pollfd'
|-TypedefDecl 0x5636453411f0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<pollfd>::type':'pollfd'
| `-ElaboratedType 0x5636453411a0 'typename fast_argument<pollfd>::type' sugar
|   `-TypedefType 0x563645341180 'fast_argument<pollfd, false>::type' sugar
|     |-Typedef 0x563645341110 'type'
|     `-SubstTemplateTypeParmType 0x563645340ed0 'pollfd' sugar
|       |-TemplateTypeParmType 0x563644f62410 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f623c0 'T'
|       `-RecordType 0x56364533cf90 'pollfd'
|         `-CXXRecord 0x56364533cf00 'pollfd'
|-TypedefDecl 0x563645341258 <line:126:5, col:22> col:22 const_access_type 'const pollfd &'
| `-LValueReferenceType 0x563645340490 'const pollfd &'
|   `-QualType 0x56364533f181 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x56364533f180 'pollfd' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-RecordType 0x56364533cf90 'pollfd'
|         `-CXXRecord 0x56364533cf00 'pollfd'
|-TypedefDecl 0x5636453412b0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563644c8d370 'int'
|-TypedefDecl 0x563645341318 <line:130:5, col:16> col:16 iterator 'pollfd *'
| `-PointerType 0x563645340520 'pollfd *'
|   `-SubstTemplateTypeParmType 0x56364533f180 'pollfd' sugar
|     |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563644f8f2a8 'T'
|     `-RecordType 0x56364533cf90 'pollfd'
|       `-CXXRecord 0x56364533cf00 'pollfd'
|-TypedefDecl 0x563645341380 <line:131:5, col:22> col:22 const_iterator 'const pollfd *'
| `-PointerType 0x5636453405e0 'const pollfd *'
|   `-QualType 0x56364533f181 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x56364533f180 'pollfd' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-RecordType 0x56364533cf90 'pollfd'
|         `-CXXRecord 0x56364533cf00 'pollfd'
|-EnumDecl 0x5636453413d8 <line:134:5> col:5
| `-EnumConstantDecl 0x5636453414d0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<pollfd>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5636453414b0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x563644f90ba8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x563644f90b80 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x563644f90b60 <col:40> 'int' 1
|-CXXConstructorDecl 0x563645341558 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x563645341800 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x563645341610 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5636453416b0 <col:41, col:61> col:61 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXConstructorDecl 0x563645341ac8 <line:139:5, col:37> col:12 Vector 'void (const Vector<pollfd> &)' inline
| `-ParmVarDecl 0x5636453419b0 <col:19, col:36> col:36 x 'const Vector<pollfd> &'
|-CXXConstructorDecl 0x563645341d88 <line:141:5, col:32> col:12 Vector 'void (Vector<pollfd> &&)' inline
| `-ParmVarDecl 0x563645341c70 <col:19, col:31> col:31 x 'Vector<pollfd> &&'
|-CXXMethodDecl 0x5636453420d0 <line:144:5, col:51> col:23 operator= 'Vector<pollfd> &(const Vector<pollfd> &)' inline
| `-ParmVarDecl 0x563645341fb0 <col:33, col:50> col:50 x 'const Vector<pollfd> &'
|-CXXMethodDecl 0x5636453423e0 <line:146:5, col:46> col:23 operator= 'Vector<pollfd> &(Vector<pollfd> &&)' inline
| `-ParmVarDecl 0x5636453422c0 <col:33, col:45> col:45 x 'Vector<pollfd> &&'
|-CXXMethodDecl 0x5636453426d0 <line:148:5, col:70> col:23 assign 'Vector<pollfd> &(Vector::size_type, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x563645342518 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x563645342590 <col:43, col:69> col:63 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x563645342828 <line:150:5, col:55> col:49 begin 'Vector<pollfd>::iterator ()'
| |-NoInlineAttr 0x563645342908 <col:20> Inherited
| `-OptimizeNoneAttr 0x563645342960 <col:30> Inherited
|-CXXMethodDecl 0x5636453429a8 <line:151:5, col:53> col:49 end 'Vector<pollfd>::iterator ()'
| |-NoInlineAttr 0x563645342a58 <col:20> Inherited
| `-OptimizeNoneAttr 0x563645342ab0 <col:30> Inherited
|-CXXMethodDecl 0x563645342b78 <line:152:5, col:63> col:55 begin 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x563645342c28 <col:20> Inherited
| `-OptimizeNoneAttr 0x563645342c80 <col:30> Inherited
|-CXXMethodDecl 0x563645342cc8 <line:153:5, col:61> col:55 end 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x563645342d78 <col:20> Inherited
| `-OptimizeNoneAttr 0x563645342dd0 <col:30> Inherited
|-CXXMethodDecl 0x563645342e18 <line:154:5, col:64> col:55 cbegin 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x563645342ec8 <col:20> Inherited
| `-OptimizeNoneAttr 0x563645342f20 <col:30> Inherited
|-CXXMethodDecl 0x563645342f68 <line:155:5, col:62> col:55 cend 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x563645343018 <col:20> Inherited
| `-OptimizeNoneAttr 0x563645343070 <col:30> Inherited
|-CXXMethodDecl 0x563645343098 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x563645343148 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5636453431f8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5636453433b8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x5636453432a8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x563645343320 <col:37, col:63> col:57 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x563645343508 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x563645343478 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5636453436b8 <line:163:5, col:65> col:43 operator[] 'pollfd &(Vector::size_type)'
| |-ParmVarDecl 0x5636453435c0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x563645343770 <col:20>
| `-OptimizeNoneAttr 0x5636453437c8 <col:30>
|-CXXMethodDecl 0x5636453438e8 <line:164:5, col:73> col:49 operator[] 'const pollfd &(Vector::size_type) const'
| |-ParmVarDecl 0x5636453437f0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5636453439a0 <col:20>
| `-OptimizeNoneAttr 0x5636453439f8 <col:30>
|-CXXMethodDecl 0x563645343ab0 <line:165:5, col:29> col:15 at 'pollfd &(Vector::size_type)' inline
| `-ParmVarDecl 0x563645343a20 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563645343bf8 <line:166:5, col:37> col:21 at 'const pollfd &(Vector::size_type) const' inline
| `-ParmVarDecl 0x563645343b68 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563645343d28 <line:167:5, col:21> col:15 front 'pollfd &()' inline
|-CXXMethodDecl 0x563645343e58 <line:168:5, col:29> col:21 front 'const pollfd &() const' inline
|-CXXMethodDecl 0x563645343f28 <line:169:5, col:20> col:15 back 'pollfd &()' inline
|-CXXMethodDecl 0x563645343ff8 <line:170:5, col:28> col:21 back 'const pollfd &() const' inline
|-CXXMethodDecl 0x563645344138 <line:172:5, col:39> col:15 unchecked_at 'pollfd &(Vector::size_type)' inline
| `-ParmVarDecl 0x5636453440a8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563645344280 <line:173:5, col:47> col:21 unchecked_at 'const pollfd &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5636453441f0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5636453443c8 <line:174:5, col:59> col:15 at_u 'pollfd &(Vector::size_type)' inline
| |-ParmVarDecl 0x563645344338 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x563645344480 <col:48> Inherited "" ""
|-CXXMethodDecl 0x563645344580 <line:175:5, col:71> col:21 at_u 'const pollfd &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5636453444f0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x563645344638 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5636453446f8 <line:177:5, col:20> col:15 data 'pollfd *()' inline
|-CXXMethodDecl 0x5636453447f8 <line:178:5, col:28> col:21 data 'const pollfd *() const' inline
|-CXXMethodDecl 0x5636453449a8 <line:180:5, col:48> col:17 push_back 'void (Vector<pollfd>::value_argument_type)' inline
| `-ParmVarDecl 0x5636453448b8 <col:27, col:47> col:47 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-FunctionTemplateDecl 0x563645345168 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x563645344a60 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<pollfd>':'fast_argument<pollfd, false>'
| `-CXXMethodDecl 0x5636453450c8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (pollfd &&)' inline
|   `-ParmVarDecl 0x563645344fc8 <col:58, col:62> col:62 v 'pollfd &&'
|-CXXMethodDecl 0x563645345248 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x563645345398 <line:186:5, col:49> col:17 push_front 'void (Vector<pollfd>::value_argument_type)' inline
| `-ParmVarDecl 0x563645345308 <col:28, col:48> col:48 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x563645345450 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x563645345698 <line:189:5, col:62> col:21 insert 'Vector<pollfd>::iterator (Vector<pollfd>::iterator, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x563645345510 <col:28, col:37> col:37 it 'Vector<pollfd>::iterator':'pollfd *'
| `-ParmVarDecl 0x563645345588 <col:41, col:61> col:61 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x563645345858 <line:190:5, col:38> col:21 erase 'Vector<pollfd>::iterator (Vector<pollfd>::iterator)' inline
| `-ParmVarDecl 0x563645345768 <col:27, col:36> col:36 it 'Vector<pollfd>::iterator':'pollfd *'
|-CXXMethodDecl 0x563645345aa8 <line:191:5, col:49> col:21 erase 'Vector<pollfd>::iterator (Vector<pollfd>::iterator, Vector<pollfd>::iterator)' inline
| |-ParmVarDecl 0x563645345920 <col:27, col:36> col:36 a 'Vector<pollfd>::iterator':'pollfd *'
| `-ParmVarDecl 0x563645345998 <col:39, col:48> col:48 b 'Vector<pollfd>::iterator':'pollfd *'
|-CXXMethodDecl 0x563645345b68 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x563645345dc8 <line:195:5, col:34> col:17 swap 'void (Vector<pollfd> &)' inline
| `-ParmVarDecl 0x563645345cd0 <col:22, col:33> col:33 x 'Vector<pollfd> &'
`-CXXDestructorDecl 0x563645345e98 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x563645345e98

Layout: <CGRecordLayout
  LLVMType:%class.Vector.16 = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector.16 = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x563645347380 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<24>'
|-CXXRecordDecl 0x563645347558 prev 0x563645347380 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5636453475e8 <col:46, col:52> col:46 public
|-TypedefDecl 0x563645347610 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563644c8d370 'int'
|-TypedefDecl 0x5636453491e0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<24>::type':'char_array<24>'
| `-ElaboratedType 0x563645349190 'typename sized_array_memory<24>::type' sugar
|   `-TypedefType 0x563645347ac0 'sized_array_memory<24>::type' sugar
|     |-Typedef 0x5636453479c0 'type'
|     `-TemplateSpecializationType 0x563645347950 'char_array<24UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x563645347830 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 24
|       |   `-SubstNonTypeTemplateParmExpr 0x563645347810 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5636453477f0 <col:24> 'unsigned long' 24
|       `-RecordType 0x563645347930 'char_array<24>'
|         `-ClassTemplateSpecialization 0x563645347850 'char_array'
|-TypedefDecl 0x563645349298 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<24> >::type *'
| `-PointerType 0x563645349260 'vector_memory<sized_array_memory<24> >::type *'
|   `-TypedefType 0x563645349240 'vector_memory<sized_array_memory<24> >::type' sugar
|     |-Typedef 0x5636453491e0 'type'
|     `-ElaboratedType 0x563645349190 'typename sized_array_memory<24>::type' sugar
|       `-TypedefType 0x563645347ac0 'sized_array_memory<24>::type' sugar
|         |-Typedef 0x5636453479c0 'type'
|         `-TemplateSpecializationType 0x563645347950 'char_array<24UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x563645347830 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 24
|           |   `-SubstNonTypeTemplateParmExpr 0x563645347810 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5636453477f0 <col:24> 'unsigned long' 24
|           `-RecordType 0x563645347930 'char_array<24>'
|             `-ClassTemplateSpecialization 0x563645347850 'char_array'
|-CXXMethodDecl 0x563645349418 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<24> >::type *) const' inline
| `-ParmVarDecl 0x563645349328 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXConstructorDecl 0x563645349508 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5636453495e8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5636453495e8
|-CXXMethodDecl 0x5636453498e8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<24> > &)'
| `-ParmVarDecl 0x5636453497f8 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<24> > &'
|-CXXMethodDecl 0x563645349b28 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x5636453499a0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x563645349a18 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x563645349cf8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x563645349be8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x563645349c60 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x563645349e58 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<24> >::iterator ()'
|-CXXMethodDecl 0x563645349f28 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<24> >::iterator ()'
|-CXXMethodDecl 0x56364534a178 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<24> >::iterator (vector_memory<sized_array_memory<24> >::iterator, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x563645349fe8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<24> >::iterator':'vector_memory<sized_array_memory<24> >::type *'
| `-ParmVarDecl 0x56364534a060 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x56364534a3d8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<24> >::iterator (vector_memory<sized_array_memory<24> >::iterator, vector_memory<sized_array_memory<24> >::iterator)'
| |-ParmVarDecl 0x56364534a248 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<24> >::iterator':'vector_memory<sized_array_memory<24> >::type *'
| `-ParmVarDecl 0x56364534a2c0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<24> >::iterator':'vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x56364534a598 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<24> >::type *)' inline
| `-ParmVarDecl 0x56364534a4a8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x56364534a758 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<24> >::type *)' inline
| `-ParmVarDecl 0x56364534a660 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x56364534a810 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56364534a8c0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56364534aaf8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x56364534a970 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56364534a9e8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x56364534ad98 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<24> > &)'
| `-ParmVarDecl 0x56364534aca0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<24> > &'
|-FieldDecl 0x56364534ae60 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<24> >::type *'
|-FieldDecl 0x56364534aeb0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56364534af00 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.18 = type { %struct.char_array.19*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.18 = type { %struct.char_array.19*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x563645345fe0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'SelectSet::SelectorInfo'
|-CXXRecordDecl 0x5636453461e8 prev 0x563645345fe0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5636453472f0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<SelectorInfo>::type':'sized_array_memory<24>'
| `-ElaboratedType 0x5636453472a0 'typename array_memory<SelectorInfo>::type' sugar
|   `-TypedefType 0x563645347280 'conditional<true, sized_array_memory<24>, typed_array_memory<SelectSet::SelectorInfo> >::type' sugar
|     |-Typedef 0x563645347130 'type'
|     `-SubstTemplateTypeParmType 0x563645346f50 'sized_array_memory<24>' sugar
|       |-TemplateTypeParmType 0x563644f57610 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f575b8 'T'
|       `-RecordType 0x563645258c20 'sized_array_memory<24>'
|         `-ClassTemplateSpecialization 0x563645258b38 'sized_array_memory'
|-FieldDecl 0x56364534af50 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<SelectSet::SelectorInfo>::array_memory_type>':'vector_memory<sized_array_memory<24> >' mutable
|-AccessSpecDecl 0x56364534afa0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56364534afd8 <line:118:5, col:15> col:15 value_type 'SelectSet::SelectorInfo':'SelectSet::SelectorInfo'
| `-SubstTemplateTypeParmType 0x563645346280 'SelectSet::SelectorInfo' sugar
|   |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x563644f8f2a8 'T'
|   `-RecordType 0x56364533ea40 'SelectSet::SelectorInfo'
|     `-CXXRecord 0x56364533e9b0 'SelectorInfo'
|-TypedefDecl 0x56364534b098 <line:119:5, col:16> col:16 reference 'SelectSet::SelectorInfo &'
| `-LValueReferenceType 0x56364534b060 'SelectSet::SelectorInfo &'
|   `-SubstTemplateTypeParmType 0x563645346280 'SelectSet::SelectorInfo' sugar
|     |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563644f8f2a8 'T'
|     `-RecordType 0x56364533ea40 'SelectSet::SelectorInfo'
|       `-CXXRecord 0x56364533e9b0 'SelectorInfo'
|-TypedefDecl 0x56364534b158 <line:120:5, col:22> col:22 const_reference 'const SelectSet::SelectorInfo &'
| `-LValueReferenceType 0x56364534b120 'const SelectSet::SelectorInfo &'
|   `-QualType 0x563645346281 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x563645346280 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-RecordType 0x56364533ea40 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x56364533e9b0 'SelectorInfo'
|-TypedefDecl 0x56364534b1e8 <line:121:5, col:16> col:16 pointer 'SelectSet::SelectorInfo *'
| `-PointerType 0x56364534b1b0 'SelectSet::SelectorInfo *'
|   `-SubstTemplateTypeParmType 0x563645346280 'SelectSet::SelectorInfo' sugar
|     |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563644f8f2a8 'T'
|     `-RecordType 0x56364533ea40 'SelectSet::SelectorInfo'
|       `-CXXRecord 0x56364533e9b0 'SelectorInfo'
|-TypedefDecl 0x56364534b2a8 <line:122:5, col:22> col:22 const_pointer 'const SelectSet::SelectorInfo *'
| `-PointerType 0x56364534b270 'const SelectSet::SelectorInfo *'
|   `-QualType 0x563645346281 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x563645346280 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-RecordType 0x56364533ea40 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x56364533e9b0 'SelectorInfo'
|-TypedefDecl 0x56364534bf00 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<SelectorInfo>::type':'const SelectSet::SelectorInfo &'
| `-ElaboratedType 0x56364534beb0 'typename fast_argument<SelectorInfo>::type' sugar
|   `-TypedefType 0x56364534be90 'fast_argument<SelectSet::SelectorInfo, true>::type' sugar
|     |-Typedef 0x56364534bdc8 'type'
|     `-LValueReferenceType 0x56364534bd90 'const SelectSet::SelectorInfo &'
|       `-QualType 0x56364534bb31 'const SelectSet::SelectorInfo' const
|         `-SubstTemplateTypeParmType 0x56364534bb30 'SelectSet::SelectorInfo' sugar
|           |-TemplateTypeParmType 0x563644f61ce0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x563644f61c88 'T'
|           `-RecordType 0x56364533ea40 'SelectSet::SelectorInfo'
|             `-CXXRecord 0x56364533e9b0 'SelectorInfo'
|-TypedefDecl 0x56364534bf68 <line:126:5, col:22> col:22 const_access_type 'const SelectSet::SelectorInfo &'
| `-LValueReferenceType 0x56364534b120 'const SelectSet::SelectorInfo &'
|   `-QualType 0x563645346281 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x563645346280 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-RecordType 0x56364533ea40 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x56364533e9b0 'SelectorInfo'
|-TypedefDecl 0x56364534bfc0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563644c8d370 'int'
|-TypedefDecl 0x56364534c028 <line:130:5, col:16> col:16 iterator 'SelectSet::SelectorInfo *'
| `-PointerType 0x56364534b1b0 'SelectSet::SelectorInfo *'
|   `-SubstTemplateTypeParmType 0x563645346280 'SelectSet::SelectorInfo' sugar
|     |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563644f8f2a8 'T'
|     `-RecordType 0x56364533ea40 'SelectSet::SelectorInfo'
|       `-CXXRecord 0x56364533e9b0 'SelectorInfo'
|-TypedefDecl 0x56364534c090 <line:131:5, col:22> col:22 const_iterator 'const SelectSet::SelectorInfo *'
| `-PointerType 0x56364534b270 'const SelectSet::SelectorInfo *'
|   `-QualType 0x563645346281 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x563645346280 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x563644f8f300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563644f8f2a8 'T'
|       `-RecordType 0x56364533ea40 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x56364533e9b0 'SelectorInfo'
|-EnumDecl 0x56364534c0e8 <line:134:5> col:5
| `-EnumConstantDecl 0x56364534c1e0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<SelectSet::SelectorInfo>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56364534c1c0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x563644f90ba8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x563644f90b80 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x563644f90b60 <col:40> 'int' 1
|-CXXConstructorDecl 0x56364534c268 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56364534c4f8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x56364534c320 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56364534c3c0 <col:41, col:61> col:61 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXConstructorDecl 0x56364534c7b8 <line:139:5, col:37> col:12 Vector 'void (const Vector<SelectSet::SelectorInfo> &)' inline
| `-ParmVarDecl 0x56364534c6a0 <col:19, col:36> col:36 x 'const Vector<SelectSet::SelectorInfo> &'
|-CXXConstructorDecl 0x56364534ca78 <line:141:5, col:32> col:12 Vector 'void (Vector<SelectSet::SelectorInfo> &&)' inline
| `-ParmVarDecl 0x56364534c960 <col:19, col:31> col:31 x 'Vector<SelectSet::SelectorInfo> &&'
|-CXXMethodDecl 0x56364534cdc0 <line:144:5, col:51> col:23 operator= 'Vector<SelectSet::SelectorInfo> &(const Vector<SelectSet::SelectorInfo> &)' inline
| `-ParmVarDecl 0x56364534cca0 <col:33, col:50> col:50 x 'const Vector<SelectSet::SelectorInfo> &'
|-CXXMethodDecl 0x56364534d0d0 <line:146:5, col:46> col:23 operator= 'Vector<SelectSet::SelectorInfo> &(Vector<SelectSet::SelectorInfo> &&)' inline
| `-ParmVarDecl 0x56364534cfb0 <col:33, col:45> col:45 x 'Vector<SelectSet::SelectorInfo> &&'
|-CXXMethodDecl 0x56364534d3c0 <line:148:5, col:70> col:23 assign 'Vector<SelectSet::SelectorInfo> &(Vector::size_type, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x56364534d208 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56364534d280 <col:43, col:69> col:63 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x56364534d518 <line:150:5, col:55> col:49 begin 'Vector<SelectSet::SelectorInfo>::iterator ()'
| |-NoInlineAttr 0x56364534d5f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56364534d650 <col:30> Inherited
|-CXXMethodDecl 0x56364534d698 <line:151:5, col:53> col:49 end 'Vector<SelectSet::SelectorInfo>::iterator ()'
| |-NoInlineAttr 0x56364534d748 <col:20> Inherited
| `-OptimizeNoneAttr 0x56364534d7a0 <col:30> Inherited
|-CXXMethodDecl 0x56364534d868 <line:152:5, col:63> col:55 begin 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x56364534d918 <col:20> Inherited
| `-OptimizeNoneAttr 0x56364534d970 <col:30> Inherited
|-CXXMethodDecl 0x56364534d9b8 <line:153:5, col:61> col:55 end 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x56364534da68 <col:20> Inherited
| `-OptimizeNoneAttr 0x56364534dac0 <col:30> Inherited
|-CXXMethodDecl 0x56364534db08 <line:154:5, col:64> col:55 cbegin 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x56364534dbb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56364534dc10 <col:30> Inherited
|-CXXMethodDecl 0x56364534dc58 <line:155:5, col:62> col:55 cend 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x56364534dd08 <col:20> Inherited
| `-OptimizeNoneAttr 0x56364534dd60 <col:30> Inherited
|-CXXMethodDecl 0x56364534dd88 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56364534de38 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56364534dee8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x56364534e0a8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x56364534df98 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56364534e010 <col:37, col:63> col:57 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x56364534e1f8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56364534e168 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56364534e3a8 <line:163:5, col:65> col:43 operator[] 'SelectSet::SelectorInfo &(Vector::size_type)'
| |-ParmVarDecl 0x56364534e2b0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56364534e460 <col:20>
| `-OptimizeNoneAttr 0x56364534e4b8 <col:30>
|-CXXMethodDecl 0x56364534e5d8 <line:164:5, col:73> col:49 operator[] 'const SelectSet::SelectorInfo &(Vector::size_type) const'
| |-ParmVarDecl 0x56364534e4e0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56364534e690 <col:20>
| `-OptimizeNoneAttr 0x56364534e6e8 <col:30>
|-CXXMethodDecl 0x56364534e7a0 <line:165:5, col:29> col:15 at 'SelectSet::SelectorInfo &(Vector::size_type)' inline
| `-ParmVarDecl 0x56364534e710 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56364534e8e8 <line:166:5, col:37> col:21 at 'const SelectSet::SelectorInfo &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56364534e858 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56364534ea18 <line:167:5, col:21> col:15 front 'SelectSet::SelectorInfo &()' inline
|-CXXMethodDecl 0x56364534eb48 <line:168:5, col:29> col:21 front 'const SelectSet::SelectorInfo &() const' inline
|-CXXMethodDecl 0x56364534ec18 <line:169:5, col:20> col:15 back 'SelectSet::SelectorInfo &()' inline
|-CXXMethodDecl 0x56364534ece8 <line:170:5, col:28> col:21 back 'const SelectSet::SelectorInfo &() const' inline
|-CXXMethodDecl 0x56364534ee28 <line:172:5, col:39> col:15 unchecked_at 'SelectSet::SelectorInfo &(Vector::size_type)' inline
| `-ParmVarDecl 0x56364534ed98 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56364534ef70 <line:173:5, col:47> col:21 unchecked_at 'const SelectSet::SelectorInfo &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56364534eee0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56364534f0b8 <line:174:5, col:59> col:15 at_u 'SelectSet::SelectorInfo &(Vector::size_type)' inline
| |-ParmVarDecl 0x56364534f028 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56364534f170 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56364534f270 <line:175:5, col:71> col:21 at_u 'const SelectSet::SelectorInfo &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56364534f1e0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56364534f328 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56364534f3e8 <line:177:5, col:20> col:15 data 'SelectSet::SelectorInfo *()' inline
|-CXXMethodDecl 0x56364534f4e8 <line:178:5, col:28> col:21 data 'const SelectSet::SelectorInfo *() const' inline
|-CXXMethodDecl 0x56364534f698 <line:180:5, col:48> col:17 push_back 'void (Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| `-ParmVarDecl 0x56364534f5a8 <col:27, col:47> col:47 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-FunctionTemplateDecl 0x56364534fe58 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56364534f750 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<SelectSet::SelectorInfo>':'fast_argument<SelectSet::SelectorInfo, true>'
| `-CXXMethodDecl 0x56364534fdb8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (SelectSet::SelectorInfo &&)' inline
|   `-ParmVarDecl 0x56364534fcb8 <col:58, col:62> col:62 v 'SelectSet::SelectorInfo &&'
|-CXXMethodDecl 0x56364534ff38 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x563645350088 <line:186:5, col:49> col:17 push_front 'void (Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| `-ParmVarDecl 0x56364534fff8 <col:28, col:48> col:48 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x563645350140 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x563645350388 <line:189:5, col:62> col:21 insert 'Vector<SelectSet::SelectorInfo>::iterator (Vector<SelectSet::SelectorInfo>::iterator, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x563645350200 <col:28, col:37> col:37 it 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
| `-ParmVarDecl 0x563645350278 <col:41, col:61> col:61 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x563645350548 <line:190:5, col:38> col:21 erase 'Vector<SelectSet::SelectorInfo>::iterator (Vector<SelectSet::SelectorInfo>::iterator)' inline
| `-ParmVarDecl 0x563645350458 <col:27, col:36> col:36 it 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
|-CXXMethodDecl 0x563645350798 <line:191:5, col:49> col:21 erase 'Vector<SelectSet::SelectorInfo>::iterator (Vector<SelectSet::SelectorInfo>::iterator, Vector<SelectSet::SelectorInfo>::iterator)' inline
| |-ParmVarDecl 0x563645350610 <col:27, col:36> col:36 a 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
| `-ParmVarDecl 0x563645350688 <col:39, col:48> col:48 b 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
|-CXXMethodDecl 0x563645350858 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x563645350ab8 <line:195:5, col:34> col:17 swap 'void (Vector<SelectSet::SelectorInfo> &)' inline
| `-ParmVarDecl 0x5636453509c0 <col:22, col:33> col:33 x 'Vector<SelectSet::SelectorInfo> &'
`-CXXDestructorDecl 0x563645350b88 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x563645350b88

Layout: <CGRecordLayout
  LLVMType:%class.Vector.17 = type { %class.vector_memory.18 }
  NonVirtualBaseLLVMType:%class.Vector.17 = type { %class.vector_memory.18 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56364533db90 <../dummy_inc/click/selectset.hh:36:1, line:109:1> line:36:7 referenced class SelectSet definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56364533dca8 <col:1, col:7> col:7 implicit referenced class SelectSet
|-AccessSpecDecl 0x56364533dd38 <col:19, col:25> col:19 public
|-CXXConstructorDecl 0x56364533ddc0 <line:38:5, col:15> col:5 SelectSet 'void ()'
|-CXXDestructorDecl 0x56364533deb0 <line:39:5, col:16> col:5 ~SelectSet 'void ()' noexcept-unevaluated 0x56364533deb0
|-CXXMethodDecl 0x56364533dfb0 <line:41:5, col:21> col:10 initialize 'void ()'
|-CXXMethodDecl 0x56364533e250 <line:43:5, col:54> col:9 add_select 'int (int, Element *, int)'
| |-ParmVarDecl 0x56364533e068 <col:20, col:24> col:24 fd 'int'
| |-ParmVarDecl 0x56364533e0e0 <col:28, col:37> col:37 element 'Element *'
| `-ParmVarDecl 0x56364533e160 <col:46, col:50> col:50 mask 'int'
|-CXXMethodDecl 0x56364533e4c0 <line:44:5, col:57> col:9 remove_select 'int (int, Element *, int)'
| |-ParmVarDecl 0x56364533e320 <col:23, col:27> col:27 fd 'int'
| |-ParmVarDecl 0x56364533e398 <col:31, col:40> col:40 element 'Element *'
| `-ParmVarDecl 0x56364533e418 <col:49, col:53> col:53 mask 'int'
|-CXXMethodDecl 0x56364533e618 <line:46:5, col:42> col:10 run_selects 'void (RouterThread *)'
| `-ParmVarDecl 0x56364533e588 <col:22, col:36> col:36 thread 'RouterThread *'
|-CXXMethodDecl 0x56364533e6e0 <line:47:5, line:50:5> line:47:17 used wake_immediate 'void ()' inline
| `-CompoundStmt 0x563645352248 <col:34, line:50:5>
|   |-BinaryOperator 0x563645351c18 <line:48:2, col:23> 'volatile bool' lvalue '='
|   | |-MemberExpr 0x563645351bd8 <col:2> 'volatile bool' lvalue ->_wake_pipe_pending 0x56364533ee68
|   | | `-CXXThisExpr 0x563645351bc8 <col:2> 'SelectSet *' implicit this
|   | `-CXXBoolLiteralExpr 0x563645351c08 <col:23> 'bool' true
|   `-CallExpr 0x563645352220 <line:49:2, col:43> 'void'
|     |-ImplicitCastExpr 0x563645352208 <col:2> 'void (*)(long)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x563645352188 <col:2> 'void (long)' lvalue Function 0x563645352088 'ignore_result' 'void (long)' (FunctionTemplate 0x563644f525b8 'ignore_result')
|     `-CallExpr 0x563645351e30 <col:16, col:42> 'ssize_t':'long'
|       |-ImplicitCastExpr 0x563645351e18 <col:16> 'ssize_t (*)(int, const void *, size_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563645351d98 <col:16> 'ssize_t (int, const void *, size_t)' lvalue Function 0x563645317a18 'write' 'ssize_t (int, const void *, size_t)'
|       |-ImplicitCastExpr 0x563645351e68 <col:22, col:34> 'int' <LValueToRValue>
|       | `-ArraySubscriptExpr 0x563645351d40 <col:22, col:34> 'int' lvalue
|       |   |-ImplicitCastExpr 0x563645351d28 <col:22> 'int *' <ArrayToPointerDecay>
|       |   | `-MemberExpr 0x563645351cd8 <col:22> 'int [2]' lvalue ->_wake_pipe 0x56364533ee08
|       |   |   `-CXXThisExpr 0x563645351cc8 <col:22> 'SelectSet *' implicit this
|       |   `-IntegerLiteral 0x563645351d08 <col:33> 'int' 1
|       |-ImplicitCastExpr 0x563645351e98 <col:37> 'const void *' <BitCast>
|       | `-ImplicitCastExpr 0x563645351e80 <col:37> 'const char *' <ArrayToPointerDecay>
|       |   `-StringLiteral 0x563645351d60 <col:37> 'const char [1]' lvalue ""
|       `-ImplicitCastExpr 0x563645351eb0 <col:41> 'size_t':'unsigned long' <IntegralCast>
|         `-IntegerLiteral 0x563645351d78 <col:41> 'int' 1
|-CXXMethodDecl 0x56364533e820 <line:52:5, col:36> col:10 kill_router 'void (Router *)'
| `-ParmVarDecl 0x56364533e790 <col:22, col:30> col:30 router 'Router *'
|-CXXMethodDecl 0x56364533e8e8 <line:54:5, col:23> col:17 fence 'void ()' inline
|-AccessSpecDecl 0x56364533e988 <line:56:3, col:10> col:3 private
|-CXXRecordDecl 0x56364533e9b0 <line:58:5, line:66:5> line:58:12 referenced struct SelectorInfo definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x56364533eac8 <col:5, col:12> col:12 implicit referenced struct SelectorInfo
| |-FieldDecl 0x56364533eb68 <line:59:2, col:11> col:11 read 'Element *'
| |-FieldDecl 0x56364533ebc8 <line:60:2, col:11> col:11 write 'Element *'
| |-FieldDecl 0x56364533ec30 <line:61:2, col:6> col:6 pollfd 'int'
| `-CXXConstructorDecl 0x56364533ece0 <line:62:2, line:65:2> line:62:2 SelectorInfo 'void ()'
|   |-CXXCtorInitializer Field 0x56364533eb68 'read' 'Element *'
|   | `-ImplicitCastExpr 0x5636453522a8 <line:63:13> 'Element *' <NullToPointer>
|   |   `-IntegerLiteral 0x563645352268 <col:13> 'int' 0
|   |-CXXCtorInitializer Field 0x56364533ebc8 'write' 'Element *'
|   | `-ImplicitCastExpr 0x563645352328 <col:23> 'Element *' <NullToPointer>
|   |   `-IntegerLiteral 0x5636453522e8 <col:23> 'int' 0
|   |-CXXCtorInitializer Field 0x56364533ec30 'pollfd' 'int'
|   | `-UnaryOperator 0x563645352388 <col:34, col:35> 'int' prefix '-'
|   |   `-IntegerLiteral 0x563645352368 <col:35> 'int' 1
|   `-CompoundStmt 0x563645352400 <line:64:2, line:65:2>
|-FieldDecl 0x56364533ee08 <line:68:5, col:21> col:9 referenced _wake_pipe 'int [2]'
|-FieldDecl 0x56364533ee68 <line:69:5, col:19> col:19 referenced _wake_pipe_pending 'volatile bool'
|-FieldDecl 0x563645345f80 <line:82:5, col:27> col:27 _pollfds 'Vector<struct pollfd>':'Vector<pollfd>'
|-FieldDecl 0x563645350c70 <line:83:5, col:26> col:26 _selinfo 'Vector<SelectSet::SelectorInfo>':'Vector<SelectSet::SelectorInfo>'
|-CXXMethodDecl 0x563645350ea8 <line:89:5, col:63> col:10 register_select 'void (int, bool, bool)'
| |-ParmVarDecl 0x563645350cd8 <col:26, col:30> col:30 fd 'int'
| |-ParmVarDecl 0x563645350d50 <col:34, col:39> col:39 add_read 'bool'
| `-ParmVarDecl 0x563645350dc8 <col:49, col:54> col:54 add_write 'bool'
|-CXXMethodDecl 0x563645351090 <line:90:5, col:41> col:10 remove_pollfd 'void (int, int)'
| |-ParmVarDecl 0x563645350f78 <col:24, col:28> col:28 pi 'int'
| `-ParmVarDecl 0x563645350ff8 <col:32, col:36> col:36 event 'int'
|-CXXMethodDecl 0x5636453512d8 <line:91:5, col:49> col:17 call_selected 'void (int, int) const' inline
| |-ParmVarDecl 0x563645351158 <col:31, col:35> col:35 fd 'int'
| `-ParmVarDecl 0x5636453511d8 <col:39, col:43> col:43 mask 'int'
|-CXXMethodDecl 0x5636453514e8 <line:92:5, col:63> col:17 post_select 'bool (RouterThread *, bool)' inline
| |-ParmVarDecl 0x563645351398 <col:29, col:43> col:43 thread 'RouterThread *'
| `-ParmVarDecl 0x563645351410 <col:51, col:56> col:56 acquire 'bool'
|-CXXMethodDecl 0x563645351638 <line:97:5, col:47> col:10 run_selects_poll 'void (RouterThread *)'
| `-ParmVarDecl 0x5636453515a8 <col:27, col:41> col:41 thread 'RouterThread *'
|-CXXMethodDecl 0x563645351700 <line:102:5, col:22> col:17 used lock 'void ()' inline
|-CXXMethodDecl 0x5636453517d0 <line:103:5, col:24> col:17 used unlock 'void ()' inline
|-CXXConstructorDecl 0x563645351898 <line:36:7> col:7 implicit SelectSet 'void (const SelectSet &)' inline default noexcept-unevaluated 0x563645351898
| `-ParmVarDecl 0x5636453519a8 <col:7> col:7 'const SelectSet &'
`-CXXMethodDecl 0x563645351a48 <col:7> col:7 implicit operator= 'SelectSet &(const SelectSet &)' inline default noexcept-unevaluated 0x563645351a48
  `-ParmVarDecl 0x563645351b58 <col:7> col:7 'const SelectSet &'

Layout: <CGRecordLayout
  LLVMType:%class.SelectSet = type { [2 x i32], i8, %class.Vector.16, %class.Vector.17 }
  NonVirtualBaseLLVMType:%class.SelectSet = type { [2 x i32], i8, %class.Vector.16, %class.Vector.17 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56364520e898 <../dummy_inc/click/sync.hh:46:1, line:64:1> line:46:7 referenced class Spinlock definition
|-DefinitionData empty standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56364520e9b8 <col:1, col:7> col:7 implicit referenced class Spinlock
|-AccessSpecDecl 0x56364520ea48 <col:18, col:24> col:18 public
|-CXXConstructorDecl 0x56364520ead0 <line:48:5, col:21> col:12 Spinlock 'void ()' inline
|-CXXDestructorDecl 0x56364520ebc0 <line:49:5, col:22> col:12 ~Spinlock 'void () noexcept' inline
|-CXXMethodDecl 0x56364520ecc0 <line:51:5, col:25> col:17 used acquire 'void ()' inline
|-CXXMethodDecl 0x56364520ed80 <line:52:5, col:25> col:17 used release 'void ()' inline
|-CXXMethodDecl 0x56364520ee40 <line:53:5, col:25> col:17 attempt 'bool ()' inline
|-CXXMethodDecl 0x56364520ef28 <line:54:5, col:26> col:17 nested 'bool () const' inline
|-CXXConstructorDecl 0x56364520f048 <line:46:7> col:7 implicit constexpr Spinlock 'void (const Spinlock &)' inline default trivial noexcept-unevaluated 0x56364520f048
| `-ParmVarDecl 0x56364520f158 <col:7> col:7 'const Spinlock &'
`-CXXMethodDecl 0x563645356ff8 <col:7> col:7 implicit operator= 'Spinlock &(const Spinlock &)' inline default trivial noexcept-unevaluated 0x563645356ff8
  `-ParmVarDecl 0x563645357108 <col:7> col:7 'const Spinlock &'

Layout: <CGRecordLayout
  LLVMType:%class.Spinlock = type { i8 }
  NonVirtualBaseLLVMType:%class.Spinlock.base = type {}
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636452eda98 <../dummy_inc/click/task.hh:339:5, line:342:5> line:339:11 referenced union Pending definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5636452edbb8 <col:5, col:11> col:11 implicit union Pending
|-FieldDecl 0x5636452edc58 <line:340:9, col:15> col:15 t 'Task *'
|-FieldDecl 0x5636452edcb8 <line:341:9, col:19> col:19 referenced x 'uintptr_t':'unsigned long'
|-CXXConstructorDecl 0x5636453565f8 <line:339:11> col:11 implicit constexpr Pending 'void (const Task::Pending &)' inline default trivial noexcept-unevaluated 0x5636453565f8
| `-ParmVarDecl 0x563645356708 <col:11> col:11 'const Task::Pending &'
|-CXXConstructorDecl 0x5636453567a8 <col:11> col:11 implicit constexpr Pending 'void (Task::Pending &&)' inline default trivial noexcept-unevaluated 0x5636453567a8
| `-ParmVarDecl 0x5636453568b8 <col:11> col:11 'Task::Pending &&'
|-CXXDestructorDecl 0x563645356928 <col:11> col:11 implicit ~Pending 'void ()' inline default trivial noexcept-unevaluated 0x563645356928
|-CXXMethodDecl 0x5636453571a8 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(const Task::Pending &)' inline default trivial noexcept-unevaluated 0x5636453571a8
| `-ParmVarDecl 0x5636453572b8 <col:11> col:11 'const Task::Pending &'
|-CXXMethodDecl 0x563645357328 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(Task::Pending &&)' inline default trivial noexcept-unevaluated 0x563645357328
| `-ParmVarDecl 0x563645357438 <col:11> col:11 'Task::Pending &&'
`-CXXConstructorDecl 0x563645360ab8 <col:11> col:11 implicit used Pending 'void () noexcept' inline default trivial
  `-CompoundStmt 0x563645360b90 <col:11>

Layout: <CGRecordLayout
  LLVMType:%"union.Task::Pending" = type { %class.Task* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563645210790 <../dummy_inc/click/sync.hh:303:1, line:324:1> line:303:7 referenced class SpinlockIRQ definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5636452108a8 <col:1, col:7> col:7 implicit referenced class SpinlockIRQ
|-AccessSpecDecl 0x563645210938 <col:21, col:27> col:21 public
|-CXXConstructorDecl 0x5636452109c0 <line:305:5, col:24> col:12 SpinlockIRQ 'void ()' inline
|-TypedefDecl 0x563645210a80 <line:310:5, col:17> col:17 referenced flags_t 'int'
| `-BuiltinType 0x563644c8d370 'int'
|-CXXMethodDecl 0x563645210b48 <line:313:5, col:59> col:20 acquire 'SpinlockIRQ::flags_t ()' inline
| `-AlwaysInlineAttr 0x563645210be8 <col:45> always_inline
|-CXXMethodDecl 0x563645210d18 <line:314:5, col:63> col:17 release 'void (SpinlockIRQ::flags_t)' inline
| |-ParmVarDecl 0x563645210c50 <col:25> col:32 'SpinlockIRQ::flags_t':'int'
| `-AlwaysInlineAttr 0x563645210dc0 <col:49> always_inline
|-CXXConstructorDecl 0x563645210eb8 <line:303:7> col:7 implicit constexpr SpinlockIRQ 'void (const SpinlockIRQ &)' inline default trivial noexcept-unevaluated 0x563645210eb8
| `-ParmVarDecl 0x563645210fc8 <col:7> col:7 'const SpinlockIRQ &'
|-CXXConstructorDecl 0x563645211068 <col:7> col:7 implicit constexpr SpinlockIRQ 'void (SpinlockIRQ &&)' inline default trivial noexcept-unevaluated 0x563645211068
| `-ParmVarDecl 0x563645211178 <col:7> col:7 'SpinlockIRQ &&'
|-CXXDestructorDecl 0x563645356a10 <col:7> col:7 implicit ~SpinlockIRQ 'void ()' inline default trivial noexcept-unevaluated 0x563645356a10
|-CXXMethodDecl 0x5636453574d8 <col:7> col:7 implicit operator= 'SpinlockIRQ &(const SpinlockIRQ &)' inline default trivial noexcept-unevaluated 0x5636453574d8
| `-ParmVarDecl 0x5636453575e8 <col:7> col:7 'const SpinlockIRQ &'
`-CXXMethodDecl 0x563645357658 <col:7> col:7 implicit operator= 'SpinlockIRQ &(SpinlockIRQ &&)' inline default trivial noexcept-unevaluated 0x563645357658
  `-ParmVarDecl 0x563645357768 <col:7> col:7 'SpinlockIRQ &&'

Layout: <CGRecordLayout
  LLVMType:%class.SpinlockIRQ = type { i8 }
  NonVirtualBaseLLVMType:%class.SpinlockIRQ.base = type {}
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563645352870 prev 0x56364533db00 <../dummy_inc/click/routerthread.hh:28:1, line:248:1> line:28:7 referenced class RouterThread definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-CXXRecordDecl 0x563645352968 <col:1, col:7> col:7 implicit referenced class RouterThread
|-AccessSpecDecl 0x5636453529f8 <col:22, col:28> col:22 public
|-EnumDecl 0x563645352a20 <line:30:5, col:58> col:5
| |-EnumConstantDecl 0x563645352b38 <col:12, col:32> col:12 THREAD_QUIESCENT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:30:5)'
| | `-ConstantExpr 0x563645352b18 <col:31, col:32> 'int' Int: -1
| |   `-UnaryOperator 0x563645352b00 <col:31, col:32> 'int' prefix '-'
| |     `-IntegerLiteral 0x563645352ae0 <col:32> 'int' 1
| `-EnumConstantDecl 0x563645352be0 <col:35, col:53> col:35 THREAD_UNKNOWN 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:30:5)'
|   `-ConstantExpr 0x563645352bc0 <col:52, col:53> 'int' Int: -1000
|     `-UnaryOperator 0x563645352ba8 <col:52, col:53> 'int' prefix '-'
|       `-IntegerLiteral 0x563645352b88 <col:53> 'int' 1000
|-CXXMethodDecl 0x563645352c80 <line:32:5, col:28> col:16 thread_id 'int () const' inline
|-CXXMethodDecl 0x563645352d40 <line:34:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x563645352e28 <line:35:5, col:52> col:22 timer_set 'TimerSet &()' inline
| `-CompoundStmt 0x563645357828 <col:34, col:52>
|   `-ReturnStmt 0x563645357818 <col:36, col:43>
|     `-MemberExpr 0x5636453577e8 <col:43> 'TimerSet' lvalue ->_timers 0x563645354af8
|       `-CXXThisExpr 0x5636453577d8 <col:43> 'RouterThread *' implicit this
|-CXXMethodDecl 0x563645352f18 <line:36:5, col:64> col:28 timer_set 'const TimerSet &() const' inline
| `-CompoundStmt 0x563645357890 <col:46, col:64>
|   `-ReturnStmt 0x563645357880 <col:48, col:55>
|     `-MemberExpr 0x563645357850 <col:55> 'const TimerSet' lvalue ->_timers 0x563645354af8
|       `-CXXThisExpr 0x563645357840 <col:55> 'const RouterThread *' implicit this
|-CXXMethodDecl 0x563645353008 <line:38:5, col:55> col:23 select_set 'SelectSet &()' inline
| `-CompoundStmt 0x5636453578f8 <col:36, col:55>
|   `-ReturnStmt 0x5636453578e8 <col:38, col:45>
|     `-MemberExpr 0x5636453578b8 <col:45> 'SelectSet' lvalue ->_selects 0x563645354b58
|       `-CXXThisExpr 0x5636453578a8 <col:45> 'RouterThread *' implicit this
|-CXXMethodDecl 0x5636453530f8 <line:39:5, col:67> col:29 select_set 'const SelectSet &() const' inline
| `-CompoundStmt 0x563645357960 <col:48, col:67>
|   `-ReturnStmt 0x563645357950 <col:50, col:57>
|     `-MemberExpr 0x563645357920 <col:57> 'const SelectSet' lvalue ->_selects 0x563645354b58
|       `-CXXThisExpr 0x563645357910 <col:57> 'const RouterThread *' implicit this
|-CXXMethodDecl 0x5636453531b8 <line:43:5, col:26> col:17 active 'bool () const' inline
|-CXXMethodDecl 0x5636453532a8 <line:44:5, col:31> col:18 task_begin 'Task *() const' inline
|-CXXMethodDecl 0x563645353418 <line:45:5, col:40> col:18 task_next 'Task *(Task *) const' inline
| `-ParmVarDecl 0x563645353358 <col:28, col:34> col:34 task 'Task *'
|-CXXMethodDecl 0x5636453534e0 <line:46:5, col:29> col:18 task_end 'Task *() const' inline
|-CXXMethodDecl 0x563645353928 <line:47:5, col:59> col:10 scheduled_tasks 'void (Router *, Vector<Task *> &)'
| |-ParmVarDecl 0x563645353590 <col:26, col:34> col:34 router 'Router *'
| `-ParmVarDecl 0x563645353810 <col:42, col:58> col:58 x 'Vector<Task *> &'
|-CXXMethodDecl 0x5636453539f8 <line:49:5, col:28> col:17 lock_tasks 'void ()' inline
|-CXXMethodDecl 0x563645353ab8 <line:50:5, col:30> col:17 unlock_tasks 'void ()' inline
|-CXXMethodDecl 0x563645353b78 <line:52:5, col:38> col:17 schedule_block_tasks 'void ()' inline
|-CXXMethodDecl 0x563645353cb8 <line:53:5, col:43> col:17 used block_tasks 'void (bool)' inline
| `-ParmVarDecl 0x563645353c28 <col:29, col:34> col:34 scheduled 'bool'
|-CXXMethodDecl 0x563645353d80 <line:54:5, col:31> col:17 used unblock_tasks 'void ()' inline
|-CXXMethodDecl 0x563645353e40 <line:56:5, col:29> col:17 stop_flag 'bool () const' inline
|-CXXMethodDecl 0x563645353f00 <line:58:5, col:35> col:17 mark_driver_entry 'void ()' inline
|-CXXMethodDecl 0x563645353fc0 <line:59:5, col:17> col:10 driver 'void ()'
|-CXXMethodDecl 0x563645354100 <line:61:5, col:36> col:10 kill_router 'void (Router *)'
| `-ParmVarDecl 0x563645354070 <col:22, col:30> col:30 router 'Router *'
|-CXXMethodDecl 0x5636453541c8 <line:77:5, col:22> col:17 used wake 'void ()' inline
|-CXXMethodDecl 0x563645354288 <line:80:5, col:29> col:17 run_signals 'void ()' inline
|-EnumDecl 0x563645354328 <line:83:5, line:86:20> line:83:5
| |-EnumConstantDecl 0x5636453543f0 <col:12> col:12 referenced S_PAUSED 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x563645354440 <col:22> col:22 referenced S_BLOCKED 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x563645354490 <col:33> col:33 referenced S_TIMERWAIT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5636453544e0 <line:84:12> col:12 S_LOCKSELECT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x563645354530 <col:26> col:26 S_LOCKTASKS 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x563645354580 <line:85:12> col:12 S_RUNTASK 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5636453545d0 <col:23> col:23 S_RUNTIMER 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x563645354620 <col:35> col:35 S_RUNSIGNAL 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x563645354670 <col:48> col:48 S_RUNPENDING 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5636453546c0 <col:62> col:62 S_RUNSELECT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| `-EnumConstantDecl 0x563645354710 <line:86:12> col:12 NSTATES 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
|-CXXMethodDecl 0x563645354808 <line:87:5, col:43> col:17 used set_thread_state 'void (int)' inline
| `-ParmVarDecl 0x563645354778 <col:34, col:38> col:38 state 'int'
|-CXXMethodDecl 0x563645354958 <line:88:5, col:61> col:17 set_thread_state_for_blocking 'void (int)' inline
| `-ParmVarDecl 0x5636453548c8 <col:47, col:51> col:51 delay_type 'int'
|-AccessSpecDecl 0x563645354a00 <line:104:3, col:10> col:3 private
|-FieldDecl 0x563645354a38 <line:119:5, col:14> col:14 referenced _task_link 'TaskLink'
|-FieldDecl 0x563645354a98 <line:120:5, col:19> col:19 referenced _stop_flag 'volatile bool'
|-FieldDecl 0x563645354af8 <line:125:5, col:14> col:14 referenced _timers 'TimerSet'
|-FieldDecl 0x563645354b58 <line:127:5, col:15> col:15 referenced _selects 'SelectSet'
|-FieldDecl 0x563645354bd8 <line:148:5, col:14> col:14 referenced _task_lock 'Spinlock'
| `-AlignedAttr 0x563645354c48 <col:40, col:50> aligned
|   `-ConstantExpr 0x563645354c28 <col:48> 'int' Int: 64
|     `-IntegerLiteral 0x563645354ba8 <col:48> 'int' 64
|-FieldDecl 0x563645354cb8 <line:149:5, col:21> col:21 referenced _task_blocker 'atomic_uint32_t'
|-FieldDecl 0x563645354d18 <line:150:5, col:21> col:21 referenced _task_blocker_waiting 'atomic_uint32_t'
|-FieldDecl 0x563645354e10 <line:152:5, col:19> col:19 referenced _pending_head 'Task::Pending':'Task::Pending'
|-FieldDecl 0x563645354f20 <line:153:5, col:20> col:20 _pending_tail 'Task::Pending *'
|-FieldDecl 0x563645354f80 <line:154:5, col:17> col:17 _pending_lock 'SpinlockIRQ'
|-FieldDecl 0x563645355000 <line:157:5, col:13> col:13 referenced _master 'Master *'
| `-AlignedAttr 0x563645355070 <col:36, col:46> aligned
|   `-ConstantExpr 0x563645355050 <col:44> 'int' Int: 64
|     `-IntegerLiteral 0x563645354fd0 <col:44> 'int' 64
|-FieldDecl 0x5636453550e8 <line:158:5, col:9> col:9 referenced _id 'int'
|-FieldDecl 0x563645355148 <line:159:5, col:10> col:10 referenced _driver_entered 'bool'
|-AccessSpecDecl 0x563645355198 <line:170:3, col:9> col:3 public
|-FieldDecl 0x5636453551d8 <line:171:5, col:14> col:14 _tasks_per_iter 'unsigned int'
|-FieldDecl 0x563645355240 <line:172:5, col:14> col:14 _iters_per_os 'unsigned int'
|-AccessSpecDecl 0x563645355290 <line:173:3, col:10> col:3 private
|-CXXConstructorDecl 0x563645355438 <line:205:5, col:46> col:5 RouterThread 'void (Master *, int)'
| |-ParmVarDecl 0x5636453552c8 <col:18, col:26> col:26 master 'Master *'
| `-ParmVarDecl 0x563645355348 <col:34, col:38> col:38 threadno 'int'
|-CXXDestructorDecl 0x563645355538 <line:206:5, col:19> col:5 ~RouterThread 'void ()' noexcept-unevaluated 0x563645355538
|-CXXMethodDecl 0x563645355640 <line:209:5, col:29> col:17 add_pending 'void ()' inline
|-CXXMethodDecl 0x563645355708 <line:211:5, line:217:5> line:211:21 pass 'unsigned int () const' inline
| `-CompoundStmt 0x563645357a58 <col:34, line:217:5>
|   `-ReturnStmt 0x563645357a48 <line:215:9, col:34>
|     `-ImplicitCastExpr 0x563645357a30 <col:16, col:34> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x563645357a00 <col:16, col:34> 'unsigned int' lvalue ->_pass 0x5636452eab70
|         `-ImplicitCastExpr 0x5636453579e8 <col:16, col:27> 'TaskLink *' <LValueToRValue>
|           `-MemberExpr 0x5636453579b8 <col:16, col:27> 'TaskLink *const' lvalue ._next 0x5636452eab08
|             `-MemberExpr 0x563645357988 <col:16> 'const TaskLink' lvalue ->_task_link 0x563645354a38
|               `-CXXThisExpr 0x563645357978 <col:16> 'const RouterThread *' implicit this
|-CXXMethodDecl 0x5636453557c8 <line:221:5, col:28> col:10 driver_lock_tasks 'void ()'
|-CXXMethodDecl 0x563645355888 <line:222:5, line:226:5> line:222:17 driver_unlock_tasks 'void ()' inline
| `-CompoundStmt 0x563645358180 <col:39, line:226:5>
|   |-DeclStmt 0x563645357ca8 <line:223:9, col:68>
|   | `-VarDecl 0x563645357a80 <col:9, col:67> col:18 used val 'uint32_t':'unsigned int' cinit
|   |   `-CXXMemberCallExpr 0x563645357c60 <col:24, col:67> 'uint32_t':'unsigned int'
|   |     |-MemberExpr 0x563645357c30 <col:24, col:38> '<bound member function type>' .compare_swap 0x563644fb8e20
|   |     | `-MemberExpr 0x563645357af8 <col:24> 'atomic_uint32_t' lvalue ->_task_blocker 0x563645354cb8
|   |     |   `-CXXThisExpr 0x563645357ae8 <col:24> 'RouterThread *' implicit this
|   |     |-CStyleCastExpr 0x563645357be8 <col:51, col:63> 'uint32_t':'unsigned int' <NoOp>
|   |     | `-ImplicitCastExpr 0x563645357bd0 <col:62, col:63> 'uint32_t':'unsigned int' <IntegralCast> part_of_explicit_cast
|   |     |   `-UnaryOperator 0x563645357ba8 <col:62, col:63> 'int' prefix '-'
|   |     |     `-IntegerLiteral 0x563645357b88 <col:63> 'int' 1
|   |     `-ImplicitCastExpr 0x563645357c90 <col:66> 'uint32_t':'unsigned int' <IntegralCast>
|   |       `-IntegerLiteral 0x563645357c10 <col:66> 'int' 0
|   |-CStyleCastExpr 0x563645357cf0 <line:224:9, col:16> 'void' <ToVoid>
|   | `-DeclRefExpr 0x563645357cc0 <col:16> 'uint32_t':'unsigned int' lvalue Var 0x563645357a80 'val' 'uint32_t':'unsigned int'
|   `-ParenExpr 0x563645358160 <line:225:9, col:181> 'void'
|     `-ConditionalOperator 0x563645358130 <col:10, col:180> 'void'
|       |-CXXStaticCastExpr 0x563645357e08 <col:10, col:50> 'bool' static_cast<_Bool> <NoOp>
|       | `-BinaryOperator 0x563645357dd8 <col:30, col:49> 'bool' '=='
|       |   |-ImplicitCastExpr 0x563645357dc0 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x563645357d18 <col:30> 'uint32_t':'unsigned int' lvalue Var 0x563645357a80 'val' 'uint32_t':'unsigned int'
|       |   `-CStyleCastExpr 0x563645357d98 <col:37, col:49> 'uint32_t':'unsigned int' <NoOp>
|       |     `-ImplicitCastExpr 0x563645357d80 <col:48, col:49> 'uint32_t':'unsigned int' <IntegralCast> part_of_explicit_cast
|       |       `-UnaryOperator 0x563645357d58 <col:48, col:49> 'int' prefix '-'
|       |         `-IntegerLiteral 0x563645357d38 <col:49> 'int' 1
|       |-CXXFunctionalCastExpr 0x563645357e68 <col:54, col:61> 'void' functional cast to void <ToVoid>
|       | `-IntegerLiteral 0x563645357e48 <col:60> 'int' 0
|       `-CallExpr 0x563645358090 <col:65, col:180> 'void'
|         |-ImplicitCastExpr 0x563645358078 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x563645358058 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563644d2da00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|         |-ImplicitCastExpr 0x5636453580d0 <col:80> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x563645357f58 <col:80> 'const char [21]' lvalue "val == (uint32_t) -1"
|         |-ImplicitCastExpr 0x5636453580e8 <col:104> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x563645357f88 <col:104> 'const char [35]' lvalue "../dummy_inc/click/routerthread.hh"
|         |-ImplicitCastExpr 0x563645358100 <col:142> 'unsigned int' <IntegralCast>
|         | `-IntegerLiteral 0x563645357fc8 <col:142> 'int' 225
|         `-ImplicitCastExpr 0x563645358118 <col:147, col:161> 'const char *' <ArrayToPointerDecay>
|           `-UnaryOperator 0x563645358040 <col:147, col:161> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|             `-PredefinedExpr 0x563645358028 <col:161> 'const char [41]' lvalue __PRETTY_FUNCTION__
|               `-StringLiteral 0x563645357fe8 <col:161> 'const char [41]' lvalue "void RouterThread::driver_unlock_tasks()"
|-CXXMethodDecl 0x5636453559d0 <line:228:5, col:37> col:17 run_tasks 'void (int)' inline
| `-ParmVarDecl 0x563645355940 <col:27, col:31> col:31 ntasks 'int'
|-CXXMethodDecl 0x563645355a98 <line:229:5, col:33> col:17 process_pending 'void ()' inline
|-CXXMethodDecl 0x563645355b58 <line:230:5, col:24> col:17 run_os 'void ()' inline
|-CXXMethodDecl 0x563645355c18 <line:238:5, col:45> col:24 used running_in_interrupt 'bool ()' static inline
|-CXXMethodDecl 0x563645355cd8 <line:239:5, col:45> col:17 used current_thread_is_running 'bool () const' inline
|-CXXMethodDecl 0x563645355d98 <line:240:5, col:53> col:17 current_thread_is_running_cleanup 'bool () const' inline
|-FriendDecl 0x563645355e90 <line:242:5, col:18> col:12 'class Task':'Task'
|-FriendDecl 0x563645355ef0 <line:243:5, col:18> col:12 'class Master':'Master'
|-FriendDecl 0x563645355f80 <line:245:5, col:18> col:12 'class SelectSet':'SelectSet'
|-CXXConstructorDecl 0x563645356348 <line:28:7> col:7 implicit RouterThread 'void (const RouterThread &)' inline default noexcept-unevaluated 0x563645356348
| `-ParmVarDecl 0x563645356458 <col:7> col:7 'const RouterThread &'
`-CXXMethodDecl 0x563645356b18 <col:7> col:7 implicit operator= 'RouterThread &(const RouterThread &)' inline default noexcept-unevaluated 0x563645356b18
  `-ParmVarDecl 0x563645356c28 <col:7> col:7 'const RouterThread &'

Layout: <CGRecordLayout
  LLVMType:%class.RouterThread = type { %struct.TaskLink, i8, [7 x i8], %class.TimerSet, %class.SelectSet, [32 x i8], %class.Spinlock, %class.atomic_uint32_t, %class.atomic_uint32_t, %"union.Task::Pending", %"union.Task::Pending"*, %class.SpinlockIRQ, [31 x i8], %class.Master*, i32, i8, i32, i32, [40 x i8] }
  NonVirtualBaseLLVMType:%class.RouterThread.base = type { %struct.TaskLink, i8, [7 x i8], %class.TimerSet, %class.SelectSet, [32 x i8], %class.Spinlock, %class.atomic_uint32_t, %class.atomic_uint32_t, %"union.Task::Pending", %"union.Task::Pending"*, %class.SpinlockIRQ, [31 x i8], %class.Master*, i32, i8, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563645212ef8 prev 0x5636451f6350 <../dummy_inc/click/timer.hh:14:1, line:358:1> line:14:7 referenced class Timer definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x563645212ff0 <col:1, col:7> col:7 implicit referenced class Timer
|-AccessSpecDecl 0x563645213080 <col:15, col:21> col:15 public
|-CXXConstructorDecl 0x5636452130e0 <line:22:5, col:11> col:5 Timer 'void ()'
|-CXXRecordDecl 0x563645213188 <line:24:5, line:25:5> line:24:12 referenced struct do_nothing_t definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5636452132a8 <col:5, col:12> col:12 implicit struct do_nothing_t
| |-CXXConstructorDecl 0x5636453d7dc0 <col:12> col:12 implicit constexpr do_nothing_t 'void ()' inline default trivial noexcept-unevaluated 0x5636453d7dc0
| |-CXXConstructorDecl 0x5636453d7ea0 <col:12> col:12 implicit constexpr do_nothing_t 'void (const Timer::do_nothing_t &)' inline default trivial noexcept-unevaluated 0x5636453d7ea0
| | `-ParmVarDecl 0x5636453d7f88 <col:12> col:12 'const Timer::do_nothing_t &'
| `-CXXConstructorDecl 0x5636453d8028 <col:12> col:12 implicit constexpr do_nothing_t 'void (Timer::do_nothing_t &&)' inline default trivial noexcept-unevaluated 0x5636453d8028
|   `-ParmVarDecl 0x5636453d8138 <col:12> col:12 'Timer::do_nothing_t &&'
|-CXXConstructorDecl 0x563645213448 <line:32:5, col:37> col:5 Timer 'void (const Timer::do_nothing_t &)'
| `-ParmVarDecl 0x563645213388 <col:11, col:31> col:31 unused 'const Timer::do_nothing_t &'
|-CXXConstructorDecl 0x563645213698 <line:38:5, col:43> col:5 Timer 'void (TimerCallback, void *)'
| |-ParmVarDecl 0x563645213508 <col:11, col:25> col:25 f 'TimerCallback':'void (*)(Timer *, void *)'
| `-ParmVarDecl 0x563645213588 <col:28, col:34> col:34 user_data 'void *'
|-CXXConstructorDecl 0x563645213828 <line:43:5, col:27> col:5 used Timer 'void (Element *)'
| `-ParmVarDecl 0x563645213760 <col:11, col:20> col:20 element 'Element *'
|-CXXConstructorDecl 0x5636452139a8 <line:47:5, col:21> col:5 Timer 'void (Task *)'
| `-ParmVarDecl 0x5636452138e8 <col:11, col:17> col:17 task 'Task *'
|-CXXConstructorDecl 0x563645213b58 <line:52:5, col:25> col:5 Timer 'void (const Timer &)'
| `-ParmVarDecl 0x563645213a98 <col:11, col:24> col:24 x 'const Timer &'
|-CXXDestructorDecl 0x563645213c50 <line:55:5, line:58:5> line:55:12 used ~Timer 'void () noexcept' inline
| `-CompoundStmt 0x563645174f70 <col:21, line:58:5>
|   `-IfStmt 0x563645174f58 <line:56:2, line:57:17>
|     |-CXXMemberCallExpr 0x563645174ec0 <line:56:6, col:16> 'bool'
|     | `-MemberExpr 0x563645174e90 <col:6> '<bound member function type>' ->scheduled 0x5636452144a8
|     |   `-ImplicitCastExpr 0x563645174ee0 <col:6> 'const Timer *' <NoOp>
|     |     `-CXXThisExpr 0x563645174e80 <col:6> 'Timer *' implicit this
|     `-CXXMemberCallExpr 0x563645174f38 <line:57:6, col:17> 'void'
|       `-MemberExpr 0x563645174f08 <col:6> '<bound member function type>' ->unschedule 0x563645173620
|         `-CXXThisExpr 0x563645174ef8 <col:6> 'Timer *' implicit this
|-CXXMethodDecl 0x563645213d50 <line:62:5, line:65:5> line:62:17 used assign 'void ()' inline
| `-CompoundStmt 0x563645175110 <col:26, line:65:5>
|   |-BinaryOperator 0x563645175030 <line:63:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x563645174fc8 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5636451742a8
|   | | `-MemberExpr 0x563645174f98 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x563645174368
|   | |   `-CXXThisExpr 0x563645174f88 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x563645175018 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x563645174ff8 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5636451747c8 'do_nothing_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5636451750f0 <line:64:2, col:20> 'void *' lvalue '='
|     |-MemberExpr 0x563645175060 <col:2> 'void *' lvalue ->_thunk 0x5636451743e8
|     | `-CXXThisExpr 0x563645175050 <col:2> 'Timer *' implicit this
|     `-CStyleCastExpr 0x5636451750c8 <col:11, col:20> 'void *' <IntegralToPointer>
|       `-IntegerLiteral 0x563645175090 <col:20> 'int' 1
|-CXXMethodDecl 0x563645213e90 <line:68:5, line:71:5> line:68:17 assign 'void (const Timer::do_nothing_t &)' inline
| |-ParmVarDecl 0x563645213e00 <col:24, col:44> col:44 used unused 'const Timer::do_nothing_t &'
| `-CompoundStmt 0x563645175270 <col:52, line:71:5>
|   |-CStyleCastExpr 0x563645175160 <line:69:2, col:9> 'void' <ToVoid>
|   | `-DeclRefExpr 0x563645175130 <col:9> 'const Timer::do_nothing_t' lvalue ParmVar 0x563645213e00 'unused' 'const Timer::do_nothing_t &'
|   `-CXXMemberCallExpr 0x563645175250 <line:70:2, col:9> 'void'
|     `-MemberExpr 0x563645175220 <col:2> '<bound member function type>' ->assign 0x563645213d50
|       `-CXXThisExpr 0x563645175210 <col:2> 'Timer *' implicit this
|-CXXMethodDecl 0x563645214060 <line:76:5, line:79:5> line:76:17 assign 'void (TimerCallback, void *)' inline
| |-ParmVarDecl 0x563645213f48 <col:24, col:38> col:38 used f 'TimerCallback':'void (*)(Timer *, void *)'
| |-ParmVarDecl 0x563645213fc8 <col:41, col:47> col:47 used user_data 'void *'
| `-CompoundStmt 0x5636451753f0 <col:58, line:79:5>
|   |-BinaryOperator 0x563645175338 <line:77:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5636451752d0 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5636451742a8
|   | | `-MemberExpr 0x5636451752a0 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x563645174368
|   | |   `-CXXThisExpr 0x563645175290 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x563645175320 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' <LValueToRValue>
|   |   `-DeclRefExpr 0x563645175300 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue ParmVar 0x563645213f48 'f' 'TimerCallback':'void (*)(Timer *, void *)'
|   `-BinaryOperator 0x5636451753d0 <line:78:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x563645175368 <col:2> 'void *' lvalue ->_thunk 0x5636451743e8
|     | `-CXXThisExpr 0x563645175358 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5636451753b8 <col:11> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x563645175398 <col:11> 'void *' lvalue ParmVar 0x563645213fc8 'user_data' 'void *'
|-CXXMethodDecl 0x5636452141b0 <line:84:5, line:87:5> line:84:10 assign 'void (Element *)'
| |-ParmVarDecl 0x563645214120 <col:17, col:26> col:26 used element 'Element *'
| `-CompoundStmt 0x563645175588 <col:35, line:87:5>
|   |-BinaryOperator 0x5636451754b8 <line:85:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x563645175450 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5636451742a8
|   | | `-MemberExpr 0x563645175420 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x563645174368
|   | |   `-CXXThisExpr 0x563645175410 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5636451754a0 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x563645175480 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5636451749a0 'element_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x563645175568 <line:86:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5636451754e8 <col:2> 'void *' lvalue ->_thunk 0x5636451743e8
|     | `-CXXThisExpr 0x5636451754d8 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x563645175550 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x563645175538 <col:11> 'Element *' <LValueToRValue>
|         `-DeclRefExpr 0x563645175518 <col:11> 'Element *' lvalue ParmVar 0x563645214120 'element' 'Element *'
|-CXXMethodDecl 0x5636452142f8 <line:91:5, line:94:5> line:91:10 assign 'void (Task *)'
| |-ParmVarDecl 0x563645214268 <col:17, col:23> col:23 used task 'Task *'
| `-CompoundStmt 0x563645175720 <col:29, line:94:5>
|   |-BinaryOperator 0x563645175650 <line:92:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5636451755e8 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5636451742a8
|   | | `-MemberExpr 0x5636451755b8 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x563645174368
|   | |   `-CXXThisExpr 0x5636451755a8 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x563645175638 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x563645175618 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x563645174b78 'task_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x563645175700 <line:93:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x563645175680 <col:2> 'void *' lvalue ->_thunk 0x5636451743e8
|     | `-CXXThisExpr 0x563645175670 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5636451756e8 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x5636451756d0 <col:11> 'Task *' <LValueToRValue>
|         `-DeclRefExpr 0x5636451756b0 <col:11> 'Task *' lvalue ParmVar 0x563645214268 'task' 'Task *'
|-CXXMethodDecl 0x5636452143e8 <line:98:5, line:100:5> line:98:17 initialized 'bool () const' inline
| `-CompoundStmt 0x563645175800 <col:37, line:100:5>
|   `-ReturnStmt 0x5636451757f0 <line:99:2, col:19>
|     `-BinaryOperator 0x5636451757d0 <col:9, col:19> 'bool' '!='
|       |-ImplicitCastExpr 0x5636451757a0 <col:9> 'Element *' <LValueToRValue>
|       | `-MemberExpr 0x563645175750 <col:9> 'Element *const' lvalue ->_owner 0x563645174448
|       |   `-CXXThisExpr 0x563645175740 <col:9> 'const Timer *' implicit this
|       `-ImplicitCastExpr 0x5636451757b8 <col:19> 'Element *' <NullToPointer>
|         `-IntegerLiteral 0x563645175780 <col:19> 'int' 0
|-CXXMethodDecl 0x5636452144a8 <line:103:5, line:105:5> line:103:17 used scheduled 'bool () const' inline
| `-CompoundStmt 0x5636451758c0 <col:35, line:105:5>
|   `-ReturnStmt 0x5636451758b0 <line:104:2, col:23>
|     `-BinaryOperator 0x563645175890 <col:9, col:23> 'bool' '!='
|       |-ImplicitCastExpr 0x563645175878 <col:9> 'int' <LValueToRValue>
|       | `-MemberExpr 0x563645175828 <col:9> 'const int' lvalue ->_schedpos1 0x5636451740c8
|       |   `-CXXThisExpr 0x563645175818 <col:9> 'const Timer *' implicit this
|       `-IntegerLiteral 0x563645175858 <col:23> 'int' 0
|-CXXMethodDecl 0x563645214568 <line:116:5, line:118:5> line:116:29 used expiry_steady 'const Timestamp &() const' inline
| `-CompoundStmt 0x563645175928 <col:51, line:118:5>
|   `-ReturnStmt 0x563645175918 <line:117:2, col:9>
|     `-MemberExpr 0x5636451758e8 <col:9> 'const Timestamp' lvalue ->_expiry_s 0x563645174128
|       `-CXXThisExpr 0x5636451758d8 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x563645214628 <line:131:5, line:136:5> line:131:22 expiry 'Timestamp () const' inline
| `-CompoundStmt 0x563645175e80 <col:37, line:136:5>
|   `-IfStmt 0x563645175e58 <line:132:2, line:135:13> has_else
|     |-ImplicitCastExpr 0x5636451759e8 <line:132:6> 'bool' <MemberPointerToBoolean>
|     | `-ImplicitCastExpr 0x5636451759d0 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const' <UserDefinedConversion>
|     |   `-CXXMemberCallExpr 0x5636451759b0 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const'
|     |     `-MemberExpr 0x563645175980 <col:6> '<bound member function type>' .operator int (Timestamp::*)() const 0x563645185498
|     |       `-MemberExpr 0x563645175950 <col:6> 'const Timestamp' lvalue ->_expiry_s 0x563645174128
|     |         `-CXXThisExpr 0x563645175940 <col:6> 'const Timer *' implicit this
|     |-ReturnStmt 0x563645175dc8 <line:133:6, col:72>
|     | `-ExprWithCleanups 0x563645175db0 <col:13, col:72> 'Timestamp'
|     |   `-CXXConstructExpr 0x563645175d80 <col:13, col:72> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |     `-MaterializeTemporaryExpr 0x563645175d68 <col:13, col:72> 'Timestamp' xvalue
|     |       `-CXXOperatorCallExpr 0x563645175d30 <col:13, col:72> 'Timestamp'
|     |         |-ImplicitCastExpr 0x563645175d18 <col:45> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         | `-DeclRefExpr 0x563645175cf8 <col:45> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5636451b3c70 'operator-' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |-CXXConstructExpr 0x563645175c98 <col:13, col:43> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |         | `-MaterializeTemporaryExpr 0x563645175c80 <col:13, col:43> 'Timestamp' xvalue
|     |         |   `-CXXOperatorCallExpr 0x563645175ba8 <col:13, col:43> 'Timestamp'
|     |         |     |-ImplicitCastExpr 0x563645175b90 <col:23> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         |     | `-DeclRefExpr 0x563645175b70 <col:23> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5636451b3930 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |     |-CXXConstructExpr 0x563645175b10 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|     |         |     | `-MemberExpr 0x563645175a10 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x563645174128
|     |         |     |   `-CXXThisExpr 0x563645175a00 <col:13> 'const Timer *' implicit this
|     |         |     `-MaterializeTemporaryExpr 0x563645175b58 <col:25, col:43> 'const Timestamp' lvalue
|     |         |       `-ImplicitCastExpr 0x563645175b40 <col:25, col:43> 'const Timestamp' <NoOp>
|     |         |         `-CallExpr 0x563645175af0 <col:25, col:43> 'Timestamp'
|     |         |           `-ImplicitCastExpr 0x563645175ad8 <col:25, col:36> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |         |             `-DeclRefExpr 0x563645175a78 <col:25, col:36> 'Timestamp ()' lvalue CXXMethod 0x5636451a6f90 'recent' 'Timestamp ()'
|     |         `-MaterializeTemporaryExpr 0x563645175ce0 <col:47, col:72> 'const Timestamp' lvalue
|     |           `-ImplicitCastExpr 0x563645175cc8 <col:47, col:72> 'const Timestamp' <NoOp>
|     |             `-CallExpr 0x563645175c60 <col:47, col:72> 'Timestamp'
|     |               `-ImplicitCastExpr 0x563645175c48 <col:47, col:58> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |                 `-DeclRefExpr 0x563645175c18 <col:47, col:58> 'Timestamp ()' lvalue CXXMethod 0x563645002290 'recent_steady' 'Timestamp ()'
|     `-ReturnStmt 0x563645175e48 <line:135:6, col:13>
|       `-CXXConstructExpr 0x563645175e18 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|         `-MemberExpr 0x563645175de8 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x563645174128
|           `-CXXThisExpr 0x563645175dd8 <col:13> 'const Timer *' implicit this
|-CXXMethodDecl 0x5636452146e8 <line:139:5, line:141:5> line:139:20 router 'Router *() const' inline
| `-CompoundStmt 0x563645175f68 <col:35, line:141:5>
|   `-ReturnStmt 0x563645175f58 <line:140:2, col:24>
|     `-CXXMemberCallExpr 0x563645175f20 <col:9, col:24> 'Router *'
|       `-MemberExpr 0x563645175ef0 <col:9, col:17> '<bound member function type>' ->router 0x563645207aa0
|         `-ImplicitCastExpr 0x563645175f40 <col:9> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x563645175ed8 <col:9> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x563645175ea8 <col:9> 'Element *const' lvalue ->_owner 0x563645174448
|               `-CXXThisExpr 0x563645175e98 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5636452147a8 <line:144:5, line:146:5> line:144:21 element 'Element *() const' inline
| `-CompoundStmt 0x563645175fe8 <col:37, line:146:5>
|   `-ReturnStmt 0x563645175fd8 <line:145:2, col:9>
|     `-ImplicitCastExpr 0x563645175fc0 <col:9> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x563645175f90 <col:9> 'Element *const' lvalue ->_owner 0x563645174448
|         `-CXXThisExpr 0x563645175f80 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x563645214868 <line:149:5, line:151:5> line:149:26 thread 'RouterThread *() const' inline
| `-CompoundStmt 0x563645176068 <col:41, line:151:5>
|   `-ReturnStmt 0x563645176058 <line:150:2, col:9>
|     `-ImplicitCastExpr 0x563645176040 <col:9> 'RouterThread *' <LValueToRValue>
|       `-MemberExpr 0x563645176010 <col:9> 'RouterThread *const' lvalue ->_thread 0x5636451744a8
|         `-CXXThisExpr 0x563645176000 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x563645214930 <line:154:5, col:26> col:9 home_thread_id 'int () const'
|-CXXMethodDecl 0x563645214b28 <line:171:5, col:55> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x5636452149e0 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x563645214a58 <col:37, col:50> col:42 quiet 'bool' cinit
|   `-CXXBoolLiteralExpr 0x563645174d88 <col:50> 'bool' false
|-CXXMethodDecl 0x563645214ca8 <line:181:5, col:35> col:10 initialize 'void (Router *)'
| `-ParmVarDecl 0x563645214be8 <col:21, col:29> col:29 router 'Router *'
|-CXXMethodDecl 0x563645172910 <line:191:5, col:57> col:10 used schedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x563645214d60 <col:29, col:46> col:46 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x563645172a58 <line:197:5, col:59> col:10 reschedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x5636451729c8 <col:31, col:48> col:48 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x563645172ba0 <line:210:5, col:50> col:17 used schedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x563645172b10 <col:29, col:46> col:46 when 'const Timestamp &'
|-CXXMethodDecl 0x563645172ce8 <line:216:5, col:52> col:17 reschedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x563645172c58 <col:31, col:48> col:48 when 'const Timestamp &'
|-CXXMethodDecl 0x563645172db0 <line:221:5, line:223:5> line:221:17 schedule_now 'void ()' inline
| `-CompoundStmt 0x5636451761d0 <col:32, line:223:5>
|   `-ExprWithCleanups 0x5636451761b8 <line:222:2, col:47> 'void'
|     `-CXXMemberCallExpr 0x563645176160 <col:2, col:47> 'void'
|       |-MemberExpr 0x563645176090 <col:2> '<bound member function type>' ->schedule_at_steady 0x563645172910
|       | `-CXXThisExpr 0x563645176080 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5636451761a0 <col:21, col:46> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x563645176188 <col:21, col:46> 'const Timestamp' <NoOp>
|           `-CallExpr 0x563645176140 <col:21, col:46> 'Timestamp'
|             `-ImplicitCastExpr 0x563645176128 <col:21, col:32> 'Timestamp (*)()' <FunctionToPointerDecay>
|               `-DeclRefExpr 0x5636451760f8 <col:21, col:32> 'Timestamp ()' lvalue CXXMethod 0x563645002290 'recent_steady' 'Timestamp ()'
|-CXXMethodDecl 0x563645172ef0 <line:233:5, col:47> col:10 used schedule_after 'void (const Timestamp &)'
| `-ParmVarDecl 0x563645172e60 <col:25, col:42> col:42 delta 'const Timestamp &'
|-CXXMethodDecl 0x563645173038 <line:239:5, line:241:5> line:239:17 used schedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x563645172fa8 <col:36, col:45> col:45 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x563645176358 <col:56, line:241:5>
|   `-ExprWithCleanups 0x563645176340 <line:240:2, col:40> 'void'
|     `-CXXMemberCallExpr 0x5636451762e8 <col:2, col:40> 'void'
|       |-MemberExpr 0x5636451761f8 <col:2> '<bound member function type>' ->schedule_after 0x563645172ef0
|       | `-CXXThisExpr 0x5636451761e8 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x563645176328 <col:17, col:39> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x563645176310 <col:17, col:39> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x5636451762a8 <col:17, col:39> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-ImplicitCastExpr 0x563645176278 <col:27> 'uint32_t':'unsigned int' <LValueToRValue>
|             | `-DeclRefExpr 0x563645176238 <col:27> 'uint32_t':'unsigned int' lvalue ParmVar 0x563645172fa8 'delta_sec' 'uint32_t':'unsigned int'
|             `-ImplicitCastExpr 0x563645176290 <col:38> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x563645176258 <col:38> 'int' 0
|-CXXMethodDecl 0x563645173180 <line:247:5, line:249:5> line:247:17 used schedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5636451730f0 <col:37, col:46> col:46 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5636451765c8 <col:58, line:249:5>
|   `-ExprWithCleanups 0x5636451765b0 <line:248:2, col:49> 'void'
|     `-CXXMemberCallExpr 0x563645176558 <col:2, col:49> 'void'
|       |-MemberExpr 0x563645176380 <col:2> '<bound member function type>' ->schedule_after 0x563645172ef0
|       | `-CXXThisExpr 0x563645176370 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x563645176598 <col:17, col:48> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x563645176580 <col:17, col:48> 'const Timestamp' <NoOp>
|           `-CallExpr 0x563645176500 <col:17, col:48> 'Timestamp'
|             |-ImplicitCastExpr 0x5636451764e8 <col:17, col:28> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x563645176458 <col:17, col:28> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x563645187288 'make_msec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x563645176540 <col:38> 'Timestamp::value_type':'long' <IntegralCast>
|               `-ImplicitCastExpr 0x563645176528 <col:38> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x563645176438 <col:38> 'uint32_t':'unsigned int' lvalue ParmVar 0x5636451730f0 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636451732c8 <line:259:5, line:261:5> line:259:17 reschedule_after 'void (const Timestamp &)' inline
| |-ParmVarDecl 0x563645173238 <col:34, col:51> col:51 used delta 'const Timestamp &'
| `-CompoundStmt 0x5636451767a8 <col:58, line:261:5>
|   `-ExprWithCleanups 0x563645176790 <line:260:2, col:38> 'void'
|     `-CXXMemberCallExpr 0x563645176738 <col:2, col:38> 'void'
|       |-MemberExpr 0x5636451765f0 <col:2> '<bound member function type>' ->schedule_at_steady 0x563645172910
|       | `-CXXThisExpr 0x5636451765e0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x563645176778 <col:21, col:33> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x563645176760 <col:21, col:33> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x563645176700 <col:21, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x5636451766e8 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5636451766c8 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5636451b3930 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x563645176698 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x563645176680 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x563645176630 <col:21> 'Timestamp' lvalue ->_expiry_s 0x563645174128
|             |     `-CXXThisExpr 0x563645176620 <col:21> 'Timer *' implicit this
|             `-DeclRefExpr 0x563645176660 <col:33> 'const Timestamp' lvalue ParmVar 0x563645173238 'delta' 'const Timestamp &'
|-CXXMethodDecl 0x563645173410 <line:268:5, line:270:5> line:268:17 used reschedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x563645173380 <col:38, col:47> col:47 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x563645176a80 <col:58, line:270:5>
|   `-ExprWithCleanups 0x563645176a68 <line:269:2, col:79> 'void'
|     `-CXXMemberCallExpr 0x563645176a10 <col:2, col:79> 'void'
|       |-MemberExpr 0x5636451767d0 <col:2> '<bound member function type>' ->schedule_at_steady 0x563645172910
|       | `-CXXThisExpr 0x5636451767c0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x563645176a50 <col:21, col:78> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x563645176a38 <col:21, col:78> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x5636451769d0 <col:21, col:78> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-BinaryOperator 0x563645176908 <col:31, col:49> 'unsigned int' '+'
|             | |-ImplicitCastExpr 0x5636451768f0 <col:31, col:45> 'unsigned int' <IntegralCast>
|             | | `-CXXMemberCallExpr 0x563645176880 <col:31, col:45> 'Timestamp::seconds_type':'int'
|             | |   `-MemberExpr 0x563645176850 <col:31, col:41> '<bound member function type>' .sec 0x563645003d88
|             | |     `-ImplicitCastExpr 0x5636451768a0 <col:31> 'const Timestamp' lvalue <NoOp>
|             | |       `-MemberExpr 0x563645176820 <col:31> 'Timestamp' lvalue ->_expiry_s 0x563645174128
|             | |         `-CXXThisExpr 0x563645176810 <col:31> 'Timer *' implicit this
|             | `-ImplicitCastExpr 0x5636451768d8 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|             |   `-DeclRefExpr 0x5636451768b8 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x563645173380 'delta_sec' 'uint32_t':'unsigned int'
|             `-CXXMemberCallExpr 0x563645176998 <col:60, col:77> 'uint32_t':'unsigned int'
|               `-MemberExpr 0x563645176968 <col:60, col:70> '<bound member function type>' .subsec 0x563645004480
|                 `-ImplicitCastExpr 0x5636451769b8 <col:60> 'const Timestamp' lvalue <NoOp>
|                   `-MemberExpr 0x563645176938 <col:60> 'Timestamp' lvalue ->_expiry_s 0x563645174128
|                     `-CXXThisExpr 0x563645176928 <col:60> 'Timer *' implicit this
|-CXXMethodDecl 0x563645173558 <line:277:5, line:279:5> line:277:17 used reschedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5636451734c8 <col:39, col:48> col:48 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x563645176db8 <col:60, line:279:5>
|   `-ExprWithCleanups 0x563645176da0 <line:278:2, col:65> 'void'
|     `-CXXMemberCallExpr 0x563645176d48 <col:2, col:65> 'void'
|       |-MemberExpr 0x563645176aa8 <col:2> '<bound member function type>' ->schedule_at_steady 0x563645172910
|       | `-CXXThisExpr 0x563645176a98 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x563645176d88 <col:21, col:64> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x563645176d70 <col:21, col:64> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x563645176d10 <col:21, col:64> 'Timestamp'
|             |-ImplicitCastExpr 0x563645176cf8 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x563645176cd8 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5636451b3930 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x563645176c78 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x563645176c60 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x563645176ae8 <col:21> 'Timestamp' lvalue ->_expiry_s 0x563645174128
|             |     `-CXXThisExpr 0x563645176ad8 <col:21> 'Timer *' implicit this
|             `-MaterializeTemporaryExpr 0x563645176cc0 <col:33, col:64> 'const Timestamp' lvalue
|               `-ImplicitCastExpr 0x563645176ca8 <col:33, col:64> 'const Timestamp' <NoOp>
|                 `-CallExpr 0x563645176c08 <col:33, col:64> 'Timestamp'
|                   |-ImplicitCastExpr 0x563645176bf0 <col:33, col:44> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|                   | `-DeclRefExpr 0x563645176bc0 <col:33, col:44> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x563645187288 'make_msec' 'Timestamp (Timestamp::value_type)'
|                   `-ImplicitCastExpr 0x563645176c48 <col:54> 'Timestamp::value_type':'long' <IntegralCast>
|                     `-ImplicitCastExpr 0x563645176c30 <col:54> 'uint32_t':'unsigned int' <LValueToRValue>
|                       `-DeclRefExpr 0x563645176ba0 <col:54> 'uint32_t':'unsigned int' lvalue ParmVar 0x5636451734c8 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563645173620 <line:285:5, col:21> col:10 used unschedule 'void ()'
|-CXXMethodDecl 0x5636451736e0 <line:288:5, line:291:5> line:288:17 clear 'void ()' inline
| `-CompoundStmt 0x563645177280 <col:25, line:291:5>
|   |-CXXMemberCallExpr 0x563645176e10 <line:289:2, col:13> 'void'
|   | `-MemberExpr 0x563645176de0 <col:2> '<bound member function type>' ->unschedule 0x563645173620
|   |   `-CXXThisExpr 0x563645176dd0 <col:2> 'Timer *' implicit this
|   `-ExprWithCleanups 0x563645177268 <line:290:2, col:24> 'Timestamp' lvalue
|     `-CXXOperatorCallExpr 0x563645177230 <col:2, col:24> 'Timestamp' lvalue
|       |-ImplicitCastExpr 0x563645177218 <col:12> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563645176ec8 <col:12> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x563644e9b108 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|       |-MemberExpr 0x563645176e40 <col:2> 'Timestamp' lvalue ->_expiry_s 0x563645174128
|       | `-CXXThisExpr 0x563645176e30 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x563645176eb0 <col:14, col:24> 'Timestamp' xvalue
|         `-CXXTemporaryObjectExpr 0x563645176e80 <col:14, col:24> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x5636451737a0 <line:304:5, line:310:5> line:304:29 used adjustment 'Timestamp ()' static inline
| `-CompoundStmt 0x5636451775d8 <col:42, line:310:5>
|   |-IfStmt 0x563645177420 <line:306:2, line:307:23>
|   | |-CallExpr 0x563645177350 <line:306:6, col:30> 'bool'
|   | | `-ImplicitCastExpr 0x563645177338 <col:6, col:17> 'bool (*)()' <FunctionToPointerDecay>
|   | |   `-DeclRefExpr 0x5636451772d8 <col:6, col:17> 'bool ()' lvalue CXXMethod 0x5636451a5400 'warp_jumping' 'bool ()'
|   | `-ReturnStmt 0x563645177410 <line:307:6, col:23>
|   |   `-ExprWithCleanups 0x5636451773f8 <col:13, col:23> 'Timestamp'
|   |     `-CXXConstructExpr 0x5636451773c8 <col:13, col:23> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5636451773b0 <col:13, col:23> 'Timestamp' xvalue
|   |         `-CXXTemporaryObjectExpr 0x563645177380 <col:13, col:23> 'Timestamp' 'void ()'
|   `-ReturnStmt 0x5636451775c8 <line:309:2, col:33>
|     `-ExprWithCleanups 0x5636451775b0 <col:9, col:33> 'Timestamp'
|       `-CXXConstructExpr 0x563645177580 <col:9, col:33> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x563645177568 <col:9, col:33> 'Timestamp' xvalue
|           `-CallExpr 0x563645177528 <col:9, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x563645177510 <col:9, col:20> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5636451774e0 <col:9, col:20> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5636451875a0 'make_usec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x563645177550 <col:30> 'Timestamp::value_type':'long' <IntegralCast>
|               `-IntegerLiteral 0x5636451774c0 <col:30> 'int' 500
|-CXXMethodDecl 0x5636451738e0 <line:317:5, col:80> col:17 schedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x563645173850 <col:34, col:43> col:43 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x563645173988 <col:69> "" ""
|-CXXMethodDecl 0x563645173a98 <line:323:5, col:81> col:17 schedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x563645173a08 <col:35, col:44> col:44 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x563645173b40 <col:70> "" ""
|-CXXMethodDecl 0x563645173c50 <line:329:5, col:82> col:17 reschedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x563645173bc0 <col:36, col:45> col:45 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x563645173cf8 <col:71> "" ""
|-CXXMethodDecl 0x563645173e08 <line:335:5, col:83> col:17 reschedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x563645173d78 <col:37, col:46> col:46 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x563645173eb0 <col:72> "" ""
|-EnumDecl 0x563645173f20 <line:337:5, col:27> col:5
| `-EnumConstantDecl 0x563645174020 <col:12, col:25> col:12 behind_sec 'Timer::(anonymous enum at ../dummy_inc/click/timer.hh:337:5)'
|   `-ImplicitCastExpr 0x563645174070 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563645174000 <col:25> 'int' Int: 1
|       `-IntegerLiteral 0x563645173fe0 <col:25> 'int' 1
|-AccessSpecDecl 0x563645174088 <line:339:3, col:10> col:3 private
|-FieldDecl 0x5636451740c8 <line:341:5, col:9> col:9 referenced _schedpos1 'int'
|-FieldDecl 0x563645174128 <line:342:5, col:15> col:15 referenced _expiry_s 'Timestamp'
|-CXXRecordDecl 0x563645174178 <line:343:5, line:345:5> line:343:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x5636451742a8 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
| `-CXXDestructorDecl 0x563645174d98 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-FieldDecl 0x563645174368 <col:5, line:345:7> col:7 referenced _hook 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)'
|-FieldDecl 0x5636451743e8 <line:346:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x563645174448 <line:347:5, col:14> col:14 referenced _owner 'Element *'
|-FieldDecl 0x5636451744a8 <line:348:5, col:19> col:19 referenced _thread 'RouterThread *'
|-CXXMethodDecl 0x5636451745f8 <line:350:5, col:36> col:12 operator= 'Timer &(const Timer &)'
| `-ParmVarDecl 0x563645174508 <col:22, col:35> col:35 x 'const Timer &'
|-CXXMethodDecl 0x5636451747c8 <line:352:5, col:58> col:17 used do_nothing_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5636451746b0 <col:33, col:40> col:40 t 'Timer *'
| `-ParmVarDecl 0x563645174730 <col:43, col:49> col:49 user_data 'void *'
|-CXXMethodDecl 0x5636451749a0 <line:353:5, col:55> col:17 used element_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x563645174888 <col:30, col:37> col:37 t 'Timer *'
| `-ParmVarDecl 0x563645174908 <col:40, col:46> col:46 user_data 'void *'
|-CXXMethodDecl 0x563645174b78 <line:354:5, col:52> col:17 used task_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x563645174a60 <col:27, col:34> col:34 t 'Timer *'
| `-ParmVarDecl 0x563645174ae0 <col:37, col:43> col:43 user_data 'void *'
`-FriendDecl 0x563645174d48 <line:356:5, col:18> col:12 'class TimerSet':'TimerSet'

Layout: <CGRecordLayout
  LLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon.13, i8*, %class.Element*, %class.RouterThread* }
  NonVirtualBaseLLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon.13, i8*, %class.Element*, %class.RouterThread* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct ICMPPingSource::ReceiverInfo
         0 |   int nreceived
         4 |   int nduplicate
         8 |   uint32_t time_min
        12 |   uint32_t time_max
        16 |   ICMPPingSource::counter_t time_sum
        24 |   ICMPPingSource::counter_t time_sq_sum
        32 |   class Timestamp [65536] send_timestamp
           | [sizeof=524320, dsize=524320, align=8,
           |  nvsize=524320, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563645179f98 <../elements/icmp/icmpsendpings.hh:163:5, line:171:5> line:163:12 referenced struct ReceiverInfo definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable
| |-DefaultConstructor exists non_trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x56364517a0b8 <col:5, col:12> col:12 implicit struct ReceiverInfo
|-FieldDecl 0x56364517a160 <line:164:2, col:6> col:6 nreceived 'int'
|-FieldDecl 0x56364517a1c8 <line:165:2, col:6> col:6 nduplicate 'int'
|-FieldDecl 0x56364517a228 <line:166:2, col:11> col:11 time_min 'uint32_t':'unsigned int'
|-FieldDecl 0x56364517a288 <line:167:2, col:11> col:11 time_max 'uint32_t':'unsigned int'
|-FieldDecl 0x56364517a310 <line:168:2, col:12> col:12 time_sum 'ICMPPingSource::counter_t':'unsigned long'
|-FieldDecl 0x56364517a370 <line:169:2, col:12> col:12 time_sq_sum 'ICMPPingSource::counter_t':'unsigned long'
`-FieldDecl 0x56364517a458 <line:170:2, col:32> col:12 send_timestamp 'Timestamp [65536]'

Layout: <CGRecordLayout
  LLVMType:%"struct.ICMPPingSource::ReceiverInfo" = type { i32, i32, i32, i32, i64, i64, [65536 x %class.Timestamp] }
  NonVirtualBaseLLVMType:%"struct.ICMPPingSource::ReceiverInfo" = type { i32, i32, i32, i32, i64, i64, [65536 x %class.Timestamp] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636451788f0 <../elements/icmp/icmpsendpings.hh:126:1, line:178:1> line:126:7 class ICMPPingSource definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x563645178a48 <col:1, col:7> col:7 implicit referenced class ICMPPingSource
|-AccessSpecDecl 0x563645178ad8 <col:41, col:47> col:41 public
|-CXXConstructorDecl 0x563645178b60 <line:128:5, col:20> col:5 ICMPPingSource 'void ()'
|-CXXDestructorDecl 0x563645178c50 <line:129:5, col:21> col:5 ~ICMPPingSource 'void ()' noexcept-unevaluated 0x563645178c50
| `-Overrides: [ 0x5636451f6a08 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x563645178d80 <line:131:5, col:63> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x5636451f7e68 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x56364522b748 <col:36, col:63>
|   `-ReturnStmt 0x56364522b738 <col:38, col:45>
|     `-ImplicitCastExpr 0x56364522b720 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x56364522b6f8 <col:45> 'const char [15]' lvalue "ICMPPingSource"
|-CXXMethodDecl 0x563645178e48 <line:132:5, col:54> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x5636451f7f30 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x56364522b7a8 <col:36, col:54>
|   `-ReturnStmt 0x56364522b798 <col:38, col:45>
|     `-ImplicitCastExpr 0x56364522b780 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x56364522b760 <col:45> 'const char [6]' lvalue "0-1/1"
|-CXXMethodDecl 0x563645178f10 <line:133:5, col:52> col:17 processing 'const char *() const'
| |-Overrides: [ 0x5636451f82f8 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x56364522b808 <col:36, col:52>
|   `-ReturnStmt 0x56364522b7f8 <col:38, col:45>
|     `-ImplicitCastExpr 0x56364522b7e0 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x56364522b7c0 <col:45> 'const char [4]' lvalue "h/a"
|-CXXMethodDecl 0x5636451791e0 <line:134:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5636451f9700 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x563645179090 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x563645179108 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x563645179338 <line:135:5, col:34> col:9 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x5636451f9950 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x5636451792a0 <col:20, col:33> col:34 'ErrorHandler *'
|-CXXMethodDecl 0x563645179480 <line:136:5, col:30> col:10 cleanup 'void (Element::CleanupStage)'
| |-Overrides: [ 0x5636451fa168 Element::cleanup 'void (Element::CleanupStage)' ]
| `-ParmVarDecl 0x5636451793f0 <col:18> col:30 'Element::CleanupStage'
|-CXXMethodDecl 0x563645179548 <line:137:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x5636451f97d0 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x563645179688 <line:139:5, col:27> col:10 run_timer 'void (Timer *)'
| |-Overrides: [ 0x5636451f7388 Element::run_timer 'void (Timer *)' ]
| `-ParmVarDecl 0x5636451795f8 <col:20, col:26> col:27 'Timer *'
|-CXXMethodDecl 0x563645179858 <line:140:5, col:28> col:10 push 'void (int, Packet *)'
| |-Overrides: [ 0x5636451f6cd8 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x563645179748 <col:15> col:18 'int'
| `-ParmVarDecl 0x5636451797c0 <col:20, col:27> col:28 'Packet *'
|-CXXMethodDecl 0x5636451799b0 <line:141:5, col:21> col:13 pull 'Packet *(int)'
| |-Overrides: [ 0x5636451f6e68 Element::pull 'Packet *(int)' ]
| `-ParmVarDecl 0x563645179920 <col:18> col:21 'int'
|-AccessSpecDecl 0x563645179a58 <line:143:3, col:10> col:3 private
|-FieldDecl 0x563645179aa0 <line:145:5, col:20> col:20 _src 'struct in_addr':'in_addr'
|-FieldDecl 0x563645179b10 <line:146:5, col:20> col:20 _dst 'struct in_addr':'in_addr'
|-FieldDecl 0x563645179b78 <line:147:5, col:9> col:9 _count 'int'
|-FieldDecl 0x563645179be0 <line:148:5, col:9> col:9 _limit 'int'
|-FieldDecl 0x563645179c40 <line:149:5, col:14> col:14 _icmp_id 'uint16_t':'unsigned short'
|-FieldDecl 0x563645179ca0 <line:150:5, col:14> col:14 _interval 'uint32_t':'unsigned int'
|-FieldDecl 0x563645179d00 <line:151:5, col:11> col:11 _timer 'Timer'
|-FieldDecl 0x563645179d60 <line:152:5, col:12> col:12 _data 'String'
|-FieldDecl 0x563645179dc0 <line:153:5, col:10> col:10 _active 'bool'
|-FieldDecl 0x563645179e20 <line:154:5, col:10> col:10 _verbose 'bool'
|-FieldDecl 0x563645179e80 <line:155:5, col:10> col:10 _stop 'bool'
|-FieldDecl 0x563645179ee0 <line:156:5, col:10> col:10 _mirror 'bool'
|-TypedefDecl 0x563645179f40 <line:159:5, col:22> col:22 referenced counter_t 'uint64_t':'unsigned long'
| `-TypedefType 0x563644de70c0 'uint64_t' sugar
|   |-Typedef 0x563644cf6470 'uint64_t'
|   `-TypedefType 0x563644ccf560 '__uint64_t' sugar
|     |-Typedef 0x563644ccf118 '__uint64_t'
|     `-BuiltinType 0x563644c8d430 'unsigned long'
|-CXXRecordDecl 0x563645179f98 <line:163:5, line:171:5> line:163:12 referenced struct ReceiverInfo definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable
| | |-DefaultConstructor exists non_trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x56364517a0b8 <col:5, col:12> col:12 implicit struct ReceiverInfo
| |-FieldDecl 0x56364517a160 <line:164:2, col:6> col:6 nreceived 'int'
| |-FieldDecl 0x56364517a1c8 <line:165:2, col:6> col:6 nduplicate 'int'
| |-FieldDecl 0x56364517a228 <line:166:2, col:11> col:11 time_min 'uint32_t':'unsigned int'
| |-FieldDecl 0x56364517a288 <line:167:2, col:11> col:11 time_max 'uint32_t':'unsigned int'
| |-FieldDecl 0x56364517a310 <line:168:2, col:12> col:12 time_sum 'ICMPPingSource::counter_t':'unsigned long'
| |-FieldDecl 0x56364517a370 <line:169:2, col:12> col:12 time_sq_sum 'ICMPPingSource::counter_t':'unsigned long'
| `-FieldDecl 0x56364517a458 <line:170:2, col:32> col:12 send_timestamp 'Timestamp [65536]'
|-FieldDecl 0x56364517a4f8 <line:172:5, col:19> col:19 _receiver 'ICMPPingSource::ReceiverInfo *'
|-CXXMethodDecl 0x56364517a618 <line:174:5, col:42> col:13 make_packet 'Packet *(WritablePacket *)'
| `-ParmVarDecl 0x56364517a558 <col:25, col:41> col:41 q 'WritablePacket *'
|-CXXMethodDecl 0x56364517a7e8 <line:175:5, col:47> col:19 read_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56364517a6d0 <col:32, col:39> col:40 'Element *'
| `-ParmVarDecl 0x56364517a750 <col:42, col:46> col:47 'void *'
|-CXXMethodDecl 0x56364522b2d8 <line:176:5, col:75> col:16 write_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x56364517a8a8 <col:30, col:42> col:43 'const String &'
| |-ParmVarDecl 0x56364522b130 <col:45, col:52> col:53 'Element *'
| |-ParmVarDecl 0x56364522b1b0 <col:55, col:59> col:60 'void *'
| `-ParmVarDecl 0x56364522b228 <col:62, col:74> col:75 'ErrorHandler *'
|-CXXConstructorDecl 0x56364522b3c8 <line:126:7> col:7 implicit ICMPPingSource 'void (const ICMPPingSource &)' inline default_delete noexcept-unevaluated 0x56364522b3c8
| `-ParmVarDecl 0x56364522b4d8 <col:7> col:7 'const ICMPPingSource &'
`-CXXMethodDecl 0x56364522b578 <col:7> col:7 implicit operator= 'ICMPPingSource &(const ICMPPingSource &)' inline default_delete noexcept-unevaluated 0x56364522b578
  `-ParmVarDecl 0x56364522b688 <col:7> col:7 'const ICMPPingSource &'

Layout: <CGRecordLayout
  LLVMType:%class.ICMPPingSource = type { %class.Element.base, %struct.in_addr, %struct.in_addr, i32, i32, i16, i32, %class.Timer, %class.String, i8, i8, i8, i8, %"struct.ICMPPingSource::ReceiverInfo"* }
  NonVirtualBaseLLVMType:%class.ICMPPingSource = type { %class.Element.base, %struct.in_addr, %struct.in_addr, i32, i32, i16, i32, %class.Timer, %class.String, i8, i8, i8, i8, %"struct.ICMPPingSource::ReceiverInfo"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9)
         0 |   int16_t home_thread_id
         2 |   uint8_t is_scheduled
         3 |   uint8_t is_strong_unscheduled
           | [sizeof=4, dsize=4, align=2,
           |  nvsize=4, nvalign=2]

*** Dumping AST Record Layout
         0 | union Task::Status
         0 |   struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9) 
         0 |     int16_t home_thread_id
         2 |     uint8_t is_scheduled
         3 |     uint8_t is_strong_unscheduled
         0 |   uint32_t status
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | class Task
         0 |   struct TaskLink (base)
         0 |     struct TaskLink * _prev
         8 |     struct TaskLink * _next
        16 |     unsigned int _pass
        20 |   unsigned int _stride
        24 |   int _tickets
        28 |   union Task::Status _status
        28 |     struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9) 
        28 |       int16_t home_thread_id
        30 |       uint8_t is_scheduled
        31 |       uint8_t is_strong_unscheduled
        28 |     uint32_t status
        32 |   TaskCallback _hook
        40 |   void * _thunk
        48 |   class RouterThread * _thread
        56 |   class Element * _owner
        64 |   union Task::Pending _pending_nextptr
        64 |     class Task * t
        64 |     uintptr_t x
           | [sizeof=72, dsize=72, align=8,
           |  nvsize=72, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636452ed3c8 <../dummy_inc/click/task.hh:315:9, line:319:9> line:315:9 struct definition
|-DefinitionData is_anonymous pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x5636452ed4f8 <line:316:13, col:21> col:21 referenced home_thread_id 'int16_t':'short'
|-FieldDecl 0x5636452ed558 <line:317:13, col:21> col:21 referenced is_scheduled 'uint8_t':'unsigned char'
|-FieldDecl 0x5636452ed5b8 <line:318:13, col:21> col:21 referenced is_strong_unscheduled 'uint8_t':'unsigned char'
|-CXXConstructorDecl 0x5636453601e8 <line:315:9> col:9 implicit  'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x5636453602c0 <col:9> col:9 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x5636453602c0
|-CXXConstructorDecl 0x563645360578 <col:9> col:9 implicit constexpr  'void (const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &)' inline default trivial noexcept-unevaluated 0x563645360578
| `-ParmVarDecl 0x563645360688 <col:9> col:9 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &'
`-CXXConstructorDecl 0x563645360728 <col:9> col:9 implicit constexpr  'void (Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&)' inline default trivial noexcept-unevaluated 0x563645360728
  `-ParmVarDecl 0x563645360838 <col:9> col:9 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&'

Layout: <CGRecordLayout
  LLVMType:%struct.anon = type { i16, i8, i8 }
  NonVirtualBaseLLVMType:%struct.anon = type { i16, i8, i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636452ed220 <../dummy_inc/click/task.hh:314:5, line:321:5> line:314:11 union Status definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5636452ed338 <col:5, col:11> col:11 implicit union Status
|-CXXRecordDecl 0x5636452ed3c8 <line:315:9, line:319:9> line:315:9 struct definition
| |-DefinitionData is_anonymous pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x5636452ed4f8 <line:316:13, col:21> col:21 referenced home_thread_id 'int16_t':'short'
| |-FieldDecl 0x5636452ed558 <line:317:13, col:21> col:21 referenced is_scheduled 'uint8_t':'unsigned char'
| |-FieldDecl 0x5636452ed5b8 <line:318:13, col:21> col:21 referenced is_strong_unscheduled 'uint8_t':'unsigned char'
| |-CXXConstructorDecl 0x5636453601e8 <line:315:9> col:9 implicit  'void () noexcept' inline default trivial
| |-CXXDestructorDecl 0x5636453602c0 <col:9> col:9 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x5636453602c0
| |-CXXConstructorDecl 0x563645360578 <col:9> col:9 implicit constexpr  'void (const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &)' inline default trivial noexcept-unevaluated 0x563645360578
| | `-ParmVarDecl 0x563645360688 <col:9> col:9 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &'
| `-CXXConstructorDecl 0x563645360728 <col:9> col:9 implicit constexpr  'void (Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&)' inline default trivial noexcept-unevaluated 0x563645360728
|   `-ParmVarDecl 0x563645360838 <col:9> col:9 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&'
|-FieldDecl 0x5636452ed678 <col:9> col:9 implicit referenced 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
|-IndirectFieldDecl 0x5636452ed6d8 <line:316:21> col:21 implicit home_thread_id 'int16_t':'short'
| |-Field 0x5636452ed678 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| `-Field 0x5636452ed4f8 'home_thread_id' 'int16_t':'short'
|-IndirectFieldDecl 0x5636452ed730 <line:317:21> col:21 implicit is_scheduled 'uint8_t':'unsigned char'
| |-Field 0x5636452ed678 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| `-Field 0x5636452ed558 'is_scheduled' 'uint8_t':'unsigned char'
|-IndirectFieldDecl 0x5636452ed788 <line:318:21> col:21 implicit is_strong_unscheduled 'uint8_t':'unsigned char'
| |-Field 0x5636452ed678 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| `-Field 0x5636452ed5b8 'is_strong_unscheduled' 'uint8_t':'unsigned char'
|-FieldDecl 0x5636452ed7e0 <line:320:9, col:18> col:18 status 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5636453600f8 <line:314:11> col:11 implicit used Status 'void () noexcept' inline default trivial
| `-CompoundStmt 0x563645360a58 <col:11>
|-CXXConstructorDecl 0x5636453603c8 <col:11> col:11 implicit constexpr Status 'void (const Task::Status &)' inline default trivial noexcept-unevaluated 0x5636453603c8
| `-ParmVarDecl 0x5636453604d8 <col:11> col:11 'const Task::Status &'
`-CXXConstructorDecl 0x5636453608d8 <col:11> col:11 implicit constexpr Status 'void (Task::Status &&)' inline default trivial noexcept-unevaluated 0x5636453608d8
  `-ParmVarDecl 0x5636453609e8 <col:11> col:11 'Task::Status &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Task::Status" = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636452eae80 prev 0x5636451f62a0 <../dummy_inc/click/task.hh:49:1, line:371:1> line:49:7 referenced class Task definition
|-DefinitionData has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-private 'TaskLink'
|-CXXRecordDecl 0x5636452eafb8 <col:1, col:7> col:7 implicit referenced class Task
|-AccessSpecDecl 0x5636452eb048 <col:33, col:39> col:33 public
|-EnumDecl 0x5636452eb070 <line:52:5, col:50> col:5
| |-EnumConstantDecl 0x5636452eb1b0 <col:12, col:26> col:12 referenced STRIDE1 'Task::(anonymous enum at ../dummy_inc/click/task.hh:52:5)'
| | `-ConstantExpr 0x5636452eb190 <col:22, col:26> 'unsigned int' Int: 65536
| |   `-BinaryOperator 0x5636452eb170 <col:22, col:26> 'unsigned int' '<<'
| |     |-IntegerLiteral 0x5636452eb130 <col:22> 'unsigned int' 1
| |     `-IntegerLiteral 0x5636452eb150 <col:26> 'int' 16
| `-EnumConstantDecl 0x5636452eb280 <col:30, col:47> col:30 referenced MAX_STRIDE 'Task::(anonymous enum at ../dummy_inc/click/task.hh:52:5)'
|   `-ConstantExpr 0x5636452eb260 <col:43, col:47> 'unsigned int' Int: 2147483648
|     `-BinaryOperator 0x5636452eb240 <col:43, col:47> 'unsigned int' '<<'
|       |-IntegerLiteral 0x5636452eb200 <col:43> 'unsigned int' 1
|       `-IntegerLiteral 0x5636452eb220 <col:47> 'int' 31
|-EnumDecl 0x5636452eb2d0 <line:53:5, col:57> col:5
| |-EnumConstantDecl 0x5636452eb410 <col:12, col:29> col:12 referenced MAX_TICKETS 'Task::(anonymous enum at ../dummy_inc/click/task.hh:53:5)'
| | `-ImplicitCastExpr 0x5636452eb530 <col:26, col:29> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636452eb3f0 <col:26, col:29> 'int' Int: 32768
| |     `-BinaryOperator 0x5636452eb3d0 <col:26, col:29> 'int' '<<'
| |       |-IntegerLiteral 0x5636452eb390 <col:26> 'int' 1
| |       `-IntegerLiteral 0x5636452eb3b0 <col:29> 'int' 15
| `-EnumConstantDecl 0x5636452eb4e0 <col:33, col:54> col:33 DEFAULT_TICKETS 'Task::(anonymous enum at ../dummy_inc/click/task.hh:53:5)'
|   `-ImplicitCastExpr 0x5636452eb548 <col:51, col:54> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5636452eb4c0 <col:51, col:54> 'int' Int: 1024
|       `-BinaryOperator 0x5636452eb4a0 <col:51, col:54> 'int' '<<'
|         |-IntegerLiteral 0x5636452eb460 <col:51> 'int' 1
|         `-IntegerLiteral 0x5636452eb480 <col:54> 'int' 10
|-CXXConstructorDecl 0x5636452eb718 <line:75:5, col:48> col:12 Task 'void (TaskCallback, void *)' inline
| |-ParmVarDecl 0x5636452eb570 <col:17, col:30> col:30 f 'TaskCallback':'bool (*)(Task *, void *)'
| `-ParmVarDecl 0x5636452eb5f0 <col:33, col:39> col:39 user_data 'void *'
|-CXXConstructorDecl 0x5636452eb870 <line:86:5, col:27> col:12 Task 'void (Element *)' inline
| `-ParmVarDecl 0x5636452eb7e0 <col:17, col:26> col:26 e 'Element *'
|-CXXDestructorDecl 0x5636452eb968 <line:91:5, col:11> col:5 ~Task 'void ()' noexcept-unevaluated 0x5636452eb968
|-CXXMethodDecl 0x5636452ebaf8 <line:98:5, line:100:5> line:98:25 callback 'TaskCallback () const' inline
| `-CompoundStmt 0x5636452eebf8 <col:42, line:100:5>
|   `-ReturnStmt 0x5636452eebe8 <line:99:9, col:16>
|     `-ImplicitCastExpr 0x5636452eebd0 <col:16> 'TaskCallback':'bool (*)(Task *, void *)' <LValueToRValue>
|       `-MemberExpr 0x5636452eeba0 <col:16> 'const TaskCallback':'bool (*const)(Task *, void *)' lvalue ->_hook 0x5636452ed920
|         `-CXXThisExpr 0x5636452eeb90 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x5636452ebbc0 <line:103:5, line:105:5> line:103:18 user_data 'void *() const' inline
| `-CompoundStmt 0x5636452eec78 <col:36, line:105:5>
|   `-ReturnStmt 0x5636452eec68 <line:104:9, col:16>
|     `-ImplicitCastExpr 0x5636452eec50 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5636452eec20 <col:16> 'void *const' lvalue ->_thunk 0x5636452ed988
|         `-CXXThisExpr 0x5636452eec10 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x5636452ebc80 <line:108:5, line:110:5> line:108:21 element 'Element *() const' inline
| `-CompoundStmt 0x5636452eecf8 <col:37, line:110:5>
|   `-ReturnStmt 0x5636452eece8 <line:109:9, col:16>
|     `-ImplicitCastExpr 0x5636452eecd0 <col:16> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x5636452eeca0 <col:16> 'Element *const' lvalue ->_owner 0x5636452eda48
|         `-CXXThisExpr 0x5636452eec90 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x5636452ebd40 <line:114:5, col:31> col:17 initialized 'bool () const' inline
|-CXXMethodDecl 0x5636452ebe08 <line:123:5, col:33> col:16 home_thread_id 'int () const' inline
|-CXXMethodDecl 0x5636452ebec8 <line:132:5, col:35> col:26 thread 'RouterThread *() const' inline
|-CXXMethodDecl 0x5636452ebf88 <line:135:5, line:137:5> line:135:20 router 'Router *() const' inline
| `-CompoundStmt 0x5636452eede0 <col:35, line:137:5>
|   `-ReturnStmt 0x5636452eedd0 <line:136:9, col:31>
|     `-CXXMemberCallExpr 0x5636452eed98 <col:16, col:31> 'Router *'
|       `-MemberExpr 0x5636452eed68 <col:16, col:24> '<bound member function type>' ->router 0x563645207aa0
|         `-ImplicitCastExpr 0x5636452eedb8 <col:16> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x5636452eed50 <col:16> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x5636452eed20 <col:16> 'Element *const' lvalue ->_owner 0x5636452eda48
|               `-CXXThisExpr 0x5636452eed10 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x5636452ec048 <line:140:5, col:22> col:13 master 'Master *() const'
|-CXXMethodDecl 0x5636452ec208 <line:159:5, col:50> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x5636452ec0f8 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x5636452ec170 <col:37, col:42> col:42 schedule 'bool'
|-CXXMethodDecl 0x5636452ec418 <line:169:5, col:50> col:10 initialize 'void (Router *, bool)'
| |-ParmVarDecl 0x5636452ec2c8 <col:21, col:29> col:29 router 'Router *'
| `-ParmVarDecl 0x5636452ec340 <col:37, col:42> col:42 schedule 'bool'
|-CXXMethodDecl 0x5636452ec4e8 <line:179:5, line:181:5> line:179:17 scheduled 'bool () const' inline
| `-CompoundStmt 0x5636452eeef0 <col:35, line:181:5>
|   `-ReturnStmt 0x5636452eeee0 <line:180:9, col:24>
|     `-ImplicitCastExpr 0x5636452eeec8 <col:16, col:24> 'bool' <IntegralToBoolean>
|       `-ImplicitCastExpr 0x5636452eeeb0 <col:16, col:24> 'uint8_t':'unsigned char' <LValueToRValue>
|         `-MemberExpr 0x5636452eee80 <col:16, col:24> 'const uint8_t':'const unsigned char' lvalue .is_scheduled 0x5636452ed558
|           `-MemberExpr 0x5636452eee38 <col:16, col:24> 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5636452ed678
|             `-MemberExpr 0x5636452eee08 <col:16> 'const union Status':'const Task::Status' lvalue ->_status 0x5636452ed8a8
|               `-CXXThisExpr 0x5636452eedf8 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x5636452ec5a8 <line:190:5, line:192:5> line:190:17 unschedule 'void ()' inline
| `-CompoundStmt 0x5636452ef008 <col:30, line:192:5>
|   `-BinaryOperator 0x5636452eefe8 <line:191:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x5636452eef90 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x5636452ed558
|     | `-MemberExpr 0x5636452eef48 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5636452ed678
|     |   `-MemberExpr 0x5636452eef18 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5636452ed8a8
|     |     `-CXXThisExpr 0x5636452eef08 <col:9> 'Task *' implicit this
|     `-ImplicitCastExpr 0x5636452eefd0 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|       `-CXXBoolLiteralExpr 0x5636452eefc0 <col:32> 'bool' false
|-CXXMethodDecl 0x5636452ec668 <line:201:5, line:206:5> line:201:17 used reschedule 'void ()' inline
| `-CompoundStmt 0x5636452ef358 <col:30, line:206:5>
|   |-BinaryOperator 0x5636452ef100 <line:202:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x5636452ef0a8 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x5636452ed558
|   | | `-MemberExpr 0x5636452ef060 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5636452ed678
|   | |   `-MemberExpr 0x5636452ef030 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5636452ed8a8
|   | |     `-CXXThisExpr 0x5636452ef020 <col:9> 'Task *' implicit this
|   | `-ImplicitCastExpr 0x5636452ef0e8 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-CXXBoolLiteralExpr 0x5636452ef0d8 <col:32> 'bool' true
|   |-CallExpr 0x5636452ef1a0 <line:203:9, col:21> 'void'
|   | `-ImplicitCastExpr 0x5636452ef188 <col:9> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5636452ef168 <col:9> 'void ()' lvalue Function 0x56364520e450 'click_fence' 'void ()'
|   `-IfStmt 0x5636452ef340 <line:204:9, line:205:32>
|     |-BinaryOperator 0x5636452ef280 <line:204:13, col:34> 'bool' '<'
|     | |-ImplicitCastExpr 0x5636452ef250 <col:13, col:30> 'uintptr_t':'unsigned long' <LValueToRValue>
|     | | `-MemberExpr 0x5636452ef200 <col:13, col:30> 'uintptr_t':'unsigned long' lvalue .x 0x5636452edcb8
|     | |   `-MemberExpr 0x5636452ef1d0 <col:13> 'Task::Pending' lvalue ->_pending_nextptr 0x5636452edd30
|     | |     `-CXXThisExpr 0x5636452ef1c0 <col:13> 'Task *' implicit this
|     | `-ImplicitCastExpr 0x5636452ef268 <col:34> 'unsigned long' <IntegralCast>
|     |   `-IntegerLiteral 0x5636452ef230 <col:34> 'int' 2
|     `-CXXMemberCallExpr 0x5636452ef300 <line:205:13, col:32> 'void'
|       |-MemberExpr 0x5636452ef2b0 <col:13> '<bound member function type>' ->complete_schedule 0x5636452ee730
|       | `-CXXThisExpr 0x5636452ef2a0 <col:13> 'Task *' implicit this
|       `-ImplicitCastExpr 0x5636452ef328 <col:31> 'RouterThread *' <NullToPointer>
|         `-IntegerLiteral 0x5636452ef2e0 <col:31> 'int' 0
|-CXXMethodDecl 0x5636452ec728 <line:238:5, line:240:5> line:238:17 fast_reschedule 'void ()' inline
| `-CompoundStmt 0x5636452ef480 <col:35, line:240:5>
|   `-BinaryOperator 0x5636452ef460 <line:239:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x5636452ef408 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x5636452ed558
|     | `-MemberExpr 0x5636452ef3c0 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5636452ed678
|     |   `-MemberExpr 0x5636452ef390 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5636452ed8a8
|     |     `-CXXThisExpr 0x5636452ef380 <col:9> 'Task *' implicit this
|     `-ImplicitCastExpr 0x5636452ef448 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|       `-CXXBoolLiteralExpr 0x5636452ef438 <col:32> 'bool' true
|-CXXMethodDecl 0x5636452ec7e8 <line:250:5, line:253:5> line:250:17 strong_unschedule 'void ()' inline
| `-CompoundStmt 0x5636452ef698 <col:37, line:253:5>
|   |-BinaryOperator 0x5636452ef578 <line:251:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x5636452ef520 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x5636452ed558
|   | | `-MemberExpr 0x5636452ef4d8 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5636452ed678
|   | |   `-MemberExpr 0x5636452ef4a8 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5636452ed8a8
|   | |     `-CXXThisExpr 0x5636452ef498 <col:9> 'Task *' implicit this
|   | `-ImplicitCastExpr 0x5636452ef560 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-CXXBoolLiteralExpr 0x5636452ef550 <col:32> 'bool' false
|   `-BinaryOperator 0x5636452ef678 <line:252:9, col:41> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x5636452ef620 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_strong_unscheduled 0x5636452ed5b8
|     | `-MemberExpr 0x5636452ef5d8 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5636452ed678
|     |   `-MemberExpr 0x5636452ef5a8 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5636452ed8a8
|     |     `-CXXThisExpr 0x5636452ef598 <col:9> 'Task *' implicit this
|     `-ImplicitCastExpr 0x5636452ef660 <col:41> 'uint8_t':'unsigned char' <IntegralCast>
|       `-CXXBoolLiteralExpr 0x5636452ef650 <col:41> 'bool' true
|-CXXMethodDecl 0x5636452ec8a8 <line:261:5, line:264:5> line:261:17 strong_reschedule 'void ()' inline
| `-CompoundStmt 0x5636452ef818 <col:37, line:264:5>
|   |-BinaryOperator 0x5636452ef798 <line:262:9, col:41> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x5636452ef740 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_strong_unscheduled 0x5636452ed5b8
|   | | `-MemberExpr 0x5636452ef6f8 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5636452ed678
|   | |   `-MemberExpr 0x5636452ef6c8 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5636452ed8a8
|   | |     `-CXXThisExpr 0x5636452ef6b8 <col:9> 'Task *' implicit this
|   | `-ImplicitCastExpr 0x5636452ef780 <col:41> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-CXXBoolLiteralExpr 0x5636452ef770 <col:41> 'bool' false
|   `-CXXMemberCallExpr 0x5636452ef7f8 <line:263:9, col:20> 'void'
|     `-MemberExpr 0x5636452ef7c8 <col:9> '<bound member function type>' ->reschedule 0x5636452ec668
|       `-CXXThisExpr 0x5636452ef7b8 <col:9> 'Task *' implicit this
|-CXXMethodDecl 0x5636452ec9f0 <line:275:5, col:39> col:10 move_thread 'void (int)'
| `-ParmVarDecl 0x5636452ec960 <col:22, col:26> col:26 new_thread_id 'int'
|-CXXMethodDecl 0x5636452ecac0 <line:279:5, col:26> col:16 tickets 'int () const' inline
|-CXXMethodDecl 0x5636452ecc08 <line:280:5, col:34> col:17 used set_tickets 'void (int)' inline
| `-ParmVarDecl 0x5636452ecb78 <col:29, col:33> col:33 n 'int'
|-CXXMethodDecl 0x5636452ecd58 <line:281:5, col:41> col:17 adjust_tickets 'void (int)' inline
| `-ParmVarDecl 0x5636452eccc8 <col:32, col:36> col:36 delta 'int'
|-CXXMethodDecl 0x5636452ece20 <line:284:5, col:22> col:17 fire 'bool ()' inline
|-CXXMethodDecl 0x5636452ecee0 <line:299:5, col:64> col:25 hook 'TaskCallback () const' inline
| `-DeprecatedAttr 0x5636452ecf80 <col:53> "" ""
|-CXXMethodDecl 0x5636452ed018 <line:300:5, col:58> col:18 thunk 'void *() const' inline
| `-DeprecatedAttr 0x5636452ed0b8 <col:47> "" ""
|-AccessSpecDecl 0x5636452ed128 <line:303:3, col:10> col:3 private
|-FieldDecl 0x5636452ed168 <line:310:5, col:14> col:14 referenced _stride 'unsigned int'
|-FieldDecl 0x5636452ed1d0 <line:311:5, col:9> col:9 referenced _tickets 'int'
|-CXXRecordDecl 0x5636452ed220 <line:314:5, line:321:5> line:314:11 union Status definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5636452ed338 <col:5, col:11> col:11 implicit union Status
| |-CXXRecordDecl 0x5636452ed3c8 <line:315:9, line:319:9> line:315:9 struct definition
| | |-DefinitionData is_anonymous pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | | |-MoveConstructor exists simple trivial
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial
| | |-FieldDecl 0x5636452ed4f8 <line:316:13, col:21> col:21 referenced home_thread_id 'int16_t':'short'
| | |-FieldDecl 0x5636452ed558 <line:317:13, col:21> col:21 referenced is_scheduled 'uint8_t':'unsigned char'
| | |-FieldDecl 0x5636452ed5b8 <line:318:13, col:21> col:21 referenced is_strong_unscheduled 'uint8_t':'unsigned char'
| | |-CXXConstructorDecl 0x5636453601e8 <line:315:9> col:9 implicit  'void () noexcept' inline default trivial
| | |-CXXDestructorDecl 0x5636453602c0 <col:9> col:9 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x5636453602c0
| | |-CXXConstructorDecl 0x563645360578 <col:9> col:9 implicit constexpr  'void (const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &)' inline default trivial noexcept-unevaluated 0x563645360578
| | | `-ParmVarDecl 0x563645360688 <col:9> col:9 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &'
| | `-CXXConstructorDecl 0x563645360728 <col:9> col:9 implicit constexpr  'void (Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&)' inline default trivial noexcept-unevaluated 0x563645360728
| |   `-ParmVarDecl 0x563645360838 <col:9> col:9 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&'
| |-FieldDecl 0x5636452ed678 <col:9> col:9 implicit referenced 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| |-IndirectFieldDecl 0x5636452ed6d8 <line:316:21> col:21 implicit home_thread_id 'int16_t':'short'
| | |-Field 0x5636452ed678 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| | `-Field 0x5636452ed4f8 'home_thread_id' 'int16_t':'short'
| |-IndirectFieldDecl 0x5636452ed730 <line:317:21> col:21 implicit is_scheduled 'uint8_t':'unsigned char'
| | |-Field 0x5636452ed678 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| | `-Field 0x5636452ed558 'is_scheduled' 'uint8_t':'unsigned char'
| |-IndirectFieldDecl 0x5636452ed788 <line:318:21> col:21 implicit is_strong_unscheduled 'uint8_t':'unsigned char'
| | |-Field 0x5636452ed678 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| | `-Field 0x5636452ed5b8 'is_strong_unscheduled' 'uint8_t':'unsigned char'
| |-FieldDecl 0x5636452ed7e0 <line:320:9, col:18> col:18 status 'uint32_t':'unsigned int'
| |-CXXConstructorDecl 0x5636453600f8 <line:314:11> col:11 implicit used Status 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x563645360a58 <col:11>
| |-CXXConstructorDecl 0x5636453603c8 <col:11> col:11 implicit constexpr Status 'void (const Task::Status &)' inline default trivial noexcept-unevaluated 0x5636453603c8
| | `-ParmVarDecl 0x5636453604d8 <col:11> col:11 'const Task::Status &'
| `-CXXConstructorDecl 0x5636453608d8 <col:11> col:11 implicit constexpr Status 'void (Task::Status &&)' inline default trivial noexcept-unevaluated 0x5636453608d8
|   `-ParmVarDecl 0x5636453609e8 <col:11> col:11 'Task::Status &&'
|-FieldDecl 0x5636452ed8a8 <col:5, line:321:7> col:7 referenced _status 'union Status':'Task::Status'
|-FieldDecl 0x5636452ed920 <line:323:5, col:18> col:18 referenced _hook 'TaskCallback':'bool (*)(Task *, void *)'
|-FieldDecl 0x5636452ed988 <line:324:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x5636452ed9e8 <line:335:5, col:19> col:19 referenced _thread 'RouterThread *'
|-FieldDecl 0x5636452eda48 <line:337:5, col:14> col:14 referenced _owner 'Element *'
|-CXXRecordDecl 0x5636452eda98 <line:339:5, line:342:5> line:339:11 referenced union Pending definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5636452edbb8 <col:5, col:11> col:11 implicit union Pending
| |-FieldDecl 0x5636452edc58 <line:340:9, col:15> col:15 t 'Task *'
| |-FieldDecl 0x5636452edcb8 <line:341:9, col:19> col:19 referenced x 'uintptr_t':'unsigned long'
| |-CXXConstructorDecl 0x5636453565f8 <line:339:11> col:11 implicit constexpr Pending 'void (const Task::Pending &)' inline default trivial noexcept-unevaluated 0x5636453565f8
| | `-ParmVarDecl 0x563645356708 <col:11> col:11 'const Task::Pending &'
| |-CXXConstructorDecl 0x5636453567a8 <col:11> col:11 implicit constexpr Pending 'void (Task::Pending &&)' inline default trivial noexcept-unevaluated 0x5636453567a8
| | `-ParmVarDecl 0x5636453568b8 <col:11> col:11 'Task::Pending &&'
| |-CXXDestructorDecl 0x563645356928 <col:11> col:11 implicit ~Pending 'void ()' inline default trivial noexcept-unevaluated 0x563645356928
| |-CXXMethodDecl 0x5636453571a8 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(const Task::Pending &)' inline default trivial noexcept-unevaluated 0x5636453571a8
| | `-ParmVarDecl 0x5636453572b8 <col:11> col:11 'const Task::Pending &'
| |-CXXMethodDecl 0x563645357328 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(Task::Pending &&)' inline default trivial noexcept-unevaluated 0x563645357328
| | `-ParmVarDecl 0x563645357438 <col:11> col:11 'Task::Pending &&'
| `-CXXConstructorDecl 0x563645360ab8 <col:11> col:11 implicit used Pending 'void () noexcept' inline default trivial
|   `-CompoundStmt 0x563645360b90 <col:11>
|-FieldDecl 0x5636452edd30 <line:343:5, col:13> col:13 referenced _pending_nextptr 'Task::Pending'
|-CXXConstructorDecl 0x5636452ede78 <line:345:5, col:23> col:5 Task 'void (const Task &)'
| `-ParmVarDecl 0x5636452eddb8 <col:10, col:22> col:22 x 'const Task &'
|-CXXMethodDecl 0x5636452ee028 <line:346:5, col:34> col:11 operator= 'Task &(const Task &)'
| `-ParmVarDecl 0x5636452edf38 <col:21, col:33> col:33 x 'const Task &'
|-CXXMethodDecl 0x5636452ee0f0 <line:347:5, col:18> col:10 cleanup 'void ()'
|-CXXMethodDecl 0x5636452ee1b0 <line:352:5, col:37> col:17 used on_scheduled_list 'bool () const' inline
|-CXXMethodDecl 0x5636452ee270 <line:353:5, line:355:5> line:353:17 on_pending_list 'bool () const' inline
| `-CompoundStmt 0x5636452f9960 <col:41, line:355:5>
|   `-ReturnStmt 0x5636452f9950 <line:354:9, col:38>
|     `-BinaryOperator 0x5636452f9930 <col:16, col:38> 'bool' '!='
|       |-ImplicitCastExpr 0x5636452f9900 <col:16, col:33> 'uintptr_t':'unsigned long' <LValueToRValue>
|       | `-MemberExpr 0x5636452f98b0 <col:16, col:33> 'const uintptr_t':'const unsigned long' lvalue .x 0x5636452edcb8
|       |   `-MemberExpr 0x5636452f9880 <col:16> 'const Task::Pending' lvalue ->_pending_nextptr 0x5636452edd30
|       |     `-CXXThisExpr 0x5636452ef838 <col:16> 'const Task *' implicit this
|       `-ImplicitCastExpr 0x5636452f9918 <col:38> 'unsigned long' <IntegralCast>
|         `-IntegerLiteral 0x5636452f98e0 <col:38> 'int' 0
|-CXXMethodDecl 0x5636452ee330 <line:356:5, col:33> col:17 needs_cleanup 'bool () const' inline
|-CXXMethodDecl 0x5636452ee470 <line:361:5, col:33> col:10 add_pending 'void (bool)'
| `-ParmVarDecl 0x5636452ee3e0 <col:22, col:27> col:27 always 'bool'
|-CXXMethodDecl 0x5636452ee5e8 <line:362:5, col:46> col:10 process_pending 'void (RouterThread *)'
| `-ParmVarDecl 0x5636452ee528 <col:26, col:40> col:40 thread 'RouterThread *'
|-CXXMethodDecl 0x5636452ee730 <line:364:5, col:64> col:10 used complete_schedule 'void (RouterThread *)'
| `-ParmVarDecl 0x5636452ee6a0 <col:28, col:42> col:42 process_pending_thread 'RouterThread *'
|-CXXMethodDecl 0x5636452ee7f8 <line:365:5, col:44> col:17 remove_from_scheduled_list 'void ()' inline
|-CXXMethodDecl 0x5636452ee9c0 <line:367:5, col:55> col:17 error_hook 'bool (Task *, void *)' static
| |-ParmVarDecl 0x5636452ee8a8 <col:28, col:34> col:34 task 'Task *'
| `-ParmVarDecl 0x5636452ee928 <col:40, col:46> col:46 user_data 'void *'
|-FriendDecl 0x5636452eeac0 <line:369:5, col:18> col:12 'class RouterThread':'RouterThread'
`-FriendDecl 0x5636452eeb50 <line:370:5, col:18> col:12 'class Master':'Master'

Layout: <CGRecordLayout
  LLVMType:%class.Task = type { %struct.TaskLink.base, i32, i32, %"union.Task::Status", i1 (%class.Task*, i8*)*, i8*, %class.RouterThread*, %class.Element*, %"union.Task::Pending" }
  NonVirtualBaseLLVMType:%class.Task = type { %struct.TaskLink.base, i32, i32, %"union.Task::Status", i1 (%class.Task*, i8*)*, i8*, %class.RouterThread*, %class.Element*, %"union.Task::Pending" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56364526d478 prev 0x5636451b8e88 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56364526d570 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x56364526d600 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x56364526d738 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x56364526d638 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x56364526eb80 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x56364526eb60 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x56364526e6f8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x56364526ec10 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x56364526ebd0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x56364526d638 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x56364526e760 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x56364526ec90 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x56364526ec50 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x56364526e7c0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x56364526ecd0 <col:54> 'bool' false
| `-CompoundStmt 0x56364526edd8 <col:61, line:38:5>
|   `-BinaryOperator 0x56364526edb8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x56364526ed50 <col:9> 'const Element *' lvalue ->_context 0x56364526e698
|     | `-CXXThisExpr 0x56364526ed40 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x56364526eda0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x56364526ed80 <col:20> 'int' 0
|-CXXConstructorDecl 0x56364526d948 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x56364526d7f8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x56364526d870 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x56364526ebb8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x56364526eb98 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x56364526e698 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x56364526ee30 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x56364526edf0 <col:20> 'const Element *' lvalue ParmVar 0x56364526d7f8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x56364526e6f8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x56364526eeb0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x56364526ee70 <col:36> 'ErrorHandler *' lvalue ParmVar 0x56364526d870 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x56364526e760 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x56364526ef30 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x56364526eef0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x56364526e7c0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x56364526ef70 <col:73> 'bool' false
| `-CompoundStmt 0x56364526efe8 <col:80, line:46:5>
|-CXXMethodDecl 0x56364526da78 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x56364526f060 <col:36, line:51:5>
|   `-ReturnStmt 0x56364526f050 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x56364526f038 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x56364526f008 <col:16> 'const Element *const' lvalue ->_context 0x56364526e698
|         `-CXXThisExpr 0x56364526eff8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x56364526db68 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x56364526f0e0 <col:32, line:57:5>
|   `-ReturnStmt 0x56364526f0d0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x56364526f0b8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x56364526f088 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x56364526e6f8
|         `-CXXThisExpr 0x56364526f078 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x56364526dc28 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x56364526ddd0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x56364526dd00 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x56364526df20 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x56364526de90 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56364526e070 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x56364526dfe0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56364526e278 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x56364526e128 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x56364526e1a0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x56364526e5a8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x56364526e338 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x56364526e3b8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x56364526e480 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x56364526e660 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x56364526e698 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x56364526e6f8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x56364526e760 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x56364526e7c0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x56364526e810 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x56364526e810
| `-ParmVarDecl 0x56364526e928 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x56364526e9c8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x56364526e9c8
| `-ParmVarDecl 0x56364526ead8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x5636453e84a0 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56364528adb8 prev 0x563645273ff8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56364528aeb0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x56364528afa0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x5636452b9a10 <col:16, line:828:9>
|-CXXDestructorDecl 0x56364528b090 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x5636452b9a20 <col:25, line:830:9>
|-CXXMethodDecl 0x56364528b190 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x56364528b240 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x56364528b2e8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x56364528b2e8
| `-ParmVarDecl 0x56364528b3f8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x563645296498 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x563645296498
  `-ParmVarDecl 0x5636452965a8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563645273e08 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x563645273f68 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x563645273ff8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x5636452740b0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x5636452741b8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x5636452740e8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5636452a7288 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5636452a7268 <col:31> 'int' 0
|-CXXConstructorDecl 0x5636452744d8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x563645274350 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x5636452743c8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5636452a72c0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5636452a72a0 <col:59> 'int' 0
|-CXXConstructorDecl 0x5636452746b0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5636452745a0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x563645274618 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5636452a72f8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5636452a72d8 <col:55> 'int' 0
|-CXXConstructorDecl 0x563645274a68 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x563645274850 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x5636452748c8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x563645274940 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5636452a7330 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5636452a7310 <col:31> 'int' 0
|-CXXConstructorDecl 0x563645274c28 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x563645274b68 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x563645274d20 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x563645274f08 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x563645274e10 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x563645274ff8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x5636452a76e0 <col:24, line:291:5>
|   `-ReturnStmt 0x5636452a76d0 <line:290:9, col:79>
|     `-BinaryOperator 0x5636452a76b0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x5636452a7588 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x5636452a74e0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x5636452a74c0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x5636452a73b8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x5636452a73a0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x5636452a7388 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x5636452a7358 <col:18> 'Vector<String> *const' lvalue ->_conf 0x5636452974c0
|       | |   |       `-CXXThisExpr 0x5636452a7348 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x5636452a74a8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x5636452a7490 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x5636452a7458 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x5636452a7428 <col:28, col:35> '<bound member function type>' ->size 0x56364525fb38
|       | |           `-ImplicitCastExpr 0x5636452a7478 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x5636452a7410 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x5636452a73e0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x5636452974c0
|       | |                 `-CXXThisExpr 0x5636452a73d0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x5636452a7570 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x5636452a7558 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x5636452a7540 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x5636452a7510 <col:47> 'Args::Slot *const' lvalue ->_slots 0x5636452a5e10
|       |         `-CXXThisExpr 0x5636452a7500 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x5636452a7690 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x5636452a7678 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5636452a7660 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5636452a7620 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5636452a7608 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5636452a75b8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5636452a5ec0
|         |     |   `-CXXThisExpr 0x5636452a75a8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5636452a75e8 <col:73> 'int' 0
|         `-IntegerLiteral 0x5636452a7640 <col:79> 'int' 0
|-CXXMethodDecl 0x5636452750b8 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x5636452a78b8 <col:32, line:296:5>
|   `-ReturnStmt 0x5636452a78a8 <line:295:9, col:49>
|     `-BinaryOperator 0x5636452a7888 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x5636452a7768 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x5636452a7750 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x5636452a7738 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x5636452a7708 <col:17> 'Args::Slot *const' lvalue ->_slots 0x5636452a5e10
|       |       `-CXXThisExpr 0x5636452a76f8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x5636452a7868 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x5636452a7850 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5636452a7838 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5636452a77f8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5636452a77e0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5636452a7790 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5636452a5ec0
|         |     |   `-CXXThisExpr 0x5636452a7780 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5636452a77c0 <col:43> 'int' 0
|         `-IntegerLiteral 0x5636452a7818 <col:49> 'int' 0
|-CXXMethodDecl 0x5636452751a8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x5636452a7ac8 <col:19, line:306:5>
|   |-IfStmt 0x5636452a79e8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x5636452a7928 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x5636452a7910 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x5636452a78e0 <col:13> 'Vector<String> *' lvalue ->_conf 0x5636452974c0
|   | |     `-CXXThisExpr 0x5636452a78d0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x5636452a79c8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x5636452a7998 <col:13, col:20> '<bound member function type>' ->clear 0x563645262538
|   |     `-ImplicitCastExpr 0x5636452a7980 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x5636452a7950 <col:13> 'Vector<String> *' lvalue ->_conf 0x5636452974c0
|   |         `-CXXThisExpr 0x5636452a7940 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x5636452a7a70 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x5636452a7a40 <col:9, col:16> '<bound member function type>' .clear 0x5636452a5998
|   |   `-MemberExpr 0x5636452a7a10 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x5636452a5db0
|   |     `-CXXThisExpr 0x5636452a7a00 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x5636452a7ab8 <line:305:9, col:17>
|     `-UnaryOperator 0x5636452a7aa0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5636452a7a90 <col:17> 'Args *' this
|-CXXMethodDecl 0x563645275428 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x563645275330 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x5636452755a8 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x5636452754e0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x563645275928 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x563645275650 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x563645275888 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x5636452756f8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x563645275770 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x5636452a7de8 <col:67, line:327:5>
|     |-WhileStmt 0x5636452a7d98 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x5636452a7bb0 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x5636452a7b30 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5636451b1358 0x563644ffa6e8 0x563644ffa3c0 0x563644febba0 0x563644feb850 0x563644feb140 0x563644fbdab0 0x563644f49d50
|     | | |-DeclRefExpr 0x5636452a7af0 <col:16> 'Iter' lvalue ParmVar 0x5636452756f8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x5636452a7b10 <col:25> 'Iter' lvalue ParmVar 0x563645275770 'end' 'Iter'
|     | `-CompoundStmt 0x5636452a7d78 <col:30, line:325:9>
|     |   |-CallExpr 0x5636452a7d18 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x5636452a7bf8 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x5636452a7ce8 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x5636452a7c78 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5636451b64d8 0x5636451b60f8 0x5636451b5d28 0x5636451b5948 0x5636451b5568 0x5636451b5198
|     |   |   `-DeclRefExpr 0x5636452a7c58 <col:24> 'Iter' lvalue ParmVar 0x5636452756f8 'begin' 'Iter'
|     |   `-UnaryOperator 0x5636452a7d60 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x5636452a7d40 <col:15> 'Iter' lvalue ParmVar 0x5636452756f8 'begin' 'Iter'
|     `-ReturnStmt 0x5636452a7dd8 <line:326:9, col:17>
|       `-UnaryOperator 0x5636452a7dc0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5636452a7db0 <col:17> 'Args *' this
|-CXXMethodDecl 0x563645275a30 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x5636452759a0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x563645275b78 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x563645275ae8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x563645275c40 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x5636452a7ec8 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x5636452a7e68 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x5636452a7e18 <col:9> '<bound member function type>' ->reset_from 0x5636452a6238
|   | | `-CXXThisExpr 0x5636452a7e08 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x5636452a7e48 <col:20> 'int' 0
|   `-ReturnStmt 0x5636452a7eb8 <line:352:9, col:17>
|     `-UnaryOperator 0x5636452a7ea0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5636452a7e90 <col:17> 'Args *' this
|-VarDecl 0x5636452770d0 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x563645277138 <col:38> 'int' 1
|-VarDecl 0x5636452771c8 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x563645277230 <col:39> 'int' 2
|-VarDecl 0x5636452772c0 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x563645277328 <col:39> 'int' 4
|-VarDecl 0x5636452773b8 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x563645277420 <col:39> 'int' 8
|-FunctionTemplateDecl 0x5636452777a8 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x563645277498 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x563645277708 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x563645277550 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5636452775f8 <col:37, col:40> col:40 referenced x 'T &'
| | `-CompoundStmt 0x5636452a8020 <col:43, line:371:5>
| |   `-ReturnStmt 0x5636452a8010 <line:370:9, col:34>
| |     `-CallExpr 0x5636452a7fd8 <col:16, col:34> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5636452a7ef8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5636452a7f78 <col:21> 'const char *' lvalue ParmVar 0x563645277550 'keyword' 'const char *'
| |       |-IntegerLiteral 0x5636452a7f98 <col:30> 'int' 0
| |       `-DeclRefExpr 0x5636452a7fb8 <col:33> 'T' lvalue ParmVar 0x5636452775f8 'x' 'T &'
| |-CXXMethodDecl 0x5636453e9f18 <line:369:5, line:371:5> line:369:11 used read 'Args &(const char *, unsigned short &)'
| | |-TemplateArgument type 'unsigned short'
| | |-ParmVarDecl 0x5636453e9d38 <col:16, col:28> col:28 keyword 'const char *'
| | `-ParmVarDecl 0x5636453e9e08 <col:37, col:40> col:40 x 'unsigned short &'
| |-CXXMethodDecl 0x5636453ea428 <col:5, line:371:5> line:369:11 used read 'Args &(const char *, String &)'
| | |-TemplateArgument type 'String'
| | |-ParmVarDecl 0x5636453ea240 <col:16, col:28> col:28 keyword 'const char *'
| | `-ParmVarDecl 0x5636453ea318 <col:37, col:40> col:40 x 'String &'
| |-CXXMethodDecl 0x5636453ea8c8 <col:5, line:371:5> line:369:11 used read 'Args &(const char *, int &)'
| | |-TemplateArgument type 'int'
| | |-ParmVarDecl 0x5636453ea6e0 <col:16, col:28> col:28 keyword 'const char *'
| | `-ParmVarDecl 0x5636453ea7b8 <col:37, col:40> col:40 x 'int &'
| `-CXXMethodDecl 0x5636453ead58 <col:5, line:371:5> line:369:11 used read 'Args &(const char *, bool &)'
|   |-TemplateArgument type 'bool'
|   |-ParmVarDecl 0x5636453eab78 <col:16, col:28> col:28 keyword 'const char *'
|   `-ParmVarDecl 0x5636453eac48 <col:37, col:40> col:40 x 'bool &'
|-FunctionTemplateDecl 0x563645277ad8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x563645277810 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563645277a38 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5636452778c0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563645277968 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5636452a8170 <col:45, line:375:5>
|     `-ReturnStmt 0x5636452a8160 <line:374:9, col:42>
|       `-CallExpr 0x5636452a8128 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636452a8048 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636452a80c8 <col:21> 'const char *' lvalue ParmVar 0x5636452778c0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5636452a80e8 <col:30> 'const int' lvalue Var 0x5636452770d0 'mandatory' 'const int'
|         `-DeclRefExpr 0x5636452a8108 <col:41> 'T' lvalue ParmVar 0x563645277968 'x' 'T &'
|-FunctionTemplateDecl 0x563645277e08 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x563645277b40 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563645277d68 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x563645277bf0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563645277c98 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5636452a82c0 <col:45, line:379:5>
|     `-ReturnStmt 0x5636452a82b0 <line:378:9, col:43>
|       `-CallExpr 0x5636452a8278 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636452a8198 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636452a8218 <col:21> 'const char *' lvalue ParmVar 0x563645277bf0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5636452a8238 <col:30> 'const int' lvalue Var 0x5636452771c8 'positional' 'const int'
|         `-DeclRefExpr 0x5636452a8258 <col:42> 'T' lvalue ParmVar 0x563645277c98 'x' 'T &'
|-FunctionTemplateDecl 0x563645278138 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x563645277e70 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x563645278098 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x563645277f20 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x563645277fc8 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x5636452a84c0 <col:46, line:383:5>
| |   `-ReturnStmt 0x5636452a84b0 <line:382:9, col:55>
| |     `-CallExpr 0x5636452a8478 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5636452a82e8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5636452a8368 <col:21> 'const char *' lvalue ParmVar 0x563645277f20 'keyword' 'const char *'
| |       |-BinaryOperator 0x5636452a8438 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x5636452a83e8 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x5636452a83c8 <col:30> 'const int' lvalue Var 0x5636452770d0 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x5636452a8420 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5636452a8400 <col:42> 'const int' lvalue Var 0x5636452771c8 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x5636452a8458 <col:54> 'T' lvalue ParmVar 0x563645277fc8 'x' 'T &'
| `-CXXMethodDecl 0x5636453e8928 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, in_addr &)'
|   |-TemplateArgument type 'in_addr'
|   |-ParmVarDecl 0x5636453e8740 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x5636453e8818 <col:40, col:43> col:43 x 'in_addr &'
|-FunctionTemplateDecl 0x563645278538 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x5636452781a0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563645278498 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x563645278250 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636452782d0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x563645278378 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x5636452a8600 <col:54, line:388:5>
|     |-CallExpr 0x5636452a8588 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5636452a84d8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5636452a8518 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5636452a8528 <col:30> 'const char *' lvalue ParmVar 0x563645278250 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5636452a8548 <col:39> 'int' lvalue ParmVar 0x5636452782d0 'flags' 'int'
|     | `-DeclRefExpr 0x5636452a8568 <col:46> 'T' lvalue ParmVar 0x563645278378 'x' 'T &'
|     `-ReturnStmt 0x5636452a85f0 <line:387:9, col:17>
|       `-UnaryOperator 0x5636452a85d8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5636452a85c8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5636452789e8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x5636452785a8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x563645278628 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x563645278948 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5636452786e8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563645278788 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x563645278828 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x5636452a8770 <col:74, line:403:5>
|     `-ReturnStmt 0x5636452a8760 <line:402:9, col:56>
|       `-CallExpr 0x5636452a8720 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636452a8630 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636452a86a0 <col:28> 'const char *' lvalue ParmVar 0x5636452786e8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5636452a86c0 <col:37> 'int' 0
|         |-DeclRefExpr 0x5636452a86e0 <col:40> 'T' lvalue ParmVar 0x563645278788 'x' 'T &'
|         `-DeclRefExpr 0x5636452a8700 <col:43> 'const V' lvalue ParmVar 0x563645278828 'default_value' 'const V &'
|-FunctionTemplateDecl 0x563645278e58 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x563645278a58 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x563645278ad8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x563645278db8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x563645278b98 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563645278c38 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x563645278cd8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x5636452a88d8 <col:76, line:407:5>
|     `-ReturnStmt 0x5636452a88c8 <line:406:9, col:65>
|       `-CallExpr 0x5636452a8888 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636452a8798 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636452a8808 <col:28> 'const char *' lvalue ParmVar 0x563645278b98 'keyword' 'const char *'
|         |-DeclRefExpr 0x5636452a8828 <col:37> 'const int' lvalue Var 0x5636452771c8 'positional' 'const int'
|         |-DeclRefExpr 0x5636452a8848 <col:49> 'T' lvalue ParmVar 0x563645278c38 'x' 'T &'
|         `-DeclRefExpr 0x5636452a8868 <col:52> 'const V' lvalue ParmVar 0x563645278cd8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5636452793a8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x563645278ec8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x563645278f48 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x563645279308 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x563645279008 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563645279088 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x563645279128 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x5636452791c8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x5636452a8a40 <col:85, line:412:5>
|     |-CallExpr 0x5636452a89c0 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5636452a88f0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5636452a8930 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5636452a8940 <col:37> 'const char *' lvalue ParmVar 0x563645279008 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5636452a8960 <col:46> 'int' lvalue ParmVar 0x563645279088 'flags' 'int'
|     | |-DeclRefExpr 0x5636452a8980 <col:53> 'T' lvalue ParmVar 0x563645279128 'x' 'T &'
|     | `-DeclRefExpr 0x5636452a89a0 <col:56> 'const V' lvalue ParmVar 0x5636452791c8 'default_value' 'const V &'
|     `-ReturnStmt 0x5636452a8a30 <line:411:9, col:17>
|       `-UnaryOperator 0x5636452a8a18 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5636452a8a08 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563645279838 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x563645279420 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563645279498 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x563645279798 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x563645279558 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5636452795d0 <col:37, col:39> col:39 referenced parser 'P'
| | |-ParmVarDecl 0x563645279678 <col:47, col:50> col:50 referenced x 'T &'
| | `-CompoundStmt 0x5636452a8bc0 <col:53, line:425:5>
| |   `-ReturnStmt 0x5636452a8bb0 <line:424:9, col:42>
| |     `-CallExpr 0x5636452a8b70 <col:16, col:42> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5636452a8a70 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5636452a8af0 <col:21> 'const char *' lvalue ParmVar 0x563645279558 'keyword' 'const char *'
| |       |-IntegerLiteral 0x5636452a8b10 <col:30> 'int' 0
| |       |-DeclRefExpr 0x5636452a8b30 <col:33> 'P' lvalue ParmVar 0x5636452795d0 'parser' 'P'
| |       `-DeclRefExpr 0x5636452a8b50 <col:41> 'T' lvalue ParmVar 0x563645279678 'x' 'T &'
| `-CXXMethodDecl 0x5636453e9588 <line:423:5, line:425:5> line:423:11 used read 'Args &(const char *, SecondsArg, unsigned int &)'
|   |-TemplateArgument type 'SecondsArg'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x5636453e92f8 <col:16, col:28> col:28 keyword 'const char *'
|   |-ParmVarDecl 0x5636453e9398 <col:37, col:39> col:39 parser 'SecondsArg':'SecondsArg'
|   `-ParmVarDecl 0x5636453e9468 <col:47, col:50> col:50 x 'unsigned int &'
|-FunctionTemplateDecl 0x563645279c88 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x5636452798a8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563645279928 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563645279be8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5636452799e8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563645279a60 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x563645279b08 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5636452a8d38 <col:55, line:429:5>
|     `-ReturnStmt 0x5636452a8d28 <line:428:9, col:50>
|       `-CallExpr 0x5636452a8ce8 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636452a8be8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636452a8c68 <col:21> 'const char *' lvalue ParmVar 0x5636452799e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5636452a8c88 <col:30> 'const int' lvalue Var 0x5636452770d0 'mandatory' 'const int'
|         |-DeclRefExpr 0x5636452a8ca8 <col:41> 'P' lvalue ParmVar 0x563645279a60 'parser' 'P'
|         `-DeclRefExpr 0x5636452a8cc8 <col:49> 'T' lvalue ParmVar 0x563645279b08 'x' 'T &'
|-FunctionTemplateDecl 0x56364527a0d8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x563645279cf8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563645279d78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56364527a038 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563645279e38 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563645279eb0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x563645279f58 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5636452a8eb0 <col:55, line:433:5>
|     `-ReturnStmt 0x5636452a8ea0 <line:432:9, col:51>
|       `-CallExpr 0x5636452a8e60 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636452a8d60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636452a8de0 <col:21> 'const char *' lvalue ParmVar 0x563645279e38 'keyword' 'const char *'
|         |-DeclRefExpr 0x5636452a8e00 <col:30> 'const int' lvalue Var 0x5636452771c8 'positional' 'const int'
|         |-DeclRefExpr 0x5636452a8e20 <col:42> 'P' lvalue ParmVar 0x563645279eb0 'parser' 'P'
|         `-DeclRefExpr 0x5636452a8e40 <col:50> 'T' lvalue ParmVar 0x563645279f58 'x' 'T &'
|-FunctionTemplateDecl 0x56364527a528 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x56364527a148 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56364527a1c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56364527a488 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56364527a288 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56364527a300 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x56364527a3a8 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x5636452a90d8 <col:56, line:437:5>
|     `-ReturnStmt 0x5636452a90c8 <line:436:9, col:63>
|       `-CallExpr 0x5636452a9088 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636452a8ed8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636452a8f58 <col:21> 'const char *' lvalue ParmVar 0x56364527a288 'keyword' 'const char *'
|         |-BinaryOperator 0x5636452a9028 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5636452a8fd8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5636452a8fb8 <col:30> 'const int' lvalue Var 0x5636452770d0 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5636452a9010 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5636452a8ff0 <col:42> 'const int' lvalue Var 0x5636452771c8 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5636452a9048 <col:54> 'P' lvalue ParmVar 0x56364527a300 'parser' 'P'
|         `-DeclRefExpr 0x5636452a9068 <col:62> 'T' lvalue ParmVar 0x56364527a3a8 'x' 'T &'
|-FunctionTemplateDecl 0x56364527aa58 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x56364527a598 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56364527a618 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56364527a9b8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x56364527a6d8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56364527a758 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x56364527a7d0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x56364527a878 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x5636452a9240 <col:64, line:442:5>
|     |-CallExpr 0x5636452a91c0 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5636452a90f0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5636452a9130 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5636452a9140 <col:30> 'const char *' lvalue ParmVar 0x56364527a6d8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5636452a9160 <col:39> 'int' lvalue ParmVar 0x56364527a758 'flags' 'int'
|     | |-DeclRefExpr 0x5636452a9180 <col:46> 'P' lvalue ParmVar 0x56364527a7d0 'parser' 'P'
|     | `-DeclRefExpr 0x5636452a91a0 <col:54> 'T' lvalue ParmVar 0x56364527a878 'x' 'T &'
|     `-ReturnStmt 0x5636452a9230 <line:441:9, col:17>
|       `-UnaryOperator 0x5636452a9218 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5636452a9208 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56364527b058 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x56364527aad0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56364527ab48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x56364527abc8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56364527afb8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x56364527ac90 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56364527ad08 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x56364527ada8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x56364527ae78 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x5636452a93d8 <col:84, line:458:5>
|     `-ReturnStmt 0x5636452a93c8 <line:457:9, col:64>
|       `-CallExpr 0x5636452a9380 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636452a9270 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636452a92e0 <col:28> 'const char *' lvalue ParmVar 0x56364527ac90 'keyword' 'const char *'
|         |-IntegerLiteral 0x5636452a9300 <col:37> 'int' 0
|         |-DeclRefExpr 0x5636452a9320 <col:40> 'P' lvalue ParmVar 0x56364527ad08 'parser' 'P'
|         |-DeclRefExpr 0x5636452a9340 <col:48> 'T' lvalue ParmVar 0x56364527ada8 'x' 'T &'
|         `-DeclRefExpr 0x5636452a9360 <col:51> 'const V' lvalue ParmVar 0x56364527ae78 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56364527b5d8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x56364527b0d0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56364527b148 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x56364527b1c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56364527b538 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x56364527b290 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56364527b308 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x56364527b3a8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x56364527b448 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x5636452a9568 <col:86, line:462:5>
|     `-ReturnStmt 0x5636452a9558 <line:461:9, col:73>
|       `-CallExpr 0x5636452a9510 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636452a9400 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636452a9470 <col:28> 'const char *' lvalue ParmVar 0x56364527b290 'keyword' 'const char *'
|         |-DeclRefExpr 0x5636452a9490 <col:37> 'const int' lvalue Var 0x5636452771c8 'positional' 'const int'
|         |-DeclRefExpr 0x5636452a94b0 <col:49> 'P' lvalue ParmVar 0x56364527b308 'parser' 'P'
|         |-DeclRefExpr 0x5636452a94d0 <col:57> 'T' lvalue ParmVar 0x56364527b3a8 'x' 'T &'
|         `-DeclRefExpr 0x5636452a94f0 <col:60> 'const V' lvalue ParmVar 0x56364527b448 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56364527bc38 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x56364527b650 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56364527b6c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x56364527b748 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56364527bb98 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x56364527b810 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56364527b890 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x56364527b908 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x56364527b9a8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x56364527ba48 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x5636452a96f8 <col:95, line:467:5>
|     |-CallExpr 0x5636452a9670 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5636452a9580 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5636452a95c0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5636452a95d0 <col:37> 'const char *' lvalue ParmVar 0x56364527b810 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5636452a95f0 <col:46> 'int' lvalue ParmVar 0x56364527b890 'flags' 'int'
|     | |-DeclRefExpr 0x5636452a9610 <col:53> 'P' lvalue ParmVar 0x56364527b908 'parser' 'P'
|     | |-DeclRefExpr 0x5636452a9630 <col:61> 'T' lvalue ParmVar 0x56364527b9a8 'x' 'T &'
|     | `-DeclRefExpr 0x5636452a9650 <col:64> 'const V' lvalue ParmVar 0x56364527ba48 'default_value' 'const V &'
|     `-ReturnStmt 0x5636452a96e8 <line:466:9, col:17>
|       `-UnaryOperator 0x5636452a96d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5636452a96c0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56364527c218 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x56364527bcb8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56364527bd38 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56364527bdb8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56364527c178 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56364527be80 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56364527bef8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x56364527bf98 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56364527c038 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x5636452a98a0 <col:63, line:481:5>
|     `-ReturnStmt 0x5636452a9890 <line:480:9, col:47>
|       `-CallExpr 0x5636452a9848 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636452a9728 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636452a97a8 <col:21> 'const char *' lvalue ParmVar 0x56364527be80 'keyword' 'const char *'
|         |-IntegerLiteral 0x5636452a97c8 <col:30> 'int' 0
|         |-DeclRefExpr 0x5636452a97e8 <col:33> 'P' lvalue ParmVar 0x56364527bef8 'parser' 'P'
|         |-DeclRefExpr 0x5636452a9808 <col:41> 'T1' lvalue ParmVar 0x56364527bf98 'x1' 'T1 &'
|         `-DeclRefExpr 0x5636452a9828 <col:45> 'T2' lvalue ParmVar 0x56364527c038 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56364527c798 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x56364527c290 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56364527c308 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56364527c388 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56364527c6f8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56364527c450 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56364527c4c8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56364527c568 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56364527c608 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5636452a9a40 <col:65, line:485:5>
|     `-ReturnStmt 0x5636452a9a30 <line:484:9, col:55>
|       `-CallExpr 0x5636452a99e8 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636452a98c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636452a9948 <col:21> 'const char *' lvalue ParmVar 0x56364527c450 'keyword' 'const char *'
|         |-DeclRefExpr 0x5636452a9968 <col:30> 'const int' lvalue Var 0x5636452770d0 'mandatory' 'const int'
|         |-DeclRefExpr 0x5636452a9988 <col:41> 'P' lvalue ParmVar 0x56364527c4c8 'parser' 'P'
|         |-DeclRefExpr 0x5636452a99a8 <col:49> 'T1' lvalue ParmVar 0x56364527c568 'x1' 'T1 &'
|         `-DeclRefExpr 0x5636452a99c8 <col:53> 'T2' lvalue ParmVar 0x56364527c608 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56364527cd18 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x56364527c810 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56364527c888 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56364527c908 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56364527cc78 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56364527c9d0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56364527ca48 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56364527cae8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56364527cb88 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5636452ab3a0 <col:65, line:489:5>
|     `-ReturnStmt 0x5636452ab390 <line:488:9, col:56>
|       `-CallExpr 0x5636452a9b88 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636452a9a68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636452a9ae8 <col:21> 'const char *' lvalue ParmVar 0x56364527c9d0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5636452a9b08 <col:30> 'const int' lvalue Var 0x5636452771c8 'positional' 'const int'
|         |-DeclRefExpr 0x5636452a9b28 <col:42> 'P' lvalue ParmVar 0x56364527ca48 'parser' 'P'
|         |-DeclRefExpr 0x5636452a9b48 <col:50> 'T1' lvalue ParmVar 0x56364527cae8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5636452a9b68 <col:54> 'T2' lvalue ParmVar 0x56364527cb88 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56364527d298 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x56364527cd90 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56364527ce08 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56364527ce88 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56364527d1f8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56364527cf50 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56364527cfc8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x56364527d068 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56364527d108 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x5636452ab5f0 <col:66, line:493:5>
|     `-ReturnStmt 0x5636452ab5e0 <line:492:9, col:68>
|       `-CallExpr 0x5636452ab598 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636452ab3c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636452ab448 <col:21> 'const char *' lvalue ParmVar 0x56364527cf50 'keyword' 'const char *'
|         |-BinaryOperator 0x5636452ab518 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5636452ab4c8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5636452ab4a8 <col:30> 'const int' lvalue Var 0x5636452770d0 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5636452ab500 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5636452ab4e0 <col:42> 'const int' lvalue Var 0x5636452771c8 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5636452ab538 <col:54> 'P' lvalue ParmVar 0x56364527cfc8 'parser' 'P'
|         |-DeclRefExpr 0x5636452ab558 <col:62> 'T1' lvalue ParmVar 0x56364527d068 'x1' 'T1 &'
|         `-DeclRefExpr 0x5636452ab578 <col:66> 'T2' lvalue ParmVar 0x56364527d108 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56364527d8f8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x56364527d310 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56364527d388 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56364527d408 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56364527d858 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56364527d4d0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56364527d550 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x56364527d5c8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x56364527d668 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56364527d708 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x5636452ab780 <col:74, line:498:5>
|     |-CallExpr 0x5636452ab6f8 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5636452ab608 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5636452ab648 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5636452ab658 <col:30> 'const char *' lvalue ParmVar 0x56364527d4d0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5636452ab678 <col:39> 'int' lvalue ParmVar 0x56364527d550 'flags' 'int'
|     | |-DeclRefExpr 0x5636452ab698 <col:46> 'P' lvalue ParmVar 0x56364527d5c8 'parser' 'P'
|     | |-DeclRefExpr 0x5636452ab6b8 <col:54> 'T1' lvalue ParmVar 0x56364527d668 'x1' 'T1 &'
|     | `-DeclRefExpr 0x5636452ab6d8 <col:58> 'T2' lvalue ParmVar 0x56364527d708 'x2' 'T2 &'
|     `-ReturnStmt 0x5636452ab770 <line:497:9, col:17>
|       `-UnaryOperator 0x5636452ab758 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5636452ab748 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56364527dc58 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x56364527d978 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56364527dbb8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56364527da30 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56364527daa8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x5636452ab8c8 <col:52, line:509:5>
|     `-ReturnStmt 0x5636452ab8b8 <line:508:9, col:44>
|       `-CallExpr 0x5636452ab880 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636452ab7b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636452ab820 <col:26> 'const char *' lvalue ParmVar 0x56364527da30 'keyword' 'const char *'
|         |-IntegerLiteral 0x5636452ab840 <col:35> 'int' 0
|         `-DeclRefExpr 0x5636452ab860 <col:38> 'P' lvalue ParmVar 0x56364527daa8 'parser' 'P'
|-FunctionTemplateDecl 0x56364527df58 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x56364527dcc0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56364527deb8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56364527dd70 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56364527dde8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5636452aba08 <col:54, line:513:5>
|     `-ReturnStmt 0x5636452ab9f8 <line:512:9, col:52>
|       `-CallExpr 0x5636452ab9c0 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636452ab8f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636452ab960 <col:26> 'const char *' lvalue ParmVar 0x56364527dd70 'keyword' 'const char *'
|         |-DeclRefExpr 0x5636452ab980 <col:35> 'const int' lvalue Var 0x5636452770d0 'mandatory' 'const int'
|         `-DeclRefExpr 0x5636452ab9a0 <col:46> 'P' lvalue ParmVar 0x56364527dde8 'parser' 'P'
|-FunctionTemplateDecl 0x56364527e258 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x56364527dfc0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56364527e1b8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56364527e070 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56364527e0e8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5636452abb48 <col:54, line:517:5>
|     `-ReturnStmt 0x5636452abb38 <line:516:9, col:53>
|       `-CallExpr 0x5636452abb00 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636452aba30 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636452abaa0 <col:26> 'const char *' lvalue ParmVar 0x56364527e070 'keyword' 'const char *'
|         |-DeclRefExpr 0x5636452abac0 <col:35> 'const int' lvalue Var 0x5636452771c8 'positional' 'const int'
|         `-DeclRefExpr 0x5636452abae0 <col:47> 'P' lvalue ParmVar 0x56364527e0e8 'parser' 'P'
|-FunctionTemplateDecl 0x56364527e558 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x56364527e2c0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56364527e4b8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56364527e370 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56364527e3e8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x5636452abd38 <col:55, line:521:5>
|     `-ReturnStmt 0x5636452abd28 <line:520:9, col:65>
|       `-CallExpr 0x5636452abcf0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636452abb70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636452abbe0 <col:26> 'const char *' lvalue ParmVar 0x56364527e370 'keyword' 'const char *'
|         |-BinaryOperator 0x5636452abcb0 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x5636452abc60 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5636452abc40 <col:35> 'const int' lvalue Var 0x5636452770d0 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5636452abc98 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5636452abc78 <col:47> 'const int' lvalue Var 0x5636452771c8 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5636452abcd0 <col:59> 'P' lvalue ParmVar 0x56364527e3e8 'parser' 'P'
|-FunctionTemplateDecl 0x56364527e928 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x56364527e5c0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56364527e888 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x56364527e670 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56364527e6f0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x56364527e768 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x5636452abe78 <col:63, line:526:5>
|     |-CallExpr 0x5636452abe00 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5636452abd50 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x5636452abd90 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x5636452abda0 <col:35> 'const char *' lvalue ParmVar 0x56364527e670 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5636452abdc0 <col:44> 'int' lvalue ParmVar 0x56364527e6f0 'flags' 'int'
|     | `-DeclRefExpr 0x5636452abde0 <col:51> 'P' lvalue ParmVar 0x56364527e768 'parser' 'P'
|     `-ReturnStmt 0x5636452abe68 <line:525:9, col:17>
|       `-UnaryOperator 0x5636452abe50 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5636452abe40 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56364527ed78 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x56364527e998 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56364527ea18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56364527ecd8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56364527ead8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56364527eb50 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x56364527ebf8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x5636452abfd0 <col:58, line:541:5>
|     `-ReturnStmt 0x5636452abfc0 <line:540:9, col:39>
|       `-CallExpr 0x5636452abf88 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636452abea8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636452abf28 <col:21> 'const char *' lvalue ParmVar 0x56364527ead8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5636452abf48 <col:30> 'P' lvalue ParmVar 0x56364527eb50 'parser' 'P'
|         `-DeclRefExpr 0x5636452abf68 <col:38> 'T' lvalue ParmVar 0x56364527ebf8 'x' 'T &'
|-FunctionTemplateDecl 0x563645283938 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x56364527ede8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56364527ee68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563645283898 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56364527ef28 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56364527efa0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x56364527f048 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5636452ac108 <col:60, line:545:5>
|     `-ReturnStmt 0x5636452ac0f8 <line:544:9, col:41>
|       `-CallExpr 0x5636452ac0c0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636452abff8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636452ac060 <col:23> 'const char *' lvalue ParmVar 0x56364527ef28 'keyword' 'const char *'
|         |-DeclRefExpr 0x5636452ac080 <col:32> 'P' lvalue ParmVar 0x56364527efa0 'parser' 'P'
|         `-DeclRefExpr 0x5636452ac0a0 <col:40> 'T' lvalue ParmVar 0x56364527f048 'x' 'T &'
|-FunctionTemplateDecl 0x563645283d88 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x5636452839a8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563645283a28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563645283ce8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563645283ae8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563645283b60 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x563645283c08 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5636452ac240 <col:60, line:549:5>
|     `-ReturnStmt 0x5636452ac230 <line:548:9, col:41>
|       `-CallExpr 0x5636452ac1f8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636452ac130 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636452ac198 <col:23> 'const char *' lvalue ParmVar 0x563645283ae8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5636452ac1b8 <col:32> 'P' lvalue ParmVar 0x563645283b60 'parser' 'P'
|         `-DeclRefExpr 0x5636452ac1d8 <col:40> 'T' lvalue ParmVar 0x563645283c08 'x' 'T &'
|-FunctionTemplateDecl 0x5636452841d8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x563645283df8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563645283e78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563645284138 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563645283f38 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563645283fb0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x563645284058 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x5636452ac378 <col:61, line:553:5>
|     `-ReturnStmt 0x5636452ac368 <line:552:9, col:42>
|       `-CallExpr 0x5636452ac330 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636452ac268 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636452ac2d0 <col:24> 'const char *' lvalue ParmVar 0x563645283f38 'keyword' 'const char *'
|         |-DeclRefExpr 0x5636452ac2f0 <col:33> 'P' lvalue ParmVar 0x563645283fb0 'parser' 'P'
|         `-DeclRefExpr 0x5636452ac310 <col:41> 'T' lvalue ParmVar 0x563645284058 'x' 'T &'
|-FunctionTemplateDecl 0x5636452846b8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x563645284248 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5636452842c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563645284618 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x563645284388 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563645284408 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x563645284480 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x563645284528 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x5636452ac4f0 <col:69, line:557:5>
|     `-ReturnStmt 0x5636452ac4e0 <line:556:9, col:46>
|       `-CallExpr 0x5636452ac4a0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636452ac3a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636452ac420 <col:21> 'const char *' lvalue ParmVar 0x563645284388 'keyword' 'const char *'
|         |-DeclRefExpr 0x5636452ac440 <col:30> 'int' lvalue ParmVar 0x563645284408 'flags' 'int'
|         |-DeclRefExpr 0x5636452ac460 <col:37> 'P' lvalue ParmVar 0x563645284480 'parser' 'P'
|         `-DeclRefExpr 0x5636452ac480 <col:45> 'T' lvalue ParmVar 0x563645284528 'x' 'T &'
|-FunctionTemplateDecl 0x5636452849c8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x563645284730 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563645284928 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5636452847e0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563645284858 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x5636452ac630 <col:56, line:571:5>
|     `-ReturnStmt 0x5636452ac620 <line:570:9, col:48>
|       `-CallExpr 0x5636452ac5e8 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636452ac518 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636452ac588 <col:30> 'const char *' lvalue ParmVar 0x5636452847e0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5636452ac5a8 <col:39> 'int' 0
|         `-DeclRefExpr 0x5636452ac5c8 <col:42> 'P' lvalue ParmVar 0x563645284858 'parser' 'P'
|-FunctionTemplateDecl 0x563645284d58 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x563645284a30 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563645284cb8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x563645284ae0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563645284b60 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x563645284bd8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5636452ac800 <col:67, line:576:5>
|     |-CallExpr 0x5636452ac788 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5636452ac648 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5636452ac688 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5636452ac698 <col:39> 'const char *' lvalue ParmVar 0x563645284ae0 'keyword' 'const char *'
|     | |-BinaryOperator 0x5636452ac748 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5636452ac6f8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5636452ac6b8 <col:48> 'int' lvalue ParmVar 0x563645284b60 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5636452ac730 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5636452ac710 <col:56> 'const int' lvalue Var 0x5636452773b8 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x5636452ac768 <col:68> 'P' lvalue ParmVar 0x563645284bd8 'parser' 'P'
|     `-ReturnStmt 0x5636452ac7f0 <line:575:9, col:17>
|       `-UnaryOperator 0x5636452ac7d8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5636452ac7c8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5636452851a8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x563645284dc8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563645284e48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563645285108 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563645284f08 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563645284f80 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x563645285028 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x5636452ac970 <col:62, line:592:5>
|     `-ReturnStmt 0x5636452ac960 <line:591:9, col:51>
|       `-CallExpr 0x5636452ac920 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636452ac830 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636452ac8a0 <col:30> 'const char *' lvalue ParmVar 0x563645284f08 'keyword' 'const char *'
|         |-IntegerLiteral 0x5636452ac8c0 <col:39> 'int' 0
|         |-DeclRefExpr 0x5636452ac8e0 <col:42> 'P' lvalue ParmVar 0x563645284f80 'parser' 'P'
|         `-DeclRefExpr 0x5636452ac900 <col:50> 'T' lvalue ParmVar 0x563645285028 'x' 'T &'
|-FunctionTemplateDecl 0x563645285688 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x563645285218 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563645285298 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5636452855e8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x563645285358 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636452853d8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x563645285450 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x5636452854f8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x5636452acb68 <col:73, line:597:5>
|     |-CallExpr 0x5636452acae8 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5636452ac988 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5636452ac9c8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5636452ac9d8 <col:39> 'const char *' lvalue ParmVar 0x563645285358 'keyword' 'const char *'
|     | |-BinaryOperator 0x5636452aca88 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5636452aca38 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5636452ac9f8 <col:48> 'int' lvalue ParmVar 0x5636452853d8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5636452aca70 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5636452aca50 <col:56> 'const int' lvalue Var 0x5636452773b8 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5636452acaa8 <col:68> 'P' lvalue ParmVar 0x563645285450 'parser' 'P'
|     | `-DeclRefExpr 0x5636452acac8 <col:76> 'T' lvalue ParmVar 0x5636452854f8 'x' 'T &'
|     `-ReturnStmt 0x5636452acb58 <line:596:9, col:17>
|       `-UnaryOperator 0x5636452acb40 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5636452acb30 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563645285c38 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x563645285700 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563645285778 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563645285b98 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x563645285838 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636452858b0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x563645285a70 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5636452accd8 <col:65, line:614:5>
|     `-ReturnStmt 0x5636452accc8 <line:613:9, col:46>
|       `-CallExpr 0x5636452acc88 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636452acb98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636452acc08 <col:25> 'const char *' lvalue ParmVar 0x563645285838 'keyword' 'const char *'
|         |-IntegerLiteral 0x5636452acc28 <col:34> 'int' 0
|         |-DeclRefExpr 0x5636452acc48 <col:37> 'P' lvalue ParmVar 0x5636452858b0 'parser' 'P'
|         `-DeclRefExpr 0x5636452acc68 <col:45> 'Vector<T>' lvalue ParmVar 0x563645285a70 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x563645286068 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x563645285ca8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563645285fc8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x563645285d60 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563645285eb0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5636452acef0 <col:55, line:618:5>
|     `-ReturnStmt 0x5636452acee0 <line:617:9, col:55>
|       `-CallExpr 0x5636452acea0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636452acd00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636452acd70 <col:25> 'const char *' lvalue ParmVar 0x563645285d60 'keyword' 'const char *'
|         |-IntegerLiteral 0x5636452acd90 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x5636452ace60 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5636452ace80 <col:54> 'Vector<T>' lvalue ParmVar 0x563645285eb0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x563645286638 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x5636452860d0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563645286148 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563645286598 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x563645286208 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563645286288 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x563645286300 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x563645286450 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5636452ad0e8 <col:76, line:623:5>
|     |-CallExpr 0x5636452ad068 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5636452acf08 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x5636452acf48 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x5636452acf58 <col:34> 'const char *' lvalue ParmVar 0x563645286208 'keyword' 'const char *'
|     | |-BinaryOperator 0x5636452ad008 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x5636452acfb8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5636452acf78 <col:43> 'int' lvalue ParmVar 0x563645286288 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5636452acff0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5636452acfd0 <col:51> 'const int' lvalue Var 0x5636452773b8 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5636452ad028 <col:63> 'P' lvalue ParmVar 0x563645286300 'parser' 'P'
|     | `-DeclRefExpr 0x5636452ad048 <col:71> 'Vector<T>' lvalue ParmVar 0x563645286450 'x' 'Vector<T> &'
|     `-ReturnStmt 0x5636452ad0d8 <line:622:9, col:17>
|       `-UnaryOperator 0x5636452ad0c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5636452ad0b0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563645286b78 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x5636452866b0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563645286728 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563645286ad8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x5636452867e8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563645286868 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5636452869b0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5636452ad350 <col:66, line:627:5>
|     `-ReturnStmt 0x5636452ad340 <line:626:9, col:59>
|       `-CallExpr 0x5636452ad300 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5636452ad118 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5636452ad188 <col:25> 'const char *' lvalue ParmVar 0x5636452867e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5636452ad1a8 <col:34> 'int' lvalue ParmVar 0x563645286868 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x5636452ad2c0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5636452ad2e0 <col:58> 'Vector<T>' lvalue ParmVar 0x5636452869b0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x563645286c08 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x5636452ad3d0 <col:25, line:633:5>
|   `-ReturnStmt 0x5636452ad3c0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x5636452ad3a8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5636452ad378 <col:16> 'const bool' lvalue ->_status 0x563645297328
|         `-CXXThisExpr 0x5636452ad368 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x563645286d88 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x563645286cc0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x5636452ad4b8 <col:27, line:639:5>
|   |-BinaryOperator 0x5636452ad460 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5636452ad3e8 <col:9> 'bool' lvalue ParmVar 0x563645286cc0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5636452ad448 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5636452ad418 <col:13> 'bool' lvalue ->_status 0x563645297328
|   |     `-CXXThisExpr 0x5636452ad408 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5636452ad4a8 <line:638:9, col:17>
|     `-UnaryOperator 0x5636452ad490 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5636452ad480 <col:17> 'Args *' this
|-CXXMethodDecl 0x563645286f08 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x563645286e48 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x5636452ad5a8 <col:39, line:644:5>
|   |-BinaryOperator 0x5636452ad550 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5636452ad4d8 <col:9> 'bool' lvalue ParmVar 0x563645286e48 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5636452ad538 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5636452ad508 <col:13> 'const bool' lvalue ->_status 0x563645297328
|   |     `-CXXThisExpr 0x5636452ad4f8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5636452ad598 <line:643:9, col:17>
|     `-UnaryOperator 0x5636452ad580 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5636452ad570 <col:17> 'const Args *' this
|-CXXMethodDecl 0x563645286fd0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x5636452ad650 <col:30, line:651:5>
|   `-ReturnStmt 0x5636452ad640 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x5636452ad628 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5636452ad5f8 <col:16> 'bool' lvalue ->_read_status 0x56364526e7c0
|         `-ImplicitCastExpr 0x5636452ad5d8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x5636452ad5c8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x563645287118 <line:655:5, line:658:5> line:655:11 used read_status 'Args &(bool &)'
| |-ParmVarDecl 0x563645287088 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x5636452ad758 <col:32, line:658:5>
|   |-BinaryOperator 0x5636452ad700 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5636452ad668 <col:9> 'bool' lvalue ParmVar 0x563645287088 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5636452ad6e8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5636452ad6b8 <col:13> 'bool' lvalue ->_read_status 0x56364526e7c0
|   |     `-ImplicitCastExpr 0x5636452ad698 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5636452ad688 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5636452ad748 <line:657:9, col:17>
|     `-UnaryOperator 0x5636452ad730 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5636452ad720 <col:17> 'Args *' this
|-CXXMethodDecl 0x563645287268 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5636452871d8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x5636452ad868 <col:44, line:663:5>
|   |-BinaryOperator 0x5636452ad810 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5636452ad778 <col:9> 'bool' lvalue ParmVar 0x5636452871d8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5636452ad7f8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5636452ad7c8 <col:13> 'bool' lvalue ->_read_status 0x56364526e7c0
|   |     `-ImplicitCastExpr 0x5636452ad7a8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5636452ad798 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5636452ad858 <line:662:9, col:17>
|     `-UnaryOperator 0x5636452ad840 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5636452ad830 <col:17> 'const Args *' this
|-CXXMethodDecl 0x563645287330 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x5636452873f8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x5636452874c0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x563645287588 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x563645287898 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x563645287628 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5636452877f8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x563645287708 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x5636452adc20 <col:19, line:706:5>
|     `-IfStmt 0x5636452adbf8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x5636452ad968 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x5636452adb28 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x5636452adaf8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x5636452adab8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x5636452ad9c0 <col:42> '<bound member function type>' ->simple_slot 0x5636452a6ef0
|       |     | `-CXXThisExpr 0x5636452ad9b0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x5636452ada58 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x5636452ada10 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x563644fff188
|       |     | `-DeclRefExpr 0x5636452ad9f0 <col:55> 'T' lvalue ParmVar 0x563645287708 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x5636452ada98 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x5636452adbe8 <line:705:13, col:34>
|         `-CallExpr 0x5636452adbc0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x5636452adb48 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x5636452adba0 <col:33> 'T' lvalue ParmVar 0x563645287708 'x' 'T &'
|-FunctionTemplateDecl 0x563645287b68 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x5636452878f8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563645287ac8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x5636452879d8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x5636452ae000 <col:31, line:717:5>
|     |-DeclStmt 0x5636452add60 <line:713:9, col:23>
|     | `-VarDecl 0x5636452adc48 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x5636452add38 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5636452adcc0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5636452add18 <col:21> 'T' lvalue ParmVar 0x5636452879d8 'x' 'T &'
|     |-IfStmt 0x5636452adfb0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x5636452ade58 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x5636452adf90 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5636452adf30 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5636452adec0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5636451b64d8 0x5636451b60f8 0x5636451b5d28 0x5636451b5948 0x5636451b5568 0x5636451b5198
|     |   | `-DeclRefExpr 0x5636452adea0 <col:14> 'T *' lvalue Var 0x5636452adc48 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x5636452adf70 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x5636452adfe8 <line:716:9, col:16>
|       `-DeclRefExpr 0x5636452adfc8 <col:16> 'T *' lvalue Var 0x5636452adc48 's' 'T *'
|-FunctionTemplateDecl 0x563645287f78 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x563645287bc8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x563645287c48 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x563645287ed8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x563645287d28 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x563645287dc8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x5636452ae310 <col:37, line:726:5>
|     |-IfStmt 0x5636452ae2a0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x5636452ae2c0 <line:723:13, col:26>
|     | | `-VarDecl 0x5636452ae068 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x5636452ae158 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x5636452ae0e0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x5636452ae138 <col:25> 'T' lvalue ParmVar 0x563645287d28 'x' 'T &'
|     | |-DeclRefExpr 0x5636452ae180 <col:16> 'T *' lvalue Var 0x5636452ae068 's' 'T *'
|     | `-BinaryOperator 0x5636452ae280 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5636452ae230 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5636452ae1c0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5636451b64d8 0x5636451b60f8 0x5636451b5d28 0x5636451b5948 0x5636451b5568 0x5636451b5198
|     |   | `-DeclRefExpr 0x5636452ae1a0 <col:14> 'T *' lvalue Var 0x5636452ae068 's' 'T *'
|     |   `-DeclRefExpr 0x5636452ae260 <col:18> 'const V' lvalue ParmVar 0x563645287dc8 'value' 'const V &'
|     `-ReturnStmt 0x5636452ae300 <line:725:9, col:17>
|       `-UnaryOperator 0x5636452ae2e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5636452ae2d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563645288378 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x563645287fe0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5636452882d8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x563645288090 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563645288110 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5636452881b8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x5636452af130 <col:65, line:737:5>
|     |-DeclStmt 0x5636452ae3a8 <line:732:9, col:26>
|     | `-VarDecl 0x5636452ae340 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5636452af0f8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x5636452af118 <line:733:13, col:58>
|       | `-VarDecl 0x5636452ae3d0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5636452ae5b0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5636452ae580 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5636452ae568 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5636452ae548 <col:26, col:58> 'String' (CXXTemporary 0x5636452ae548)
|       |           `-CXXMemberCallExpr 0x5636452ae4d8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5636452ae448 <col:26> '<bound member function type>' ->find 0x5636452a6508
|       |             | `-CXXThisExpr 0x5636452ae438 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5636452ae510 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5636452ae478 <col:31> 'const char *' lvalue ParmVar 0x563645288090 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5636452ae528 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5636452ae498 <col:40> 'int' lvalue ParmVar 0x563645288110 'flags' 'int'
|       |             `-DeclRefExpr 0x5636452ae4b8 <col:47> 'Args::Slot *' lvalue Var 0x5636452ae340 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5636452ae668 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5636452ae650 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5636452ae630 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5636452ae600 <col:20> '<bound member function type>' .operator int (String::*)() const 0x563644fc2158
|       |       `-ImplicitCastExpr 0x5636452ae5e8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5636452ae5c8 <col:20> 'String' lvalue Var 0x5636452ae3d0 'str' 'String'
|       `-CompoundStmt 0x5636452af0d8 <col:61, line:736:9>
|         |-DeclStmt 0x5636452aeb20 <line:734:13, col:76>
|         | `-VarDecl 0x5636452ae6b8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5636452aeaf0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5636452aea60 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5636452aeaa8 <col:60> 'T' lvalue ParmVar 0x5636452881b8 'variable' 'T &'
|         |     `-UnaryOperator 0x5636452aead8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5636452aeac8 <col:71> 'Args *' this
|         `-CallExpr 0x5636452af0a8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x5636452aeb48 <col:13> '<bound member function type>' ->postparse 0x5636452a6718
|           | `-CXXThisExpr 0x5636452aeb38 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5636452af068 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5636452aeb78 <col:23> 'T *' lvalue Var 0x5636452ae6b8 's' 'T *'
|           | `-CallExpr 0x5636452af028 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5636452aee00 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x5636452aef00 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x5636452aef20 <col:86> 'String' lvalue Var 0x5636452ae3d0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5636452aefd0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5636452aef60 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5636451b64d8 0x5636451b60f8 0x5636451b5d28 0x5636451b5948 0x5636451b5568 0x5636451b5198
|           |   | `-DeclRefExpr 0x5636452aef40 <col:92> 'T *' lvalue Var 0x5636452ae6b8 's' 'T *'
|           |   `-UnaryOperator 0x5636452af010 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5636452af000 <col:96> 'Args *' this
|           `-DeclRefExpr 0x5636452af088 <col:103> 'Args::Slot *' lvalue Var 0x5636452ae340 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5636452888c8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5636452883e8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x563645288468 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x563645288828 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x563645288528 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636452885a8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x563645288648 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x5636452886e8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x5636452affd0 <col:88, line:745:5>
|     |-DeclStmt 0x5636452af1c8 <line:741:9, col:26>
|     | `-VarDecl 0x5636452af160 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5636452af3e8 <line:742:9, col:55>
|     | `-VarDecl 0x5636452af1f0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5636452af3d0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5636452af3a0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5636452af388 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5636452af368 <col:22, col:54> 'String' (CXXTemporary 0x5636452af368)
|     |           `-CXXMemberCallExpr 0x5636452af2f8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5636452af268 <col:22> '<bound member function type>' ->find 0x5636452a6508
|     |             | `-CXXThisExpr 0x5636452af258 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5636452af330 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5636452af298 <col:27> 'const char *' lvalue ParmVar 0x563645288528 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5636452af348 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5636452af2b8 <col:36> 'int' lvalue ParmVar 0x5636452885a8 'flags' 'int'
|     |             `-DeclRefExpr 0x5636452af2d8 <col:43> 'Args::Slot *' lvalue Var 0x5636452af160 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5636452af7c0 <line:743:9, col:72>
|     | `-VarDecl 0x5636452af438 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5636452af790 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5636452af700 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5636452af748 <col:56> 'T' lvalue ParmVar 0x563645288648 'variable' 'T &'
|     |     `-UnaryOperator 0x5636452af778 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5636452af768 <col:67> 'Args *' this
|     `-CallExpr 0x5636452affa0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x5636452af7e8 <col:9> '<bound member function type>' ->postparse 0x5636452a6718
|       | `-CXXThisExpr 0x5636452af7d8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5636452aff60 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5636452af818 <col:19> 'T *' lvalue Var 0x5636452af438 's' 'T *'
|       | `-ParenExpr 0x5636452aff40 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x5636452aff10 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5636452afef8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5636452afee0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5636452afec0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5636452afe90 <col:25> '<bound member function type>' .operator int (String::*)() const 0x563644fc2158
|       |     |       `-ImplicitCastExpr 0x5636452afe78 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5636452af838 <col:25> 'String' lvalue Var 0x5636452af1f0 'str' 'String'
|       |     |-CallExpr 0x5636452afce8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5636452afac0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x5636452afbc0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x5636452afbe0 <col:89> 'String' lvalue Var 0x5636452af1f0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5636452afc90 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5636452afc20 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5636451b64d8 0x5636451b60f8 0x5636451b5d28 0x5636451b5948 0x5636451b5568 0x5636451b5198
|       |     | | `-DeclRefExpr 0x5636452afc00 <col:95> 'T *' lvalue Var 0x5636452af438 's' 'T *'
|       |     | `-UnaryOperator 0x5636452afcd0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5636452afcc0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x5636452afe58 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x5636452afe38 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x5636452afe08 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5636452afdb8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5636452afd48 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5636451b64d8 0x5636451b60f8 0x5636451b5d28 0x5636451b5948 0x5636451b5568 0x5636451b5198
|       |         | | `-DeclRefExpr 0x5636452afd28 <col:109> 'T *' lvalue Var 0x5636452af438 's' 'T *'
|       |         | `-DeclRefExpr 0x5636452afde8 <col:113> 'const V' lvalue ParmVar 0x5636452886e8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5636452afe28 <col:120> 'bool' true
|       `-DeclRefExpr 0x5636452aff80 <col:128> 'Args::Slot *' lvalue Var 0x5636452af160 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x563645288df8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x563645288940 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5636452889b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563645288d58 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x563645288a78 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563645288af8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x563645288b70 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x563645288c18 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x5636452b0bc8 <col:75, line:754:5>
|     |-DeclStmt 0x5636452b0078 <line:749:9, col:26>
|     | `-VarDecl 0x5636452b0010 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5636452b0b90 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x5636452b0bb0 <line:750:13, col:58>
|       | `-VarDecl 0x5636452b00a0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5636452b0280 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5636452b0250 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5636452b0238 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5636452b0218 <col:26, col:58> 'String' (CXXTemporary 0x5636452b0218)
|       |           `-CXXMemberCallExpr 0x5636452b01a8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5636452b0118 <col:26> '<bound member function type>' ->find 0x5636452a6508
|       |             | `-CXXThisExpr 0x5636452b0108 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5636452b01e0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5636452b0148 <col:31> 'const char *' lvalue ParmVar 0x563645288a78 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5636452b01f8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5636452b0168 <col:40> 'int' lvalue ParmVar 0x563645288af8 'flags' 'int'
|       |             `-DeclRefExpr 0x5636452b0188 <col:47> 'Args::Slot *' lvalue Var 0x5636452b0010 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5636452b0338 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5636452b0320 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5636452b0300 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5636452b02d0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x563644fc2158
|       |       `-ImplicitCastExpr 0x5636452b02b8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5636452b0298 <col:20> 'String' lvalue Var 0x5636452b00a0 'str' 'String'
|       `-CompoundStmt 0x5636452b0b70 <col:61, line:753:9>
|         |-DeclStmt 0x5636452b0710 <line:751:13, col:63>
|         | `-VarDecl 0x5636452b0388 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5636452b06e0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5636452b0650 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5636452b0698 <col:47> 'T' lvalue ParmVar 0x563645288c18 'variable' 'T &'
|         |     `-UnaryOperator 0x5636452b06c8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5636452b06b8 <col:58> 'Args *' this
|         `-CallExpr 0x5636452b0b40 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x5636452b0738 <col:13> '<bound member function type>' ->postparse 0x5636452a6718
|           | `-CXXThisExpr 0x5636452b0728 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5636452b0b00 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5636452b0768 <col:23> 'T *' lvalue Var 0x5636452b0388 's' 'T *'
|           | `-CallExpr 0x5636452b0ac0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5636452b0950 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5636452b0998 <col:56> 'P' lvalue ParmVar 0x563645288b70 'parser' 'P'
|           |   |-DeclRefExpr 0x5636452b09b8 <col:64> 'String' lvalue Var 0x5636452b00a0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5636452b0a68 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5636452b09f8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5636451b64d8 0x5636451b60f8 0x5636451b5d28 0x5636451b5948 0x5636451b5568 0x5636451b5198
|           |   | `-DeclRefExpr 0x5636452b09d8 <col:70> 'T *' lvalue Var 0x5636452b0388 's' 'T *'
|           |   `-UnaryOperator 0x5636452b0aa8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5636452b0a98 <col:74> 'Args *' this
|           `-DeclRefExpr 0x5636452b0b20 <col:81> 'Args::Slot *' lvalue Var 0x5636452b0010 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x563645289458 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x563645288e70 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x563645288ee8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x563645288f68 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5636452893b8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x563645289030 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5636452890b0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x563645289128 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x5636452891c8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x563645289268 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x5636452b1958 <col:98, line:762:5>
|     |-DeclStmt 0x5636452b0c60 <line:758:9, col:26>
|     | `-VarDecl 0x5636452b0bf8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5636452b0e80 <line:759:9, col:55>
|     | `-VarDecl 0x5636452b0c88 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5636452b0e68 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5636452b0e38 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5636452b0e20 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5636452b0e00 <col:22, col:54> 'String' (CXXTemporary 0x5636452b0e00)
|     |           `-CXXMemberCallExpr 0x5636452b0d90 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5636452b0d00 <col:22> '<bound member function type>' ->find 0x5636452a6508
|     |             | `-CXXThisExpr 0x5636452b0cf0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5636452b0dc8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5636452b0d30 <col:27> 'const char *' lvalue ParmVar 0x563645289030 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5636452b0de0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5636452b0d50 <col:36> 'int' lvalue ParmVar 0x5636452890b0 'flags' 'int'
|     |             `-DeclRefExpr 0x5636452b0d70 <col:43> 'Args::Slot *' lvalue Var 0x5636452b0bf8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5636452b12a0 <line:760:9, col:59>
|     | `-VarDecl 0x5636452b0ed8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5636452b1270 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5636452b11e0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5636452b1228 <col:43> 'T' lvalue ParmVar 0x5636452891c8 'variable' 'T &'
|     |     `-UnaryOperator 0x5636452b1258 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5636452b1248 <col:54> 'Args *' this
|     `-CallExpr 0x5636452b1928 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x5636452b12c8 <col:9> '<bound member function type>' ->postparse 0x5636452a6718
|       | `-CXXThisExpr 0x5636452b12b8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5636452b18e8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5636452b12f8 <col:19> 'T *' lvalue Var 0x5636452b0ed8 's' 'T *'
|       | `-ParenExpr 0x5636452b18c8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x5636452b1898 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5636452b1880 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5636452b1868 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5636452b1848 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5636452b1818 <col:25> '<bound member function type>' .operator int (String::*)() const 0x563644fc2158
|       |     |       `-ImplicitCastExpr 0x5636452b1800 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5636452b1318 <col:25> 'String' lvalue Var 0x5636452b0c88 'str' 'String'
|       |     |-CallExpr 0x5636452b1670 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5636452b1500 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x5636452b1548 <col:59> 'P' lvalue ParmVar 0x563645289128 'parser' 'P'
|       |     | |-DeclRefExpr 0x5636452b1568 <col:67> 'String' lvalue Var 0x5636452b0c88 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5636452b1618 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5636452b15a8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5636451b64d8 0x5636451b60f8 0x5636451b5d28 0x5636451b5948 0x5636451b5568 0x5636451b5198
|       |     | | `-DeclRefExpr 0x5636452b1588 <col:73> 'T *' lvalue Var 0x5636452b0ed8 's' 'T *'
|       |     | `-UnaryOperator 0x5636452b1658 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5636452b1648 <col:77> 'Args *' this
|       |     `-ParenExpr 0x5636452b17e0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x5636452b17c0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x5636452b1790 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5636452b1740 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5636452b16d0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5636451b64d8 0x5636451b60f8 0x5636451b5d28 0x5636451b5948 0x5636451b5568 0x5636451b5198
|       |         | | `-DeclRefExpr 0x5636452b16b0 <col:87> 'T *' lvalue Var 0x5636452b0ed8 's' 'T *'
|       |         | `-DeclRefExpr 0x5636452b1770 <col:91> 'const V' lvalue ParmVar 0x563645289268 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5636452b17b0 <col:98> 'bool' true
|       `-DeclRefExpr 0x5636452b1908 <col:106> 'Args::Slot *' lvalue Var 0x5636452b0bf8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x563645289ac8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x5636452894d8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563645289558 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5636452895d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x563645289a28 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5636452896a0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563645289720 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x563645289798 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x563645289838 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x5636452898d8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x5636452b2938 <col:60, line:773:5>
|     |-DeclStmt 0x5636452b1a00 <line:767:9, col:26>
|     | `-VarDecl 0x5636452b1998 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5636452b2900 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x5636452b2920 <line:768:13, col:58>
|       | `-VarDecl 0x5636452b1a28 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5636452b1c08 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5636452b1bd8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5636452b1bc0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5636452b1ba0 <col:26, col:58> 'String' (CXXTemporary 0x5636452b1ba0)
|       |           `-CXXMemberCallExpr 0x5636452b1b30 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5636452b1aa0 <col:26> '<bound member function type>' ->find 0x5636452a6508
|       |             | `-CXXThisExpr 0x5636452b1a90 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5636452b1b68 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5636452b1ad0 <col:31> 'const char *' lvalue ParmVar 0x5636452896a0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5636452b1b80 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5636452b1af0 <col:40> 'int' lvalue ParmVar 0x563645289720 'flags' 'int'
|       |             `-DeclRefExpr 0x5636452b1b10 <col:47> 'Args::Slot *' lvalue Var 0x5636452b1998 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5636452b1cc0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5636452b1ca8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5636452b1c88 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5636452b1c58 <col:20> '<bound member function type>' .operator int (String::*)() const 0x563644fc2158
|       |       `-ImplicitCastExpr 0x5636452b1c40 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5636452b1c20 <col:20> 'String' lvalue Var 0x5636452b1a28 'str' 'String'
|       `-CompoundStmt 0x5636452b28d8 <col:61, line:772:9>
|         |-DeclStmt 0x5636452b2000 <line:769:13, col:66>
|         | `-VarDecl 0x5636452b1d18 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x5636452b1fd0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5636452b1f40 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5636452b1f88 <col:49> 'T1' lvalue ParmVar 0x563645289838 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x5636452b1fb8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5636452b1fa8 <col:61> 'Args *' this
|         |-DeclStmt 0x5636452b2370 <line:770:13, col:66>
|         | `-VarDecl 0x5636452b2088 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x5636452b2340 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5636452b22b0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5636452b22f8 <col:49> 'T2' lvalue ParmVar 0x5636452898d8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x5636452b2328 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5636452b2318 <col:61> 'Args *' this
|         `-CallExpr 0x5636452b28a8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x5636452b2398 <col:13> '<bound member function type>' ->postparse 0x5636452a6718
|           | `-CXXThisExpr 0x5636452b2388 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5636452b2868 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x5636452b2408 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x5636452b23c8 <col:23> 'T1 *' lvalue Var 0x5636452b1d18 's1' 'T1 *'
|           | | `-DeclRefExpr 0x5636452b23e8 <col:29> 'T2 *' lvalue Var 0x5636452b2088 's2' 'T2 *'
|           | `-CallExpr 0x5636452b2820 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5636452b25f0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5636452b2638 <col:63> 'P' lvalue ParmVar 0x563645289798 'parser' 'P'
|           |   |-DeclRefExpr 0x5636452b2658 <col:71> 'String' lvalue Var 0x5636452b1a28 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5636452b2708 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5636452b2698 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5636451b64d8 0x5636451b60f8 0x5636451b5d28 0x5636451b5948 0x5636451b5568 0x5636451b5198
|           |   | `-DeclRefExpr 0x5636452b2678 <col:77> 'T1 *' lvalue Var 0x5636452b1d18 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x5636452b27c8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5636452b2758 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5636451b64d8 0x5636451b60f8 0x5636451b5d28 0x5636451b5948 0x5636451b5568 0x5636451b5198
|           |   | `-DeclRefExpr 0x5636452b2738 <col:82> 'T2 *' lvalue Var 0x5636452b2088 's2' 'T2 *'
|           |   `-UnaryOperator 0x5636452b2808 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5636452b27f8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x5636452b2888 <col:94> 'Args::Slot *' lvalue Var 0x5636452b1998 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x563645289eb8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x563645289b48 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563645289e18 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x563645289c00 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563645289c80 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x563645289cf8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5636452b2e50 <col:67, line:780:5>
|     |-DeclStmt 0x5636452b29d0 <line:777:9, col:26>
|     | `-VarDecl 0x5636452b2968 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5636452b2e18 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x5636452b2e38 <line:778:13, col:58>
|       | `-VarDecl 0x5636452b29f8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5636452b2bd8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5636452b2ba8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5636452b2b90 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5636452b2b70 <col:26, col:58> 'String' (CXXTemporary 0x5636452b2b70)
|       |           `-CXXMemberCallExpr 0x5636452b2b00 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5636452b2a70 <col:26> '<bound member function type>' ->find 0x5636452a6508
|       |             | `-CXXThisExpr 0x5636452b2a60 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5636452b2b38 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5636452b2aa0 <col:31> 'const char *' lvalue ParmVar 0x563645289c00 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5636452b2b50 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5636452b2ac0 <col:40> 'int' lvalue ParmVar 0x563645289c80 'flags' 'int'
|       |             `-DeclRefExpr 0x5636452b2ae0 <col:47> 'Args::Slot *' lvalue Var 0x5636452b2968 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5636452b2c90 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5636452b2c78 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5636452b2c58 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5636452b2c28 <col:20> '<bound member function type>' .operator int (String::*)() const 0x563644fc2158
|       |       `-ImplicitCastExpr 0x5636452b2c10 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5636452b2bf0 <col:20> 'String' lvalue Var 0x5636452b29f8 'str' 'String'
|       `-CallExpr 0x5636452b2de8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x5636452b2cb8 <col:13> '<bound member function type>' ->postparse 0x5636452a6718
|         | `-CXXThisExpr 0x5636452b2ca8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x5636452b2d98 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x5636452b2d08 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x5636452b2ce8 <col:23> 'P' lvalue ParmVar 0x563645289cf8 'parser' 'P'
|         | |-DeclRefExpr 0x5636452b2d50 <col:36> 'String' lvalue Var 0x5636452b29f8 'str' 'String'
|         | `-UnaryOperator 0x5636452b2d80 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x5636452b2d70 <col:42> 'Args *' this
|         `-DeclRefExpr 0x5636452b2dc8 <col:49> 'Args::Slot *' lvalue Var 0x5636452b2968 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56364528a258 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x563645289f28 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56364528a1b8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x563645289fe0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56364528a060 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x56364528a0d8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x5636452b7c40 <col:71, line:792:5>
|     |-DeclStmt 0x5636452b2ee8 <line:784:9, col:26>
|     | `-VarDecl 0x5636452b2e80 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5636452b2fb8 <line:785:9, col:29>
|     | `-VarDecl 0x5636452b2f18 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5636452b2fa0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5636452b2f80 <col:28> 'int' 1
|     |-WhileStmt 0x5636452b7af0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x5636452b7b10 <line:786:16, col:61>
|     | | `-VarDecl 0x5636452b2fe0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5636452b31c0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5636452b3190 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5636452b3178 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5636452b3158 <col:29, col:61> 'String' (CXXTemporary 0x5636452b3158)
|     | |           `-CXXMemberCallExpr 0x5636452b30e8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5636452b3058 <col:29> '<bound member function type>' ->find 0x5636452a6508
|     | |             | `-CXXThisExpr 0x5636452b3048 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5636452b3120 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5636452b3088 <col:34> 'const char *' lvalue ParmVar 0x563645289fe0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5636452b3138 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5636452b30a8 <col:43> 'int' lvalue ParmVar 0x56364528a060 'flags' 'int'
|     | |             `-DeclRefExpr 0x5636452b30c8 <col:50> 'Args::Slot *' lvalue Var 0x5636452b2e80 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5636452b3278 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5636452b3260 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5636452b3240 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5636452b3210 <col:23> '<bound member function type>' .operator int (String::*)() const 0x563644fc2158
|     | |       `-ImplicitCastExpr 0x5636452b31f8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5636452b31d8 <col:23> 'String' lvalue Var 0x5636452b2fe0 'str' 'String'
|     | `-CompoundStmt 0x5636452b7ac8 <col:64, line:790:9>
|     |   |-CallExpr 0x5636452b7850 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x5636452b32a0 <col:13> '<bound member function type>' ->postparse 0x5636452a6718
|     |   | | `-CXXThisExpr 0x5636452b3290 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5636452b7800 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5636452b32f0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5636452b32d0 <col:23> 'P' lvalue ParmVar 0x56364528a0d8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5636452b3338 <col:36> 'String' lvalue Var 0x5636452b2fe0 'str' 'String'
|     |   | | `-UnaryOperator 0x5636452b3368 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5636452b3358 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x5636452b7830 <col:49> 'Args::Slot *' lvalue Var 0x5636452b2e80 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5636452b79e8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5636452b7880 <col:13> 'int' lvalue Var 0x5636452b2f18 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5636452b79d0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5636452b79b0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5636452b7918 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5636452b78f8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5636452b78e0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5636452b78a0 <col:28> 'int' lvalue Var 0x5636452b2f18 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5636452b78c0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5636452b7998 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5636452b7968 <col:49> 'bool' lvalue ->_read_status 0x56364526e7c0
|     |   |         `-ImplicitCastExpr 0x5636452b7948 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5636452b7938 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5636452b7a98 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5636452b7a08 <col:13> 'int' lvalue ParmVar 0x56364528a060 'flags' 'int'
|     |     `-UnaryOperator 0x5636452b7a80 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5636452b7a68 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5636452b7a48 <col:23> 'const int' lvalue Var 0x5636452770d0 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5636452b7c20 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5636452b7b58 <col:9> 'bool' lvalue ->_read_status 0x56364526e7c0
|       | `-ImplicitCastExpr 0x5636452b7b38 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5636452b7b28 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5636452b7c00 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5636452b7be0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5636452b7bc8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5636452b7b88 <col:25> 'int' lvalue Var 0x5636452b2f18 'read_status' 'int'
|           `-IntegerLiteral 0x5636452b7ba8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x56364528a738 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x56364528a2c8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56364528a348 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56364528a698 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x56364528a408 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56364528a488 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x56364528a500 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x56364528a5a8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x5636452b8bd0 <col:84, line:805:5>
|     |-DeclStmt 0x5636452b7ce8 <line:796:9, col:26>
|     | `-VarDecl 0x5636452b7c80 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5636452b7db8 <line:797:9, col:29>
|     | `-VarDecl 0x5636452b7d18 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5636452b7da0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5636452b7d80 <col:28> 'int' 1
|     |-DeclStmt 0x5636452b80f0 <line:798:9, col:71>
|     | `-VarDecl 0x5636452b7e08 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5636452b80c0 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5636452b8030 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x5636452b8078 <col:55> 'T' lvalue ParmVar 0x56364528a5a8 'variable' 'T &'
|     |     `-UnaryOperator 0x5636452b80a8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5636452b8098 <col:66> 'Args *' this
|     |-WhileStmt 0x5636452b8a80 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x5636452b8aa0 <line:799:16, col:61>
|     | | `-VarDecl 0x5636452b8118 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5636452b82f8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5636452b82c8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5636452b82b0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5636452b8290 <col:29, col:61> 'String' (CXXTemporary 0x5636452b8290)
|     | |           `-CXXMemberCallExpr 0x5636452b8220 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5636452b8190 <col:29> '<bound member function type>' ->find 0x5636452a6508
|     | |             | `-CXXThisExpr 0x5636452b8180 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5636452b8258 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5636452b81c0 <col:34> 'const char *' lvalue ParmVar 0x56364528a408 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5636452b8270 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5636452b81e0 <col:43> 'int' lvalue ParmVar 0x56364528a488 'flags' 'int'
|     | |             `-DeclRefExpr 0x5636452b8200 <col:50> 'Args::Slot *' lvalue Var 0x5636452b7c80 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5636452b83b0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5636452b8398 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5636452b8378 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5636452b8348 <col:23> '<bound member function type>' .operator int (String::*)() const 0x563644fc2158
|     | |       `-ImplicitCastExpr 0x5636452b8330 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5636452b8310 <col:23> 'String' lvalue Var 0x5636452b8118 'str' 'String'
|     | `-CompoundStmt 0x5636452b8a58 <col:64, line:803:9>
|     |   |-CallExpr 0x5636452b87e0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x5636452b83d8 <col:13> '<bound member function type>' ->postparse 0x5636452a6718
|     |   | | `-CXXThisExpr 0x5636452b83c8 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x5636452b87a0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x5636452b8408 <col:23> 'T *' lvalue Var 0x5636452b7e08 's' 'T *'
|     |   | | `-CallExpr 0x5636452b8760 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x5636452b85f0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x5636452b8638 <col:56> 'P' lvalue ParmVar 0x56364528a500 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x5636452b8658 <col:64> 'String' lvalue Var 0x5636452b8118 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x5636452b8708 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x5636452b8698 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5636451b64d8 0x5636451b60f8 0x5636451b5d28 0x5636451b5948 0x5636451b5568 0x5636451b5198
|     |   | |   | `-DeclRefExpr 0x5636452b8678 <col:70> 'T *' lvalue Var 0x5636452b7e08 's' 'T *'
|     |   | |   `-UnaryOperator 0x5636452b8748 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x5636452b8738 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x5636452b87c0 <col:81> 'Args::Slot *' lvalue Var 0x5636452b7c80 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5636452b8978 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5636452b8810 <col:13> 'int' lvalue Var 0x5636452b7d18 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5636452b8960 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5636452b8940 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5636452b88a8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5636452b8888 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5636452b8870 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5636452b8830 <col:28> 'int' lvalue Var 0x5636452b7d18 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5636452b8850 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5636452b8928 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5636452b88f8 <col:49> 'bool' lvalue ->_read_status 0x56364526e7c0
|     |   |         `-ImplicitCastExpr 0x5636452b88d8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5636452b88c8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5636452b8a28 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5636452b8998 <col:13> 'int' lvalue ParmVar 0x56364528a488 'flags' 'int'
|     |     `-UnaryOperator 0x5636452b8a10 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5636452b89f8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5636452b89d8 <col:23> 'const int' lvalue Var 0x5636452770d0 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5636452b8bb0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5636452b8ae8 <col:9> 'bool' lvalue ->_read_status 0x56364526e7c0
|       | `-ImplicitCastExpr 0x5636452b8ac8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5636452b8ab8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5636452b8b90 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5636452b8b70 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5636452b8b58 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5636452b8b18 <col:25> 'int' lvalue Var 0x5636452b7d18 'read_status' 'int'
|           `-IntegerLiteral 0x5636452b8b38 <col:40> 'int' 1
|-FunctionTemplateDecl 0x56364528ad18 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x56364528a7b0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56364528a828 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56364528ac78 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x56364528a8e8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56364528a968 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x56364528a9e0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x56364528ab30 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x5636452b99d8 <col:87, line:821:5>
|     |-DeclStmt 0x5636452b8c80 <line:809:9, col:26>
|     | `-VarDecl 0x5636452b8c18 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5636452b8d50 <line:810:9, col:29>
|     | `-VarDecl 0x5636452b8cb0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5636452b8d38 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5636452b8d18 <col:28> 'int' 1
|     |-DeclStmt 0x5636452b8f98 <line:811:9, col:38>
|     | `-VarDecl 0x5636452b8e80 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x5636452b8f70 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5636452b8ef8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5636452b8f50 <col:29> 'Vector<T>' lvalue ParmVar 0x56364528ab30 'variable' 'Vector<T> &'
|     |-WhileStmt 0x5636452b9888 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x5636452b98a8 <line:812:16, col:61>
|     | | `-VarDecl 0x5636452b8fc0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5636452b91a0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5636452b9170 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5636452b9158 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5636452b9138 <col:29, col:61> 'String' (CXXTemporary 0x5636452b9138)
|     | |           `-CXXMemberCallExpr 0x5636452b90c8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5636452b9038 <col:29> '<bound member function type>' ->find 0x5636452a6508
|     | |             | `-CXXThisExpr 0x5636452b9028 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5636452b9100 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5636452b9068 <col:34> 'const char *' lvalue ParmVar 0x56364528a8e8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5636452b9118 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5636452b9088 <col:43> 'int' lvalue ParmVar 0x56364528a968 'flags' 'int'
|     | |             `-DeclRefExpr 0x5636452b90a8 <col:50> 'Args::Slot *' lvalue Var 0x5636452b8c18 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5636452b9258 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5636452b9240 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5636452b9220 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5636452b91f0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x563644fc2158
|     | |       `-ImplicitCastExpr 0x5636452b91d8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5636452b91b8 <col:23> 'String' lvalue Var 0x5636452b8fc0 'str' 'String'
|     | `-CompoundStmt 0x5636452b9850 <col:64, line:819:9>
|     |   |-DeclStmt 0x5636452b9318 <line:813:13, col:23>
|     |   | `-VarDecl 0x5636452b9280 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x5636452b92f8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x5636452b9498 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x5636452b9340 <col:13> '<bound member function type>' ->postparse 0x5636452a6718
|     |   | | `-CXXThisExpr 0x5636452b9330 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5636452b9440 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5636452b9390 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5636452b9370 <col:23> 'P' lvalue ParmVar 0x56364528a9e0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5636452b93d8 <col:36> 'String' lvalue Var 0x5636452b8fc0 'str' 'String'
|     |   | | |-DeclRefExpr 0x5636452b93f8 <col:41> 'T' lvalue Var 0x5636452b9280 'sx' 'T'
|     |   | | `-UnaryOperator 0x5636452b9428 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5636452b9418 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x5636452b9478 <col:53> 'Args::Slot *' lvalue Var 0x5636452b8c18 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x5636452b95f0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x5636452b9528 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x5636452b94f8 <col:17> 'bool' lvalue ->_read_status 0x56364526e7c0
|     |   | |   `-ImplicitCastExpr 0x5636452b94d8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x5636452b94c8 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x5636452b95c8 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x5636452b9560 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x5636452b9540 <col:17> 'Vector<T> *' lvalue Var 0x5636452b8e80 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x5636452b95a8 <col:30> 'T' lvalue Var 0x5636452b9280 'sx' 'T'
|     |   |-BinaryOperator 0x5636452b9770 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5636452b9608 <col:13> 'int' lvalue Var 0x5636452b8cb0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5636452b9758 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5636452b9738 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5636452b96a0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5636452b9680 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5636452b9668 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5636452b9628 <col:28> 'int' lvalue Var 0x5636452b8cb0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5636452b9648 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5636452b9720 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5636452b96f0 <col:49> 'bool' lvalue ->_read_status 0x56364526e7c0
|     |   |         `-ImplicitCastExpr 0x5636452b96d0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5636452b96c0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5636452b9820 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5636452b9790 <col:13> 'int' lvalue ParmVar 0x56364528a968 'flags' 'int'
|     |     `-UnaryOperator 0x5636452b9808 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5636452b97f0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5636452b97d0 <col:23> 'const int' lvalue Var 0x5636452770d0 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5636452b99b8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5636452b98f0 <col:9> 'bool' lvalue ->_read_status 0x56364526e7c0
|       | `-ImplicitCastExpr 0x5636452b98d0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5636452b98c0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5636452b9998 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5636452b9978 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5636452b9960 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5636452b9920 <col:25> 'int' lvalue Var 0x5636452b8cb0 'read_status' 'int'
|           `-IntegerLiteral 0x5636452b9940 <col:40> 'int' 1
|-AccessSpecDecl 0x56364528ad90 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x56364528adb8 prev 0x563645273ff8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x56364528aeb0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x56364528afa0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x5636452b9a10 <col:16, line:828:9>
| |-CXXDestructorDecl 0x56364528b090 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x5636452b9a20 <col:25, line:830:9>
| |-CXXMethodDecl 0x56364528b190 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x56364528b240 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x56364528b2e8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x56364528b2e8
| | `-ParmVarDecl 0x56364528b3f8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x563645296498 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x563645296498
|   `-ParmVarDecl 0x5636452965a8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x56364528b468 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x56364528b5c8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x5636452960a0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x56364528b670 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x56364528b6e8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x5636452b9c00 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x563645296358 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x5636452b9a70 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5636452b9a30 <col:20> 'void *' lvalue ParmVar 0x56364528b670 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x5636452963c0 '_slot' 'char *'
| | | `-CXXNewExpr 0x5636452b9af8 <col:32, col:45> 'char *' array Function 0x563644de4ba8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x5636452b9ae0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x5636452b9ab0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x56364528b6e8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x563645296420 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x5636452b9bc0 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5636452b9b80 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x56364528b6e8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x5636452b9c80 <col:61, line:838:9>
| |-CXXDestructorDecl 0x5636452961a0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x56364528b090 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x5636452b9d08 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x5636452b9ce8 <line:840:13, col:22> 'void' array Function 0x563644de4f08 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x5636452b9cd0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x5636452b9ca0 <col:22> 'char *' lvalue ->_slot 0x5636452963c0
| |         `-CXXThisExpr 0x5636452b9c90 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x5636452962a0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x56364528b190 Slot::store 'void ()' ]
| | `-CompoundStmt 0x5636452b9ef8 <col:22, line:844:9>
| |   `-CallExpr 0x5636452b9e60 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x5636452b9e48 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5636452b9e28 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x563644ef0988 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x5636452b9e98 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x5636452b9d78 <col:20> 'void *' lvalue ->_ptr 0x563645296358
| |     |   `-CXXThisExpr 0x5636452b9d68 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x5636452b9ec8 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x5636452b9eb0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x5636452b9db8 <col:26> 'char *' lvalue ->_slot 0x5636452963c0
| |     |     `-CXXThisExpr 0x5636452b9da8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x5636452b9ee0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x5636452b9df8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x563645296420
| |         `-CXXThisExpr 0x5636452b9de8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x563645296358 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x5636452963c0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x563645296420 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x563645296618 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x563645296618
| | `-ParmVarDecl 0x563645296728 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x5636452967c8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5636452967c8
|   `-ParmVarDecl 0x5636452968d8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x563645296a78 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x563645296948 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x5636452969e8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x563645296d10 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x563645296f08 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x563645296dd8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x563645297088 '_ptr' 'T *'
|   | | `-ParenListExpr 0x5636452b9f30 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x5636452b9f10 <col:20> 'T *' lvalue ParmVar 0x563645296dd8 'ptr' 'T *'
|   | `-CompoundStmt 0x5636452b9f80 <col:25, line:854:9>
|   |-CXXMethodDecl 0x563645296fd8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x56364528b190 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x5636452ba130 <col:22, line:857:9>
|   |   `-CallExpr 0x5636452ba100 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x5636452b9f90 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x563644fa92d8 0x563644f533e8
|   |     |-CXXOperatorCallExpr 0x5636452ba090 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x5636452ba020 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5636451b64d8 0x5636451b60f8 0x5636451b5d28 0x5636451b5948 0x5636451b5568 0x5636451b5198
|   |     | `-MemberExpr 0x5636452b9ff0 <col:29> 'T *' lvalue ->_ptr 0x563645297088
|   |     |   `-CXXThisExpr 0x5636452b9fe0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x5636452ba0d0 <col:35> 'T' lvalue ->_slot 0x5636452970e8
|   |       `-CXXThisExpr 0x5636452ba0c0 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x563645297088 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x5636452970e8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x563645297150 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x563645297250 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x5636452972a0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563645297230 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x563645297210 <col:31> 'int' 48
|-FieldDecl 0x5636452972c8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x563645297328 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x563645297388 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x5636452974c0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x5636452a5db0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5636452a5e10 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x5636452a5ec0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x5636452a60e8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x5636452a5ff0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x5636452a6238 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x5636452a61a8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x5636452a6508 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x5636452a62f8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x5636452a6378 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x5636452a6420 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x5636452a6718 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x5636452a65d0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x5636452a6648 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x5636452a67e8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x5636452a6938 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x5636452a68a0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x5636452a6cc8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x5636452a69f8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x5636452a6a78 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x5636452a6b20 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x5636452a6bd8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x5636452a6ef0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x5636452a6da0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x5636452a6e18 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x5636452a7208 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x5636452a6fa0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x5636452a7168 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x5636452a7078 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.0*, %class.Vector.5, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.0*, %class.Vector.5, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class SecondsArg
         0 |   class NumArg (base) (empty)
         0 |   int fraction_digits
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636452c28c0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5636452c29d8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x5636452c2a68 <col:16, col:22> col:16 public
|-EnumDecl 0x5636452c2a90 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x5636452c2b90 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5636452c2de0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636452c2b70 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5636452c2b50 <col:21> 'int' 0
| |-EnumConstantDecl 0x5636452c2c20 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5636452c2df8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636452c2c00 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x5636452c2be0 <col:24> 'int' 22
| |-EnumConstantDecl 0x5636452c2cb0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5636452c2e10 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636452c2c90 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x5636452c2c70 <col:24> 'int' 34
| |-EnumConstantDecl 0x5636452c2d40 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5636452c2e28 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636452c2d20 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x5636452c2d00 <col:25> 'int' 95
| `-EnumConstantDecl 0x5636452c2d90 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x5636452c47a0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5636452c4bd8 <col:7>
|-CXXConstructorDecl 0x5636452c48a8 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x5636452c48a8
| `-ParmVarDecl 0x5636452c49b8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x5636452c4a58 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5636452c4b68 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x5636453e9840 <col:7>
`-CXXDestructorDecl 0x5636452c6cd8 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636452d2838 <../dummy_inc/click/args.hh:1310:1, line:1321:1> line:1310:7 referenced class SecondsArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x5636452d2998 <col:1, col:7> col:7 implicit referenced class SecondsArg
|-AccessSpecDecl 0x5636452d2a28 <col:36, col:42> col:36 public
|-CXXConstructorDecl 0x5636452d2b38 <line:1311:5, line:1313:5> line:1311:5 used SecondsArg 'void (int)'
| |-ParmVarDecl 0x5636452d2a68 <col:16, col:24> col:20 used d 'int' cinit
| | `-IntegerLiteral 0x5636452d33e0 <col:24> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5636452d34e0 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5636452d3310 'fraction_digits' 'int'
| | `-ImplicitCastExpr 0x5636452d34a0 <line:1312:27> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5636452d3460 <col:27> 'int' lvalue ParmVar 0x5636452d2a68 'd' 'int'
| `-CompoundStmt 0x5636452d3550 <col:30, line:1313:5>
|-CXXMethodDecl 0x5636452d2d88 <line:1314:5, col:99> col:10 parse_saturating 'bool (const String &, uint32_t &, const ArgContext &)'
| |-ParmVarDecl 0x5636452d2bf8 <col:27, col:41> col:41 str 'const String &'
| |-ParmVarDecl 0x5636452d2c70 <col:46, col:56> col:56 result 'uint32_t &'
| `-ParmVarDecl 0x5636452d2ce8 <col:64, col:89> col:82 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5636452d3400 <col:89> 'const ArgContext' lvalue Var 0x5636452ba158 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x5636452d2fe0 <line:1315:5, col:88> col:10 parse 'bool (const String &, uint32_t &, const ArgContext &)'
| |-ParmVarDecl 0x5636452d2e50 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x5636452d2ec8 <col:35, col:45> col:45 result 'uint32_t &'
| `-ParmVarDecl 0x5636452d2f40 <col:53, col:78> col:71 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5636452d3420 <col:78> 'const ArgContext' lvalue Var 0x5636452ba158 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x5636452d3240 <line:1317:5, col:86> col:10 parse 'bool (const String &, double &, const ArgContext &)'
| |-ParmVarDecl 0x5636452d30a8 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x5636452d3128 <col:35, col:43> col:43 result 'double &'
| `-ParmVarDecl 0x5636452d31a0 <col:51, col:76> col:69 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5636452d3440 <col:76> 'const ArgContext' lvalue Var 0x5636452ba158 'blank_args' 'const ArgContext'
|-FieldDecl 0x5636452d3310 <line:1319:5, col:9> col:9 referenced fraction_digits 'int'
|-FieldDecl 0x5636452d3378 <line:1320:5, col:9> col:9 referenced status 'int'
|-CXXConstructorDecl 0x5636453e8d48 <line:1310:7> col:7 implicit constexpr SecondsArg 'void (const SecondsArg &)' inline default trivial noexcept-unevaluated 0x5636453e8d48
| `-ParmVarDecl 0x5636453e8e58 <col:7> col:7 'const SecondsArg &'
|-CXXConstructorDecl 0x5636453e8ef8 <col:7> col:7 implicit used constexpr SecondsArg 'void (SecondsArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5636453e9008 <col:7> col:7 used 'SecondsArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5636453e9850 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5636453e9820 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x5636453e97f0 <col:7> 'SecondsArg' xvalue static_cast<class SecondsArg &&> <NoOp>
| |       `-DeclRefExpr 0x5636453e97c0 <col:7> 'SecondsArg' lvalue ParmVar 0x5636453e9008 '' 'SecondsArg &&'
| |-CXXCtorInitializer Field 0x5636452d3310 'fraction_digits' 'int'
| | `-ImplicitCastExpr 0x5636453e9948 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5636453e9918 <col:7> 'int' xvalue .fraction_digits 0x5636452d3310
| |     `-CXXStaticCastExpr 0x5636453e98e8 <col:7> 'SecondsArg' xvalue static_cast<class SecondsArg &&> <NoOp>
| |       `-DeclRefExpr 0x5636453e98b8 <col:7> 'SecondsArg' lvalue ParmVar 0x5636453e9008 '' 'SecondsArg &&'
| |-CXXCtorInitializer Field 0x5636452d3378 'status' 'int'
| | `-ImplicitCastExpr 0x5636453e9a18 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5636453e99e8 <col:7> 'int' xvalue .status 0x5636452d3378
| |     `-CXXStaticCastExpr 0x5636453e99b8 <col:7> 'SecondsArg' xvalue static_cast<class SecondsArg &&> <NoOp>
| |       `-DeclRefExpr 0x5636453e9988 <col:7> 'SecondsArg' lvalue ParmVar 0x5636453e9008 '' 'SecondsArg &&'
| `-CompoundStmt 0x5636453e9a70 <col:7>
`-CXXDestructorDecl 0x5636453e90a8 <col:7> col:7 implicit referenced ~SecondsArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.SecondsArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.SecondsArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorVeneer
         0 |   class ErrorHandler (primary base)
         0 |     (ErrorHandler vtable pointer)
         8 |     int _nerrors
        16 |   class ErrorHandler * _errh
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class PrefixErrorHandler
         0 |   class ErrorVeneer (primary base)
         0 |     class ErrorHandler (primary base)
         0 |       (ErrorHandler vtable pointer)
         8 |       int _nerrors
        16 |     class ErrorHandler * _errh
        24 |   class String _prefix
        24 |     struct String::rep_t _r
        24 |       const char * data
        32 |       int length
        40 |       struct String::memo_t * memo
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636452e1358 <../dummy_inc/click/error.hh:618:1, line:638:1> line:618:7 referenced class ErrorVeneer definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'ErrorHandler'
|-CXXRecordDecl 0x5636452e14b8 <col:1, col:7> col:7 implicit referenced class ErrorVeneer
|-AccessSpecDecl 0x5636452e1548 <col:43, col:49> col:43 public
|-CXXConstructorDecl 0x5636452e1658 <line:625:5, line:627:5> line:625:5 used ErrorVeneer 'void (ErrorHandler *)'
| |-ParmVarDecl 0x5636452e1580 <col:17, col:31> col:31 used errh 'ErrorHandler *'
| |-CXXCtorInitializer 'ErrorHandler'
| | `-CXXConstructExpr 0x5636452e2670 <col:5> 'ErrorHandler' 'void ()'
| |-CXXCtorInitializer Field 0x5636452e1e18 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5636452e2630 <line:626:10> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5636452e25f0 <col:10> 'ErrorHandler *' lvalue ParmVar 0x5636452e1580 'errh' 'ErrorHandler *'
| `-CompoundStmt 0x5636452e26e0 <col:16, line:627:5>
|-CXXMethodDecl 0x5636452e1830 <line:629:5, col:48> col:12 vformat 'String (const char *, __va_list_tag *)'
| |-Overrides: [ 0x5636452dbed0 ErrorHandler::vformat 'String (const char *, __va_list_tag *)' ]
| |-ParmVarDecl 0x5636452e1720 <col:20, col:32> col:32 fmt 'const char *'
| `-ParmVarDecl 0x5636452e1798 <col:37, col:45> col:45 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5636452e1980 <line:630:5, col:38> col:12 decorate 'String (const String &)'
| |-Overrides: [ 0x5636452dc170 ErrorHandler::decorate 'String (const String &)' ]
| `-ParmVarDecl 0x5636452e18f0 <col:21, col:35> col:35 str 'const String &'
|-CXXMethodDecl 0x5636452e1bd8 <line:631:5, col:61> col:11 emit 'void *(const String &, void *, bool)'
| |-Overrides: [ 0x5636452dc410 ErrorHandler::emit 'void *(const String &, void *, bool)' ]
| |-ParmVarDecl 0x5636452e1a38 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x5636452e1ab8 <col:35, col:41> col:41 user_data 'void *'
| `-ParmVarDecl 0x5636452e1b30 <col:52, col:57> col:57 more 'bool'
|-CXXMethodDecl 0x5636452e1d38 <line:632:5, col:27> col:10 account 'void (int)'
| |-Overrides: [ 0x5636452dc570 ErrorHandler::account 'void (int)' ]
| `-ParmVarDecl 0x5636452e1ca8 <col:18, col:22> col:22 level 'int'
|-AccessSpecDecl 0x5636452e1de0 <line:634:3, col:10> col:3 private
|-FieldDecl 0x5636452e1e18 <line:636:5, col:19> col:19 _errh 'ErrorHandler *'
|-CXXConstructorDecl 0x5636452e1e98 <line:618:7> col:7 implicit constexpr ErrorVeneer 'void (const ErrorVeneer &)' inline default noexcept-unevaluated 0x5636452e1e98
| `-ParmVarDecl 0x5636452e1fa8 <col:7> col:7 'const ErrorVeneer &'
|-CXXConstructorDecl 0x5636452e2048 <col:7> col:7 implicit constexpr ErrorVeneer 'void (ErrorVeneer &&)' inline default noexcept-unevaluated 0x5636452e2048
| `-ParmVarDecl 0x5636452e2158 <col:7> col:7 'ErrorVeneer &&'
|-CXXMethodDecl 0x5636452e21f8 <col:7> col:7 implicit operator= 'ErrorVeneer &(const ErrorVeneer &)' inline default noexcept-unevaluated 0x5636452e21f8
| `-ParmVarDecl 0x5636452e2308 <col:7> col:7 'const ErrorVeneer &'
|-CXXMethodDecl 0x5636452e2378 <col:7> col:7 implicit operator= 'ErrorVeneer &(ErrorVeneer &&)' inline default noexcept-unevaluated 0x5636452e2378
| `-ParmVarDecl 0x5636452e2488 <col:7> col:7 'ErrorVeneer &&'
`-CXXDestructorDecl 0x5636452e2510 <col:7> col:7 implicit used ~ErrorVeneer 'void () noexcept' inline default
  |-Overrides: [ 0x5636452d8fe0 ErrorHandler::~ErrorHandler 'void () noexcept' ]
  `-CompoundStmt 0x5636452e4598 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.ErrorVeneer = type { %class.ErrorHandler.base, %class.ErrorHandler* }
  NonVirtualBaseLLVMType:%class.ErrorVeneer = type { %class.ErrorHandler.base, %class.ErrorHandler* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636452e5f88 <../dummy_inc/click/error.hh:808:1, line:821:1> line:808:7 referenced class PrefixErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'ErrorVeneer'
|-CXXRecordDecl 0x5636452e60e8 <col:1, col:7> col:7 implicit referenced class PrefixErrorHandler
|-AccessSpecDecl 0x5636452e6178 <col:49, col:55> col:49 public
|-CXXConstructorDecl 0x5636452e6338 <line:813:5, col:64> col:5 used PrefixErrorHandler 'void (ErrorHandler *, const String &)'
| |-ParmVarDecl 0x5636452e61b0 <col:24, col:38> col:38 errh 'ErrorHandler *'
| `-ParmVarDecl 0x5636452e6228 <col:44, col:58> col:58 prefix 'const String &'
|-CXXMethodDecl 0x5636452e6490 <line:815:5, col:38> col:12 decorate 'String (const String &)'
| |-Overrides: [ 0x5636452e1980 ErrorVeneer::decorate 'String (const String &)' ]
| `-ParmVarDecl 0x5636452e6400 <col:21, col:35> col:35 str 'const String &'
|-AccessSpecDecl 0x5636452e6538 <line:817:3, col:10> col:3 private
|-FieldDecl 0x5636452e6570 <line:819:5, col:12> col:12 _prefix 'String'
|-CXXConstructorDecl 0x5636452e65e8 <line:808:7> col:7 implicit PrefixErrorHandler 'void (const PrefixErrorHandler &)' inline default noexcept-unevaluated 0x5636452e65e8
| `-ParmVarDecl 0x5636452e66f8 <col:7> col:7 'const PrefixErrorHandler &'
|-CXXConstructorDecl 0x5636452e6798 <col:7> col:7 implicit PrefixErrorHandler 'void (PrefixErrorHandler &&)' inline default noexcept-unevaluated 0x5636452e6798
| `-ParmVarDecl 0x5636452e68a8 <col:7> col:7 'PrefixErrorHandler &&'
|-CXXMethodDecl 0x5636452e6948 <col:7> col:7 implicit operator= 'PrefixErrorHandler &(const PrefixErrorHandler &)' inline default noexcept-unevaluated 0x5636452e6948
| `-ParmVarDecl 0x5636452e6a58 <col:7> col:7 'const PrefixErrorHandler &'
|-CXXMethodDecl 0x5636452e6ac8 <col:7> col:7 implicit operator= 'PrefixErrorHandler &(PrefixErrorHandler &&)' inline default noexcept-unevaluated 0x5636452e6ac8
| `-ParmVarDecl 0x5636452e6bd8 <col:7> col:7 'PrefixErrorHandler &&'
`-CXXDestructorDecl 0x5636452e6c60 <col:7> col:7 implicit used ~PrefixErrorHandler 'void () noexcept' inline default
  |-Overrides: [ 0x5636452e2510 ErrorVeneer::~ErrorVeneer 'void () noexcept' ]
  `-CompoundStmt 0x5636453ef040 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.PrefixErrorHandler = type { %class.ErrorVeneer, %class.String }
  NonVirtualBaseLLVMType:%class.PrefixErrorHandler = type { %class.ErrorVeneer, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | struct click_icmp_sequenced
         0 |   uint8_t icmp_type
         1 |   uint8_t icmp_code
         2 |   uint16_t icmp_cksum
         4 |   uint16_t icmp_identifier
         6 |   uint16_t icmp_sequence
           | [sizeof=8, dsize=8, align=2,
           |  nvsize=8, nvalign=2]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636451cc378 prev 0x5636451c1040 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5636451cc470 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5636451cc560 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5636451cc688 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5636451cc808 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5636451cc988 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5636451ccb08 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x5636451dd978 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5636451de1e8 <col:11>
|-CXXDestructorDecl 0x5636451dda50 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5636451ddb88 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5636451ddb88
| `-ParmVarDecl 0x5636451ddc98 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x5636451ddd38 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5636451ddd38
| `-ParmVarDecl 0x5636451dde48 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x5636451e3618 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x5636451e3728 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5636451e39a8 <col:11>
|   `-ReturnStmt 0x5636451e3998 <col:11>
|     `-UnaryOperator 0x5636451e3980 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5636451e3970 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x5636451e3798 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5636451e3798
  `-ParmVarDecl 0x5636451e38a8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636451ccb70 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5636451ccc88 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5636451ccd28 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5636451ccd90 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5636451ccdf8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5636451cce60 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5636451ccec0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5636451ccf80 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5636451ccfe0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5636451cd040 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x5636451dd888 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5636451ccd28 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x5636451de1f8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x5636451de250 <col:12>
|-CXXConstructorDecl 0x5636451ddeb8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5636451ddeb8
| `-ParmVarDecl 0x5636451ddfc8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x5636451de068 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5636451de068
| `-ParmVarDecl 0x5636451de178 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x5636451e2d00 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636451ba750 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5636451ba868 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5636451ba8f8 <col:16, col:22> col:16 public
|-EnumDecl 0x5636451ba920 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5636451baa20 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5636451bab00 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451baa00 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5636451ba9e0 <col:21> 'int' 28
| `-EnumConstantDecl 0x5636451baab0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5636451bab18 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5636451baa90 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5636451baa70 <col:22> 'int' 64
|-CXXMethodDecl 0x5636451bae58 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5636451bab40 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5636451babc0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5636451bac38 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5636451bacb0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5636451baf18 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5636451bb118 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5636451baf90 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5636451bb008 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5636451bb1c8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5636451bb328 <line:55:5, col:91> col:35 used make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5636451bb238 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5636451bb3d0 <col:72> warn_unused_result ""
|-TypedefDecl 0x5636451bb730 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5636451bb6c0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5636451bb660 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5636451bb620 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x563644c8d2d0 'void'
|       |-PointerType 0x563644f3a680 'unsigned char *'
|       | `-BuiltinType 0x563644c8d3d0 'unsigned char'
|       |-TypedefType 0x563644d36bf0 'size_t' sugar
|       | |-Typedef 0x563644cfdb20 'size_t'
|       | `-BuiltinType 0x563644c8d430 'unsigned long'
|       `-PointerType 0x563644c8dad0 'void *'
|         `-BuiltinType 0x563644c8d2d0 'void'
|-CXXMethodDecl 0x5636451bbba8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5636451bb7a0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5636451bb818 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5636451bb8b0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5636451bb930 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5636451d6820 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x5636451d6808 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x5636451d67d0 <col:58> 'int' 0
| |-ParmVarDecl 0x5636451bb9b0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5636451d6848 <col:76> 'int' 0
| |-ParmVarDecl 0x5636451bba30 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x5636451d6868 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5636451bbc78 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5636451bbcf8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5636451bbdb8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5636451bbe58 <col:20>
| `-OptimizeNoneAttr 0x5636451bbeb0 <col:30>
|-CXXMethodDecl 0x5636451bbf28 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5636451bbfc8 <col:20>
| `-OptimizeNoneAttr 0x5636451bc020 <col:30>
|-CXXMethodDecl 0x5636451bc098 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5636451bc138 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5636451bc1e8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5636451bc288 <col:20>
| |-OptimizeNoneAttr 0x5636451bc2e0 <col:30>
| `-WarnUnusedResultAttr 0x5636451bc308 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5636451bc360 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5636451bc400 <col:20>
| `-OptimizeNoneAttr 0x5636451bc458 <col:30>
|-CXXMethodDecl 0x5636451bc4a8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5636451bc548 <col:20>
| `-OptimizeNoneAttr 0x5636451bc5a0 <col:30>
|-CXXMethodDecl 0x5636451bc5e8 <line:81:5, col:58> col:49 used length 'uint32_t () const'
| |-NoInlineAttr 0x5636451bc688 <col:20>
| `-OptimizeNoneAttr 0x5636451bc6e0 <col:30>
|-CXXMethodDecl 0x5636451bc728 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5636451bc7e8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5636451bc8b0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5636451bc978 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5636451bca38 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5636451bcb58 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5636451d6930 <col:54, line:99:5>
|   `-ReturnStmt 0x5636451d6920 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x5636451d6908 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x5636451d68d8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5636451cd378
|         `-CXXThisExpr 0x5636451d68c8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5636451bccf8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5636451bcc08 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x5636451d69e0 <col:67, line:103:5>
|   `-BinaryOperator 0x5636451d69c0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5636451d6958 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5636451cd378
|     | `-CXXThisExpr 0x5636451d6948 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5636451d69a8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x5636451d6988 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5636451bcc08 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5636451bcdf0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5636451d6a60 <col:33, line:107:5>
|   `-ReturnStmt 0x5636451d6a50 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5636451d6a38 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5636451d6a08 <col:16> 'void *' lvalue ->_destructor_argument 0x5636451cd3e0
|         `-CXXThisExpr 0x5636451d69f8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5636451bceb0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5636451d7090 <col:25, line:113:5>
|   |-ParenExpr 0x5636451d6dd8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5636451d6da8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x5636451d6b18 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5636451d6af0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x5636451d6ab8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x5636451d6a88 <col:24> '<bound member function type>' ->shared 0x5636451bbf28
|   |   |       `-ImplicitCastExpr 0x5636451d6ad8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x5636451d6a78 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5636451d6b78 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5636451d6b58 <col:42> 'int' 0
|   |   `-CallExpr 0x5636451d6d08 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x5636451d6cf0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5636451d6cd0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563644d2da00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5636451d6d48 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636451d6be8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5636451d6d60 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636451d6c10 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5636451d6d78 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5636451d6c48 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5636451d6d90 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5636451d6cb8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5636451d6ca0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5636451d6c68 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x5636451d6fd8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x5636451d6e08 <col:2> 'unsigned char *' lvalue ->_head 0x5636451cd180
|   | | `-CXXThisExpr 0x5636451d6df8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x5636451d6fc0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5636451d6fa0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x5636451d6e48 <col:10> 'unsigned char *' lvalue ->_data 0x5636451cd1e8
|   |     | `-CXXThisExpr 0x5636451d6e38 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x5636451d6f88 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x5636451d6f68 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x5636451d6e88 <col:18> 'unsigned char *' lvalue ->_tail 0x5636451cd250
|   |         | `-CXXThisExpr 0x5636451d6e78 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x5636451d6f50 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x5636451d6f30 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x5636451d6ec8 <col:26> 'unsigned char *' lvalue ->_end 0x5636451cd2b8
|   |             | `-CXXThisExpr 0x5636451d6eb8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x5636451d6f18 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x5636451d6ef8 <col:33> 'int' 0
|   `-BinaryOperator 0x5636451d7070 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5636451d7008 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5636451cd378
|     | `-CXXThisExpr 0x5636451d6ff8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5636451d7058 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x5636451d7038 <col:16> 'int' 0
|-CXXMethodDecl 0x5636451bcff0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5636451bcf60 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5636451bd098 <col:20>
| |-OptimizeNoneAttr 0x5636451bd0f0 <col:30>
| `-WarnUnusedResultAttr 0x5636451bd118 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5636451bd1e8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5636451bd158 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5636451bd290 <col:20>
| |-OptimizeNoneAttr 0x5636451bd2e8 <col:30>
| `-WarnUnusedResultAttr 0x5636451bd310 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5636451bd448 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5636451bd350 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5636451bd4f0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5636451bd5f0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5636451bd560 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5636451bd698 <col:20>
| `-OptimizeNoneAttr 0x5636451bd6f0 <col:30>
|-CXXMethodDecl 0x5636451bd7b8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5636451bd728 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5636451bd860 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5636451bd960 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5636451bd8d0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5636451bda08 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5636451bdb08 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x5636451bda78 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5636451bdbb0 <col:20>
| `-OptimizeNoneAttr 0x5636451bdc08 <col:30>
|-CXXMethodDecl 0x5636451bdd98 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5636451bdc48 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5636451bdcc0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5636451d6888 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5636451bde48 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5636451be048 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5636451bdec0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5636451bdf38 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636451be258 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5636451be108 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5636451be180 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636451be468 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5636451be318 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5636451be398 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x5636451d6898 <col:39> 'int' 0
|-CXXMethodDecl 0x5636451be538 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5636451be600 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5636451be6c8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5636451be788 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5636451be850 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5636451be998 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5636451be908 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5636451beb68 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5636451bea58 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5636451bead0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636451bec38 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5636451becf8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x5636451bed98 <col:20>
| `-OptimizeNoneAttr 0x5636451bedf0 <col:30>
|-CXXMethodDecl 0x5636451bee40 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5636451beee0 <col:20>
| `-OptimizeNoneAttr 0x5636451bef38 <col:30>
|-CXXMethodDecl 0x5636451bef88 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5636451bf048 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5636451bf110 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x5636451bf1b0 <col:20>
| `-OptimizeNoneAttr 0x5636451bf208 <col:30>
|-CXXMethodDecl 0x5636451bf358 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5636451bf248 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5636451bf2c0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636451bf4a8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5636451bf418 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636451bf580 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5636451bf640 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x5636451bf6e0 <col:20>
| `-OptimizeNoneAttr 0x5636451bf738 <col:30>
|-CXXMethodDecl 0x5636451bf788 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5636451bf828 <col:20>
| `-OptimizeNoneAttr 0x5636451bf880 <col:30>
|-CXXMethodDecl 0x5636451bf8d0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5636451bf998 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x5636451bfa38 <col:20>
| `-OptimizeNoneAttr 0x5636451bfa90 <col:30>
|-CXXMethodDecl 0x5636451bfad8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5636451bfbf8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5636451bfd68 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5636451bfca8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5636451bfe58 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5636451bfef8 <col:20>
| `-OptimizeNoneAttr 0x5636451bff50 <col:30>
|-CXXMethodDecl 0x5636451bffa0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5636451c0060 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5636451c0298 <line:310:5, col:92> col:45 used set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5636451c0110 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5636451c0188 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5636451c0348 <col:20>
| `-OptimizeNoneAttr 0x5636451c03a0 <col:30>
|-CXXMethodDecl 0x5636451c0448 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5636451c04e8 <col:20>
| `-OptimizeNoneAttr 0x5636451c0540 <col:30>
|-CXXMethodDecl 0x5636451c0590 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5636451c0630 <col:20>
| `-OptimizeNoneAttr 0x5636451c0688 <col:30>
|-CXXMethodDecl 0x5636451c06d0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5636451c0770 <col:20>
| `-OptimizeNoneAttr 0x5636451c07c8 <col:30>
|-CXXMethodDecl 0x5636451c08c8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5636451c0800 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5636451c0970 <col:20>
| `-OptimizeNoneAttr 0x5636451c09c8 <col:30>
|-CXXMethodDecl 0x5636451c0b88 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5636451c0a00 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5636451c0a78 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5636451c0c38 <col:20>
| `-OptimizeNoneAttr 0x5636451c0c90 <col:30>
|-CXXMethodDecl 0x5636451c0d38 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5636451c0e58 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5636451c0f78 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5636451c1018 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5636451c1040 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5636451c1168 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5636451c1208 <col:20>
| `-OptimizeNoneAttr 0x5636451c1260 <col:30>
|-CXXMethodDecl 0x5636451c1308 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5636451c13a8 <col:20>
| `-OptimizeNoneAttr 0x5636451c1400 <col:30>
|-AccessSpecDecl 0x5636451c1428 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5636451c1450 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5636451c1550 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5636451c15a0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5636451c1530 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5636451c1510 <col:14> 'int' 48
|-CXXMethodDecl 0x5636451c1608 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5636451c16a8 <col:20>
| `-OptimizeNoneAttr 0x5636451c1700 <col:30>
|-CXXMethodDecl 0x5636451c1778 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5636451c1818 <col:20>
| `-OptimizeNoneAttr 0x5636451c1870 <col:30>
|-CXXMethodDecl 0x5636451c1938 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5636451c18a8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5636451c1ad8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5636451c1c78 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5636451c1b88 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5636451c1d20 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5636451c1e20 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5636451c21d0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451c1e00 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5636451c1de0 <col:9> 'int' 0
| |-EnumConstantDecl 0x5636451c1eb0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5636451c21e8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451c1e90 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5636451c1e70 <col:14> 'int' 1
| |-EnumConstantDecl 0x5636451c1f40 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5636451c2200 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451c1f20 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5636451c1f00 <col:14> 'int' 2
| |-EnumConstantDecl 0x5636451c1fd0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5636451c2218 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451c1fb0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5636451c1f90 <col:14> 'int' 3
| |-EnumConstantDecl 0x5636451c2060 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5636451c2230 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451c2040 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5636451c2020 <col:13> 'int' 4
| |-EnumConstantDecl 0x5636451c20f0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5636451c2248 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451c20d0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5636451c20b0 <col:13> 'int' 5
| `-EnumConstantDecl 0x5636451c2180 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5636451c2260 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5636451c2160 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5636451c2140 <col:14> 'int' 6
|-CXXMethodDecl 0x5636451c22c8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5636451c2368 <col:20>
| `-OptimizeNoneAttr 0x5636451c23c0 <col:30>
|-CXXMethodDecl 0x5636451c24b8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5636451c23f8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5636451c2560 <col:20>
| `-OptimizeNoneAttr 0x5636451c25b8 <col:30>
|-CXXMethodDecl 0x5636451c2628 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5636451c2750 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5636451c28c8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5636451c2800 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5636451c2990 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5636451c2a58 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5636451c2b98 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5636451c2b08 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5636451c2c40 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5636451c2d40 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5636451c2f40 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451c2d20 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5636451c2d00 <col:23> 'int' 0
| |-EnumConstantDecl 0x5636451c2dd0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5636451c2f58 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451c2db0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5636451c2d90 <col:45> 'int' 4
| |-EnumConstantDecl 0x5636451c2e60 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5636451c2f70 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451c2e40 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5636451c2e20 <col:24> 'int' 0
| `-EnumConstantDecl 0x5636451c2ef0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5636451c2f88 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5636451c2ed0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5636451c2eb0 <col:47> 'int' 16
|-CXXMethodDecl 0x5636451c2fe8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5636451c3158 <line:436:5, col:75> col:45 used set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5636451c3098 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5636451c3200 <col:20>
| `-OptimizeNoneAttr 0x5636451c3258 <col:30>
|-CXXMethodDecl 0x5636451c32a8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x5636451d71b0 <col:18, col:36>
|   `-ReturnStmt 0x5636451d71a0 <col:20, col:33>
|     `-ImplicitCastExpr 0x5636451d7188 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x5636451d7168 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x5636451d7138 <col:27> '<bound member function type>' ->xanno 0x5636451c1308
|           `-CXXThisExpr 0x5636451d7128 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5636451c33a0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x5636451d72c0 <col:30, col:48>
|   `-ReturnStmt 0x5636451d72b0 <col:32, col:45>
|     `-ImplicitCastExpr 0x5636451d7298 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x5636451d7278 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x5636451d7248 <col:39> '<bound member function type>' ->xanno 0x5636451c1168
|           `-CXXThisExpr 0x5636451d7238 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5636451c3488 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x5636451d7458 <col:24, col:50>
|   `-ReturnStmt 0x5636451d7448 <col:26, col:47>
|     `-UnaryOperator 0x5636451d7430 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5636451d7410 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x5636451d73f8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5636451d73a8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5636451cc688
|         |   `-CXXMemberCallExpr 0x5636451d7388 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x5636451d7358 <col:34> '<bound member function type>' ->xanno 0x5636451c1308
|         |       `-CXXThisExpr 0x5636451d7348 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x5636451d73d8 <col:46> 'int' 0
|-CXXMethodDecl 0x5636451c3590 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x5636451d7628 <col:36, col:62>
|   `-ReturnStmt 0x5636451d7618 <col:38, col:59>
|     `-UnaryOperator 0x5636451d7600 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5636451d75e0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5636451d75c8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5636451d7540 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5636451cc688
|         |   `-CXXMemberCallExpr 0x5636451d7520 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5636451d74f0 <col:46> '<bound member function type>' ->xanno 0x5636451c1168
|         |       `-CXXThisExpr 0x5636451d74e0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5636451d7570 <col:58> 'int' 0
|-CXXMethodDecl 0x5636451c36a8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x5636451d77c0 <col:26, col:53>
|   `-ReturnStmt 0x5636451d77b0 <col:28, col:50>
|     `-UnaryOperator 0x5636451d7798 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5636451d7778 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x5636451d7760 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5636451d7710 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5636451cc988
|         |   `-CXXMemberCallExpr 0x5636451d76f0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x5636451d76c0 <col:36> '<bound member function type>' ->xanno 0x5636451c1308
|         |       `-CXXThisExpr 0x5636451d76b0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5636451d7740 <col:49> 'int' 0
|-CXXMethodDecl 0x5636451c37c8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x5636451d7998 <col:38, col:65>
|   `-ReturnStmt 0x5636451d7988 <col:40, col:62>
|     `-UnaryOperator 0x5636451d7970 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5636451d7950 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5636451d7938 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5636451d78a8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5636451cc988
|         |   `-CXXMemberCallExpr 0x5636451d7888 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5636451d7858 <col:48> '<bound member function type>' ->xanno 0x5636451c1168
|         |       `-CXXThisExpr 0x5636451d7848 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5636451d78d8 <col:61> 'int' 0
|-CXXMethodDecl 0x5636451c3978 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5636451c3880 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x5636451d8068 <col:34, line:463:5>
|   |-ParenExpr 0x5636451d7eb0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x5636451d7e80 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5636451d7ae8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5636451d7ab8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5636451d7a08 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5636451d79f0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5636451d79b0 <col:23> 'int' lvalue ParmVar 0x5636451c3880 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5636451d79d0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5636451d7a98 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5636451d7a68 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5636451d7a28 <col:33> 'int' lvalue ParmVar 0x5636451c3880 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5636451d7a80 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5636451d7a48 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5636451c1550 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5636451d7b48 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5636451d7b28 <col:56> 'int' 0
|   |   `-CallExpr 0x5636451d7de0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5636451d7dc8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5636451d7da8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563644d2da00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5636451d7e20 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636451d7c38 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5636451d7e38 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636451d7c68 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5636451d7e50 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5636451d7ca0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x5636451d7e68 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5636451d7d90 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5636451d7d78 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5636451d7d38 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x5636451d8058 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x5636451d8040 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x5636451d8020 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5636451d7ff0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5636451d7fa0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5636451cc688
|         |   `-CXXMemberCallExpr 0x5636451d7f80 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5636451d7f50 <col:9> '<bound member function type>' ->xanno 0x5636451c1168
|         |       `-CXXThisExpr 0x5636451d7f40 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x5636451d8008 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5636451d7fd0 <col:21> 'int' lvalue ParmVar 0x5636451c3880 'i' 'int'
|-CXXMethodDecl 0x5636451c3bc8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5636451c3a38 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5636451c3ab0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x5636451d86f8 <col:40, line:472:5>
|   |-ParenExpr 0x5636451d8510 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x5636451d84e0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5636451d81c0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5636451d8190 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5636451d80e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5636451d80c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5636451d8088 <col:23> 'int' lvalue ParmVar 0x5636451c3a38 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5636451d80a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5636451d8170 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5636451d8140 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5636451d8100 <col:33> 'int' lvalue ParmVar 0x5636451c3a38 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5636451d8158 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5636451d8120 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5636451c1550 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5636451d8220 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5636451d8200 <col:56> 'int' 0
|   |   `-CallExpr 0x5636451d8440 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5636451d8428 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5636451d8408 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563644d2da00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5636451d8480 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636451d8290 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5636451d8498 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636451d82c0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5636451d84b0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5636451d82f8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x5636451d84c8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5636451d83f0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5636451d83d8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5636451d8398 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x5636451d86d8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x5636451d8680 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x5636451d8650 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5636451d8600 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5636451cc688
|     | |   `-CXXMemberCallExpr 0x5636451d85e0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x5636451d85b0 <col:2> '<bound member function type>' ->xanno 0x5636451c1308
|     | |       `-CXXThisExpr 0x5636451d85a0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x5636451d8668 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5636451d8630 <col:14> 'int' lvalue ParmVar 0x5636451c3a38 'i' 'int'
|     `-ImplicitCastExpr 0x5636451d86c0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x5636451d86a0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5636451c3ab0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5636451c3d88 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5636451c3c90 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5636451d8e78 <col:36, line:485:5>
|   |-ParenExpr 0x5636451d8be0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x5636451d8bb0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5636451d8890 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5636451d8860 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5636451d8770 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5636451d8758 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5636451d8718 <col:23> 'int' lvalue ParmVar 0x5636451c3c90 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5636451d8738 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5636451d8840 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5636451d8828 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5636451d8790 <col:33> 'int' lvalue ParmVar 0x5636451c3c90 'i' 'int'
|   |   |     `-BinaryOperator 0x5636451d8808 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5636451d87f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5636451d87b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5636451c1550 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5636451d87d0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5636451d88f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5636451d88d0 <col:60> 'int' 0
|   |   `-CallExpr 0x5636451d8b10 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5636451d8af8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5636451d8ad8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563644d2da00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5636451d8b50 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636451d8960 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5636451d8b68 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636451d8998 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5636451d8b80 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5636451d89d0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x5636451d8b98 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5636451d8ac0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5636451d8aa8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5636451d8a68 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x5636451d8e68 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x5636451d8e50 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x5636451d8e38 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5636451d8e08 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x5636451d8da8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5636451d8d78 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5636451d8cf0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5636451cc560
|             |   `-CXXMemberCallExpr 0x5636451d8cd0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5636451d8ca0 <col:61> '<bound member function type>' ->xanno 0x5636451c1168
|             |       `-CXXThisExpr 0x5636451d8c90 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5636451d8d90 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5636451d8d20 <col:74> 'int' lvalue ParmVar 0x5636451c3c90 'i' 'int'
|-CXXMethodDecl 0x5636451c3fd8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5636451c3e48 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5636451c3ec0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5636451d95c8 <col:42, line:500:5>
|   |-ParenExpr 0x5636451d9360 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x5636451d9330 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5636451d9010 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5636451d8fe0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5636451d8ef0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5636451d8ed8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5636451d8e98 <col:23> 'int' lvalue ParmVar 0x5636451c3e48 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5636451d8eb8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5636451d8fc0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5636451d8fa8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5636451d8f10 <col:33> 'int' lvalue ParmVar 0x5636451c3e48 'i' 'int'
|   |   |     `-BinaryOperator 0x5636451d8f88 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5636451d8f70 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5636451d8f30 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5636451c1550 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5636451d8f50 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5636451d9070 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5636451d9050 <col:60> 'int' 0
|   |   `-CallExpr 0x5636451d9290 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5636451d9278 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5636451d9258 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563644d2da00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5636451d92d0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636451d90e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5636451d92e8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636451d9118 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5636451d9300 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5636451d9150 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x5636451d9318 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5636451d9240 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5636451d9228 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5636451d91e8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x5636451d95a8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x5636451d9558 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5636451d9528 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x5636451d94d0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5636451d94a0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5636451d9450 <col:48, col:57> 'char [48]' lvalue ->c 0x5636451cc560
|     |     |   `-CXXMemberCallExpr 0x5636451d9430 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5636451d9400 <col:48> '<bound member function type>' ->xanno 0x5636451c1308
|     |     |       `-CXXThisExpr 0x5636451d93f0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5636451d94b8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5636451d9480 <col:61> 'int' lvalue ParmVar 0x5636451c3e48 'i' 'int'
|     `-ImplicitCastExpr 0x5636451d9590 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5636451d9570 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5636451c3ec0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5636451c4198 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5636451c40a0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5636451d9d28 <col:35, line:513:5>
|   |-ParenExpr 0x5636451d9a38 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x5636451d9a08 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5636451d9760 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5636451d9730 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5636451d9640 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5636451d9628 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5636451d95e8 <col:23> 'int' lvalue ParmVar 0x5636451c40a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5636451d9608 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5636451d9710 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5636451d96f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5636451d9660 <col:33> 'int' lvalue ParmVar 0x5636451c40a0 'i' 'int'
|   |   |     `-BinaryOperator 0x5636451d96d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5636451d96c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5636451d9680 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5636451c1550 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5636451d96a0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5636451d97c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5636451d97a0 <col:60> 'int' 0
|   |   `-CallExpr 0x5636451d9968 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5636451d9950 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5636451d9930 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563644d2da00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5636451d99a8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636451d9830 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5636451d99c0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636451d9868 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5636451d99d8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5636451d98a0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x5636451d99f0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5636451d9918 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5636451d9900 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5636451d98c0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x5636451d9d18 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x5636451d9d00 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x5636451d9ce8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5636451d9cb8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x5636451d9c30 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5636451d9c00 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5636451d9bb0 <col:60, col:69> 'char const[48]' lvalue ->c 0x5636451cc560
|             |   `-CXXMemberCallExpr 0x5636451d9b90 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5636451d9b60 <col:60> '<bound member function type>' ->xanno 0x5636451c1168
|             |       `-CXXThisExpr 0x5636451d9b50 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5636451d9c18 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5636451d9be0 <col:73> 'int' lvalue ParmVar 0x5636451c40a0 'i' 'int'
|-CXXMethodDecl 0x5636451c43e8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5636451c4258 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5636451c42d0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x5636451da448 <col:41, line:528:5>
|   |-ParenExpr 0x5636451da1d0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x5636451da1a0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5636451d9ec0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5636451d9e90 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5636451d9da0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5636451d9d88 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5636451d9d48 <col:23> 'int' lvalue ParmVar 0x5636451c4258 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5636451d9d68 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5636451d9e70 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5636451d9e58 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5636451d9dc0 <col:33> 'int' lvalue ParmVar 0x5636451c4258 'i' 'int'
|   |   |     `-BinaryOperator 0x5636451d9e38 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5636451d9e20 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5636451d9de0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5636451c1550 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5636451d9e00 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5636451d9f20 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5636451d9f00 <col:60> 'int' 0
|   |   `-CallExpr 0x5636451da100 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5636451da0e8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5636451da0c8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563644d2da00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5636451da140 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636451d9f90 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5636451da158 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636451d9fc8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5636451da170 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5636451da000 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x5636451da188 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5636451da0b0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5636451da098 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5636451da058 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x5636451da428 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x5636451da3d8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5636451da3a8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x5636451da350 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5636451da310 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5636451da2c0 <col:47, col:56> 'char [48]' lvalue ->c 0x5636451cc560
|     |     |   `-CXXMemberCallExpr 0x5636451da2a0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5636451da270 <col:47> '<bound member function type>' ->xanno 0x5636451c1308
|     |     |       `-CXXThisExpr 0x5636451da260 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5636451da328 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5636451da2f0 <col:60> 'int' lvalue ParmVar 0x5636451c4258 'i' 'int'
|     `-ImplicitCastExpr 0x5636451da410 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x5636451da3f0 <col:65> 'int16_t':'short' lvalue ParmVar 0x5636451c42d0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5636451c45a8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5636451c44b0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5636451dab18 <col:36, line:541:5>
|   |-ParenExpr 0x5636451da8b8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x5636451da888 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5636451da5e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5636451da5b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5636451da4c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5636451da4a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5636451da468 <col:23> 'int' lvalue ParmVar 0x5636451c44b0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5636451da488 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5636451da590 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5636451da578 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5636451da4e0 <col:33> 'int' lvalue ParmVar 0x5636451c44b0 'i' 'int'
|   |   |     `-BinaryOperator 0x5636451da558 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5636451da540 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5636451da500 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5636451c1550 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5636451da520 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5636451da640 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5636451da620 <col:60> 'int' 0
|   |   `-CallExpr 0x5636451da7e8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5636451da7d0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5636451da7b0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563644d2da00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5636451da828 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636451da6b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5636451da840 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636451da6e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5636451da858 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5636451da720 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x5636451da870 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5636451da798 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5636451da780 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5636451da740 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x5636451dab08 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x5636451daaf0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5636451daad8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5636451daaa8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x5636451daa50 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5636451daa20 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5636451da9d0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5636451cc560
|             |   `-CXXMemberCallExpr 0x5636451da9b0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5636451da980 <col:61> '<bound member function type>' ->xanno 0x5636451c1168
|             |       `-CXXThisExpr 0x5636451da970 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5636451daa38 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5636451daa00 <col:74> 'int' lvalue ParmVar 0x5636451c44b0 'i' 'int'
|-CXXMethodDecl 0x5636451c4778 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5636451c4668 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5636451c46e0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5636451c4828 <col:20>
| `-OptimizeNoneAttr 0x5636451c4880 <col:30>
|-CXXMethodDecl 0x5636451c49b8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5636451c48c0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5636451db1e8 <col:35, line:562:5>
|   |-ParenExpr 0x5636451daf88 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x5636451daf58 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5636451dacb0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5636451dac80 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5636451dab90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5636451dab78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5636451dab38 <col:23> 'int' lvalue ParmVar 0x5636451c48c0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5636451dab58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5636451dac60 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5636451dac48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5636451dabb0 <col:33> 'int' lvalue ParmVar 0x5636451c48c0 'i' 'int'
|   |   |     `-BinaryOperator 0x5636451dac28 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5636451dac10 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5636451dabd0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5636451c1550 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5636451dabf0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5636451dad10 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5636451dacf0 <col:60> 'int' 0
|   |   `-CallExpr 0x5636451daeb8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5636451daea0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5636451dae80 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563644d2da00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5636451daef8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636451dad80 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5636451daf10 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636451dadb8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5636451daf28 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5636451dadf0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x5636451daf40 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5636451dae68 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5636451dae50 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5636451dae10 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x5636451db1d8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x5636451db1c0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x5636451db1a8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5636451db178 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x5636451db120 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5636451db0f0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5636451db0a0 <col:60, col:69> 'char const[48]' lvalue ->c 0x5636451cc560
|             |   `-CXXMemberCallExpr 0x5636451db080 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5636451db050 <col:60> '<bound member function type>' ->xanno 0x5636451c1168
|             |       `-CXXThisExpr 0x5636451db040 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5636451db108 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5636451db0d0 <col:73> 'int' lvalue ParmVar 0x5636451c48c0 'i' 'int'
|-CXXMethodDecl 0x5636451c4bc8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5636451c4a78 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5636451c4af0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x5636451db8c8 <col:41, line:577:5>
|   |-ParenExpr 0x5636451db658 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x5636451db628 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5636451db380 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5636451db350 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5636451db260 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5636451db248 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5636451db208 <col:23> 'int' lvalue ParmVar 0x5636451c4a78 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5636451db228 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5636451db330 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5636451db318 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5636451db280 <col:33> 'int' lvalue ParmVar 0x5636451c4a78 'i' 'int'
|   |   |     `-BinaryOperator 0x5636451db2f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5636451db2e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5636451db2a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5636451c1550 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5636451db2c0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5636451db3e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5636451db3c0 <col:60> 'int' 0
|   |   `-CallExpr 0x5636451db588 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5636451db570 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5636451db550 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563644d2da00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5636451db5c8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636451db450 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5636451db5e0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636451db488 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5636451db5f8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5636451db4c0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x5636451db610 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5636451db538 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5636451db520 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5636451db4e0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x5636451db8a8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x5636451db858 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5636451db828 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x5636451db7c8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5636451db798 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5636451db748 <col:47, col:56> 'char [48]' lvalue ->c 0x5636451cc560
|     |     |   `-CXXMemberCallExpr 0x5636451db728 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5636451db6f8 <col:47> '<bound member function type>' ->xanno 0x5636451c1308
|     |     |       `-CXXThisExpr 0x5636451db6e8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5636451db7b0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5636451db778 <col:60> 'int' lvalue ParmVar 0x5636451c4a78 'i' 'int'
|     `-ImplicitCastExpr 0x5636451db890 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5636451db870 <col:65> 'int32_t':'int' lvalue ParmVar 0x5636451c4af0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5636451c4d88 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5636451c4c90 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5636451dbff8 <col:36, line:591:5>
|   |-ParenExpr 0x5636451dbd38 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x5636451dbd08 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5636451dba60 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5636451dba30 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5636451db940 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5636451db928 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5636451db8e8 <col:23> 'int' lvalue ParmVar 0x5636451c4c90 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5636451db908 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5636451dba10 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5636451db9f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5636451db960 <col:33> 'int' lvalue ParmVar 0x5636451c4c90 'i' 'int'
|   |   |     `-BinaryOperator 0x5636451db9d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5636451db9c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5636451db980 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5636451c1550 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5636451db9a0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5636451dbac0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5636451dbaa0 <col:60> 'int' 0
|   |   `-CallExpr 0x5636451dbc68 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5636451dbc50 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5636451dbc30 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563644d2da00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5636451dbca8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636451dbb30 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5636451dbcc0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636451dbb68 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5636451dbcd8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5636451dbba0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x5636451dbcf0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5636451dbc18 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5636451dbc00 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5636451dbbc0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x5636451dbfe8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x5636451dbfd0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x5636451dbfb8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5636451dbf88 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x5636451dbf00 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5636451dbed0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5636451dbe80 <col:61, col:70> 'char const[48]' lvalue ->c 0x5636451cc560
|             |   `-CXXMemberCallExpr 0x5636451dbe60 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5636451dbe30 <col:61> '<bound member function type>' ->xanno 0x5636451c1168
|             |       `-CXXThisExpr 0x5636451dbe20 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5636451dbee8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5636451dbeb0 <col:74> 'int' lvalue ParmVar 0x5636451c4c90 'i' 'int'
|-CXXMethodDecl 0x5636451c4fd8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5636451c4e48 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5636451c4ec0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x5636451dc6d8 <col:42, line:606:5>
|   |-ParenExpr 0x5636451dc468 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x5636451dc438 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5636451dc190 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5636451dc160 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5636451dc070 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5636451dc058 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5636451dc018 <col:23> 'int' lvalue ParmVar 0x5636451c4e48 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5636451dc038 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5636451dc140 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5636451dc128 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5636451dc090 <col:33> 'int' lvalue ParmVar 0x5636451c4e48 'i' 'int'
|   |   |     `-BinaryOperator 0x5636451dc108 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5636451dc0f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5636451dc0b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5636451c1550 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5636451dc0d0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5636451dc1f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5636451dc1d0 <col:60> 'int' 0
|   |   `-CallExpr 0x5636451dc398 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5636451dc380 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5636451dc360 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563644d2da00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5636451dc3d8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636451dc260 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5636451dc3f0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636451dc298 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5636451dc408 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5636451dc2d0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x5636451dc420 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5636451dc348 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5636451dc330 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5636451dc2f0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x5636451dc6b8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x5636451dc668 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5636451dc638 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x5636451dc5d8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5636451dc5a8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5636451dc558 <col:48, col:57> 'char [48]' lvalue ->c 0x5636451cc560
|     |     |   `-CXXMemberCallExpr 0x5636451dc538 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5636451dc508 <col:48> '<bound member function type>' ->xanno 0x5636451c1308
|     |     |       `-CXXThisExpr 0x5636451dc4f8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5636451dc5c0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5636451dc588 <col:61> 'int' lvalue ParmVar 0x5636451c4e48 'i' 'int'
|     `-ImplicitCastExpr 0x5636451dc6a0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5636451dc680 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5636451c4ec0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5636451c5170 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5636451c50a0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x5636451dcf48 <col:33, line:620:5>
|   |-ParenExpr 0x5636451dccc0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x5636451dcc90 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5636451dc8e0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5636451dc8b0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5636451dc750 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5636451dc738 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5636451dc6f8 <col:23> 'int' lvalue ParmVar 0x5636451c50a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5636451dc718 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5636451dc890 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5636451dc878 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5636451dc770 <col:33> 'int' lvalue ParmVar 0x5636451c50a0 'i' 'int'
|   |   |     `-BinaryOperator 0x5636451dc858 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5636451dc840 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5636451dc790 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5636451c1550 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5636451dc818 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5636451dc800 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5636451dc7c8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5636451dc940 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5636451dc920 <col:79> 'int' 0
|   |   `-CallExpr 0x5636451dcbf0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5636451dcbd8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5636451dcbb8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563644d2da00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5636451dcc30 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636451dca28 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5636451dcc48 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636451dca70 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5636451dcc60 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5636451dcaa8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x5636451dcc78 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5636451dcba0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5636451dcb88 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5636451dcb48 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x5636451dcf38 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x5636451dcf20 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x5636451dcf08 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5636451dced8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x5636451dce50 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x5636451dce20 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5636451dcdd0 <col:67, col:76> 'char const[48]' lvalue ->c 0x5636451cc560
|             |   `-CXXMemberCallExpr 0x5636451dcdb0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5636451dcd80 <col:67> '<bound member function type>' ->xanno 0x5636451c1168
|             |       `-CXXThisExpr 0x5636451dcd70 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5636451dce38 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5636451dce00 <col:80> 'int' lvalue ParmVar 0x5636451c50a0 'i' 'int'
|-CXXMethodDecl 0x5636451c5388 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5636451c5230 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5636451c52b0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x5636451dd770 <col:45, line:635:5>
|   |-ParenExpr 0x5636451dd4b8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x5636451dd488 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5636451dd150 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5636451dd120 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5636451dcfc0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5636451dcfa8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5636451dcf68 <col:23> 'int' lvalue ParmVar 0x5636451c5230 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5636451dcf88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5636451dd100 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5636451dd0e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5636451dcfe0 <col:33> 'int' lvalue ParmVar 0x5636451c5230 'i' 'int'
|   |   |     `-BinaryOperator 0x5636451dd0c8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5636451dd0b0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5636451dd000 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5636451c1550 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5636451dd088 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5636451dd070 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5636451dd038 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5636451dd1b0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5636451dd190 <col:79> 'int' 0
|   |   `-CallExpr 0x5636451dd3e8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5636451dd3d0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5636451dd3b0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563644d2da00 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5636451dd428 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636451dd220 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5636451dd440 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5636451dd268 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5636451dd458 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5636451dd2a0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x5636451dd470 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5636451dd398 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5636451dd380 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5636451dd338 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x5636451dd750 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x5636451dd6b8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5636451dd688 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x5636451dd628 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5636451dd5f8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5636451dd5a8 <col:54, col:63> 'char [48]' lvalue ->c 0x5636451cc560
|     |     |   `-CXXMemberCallExpr 0x5636451dd588 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5636451dd558 <col:54> '<bound member function type>' ->xanno 0x5636451c1308
|     |     |       `-CXXThisExpr 0x5636451dd548 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5636451dd610 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5636451dd5d8 <col:67> 'int' lvalue ParmVar 0x5636451c5230 'i' 'int'
|     `-CXXConstCastExpr 0x5636451dd720 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x5636451dd708 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5636451dd6d0 <col:91> 'const void *' lvalue ParmVar 0x5636451c52b0 'x' 'const void *'
|-CXXMethodDecl 0x5636451c5458 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x5636451dd7f8 <col:34, line:640:5>
|   `-ReturnStmt 0x5636451dd7e8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x5636451dd7d0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x5636451dd7a0 <col:16> 'Packet *' lvalue ->_data_packet 0x5636451cd118
|         `-CXXThisExpr 0x5636451dd790 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5636451c5598 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5636451c5508 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5636451d68b8 <col:46> 'bool' true
|-CXXMethodDecl 0x5636451c5718 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5636451c5650 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5636451c57c0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5636451c5f70 <line:660:22> "" ""
| |-EnumConstantDecl 0x5636451c58c0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5636451c5fe0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451c58a0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5636451c5880 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5636451baa20 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5636451c5950 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5636451c5ff8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451c5930 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5636451c5910 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5636451baab0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5636451c59e0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5636451c6010 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451c59c0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5636451c59a0 <col:21> 'int' 0
| |-EnumConstantDecl 0x5636451c5a70 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5636451c6028 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451c5a50 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5636451c5a30 <col:19> 'int' 16
| |-EnumConstantDecl 0x5636451c5b00 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5636451c6040 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451c5ae0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5636451c5ac0 <col:21> 'int' 16
| |-EnumConstantDecl 0x5636451c5b90 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5636451c6058 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451c5b70 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5636451c5b50 <col:19> 'int' 32
| |-EnumConstantDecl 0x5636451c5c20 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5636451c6070 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451c5c00 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5636451c5be0 <col:19> 'int' EnumConstant 0x5636451c5a70 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5636451c5cb0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5636451c6088 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451c5c90 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5636451c5c70 <col:19> 'int' EnumConstant 0x5636451c5b90 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5636451c5d80 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5636451c60a0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451c5d60 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5636451c5d40 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5636451c5d00 <col:23> 'int' EnumConstant 0x5636451c5cb0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5636451c5d20 <col:40> 'int' 2
| |-EnumConstantDecl 0x5636451c5e50 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5636451c60b8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5636451c5e30 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5636451c5e10 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5636451c5dd0 <col:23> 'int' EnumConstant 0x5636451c5cb0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5636451c5df0 <col:40> 'int' 4
| `-EnumConstantDecl 0x5636451c5f20 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5636451c60d0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5636451c5f00 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5636451c5ee0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5636451c5ea0 <col:23> 'int' EnumConstant 0x5636451c5cb0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5636451c5ec0 <col:40> 'int' 8
|-CXXMethodDecl 0x5636451c6110 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5636451c61b0 <col:68> "" ""
|-CXXMethodDecl 0x5636451c6248 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5636451c62e8 <col:45> "" ""
|-CXXMethodDecl 0x5636451c6380 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5636451c6420 <col:57> "" ""
|-CXXMethodDecl 0x5636451c64b8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5636451c6558 <col:45> "" ""
|-CXXMethodDecl 0x5636451c65f0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5636451c6690 <col:57> "" ""
|-CXXMethodDecl 0x5636451c6720 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5636451c67c0 <col:51> "" ""
|-CXXMethodDecl 0x5636451c6850 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5636451c68f0 <col:63> "" ""
|-CXXMethodDecl 0x5636451c6980 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5636451c6a20 <col:53> "" ""
|-CXXMethodDecl 0x5636451c6ab0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5636451c6b50 <col:65> "" ""
|-CXXMethodDecl 0x5636451c6c68 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5636451c6bd8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5636451c6d10 <col:61> "" ""
|-CXXMethodDecl 0x5636451c6ea8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5636451c6d98 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5636451c6e10 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5636451c6f58 <col:67> "" ""
|-CXXMethodDecl 0x5636451c7070 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5636451c6fe0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5636451c7118 <col:63> "" ""
|-CXXMethodDecl 0x5636451c72b0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5636451c71a0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5636451c7218 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5636451c7360 <col:69> "" ""
|-CXXMethodDecl 0x5636451c7478 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5636451c73e8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5636451c7520 <col:63> "" ""
|-CXXMethodDecl 0x5636451ca138 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5636451ca028 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5636451ca0a0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5636451ca1e8 <col:69> "" ""
|-CXXMethodDecl 0x5636451ca300 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5636451ca270 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5636451ca3a8 <col:62> "" ""
|-CXXMethodDecl 0x5636451ca540 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5636451ca430 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5636451ca4a8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5636451ca5f0 <col:68> "" ""
|-CXXMethodDecl 0x5636451ca708 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5636451ca678 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5636451ca7b0 <col:63> "" ""
|-CXXMethodDecl 0x5636451ca948 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5636451ca838 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5636451ca8b0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5636451ca9f8 <col:69> "" ""
|-CXXMethodDecl 0x5636451caa88 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5636451cab28 <col:64> "" ""
|-CXXMethodDecl 0x5636451cabb8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5636451cac58 <col:52> "" ""
|-CXXMethodDecl 0x5636451cace8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5636451cad88 <col:67> "" ""
|-CXXMethodDecl 0x5636451cae18 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5636451caeb8 <col:55> "" ""
|-CXXMethodDecl 0x5636451cafd0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5636451caf40 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5636451cb078 <col:58> "" ""
|-CXXMethodDecl 0x5636451cb210 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5636451cb100 <col:33> col:36 'int'
| |-ParmVarDecl 0x5636451cb178 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5636451cb2c0 <col:62> "" ""
|-CXXMethodDecl 0x5636451cb3d8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5636451cb348 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5636451cb480 <col:58> "" ""
|-CXXMethodDecl 0x5636451cb618 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5636451cb508 <col:33> col:36 'int'
| |-ParmVarDecl 0x5636451cb580 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5636451cb6c8 <col:62> "" ""
|-CXXMethodDecl 0x5636451cb7e0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5636451cb750 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5636451cb888 <col:60> "" ""
|-CXXMethodDecl 0x5636451cba20 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5636451cb910 <col:34> col:37 'int'
| |-ParmVarDecl 0x5636451cb988 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5636451cbad0 <col:64> "" ""
|-CXXMethodDecl 0x5636451cbbe8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5636451cbb58 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5636451cbc90 <col:58> "" ""
|-CXXMethodDecl 0x5636451cbe28 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5636451cbd18 <col:33> col:36 'int'
| |-ParmVarDecl 0x5636451cbd90 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5636451cbed8 <col:62> "" ""
|-CXXMethodDecl 0x5636451cbff0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5636451cbf60 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5636451cc098 <col:59> "" ""
|-CXXMethodDecl 0x5636451cc230 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5636451cc120 <col:33> col:36 'int'
| |-ParmVarDecl 0x5636451cc198 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5636451cc2e0 <col:63> "" ""
|-AccessSpecDecl 0x5636451cc350 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5636451cc378 prev 0x5636451c1040 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5636451cc470 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5636451cc560 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5636451cc688 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5636451cc808 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5636451cc988 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5636451ccb08 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x5636451dd978 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5636451de1e8 <col:11>
| |-CXXDestructorDecl 0x5636451dda50 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5636451ddb88 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5636451ddb88
| | `-ParmVarDecl 0x5636451ddc98 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x5636451ddd38 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5636451ddd38
| | `-ParmVarDecl 0x5636451dde48 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x5636451e3618 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5636451e3728 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5636451e39a8 <col:11>
| |   `-ReturnStmt 0x5636451e3998 <col:11>
| |     `-UnaryOperator 0x5636451e3980 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5636451e3970 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x5636451e3798 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5636451e3798
|   `-ParmVarDecl 0x5636451e38a8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5636451ccb70 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5636451ccc88 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5636451ccd28 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5636451ccd90 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5636451ccdf8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5636451cce60 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5636451ccec0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5636451ccf80 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5636451ccfe0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5636451cd040 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x5636451dd888 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5636451ccd28 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x5636451de1f8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x5636451de250 <col:12>
| |-CXXConstructorDecl 0x5636451ddeb8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5636451ddeb8
| | `-ParmVarDecl 0x5636451ddfc8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x5636451de068 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5636451de068
| | `-ParmVarDecl 0x5636451de178 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x5636451e2d00 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5636451cd0b8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5636451cd118 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5636451cd180 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5636451cd1e8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5636451cd250 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5636451cd2b8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5636451cd318 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5636451cd378 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5636451cd3e0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5636451cd468 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5636451cd0b8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x5636451dd820 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5636451cd318 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x5636451de260 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x5636451de2c0 <col:21, line:755:5>
|-CXXConstructorDecl 0x5636451cd608 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5636451cd548 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5636451cd700 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5636451cd8e8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5636451cd7f0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5636451cdbb8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5636451cd9a0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5636451cda18 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5636451cda90 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636451cddd8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5636451cdc88 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5636451cdd00 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x5636451d63f8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5636451cde98 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5636451cdf10 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5636451cdf88 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x5636451d6550 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5636451d64c0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636451d6698 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5636451d6608 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x5636451d6790 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636451e0d70 prev 0x5636451ba6a0 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x5636451e0ea8 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x5636451e0f38 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x5636451e0fe0 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x5636451e1080 <col:20>
| `-OptimizeNoneAttr 0x5636451e10d8 <col:30>
|-CXXMethodDecl 0x5636451e1128 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x5636451e11c8 <col:20>
| `-OptimizeNoneAttr 0x5636451e1220 <col:30>
|-CXXMethodDecl 0x5636451e1270 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5636451e1338 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5636451e1400 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5636451e1518 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x5636451e15e0 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x5636451e1680 <col:20>
| `-OptimizeNoneAttr 0x5636451e16d8 <col:30>
|-CXXMethodDecl 0x5636451e1748 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x5636451e17e8 <col:20>
| `-OptimizeNoneAttr 0x5636451e1840 <col:30>
|-CXXMethodDecl 0x5636451e18e8 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x5636451e1988 <col:20>
| `-OptimizeNoneAttr 0x5636451e19e0 <col:30>
|-CXXMethodDecl 0x5636451e1a30 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5636451e1b48 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x5636451e1c68 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x5636451e1d88 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x5636451e1e50 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x5636451e1ef0 <col:62> "" ""
|-AccessSpecDecl 0x5636451e1f60 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x5636451e1fc0 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x5636451e2bb8 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x5636451e2de0 <col:29, col:31>
|-CXXMethodDecl 0x5636451e2088 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x5636451e21c8 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x5636451e2138 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x5636451e22c0 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x5636451e2df0 <col:23, col:25>
|-CXXMethodDecl 0x5636451e2478 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x5636451e23b0 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x5636451e2748 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5636451e2530 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5636451e25a8 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5636451e2620 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5636451e28d8 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x5636451e2810 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x5636451e29d0 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x5636451e2a38 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x5636451e2a38
  `-ParmVarDecl 0x5636451e2b48 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563644ff15d8 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x563644ff16f8 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x563644ff17e0 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x563644ff17c0 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x563644ff1788 <col:22> 'int' 4
|-FieldDecl 0x563644ff1888 <line:29:5, col:21> col:14 referenced ip_v 'unsigned int'
| `-ConstantExpr 0x563644ff1868 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x563644ff1830 <col:21> 'int' 4
|-FieldDecl 0x563644ff18e8 <line:33:5, col:13> col:13 ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x563644ff1948 <line:40:5, col:14> col:14 referenced ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x563644ff19a8 <line:41:5, col:14> col:14 referenced ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x563644ff1a08 <line:42:5, col:14> col:14 ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x563644ff1a68 <line:47:5, col:13> col:13 referenced ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x563644ff1ac8 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x563644ff1b28 <line:49:5, col:14> col:14 referenced ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x563644ff1b98 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x563644ff1c08 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636452e8c18 <../dummy_inc/clicknet/icmp.h:27:1, line:33:1> line:27:8 referenced struct click_icmp_sequenced definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5636452e8d38 <col:1, col:8> col:8 implicit struct click_icmp_sequenced
|-FieldDecl 0x5636452e8dd8 <line:28:5, col:13> col:13 referenced icmp_type 'uint8_t':'unsigned char'
|-FieldDecl 0x5636452e8e38 <line:29:5, col:13> col:13 referenced icmp_code 'uint8_t':'unsigned char'
|-FieldDecl 0x5636452e8e98 <line:30:5, col:14> col:14 referenced icmp_cksum 'uint16_t':'unsigned short'
|-FieldDecl 0x5636452e8ef8 <line:31:5, col:14> col:14 referenced icmp_identifier 'uint16_t':'unsigned short'
`-FieldDecl 0x5636452e8f58 <line:32:5, col:14> col:14 referenced icmp_sequence 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_icmp_sequenced = type { i8, i8, i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_icmp_sequenced = type { i8, i8, i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563644ff4520 prev 0x563644f59338 <../dummy_inc/click/ipaddress.hh:15:1, line:154:1> line:15:7 referenced class IPAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563644ff4618 <col:1, col:7> col:7 implicit referenced class IPAddress
|-AccessSpecDecl 0x563644ff46a8 <col:19, col:25> col:19 public
|-TypedefDecl 0x563644ff46e0 <line:17:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x563644de6c10 'uninitialized_type'
|   `-CXXRecord 0x563644de6b78 'uninitialized_type'
|-CXXConstructorDecl 0x563644ff47a0 <line:20:5, line:22:5> line:20:12 IPAddress 'void ()' inline
| |-CXXCtorInitializer Field 0x563644ff7ef0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x563644ff7f98 <line:21:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x563644ff7f58 <col:10> 'int' 0
| `-CompoundStmt 0x563644ff7fe0 <col:13, line:22:5>
|-CXXConstructorDecl 0x563644ff48f0 <line:25:5, line:27:5> line:25:12 used IPAddress 'void (unsigned int)' inline
| |-ParmVarDecl 0x563644ff4860 <col:22, col:31> col:31 used x 'unsigned int'
| |-CXXCtorInitializer Field 0x563644ff7ef0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x563644ff8030 <line:26:10> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x563644ff7ff0 <col:10> 'unsigned int' lvalue ParmVar 0x563644ff4860 'x' 'unsigned int'
| `-CompoundStmt 0x563644ff8078 <col:13, line:27:5>
|-CXXConstructorDecl 0x563644ff4a48 <line:29:5, line:31:5> line:29:21 IPAddress 'void (int)' inline
| |-ParmVarDecl 0x563644ff49b8 <col:31, col:35> col:35 used x 'int'
| |-CXXCtorInitializer Field 0x563644ff7ef0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x563644ff80e0 <line:30:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x563644ff80c8 <col:10> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x563644ff8088 <col:10> 'int' lvalue ParmVar 0x563644ff49b8 'x' 'int'
| `-CompoundStmt 0x563644ff8128 <col:13, line:31:5>
|-CXXConstructorDecl 0x563644ff4ba0 <line:33:5, line:35:5> line:33:21 IPAddress 'void (unsigned long)' inline
| |-ParmVarDecl 0x563644ff4b10 <col:31, col:45> col:45 used x 'unsigned long'
| |-CXXCtorInitializer Field 0x563644ff7ef0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x563644ff8190 <line:34:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x563644ff8178 <col:10> 'unsigned long' <LValueToRValue>
| |     `-DeclRefExpr 0x563644ff8138 <col:10> 'unsigned long' lvalue ParmVar 0x563644ff4b10 'x' 'unsigned long'
| `-CompoundStmt 0x563644ff81d8 <col:13, line:35:5>
|-CXXConstructorDecl 0x563644ff4cf8 <line:37:5, line:39:5> line:37:21 IPAddress 'void (long)' inline
| |-ParmVarDecl 0x563644ff4c68 <col:31, col:36> col:36 used x 'long'
| |-CXXCtorInitializer Field 0x563644ff7ef0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x563644ff8240 <line:38:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x563644ff8228 <col:10> 'long' <LValueToRValue>
| |     `-DeclRefExpr 0x563644ff81e8 <col:10> 'long' lvalue ParmVar 0x563644ff4c68 'x' 'long'
| `-CompoundStmt 0x563644ff8288 <col:13, line:39:5>
|-CXXConstructorDecl 0x563644ff4eb8 <line:42:5, line:44:5> line:42:12 used IPAddress 'void (struct in_addr)' inline
| |-ParmVarDecl 0x563644ff4dc8 <col:22, col:37> col:37 used x 'struct in_addr':'in_addr'
| |-CXXCtorInitializer Field 0x563644ff7ef0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x563644ff8308 <line:43:10, col:12> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x563644ff82b8 <col:10, col:12> 'in_addr_t':'unsigned int' lvalue .s_addr 0x563644f280f0
| |     `-DeclRefExpr 0x563644ff8298 <col:10> 'struct in_addr':'in_addr' lvalue ParmVar 0x563644ff4dc8 'x' 'struct in_addr':'in_addr'
| `-CompoundStmt 0x563644ff8350 <col:20, line:44:5>
|-CXXConstructorDecl 0x563644ff5048 <line:50:5, line:56:5> line:50:14 IPAddress 'void (const unsigned char *)'
| |-ParmVarDecl 0x563644ff4f80 <col:24, col:45> col:45 used data 'const unsigned char *'
| `-CompoundStmt 0x563644ff84b8 <col:51, line:56:5>
|   `-BinaryOperator 0x563644ff8498 <line:52:2, col:52> 'uint32_t':'unsigned int' lvalue '='
|     |-MemberExpr 0x563644ff8370 <col:2> 'uint32_t':'unsigned int' lvalue ->_addr 0x563644ff7ef0
|     | `-CXXThisExpr 0x563644ff8360 <col:2> 'IPAddress *' implicit this
|     `-ImplicitCastExpr 0x563644ff8480 <col:10, col:52> 'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x563644ff8468 <col:10, col:52> 'const unsigned int' lvalue prefix '*' cannot overflow
|         `-ParenExpr 0x563644ff8448 <col:11, col:52> 'const unsigned int *'
|           `-CXXReinterpretCastExpr 0x563644ff8418 <col:12, col:51> 'const unsigned int *' reinterpret_cast<const unsigned int *> <BitCast>
|             `-ImplicitCastExpr 0x563644ff8400 <col:47> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|               `-DeclRefExpr 0x563644ff83a0 <col:47> 'const unsigned char *' lvalue ParmVar 0x563644ff4f80 'data' 'const unsigned char *'
|-CXXConstructorDecl 0x563644ff5198 <line:63:5, col:39> col:14 IPAddress 'void (const String &)'
| `-ParmVarDecl 0x563644ff5108 <col:24, col:38> col:38 x 'const String &'
|-CXXConstructorDecl 0x563644ff5348 <line:66:5, line:68:5> line:66:12 IPAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x563644ff5288 <col:22, col:48> col:48 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x563644ff8528 <col:56, line:68:5>
|   `-CStyleCastExpr 0x563644ff8500 <line:67:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x563644ff84d0 <col:9> 'const uninitialized_type' lvalue ParmVar 0x563644ff5288 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x563644ff54d8 <line:78:5, col:48> col:22 make_prefix 'IPAddress (int)' static
| `-ParmVarDecl 0x563644ff5410 <col:34, col:38> col:38 prefix_len 'int'
|-CXXMethodDecl 0x563644ff55c8 <line:81:5, line:83:5> line:81:29 make_broadcast 'IPAddress ()' static inline
| `-CompoundStmt 0x563644ff94e8 <col:46, line:83:5>
|   `-ReturnStmt 0x563644ff94d8 <line:82:2, col:29>
|     `-ExprWithCleanups 0x563644ff94c0 <col:9, col:29> 'IPAddress'
|       `-CXXConstructExpr 0x563644ff9490 <col:9, col:29> 'IPAddress' 'void (IPAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x563644ff9348 <col:9, col:29> 'IPAddress' xvalue
|           `-CXXFunctionalCastExpr 0x563644ff9230 <col:9, col:29> 'IPAddress' functional cast to class IPAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x563644ff9118 <col:9, col:29> 'IPAddress' 'void (unsigned int)'
|               `-IntegerLiteral 0x563644ff8550 <col:19> 'unsigned int' 4294967295
|-CXXMethodDecl 0x563644ff56b8 <line:86:5, line:88:5> line:86:17 empty 'bool () const' inline
| `-CompoundStmt 0x563644ff9598 <col:31, line:88:5>
|   `-ReturnStmt 0x563644ff9588 <line:87:2, col:10>
|     `-UnaryOperator 0x563644ff9570 <col:9, col:10> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x563644ff9558 <col:10> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x563644ff9540 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x563644ff9510 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x563644ff7ef0
|             `-CXXThisExpr 0x563644ff9500 <col:10> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x563644ff5778 <line:91:5, line:93:5> line:91:21 used addr 'uint32_t () const' inline
| `-CompoundStmt 0x563644ff9618 <col:34, line:93:5>
|   `-ReturnStmt 0x563644ff9608 <line:92:2, col:9>
|     `-ImplicitCastExpr 0x563644ff95f0 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x563644ff95c0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x563644ff7ef0
|         `-CXXThisExpr 0x563644ff95b0 <col:9> 'const IPAddress *' implicit this
|-CXXConversionDecl 0x563644ff5848 <line:99:5, line:101:5> line:99:12 operator unsigned int 'uint32_t () const' inline
| `-CompoundStmt 0x563644ff9698 <col:38, line:101:5>
|   `-ReturnStmt 0x563644ff9688 <line:100:2, col:9>
|     `-ImplicitCastExpr 0x563644ff9670 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x563644ff9640 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x563644ff7ef0
|         `-CXXThisExpr 0x563644ff9630 <col:9> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x563644ff5918 <line:106:5, line:108:5> line:106:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x563644ff9968 <col:38, line:108:5>
|   `-ReturnStmt 0x563644ff9958 <line:107:2, col:58>
|     `-BinaryOperator 0x563644ff9938 <col:9, col:58> 'bool' '=='
|       |-ParenExpr 0x563644ff9850 <col:9, col:36> 'unsigned int'
|       | `-BinaryOperator 0x563644ff9830 <col:10, col:35> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x563644ff9818 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x563644ff96c0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x563644ff7ef0
|       |   |   `-CXXThisExpr 0x563644ff96b0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x563644ff97f0 <col:18, col:35> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x563644ff97d8 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x563644ff9758 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x563644f36628 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x563644ff9738 <col:24> 'unsigned int' 4026531840
|       `-CallExpr 0x563644ff9910 <col:41, col:58> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x563644ff98f8 <col:41> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x563644ff98d8 <col:41> 'uint32_t (uint32_t) throw()' lvalue Function 0x563644f36628 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x563644ff98b8 <col:47> 'unsigned int' 3758096384
|-CXXMethodDecl 0x563644ff59d8 <line:110:5, line:112:5> line:110:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x563644ff9bd8 <col:39, line:112:5>
|   `-ReturnStmt 0x563644ff9bc8 <line:111:2, col:56>
|     `-BinaryOperator 0x563644ff9ba8 <col:9, col:56> 'bool' '=='
|       |-ParenExpr 0x563644ff9ac0 <col:9, col:35> 'unsigned int'
|       | `-BinaryOperator 0x563644ff9aa0 <col:10, col:34> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x563644ff9a88 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x563644ff9990 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x563644ff7ef0
|       |   |   `-CXXThisExpr 0x563644ff9980 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x563644ff9a60 <col:18, col:34> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x563644ff9a48 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x563644ff9a28 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x563644f36628 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x563644ff9a08 <col:24> 'unsigned int' 4294901760
|       `-CallExpr 0x563644ff9b80 <col:40, col:56> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x563644ff9b68 <col:40> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x563644ff9b48 <col:40> 'uint32_t (uint32_t) throw()' lvalue Function 0x563644f36628 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x563644ff9b28 <col:46> 'unsigned int' 2851995648
|-CXXMethodDecl 0x563644ff5b08 <line:114:5, col:37> col:27 used in_addr 'struct in_addr () const' inline
|-CXXConversionDecl 0x563644ff5c10 <line:115:5, col:38> col:12 operator in_addr 'struct in_addr () const' inline
|-CXXMethodDecl 0x563644ff5d20 <line:117:5, col:32> col:27 data 'unsigned char *()' inline
|-CXXMethodDecl 0x563644ff6de8 <line:118:5, col:40> col:33 data 'const unsigned char *() const' inline
|-CXXMethodDecl 0x563644ff6ea8 <line:120:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x563644ff6f70 <line:122:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x563644ff7168 <line:123:5, col:64> col:17 matches_prefix 'bool (IPAddress, IPAddress) const' inline
| |-ParmVarDecl 0x563644ff7020 <col:32, col:42> col:42 addr 'IPAddress'
| `-ParmVarDecl 0x563644ff7098 <col:48, col:58> col:58 mask 'IPAddress'
|-CXXMethodDecl 0x563644ff72e8 <line:124:5, col:50> col:17 mask_as_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x563644ff7228 <col:34, col:44> col:44 mask 'IPAddress'
|-CXXMethodDecl 0x563644ff7430 <line:125:5, col:52> col:17 mask_more_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x563644ff73a0 <col:36, col:46> col:46 mask 'IPAddress'
|-CXXMethodDecl 0x563644ff75d8 <line:137:5, col:43> col:23 operator&= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x563644ff74e8 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x563644ff7720 <line:138:5, col:43> col:23 operator|= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x563644ff7690 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x563644ff7868 <line:139:5, col:43> col:23 operator^= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x563644ff77d8 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x563644ff7930 <line:141:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x563644ff79f0 <line:142:5, col:27> col:12 unparse_mask 'String () const'
|-CXXMethodDecl 0x563644ff7b68 <line:143:5, col:41> col:12 unparse_with_mask 'String (IPAddress) const'
| `-ParmVarDecl 0x563644ff7aa0 <col:30> col:39 'IPAddress'
|-CXXMethodDecl 0x563644ff7c30 <line:145:5, col:23> col:19 s 'String () const' inline
|-CXXConversionDecl 0x563644ff7d18 <line:146:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x563644ff7dc0 <col:51> "" ""
|-TypedefDecl 0x563644ff7e60 <line:148:5, col:23> col:23 parameter_type 'IPAddress'
| `-RecordType 0x563644f593d0 'IPAddress'
|   `-CXXRecord 0x563644ff4520 'IPAddress'
|-AccessSpecDecl 0x563644ff7eb8 <line:150:3, col:10> col:3 private
|-FieldDecl 0x563644ff7ef0 <line:152:5, col:14> col:14 referenced _addr 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x563644ff8598 <line:15:7> col:7 implicit constexpr IPAddress 'void (const IPAddress &)' inline default trivial noexcept-unevaluated 0x563644ff8598
| `-ParmVarDecl 0x563644ff86a8 <col:7> col:7 'const IPAddress &'
|-CXXConstructorDecl 0x563644ff8748 <col:7> col:7 implicit used constexpr IPAddress 'void (IPAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x563644ff8858 <col:7> col:7 used 'IPAddress &&'
| |-CXXCtorInitializer Field 0x563644ff7ef0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x563644ff9438 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x563644ff93f0 <col:7> 'uint32_t':'unsigned int' xvalue ._addr 0x563644ff7ef0
| |     `-CXXStaticCastExpr 0x563644ff93c0 <col:7> 'IPAddress' xvalue static_cast<class IPAddress &&> <NoOp>
| |       `-DeclRefExpr 0x563644ff9390 <col:7> 'IPAddress' lvalue ParmVar 0x563644ff8858 '' 'IPAddress &&'
| `-CompoundStmt 0x563644ff9480 <col:7>
`-CXXDestructorDecl 0x563644ff9148 <col:7> col:7 implicit referenced ~IPAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddress = type { i32 }
  NonVirtualBaseLLVMType:%class.IPAddress = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_icmp
         0 |   uint8_t icmp_type
         1 |   uint8_t icmp_code
         2 |   uint16_t icmp_cksum
         4 |   uint32_t padding
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636452e88f8 prev 0x5636451ba330 <../dummy_inc/clicknet/icmp.h:17:1, line:23:1> line:17:8 referenced struct click_icmp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5636452e89f0 <col:1, col:8> col:8 implicit struct click_icmp
|-FieldDecl 0x5636452e8a90 <line:18:5, col:13> col:13 icmp_type 'uint8_t':'unsigned char'
|-FieldDecl 0x5636452e8af0 <line:19:5, col:13> col:13 icmp_code 'uint8_t':'unsigned char'
|-FieldDecl 0x5636452e8b50 <line:20:5, col:14> col:14 icmp_cksum 'uint16_t':'unsigned short'
`-FieldDecl 0x5636452e8bb0 <line:21:5, col:14> col:14 padding 'uint32_t':'unsigned int'

Layout: <CGRecordLayout
  LLVMType:%struct.click_icmp = type { i8, i8, i16, i32 }
  NonVirtualBaseLLVMType:%struct.click_icmp = type { i8, i8, i16, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class StringAccum
         0 |   struct StringAccum::rep_t r_
         0 |     unsigned char * s
         8 |     int len
        12 |     int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636453c36b0 <../dummy_inc/click/straccum.hh:112:5, line:122:5> line:112:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5636453c37c8 <col:5, col:12> col:12 implicit referenced struct rep_t
|-FieldDecl 0x5636453c3870 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
|-FieldDecl 0x5636453c38d8 <line:114:2, col:6> col:6 referenced len 'int'
|-FieldDecl 0x5636453c3940 <line:115:2, col:6> col:6 referenced cap 'int'
|-CXXConstructorDecl 0x5636453c39f0 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| |-CXXCtorInitializer Field 0x5636453c3870 's' 'unsigned char *'
| | `-CXXReinterpretCastExpr 0x5636453c4870 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| |   `-CXXConstCastExpr 0x5636453c4828 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| |     `-CallExpr 0x5636453c47f0 <col:63, col:82> 'const char *'
| |       `-ImplicitCastExpr 0x5636453c47d8 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| |         `-DeclRefExpr 0x5636453c4780 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x563644fe4c40 'empty_data' 'const char *()'
| |-CXXCtorInitializer Field 0x5636453c38d8 'len' 'int'
| | `-IntegerLiteral 0x5636453c48e8 <line:118:12> 'int' 0
| |-CXXCtorInitializer Field 0x5636453c3940 'cap' 'int'
| | `-IntegerLiteral 0x5636453c4950 <col:20> 'int' 0
| `-CompoundStmt 0x5636453c49d0 <col:23, line:119:2>
|-CXXConstructorDecl 0x5636453c3b68 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| |-ParmVarDecl 0x5636453c3aa8 <col:17> col:35 'uninitialized_type'
| `-CompoundStmt 0x5636453c49e0 <col:37, line:121:2>
|-CXXConstructorDecl 0x5636453c6bf8 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5636453c6d08 <col:12> col:12 used 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x5636453c3870 's' 'unsigned char *'
| | `-ImplicitCastExpr 0x5636453c8640 <col:12> 'unsigned char *' <LValueToRValue>
| |   `-MemberExpr 0x5636453c8610 <col:12> 'unsigned char *const' lvalue .s 0x5636453c3870
| |     `-DeclRefExpr 0x5636453c85f0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5636453c6d08 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x5636453c38d8 'len' 'int'
| | `-ImplicitCastExpr 0x5636453c86d0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5636453c86a0 <col:12> 'const int' lvalue .len 0x5636453c38d8
| |     `-DeclRefExpr 0x5636453c8680 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5636453c6d08 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x5636453c3940 'cap' 'int'
| | `-ImplicitCastExpr 0x5636453c8760 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5636453c8730 <col:12> 'const int' lvalue .cap 0x5636453c3940
| |     `-DeclRefExpr 0x5636453c8710 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5636453c6d08 '' 'const StringAccum::rep_t &'
| `-CompoundStmt 0x5636453c87b8 <col:12>
|-CXXConstructorDecl 0x5636453c6da8 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x5636453c6da8
| `-ParmVarDecl 0x5636453c6eb8 <col:12> col:12 'StringAccum::rep_t &&'
`-CXXDestructorDecl 0x5636453c8a70 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  NonVirtualBaseLLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636453bdde8 prev 0x56364522b9d0 <../dummy_inc/click/straccum.hh:28:1, line:137:1> line:28:7 referenced class StringAccum definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5636453bdee0 <col:1, col:7> col:7 implicit referenced class StringAccum
|-AccessSpecDecl 0x5636453bdf70 <col:21, col:27> col:21 public
|-TypedefDecl 0x5636453bdfb0 <line:30:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x563644c8ddc0 'const char *'
|   `-QualType 0x563644c8d311 'const char' const
|     `-BuiltinType 0x563644c8d310 'char'
|-TypedefDecl 0x5636453be020 <line:31:5, col:19> col:19 referenced iterator 'char *'
| `-PointerType 0x563644c8df90 'char *'
|   `-BuiltinType 0x563644c8d310 'char'
|-TypedefDecl 0x5636453be160 <line:33:5, col:57> col:32 referenced unspecified_bool_type 'int (StringAccum::*)() const'
| `-MemberPointerType 0x5636453be0d0 'int (StringAccum::*)() const'
|   |-RecordType 0x563644f4f2e0 'StringAccum'
|   | `-CXXRecord 0x5636453bdde8 'StringAccum'
|   `-ParenType 0x563644fbec50 'int () const' sugar
|     `-FunctionProtoType 0x563644f927e0 'int () const' const cdecl
|       `-BuiltinType 0x563644c8d370 'int'
|-CXXConstructorDecl 0x5636453be220 <line:35:5, col:24> col:12 used StringAccum 'void ()' inline
|-CXXConstructorDecl 0x5636453be370 <line:36:5, col:45> col:21 StringAccum 'void (int)' inline
| `-ParmVarDecl 0x5636453be2e0 <col:33, col:37> col:37 capacity 'int'
|-CXXConstructorDecl 0x5636453be4c0 <line:37:5, col:41> col:12 StringAccum 'void (const String &)' inline
| `-ParmVarDecl 0x5636453be430 <col:24, col:38> col:38 str 'const String &'
|-CXXConstructorDecl 0x5636453be668 <line:38:5, col:44> col:12 StringAccum 'void (const StringAccum &)' inline
| `-ParmVarDecl 0x5636453be5a8 <col:24, col:43> col:43 x 'const StringAccum &'
|-CXXConstructorDecl 0x5636453be818 <line:40:5, col:39> col:12 StringAccum 'void (StringAccum &&)' inline
| `-ParmVarDecl 0x5636453be758 <col:24, col:38> col:38 x 'StringAccum &&'
|-CXXDestructorDecl 0x5636453be910 <line:42:5, col:25> col:12 used ~StringAccum 'void () noexcept' inline
|-CXXMethodDecl 0x5636453beac8 <line:44:5, col:55> col:25 operator= 'StringAccum &(const StringAccum &)' inline
| `-ParmVarDecl 0x5636453bea00 <col:35, col:54> col:54 x 'const StringAccum &'
|-CXXMethodDecl 0x5636453bec48 <line:46:5, col:50> col:25 operator= 'StringAccum &(StringAccum &&)' inline
| `-ParmVarDecl 0x5636453beb80 <col:35, col:49> col:49 x 'StringAccum &&'
|-CXXMethodDecl 0x5636453bed40 <line:49:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5636453bee08 <line:50:5, col:23> col:18 data 'char *()' inline
|-CXXMethodDecl 0x5636453beed0 <line:51:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5636453bef98 <line:52:5, col:27> col:16 used capacity 'int () const' inline
|-CXXMethodDecl 0x5636453bf060 <line:54:5, col:23> col:17 c_str 'const char *()'
|-CXXConversionDecl 0x5636453bf1c8 <line:56:5, col:45> col:12 operator int (StringAccum::*)() const 'StringAccum::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5636453bf298 <line:57:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5636453bf358 <line:58:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5636453bf468 <line:60:5, col:35> col:27 used begin 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x5636453bf578 <line:61:5, col:27> col:21 begin 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x5636453bf638 <line:62:5, col:33> col:27 used end 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x5636453bf6f8 <line:63:5, col:25> col:21 end 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x5636453bf840 <line:65:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5636453bf7b0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5636453bf9d0 <line:66:5, col:34> col:18 operator[] 'char &(int)' inline
| `-ParmVarDecl 0x5636453bf900 <col:29, col:33> col:33 i 'int'
|-CXXMethodDecl 0x5636453bfa98 <line:67:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5636453bfb90 <line:68:5, col:24> col:18 front 'char &()' inline
|-CXXMethodDecl 0x5636453bfc50 <line:69:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5636453bfd18 <line:70:5, col:23> col:18 back 'char &()' inline
|-CXXMethodDecl 0x5636453bfdd8 <line:72:5, col:33> col:17 used out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5636453bfe98 <line:73:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5636453bff58 <line:75:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5636453c00a8 <line:76:5, col:31> col:18 reserve 'char *(int)' inline
| `-ParmVarDecl 0x5636453c0010 <col:26, col:30> col:30 n 'int'
|-CXXMethodDecl 0x5636453c01f8 <line:77:5, col:35> col:17 set_length 'void (int)' inline
| `-ParmVarDecl 0x5636453c0168 <col:28, col:32> col:32 len 'int'
|-CXXMethodDecl 0x5636453c0350 <line:78:5, col:23> col:9 resize 'int (int)'
| `-ParmVarDecl 0x5636453c02b8 <col:16, col:20> col:20 len 'int'
|-CXXMethodDecl 0x5636453c04a0 <line:79:5, col:40> col:17 used adjust_length 'void (int)' inline
| `-ParmVarDecl 0x5636453c0410 <col:31, col:35> col:35 delta 'int'
|-CXXMethodDecl 0x5636453c06c0 <line:80:5, col:54> col:18 extend 'char *(int, int)' inline
| |-ParmVarDecl 0x5636453c0560 <col:25, col:29> col:29 nadjust 'int'
| `-ParmVarDecl 0x5636453c05e0 <col:38, col:53> col:42 nreserve 'int' cinit
|   `-IntegerLiteral 0x5636453c46a8 <col:53> 'int' 0
|-CXXMethodDecl 0x5636453c0818 <line:82:5, col:35> col:17 pop_back 'void (int)' inline
| `-ParmVarDecl 0x5636453c0788 <col:26, col:34> col:30 n 'int' cinit
|   `-IntegerLiteral 0x5636453c46c8 <col:34> 'int' 1
|-CXXMethodDecl 0x5636453c0960 <line:84:5, col:30> col:17 used append 'void (char)' inline
| `-ParmVarDecl 0x5636453c08d0 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5636453c0ab0 <line:85:5, col:39> col:17 used append 'void (unsigned char)' inline
| `-ParmVarDecl 0x5636453c0a20 <col:24, col:38> col:38 c 'unsigned char'
|-CXXMethodDecl 0x5636453c0c00 <line:86:5, col:35> col:17 append_utf8 'bool (int)' inline
| `-ParmVarDecl 0x5636453c0b70 <col:29, col:33> col:33 ch 'int'
|-CXXMethodDecl 0x5636453c0d50 <line:87:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5636453c0cc0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5636453c1fa0 <line:88:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5636453c0e10 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5636453c0e90 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5636453c2180 <line:89:5, col:55> col:17 used append 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5636453c2068 <col:24, col:45> col:45 s 'const unsigned char *'
| `-ParmVarDecl 0x5636453c20e8 <col:48, col:52> col:52 len 'int'
|-CXXMethodDecl 0x5636453c2360 <line:90:5, col:59> col:17 used append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5636453c2248 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5636453c22c8 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5636453c2540 <line:91:5, col:77> col:17 append 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5636453c2428 <col:24, col:45> col:45 first 'const unsigned char *'
| `-ParmVarDecl 0x5636453c24a8 <col:52, col:73> col:73 last 'const unsigned char *'
|-CXXMethodDecl 0x5636453c2720 <line:92:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5636453c2608 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5636453c2688 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5636453c2a78 <line:93:5, col:81> col:10 used append_numeric 'void (String::intmax_t, int, bool)'
| |-ParmVarDecl 0x5636453c2860 <col:25, col:42> col:42 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5636453c28e0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5636453c46e8 <col:56> 'int' 10
| `-ParmVarDecl 0x5636453c2958 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5636453c4708 <col:77> 'bool' true
|-CXXMethodDecl 0x5636453c2dd8 <line:94:5, col:82> col:10 used append_numeric 'void (String::uintmax_t, int, bool)'
| |-ParmVarDecl 0x5636453c2bc0 <col:25, col:43> col:43 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5636453c2c40 <col:46, col:57> col:50 base 'int' cinit
| | `-IntegerLiteral 0x5636453c4718 <col:57> 'int' 10
| `-ParmVarDecl 0x5636453c2cb8 <col:61, col:78> col:66 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5636453c4738 <col:78> 'bool' true
|-CXXMethodDecl 0x5636453c3000 <line:96:5, col:57> col:18 used snprintf 'StringAccum &(int, const char *, ...)'
| |-ParmVarDecl 0x5636453c2ea8 <col:27, col:31> col:31 n 'int'
| `-ParmVarDecl 0x5636453c2f28 <col:34, col:46> col:46 format 'const char *'
|-CXXMethodDecl 0x5636453c30f8 <line:98:5, col:24> col:12 used take_string 'String ()'
|-CXXMethodDecl 0x5636453c3268 <line:100:5, col:29> col:10 used swap 'void (StringAccum &)'
| `-ParmVarDecl 0x5636453c31a8 <col:15, col:28> col:28 x 'StringAccum &'
|-CXXMethodDecl 0x5636453c33b8 <line:104:5, col:62> col:17 forward 'void (int)' inline
| |-ParmVarDecl 0x5636453c3328 <col:25, col:29> col:29 delta 'int'
| `-DeprecatedAttr 0x5636453c3460 <col:51> "" ""
|-AccessSpecDecl 0x5636453c34d0 <line:106:3, col:10> col:3 private
|-EnumDecl 0x5636453c34f8 <line:108:5, line:110:5> line:108:5
| `-EnumConstantDecl 0x5636453c3648 <line:109:2, col:23> col:2 referenced MEMO_SPACE 'StringAccum::(anonymous enum at ../dummy_inc/click/straccum.hh:108:5)'
|   `-ImplicitCastExpr 0x5636453c3698 <col:15, col:23> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5636453c3628 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' Int: 12
|       `-DeclRefExpr 0x5636453c35f8 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' EnumConstant 0x563644fc79b8 'MEMO_SPACE' 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|-CXXRecordDecl 0x5636453c36b0 <line:112:5, line:122:5> line:112:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5636453c37c8 <col:5, col:12> col:12 implicit referenced struct rep_t
| |-FieldDecl 0x5636453c3870 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
| |-FieldDecl 0x5636453c38d8 <line:114:2, col:6> col:6 referenced len 'int'
| |-FieldDecl 0x5636453c3940 <line:115:2, col:6> col:6 referenced cap 'int'
| |-CXXConstructorDecl 0x5636453c39f0 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| | |-CXXCtorInitializer Field 0x5636453c3870 's' 'unsigned char *'
| | | `-CXXReinterpretCastExpr 0x5636453c4870 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| | |   `-CXXConstCastExpr 0x5636453c4828 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| | |     `-CallExpr 0x5636453c47f0 <col:63, col:82> 'const char *'
| | |       `-ImplicitCastExpr 0x5636453c47d8 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| | |         `-DeclRefExpr 0x5636453c4780 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x563644fe4c40 'empty_data' 'const char *()'
| | |-CXXCtorInitializer Field 0x5636453c38d8 'len' 'int'
| | | `-IntegerLiteral 0x5636453c48e8 <line:118:12> 'int' 0
| | |-CXXCtorInitializer Field 0x5636453c3940 'cap' 'int'
| | | `-IntegerLiteral 0x5636453c4950 <col:20> 'int' 0
| | `-CompoundStmt 0x5636453c49d0 <col:23, line:119:2>
| |-CXXConstructorDecl 0x5636453c3b68 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| | |-ParmVarDecl 0x5636453c3aa8 <col:17> col:35 'uninitialized_type'
| | `-CompoundStmt 0x5636453c49e0 <col:37, line:121:2>
| |-CXXConstructorDecl 0x5636453c6bf8 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5636453c6d08 <col:12> col:12 used 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x5636453c3870 's' 'unsigned char *'
| | | `-ImplicitCastExpr 0x5636453c8640 <col:12> 'unsigned char *' <LValueToRValue>
| | |   `-MemberExpr 0x5636453c8610 <col:12> 'unsigned char *const' lvalue .s 0x5636453c3870
| | |     `-DeclRefExpr 0x5636453c85f0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5636453c6d08 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x5636453c38d8 'len' 'int'
| | | `-ImplicitCastExpr 0x5636453c86d0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5636453c86a0 <col:12> 'const int' lvalue .len 0x5636453c38d8
| | |     `-DeclRefExpr 0x5636453c8680 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5636453c6d08 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x5636453c3940 'cap' 'int'
| | | `-ImplicitCastExpr 0x5636453c8760 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5636453c8730 <col:12> 'const int' lvalue .cap 0x5636453c3940
| | |     `-DeclRefExpr 0x5636453c8710 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5636453c6d08 '' 'const StringAccum::rep_t &'
| | `-CompoundStmt 0x5636453c87b8 <col:12>
| |-CXXConstructorDecl 0x5636453c6da8 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x5636453c6da8
| | `-ParmVarDecl 0x5636453c6eb8 <col:12> col:12 'StringAccum::rep_t &&'
| `-CXXDestructorDecl 0x5636453c8a70 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-FieldDecl 0x5636453c3c40 <line:124:5, col:11> col:11 referenced r_ 'StringAccum::rep_t'
|-CXXMethodDecl 0x5636453c3d40 <line:126:5, col:19> col:11 used grow 'char *(int)'
| `-ParmVarDecl 0x5636453c3ca8 <col:16> col:19 'int'
|-CXXMethodDecl 0x5636453c3f20 <line:127:5, col:48> col:11 used hard_extend 'char *(int, int)'
| |-ParmVarDecl 0x5636453c3e00 <col:23, col:27> col:27 nadjust 'int'
| `-ParmVarDecl 0x5636453c3e80 <col:36, col:40> col:40 nreserve 'int'
|-CXXMethodDecl 0x5636453c4100 <line:128:5, col:44> col:10 used hard_append 'void (const char *, int)'
| |-ParmVarDecl 0x5636453c3fe8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5636453c4068 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5636453c4258 <line:129:5, col:43> col:10 used hard_append_cstr 'void (const char *)'
| `-ParmVarDecl 0x5636453c41c8 <col:27, col:39> col:39 cstr 'const char *'
|-CXXMethodDecl 0x5636453c43a8 <line:130:5, col:33> col:10 used append_utf8_hard 'bool (int)'
| `-ParmVarDecl 0x5636453c4318 <col:27, col:31> col:31 ch 'int'
`-FriendDecl 0x5636453c4668 <line:132:5, col:70> col:25
  `-FunctionDecl 0x5636453c45a8 parent 0x563644c8d278 <col:5, col:70> col:25 operator<< 'StringAccum &(StringAccum &, const String &)'
    |-ParmVarDecl 0x5636453c4460 <col:36, col:49> col:49 sa 'StringAccum &'
    `-ParmVarDecl 0x5636453c44d8 <col:53, col:67> col:67 str 'const String &'

Layout: <CGRecordLayout
  LLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  NonVirtualBaseLLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPAddressArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636452d04f0 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5636452d0608 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x5636452d0698 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x5636452d08d8 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x5636452d06d0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x5636452d0750 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x5636452d07c8 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5636452d0af0 <col:81> 'const ArgContext' lvalue Var 0x5636452ba158 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x5636452d0a30 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x5636452d09a0 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x5636452d0c48 <col:35, line:1261:5>
|   `-ReturnStmt 0x5636452d0c38 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x5636452d0c20 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x5636452d0bf0 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5636452d0bd8 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x5636452d0bb0 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x5636452d0b90 <col:16, col:24> 'String' (CXXTemporary 0x5636452d0b90)
|               `-CXXConstructExpr 0x5636452d0b58 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x5636452d0b40 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x5636452d0b20 <col:23> 'bool' lvalue ParmVar 0x5636452d09a0 'x' 'bool'
|-CXXConstructorDecl 0x5636454536a8 <line:1257:7> col:7 implicit referenced constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5636454537a8 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x5636454537a8
| `-ParmVarDecl 0x5636454538b8 <col:7> col:7 'const BoolArg &'
|-CXXConstructorDecl 0x563645453958 <col:7> col:7 implicit constexpr BoolArg 'void (BoolArg &&)' inline default trivial noexcept-unevaluated 0x563645453958
| `-ParmVarDecl 0x563645453a68 <col:7> col:7 'BoolArg &&'
`-CXXDestructorDecl 0x563645453b08 <col:7> col:7 implicit referenced ~BoolArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563645000ef0 prev 0x563644ff42e8 <../dummy_inc/click/ipaddress.hh:367:1, line:378:1> line:367:7 referenced class IPAddressArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563645000fe8 <col:1, col:7> col:7 implicit class IPAddressArg
|-AccessSpecDecl 0x563645001078 <col:22, col:28> col:22 public
|-CXXMethodDecl 0x5636450014a0 <line:368:5, line:369:43> line:368:24 basic_parse 'const char *(const char *, const char *, unsigned char *, int &)' static
| |-ParmVarDecl 0x5636450010b8 <col:36, col:48> col:48 begin 'const char *'
| |-ParmVarDecl 0x563645001138 <col:55, col:67> col:67 end 'const char *'
| |-ParmVarDecl 0x563645001270 <line:369:8, col:29> col:22 value 'unsigned char *':'unsigned char *'
| `-ParmVarDecl 0x563645001320 <col:32, col:37> col:37 nbytes 'int &'
|-CXXMethodDecl 0x563645001768 <line:370:5, line:371:44> line:370:17 used parse 'bool (const String &, IPAddress &, const ArgContext &)' static
| |-ParmVarDecl 0x563645001570 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x5636450015e8 <col:42, col:53> col:53 result 'IPAddress &'
| `-ParmVarDecl 0x563645001688 <line:371:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x563645006108 <col:34> 'const ArgContext' lvalue Var 0x563644ff4280 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x563645005b60 <line:372:5, line:375:5> line:372:17 used parse 'bool (const String &, struct in_addr &, const ArgContext &)' static
| |-ParmVarDecl 0x563645001830 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x563645001920 <col:42, col:58> col:58 used result 'struct in_addr &'
| |-ParmVarDecl 0x563645001998 <line:373:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x563645006128 <col:34> 'const ArgContext' lvalue Var 0x563644ff4280 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x563645006308 <col:46, line:375:5>
|   `-ReturnStmt 0x5636450062f8 <line:374:2, col:63>
|     `-CallExpr 0x5636450062c0 <col:9, col:63> 'bool'
|       |-ImplicitCastExpr 0x5636450062a8 <col:9> 'bool (*)(const String &, IPAddress &, const ArgContext &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563645006260 <col:9> 'bool (const String &, IPAddress &, const ArgContext &)' lvalue CXXMethod 0x563645001768 'parse' 'bool (const String &, IPAddress &, const ArgContext &)'
|       |-DeclRefExpr 0x5636450061c0 <col:15> 'const String' lvalue ParmVar 0x563645001830 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x563645006210 <col:20, col:56> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x5636450061e0 <col:50> 'struct in_addr':'in_addr' lvalue ParmVar 0x563645001920 'result' 'struct in_addr &'
|       `-DeclRefExpr 0x563645006240 <col:59> 'const ArgContext' lvalue ParmVar 0x563645001998 'args' 'const ArgContext &'
|-CXXMethodDecl 0x563645006038 <line:376:5, line:377:44> line:376:17 parse 'bool (const String &, Vector<IPAddress> &, const ArgContext &)' static
| |-ParmVarDecl 0x563645005c28 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x563645005ea0 <col:42, col:61> col:61 result 'Vector<IPAddress> &'
| `-ParmVarDecl 0x563645005f18 <line:377:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x563645006148 <col:34> 'const ArgContext' lvalue Var 0x563644ff4280 'blank_args' 'const ArgContext'
|-CXXConstructorDecl 0x563645454418 <line:367:7> col:7 implicit referenced constexpr IPAddressArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x563645454518 <col:7> col:7 implicit constexpr IPAddressArg 'void (const IPAddressArg &)' inline default trivial noexcept-unevaluated 0x563645454518
| `-ParmVarDecl 0x563645454628 <col:7> col:7 'const IPAddressArg &'
|-CXXConstructorDecl 0x5636454546c8 <col:7> col:7 implicit constexpr IPAddressArg 'void (IPAddressArg &&)' inline default trivial noexcept-unevaluated 0x5636454546c8
| `-ParmVarDecl 0x5636454547d8 <col:7> col:7 'IPAddressArg &&'
`-CXXDestructorDecl 0x563645454878 <col:7> col:7 implicit referenced ~IPAddressArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddressArg = type { i8 }
  NonVirtualBaseLLVMType:%class.IPAddressArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636452c2e58 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x5636452c2fb8 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x5636452c3048 <col:32, col:38> col:32 public
|-TypedefDecl 0x5636452c3080 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x563644de6f00 'uint32_t' sugar
|   |-Typedef 0x563644cf6408 'uint32_t'
|   `-TypedefType 0x563644ccf440 '__uint32_t' sugar
|     |-Typedef 0x563644ccf038 '__uint32_t'
|     `-BuiltinType 0x563644c8d410 'unsigned int'
|-CXXConstructorDecl 0x5636452c31c8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x5636452c30f0 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x5636452c46a8 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5636452c4be8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5636452c3f60 'base' 'int'
| | `-ImplicitCastExpr 0x5636452c4748 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5636452c4708 <col:16> 'int' lvalue ParmVar 0x5636452c30f0 'b' 'int'
| `-CompoundStmt 0x5636452c4c58 <col:19, line:1046:5>
|-CXXMethodDecl 0x5636452c36c0 <line:1048:5, line:1050:50> line:1048:17 parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x5636452c3290 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x5636452c3310 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x5636452c3388 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x5636452c3408 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x5636452c34c8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x5636452c3548 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x5636452c3b18 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x5636452c3790 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| `-CXXMethodDecl 0x5636452c3a78 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
|   |-ParmVarDecl 0x5636452c3838 <col:27, col:41> col:41 referenced str 'const String &'
|   |-ParmVarDecl 0x5636452c38d8 <col:46, col:49> col:49 referenced result 'V &'
|   |-ParmVarDecl 0x5636452c3950 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
|   | `-DeclRefExpr 0x5636452c46c8 <col:82> 'const ArgContext' lvalue Var 0x5636452ba158 'blank_args' 'const ArgContext'
|   `-CompoundStmt 0x5636452c5b88 <col:94, line:1067:5>
|     |-DeclStmt 0x5636452c4de8 <line:1054:9, col:64>
|     | `-VarDecl 0x5636452c4c78 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-CXXDependentScopeMemberExpr 0x5636452c4da0 <col:36, col:55> '<dependent type>' lvalue ->is_signed
|     |-DeclStmt 0x5636452c5008 <line:1055:9, col:91>
|     | `-VarDecl 0x5636452c4e18 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x5636452c4fe0 <col:31, col:90> 'int' functional cast to int <Dependent>
|     |     `-BinaryOperator 0x5636452c4fc0 <col:35, col:89> 'unsigned long' '/'
|     |       |-ParenExpr 0x5636452c4f70 <col:35, col:69> 'unsigned long'
|     |       | `-BinaryOperator 0x5636452c4f50 <col:36, col:68> 'unsigned long' '-'
|     |       |   |-BinaryOperator 0x5636452c4ef8 <col:36, col:64> 'unsigned long' '+'
|     |       |   | |-UnaryExprOrTypeTraitExpr 0x5636452c4ea8 <col:36, col:44> 'unsigned long' sizeof 'V'
|     |       |   | `-UnaryExprOrTypeTraitExpr 0x5636452c4ed8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |       |   `-ImplicitCastExpr 0x5636452c4f38 <col:68> 'unsigned long' <IntegralCast>
|     |       |     `-IntegerLiteral 0x5636452c4f18 <col:68> 'int' 1
|     |       `-UnaryExprOrTypeTraitExpr 0x5636452c4fa0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x5636452c5168 <line:1056:9, col:27>
|     | `-VarDecl 0x5636452c5100 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
|     |-IfStmt 0x5636452c55b0 <line:1057:9, line:1059:22>
|     | |-CXXOperatorCallExpr 0x5636452c54e0 <line:1057:13, line:1058:24> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x5636452c5460 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5636451b1358 0x563644ffa6e8 0x563644ffa3c0 0x563644febba0 0x563644feb850 0x563644feb140 0x563644fbdab0 0x563644f49d50
|     | | |-CallExpr 0x5636452c53a0 <line:1057:13, col:78> '<dependent type>'
|     | | | |-UnresolvedMemberExpr 0x5636452c5190 <col:13> '<bound member function type>' lvalue
|     | | | |-CXXMemberCallExpr 0x5636452c5240 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5636452c5210 <col:19, col:23> '<bound member function type>' .begin 0x563644fdada8
|     | | | |   `-DeclRefExpr 0x5636452c51f0 <col:19> 'const String' lvalue ParmVar 0x5636452c3838 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x5636452c52b0 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5636452c5280 <col:32, col:36> '<bound member function type>' .end 0x563644fdafc0
|     | | | |   `-DeclRefExpr 0x5636452c5260 <col:32> 'const String' lvalue ParmVar 0x5636452c3838 'str' 'const String &'
|     | | | |-DeclRefExpr 0x5636452c52d0 <col:43> 'const bool' lvalue Var 0x5636452c4c78 'is_signed' 'const bool'
|     | | | |-CXXFunctionalCastExpr 0x5636452c5338 <col:54, col:67> 'int' functional cast to int <Dependent>
|     | | | | `-UnaryExprOrTypeTraitExpr 0x5636452c5318 <col:58, col:66> 'unsigned long' sizeof 'V'
|     | | | |-DeclRefExpr 0x5636452c5360 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x5636452c5100 'x' 'IntArg::limb_type [nlimb]'
|     | | | `-DeclRefExpr 0x5636452c5380 <col:73> 'const int' lvalue Var 0x5636452c4e18 'nlimb' 'const int'
|     | | `-CXXMemberCallExpr 0x5636452c5440 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x5636452c5410 <col:16, col:20> '<bound member function type>' .end 0x563644fdafc0
|     | |     `-DeclRefExpr 0x5636452c53f0 <col:16> 'const String' lvalue ParmVar 0x5636452c3838 'str' 'const String &'
|     | `-BinaryOperator 0x5636452c5590 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x5636452c5528 <col:13> 'int' lvalue ->status 0x5636452c3fc8
|     |   | `-CXXThisExpr 0x5636452c5518 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x5636452c5578 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x5636452c5558 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5636452c2c20 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x5636452c5800 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x5636452c56e8 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x5636452c56d0 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x5636452c56b8 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x5636452c55d8 <col:13> 'int' lvalue ->status 0x5636452c3fc8
|     | | |     `-CXXThisExpr 0x5636452c55c8 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x5636452c5698 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x5636452c5668 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x5636452c5618 <col:23> 'int' lvalue ->status 0x5636452c3fc8
|     | |   |   `-CXXThisExpr 0x5636452c5608 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x5636452c5680 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x5636452c5648 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5636452c2cb0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x5636452c57e0 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x5636452c5780 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x5636452c5728 <col:13, col:18> '<bound member function type>' .error 0x56364526ddd0
|     |   | | `-DeclRefExpr 0x5636452c5708 <col:13> 'const ArgContext' lvalue ParmVar 0x5636452c3950 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x5636452c57a8 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x5636452c5758 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x5636452c57d0 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x5636452c57c0 <col:20> 'bool' false
|     |-DeclStmt 0x5636452c59d8 <line:1064:9, col:64>
|     | `-TypedefDecl 0x5636452c5980 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
|     |   `-DependentNameType 0x5636452c5910 'typename make_unsigned<V>::type' dependent
|     |-CallExpr 0x5636452c5b38 <line:1065:9, col:71> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5636452c59f0 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x563644f7dd18
|     | |-DeclRefExpr 0x5636452c5a38 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x5636452c5100 'x' 'IntArg::limb_type [nlimb]'
|     | `-CXXReinterpretCastExpr 0x5636452c5b08 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
|     |   `-DeclRefExpr 0x5636452c5a80 <col:64> 'V' lvalue ParmVar 0x5636452c38d8 'result' 'V &'
|     `-ReturnStmt 0x5636452c5b78 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x5636452c5b68 <col:16> 'bool' true
|-FunctionTemplateDecl 0x5636452c3ed8 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x5636452c3b88 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5636452c3e38 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5636452c3c38 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x5636452c3cd8 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x5636452c3d50 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5636452c46e8 <col:71> 'const ArgContext' lvalue Var 0x5636452ba158 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5636452c62f8 <col:83, line:1083:5>
| |   |-DeclStmt 0x5636452c5c50 <line:1071:9, col:12>
| |   | `-VarDecl 0x5636452c5be8 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x5636452c62d0 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x5636452c5ee0 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x5636452c5d68 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x5636452c5d30 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x5636452c5c78 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x5636452c5cd0 <col:31> 'const String' lvalue ParmVar 0x5636452c3c38 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x5636452c5cf0 <col:36> 'V' lvalue Var 0x5636452c5be8 'x' 'V'
| |     | |   `-DeclRefExpr 0x5636452c5d10 <col:39> 'const ArgContext' lvalue ParmVar 0x5636452c3d50 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x5636452c5ec0 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x5636452c5ea0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x5636452c5e88 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x5636452c5e70 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x5636452c5d90 <col:17> 'int' lvalue ->status 0x5636452c3fc8
| |     |     |     `-CXXThisExpr 0x5636452c5d80 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x5636452c5e50 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x5636452c5e20 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x5636452c5dd0 <col:27> 'int' lvalue ->status 0x5636452c3fc8
| |     |       |   `-CXXThisExpr 0x5636452c5dc0 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x5636452c5e38 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x5636452c5e00 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5636452c2cb0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x5636452c5f10 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x5636452c5f00 <col:20> 'bool' false
| |     `-IfStmt 0x5636452c62a8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x5636452c5fb0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x5636452c5f80 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5636452c5f30 <col:18> 'int' lvalue ->status 0x5636452c3fc8
| |       | |   `-CXXThisExpr 0x5636452c5f20 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x5636452c5f98 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x5636452c5f60 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5636452c2cb0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x5636452c61e8 <col:42, line:1079:9>
| |       | |-CallExpr 0x5636452c6190 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x5636452c5fe0 <line:1076:13> '<bound member function type>' ->range_error 0x5636452c45d8
| |       | | | `-CXXThisExpr 0x5636452c5fd0 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x5636452c6010 <col:25> 'const ArgContext' lvalue ParmVar 0x5636452c3d50 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x5636452c60f0 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x5636452c6168 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x5636452c6148 <col:43> 'V' lvalue Var 0x5636452c5be8 'x' 'V'
| |       | `-ReturnStmt 0x5636452c61d8 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x5636452c61c8 <col:20> 'bool' false
| |       `-CompoundStmt 0x5636452c6288 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x5636452c6248 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x5636452c6208 <col:13> 'V' lvalue ParmVar 0x5636452c3cd8 'result' 'V &'
| |         | `-DeclRefExpr 0x5636452c6228 <col:22> 'V' lvalue Var 0x5636452c5be8 'x' 'V'
| |         `-ReturnStmt 0x5636452c6278 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x5636452c6268 <col:20> 'bool' true
| `-CXXMethodDecl 0x563645455638 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x563645455410 <col:16, col:30> col:30 str 'const String &'
|   |-ParmVarDecl 0x5636454554e8 <col:35, col:38> col:38 result 'int &'
|   `-ParmVarDecl 0x563645455550 <col:46, col:71> col:64 args 'const ArgContext &' cinit
|     `-DeclRefExpr 0x5636452c46e8 <col:71> 'const ArgContext' lvalue Var 0x5636452ba158 'blank_args' 'const ArgContext'
|-FieldDecl 0x5636452c3f60 <line:1085:5, col:9> col:9 base 'int'
|-FieldDecl 0x5636452c3fc8 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x5636452c4018 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x5636452c42d0 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x5636452c4058 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x5636452c40d8 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x5636452c4150 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x5636452c41d0 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x5636452c45d8 <line:1092:5, line:1093:45> line:1092:10 referenced range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x5636452c43a0 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x5636452c4418 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x5636452c44b0 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x5636452c6b58 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x5636452c6b58
| `-ParmVarDecl 0x5636452c6c68 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x5636452c6de8 <col:7> col:7 implicit constexpr IntArg 'void (IntArg &&)' inline default trivial noexcept-unevaluated 0x5636452c6de8
| `-ParmVarDecl 0x5636452c6ef8 <col:7> col:7 'IntArg &&'
`-CXXDestructorDecl 0x563645455168 <col:7> col:7 implicit referenced ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct char_array<16>
         0 |   char [16] x
           | [sizeof=16, dsize=16, align=1,
           |  nvsize=16, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5636452fd1b0 <../dummy_inc/click/type_traits.hh:165:1, line:167:1> line:165:28 struct char_array definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument integral 16
|-PackedAttr 0x56364549fd08 <line:167:18>
|-CXXRecordDecl 0x56364549fdc8 prev 0x5636452fd1b0 <line:165:21, col:28> col:28 implicit struct char_array
`-FieldDecl 0x56364549fed8 <line:166:5, col:13> col:10 x 'char [16]'

Layout: <CGRecordLayout
  LLVMType:%struct.char_array.10 = type { [16 x i8] }
  NonVirtualBaseLLVMType:%struct.char_array.10 = type { [16 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<struct in_addr>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   struct in_addr * _ptr
        24 |   struct in_addr _slot
        24 |     in_addr_t s_addr
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned short>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned short * _ptr
        24 |   unsigned short _slot
           | [sizeof=32, dsize=26, align=8,
           |  nvsize=26, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class String>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class String * _ptr
        24 |   class String _slot
        24 |     struct String::rep_t _r
        24 |       const char * data
        32 |       int length
        40 |       struct String::memo_t * memo
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | struct uninitialized_type (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563644de6b78 <../dummy_inc/click/config.h:317:1, line:318:1> line:317:8 referenced struct uninitialized_type definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563644de6c98 <col:1, col:8> col:8 implicit struct uninitialized_type
|-CXXConstructorDecl 0x563644ff8d30 <col:8> col:8 implicit referenced constexpr uninitialized_type 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x563644ff8e10 <col:8> col:8 implicit constexpr uninitialized_type 'void (const uninitialized_type &)' inline default trivial noexcept-unevaluated 0x563644ff8e10
| `-ParmVarDecl 0x563644ff8ef8 <col:8> col:8 'const uninitialized_type &'
|-CXXConstructorDecl 0x563644ff8f98 <col:8> col:8 implicit constexpr uninitialized_type 'void (uninitialized_type &&)' inline default trivial noexcept-unevaluated 0x563644ff8f98
| `-ParmVarDecl 0x563644ff90a8 <col:8> col:8 'uninitialized_type &&'
`-CXXDestructorDecl 0x563645195fe0 <col:8> col:8 implicit referenced ~uninitialized_type 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.uninitialized_type = type { i8 }
  NonVirtualBaseLLVMType:%struct.uninitialized_type = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<struct in_addr> (empty)
         0 |   class IPAddressArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x563645007478 <../dummy_inc/click/ipaddress.hh:399:1, col:69> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IPAddressArg'
|-TemplateArgument type 'in_addr'
|-CXXRecordDecl 0x5636450076d8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5636454a53e8 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5636454a54e8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<struct in_addr> &)' inline default trivial noexcept-unevaluated 0x5636454a54e8
| `-ParmVarDecl 0x5636454a55f8 <col:19> col:19 'const DefaultArg<struct in_addr> &'
|-CXXConstructorDecl 0x5636454a5698 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<struct in_addr> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5636454a57a8 <col:19> col:19 used 'DefaultArg<struct in_addr> &&'
| |-CXXCtorInitializer 'IPAddressArg'
| | `-CXXConstructExpr 0x5636454a60e0 <col:19> 'IPAddressArg' 'void (IPAddressArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5636454a60b0 <col:19> 'IPAddressArg' xvalue <UncheckedDerivedToBase (IPAddressArg)>
| |     `-CXXStaticCastExpr 0x5636454a6080 <col:19> 'DefaultArg<struct in_addr>' xvalue static_cast<struct DefaultArg<struct in_addr> &&> <NoOp>
| |       `-DeclRefExpr 0x5636454a6050 <col:19> 'DefaultArg<struct in_addr>' lvalue ParmVar 0x5636454a57a8 '' 'DefaultArg<struct in_addr> &&'
| `-CompoundStmt 0x5636454a6150 <col:19>
`-CXXDestructorDecl 0x5636454a5848 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned short>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5636452caac0 <../dummy_inc/click/args.hh:1180:1, col:63> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned short'
|-CXXRecordDecl 0x5636452cad18 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5636454b7358 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5636454b77f0 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x5636454b77d0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x5636454b7860 <col:19>
|-CXXConstructorDecl 0x5636454b7458 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned short> &)' inline default trivial noexcept-unevaluated 0x5636454b7458
| `-ParmVarDecl 0x5636454b7568 <col:19> col:19 'const DefaultArg<unsigned short> &'
|-CXXConstructorDecl 0x5636454b7608 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned short> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5636454b7718 <col:19> col:19 used 'DefaultArg<unsigned short> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5636454b83e0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5636454b8110 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x5636454b80e0 <col:19> 'DefaultArg<unsigned short>' xvalue static_cast<struct DefaultArg<unsigned short> &&> <NoOp>
| |       `-DeclRefExpr 0x5636454b80b0 <col:19> 'DefaultArg<unsigned short>' lvalue ParmVar 0x5636454b7718 '' 'DefaultArg<unsigned short> &&'
| `-CompoundStmt 0x5636454b8450 <col:19>
`-CXXDestructorDecl 0x5636454b78a0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.20 = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg.20 = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class StringArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class String> (empty)
         0 |   class StringArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5636452d47d8 <../dummy_inc/click/args.hh:1345:1, line:1349:1> line:1345:7 referenced class StringArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5636452d48f8 <col:1, col:7> col:7 implicit class StringArg
|-AccessSpecDecl 0x5636452d4988 <col:19, col:25> col:19 public
|-CXXMethodDecl 0x5636452d4b80 <line:1346:5, line:1348:5> line:1346:17 used parse 'bool (const String &, String &, const ArgContext &)' static
| |-ParmVarDecl 0x5636452d49c0 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x5636452d4a38 <col:42, col:50> col:50 used result 'String &'
| |-ParmVarDecl 0x5636452d4ab0 <col:58, col:79> col:77 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5636452d4c50 <col:79> 'const ArgContext' lvalue Var 0x5636452ba158 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5636452d4df0 <col:91, line:1348:5>
|   `-ReturnStmt 0x5636452d4de0 <line:1347:9, col:41>
|     `-CallExpr 0x5636452d4d90 <col:16, col:41> 'bool'
|       |-ImplicitCastExpr 0x5636452d4d78 <col:16> 'bool (*)(const String &, String *, String *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5636452d4d30 <col:16> 'bool (const String &, String *, String *)' lvalue Function 0x5636452d4720 'cp_string' 'bool (const String &, String *, String *)'
|       |-DeclRefExpr 0x5636452d4cb8 <col:26> 'const String' lvalue ParmVar 0x5636452d49c0 'str' 'const String &'
|       |-UnaryOperator 0x5636452d4cf8 <col:31, col:32> 'String *' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x5636452d4cd8 <col:32> 'String' lvalue ParmVar 0x5636452d4a38 'result' 'String &'
|       `-ImplicitCastExpr 0x5636452d4dc8 <col:40> 'String *' <NullToPointer>
|         `-IntegerLiteral 0x5636452d4d10 <col:40> 'int' 0
|-CXXConstructorDecl 0x5636454ca118 <line:1345:7> col:7 implicit constexpr StringArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x5636454ca1f0 <col:7> col:7 implicit ~StringArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5636454ca328 <col:7> col:7 implicit constexpr StringArg 'void (const StringArg &)' inline default trivial noexcept-unevaluated 0x5636454ca328
| `-ParmVarDecl 0x5636454ca438 <col:7> col:7 'const StringArg &'
`-CXXConstructorDecl 0x5636454ca4d8 <col:7> col:7 implicit used constexpr StringArg 'void (StringArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5636454ca5e8 <col:7> col:7 'StringArg &&'
  `-CompoundStmt 0x5636454cb240 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.StringArg = type { i8 }
  NonVirtualBaseLLVMType:%class.StringArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5636452d4e30 <../dummy_inc/click/args.hh:1351:1, col:58> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'StringArg'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5636452d5088 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5636454ca028 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5636454ca658 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<String> &)' inline default trivial noexcept-unevaluated 0x5636454ca658
| `-ParmVarDecl 0x5636454ca768 <col:19> col:19 'const DefaultArg<String> &'
|-CXXConstructorDecl 0x5636454ca808 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<String> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5636454ca918 <col:19> col:19 used 'DefaultArg<String> &&'
| |-CXXCtorInitializer 'StringArg'
| | `-CXXConstructExpr 0x5636454cb250 <col:19> 'StringArg' 'void (StringArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5636454cb220 <col:19> 'StringArg' xvalue <UncheckedDerivedToBase (StringArg)>
| |     `-CXXStaticCastExpr 0x5636454cb1f0 <col:19> 'DefaultArg<String>' xvalue static_cast<struct DefaultArg<class String> &&> <NoOp>
| |       `-DeclRefExpr 0x5636454cb1c0 <col:19> 'DefaultArg<String>' lvalue ParmVar 0x5636454ca918 '' 'DefaultArg<String> &&'
| `-CompoundStmt 0x5636454cb2c0 <col:19>
`-CXXDestructorDecl 0x5636454ca9b8 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.21 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.21 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5636454cbf08 <../dummy_inc/click/args.hh:850:5, line:860:5> line:851:12 struct SlotT definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Args::Slot'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5636454cc308 prev 0x5636454cbf08 <col:5, col:12> col:12 implicit struct SlotT
|-CXXConstructorDecl 0x5636454cc500 <line:852:9, line:854:9> line:852:9 used SlotT 'void (String *)'
| |-ParmVarDecl 0x5636454cc408 <col:15, col:18> col:18 used ptr 'String *'
| |-CXXCtorInitializer 'Args::Slot'
| | `-CXXConstructExpr 0x5636454cd448 <col:9> 'Args::Slot' 'void ()'
| |-CXXCtorInitializer Field 0x5636454cc680 '_ptr' 'String *'
| | `-ImplicitCastExpr 0x5636454cd408 <line:853:20> 'String *' <LValueToRValue>
| |   `-DeclRefExpr 0x5636454cd3c8 <col:20> 'String *' lvalue ParmVar 0x5636454cc408 'ptr' 'String *'
| |-CXXCtorInitializer Field 0x5636454cc6e0 '_slot' 'String':'String'
| | `-CXXConstructExpr 0x5636454cd4a8 <line:852:9> 'String':'String' 'void ()'
| `-CompoundStmt 0x5636452b9f80 <line:853:25, line:854:9>
|-CXXMethodDecl 0x5636454cc5c0 <line:855:9, line:857:9> line:855:14 used store 'void ()'
| |-Overrides: [ 0x56364528b190 Slot::store 'void ()' ]
| `-CompoundStmt 0x5636454cdb68 <col:22, line:857:9>
|   `-CallExpr 0x5636454cdb20 <line:856:13, col:40> 'void'
|     |-ImplicitCastExpr 0x5636454cdb08 <col:13> 'void (*)(String &, const String &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5636454cda88 <col:13> 'void (String &, const String &)' lvalue Function 0x5636454cd968 'assign_consume' 'void (String &, const String &)' (FunctionTemplate 0x563644f533e8 'assign_consume')
|     |-UnaryOperator 0x5636454cd638 <col:28, col:29> 'String':'String' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x5636454cd620 <col:29> 'String *' <LValueToRValue>
|     |   `-MemberExpr 0x5636454cd5f0 <col:29> 'String *' lvalue ->_ptr 0x5636454cc680
|     |     `-CXXThisExpr 0x5636454cd5e0 <col:29> 'Args::SlotT<String> *' implicit this
|     `-ImplicitCastExpr 0x5636454cdb50 <col:35> 'const String':'const String' lvalue <NoOp>
|       `-MemberExpr 0x5636454cd660 <col:35> 'String':'String' lvalue ->_slot 0x5636454cc6e0
|         `-CXXThisExpr 0x5636454cd650 <col:35> 'Args::SlotT<String> *' implicit this
|-FieldDecl 0x5636454cc680 <line:858:9, col:12> col:12 referenced _ptr 'String *'
|-FieldDecl 0x5636454cc6e0 <line:859:9, col:11> col:11 referenced _slot 'String':'String'
|-CXXConstructorDecl 0x5636454cc758 <line:851:12> col:12 implicit SlotT 'void (const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x5636454cc758
| `-ParmVarDecl 0x5636454cc868 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXConstructorDecl 0x5636454cc908 <col:12> col:12 implicit SlotT 'void (Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x5636454cc908
| `-ParmVarDecl 0x5636454cca18 <col:12> col:12 'Args::SlotT<String> &&'
|-CXXMethodDecl 0x5636454ccab8 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x5636454ccab8
| `-ParmVarDecl 0x5636454ccbc8 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXMethodDecl 0x5636454ccc38 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x5636454ccc38
| `-ParmVarDecl 0x5636454ccd48 <col:12> col:12 'Args::SlotT<String> &&'
`-CXXDestructorDecl 0x5636454ccdd0 <col:12> col:12 implicit used ~SlotT 'void () noexcept' inline default
  |-Overrides: [ 0x56364528b090 Slot::~Slot 'void () noexcept' ]
  `-CompoundStmt 0x5636454cd510 <col:12>

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  NonVirtualBaseLLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5636452cb450 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5636452cb6a8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5636454d63a8 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5636454d6840 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x5636454d6820 <<invalid sloc>> 'int'
| `-CompoundStmt 0x5636454d68b0 <col:19>
|-CXXConstructorDecl 0x5636454d64a8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x5636454d64a8
| `-ParmVarDecl 0x5636454d65b8 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x5636454d6658 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5636454d6768 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5636454d7150 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5636454d7130 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x5636454d7100 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x5636454d70d0 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x5636454d6768 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x5636454d71c0 <col:19>
`-CXXDestructorDecl 0x5636454d68f0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.22 = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg.22 = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5636452d0c88 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x5636452d0ee8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5636454e1058 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5636454e1158 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x5636454e1158
| `-ParmVarDecl 0x5636454e1268 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x5636454e1308 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5636454e1418 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x5636454e1d50 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5636454e1d20 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x5636454e1cf0 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x5636454e1cc0 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x5636454e1418 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x5636454e1dc0 <col:19>
`-CXXDestructorDecl 0x5636454e14b8 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.23 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.23 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
