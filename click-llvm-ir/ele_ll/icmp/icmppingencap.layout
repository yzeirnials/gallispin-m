
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56267192b588 prev 0x562671922d28 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56267192b680 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x56267192b710 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x56267192b788 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x56267192b848 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x56267192b910 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x56267192ba88 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x56267192b9c0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x56267192bb30 <col:24>
| `-OptimizeNoneAttr 0x56267192bb88 <col:34>
|-CXXMethodDecl 0x56267192bbd0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x56267192be88 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x56267192bc80 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x56267192bcf8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x56267192bd78 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x56267192bf40 <line:229:7, col:14> col:7 private
|-FieldDecl 0x56267192bf78 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x56267192bfe0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x56267192c068 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x56267192c388 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x56267192c120 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x56267192c198 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x56267192c210 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x56267192c290 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x56267192c4a0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x562671933e18 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x562671933e18
| `-ParmVarDecl 0x562671933f28 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x562671933fc8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x562671933fc8
| `-ParmVarDecl 0x5626719340d8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x562671a16140 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56267191e5a0 prev 0x56267191e320 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56267191e698 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x56267191e728 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x56267191e788 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x56267191e878 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x56267191e978 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x56267191eb48 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x56267191e9f8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x56267191ea70 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x56267191ecd8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x56267191ec10 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x56267191ed80 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x56267191eeb8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x56267191edf0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x56267191f058 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x56267191ef98 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x56267191f1f8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x56267191f138 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x56267191f2a0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x56267191f3a0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x56267191f480 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56267191f380 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x56267191f360 <col:26> 'int' 1
| `-EnumConstantDecl 0x56267191f430 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x56267191f498 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56267191f410 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x56267191f3f0 <col:44> 'int' 2
|-CXXMethodDecl 0x56267191f5e0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x56267191f4c8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x56267191f548 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x56267191f738 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x56267191f6a8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x56267191f978 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x56267191f7f8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x56267191f870 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x56267191fa28 <col:20>
| `-OptimizeNoneAttr 0x56267191fa80 <col:30>
|-CXXMethodDecl 0x56267191fb88 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x56267191fac0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x56267191fc30 <col:20>
| `-OptimizeNoneAttr 0x56267191fc88 <col:30>
|-CXXMethodDecl 0x56267191fcd8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x56267191fda0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x56267191feb8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x56267191ff40 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x56267191ffc8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x562671920050 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x5626719200d8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x562671920168 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x562671920228 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x5626719202b0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x562671920338 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x5626719203c0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x562671920448 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x5626719204d0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x562671920560 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x562671920620 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x5626719206b0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x562671920800 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x562671920768 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x562671920990 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x5626719208c0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x562671920c40 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x562671920a48 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x562671920ac8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x562671920b48 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x562671920cf8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x562671920e00 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x562671921090 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562671920de0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x562671920dc0 <col:33> 'int' 0
| |-EnumConstantDecl 0x562671920e90 <line:81:9, col:32> col:9 referenced CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5626719210a8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562671920e70 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x562671920e50 <col:32> 'int' 20
| |-EnumConstantDecl 0x562671920f20 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5626719210c0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562671920f00 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x562671920ee0 <col:38> 'int' 90
| |-EnumConstantDecl 0x562671920fb0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5626719210d8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562671920f90 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x562671920f70 <col:35> 'int' 100
| `-EnumConstantDecl 0x562671921040 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x5626719210f0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562671921020 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x562671921000 <col:32> 'int' 2000
|-CXXMethodDecl 0x562671921130 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x562671921570 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5626719213e0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x562671921458 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x562671921640 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x5626719217c0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x5626719216f0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5626719219c8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x562671921878 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x5626719218f0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x562671921ac8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x562671921b68 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x562671921c30 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x562671921cc0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x562671921ef0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562671921ca0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x562671921c80 <col:36> 'int' EnumConstant 0x562671921c30 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x562671921d10 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x562671921d60 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x562671921db0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x562671921e00 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x562671921e50 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x562671921ea0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x562671921fd8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x562671921f18 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5626719220a0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x562671922160 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x562671922220 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5626719222e0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5626719223f8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5626719224c0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x562671922640 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x562671922570 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x562671922768 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x562671922968 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x562671922818 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x562671922898 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x5626719302b8 <col:54, line:127:5>
|   |-ParenExpr 0x562671930168 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x562671930138 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x56267192fe28 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x56267192fe00 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x56267192fde8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x56267192fdd0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x56267192fda0 <col:31> 'Router *' lvalue ->_router 0x56267192dc80
|   |   |         `-CXXThisExpr 0x56267192fd90 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x56267192fe88 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56267192fe68 <col:48> 'int' 0
|   |   `-CallExpr 0x562671930098 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x562671930080 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562671930060 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562671458c70 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5626719300d8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56267192fef8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x5626719300f0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56267192ff18 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x562671930108 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56267192ff50 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x562671930120 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562671930048 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562671930030 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56267192ffe8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x562671930200 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x562671930198 <col:9> 'Router *' lvalue ->_router 0x56267192dc80
|   | | `-CXXThisExpr 0x562671930188 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x5626719301e8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5626719301c8 <col:19> 'Router *' lvalue ParmVar 0x562671922818 'r' 'Router *'
|   `-BinaryOperator 0x562671930298 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x562671930230 <col:9> 'int' lvalue ->_eindex 0x56267192dce8
|     | `-CXXThisExpr 0x562671930220 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x562671930280 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x562671930260 <col:19> 'int' lvalue ParmVar 0x562671922898 'eindex' 'int'
|-CXXMethodDecl 0x562671922af0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x562671922a28 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x562671922bc0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x562671922c88 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x562671922d28 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x562671922f78 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x562671922df0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x562671922e70 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x562671923028 <col:20>
| `-OptimizeNoneAttr 0x562671923080 <col:30>
|-CXXMethodDecl 0x562671923188 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5626719230c0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x562671923230 <col:20>
| `-OptimizeNoneAttr 0x562671923288 <col:30>
|-CXXMethodDecl 0x562671923358 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5626719232c8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x562671923400 <col:20>
| `-OptimizeNoneAttr 0x562671923458 <col:30>
|-CXXMethodDecl 0x5626719235e8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x562671923490 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x562671923510 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x562671923778 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5626719236b0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5626719238c8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x562671923838 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x562671923a18 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x562671923988 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x562671923b68 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x562671923ad8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x562671923e28 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x562671923c20 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x562671923ca0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x562671923d48 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x562671923f00 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x562671923fc0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x562671924290 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x562671924140 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x5626719241b8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x5626719243b8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x562671924590 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x562671924470 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5626719244f0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x562671924778 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x562671924658 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x5626719246d8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x562671924ae8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x562671924838 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5626719248b0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x562671924930 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56267192f8a0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56267192f880 <col:106> 'int' 0
| `-ParmVarDecl 0x5626719249a8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56267192f8d8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56267192f8b8 <col:126> 'int' 0
|-CXXMethodDecl 0x562671924e88 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x562671924bb8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x562671924c50 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x562671924cd0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x562671924d48 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56267192f910 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56267192f8f0 <col:114> 'int' 0
|-CXXMethodDecl 0x562671925218 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x562671924f60 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x562671924fd8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x562671925058 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x56267192f928 <col:96> 'int' 0
| `-ParmVarDecl 0x5626719250d0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56267192f968 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56267192f948 <col:116> 'int' 0
|-CXXMethodDecl 0x562671925598 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5626719252e8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x562671925360 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5626719253e0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56267192f9a0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56267192f980 <col:109> 'int' 0
| `-ParmVarDecl 0x562671925458 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56267192f9d8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56267192f9b8 <col:129> 'int' 0
|-CXXMethodDecl 0x562671925918 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x562671925668 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5626719256e0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x562671925760 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x5626719257d8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56267192fa10 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56267192f9f0 <col:117> 'int' 0
|-CXXMethodDecl 0x562671925ca8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5626719259f0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562671925a68 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x562671925ae8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x56267192fa28 <col:99> 'int' 0
| `-ParmVarDecl 0x562671925b60 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56267192fa68 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56267192fa48 <col:119> 'int' 0
|-CXXMethodDecl 0x5626719260c8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x562671925d78 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x562671925df8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x562671925e70 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x562671925ef0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56267192faa0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56267192fa80 <col:108> 'int' 0
| `-ParmVarDecl 0x562671925f70 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x56267192fad8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x56267192fab8 <col:141> 'int' 0
|-CXXMethodDecl 0x5626719264e8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5626719261a0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x562671926220 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x562671926298 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x562671926318 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x562671926398 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x56267192faf0 <col:121> 'int' 0
|-CXXMethodDecl 0x562671926918 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5626719265c8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x562671926648 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x5626719266c0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x562671926740 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x56267192fb10 <col:98> 'int' 0
| `-ParmVarDecl 0x5626719267c0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x56267192fb30 <col:123> 'int' 0
|-CXXMethodDecl 0x562671926be0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x5626719269f0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x562671926a70 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x562671926af0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x56267192fb50 <col:80> 'int' 0
|-EnumDecl 0x562671926c98 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x562671926da0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x562671927030 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562671926d80 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x562671926d60 <col:42> 'int' 1
| |-EnumConstantDecl 0x562671926e30 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x562671927048 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562671926e10 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x562671926df0 <col:40> 'int' 2
| |-EnumConstantDecl 0x562671926ec0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x562671927060 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562671926ea0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x562671926e80 <col:44> 'int' 4
| |-EnumConstantDecl 0x562671926f50 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x562671927078 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562671926f30 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x562671926f10 <col:36> 'int' 7
| `-EnumConstantDecl 0x562671926fe0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x562671927090 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562671926fc0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x562671926fa0 <col:34> 'int' 6
|-CXXMethodDecl 0x562671927348 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x5626719270b8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x562671927158 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5626719271d8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x562671927250 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x56267192fc08 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x56267192fbf0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x56267192fbd8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x56267192fbb8 <col:98, col:105> 'String' (CXXTemporary 0x56267192fbb8)
|           `-CXXTemporaryObjectExpr 0x56267192fb80 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5626719275e8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x562671927418 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x562671927490 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x562671927508 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x56267192fcb8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x56267192fca0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x56267192fc88 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x56267192fc68 <col:94, col:101> 'String' (CXXTemporary 0x56267192fc68)
| |         `-CXXTemporaryObjectExpr 0x56267192fc30 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x5626719304a0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x562671930418 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5626719303e8 <col:9> '<bound member function type>' ->add_task_handlers 0x562671927348
|     | `-CXXThisExpr 0x5626719303d8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x562671930458 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x562671930358 <col:27> 'Task *' lvalue ParmVar 0x562671927418 'task' 'Task *'
|     |-ImplicitCastExpr 0x562671930470 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x562671930378 <col:33> 'NotifierSignal *' lvalue ParmVar 0x562671927490 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x562671930488 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x562671930398 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x562671926fe0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5626719303b8 <col:62> 'const String' lvalue ParmVar 0x562671927508 'prefix' 'const String &'
|-CXXMethodDecl 0x5626719277f8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x5626719276b0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x562671927728 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x56267192fd68 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x56267192fd50 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x56267192fd38 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x56267192fd18 <col:70, col:77> 'String' (CXXTemporary 0x56267192fd18)
| |         `-CXXTemporaryObjectExpr 0x56267192fce0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x562671930678 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5626719305f0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x5626719305c0 <col:9> '<bound member function type>' ->add_task_handlers 0x562671927348
|     | `-CXXThisExpr 0x5626719305b0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x562671930630 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x562671930530 <col:27> 'Task *' lvalue ParmVar 0x5626719276b0 'task' 'Task *'
|     |-ImplicitCastExpr 0x562671930648 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x562671930550 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x562671930660 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x562671930570 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x562671926fe0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x562671930590 <col:57> 'const String' lvalue ParmVar 0x562671927728 'prefix' 'const String &'
|-CXXMethodDecl 0x562671927ad8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x5626719278c0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562671927940 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5626719279b8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x562671927d88 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x562671927ba8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562671927c28 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562671927ca8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x562671928078 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x562671927e58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562671927ed8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562671927f50 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x562671928328 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x562671928148 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5626719281c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562671928248 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x5626719285d8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x5626719283f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562671928478 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5626719284f8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x562671928888 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x5626719286a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562671928728 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5626719287a0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x562671928b38 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x562671928958 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5626719289d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562671928a58 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x562671928e48 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x562671928c60 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562671928ce0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562671928d60 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x562671929128 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x562671928f18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562671928f98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562671929040 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x562671929408 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x5626719291f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562671929278 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562671929320 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x562671929670 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5626719294d8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x562671929558 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5626719295d0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x562671929918 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x562671929740 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5626719297c0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x562671929838 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x562671929bc8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x5626719299e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562671929a68 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562671929ae8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x562671929e78 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x562671929c98 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562671929d18 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562671929d90 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x56267192a128 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x562671929f48 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562671929fc8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56267192a040 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x56267192a3f8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x56267192a1f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56267192a278 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56267192a318 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x56267192a728 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x56267192a4c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56267192a548 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x56267192a5c0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x56267192a638 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56267192fd80 <col:93> 'bool' false
|-CXXMethodDecl 0x56267192a910 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56267192a7f8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x56267192a878 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x56267192aae8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56267192a9d0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x56267192aa50 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x56267192adc8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x56267192aba8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x56267192ac20 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x56267192aca0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x56267192ad18 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x56267192b0b8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x56267192ae98 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x56267192af10 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x56267192af90 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x56267192b008 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x56267192b2f0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x56267192b190 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x56267192b210 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x56267192b4d8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x56267192b3b8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x56267192b438 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x56267192b588 prev 0x562671922d28 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56267192b680 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x56267192b710 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x56267192b788 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x56267192b848 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x56267192b910 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x56267192ba88 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x56267192b9c0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x56267192bb30 <col:24>
| | `-OptimizeNoneAttr 0x56267192bb88 <col:34>
| |-CXXMethodDecl 0x56267192bbd0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x56267192be88 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x56267192bc80 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x56267192bcf8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x56267192bd78 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x56267192bf40 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x56267192bf78 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x56267192bfe0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x56267192c068 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x56267192c388 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x56267192c120 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x56267192c198 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x56267192c210 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x56267192c290 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x56267192c4a0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x562671933e18 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x562671933e18
| | `-ParmVarDecl 0x562671933f28 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x562671933fc8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x562671933fc8
| | `-ParmVarDecl 0x5626719340d8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x562671a16140 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56267192c518 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x56267192c5b8 <col:38> "" ""
|-CXXMethodDecl 0x56267192c648 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x56267192c6e8 <col:44> "" ""
|-AccessSpecDecl 0x56267192c758 <line:260:3, col:10> col:3 private
|-EnumDecl 0x56267192c780 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x56267192c880 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x56267192c8d0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56267192c860 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x56267192c840 <col:27> 'int' 4
|-FieldDecl 0x56267192c988 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x56267192cb38 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x56267192cbf0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x56267192dc80 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x56267192dce8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x56267192de38 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x56267192dd78 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x56267192dfe8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x56267192def8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x56267192e1c8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x56267192e0a8 <col:20> col:23 'int'
| `-ParmVarDecl 0x56267192e128 <col:25> col:28 'int'
|-CXXMethodDecl 0x56267192e470 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x56267192e290 <col:23> col:26 'int'
| |-ParmVarDecl 0x56267192e310 <col:28> col:31 'int'
| `-ParmVarDecl 0x56267192e388 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x56267192e528 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x56267192e5f0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x56267192e640 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x56267192e690 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x56267192e870 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x56267192e720 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x56267192e798 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56267192eb18 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x56267192e938 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x56267192e9b8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x56267192ea30 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x56267192ed38 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x56267192ebe8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x56267192ec68 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x56267192f070 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x56267192edf8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x56267192ee78 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x56267192eef0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x56267192ef70 <col:57> col:60 'int'
|-CXXMethodDecl 0x56267192f258 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56267192f140 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x56267192f1c0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x56267192f3a8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x56267192f318 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x56267192f728 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x56267192f468 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x56267192f4e8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x56267192f560 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x56267192f5e0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x56267192f840 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ICMPPingEncap
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   struct in_addr _src
       108 |     in_addr_t s_addr
       112 |   struct in_addr _dst
       112 |     in_addr_t s_addr
       116 |   uint16_t _icmp_id
       118 |   uint16_t _ip_id
           | [sizeof=120, dsize=120, align=8,
           |  nvsize=120, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562671653178 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x562671653298 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x562671653360 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x562671723930 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x562671728c48 <col:8>
|-CXXConstructorDecl 0x562671723a38 <col:8> col:8 implicit constexpr in_addr 'void (const in_addr &)' inline default trivial noexcept-unevaluated 0x562671723a38
| `-ParmVarDecl 0x562671723b48 <col:8> col:8 'const in_addr &'
|-CXXConstructorDecl 0x562671723be8 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x562671723cf8 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x562671653360 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x562671728e60 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x562671728e30 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x562671653360
| |     `-CXXStaticCastExpr 0x562671728e00 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x562671728dd0 <col:8> 'in_addr' lvalue ParmVar 0x562671723cf8 '' 'in_addr &&'
| `-CompoundStmt 0x562671728ea8 <col:8>
`-CXXDestructorDecl 0x5626717290e0 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562671955cc0 <../elements/icmp/icmppingencap.hh:47:1, line:74:1> line:47:7 class ICMPPingEncap definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x562671955e18 <col:1, col:7> col:7 implicit referenced class ICMPPingEncap
|-AccessSpecDecl 0x562671955ea8 <col:40, col:46> col:40 public
|-CXXConstructorDecl 0x562671955f30 <line:49:5, col:19> col:5 ICMPPingEncap 'void ()'
|-CXXDestructorDecl 0x562671956020 <line:50:5, col:20> col:5 ~ICMPPingEncap 'void ()' noexcept-unevaluated 0x562671956020
| `-Overrides: [ 0x56267191e878 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x562671956150 <line:52:5, col:62> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x56267191fcd8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x5626719572a8 <col:36, col:62>
|   `-ReturnStmt 0x562671957298 <col:38, col:45>
|     `-ImplicitCastExpr 0x562671957280 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x562671957258 <col:45> 'const char [14]' lvalue "ICMPPingEncap"
|-CXXMethodDecl 0x562671956218 <line:53:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x56267191fda0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x562671957308 <col:36, col:56>
|   `-ReturnStmt 0x5626719572f8 <col:38, col:45>
|     `-ImplicitCastExpr 0x5626719572e0 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5626719572c0 <col:45> 'const char []' lvalue Var 0x562671920050 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x5626719562e0 <line:54:5, col:45> col:17 flags 'const char *() const'
| |-Overrides: [ 0x5626719206b0 Element::flags 'const char *() const' ]
| `-CompoundStmt 0x562671957368 <col:31, col:45>
|   `-ReturnStmt 0x562671957358 <col:33, col:40>
|     `-ImplicitCastExpr 0x562671957340 <col:40> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x562671957320 <col:40> 'const char [2]' lvalue "A"
|-CXXMethodDecl 0x5626719565b0 <line:56:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x562671921570 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x562671956460 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x5626719564d8 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x562671956680 <line:57:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x562671921640 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x5626719567c0 <line:59:5, col:35> col:13 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x56267191eeb8 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x562671956730 <col:27, col:34> col:35 'Packet *'
|-AccessSpecDecl 0x562671956868 <line:61:3, col:10> col:3 private
|-FieldDecl 0x5626719568b0 <line:63:5, col:20> col:20 _src 'struct in_addr':'in_addr'
|-FieldDecl 0x562671956920 <line:64:5, col:20> col:20 _dst 'struct in_addr':'in_addr'
|-FieldDecl 0x562671956980 <line:65:5, col:14> col:14 _icmp_id 'uint16_t':'unsigned short'
|-FieldDecl 0x5626719569e0 <line:66:5, col:14> col:14 _ip_id 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x562671956b58 <line:71:5, col:49> col:19 read_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x562671956a40 <col:32, col:40> col:41 'Element *'
| `-ParmVarDecl 0x562671956ac0 <col:43, col:48> col:49 'void *'
|-CXXMethodDecl 0x562671956e38 <line:72:5, col:79> col:16 write_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x562671956c18 <col:30, col:43> col:44 'const String &'
| |-ParmVarDecl 0x562671956c90 <col:46, col:54> col:55 'Element *'
| |-ParmVarDecl 0x562671956d10 <col:57, col:62> col:63 'void *'
| `-ParmVarDecl 0x562671956d88 <col:65, col:78> col:79 'ErrorHandler *'
|-CXXConstructorDecl 0x562671956f28 <line:47:7> col:7 implicit ICMPPingEncap 'void (const ICMPPingEncap &)' inline default_delete noexcept-unevaluated 0x562671956f28
| `-ParmVarDecl 0x562671957038 <col:7> col:7 'const ICMPPingEncap &'
`-CXXMethodDecl 0x5626719570d8 <col:7> col:7 implicit operator= 'ICMPPingEncap &(const ICMPPingEncap &)' inline default_delete noexcept-unevaluated 0x5626719570d8
  `-ParmVarDecl 0x5626719571e8 <col:7> col:7 'const ICMPPingEncap &'

Layout: <CGRecordLayout
  LLVMType:%class.ICMPPingEncap = type { %class.Element.base, %struct.in_addr, %struct.in_addr, i16, i16 }
  NonVirtualBaseLLVMType:%class.ICMPPingEncap = type { %class.Element.base, %struct.in_addr, %struct.in_addr, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5626716f2440 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5626716f2558 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x5626716f25f8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x5626716f2658 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x5626716f26b8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x5626716f2768 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5626716f2a70 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5626716f2b88 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x5626716f2c30 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x5626716f2c98 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x5626716f2d28 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x5626716f8dc0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5626716f91f8 <col:12>
|-CXXConstructorDecl 0x5626716f8ec8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5626716f8fd8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5626716f2c30 'data' 'const char *'
| | `-ImplicitCastExpr 0x5626716fb780 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5626716fb750 <col:12> 'const char *const' lvalue .data 0x5626716f2c30
| |     `-DeclRefExpr 0x5626716fb730 <col:12> 'const String::rep_t' lvalue ParmVar 0x5626716f8fd8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5626716f2c98 'length' 'int'
| | `-ImplicitCastExpr 0x5626716fb810 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5626716fb7e0 <col:12> 'const int' lvalue .length 0x5626716f2c98
| |     `-DeclRefExpr 0x5626716fb7c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5626716f8fd8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5626716f2d28 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x5626716fb8a0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5626716fb870 <col:12> 'String::memo_t *const' lvalue .memo 0x5626716f2d28
| |     `-DeclRefExpr 0x5626716fb850 <col:12> 'const String::rep_t' lvalue ParmVar 0x5626716f8fd8 '' 'const String::rep_t &'
| `-CompoundStmt 0x5626716fb8f8 <col:12>
|-CXXConstructorDecl 0x5626716f9078 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5626716f9078
| `-ParmVarDecl 0x5626716f9188 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x5626716fe6e0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56267170a0f8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x56267170a208 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x56267170a720 <col:12>
|   |-BinaryOperator 0x56267170a538 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x56267170a4f0 <col:12> 'const char *' lvalue ->data 0x5626716f2c30
|   | | `-CXXThisExpr 0x56267170a4e0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56267170a520 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x56267170a4b0 <col:12> 'const char *const' lvalue .data 0x5626716f2c30
|   |     `-DeclRefExpr 0x56267170a490 <col:12> 'const String::rep_t' lvalue ParmVar 0x56267170a208 '' 'const String::rep_t &'
|   |-BinaryOperator 0x56267170a600 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x56267170a5b8 <col:12> 'int' lvalue ->length 0x5626716f2c98
|   | | `-CXXThisExpr 0x56267170a5a8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56267170a5e8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x56267170a578 <col:12> 'const int' lvalue .length 0x5626716f2c98
|   |     `-DeclRefExpr 0x56267170a558 <col:12> 'const String::rep_t' lvalue ParmVar 0x56267170a208 '' 'const String::rep_t &'
|   |-BinaryOperator 0x56267170a6c8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x56267170a680 <col:12> 'String::memo_t *' lvalue ->memo 0x5626716f2d28
|   | | `-CXXThisExpr 0x56267170a670 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56267170a6b0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x56267170a640 <col:12> 'String::memo_t *const' lvalue .memo 0x5626716f2d28
|   |     `-DeclRefExpr 0x56267170a620 <col:12> 'const String::rep_t' lvalue ParmVar 0x56267170a208 '' 'const String::rep_t &'
|   `-ReturnStmt 0x56267170a710 <col:12>
|     `-UnaryOperator 0x56267170a6f8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56267170a6e8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x56267170a278 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56267170a278
  `-ParmVarDecl 0x56267170a388 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5626716e99b0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5626716e9ac8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x5626716e9b58 <col:16, col:22> col:16 public
|-TypedefDecl 0x5626716e9b98 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x5626713bcdc0 'const char *'
|   `-QualType 0x5626713bc311 'const char' const
|     `-BuiltinType 0x5626713bc310 'char'
|-TypedefDecl 0x5626716e9c20 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x5626716e9bf0 'String::const_iterator' sugar
|   |-Typedef 0x5626716e9b98 'const_iterator'
|   `-PointerType 0x5626713bcdc0 'const char *'
|     `-QualType 0x5626713bc311 'const char' const
|       `-BuiltinType 0x5626713bc310 'char'
|-TypedefDecl 0x5626716e9d90 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x5626716e9d00 'int (String::*)() const'
|   |-RecordType 0x5626716e9a40 'String'
|   | `-CXXRecord 0x5626716e99b0 'String'
|   `-ParenType 0x5626716e9ca0 'int () const' sugar
|     `-FunctionProtoType 0x5626716bd830 'int () const' const cdecl
|       `-BuiltinType 0x5626713bc370 'int'
|-TypedefDecl 0x5626716e9df8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x562671512410 'int64_t' sugar
|   |-Typedef 0x5626714252d0 'int64_t'
|   `-TypedefType 0x5626713fe4d0 '__int64_t' sugar
|     |-Typedef 0x5626713fe0a8 '__int64_t'
|     `-BuiltinType 0x5626713bc390 'long'
|-TypedefDecl 0x5626716e9e60 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x562671512330 'uint64_t' sugar
|   |-Typedef 0x562671425470 'uint64_t'
|   `-TypedefType 0x5626713fe560 '__uint64_t' sugar
|     |-Typedef 0x5626713fe118 '__uint64_t'
|     `-BuiltinType 0x5626713bc430 'unsigned long'
|-TypedefDecl 0x5626716e9ef0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x5626716e9ec0 'String::intmax_t' sugar
|   |-Typedef 0x5626716e9df8 'intmax_t'
|   `-TypedefType 0x562671512410 'int64_t' sugar
|     |-Typedef 0x5626714252d0 'int64_t'
|     `-TypedefType 0x5626713fe4d0 '__int64_t' sugar
|       |-Typedef 0x5626713fe0a8 '__int64_t'
|       `-BuiltinType 0x5626713bc390 'long'
|-TypedefDecl 0x5626716e9f80 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x5626716e9f50 'String::uintmax_t' sugar
|   |-Typedef 0x5626716e9e60 'uintmax_t'
|   `-TypedefType 0x562671512330 'uint64_t' sugar
|     |-Typedef 0x562671425470 'uint64_t'
|     `-TypedefType 0x5626713fe560 '__uint64_t' sugar
|       |-Typedef 0x5626713fe118 '__uint64_t'
|       `-BuiltinType 0x5626713bc430 'unsigned long'
|-CXXConstructorDecl 0x5626716ea040 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x5626716ea1e8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x5626716ea128 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x5626716ea398 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x5626716ea2d8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x5626716ea4f0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x5626716ea460 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x5626716ea708 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x5626716ea5b8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x5626716ea638 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x5626716ea928 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5626716ea7d8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5626716ea858 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x5626716eab48 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5626716ea9f8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x5626716eaa78 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x5626716ead68 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5626716eac18 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x5626716eac98 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x5626716eaef8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x5626716eae30 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x5626716eb078 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x5626716eafb8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x5626716eb208 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5626716eb140 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x5626716eb360 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x5626716eb2d0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x5626716eb4b8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x5626716eb428 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x5626716eb610 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x5626716eb580 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x5626716eb798 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x5626716eb6d8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x5626716eb928 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x5626716eb860 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x5626716ebab8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x5626716eb9f0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x5626716ebc48 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x5626716ebb80 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x5626716ebd40 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x5626716ebe68 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x5626716ebfe8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x5626716ebf20 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x5626716ec138 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x5626716ec0a8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x5626716ec1f0 <col:63> "" ""
|-CXXMethodDecl 0x5626716ec338 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x5626716ec278 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x5626716ec548 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x5626716ec3f8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x5626716ec478 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x5626716ec768 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x5626716ec610 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x5626716ec690 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x5626716eca48 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x5626716ec828 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5626716ec8a8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x5626716f8890 <col:55> 'int' 10
| `-ParmVarDecl 0x5626716ec920 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5626716f88b0 <col:76> 'bool' true
|-CXXMethodDecl 0x5626716ecd28 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x5626716ecb10 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5626716ecb90 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5626716f88c0 <col:56> 'int' 10
| `-ParmVarDecl 0x5626716ecc08 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5626716f88e0 <col:77> 'bool' true
|-CXXMethodDecl 0x5626716ece30 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5626716ecef8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5626716ecfc0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x5626716ed060 <col:20>
| `-OptimizeNoneAttr 0x5626716ed0b8 <col:30>
|-CXXConversionDecl 0x5626716ed1a8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5626716ed278 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5626716ed338 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5626716ed428 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5626716ed4e8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5626716ed668 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5626716ed5a0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5626716ed7b8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x5626716ed728 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x5626716ed8a8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5626716ed968 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5626716edbb8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x5626716eda20 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x5626716edaa0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x5626716ede18 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x5626716edc80 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x5626716edd00 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x5626716edee8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5626716ee0f8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x5626716edfa0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x5626716ee020 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x5626716ee318 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x5626716ee1c0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x5626716ee240 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x5626716ee4a8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x5626716ee3e0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x5626716ee598 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x5626716ee708 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x5626716ee648 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5626716ee918 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x5626716ee7c8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5626716ee848 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5626716eeb30 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x5626716ee9d8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x5626716eea50 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x5626716eecc0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x5626716eebf0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5626716eeee0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x5626716eed80 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x5626716eee00 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5626716ef030 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x5626716eefa0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x5626716ef208 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x5626716ef0f0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5626716ef170 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5626716ef358 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x5626716ef2c8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x5626716ef570 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x5626716ef410 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x5626716ef490 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x5626716f88f0 <col:39> 'int' 0
|-CXXMethodDecl 0x5626716ef790 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x5626716ef630 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x5626716ef6b0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x5626716f8910 <col:48> 'int' 0
|-CXXMethodDecl 0x5626716ef970 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x5626716ef850 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x5626716ef8d0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x5626716f8930 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x5626716efa40 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x5626716efb00 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x5626716efbc0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x5626716efc80 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x5626716efd40 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x5626716efee8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x5626716efdf0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x5626716f0068 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x5626716effa0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x5626716f0240 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x5626716f0128 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x5626716f03b8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x5626716f02f8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x5626716f0500 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x5626716f0470 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5626716f0650 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5626716f05c0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5626716f0828 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5626716f0710 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5626716f0790 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5626716f0a08 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5626716f08f0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5626716f0970 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5626716f0b58 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x5626716f0ac8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5626716f0d68 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5626716f0c18 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5626716f0c98 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5626716f0ec8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x5626716f0e30 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5626716f1020 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x5626716f0f88 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x5626716f10c8 <col:57> "" ""
|-CXXMethodDecl 0x5626716f11d8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x5626716f1148 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x5626716f1328 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x5626716f1298 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x5626716f14a8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x5626716f13e0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x5626716f1570 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x5626716f1630 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x5626716f16f0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x5626716f1790 <col:49> "" ""
|-CXXMethodDecl 0x5626716f1820 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x5626716f18e0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x5626716f19d0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x5626716f1a98 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x5626716f1b58 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x5626716f1c18 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5626716f1d10 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x5626716f1dd8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x5626716f1ea0 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x5626716f2078 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x5626716f1f58 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x5626716f1fd8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x5626716f22a0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x5626716f2140 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x5626716f21c0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x5626716f23b0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x5626716f2418 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x5626716f2440 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5626716f2558 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x5626716f25f8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x5626716f2658 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x5626716f26b8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x5626716f2768 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x5626716f27d0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x5626716f2a08 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x5626716f2a58 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5626716f29e8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x5626716f28f8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x5626716f28a0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x5626716f28e0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x5626716f28c0 <col:32> 'int' 8
|-CXXRecordDecl 0x5626716f2a70 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5626716f2b88 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x5626716f2c30 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x5626716f2c98 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x5626716f2d28 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x5626716f8dc0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5626716f91f8 <col:12>
| |-CXXConstructorDecl 0x5626716f8ec8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5626716f8fd8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5626716f2c30 'data' 'const char *'
| | | `-ImplicitCastExpr 0x5626716fb780 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x5626716fb750 <col:12> 'const char *const' lvalue .data 0x5626716f2c30
| | |     `-DeclRefExpr 0x5626716fb730 <col:12> 'const String::rep_t' lvalue ParmVar 0x5626716f8fd8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5626716f2c98 'length' 'int'
| | | `-ImplicitCastExpr 0x5626716fb810 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5626716fb7e0 <col:12> 'const int' lvalue .length 0x5626716f2c98
| | |     `-DeclRefExpr 0x5626716fb7c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5626716f8fd8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5626716f2d28 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x5626716fb8a0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5626716fb870 <col:12> 'String::memo_t *const' lvalue .memo 0x5626716f2d28
| | |     `-DeclRefExpr 0x5626716fb850 <col:12> 'const String::rep_t' lvalue ParmVar 0x5626716f8fd8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x5626716fb8f8 <col:12>
| |-CXXConstructorDecl 0x5626716f9078 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5626716f9078
| | `-ParmVarDecl 0x5626716f9188 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x5626716fe6e0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x56267170a0f8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56267170a208 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x56267170a720 <col:12>
| |   |-BinaryOperator 0x56267170a538 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x56267170a4f0 <col:12> 'const char *' lvalue ->data 0x5626716f2c30
| |   | | `-CXXThisExpr 0x56267170a4e0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56267170a520 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x56267170a4b0 <col:12> 'const char *const' lvalue .data 0x5626716f2c30
| |   |     `-DeclRefExpr 0x56267170a490 <col:12> 'const String::rep_t' lvalue ParmVar 0x56267170a208 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x56267170a600 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x56267170a5b8 <col:12> 'int' lvalue ->length 0x5626716f2c98
| |   | | `-CXXThisExpr 0x56267170a5a8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56267170a5e8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x56267170a578 <col:12> 'const int' lvalue .length 0x5626716f2c98
| |   |     `-DeclRefExpr 0x56267170a558 <col:12> 'const String::rep_t' lvalue ParmVar 0x56267170a208 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x56267170a6c8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x56267170a680 <col:12> 'String::memo_t *' lvalue ->memo 0x5626716f2d28
| |   | | `-CXXThisExpr 0x56267170a670 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56267170a6b0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x56267170a640 <col:12> 'String::memo_t *const' lvalue .memo 0x5626716f2d28
| |   |     `-DeclRefExpr 0x56267170a620 <col:12> 'const String::rep_t' lvalue ParmVar 0x56267170a208 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x56267170a710 <col:12>
| |     `-UnaryOperator 0x56267170a6f8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x56267170a6e8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x56267170a278 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56267170a278
|   `-ParmVarDecl 0x56267170a388 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x5626716f2da0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x5626716f2fe8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x5626716f2e08 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x5626716f2e88 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x5626716f2f00 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5626716f8d80 <col:79, line:261:5>
|   |-BinaryOperator 0x5626716f89f8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5626716f8990 <col:2, col:5> 'const char *' lvalue .data 0x5626716f2c30
|   | | `-MemberExpr 0x5626716f8960 <col:2> 'String::rep_t' lvalue ->_r 0x5626716f2da0
|   | |   `-CXXThisExpr 0x5626716f8950 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5626716f89e0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5626716f89c0 <col:12> 'const char *' lvalue ParmVar 0x5626716f2e08 'data' 'const char *'
|   |-BinaryOperator 0x5626716f8ac0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x5626716f8a58 <col:2, col:5> 'int' lvalue .length 0x5626716f2c98
|   | | `-MemberExpr 0x5626716f8a28 <col:2> 'String::rep_t' lvalue ->_r 0x5626716f2da0
|   | |   `-CXXThisExpr 0x5626716f8a18 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5626716f8aa8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5626716f8a88 <col:14> 'int' lvalue ParmVar 0x5626716f2e88 'length' 'int'
|   `-IfStmt 0x5626716f8d68 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x5626716f8be0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5626716f8bc8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5626716f8ba8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5626716f8b88 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x5626716f8b20 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x5626716f2d28
|     |       | `-MemberExpr 0x5626716f8af0 <col:7> 'String::rep_t' lvalue ->_r 0x5626716f2da0
|     |       |   `-CXXThisExpr 0x5626716f8ae0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5626716f8b70 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5626716f8b50 <col:17> 'String::memo_t *' lvalue ParmVar 0x5626716f2f00 'memo' 'String::memo_t *'
|     `-CallExpr 0x5626716f8d40 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x5626716f8d28 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626716f8c30 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x5626716e1a18 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x5626716f8c98 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5626716f25f8
|         `-ImplicitCastExpr 0x5626716f8c80 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5626716f8c60 <col:27> 'String::memo_t *' lvalue ParmVar 0x5626716f2f00 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x5626716f3298 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x5626716f30b8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x5626716f3138 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x5626716f31b0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x5626716f2da0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x5626716f9208 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5626716f9398 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x5626716f9300 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x5626716f9270 <col:2> '<bound member function type>' ->assign_memo 0x5626716f2fe8
|     | `-ImplicitCastExpr 0x5626716f9338 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x5626716f9260 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x5626716f9350 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5626716f92a0 <col:14> 'const char *' lvalue ParmVar 0x5626716f30b8 'data' 'const char *'
|     |-ImplicitCastExpr 0x5626716f9368 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5626716f92c0 <col:20> 'int' lvalue ParmVar 0x5626716f3138 'length' 'int'
|     `-ImplicitCastExpr 0x5626716f9380 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5626716f92e0 <col:28> 'String::memo_t *' lvalue ParmVar 0x5626716f31b0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x5626716f3428 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x5626716f3368 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x5626716f95f0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x5626716f9570 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x5626716f93c0 <col:2> '<bound member function type>' ->assign_memo 0x5626716f2fe8
|     | `-CXXThisExpr 0x5626716f93b0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x5626716f95a8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x5626716f9440 <col:14, col:19> 'const char *' lvalue .data 0x5626716f2c30
|     |   `-MemberExpr 0x5626716f9410 <col:14, col:16> 'String::rep_t' lvalue ._r 0x5626716f2da0
|     |     `-DeclRefExpr 0x5626716f93f0 <col:14> 'const String' lvalue ParmVar 0x5626716f3368 'x' 'const String &'
|     |-ImplicitCastExpr 0x5626716f95c0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x5626716f94c0 <col:25, col:30> 'int' lvalue .length 0x5626716f2c98
|     |   `-MemberExpr 0x5626716f9490 <col:25, col:27> 'String::rep_t' lvalue ._r 0x5626716f2da0
|     |     `-DeclRefExpr 0x5626716f9470 <col:25> 'const String' lvalue ParmVar 0x5626716f3368 'x' 'const String &'
|     `-ImplicitCastExpr 0x5626716f95d8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x5626716f9540 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x5626716f2d28
|         `-MemberExpr 0x5626716f9510 <col:38, col:40> 'String::rep_t' lvalue ._r 0x5626716f2da0
|           `-DeclRefExpr 0x5626716f94f0 <col:38> 'const String' lvalue ParmVar 0x5626716f3368 'x' 'const String &'
|-CXXMethodDecl 0x5626716f34f0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x5626716f9fb0 <col:31, line:278:5>
|   `-IfStmt 0x5626716f9f98 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x5626716f9690 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5626716f9678 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x5626716f9648 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5626716f2d28
|     |     `-MemberExpr 0x5626716f9618 <col:6> 'String::rep_t' lvalue ->_r 0x5626716f2da0
|     |       `-CXXThisExpr 0x5626716f9608 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x5626716f9f70 <col:15, line:277:2>
|       |-ParenExpr 0x5626716f9b40 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x5626716f9b10 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x5626716f97a0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x5626716f9788 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x5626716f9770 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x5626716f9730 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5626716f25f8
|       |   |       `-ImplicitCastExpr 0x5626716f9718 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x5626716f96e8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x5626716f2d28
|       |   |           `-MemberExpr 0x5626716f96b8 <col:27> 'String::rep_t' lvalue ->_r 0x5626716f2da0
|       |   |             `-CXXThisExpr 0x5626716f96a8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x5626716f9800 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x5626716f97e0 <col:54> 'int' 0
|       |   `-CallExpr 0x5626716f9a70 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x5626716f9a58 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5626716f99d8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562671458c70 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x5626716f9ab0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5626716f98e8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x5626716f9ac8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5626716f9918 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x5626716f9ae0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5626716f9950 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x5626716f9af8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x5626716f99c0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x5626716f99a8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5626716f9970 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x5626716f9e90 <line:274:6, line:275:22>
|       | |-CallExpr 0x5626716f9d50 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x5626716f9d38 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5626716f9cb0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x5626716e2e60 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5626716f9c80 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5626716f25f8
|       | |   `-ImplicitCastExpr 0x5626716f9c68 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x5626716f9c38 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x5626716f2d28
|       | |       `-MemberExpr 0x5626716f9c08 <col:40> 'String::rep_t' lvalue ->_r 0x5626716f2da0
|       | |         `-CXXThisExpr 0x5626716f9bf8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x5626716f9e50 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x5626716f9e38 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5626716f9d78 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x5626716f7cd0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x5626716f9e78 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x5626716f9dd8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x5626716f2d28
|       |       `-MemberExpr 0x5626716f9da8 <col:15> 'String::rep_t' lvalue ->_r 0x5626716f2da0
|       |         `-CXXThisExpr 0x5626716f9d98 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x5626716f9f50 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x5626716f9ee8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5626716f2d28
|         | `-MemberExpr 0x5626716f9eb8 <col:6> 'String::rep_t' lvalue ->_r 0x5626716f2da0
|         |   `-CXXThisExpr 0x5626716f9ea8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x5626716f9f38 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x5626716f9f18 <col:16> 'int' 0
|-CXXMethodDecl 0x5626716f3788 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x5626716f35a8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5626716f3628 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5626716f36a0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x5626716f3860 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5626716f3ab0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x5626716f3918 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5626716f3998 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5626716f3a10 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x5626716f3c98 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x5626716f3b80 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x5626716f3c00 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x5626716f3d98 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x5626716fa088 <col:41, line:286:5>
|   `-ReturnStmt 0x5626716fa078 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x5626716fa048 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x5626716fa010 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x5626716f9ff8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x5626716f9fd8 <col:46> 'int' 1
|-CXXMethodDecl 0x5626716f4038 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x5626716f3e50 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x5626716f3ed0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x5626716f3f50 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x5626716f7cd0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x5626716f4100 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x5626716f7da0 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x5626716f7f70 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x5626716f7e58 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5626716f7ed8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x5626716f8030 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x5626716f80f8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x5626716f81f8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x5626716f8270 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x5626716f82e8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x5626716f8350 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x5626716f8450 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x5626716f84a0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5626716f8430 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x5626716f8410 <col:22> 'int' 14
|-CXXMethodDecl 0x5626716f86b8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x5626716f84d0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x5626716f8550 <col:38> col:41 'int'
| `-ParmVarDecl 0x5626716f85d0 <col:43> col:46 'int'
|-FriendDecl 0x5626716f87c0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x5626716f8850 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x562671983560 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x562671983738 prev 0x562671983560 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5626719837c8 <col:46, col:52> col:46 public
|-TypedefDecl 0x5626719837f0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5626713bc370 'int'
|-TypedefDecl 0x562671985150 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x562671985100 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x5626719850e0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x562671983a08 'type'
|     `-SubstTemplateTypeParmType 0x5626719839d0 'String' sugar
|       |-TemplateTypeParmType 0x5626716ad250 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5626716ad200 'T'
|       `-RecordType 0x5626716e9a40 'String'
|         `-CXXRecord 0x5626716e99b0 'String'
|-TypedefDecl 0x562671985208 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x5626719851d0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x5626719851b0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x562671985150 'type'
|     `-ElaboratedType 0x562671985100 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x5626719850e0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x562671983a08 'type'
|         `-SubstTemplateTypeParmType 0x5626719839d0 'String' sugar
|           |-TemplateTypeParmType 0x5626716ad250 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5626716ad200 'T'
|           `-RecordType 0x5626716e9a40 'String'
|             `-CXXRecord 0x5626716e99b0 'String'
|-CXXMethodDecl 0x562671985388 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x562671985298 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x562671985478 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x562671985558 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x562671985558
|-CXXMethodDecl 0x562671985828 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x562671985730 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x562671985a68 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5626719858e0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x562671985958 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x562671985c38 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x562671985b28 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x562671985ba0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x562671985d98 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x562671985e68 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5626719860b8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x562671985f28 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x562671985fa0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x562671986318 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x562671986188 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x562671986200 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5626719864d8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5626719863e8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x562671986698 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5626719865a0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x562671986750 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x562671986800 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x562671986a38 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5626719868b0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x562671986928 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x562671986cd8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x562671986be0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x562671986da0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x562671986df0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x562671986e40 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5626719211e0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x562671981fc8 prev 0x5626719211e0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5626719834d0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x562671983480 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x562671983460 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x562671983310 'type'
|     `-SubstTemplateTypeParmType 0x5626719831a0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x562671683000 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x562671682fa8 'F'
|       `-RecordType 0x562671982e00 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x562671982d20 'typed_array_memory'
|-FieldDecl 0x562671986e90 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x562671986ee0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x562671986f18 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x562671982060 'String' sugar
|   |-TemplateTypeParmType 0x5626716ba570 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5626716ba518 'T'
|   `-RecordType 0x5626716e9a40 'String'
|     `-CXXRecord 0x5626716e99b0 'String'
|-TypedefDecl 0x562671986fa8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x562671986f70 'String &'
|   `-SubstTemplateTypeParmType 0x562671982060 'String' sugar
|     |-TemplateTypeParmType 0x5626716ba570 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5626716ba518 'T'
|     `-RecordType 0x5626716e9a40 'String'
|       `-CXXRecord 0x5626716e99b0 'String'
|-TypedefDecl 0x562671987038 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x562671987000 'const String &'
|   `-QualType 0x562671982061 'const String' const
|     `-SubstTemplateTypeParmType 0x562671982060 'String' sugar
|       |-TemplateTypeParmType 0x5626716ba570 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5626716ba518 'T'
|       `-RecordType 0x5626716e9a40 'String'
|         `-CXXRecord 0x5626716e99b0 'String'
|-TypedefDecl 0x5626719870c8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x562671987090 'String *'
|   `-SubstTemplateTypeParmType 0x562671982060 'String' sugar
|     |-TemplateTypeParmType 0x5626716ba570 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5626716ba518 'T'
|     `-RecordType 0x5626716e9a40 'String'
|       `-CXXRecord 0x5626716e99b0 'String'
|-TypedefDecl 0x562671987158 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x562671987120 'const String *'
|   `-QualType 0x562671982061 'const String' const
|     `-SubstTemplateTypeParmType 0x562671982060 'String' sugar
|       |-TemplateTypeParmType 0x5626716ba570 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5626716ba518 'T'
|       `-RecordType 0x5626716e9a40 'String'
|         `-CXXRecord 0x5626716e99b0 'String'
|-TypedefDecl 0x562671987db0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x562671987d60 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x562671987d40 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x562671987c78 'type'
|     `-LValueReferenceType 0x562671987c40 'const String &'
|       `-QualType 0x5626719879e1 'const String' const
|         `-SubstTemplateTypeParmType 0x5626719879e0 'String' sugar
|           |-TemplateTypeParmType 0x56267168cf50 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x56267168cef8 'T'
|           `-RecordType 0x5626716e9a40 'String'
|             `-CXXRecord 0x5626716e99b0 'String'
|-TypedefDecl 0x562671987e18 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x562671987000 'const String &'
|   `-QualType 0x562671982061 'const String' const
|     `-SubstTemplateTypeParmType 0x562671982060 'String' sugar
|       |-TemplateTypeParmType 0x5626716ba570 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5626716ba518 'T'
|       `-RecordType 0x5626716e9a40 'String'
|         `-CXXRecord 0x5626716e99b0 'String'
|-TypedefDecl 0x562671987e70 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5626713bc370 'int'
|-TypedefDecl 0x562671987ed8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x562671987090 'String *'
|   `-SubstTemplateTypeParmType 0x562671982060 'String' sugar
|     |-TemplateTypeParmType 0x5626716ba570 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5626716ba518 'T'
|     `-RecordType 0x5626716e9a40 'String'
|       `-CXXRecord 0x5626716e99b0 'String'
|-TypedefDecl 0x562671987f40 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x562671987120 'const String *'
|   `-QualType 0x562671982061 'const String' const
|     `-SubstTemplateTypeParmType 0x562671982060 'String' sugar
|       |-TemplateTypeParmType 0x5626716ba570 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5626716ba518 'T'
|       `-RecordType 0x5626716e9a40 'String'
|         `-CXXRecord 0x5626716e99b0 'String'
|-EnumDecl 0x562671987f98 <line:134:5> col:5
| `-EnumConstantDecl 0x562671988090 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x562671988070 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5626716bbbf8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5626716bbbd0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5626716bbbb0 <col:40> 'int' 1
|-CXXConstructorDecl 0x562671988118 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5626719883a8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5626719881d0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x562671988270 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x562671988638 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x562671988520 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x5626719888f8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x5626719887e0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x562671988c10 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x562671988af0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x562671988f50 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x562671988e30 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x562671989240 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x562671989088 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x562671989100 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x562671989368 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x562671989418 <col:20> Inherited
| `-OptimizeNoneAttr 0x562671989470 <col:30> Inherited
|-CXXMethodDecl 0x5626719894b8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x562671989568 <col:20> Inherited
| `-OptimizeNoneAttr 0x5626719895c0 <col:30> Inherited
|-CXXMethodDecl 0x562671989688 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x562671989738 <col:20> Inherited
| `-OptimizeNoneAttr 0x562671989790 <col:30> Inherited
|-CXXMethodDecl 0x5626719897d8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x562671989888 <col:20> Inherited
| `-OptimizeNoneAttr 0x5626719898e0 <col:30> Inherited
|-CXXMethodDecl 0x562671989928 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5626719899d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x562671989a30 <col:30> Inherited
|-CXXMethodDecl 0x562671989a78 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x562671989b28 <col:20> Inherited
| `-OptimizeNoneAttr 0x562671989b80 <col:30> Inherited
|-CXXMethodDecl 0x562671989ba8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x562671989c58 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x562671989d08 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x562671989ec8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x562671989db8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x562671989e30 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56267198a018 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x562671989f88 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56267198a1c8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x56267198a0d0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56267198a280 <col:20>
| `-OptimizeNoneAttr 0x56267198a2d8 <col:30>
|-CXXMethodDecl 0x56267198a3f8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x56267198a300 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56267198a4b0 <col:20>
| `-OptimizeNoneAttr 0x56267198a508 <col:30>
|-CXXMethodDecl 0x56267198a5c0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x56267198a530 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56267198a708 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56267198a678 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56267198a838 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x56267198a938 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x56267198aa08 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x56267198aad8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x56267198ac18 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x56267198ab88 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56267198ad60 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56267198acd0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56267198aea8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x56267198ae18 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56267198af60 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56267198b060 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56267198afd0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56267198b118 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56267198b1d8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x56267198b2d8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x56267198b458 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x56267198b398 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x56267198bc18 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56267198b510 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x56267198bb78 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x56267198ba78 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x56267198bcf8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56267198be48 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x56267198bdb8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56267198bf00 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x56267198c148 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56267198bfc0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x56267198c038 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56267198c2d8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x56267198c218 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x56267198c4e8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x56267198c3a0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x56267198c418 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x56267198c5a8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x56267198c808 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x56267198c710 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x56267198c8d8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x56267198c8d8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562671a01ee8 prev 0x56267199ae98 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x562671a01fe0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x562671a02070 <col:22, col:28> col:22 public
|-EnumDecl 0x562671a02098 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x562671a021b8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x562671a02198 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x562671a02180 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x562671a02160 <col:14> 'int' 999
| |-EnumConstantDecl 0x562671a02260 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x562671a02240 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x562671a02228 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x562671a02208 <col:14> 'int' 1
| |-EnumConstantDecl 0x562671a022f0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x562671a022d0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x562671a022b0 <col:17> 'int' 0
| |-EnumConstantDecl 0x562671a02380 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x562671a02360 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x562671a02340 <col:13> 'int' 1
| |-EnumConstantDecl 0x562671a02410 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x562671a023f0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x562671a023d0 <col:16> 'int' 2
| |-EnumConstantDecl 0x562671a024a0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x562671a02480 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x562671a02460 <col:13> 'int' 3
| |-EnumConstantDecl 0x562671a02530 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x562671a02510 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x562671a024f0 <col:15> 'int' 4
| |-EnumConstantDecl 0x562671a025c0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x562671a025a0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x562671a02580 <col:14> 'int' 5
| |-EnumConstantDecl 0x562671a02650 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x562671a02630 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x562671a02610 <col:12> 'int' 6
| `-EnumConstantDecl 0x562671a02710 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x562671a026c0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x562671a026a0 <col:13> 'int' 7
|-VarDecl 0x562671a02780 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x562671a02808 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x562671a02890 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x562671a02918 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x562671a029a0 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x562671a02a28 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x562671a02ab0 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x562671a02b38 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x562671a02bc0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x562671a02c48 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x562671a02cd0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x562671a02dd0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x562671a080b8 '_nerrors' 'int'
| | `-IntegerLiteral 0x562671a08848 <line:128:13> 'int' 0
| `-CompoundStmt 0x562671a088b8 <col:16, line:129:5>
|-CXXDestructorDecl 0x562671a02ec0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x562671a088c8 <col:29, line:132:5>
|-CXXMethodDecl 0x562671a03078 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x562671a02fb0 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x562671a03140 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x562671a03228 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x562671a08920 <col:44, line:161:5>
|   `-ReturnStmt 0x562671a08910 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x562671a088f8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x562671a088d8 <col:9> 'ErrorHandler *' lvalue Var 0x562671a08118 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x562671a03368 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x562671a032d8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x562671a03430 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x562671a08980 <col:43, line:173:5>
|   `-ReturnStmt 0x562671a08970 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x562671a08958 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x562671a08938 <col:9> 'ErrorHandler *' lvalue Var 0x562671a08190 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x562671a034e8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x562671a03568 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x562671a03678 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x562671a035e8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x562671a037c8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x562671a03738 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x562671a03920 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x562671a03888 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x562671a03a78 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x562671a039e0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x562671a03bd0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x562671a03b38 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x562671a03de0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x562671a03c88 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x562671a03d08 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x562671a03fb8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x562671a03ea0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x562671a03f20 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x562671a041d8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x562671a04078 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x562671a040f8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x562671a043b8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x562671a04298 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x562671a04318 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x562671a04598 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x562671a04478 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x562671a044f8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x562671a04720 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x562671a04658 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x562671a048f0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x562671a047d8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x562671a04850 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x562671a08bd8 <col:57, line:234:5>
|   `-ReturnStmt 0x562671a08bc8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x562671a08bb0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x562671a08b58 <col:9, col:41> 'int'
|         |-MemberExpr 0x562671a08b28 <col:9> '<bound member function type>' ->xmessage 0x562671a04720
|         | `-CXXThisExpr 0x562671a08b18 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x562671a08b98 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x562671a08b80 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x562671a08af8 <col:18, col:40> 'String' (CXXTemporary 0x562671a08af8)
|               `-CallExpr 0x562671a08ac0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x562671a08aa8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x562671a08a20 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x562671a068e8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x562671a08a40 <col:31> 'const String' lvalue ParmVar 0x562671a04850 'str' 'const String &'
|                 `-DeclRefExpr 0x562671a08a60 <col:36> 'const String' lvalue ParmVar 0x562671a047d8 'anno' 'const String &'
|-CXXMethodDecl 0x562671a04bd0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x562671a049b0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x562671a04a30 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x562671a04aa8 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x562671a08e68 <col:68, line:243:5>
|   `-ReturnStmt 0x562671a08e58 <line:242:2, col:41>
|     `-ExprWithCleanups 0x562671a08e40 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x562671a08de0 <col:9, col:41> 'int'
|         |-MemberExpr 0x562671a08db0 <col:9> '<bound member function type>' ->xmessage 0x562671a048f0
|         | `-CXXThisExpr 0x562671a08da0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x562671a08c78 <col:18> 'const String' lvalue ParmVar 0x562671a049b0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x562671a08e28 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x562671a08e10 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x562671a08d80 <col:24, col:40> 'String' (CXXTemporary 0x562671a08d80)
|               `-CXXMemberCallExpr 0x562671a08d18 <col:24, col:40> 'String'
|                 |-MemberExpr 0x562671a08ca8 <col:24> '<bound member function type>' ->vformat 0x562671a05db0
|                 | `-CXXThisExpr 0x562671a08c98 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x562671a08d48 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x562671a08cd8 <col:32> 'const char *' lvalue ParmVar 0x562671a04a30 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x562671a08d60 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x562671a08cf8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x562671a04aa8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x562671a04e70 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x562671a04c98 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x562671a04d10 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x562671a04d88 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x562671a091a8 <col:23, line:254:5>
|   `-ReturnStmt 0x562671a09198 <line:253:2, col:71>
|     `-ExprWithCleanups 0x562671a09180 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x562671a09120 <col:9, col:71> 'int'
|         |-MemberExpr 0x562671a090f0 <col:9> '<bound member function type>' ->xmessage 0x562671a048f0
|         | `-CXXThisExpr 0x562671a090e0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x562671a09168 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x562671a09150 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x562671a090a0 <col:18, col:65> 'String' (CXXTemporary 0x562671a090a0)
|         |     `-CallExpr 0x562671a09038 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x562671a09020 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x562671a08f08 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x562671a068e8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x562671a08f28 <col:31> 'const String' lvalue ParmVar 0x562671a04d10 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x562671a09080 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x562671a09068 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x562671a09000 <col:37, col:64> 'String' (CXXTemporary 0x562671a09000)
|         |             `-CallExpr 0x562671a08fd0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x562671a08fb8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x562671a08f48 <col:37> 'String (const String &)' lvalue CXXMethod 0x562671a06f38 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x562671a08f68 <col:56> 'const String' lvalue ParmVar 0x562671a04c98 'landmark' 'const String &'
|         `-DeclRefExpr 0x562671a090c0 <col:68> 'const String' lvalue ParmVar 0x562671a04d88 'str' 'const String &'
|-CXXMethodDecl 0x562671a051f0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x562671a04f38 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x562671a04fb0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x562671a05030 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x562671a050a8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x562671a09460 <col:34, line:267:5>
|   `-ReturnStmt 0x562671a09450 <line:266:2, col:51>
|     `-ExprWithCleanups 0x562671a09438 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x562671a093d0 <col:9, col:51> 'int'
|         |-MemberExpr 0x562671a093a0 <col:9> '<bound member function type>' ->xmessage 0x562671a04e70
|         | `-CXXThisExpr 0x562671a09390 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x562671a09248 <col:18> 'const String' lvalue ParmVar 0x562671a04f38 'landmark' 'const String &'
|         |-DeclRefExpr 0x562671a09268 <col:28> 'const String' lvalue ParmVar 0x562671a04fb0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x562671a09420 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x562671a09408 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x562671a09370 <col:34, col:50> 'String' (CXXTemporary 0x562671a09370)
|               `-CXXMemberCallExpr 0x562671a09308 <col:34, col:50> 'String'
|                 |-MemberExpr 0x562671a09298 <col:34> '<bound member function type>' ->vformat 0x562671a05db0
|                 | `-CXXThisExpr 0x562671a09288 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x562671a09338 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x562671a092c8 <col:42> 'const char *' lvalue ParmVar 0x562671a05030 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x562671a09350 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x562671a092e8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x562671a050a8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x562671a05300 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x562671a094e0 <col:25, line:288:5>
|   `-ReturnStmt 0x562671a094d0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x562671a094b8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x562671a09488 <col:9> 'const int' lvalue ->_nerrors 0x562671a080b8
|         `-CXXThisExpr 0x562671a09478 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x562671a05510 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x562671a053b8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x562671a05438 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x562671a057f8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x562671a055d8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x562671a05658 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x562671a056d0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x562671a05990 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x562671a058c8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x562671a05bd8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x562671a05a50 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x562671a05ac8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x562671a09740 <col:58, line:357:5>
|   `-ReturnStmt 0x562671a09730 <line:356:2, col:29>
|     `-ExprWithCleanups 0x562671a09718 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x562671a096e8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x562671a096d0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x562671a096b0 <col:9, col:29> 'String' (CXXTemporary 0x562671a096b0)
|             `-CallExpr 0x562671a09640 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x562671a09628 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x562671a095a8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x562671a057f8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x562671a09548 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x562671a09678 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x562671a09568 <col:21> 'const char *' lvalue ParmVar 0x562671a05a50 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x562671a09690 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x562671a09588 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x562671a05ac8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x562671a05db0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x562671a05ca0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x562671a05d18 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x562671a05f08 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x562671a05e78 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x562671a06050 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x562671a05fc0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x562671a062f0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x562671a06108 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x562671a06188 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x562671a06200 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x562671a06450 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x562671a063c0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x562671a09858 <col:37, line:441:5>
|   `-IfStmt 0x562671a09840 <line:439:2, line:440:8>
|     |-BinaryOperator 0x562671a097c8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x562671a09798 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x562671a09758 <col:6> 'int' lvalue ParmVar 0x562671a063c0 'level' 'int'
|     | `-ImplicitCastExpr 0x562671a097b0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x562671a09778 <col:15> 'ErrorHandler::Level' EnumConstant 0x562671a024a0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x562671a09828 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x562671a097f8 <col:8> 'int' lvalue ->_nerrors 0x562671a080b8
|         `-CXXThisExpr 0x562671a097e8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x562671a06518 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x562671a098f0 <col:26, line:448:5>
|   `-BinaryOperator 0x562671a098d0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x562671a09880 <col:2> 'int' lvalue ->_nerrors 0x562671a080b8
|     | `-CXXThisExpr 0x562671a09870 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x562671a098b0 <col:13> 'int' 0
|-CXXMethodDecl 0x562671a066e0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x562671a065d0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x562671a06648 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x562671a068e8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x562671a067a0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x562671a06818 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x562671a06b98 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x562671a069a8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x562671a06a28 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x562671a06aa8 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x562671a06c50 <col:59> 0 0
|-CXXMethodDecl 0x562671a06de8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x562671a06cc8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x562671a06d48 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x562671a09f60 <col:70, line:534:5>
|   |-DeclStmt 0x562671a09a60 <line:528:2, col:20>
|   | |-VarDecl 0x562671a09918 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x562671a09980 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x562671a099b8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x562671a09a20 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x562671a09b30 <line:529:2, col:23>
|   | `-VarDecl 0x562671a09a90 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x562671a09b18 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x562671a09af8 <col:18> 'const char *' lvalue ParmVar 0x562671a06cc8 'begin' 'const char *'
|   |-DoStmt 0x562671a09ef8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x562671a09e28 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x562671a09e10 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x562671a09df0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x562671a09b48 <col:6> 'const char *' lvalue Var 0x562671a09a90 'x' 'const char *'
|   | |     `-CallExpr 0x562671a09d40 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x562671a09d28 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x562671a09ce0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x562671a08590 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x562671a09da8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x562671a09d90 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x562671a09c00 <col:20, col:27> 'String' (CXXTemporary 0x562671a09c00)
|   | |       |     `-CXXTemporaryObjectExpr 0x562671a09bc8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x562671a09dc0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x562671a09c20 <col:30> 'const char *' lvalue Var 0x562671a09a90 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x562671a09dd8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x562671a09c40 <col:33> 'const char *' lvalue ParmVar 0x562671a06d48 'end' 'const char *'
|   | |       |-UnaryOperator 0x562671a09c80 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x562671a09c60 <col:39> 'String' lvalue Var 0x562671a09918 'name' 'String'
|   | |       |-UnaryOperator 0x562671a09cb8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x562671a09c98 <col:46> 'String' lvalue Var 0x562671a099b8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x562671a09cd0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x562671a09ee0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x562671a09ec8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x562671a09ea8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x562671a09e78 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5626716ed1a8
|   |         `-ImplicitCastExpr 0x562671a09e60 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x562671a09e40 <col:11> 'String' lvalue Var 0x562671a09918 'name' 'String'
|   `-ReturnStmt 0x562671a09f50 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x562671a09f38 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x562671a09f18 <col:9> 'const char *' lvalue Var 0x562671a09a90 'x' 'const char *'
|-CXXMethodDecl 0x562671a06f38 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x562671a06ea8 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x562671a0a568 <col:55, line:550:5>
|   `-IfStmt 0x562671a0a540 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x562671a0a1a0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x562671a0a188 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x562671a0a170 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x562671a0a150 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x562671a0a120 <col:6> '<bound member function type>' .operator int (String::*)() const 0x5626716ed1a8
|     | |       `-DeclRefExpr 0x562671a09fc0 <col:6> 'const String' lvalue ParmVar 0x562671a06ea8 'x' 'const String &'
|     | `-BinaryOperator 0x562671a0a100 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x562671a0a0d0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x562671a0a080 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x562671a0a068 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x562671a0a020 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x5626717069e0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x562671a09fe0 <col:11> 'const String' lvalue ParmVar 0x562671a06ea8 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x562671a0a000 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x562671a0a0e8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x562671a0a0b8 <col:19> 'char' 123
|     |-ReturnStmt 0x562671a0a210 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x562671a0a1e0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x562671a0a1c0 <col:13> 'const String' lvalue ParmVar 0x562671a06ea8 'x' 'const String &'
|     `-IfStmt 0x562671a0a518 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x562671a0a2a8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x562671a0a290 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x562671a0a270 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x562671a0a240 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5626716ed1a8
|       |       `-DeclRefExpr 0x562671a0a220 <col:11> 'const String' lvalue ParmVar 0x562671a06ea8 'x' 'const String &'
|       |-ReturnStmt 0x562671a0a430 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x562671a0a418 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x562671a0a3e8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x562671a0a3d0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x562671a0a3b0 <col:13, col:29> 'String' (CXXTemporary 0x562671a0a3b0)
|       |         `-CallExpr 0x562671a0a360 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x562671a0a348 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x562671a0a2c0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x562671a066e0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x562671a0a390 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x562671a0a2e0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x562671a0a300 <col:28> 'const String' lvalue ParmVar 0x562671a06ea8 'x' 'const String &'
|       `-ReturnStmt 0x562671a0a508 <line:549:6, col:20>
|         `-ExprWithCleanups 0x562671a0a4f0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x562671a0a4c0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x562671a0a4a8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x562671a0a488 <col:13, col:20> 'String' (CXXTemporary 0x562671a0a488)
|                 `-CXXTemporaryObjectExpr 0x562671a0a450 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x562671a07100 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x562671a06ff0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x562671a07068 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x562671a08838 <col:71> 'bool' false
|-CXXRecordDecl 0x562671a071b0 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x562671a074a8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x562671a07440 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x562671a073e0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x562671a073a0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x5626716e9a40 'String'
|       | `-CXXRecord 0x5626716e99b0 'String'
|       |-BuiltinType 0x5626713bc370 'int'
|       `-DecayedType 0x56267199bee0 '__va_list_tag *' sugar
|         |-TypedefType 0x56267199beb0 'va_list' sugar
|         | |-Typedef 0x5626715daaf0 'va_list'
|         | `-TypedefType 0x5626715daaa0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x5626715126c8 '__gnuc_va_list'
|         |   `-TypedefType 0x562671512630 '__builtin_va_list' sugar
|         |     |-Typedef 0x5626713fdbd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x5626713fdb80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x5626713bd0c0 '__va_list_tag'
|         |         `-CXXRecord 0x5626713bd028 '__va_list_tag'
|         `-PointerType 0x5626715e0390 '__va_list_tag *'
|           `-RecordType 0x5626713bd0c0 '__va_list_tag'
|             `-CXXRecord 0x5626713bd028 '__va_list_tag'
|-EnumDecl 0x562671a07500 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x562671a07600 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562671a07b60 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562671a075e0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x562671a075c0 <col:16> 'int' 1
| |-EnumConstantDecl 0x562671a07690 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562671a07b78 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562671a07670 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x562671a07650 <col:21> 'int' 2
| |-EnumConstantDecl 0x562671a07720 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562671a07b90 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562671a07700 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x562671a076e0 <col:22> 'int' 4
| |-EnumConstantDecl 0x562671a077b0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562671a07ba8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562671a07790 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x562671a07770 <col:17> 'int' 8
| |-EnumConstantDecl 0x562671a07840 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562671a07bc0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562671a07820 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x562671a07800 <col:22> 'int' 16
| |-EnumConstantDecl 0x562671a078d0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562671a07bd8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562671a078b0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x562671a07890 <col:19> 'int' 32
| |-EnumConstantDecl 0x562671a07960 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562671a07bf0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562671a07940 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x562671a07920 <col:17> 'int' 64
| |-EnumConstantDecl 0x562671a079f0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562671a07c08 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562671a079d0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x562671a079b0 <col:14> 'int' 128
| |-EnumConstantDecl 0x562671a07a80 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562671a07c20 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562671a07a60 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x562671a07a40 <col:16> 'int' 256
| `-EnumConstantDecl 0x562671a07b10 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x562671a07c38 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562671a07af0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x562671a07ad0 <col:12> 'int' 1024
|-CXXMethodDecl 0x562671a07e48 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x562671a07c60 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x562671a07d00 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x562671a07fd0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x562671a07f08 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x562671a08078 <line:580:3, col:10> col:3 private
|-FieldDecl 0x562671a080b8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x562671a08118 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x562671a08190 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x562671a08590 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x562671a08208 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x562671a08288 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x562671a08308 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x562671a08380 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x562671a083f8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x562671a08470 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x562671a086b8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x562671a086b8
| `-ParmVarDecl 0x562671a087c8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x562671a0a918 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x562671a0a918
  `-ParmVarDecl 0x562671a0aa28 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56267199af28 prev 0x5626718e3c88 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56267199b020 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x56267199b0b0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x56267199b1e8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x56267199b0e8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x56267199c610 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x56267199c5f0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x56267199c188 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x56267199c6a0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x56267199c660 <col:17> 'ErrorHandler *' lvalue ParmVar 0x56267199b0e8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x56267199c1f0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x56267199c720 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x56267199c6e0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x56267199c250 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x56267199c760 <col:54> 'bool' false
| `-CompoundStmt 0x56267199c888 <col:61, line:38:5>
|   `-BinaryOperator 0x56267199c868 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x56267199c800 <col:9> 'const Element *' lvalue ->_context 0x56267199c128
|     | `-CXXThisExpr 0x56267199c7f0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x56267199c850 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x56267199c830 <col:20> 'int' 0
|-CXXConstructorDecl 0x56267199b3f8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x56267199b2a8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x56267199b320 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x56267199c648 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x56267199c628 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x56267199c128 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x56267199c8e0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x56267199c8a0 <col:20> 'const Element *' lvalue ParmVar 0x56267199b2a8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x56267199c188 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x56267199c960 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x56267199c920 <col:36> 'ErrorHandler *' lvalue ParmVar 0x56267199b320 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x56267199c1f0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x56267199c9e0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x56267199c9a0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x56267199c250 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x56267199ca20 <col:73> 'bool' false
| `-CompoundStmt 0x56267199ca98 <col:80, line:46:5>
|-CXXMethodDecl 0x56267199b528 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x56267199cb10 <col:36, line:51:5>
|   `-ReturnStmt 0x56267199cb00 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x56267199cae8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x56267199cab8 <col:16> 'const Element *const' lvalue ->_context 0x56267199c128
|         `-CXXThisExpr 0x56267199caa8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x56267199b618 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x56267199cb90 <col:32, line:57:5>
|   `-ReturnStmt 0x56267199cb80 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x56267199cb68 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x56267199cb38 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x56267199c188
|         `-CXXThisExpr 0x56267199cb28 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x56267199b6d8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x56267199b860 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x56267199b790 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x56267199b9b0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x56267199b920 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56267199bb00 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x56267199ba70 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56267199bd08 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x56267199bbb8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x56267199bc30 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x56267199c038 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x56267199bdc8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x56267199be48 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x56267199bf10 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x56267199c0f0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x56267199c128 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x56267199c188 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x56267199c1f0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x56267199c250 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x56267199c2a0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x56267199c2a0
| `-ParmVarDecl 0x56267199c3b8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x56267199c458 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x56267199c458
| `-ParmVarDecl 0x56267199c568 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x562671a16bc8 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5626719c46a0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x5626719c4878 prev 0x5626719c46a0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5626719c4908 <col:46, col:52> col:46 public
|-TypedefDecl 0x5626719c4930 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5626713bc370 'int'
|-TypedefDecl 0x5626719c6500 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x5626719c64b0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x5626719c4de0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x5626719c4ce0 'type'
|     `-TemplateSpecializationType 0x5626719c4c70 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5626719c4b50 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x5626719c4b30 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5626719c4b10 <col:24> 'unsigned long' 4
|       `-RecordType 0x5626719c4c50 'char_array<4>'
|         `-ClassTemplateSpecialization 0x5626719c4b70 'char_array'
|-TypedefDecl 0x5626719c65b8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x5626719c6580 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x5626719c6560 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x5626719c6500 'type'
|     `-ElaboratedType 0x5626719c64b0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x5626719c4de0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x5626719c4ce0 'type'
|         `-TemplateSpecializationType 0x5626719c4c70 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5626719c4b50 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x5626719c4b30 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5626719c4b10 <col:24> 'unsigned long' 4
|           `-RecordType 0x5626719c4c50 'char_array<4>'
|             `-ClassTemplateSpecialization 0x5626719c4b70 'char_array'
|-CXXMethodDecl 0x5626719c6738 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x5626719c6648 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x5626719c6828 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5626719c6908 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x5626719c6bd8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5626719c6ae0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x5626719c6e18 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5626719c6c90 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5626719c6d08 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5626719c6fe8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5626719c6ed8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5626719c6f50 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5626719c7148 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5626719c7218 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5626719c7468 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5626719c72d8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5626719c7350 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5626719c76c8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x5626719c7538 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5626719c75b0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5626719c7888 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5626719c7798 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5626719c7a48 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5626719c7950 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5626719c7b00 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5626719c7bb0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5626719c7de8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5626719c7c60 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5626719c7cd8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5626719c8088 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5626719c7f90 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x5626719c8150 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x5626719c81a0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5626719c81f0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5626719c30a8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5626719c32b8 prev 0x5626719c30a8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5626719c4610 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x5626719c45c0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x5626719c45a0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x5626719c4450 'type'
|     `-SubstTemplateTypeParmType 0x5626719c4270 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x562671682880 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562671682828 'T'
|       `-RecordType 0x5626719c3dc0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x5626719c3cd8 'sized_array_memory'
|-FieldDecl 0x5626719c8240 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x5626719c8290 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5626719c82c8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x5626719c3350 'int' sugar
|   |-TemplateTypeParmType 0x5626716ba570 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5626716ba518 'T'
|   `-BuiltinType 0x5626713bc370 'int'
|-TypedefDecl 0x5626719c8358 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x5626719c8320 'int &'
|   `-SubstTemplateTypeParmType 0x5626719c3350 'int' sugar
|     |-TemplateTypeParmType 0x5626716ba570 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5626716ba518 'T'
|     `-BuiltinType 0x5626713bc370 'int'
|-TypedefDecl 0x5626719c8418 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x5626719c83e0 'const int &'
|   `-QualType 0x5626719c3351 'const int' const
|     `-SubstTemplateTypeParmType 0x5626719c3350 'int' sugar
|       |-TemplateTypeParmType 0x5626716ba570 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5626716ba518 'T'
|       `-BuiltinType 0x5626713bc370 'int'
|-TypedefDecl 0x5626719c84a8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x5626719c8470 'int *'
|   `-SubstTemplateTypeParmType 0x5626719c3350 'int' sugar
|     |-TemplateTypeParmType 0x5626716ba570 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5626716ba518 'T'
|     `-BuiltinType 0x5626713bc370 'int'
|-TypedefDecl 0x5626719c8538 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x5626719c8500 'const int *'
|   `-QualType 0x5626719c3351 'const int' const
|     `-SubstTemplateTypeParmType 0x5626719c3350 'int' sugar
|       |-TemplateTypeParmType 0x5626716ba570 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5626716ba518 'T'
|       `-BuiltinType 0x5626713bc370 'int'
|-TypedefDecl 0x5626719c9120 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x5626719c90d0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x5626719c90b0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x5626719c9040 'type'
|     `-SubstTemplateTypeParmType 0x5626719c8e00 'int' sugar
|       |-TemplateTypeParmType 0x56267168d680 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56267168d630 'T'
|       `-BuiltinType 0x5626713bc370 'int'
|-TypedefDecl 0x5626719c9188 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x5626719c83e0 'const int &'
|   `-QualType 0x5626719c3351 'const int' const
|     `-SubstTemplateTypeParmType 0x5626719c3350 'int' sugar
|       |-TemplateTypeParmType 0x5626716ba570 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5626716ba518 'T'
|       `-BuiltinType 0x5626713bc370 'int'
|-TypedefDecl 0x5626719c91e0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5626713bc370 'int'
|-TypedefDecl 0x5626719c9248 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x5626719c8470 'int *'
|   `-SubstTemplateTypeParmType 0x5626719c3350 'int' sugar
|     |-TemplateTypeParmType 0x5626716ba570 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5626716ba518 'T'
|     `-BuiltinType 0x5626713bc370 'int'
|-TypedefDecl 0x5626719c92b0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x5626719c8500 'const int *'
|   `-QualType 0x5626719c3351 'const int' const
|     `-SubstTemplateTypeParmType 0x5626719c3350 'int' sugar
|       |-TemplateTypeParmType 0x5626716ba570 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5626716ba518 'T'
|       `-BuiltinType 0x5626713bc370 'int'
|-EnumDecl 0x5626719c9308 <line:134:5> col:5
| `-EnumConstantDecl 0x5626719c9400 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5626719c93e0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5626716bbbf8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5626716bbbd0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5626716bbbb0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5626719c9488 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5626719c96d8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5626719c9540 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5626719c95e0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x5626719c9998 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x5626719c9880 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x5626719c9c58 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x5626719c9b40 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x5626719c9fa0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x5626719c9e80 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x5626719ca2b0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x5626719ca190 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x5626719ca5a0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5626719ca3e8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5626719ca460 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5626719ca6c8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5626719ca7a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5626719ca800 <col:30> Inherited
|-CXXMethodDecl 0x5626719ca848 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5626719ca8f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5626719ca950 <col:30> Inherited
|-CXXMethodDecl 0x5626719caa18 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5626719caac8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5626719cab20 <col:30> Inherited
|-CXXMethodDecl 0x5626719ccaf0 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5626719ccba0 <col:20> Inherited
| `-OptimizeNoneAttr 0x5626719ccbf8 <col:30> Inherited
|-CXXMethodDecl 0x5626719ccc40 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5626719cccf0 <col:20> Inherited
| `-OptimizeNoneAttr 0x5626719ccd48 <col:30> Inherited
|-CXXMethodDecl 0x5626719ccd90 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5626719cce40 <col:20> Inherited
| `-OptimizeNoneAttr 0x5626719cce98 <col:30> Inherited
|-CXXMethodDecl 0x5626719ccec0 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5626719ccf70 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5626719cd020 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5626719cd1e0 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5626719cd0d0 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5626719cd148 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5626719cd330 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5626719cd2a0 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5626719cd4d8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x5626719cd3e8 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5626719cd590 <col:20>
| `-OptimizeNoneAttr 0x5626719cd5e8 <col:30>
|-CXXMethodDecl 0x5626719cd708 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x5626719cd610 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5626719cd7c0 <col:20>
| `-OptimizeNoneAttr 0x5626719cd818 <col:30>
|-CXXMethodDecl 0x5626719cd8d0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5626719cd840 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5626719cda18 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5626719cd988 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5626719cdb48 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x5626719cdc78 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x5626719cdd48 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x5626719cde18 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x5626719cdf58 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5626719cdec8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5626719ce0a0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5626719ce010 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5626719ce1e8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x5626719ce158 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5626719ce2a0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5626719ce3a0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5626719ce310 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5626719ce458 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5626719ce518 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x5626719ce618 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x5626719ce798 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5626719ce6d8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x5626719cef58 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5626719ce850 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x5626719ceeb8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x5626719cedb8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x5626719cf038 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5626719cf188 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5626719cf0f8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5626719cf240 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5626719cf488 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5626719cf300 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5626719cf378 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5626719cf648 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x5626719cf558 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5626719cf898 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x5626719cf710 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5626719cf788 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5626719cf958 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5626719cfbb8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x5626719cfac0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x5626719cfc88 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5626719b56f8 prev 0x5626719a1aa8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5626719b57f0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x5626719b58e0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x5626719e3980 <col:16, line:828:9>
|-CXXDestructorDecl 0x5626719b59d0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x5626719e3990 <col:25, line:830:9>
|-CXXMethodDecl 0x5626719b5ad0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x5626719b5b80 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x5626719b5c28 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5626719b5c28
| `-ParmVarDecl 0x5626719b5d38 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x5626719b64f8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5626719b64f8
  `-ParmVarDecl 0x5626719b6608 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5626719a18b8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x5626719a1a18 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x5626719a1aa8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x5626719a1b60 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x5626719a1c68 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x5626719a1b98 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5626719d1248 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5626719d1228 <col:31> 'int' 0
|-CXXConstructorDecl 0x5626719a1f88 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x5626719a1e00 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x5626719a1e78 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5626719d1280 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5626719d1260 <col:59> 'int' 0
|-CXXConstructorDecl 0x5626719a2160 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5626719a2050 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x5626719a20c8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5626719d12b8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5626719d1298 <col:55> 'int' 0
|-CXXConstructorDecl 0x5626719a2518 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5626719a2300 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x5626719a2378 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x5626719a23f0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5626719d12f0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5626719d12d0 <col:31> 'int' 0
|-CXXConstructorDecl 0x5626719a26d8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x5626719a2618 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x5626719a27d0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x5626719a29b8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x5626719a28c0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x5626719a2aa8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x5626719d16a0 <col:24, line:291:5>
|   `-ReturnStmt 0x5626719d1690 <line:290:9, col:79>
|     `-BinaryOperator 0x5626719d1670 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x5626719d1548 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x5626719d14a0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x5626719d1480 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x5626719d1378 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x5626719d1360 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x5626719d1348 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x5626719d1318 <col:18> 'Vector<String> *const' lvalue ->_conf 0x5626719c3040
|       | |   |       `-CXXThisExpr 0x5626719d1308 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x5626719d1468 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x5626719d1450 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x5626719d1418 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x5626719d13e8 <col:28, col:35> '<bound member function type>' ->size 0x562671989ba8
|       | |           `-ImplicitCastExpr 0x5626719d1438 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x5626719d13d0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x5626719d13a0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x5626719c3040
|       | |                 `-CXXThisExpr 0x5626719d1390 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x5626719d1530 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x5626719d1518 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x5626719d1500 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x5626719d14d0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x5626719cfdd0
|       |         `-CXXThisExpr 0x5626719d14c0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x5626719d1650 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x5626719d1638 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5626719d1620 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5626719d15e0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5626719d15c8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5626719d1578 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5626719cfe80
|         |     |   `-CXXThisExpr 0x5626719d1568 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5626719d15a8 <col:73> 'int' 0
|         `-IntegerLiteral 0x5626719d1600 <col:79> 'int' 0
|-CXXMethodDecl 0x5626719a2b68 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x5626719d1878 <col:32, line:296:5>
|   `-ReturnStmt 0x5626719d1868 <line:295:9, col:49>
|     `-BinaryOperator 0x5626719d1848 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x5626719d1728 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x5626719d1710 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x5626719d16f8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x5626719d16c8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x5626719cfdd0
|       |       `-CXXThisExpr 0x5626719d16b8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x5626719d1828 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x5626719d1810 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5626719d17f8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5626719d17b8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5626719d17a0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5626719d1750 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5626719cfe80
|         |     |   `-CXXThisExpr 0x5626719d1740 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5626719d1780 <col:43> 'int' 0
|         `-IntegerLiteral 0x5626719d17d8 <col:49> 'int' 0
|-CXXMethodDecl 0x5626719a2c58 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x5626719d1a88 <col:19, line:306:5>
|   |-IfStmt 0x5626719d19a8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x5626719d18e8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x5626719d18d0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x5626719d18a0 <col:13> 'Vector<String> *' lvalue ->_conf 0x5626719c3040
|   | |     `-CXXThisExpr 0x5626719d1890 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x5626719d1988 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x5626719d1958 <col:13, col:20> '<bound member function type>' ->clear 0x56267198c5a8
|   |     `-ImplicitCastExpr 0x5626719d1940 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x5626719d1910 <col:13> 'Vector<String> *' lvalue ->_conf 0x5626719c3040
|   |         `-CXXThisExpr 0x5626719d1900 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x5626719d1a30 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x5626719d1a00 <col:9, col:16> '<bound member function type>' .clear 0x5626719cf958
|   |   `-MemberExpr 0x5626719d19d0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x5626719cfd70
|   |     `-CXXThisExpr 0x5626719d19c0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x5626719d1a78 <line:305:9, col:17>
|     `-UnaryOperator 0x5626719d1a60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5626719d1a50 <col:17> 'Args *' this
|-CXXMethodDecl 0x5626719a2ed8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x5626719a2de0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x5626719a3058 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x5626719a2f90 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x5626719a33d8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x5626719a3100 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x5626719a3338 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x5626719a31a8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x5626719a3220 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x5626719d1da8 <col:67, line:327:5>
|     |-WhileStmt 0x5626719d1d58 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x5626719d1b70 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x5626719d1af0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5626718dc158 0x562671725738 0x562671725410 0x562671716bf0 0x5626717168a0 0x562671716190 0x5626716e8b00 0x562671674fc0
|     | | |-DeclRefExpr 0x5626719d1ab0 <col:16> 'Iter' lvalue ParmVar 0x5626719a31a8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x5626719d1ad0 <col:25> 'Iter' lvalue ParmVar 0x5626719a3220 'end' 'Iter'
|     | `-CompoundStmt 0x5626719d1d38 <col:30, line:325:9>
|     |   |-CallExpr 0x5626719d1cd8 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x5626719d1bb8 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x5626719d1ca8 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x5626719d1c38 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5626718e12d8 0x5626718e0ef8 0x5626718e0b28 0x5626718e0748 0x5626718e0368 0x5626718dff98
|     |   |   `-DeclRefExpr 0x5626719d1c18 <col:24> 'Iter' lvalue ParmVar 0x5626719a31a8 'begin' 'Iter'
|     |   `-UnaryOperator 0x5626719d1d20 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x5626719d1d00 <col:15> 'Iter' lvalue ParmVar 0x5626719a31a8 'begin' 'Iter'
|     `-ReturnStmt 0x5626719d1d98 <line:326:9, col:17>
|       `-UnaryOperator 0x5626719d1d80 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5626719d1d70 <col:17> 'Args *' this
|-CXXMethodDecl 0x5626719a34e0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x5626719a3450 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x5626719a3628 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x5626719a3598 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x5626719a36f0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x5626719d1e88 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x5626719d1e28 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x5626719d1dd8 <col:9> '<bound member function type>' ->reset_from 0x5626719d01f8
|   | | `-CXXThisExpr 0x5626719d1dc8 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x5626719d1e08 <col:20> 'int' 0
|   `-ReturnStmt 0x5626719d1e78 <line:352:9, col:17>
|     `-UnaryOperator 0x5626719d1e60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5626719d1e50 <col:17> 'Args *' this
|-VarDecl 0x5626719a37a8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x5626719a3810 <col:38> 'int' 1
|-VarDecl 0x5626719a38a0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x5626719a3908 <col:39> 'int' 2
|-VarDecl 0x5626719a3998 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x5626719a3a00 <col:39> 'int' 4
|-VarDecl 0x5626719a3a90 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x5626719a3af8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x5626719a3e78 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x5626719a3b70 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x5626719a3dd8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x5626719a3c20 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5626719a3cc8 <col:37, col:40> col:40 referenced x 'T &'
| | `-CompoundStmt 0x5626719d1fe0 <col:43, line:371:5>
| |   `-ReturnStmt 0x5626719d1fd0 <line:370:9, col:34>
| |     `-CallExpr 0x5626719d1f98 <col:16, col:34> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5626719d1eb8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5626719d1f38 <col:21> 'const char *' lvalue ParmVar 0x5626719a3c20 'keyword' 'const char *'
| |       |-IntegerLiteral 0x5626719d1f58 <col:30> 'int' 0
| |       `-DeclRefExpr 0x5626719d1f78 <col:33> 'T' lvalue ParmVar 0x5626719a3cc8 'x' 'T &'
| `-CXXMethodDecl 0x562671a17708 <line:369:5, line:371:5> line:369:11 used read 'Args &(const char *, unsigned short &)'
|   |-TemplateArgument type 'unsigned short'
|   |-ParmVarDecl 0x562671a17528 <col:16, col:28> col:28 keyword 'const char *'
|   `-ParmVarDecl 0x562671a175f8 <col:37, col:40> col:40 x 'unsigned short &'
|-FunctionTemplateDecl 0x5626719a41a8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x5626719a3ee0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5626719a4108 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5626719a3f90 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719a4038 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5626719d2130 <col:45, line:375:5>
|     `-ReturnStmt 0x5626719d2120 <line:374:9, col:42>
|       `-CallExpr 0x5626719d20e8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5626719d2008 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5626719d2088 <col:21> 'const char *' lvalue ParmVar 0x5626719a3f90 'keyword' 'const char *'
|         |-DeclRefExpr 0x5626719d20a8 <col:30> 'const int' lvalue Var 0x5626719a37a8 'mandatory' 'const int'
|         `-DeclRefExpr 0x5626719d20c8 <col:41> 'T' lvalue ParmVar 0x5626719a4038 'x' 'T &'
|-FunctionTemplateDecl 0x5626719a44d8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x5626719a4210 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5626719a4438 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5626719a42c0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719a4368 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5626719d2280 <col:45, line:379:5>
|     `-ReturnStmt 0x5626719d2270 <line:378:9, col:43>
|       `-CallExpr 0x5626719d2238 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5626719d2158 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5626719d21d8 <col:21> 'const char *' lvalue ParmVar 0x5626719a42c0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5626719d21f8 <col:30> 'const int' lvalue Var 0x5626719a38a0 'positional' 'const int'
|         `-DeclRefExpr 0x5626719d2218 <col:42> 'T' lvalue ParmVar 0x5626719a4368 'x' 'T &'
|-FunctionTemplateDecl 0x5626719a4840 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x5626719a4540 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x5626719a47a0 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x5626719a45f0 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5626719a4698 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x5626719d2480 <col:46, line:383:5>
| |   `-ReturnStmt 0x5626719d2470 <line:382:9, col:55>
| |     `-CallExpr 0x5626719d2438 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5626719d22a8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5626719d2328 <col:21> 'const char *' lvalue ParmVar 0x5626719a45f0 'keyword' 'const char *'
| |       |-BinaryOperator 0x5626719d23f8 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x5626719d23a8 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x5626719d2388 <col:30> 'const int' lvalue Var 0x5626719a37a8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x5626719d23e0 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5626719d23c0 <col:42> 'const int' lvalue Var 0x5626719a38a0 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x5626719d2418 <col:54> 'T' lvalue ParmVar 0x5626719a4698 'x' 'T &'
| `-CXXMethodDecl 0x562671a17058 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, in_addr &)'
|   |-TemplateArgument type 'in_addr'
|   |-ParmVarDecl 0x562671a16e70 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x562671a16f48 <col:40, col:43> col:43 x 'in_addr &'
|-FunctionTemplateDecl 0x5626719a4c48 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x5626719a48a8 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5626719a4ba8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x5626719a4960 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719a49e0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5626719a4a88 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x5626719d25c0 <col:54, line:388:5>
|     |-CallExpr 0x5626719d2548 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5626719d2498 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5626719d24d8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5626719d24e8 <col:30> 'const char *' lvalue ParmVar 0x5626719a4960 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5626719d2508 <col:39> 'int' lvalue ParmVar 0x5626719a49e0 'flags' 'int'
|     | `-DeclRefExpr 0x5626719d2528 <col:46> 'T' lvalue ParmVar 0x5626719a4a88 'x' 'T &'
|     `-ReturnStmt 0x5626719d25b0 <line:387:9, col:17>
|       `-UnaryOperator 0x5626719d2598 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5626719d2588 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5626719a50f8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x5626719a4cb8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5626719a4d38 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5626719a5058 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5626719a4df8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719a4e98 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x5626719a4f38 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x5626719d2730 <col:74, line:403:5>
|     `-ReturnStmt 0x5626719d2720 <line:402:9, col:56>
|       `-CallExpr 0x5626719d26e0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5626719d25f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5626719d2660 <col:28> 'const char *' lvalue ParmVar 0x5626719a4df8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5626719d2680 <col:37> 'int' 0
|         |-DeclRefExpr 0x5626719d26a0 <col:40> 'T' lvalue ParmVar 0x5626719a4e98 'x' 'T &'
|         `-DeclRefExpr 0x5626719d26c0 <col:43> 'const V' lvalue ParmVar 0x5626719a4f38 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5626719a5568 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5626719a5168 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5626719a51e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5626719a54c8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5626719a52a8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719a5348 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x5626719a53e8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x5626719d2898 <col:76, line:407:5>
|     `-ReturnStmt 0x5626719d2888 <line:406:9, col:65>
|       `-CallExpr 0x5626719d2848 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5626719d2758 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5626719d27c8 <col:28> 'const char *' lvalue ParmVar 0x5626719a52a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5626719d27e8 <col:37> 'const int' lvalue Var 0x5626719a38a0 'positional' 'const int'
|         |-DeclRefExpr 0x5626719d2808 <col:49> 'T' lvalue ParmVar 0x5626719a5348 'x' 'T &'
|         `-DeclRefExpr 0x5626719d2828 <col:52> 'const V' lvalue ParmVar 0x5626719a53e8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5626719a5ab8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x5626719a55d8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5626719a5658 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5626719a5a18 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5626719a5718 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719a5798 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5626719a5838 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x5626719a58d8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x5626719d2a00 <col:85, line:412:5>
|     |-CallExpr 0x5626719d2980 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5626719d28b0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5626719d28f0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5626719d2900 <col:37> 'const char *' lvalue ParmVar 0x5626719a5718 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5626719d2920 <col:46> 'int' lvalue ParmVar 0x5626719a5798 'flags' 'int'
|     | |-DeclRefExpr 0x5626719d2940 <col:53> 'T' lvalue ParmVar 0x5626719a5838 'x' 'T &'
|     | `-DeclRefExpr 0x5626719d2960 <col:56> 'const V' lvalue ParmVar 0x5626719a58d8 'default_value' 'const V &'
|     `-ReturnStmt 0x5626719d29f0 <line:411:9, col:17>
|       `-UnaryOperator 0x5626719d29d8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5626719d29c8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5626719a5f48 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x5626719a5b30 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5626719a5ba8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5626719a5ea8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5626719a5c68 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719a5ce0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5626719a5d88 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x5626719d2b80 <col:53, line:425:5>
|     `-ReturnStmt 0x5626719d2b70 <line:424:9, col:42>
|       `-CallExpr 0x5626719d2b30 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5626719d2a30 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5626719d2ab0 <col:21> 'const char *' lvalue ParmVar 0x5626719a5c68 'keyword' 'const char *'
|         |-IntegerLiteral 0x5626719d2ad0 <col:30> 'int' 0
|         |-DeclRefExpr 0x5626719d2af0 <col:33> 'P' lvalue ParmVar 0x5626719a5ce0 'parser' 'P'
|         `-DeclRefExpr 0x5626719d2b10 <col:41> 'T' lvalue ParmVar 0x5626719a5d88 'x' 'T &'
|-FunctionTemplateDecl 0x5626719a6398 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x5626719a5fb8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5626719a6038 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5626719a62f8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5626719a60f8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719a6170 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5626719a6218 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5626719d2cf8 <col:55, line:429:5>
|     `-ReturnStmt 0x5626719d2ce8 <line:428:9, col:50>
|       `-CallExpr 0x5626719d2ca8 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5626719d2ba8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5626719d2c28 <col:21> 'const char *' lvalue ParmVar 0x5626719a60f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5626719d2c48 <col:30> 'const int' lvalue Var 0x5626719a37a8 'mandatory' 'const int'
|         |-DeclRefExpr 0x5626719d2c68 <col:41> 'P' lvalue ParmVar 0x5626719a6170 'parser' 'P'
|         `-DeclRefExpr 0x5626719d2c88 <col:49> 'T' lvalue ParmVar 0x5626719a6218 'x' 'T &'
|-FunctionTemplateDecl 0x5626719a67e8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x5626719a6408 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5626719a6488 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5626719a6748 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5626719a6548 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719a65c0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5626719a6668 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5626719d2e70 <col:55, line:433:5>
|     `-ReturnStmt 0x5626719d2e60 <line:432:9, col:51>
|       `-CallExpr 0x5626719d2e20 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5626719d2d20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5626719d2da0 <col:21> 'const char *' lvalue ParmVar 0x5626719a6548 'keyword' 'const char *'
|         |-DeclRefExpr 0x5626719d2dc0 <col:30> 'const int' lvalue Var 0x5626719a38a0 'positional' 'const int'
|         |-DeclRefExpr 0x5626719d2de0 <col:42> 'P' lvalue ParmVar 0x5626719a65c0 'parser' 'P'
|         `-DeclRefExpr 0x5626719d2e00 <col:50> 'T' lvalue ParmVar 0x5626719a6668 'x' 'T &'
|-FunctionTemplateDecl 0x5626719a6c38 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x5626719a6858 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5626719a68d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5626719a6b98 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5626719a6998 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719a6a10 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5626719a6ab8 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x5626719d3098 <col:56, line:437:5>
|     `-ReturnStmt 0x5626719d3088 <line:436:9, col:63>
|       `-CallExpr 0x5626719d3048 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5626719d2e98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5626719d2f18 <col:21> 'const char *' lvalue ParmVar 0x5626719a6998 'keyword' 'const char *'
|         |-BinaryOperator 0x5626719d2fe8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5626719d2f98 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5626719d2f78 <col:30> 'const int' lvalue Var 0x5626719a37a8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5626719d2fd0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5626719d2fb0 <col:42> 'const int' lvalue Var 0x5626719a38a0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5626719d3008 <col:54> 'P' lvalue ParmVar 0x5626719a6a10 'parser' 'P'
|         `-DeclRefExpr 0x5626719d3028 <col:62> 'T' lvalue ParmVar 0x5626719a6ab8 'x' 'T &'
|-FunctionTemplateDecl 0x5626719a7168 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x5626719a6ca8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5626719a6d28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5626719a70c8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5626719a6de8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719a6e68 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5626719a6ee0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5626719a6f88 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x5626719d3200 <col:64, line:442:5>
|     |-CallExpr 0x5626719d3180 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5626719d30b0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5626719d30f0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5626719d3100 <col:30> 'const char *' lvalue ParmVar 0x5626719a6de8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5626719d3120 <col:39> 'int' lvalue ParmVar 0x5626719a6e68 'flags' 'int'
|     | |-DeclRefExpr 0x5626719d3140 <col:46> 'P' lvalue ParmVar 0x5626719a6ee0 'parser' 'P'
|     | `-DeclRefExpr 0x5626719d3160 <col:54> 'T' lvalue ParmVar 0x5626719a6f88 'x' 'T &'
|     `-ReturnStmt 0x5626719d31f0 <line:441:9, col:17>
|       `-UnaryOperator 0x5626719d31d8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5626719d31c8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5626719a7768 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x5626719a71e0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5626719a7258 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5626719a72d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5626719a76c8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5626719a73a0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719a7418 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5626719a74b8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x5626719a7588 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x5626719d3398 <col:84, line:458:5>
|     `-ReturnStmt 0x5626719d3388 <line:457:9, col:64>
|       `-CallExpr 0x5626719d3340 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5626719d3230 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5626719d32a0 <col:28> 'const char *' lvalue ParmVar 0x5626719a73a0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5626719d32c0 <col:37> 'int' 0
|         |-DeclRefExpr 0x5626719d32e0 <col:40> 'P' lvalue ParmVar 0x5626719a7418 'parser' 'P'
|         |-DeclRefExpr 0x5626719d3300 <col:48> 'T' lvalue ParmVar 0x5626719a74b8 'x' 'T &'
|         `-DeclRefExpr 0x5626719d3320 <col:51> 'const V' lvalue ParmVar 0x5626719a7588 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5626719a7ce8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5626719a77e0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5626719a7858 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5626719a78d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5626719a7c48 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5626719a79a0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719a7a18 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5626719a7ab8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x5626719a7b58 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x5626719d3528 <col:86, line:462:5>
|     `-ReturnStmt 0x5626719d3518 <line:461:9, col:73>
|       `-CallExpr 0x5626719d34d0 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5626719d33c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5626719d3430 <col:28> 'const char *' lvalue ParmVar 0x5626719a79a0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5626719d3450 <col:37> 'const int' lvalue Var 0x5626719a38a0 'positional' 'const int'
|         |-DeclRefExpr 0x5626719d3470 <col:49> 'P' lvalue ParmVar 0x5626719a7a18 'parser' 'P'
|         |-DeclRefExpr 0x5626719d3490 <col:57> 'T' lvalue ParmVar 0x5626719a7ab8 'x' 'T &'
|         `-DeclRefExpr 0x5626719d34b0 <col:60> 'const V' lvalue ParmVar 0x5626719a7b58 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5626719a8348 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x5626719a7d60 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5626719a7dd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5626719a7e58 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5626719a82a8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5626719a7f20 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719a7fa0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5626719a8018 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x5626719a80b8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x5626719a8158 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x5626719d36b8 <col:95, line:467:5>
|     |-CallExpr 0x5626719d3630 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5626719d3540 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5626719d3580 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5626719d3590 <col:37> 'const char *' lvalue ParmVar 0x5626719a7f20 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5626719d35b0 <col:46> 'int' lvalue ParmVar 0x5626719a7fa0 'flags' 'int'
|     | |-DeclRefExpr 0x5626719d35d0 <col:53> 'P' lvalue ParmVar 0x5626719a8018 'parser' 'P'
|     | |-DeclRefExpr 0x5626719d35f0 <col:61> 'T' lvalue ParmVar 0x5626719a80b8 'x' 'T &'
|     | `-DeclRefExpr 0x5626719d3610 <col:64> 'const V' lvalue ParmVar 0x5626719a8158 'default_value' 'const V &'
|     `-ReturnStmt 0x5626719d36a8 <line:466:9, col:17>
|       `-UnaryOperator 0x5626719d3690 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5626719d3680 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5626719a8928 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x5626719a83c8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5626719a8448 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5626719a84c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5626719a8888 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5626719a8590 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719a8608 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5626719a86a8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5626719a8748 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x5626719d3860 <col:63, line:481:5>
|     `-ReturnStmt 0x5626719d3850 <line:480:9, col:47>
|       `-CallExpr 0x5626719d3808 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5626719d36e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5626719d3768 <col:21> 'const char *' lvalue ParmVar 0x5626719a8590 'keyword' 'const char *'
|         |-IntegerLiteral 0x5626719d3788 <col:30> 'int' 0
|         |-DeclRefExpr 0x5626719d37a8 <col:33> 'P' lvalue ParmVar 0x5626719a8608 'parser' 'P'
|         |-DeclRefExpr 0x5626719d37c8 <col:41> 'T1' lvalue ParmVar 0x5626719a86a8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5626719d37e8 <col:45> 'T2' lvalue ParmVar 0x5626719a8748 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5626719a8ea8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x5626719a89a0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5626719a8a18 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5626719a8a98 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5626719a8e08 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5626719a8b60 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719a8bd8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5626719a8c78 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5626719a8d18 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5626719d3a00 <col:65, line:485:5>
|     `-ReturnStmt 0x5626719d39f0 <line:484:9, col:55>
|       `-CallExpr 0x5626719d39a8 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5626719d3888 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5626719d3908 <col:21> 'const char *' lvalue ParmVar 0x5626719a8b60 'keyword' 'const char *'
|         |-DeclRefExpr 0x5626719d3928 <col:30> 'const int' lvalue Var 0x5626719a37a8 'mandatory' 'const int'
|         |-DeclRefExpr 0x5626719d3948 <col:41> 'P' lvalue ParmVar 0x5626719a8bd8 'parser' 'P'
|         |-DeclRefExpr 0x5626719d3968 <col:49> 'T1' lvalue ParmVar 0x5626719a8c78 'x1' 'T1 &'
|         `-DeclRefExpr 0x5626719d3988 <col:53> 'T2' lvalue ParmVar 0x5626719a8d18 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5626719a9428 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x5626719a8f20 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5626719a8f98 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5626719a9018 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5626719a9388 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5626719a90e0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719a9158 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5626719a91f8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5626719a9298 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5626719d3ba0 <col:65, line:489:5>
|     `-ReturnStmt 0x5626719d3b90 <line:488:9, col:56>
|       `-CallExpr 0x5626719d3b48 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5626719d3a28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5626719d3aa8 <col:21> 'const char *' lvalue ParmVar 0x5626719a90e0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5626719d3ac8 <col:30> 'const int' lvalue Var 0x5626719a38a0 'positional' 'const int'
|         |-DeclRefExpr 0x5626719d3ae8 <col:42> 'P' lvalue ParmVar 0x5626719a9158 'parser' 'P'
|         |-DeclRefExpr 0x5626719d3b08 <col:50> 'T1' lvalue ParmVar 0x5626719a91f8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5626719d3b28 <col:54> 'T2' lvalue ParmVar 0x5626719a9298 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5626719a99a8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x5626719a94a0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5626719a9518 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5626719a9598 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5626719a9908 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5626719a9660 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719a96d8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5626719a9778 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5626719a9818 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x5626719d3df0 <col:66, line:493:5>
|     `-ReturnStmt 0x5626719d3de0 <line:492:9, col:68>
|       `-CallExpr 0x5626719d3d98 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5626719d3bc8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5626719d3c48 <col:21> 'const char *' lvalue ParmVar 0x5626719a9660 'keyword' 'const char *'
|         |-BinaryOperator 0x5626719d3d18 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5626719d3cc8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5626719d3ca8 <col:30> 'const int' lvalue Var 0x5626719a37a8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5626719d3d00 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5626719d3ce0 <col:42> 'const int' lvalue Var 0x5626719a38a0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5626719d3d38 <col:54> 'P' lvalue ParmVar 0x5626719a96d8 'parser' 'P'
|         |-DeclRefExpr 0x5626719d3d58 <col:62> 'T1' lvalue ParmVar 0x5626719a9778 'x1' 'T1 &'
|         `-DeclRefExpr 0x5626719d3d78 <col:66> 'T2' lvalue ParmVar 0x5626719a9818 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5626719aa008 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x5626719a9a20 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5626719a9a98 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5626719a9b18 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5626719a9f68 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5626719a9be0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719a9c60 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5626719a9cd8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5626719a9d78 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5626719a9e18 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x5626719d3f80 <col:74, line:498:5>
|     |-CallExpr 0x5626719d3ef8 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5626719d3e08 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5626719d3e48 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5626719d3e58 <col:30> 'const char *' lvalue ParmVar 0x5626719a9be0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5626719d3e78 <col:39> 'int' lvalue ParmVar 0x5626719a9c60 'flags' 'int'
|     | |-DeclRefExpr 0x5626719d3e98 <col:46> 'P' lvalue ParmVar 0x5626719a9cd8 'parser' 'P'
|     | |-DeclRefExpr 0x5626719d3eb8 <col:54> 'T1' lvalue ParmVar 0x5626719a9d78 'x1' 'T1 &'
|     | `-DeclRefExpr 0x5626719d3ed8 <col:58> 'T2' lvalue ParmVar 0x5626719a9e18 'x2' 'T2 &'
|     `-ReturnStmt 0x5626719d3f70 <line:497:9, col:17>
|       `-UnaryOperator 0x5626719d3f58 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5626719d3f48 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5626719aa368 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x5626719aa088 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5626719aa2c8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5626719aa140 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719aa1b8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x5626719d40c8 <col:52, line:509:5>
|     `-ReturnStmt 0x5626719d40b8 <line:508:9, col:44>
|       `-CallExpr 0x5626719d4080 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5626719d3fb0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5626719d4020 <col:26> 'const char *' lvalue ParmVar 0x5626719aa140 'keyword' 'const char *'
|         |-IntegerLiteral 0x5626719d4040 <col:35> 'int' 0
|         `-DeclRefExpr 0x5626719d4060 <col:38> 'P' lvalue ParmVar 0x5626719aa1b8 'parser' 'P'
|-FunctionTemplateDecl 0x5626719aa668 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x5626719aa3d0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5626719aa5c8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5626719aa480 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719aa4f8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5626719d4208 <col:54, line:513:5>
|     `-ReturnStmt 0x5626719d41f8 <line:512:9, col:52>
|       `-CallExpr 0x5626719d41c0 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5626719d40f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5626719d4160 <col:26> 'const char *' lvalue ParmVar 0x5626719aa480 'keyword' 'const char *'
|         |-DeclRefExpr 0x5626719d4180 <col:35> 'const int' lvalue Var 0x5626719a37a8 'mandatory' 'const int'
|         `-DeclRefExpr 0x5626719d41a0 <col:46> 'P' lvalue ParmVar 0x5626719aa4f8 'parser' 'P'
|-FunctionTemplateDecl 0x5626719aa968 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x5626719aa6d0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5626719aa8c8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5626719aa780 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719aa7f8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5626719d4348 <col:54, line:517:5>
|     `-ReturnStmt 0x5626719d4338 <line:516:9, col:53>
|       `-CallExpr 0x5626719d4300 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5626719d4230 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5626719d42a0 <col:26> 'const char *' lvalue ParmVar 0x5626719aa780 'keyword' 'const char *'
|         |-DeclRefExpr 0x5626719d42c0 <col:35> 'const int' lvalue Var 0x5626719a38a0 'positional' 'const int'
|         `-DeclRefExpr 0x5626719d42e0 <col:47> 'P' lvalue ParmVar 0x5626719aa7f8 'parser' 'P'
|-FunctionTemplateDecl 0x5626719aac68 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x5626719aa9d0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5626719aabc8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5626719aaa80 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719aaaf8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x5626719d4538 <col:55, line:521:5>
|     `-ReturnStmt 0x5626719d4528 <line:520:9, col:65>
|       `-CallExpr 0x5626719d44f0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5626719d4370 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5626719d43e0 <col:26> 'const char *' lvalue ParmVar 0x5626719aaa80 'keyword' 'const char *'
|         |-BinaryOperator 0x5626719d44b0 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x5626719d4460 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5626719d4440 <col:35> 'const int' lvalue Var 0x5626719a37a8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5626719d4498 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5626719d4478 <col:47> 'const int' lvalue Var 0x5626719a38a0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5626719d44d0 <col:59> 'P' lvalue ParmVar 0x5626719aaaf8 'parser' 'P'
|-FunctionTemplateDecl 0x5626719ab038 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x5626719aacd0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5626719aaf98 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5626719aad80 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719aae00 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5626719aae78 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x5626719d4678 <col:63, line:526:5>
|     |-CallExpr 0x5626719d4600 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5626719d4550 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x5626719d4590 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x5626719d45a0 <col:35> 'const char *' lvalue ParmVar 0x5626719aad80 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5626719d45c0 <col:44> 'int' lvalue ParmVar 0x5626719aae00 'flags' 'int'
|     | `-DeclRefExpr 0x5626719d45e0 <col:51> 'P' lvalue ParmVar 0x5626719aae78 'parser' 'P'
|     `-ReturnStmt 0x5626719d4668 <line:525:9, col:17>
|       `-UnaryOperator 0x5626719d4650 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5626719d4640 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5626719ab488 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x5626719ab0a8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5626719ab128 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5626719ab3e8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5626719ab1e8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719ab260 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x5626719ab308 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x5626719d47d0 <col:58, line:541:5>
|     `-ReturnStmt 0x5626719d47c0 <line:540:9, col:39>
|       `-CallExpr 0x5626719d4788 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5626719d46a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5626719d4728 <col:21> 'const char *' lvalue ParmVar 0x5626719ab1e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5626719d4748 <col:30> 'P' lvalue ParmVar 0x5626719ab260 'parser' 'P'
|         `-DeclRefExpr 0x5626719d4768 <col:38> 'T' lvalue ParmVar 0x5626719ab308 'x' 'T &'
|-FunctionTemplateDecl 0x5626719ab8d8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x5626719ab4f8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5626719ab578 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5626719ab838 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5626719ab638 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719ab6b0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5626719ab758 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5626719d4908 <col:60, line:545:5>
|     `-ReturnStmt 0x5626719d48f8 <line:544:9, col:41>
|       `-CallExpr 0x5626719d48c0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5626719d47f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5626719d4860 <col:23> 'const char *' lvalue ParmVar 0x5626719ab638 'keyword' 'const char *'
|         |-DeclRefExpr 0x5626719d4880 <col:32> 'P' lvalue ParmVar 0x5626719ab6b0 'parser' 'P'
|         `-DeclRefExpr 0x5626719d48a0 <col:40> 'T' lvalue ParmVar 0x5626719ab758 'x' 'T &'
|-FunctionTemplateDecl 0x5626719abd28 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x5626719ab948 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5626719ab9c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5626719abc88 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5626719aba88 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719abb00 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5626719abba8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5626719d4a40 <col:60, line:549:5>
|     `-ReturnStmt 0x5626719d4a30 <line:548:9, col:41>
|       `-CallExpr 0x5626719d49f8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5626719d4930 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5626719d4998 <col:23> 'const char *' lvalue ParmVar 0x5626719aba88 'keyword' 'const char *'
|         |-DeclRefExpr 0x5626719d49b8 <col:32> 'P' lvalue ParmVar 0x5626719abb00 'parser' 'P'
|         `-DeclRefExpr 0x5626719d49d8 <col:40> 'T' lvalue ParmVar 0x5626719abba8 'x' 'T &'
|-FunctionTemplateDecl 0x5626719ac178 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x5626719abd98 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5626719abe18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5626719ac0d8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5626719abed8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719abf50 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x5626719abff8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x5626719d6878 <col:61, line:553:5>
|     `-ReturnStmt 0x5626719d6868 <line:552:9, col:42>
|       `-CallExpr 0x5626719d6830 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5626719d4a68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5626719d4ad0 <col:24> 'const char *' lvalue ParmVar 0x5626719abed8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5626719d67f0 <col:33> 'P' lvalue ParmVar 0x5626719abf50 'parser' 'P'
|         `-DeclRefExpr 0x5626719d6810 <col:41> 'T' lvalue ParmVar 0x5626719abff8 'x' 'T &'
|-FunctionTemplateDecl 0x5626719ac658 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x5626719ac1e8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5626719ac268 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5626719ac5b8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5626719ac328 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719ac3a8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5626719ac420 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x5626719ac4c8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x5626719d69f0 <col:69, line:557:5>
|     `-ReturnStmt 0x5626719d69e0 <line:556:9, col:46>
|       `-CallExpr 0x5626719d69a0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5626719d68a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5626719d6920 <col:21> 'const char *' lvalue ParmVar 0x5626719ac328 'keyword' 'const char *'
|         |-DeclRefExpr 0x5626719d6940 <col:30> 'int' lvalue ParmVar 0x5626719ac3a8 'flags' 'int'
|         |-DeclRefExpr 0x5626719d6960 <col:37> 'P' lvalue ParmVar 0x5626719ac420 'parser' 'P'
|         `-DeclRefExpr 0x5626719d6980 <col:45> 'T' lvalue ParmVar 0x5626719ac4c8 'x' 'T &'
|-FunctionTemplateDecl 0x5626719af308 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x5626719ac6d0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5626719af268 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5626719af120 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719af198 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x5626719d6b30 <col:56, line:571:5>
|     `-ReturnStmt 0x5626719d6b20 <line:570:9, col:48>
|       `-CallExpr 0x5626719d6ae8 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5626719d6a18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5626719d6a88 <col:30> 'const char *' lvalue ParmVar 0x5626719af120 'keyword' 'const char *'
|         |-IntegerLiteral 0x5626719d6aa8 <col:39> 'int' 0
|         `-DeclRefExpr 0x5626719d6ac8 <col:42> 'P' lvalue ParmVar 0x5626719af198 'parser' 'P'
|-FunctionTemplateDecl 0x5626719af698 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x5626719af370 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5626719af5f8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5626719af420 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719af4a0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5626719af518 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5626719d6d00 <col:67, line:576:5>
|     |-CallExpr 0x5626719d6c88 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5626719d6b48 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5626719d6b88 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5626719d6b98 <col:39> 'const char *' lvalue ParmVar 0x5626719af420 'keyword' 'const char *'
|     | |-BinaryOperator 0x5626719d6c48 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5626719d6bf8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5626719d6bb8 <col:48> 'int' lvalue ParmVar 0x5626719af4a0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5626719d6c30 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5626719d6c10 <col:56> 'const int' lvalue Var 0x5626719a3a90 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x5626719d6c68 <col:68> 'P' lvalue ParmVar 0x5626719af518 'parser' 'P'
|     `-ReturnStmt 0x5626719d6cf0 <line:575:9, col:17>
|       `-UnaryOperator 0x5626719d6cd8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5626719d6cc8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5626719afae8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x5626719af708 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5626719af788 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5626719afa48 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5626719af848 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719af8c0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5626719af968 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x5626719d6e70 <col:62, line:592:5>
|     `-ReturnStmt 0x5626719d6e60 <line:591:9, col:51>
|       `-CallExpr 0x5626719d6e20 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5626719d6d30 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5626719d6da0 <col:30> 'const char *' lvalue ParmVar 0x5626719af848 'keyword' 'const char *'
|         |-IntegerLiteral 0x5626719d6dc0 <col:39> 'int' 0
|         |-DeclRefExpr 0x5626719d6de0 <col:42> 'P' lvalue ParmVar 0x5626719af8c0 'parser' 'P'
|         `-DeclRefExpr 0x5626719d6e00 <col:50> 'T' lvalue ParmVar 0x5626719af968 'x' 'T &'
|-FunctionTemplateDecl 0x5626719affc8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x5626719afb58 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5626719afbd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5626719aff28 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5626719afc98 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719afd18 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5626719afd90 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x5626719afe38 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x5626719d7068 <col:73, line:597:5>
|     |-CallExpr 0x5626719d6fe8 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5626719d6e88 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5626719d6ec8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5626719d6ed8 <col:39> 'const char *' lvalue ParmVar 0x5626719afc98 'keyword' 'const char *'
|     | |-BinaryOperator 0x5626719d6f88 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5626719d6f38 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5626719d6ef8 <col:48> 'int' lvalue ParmVar 0x5626719afd18 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5626719d6f70 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5626719d6f50 <col:56> 'const int' lvalue Var 0x5626719a3a90 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5626719d6fa8 <col:68> 'P' lvalue ParmVar 0x5626719afd90 'parser' 'P'
|     | `-DeclRefExpr 0x5626719d6fc8 <col:76> 'T' lvalue ParmVar 0x5626719afe38 'x' 'T &'
|     `-ReturnStmt 0x5626719d7058 <line:596:9, col:17>
|       `-UnaryOperator 0x5626719d7040 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5626719d7030 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5626719b0578 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x5626719b0040 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5626719b00b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5626719b04d8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x5626719b0178 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719b01f0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x5626719b03b0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5626719d71d8 <col:65, line:614:5>
|     `-ReturnStmt 0x5626719d71c8 <line:613:9, col:46>
|       `-CallExpr 0x5626719d7188 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5626719d7098 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5626719d7108 <col:25> 'const char *' lvalue ParmVar 0x5626719b0178 'keyword' 'const char *'
|         |-IntegerLiteral 0x5626719d7128 <col:34> 'int' 0
|         |-DeclRefExpr 0x5626719d7148 <col:37> 'P' lvalue ParmVar 0x5626719b01f0 'parser' 'P'
|         `-DeclRefExpr 0x5626719d7168 <col:45> 'Vector<T>' lvalue ParmVar 0x5626719b03b0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5626719b09a8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x5626719b05e8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5626719b0908 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x5626719b06a0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719b07f0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5626719d73f0 <col:55, line:618:5>
|     `-ReturnStmt 0x5626719d73e0 <line:617:9, col:55>
|       `-CallExpr 0x5626719d73a0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5626719d7200 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5626719d7270 <col:25> 'const char *' lvalue ParmVar 0x5626719b06a0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5626719d7290 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x5626719d7360 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5626719d7380 <col:54> 'Vector<T>' lvalue ParmVar 0x5626719b07f0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5626719b0f78 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x5626719b0a10 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5626719b0a88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5626719b0ed8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5626719b0b48 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719b0bc8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5626719b0c40 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5626719b0d90 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5626719d75e8 <col:76, line:623:5>
|     |-CallExpr 0x5626719d7568 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5626719d7408 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x5626719d7448 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x5626719d7458 <col:34> 'const char *' lvalue ParmVar 0x5626719b0b48 'keyword' 'const char *'
|     | |-BinaryOperator 0x5626719d7508 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x5626719d74b8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5626719d7478 <col:43> 'int' lvalue ParmVar 0x5626719b0bc8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5626719d74f0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5626719d74d0 <col:51> 'const int' lvalue Var 0x5626719a3a90 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5626719d7528 <col:63> 'P' lvalue ParmVar 0x5626719b0c40 'parser' 'P'
|     | `-DeclRefExpr 0x5626719d7548 <col:71> 'Vector<T>' lvalue ParmVar 0x5626719b0d90 'x' 'Vector<T> &'
|     `-ReturnStmt 0x5626719d75d8 <line:622:9, col:17>
|       `-UnaryOperator 0x5626719d75c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5626719d75b0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5626719b14b8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x5626719b0ff0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5626719b1068 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5626719b1418 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x5626719b1128 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719b11a8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5626719b12f0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5626719d7850 <col:66, line:627:5>
|     `-ReturnStmt 0x5626719d7840 <line:626:9, col:59>
|       `-CallExpr 0x5626719d7800 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5626719d7618 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5626719d7688 <col:25> 'const char *' lvalue ParmVar 0x5626719b1128 'keyword' 'const char *'
|         |-DeclRefExpr 0x5626719d76a8 <col:34> 'int' lvalue ParmVar 0x5626719b11a8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x5626719d77c0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5626719d77e0 <col:58> 'Vector<T>' lvalue ParmVar 0x5626719b12f0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x5626719b1548 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x5626719d78d0 <col:25, line:633:5>
|   `-ReturnStmt 0x5626719d78c0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x5626719d78a8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5626719d7878 <col:16> 'const bool' lvalue ->_status 0x5626719c2ea8
|         `-CXXThisExpr 0x5626719d7868 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5626719b16c8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x5626719b1600 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x5626719d79b8 <col:27, line:639:5>
|   |-BinaryOperator 0x5626719d7960 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5626719d78e8 <col:9> 'bool' lvalue ParmVar 0x5626719b1600 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5626719d7948 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5626719d7918 <col:13> 'bool' lvalue ->_status 0x5626719c2ea8
|   |     `-CXXThisExpr 0x5626719d7908 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5626719d79a8 <line:638:9, col:17>
|     `-UnaryOperator 0x5626719d7990 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5626719d7980 <col:17> 'Args *' this
|-CXXMethodDecl 0x5626719b1848 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5626719b1788 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x5626719d7aa8 <col:39, line:644:5>
|   |-BinaryOperator 0x5626719d7a50 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5626719d79d8 <col:9> 'bool' lvalue ParmVar 0x5626719b1788 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5626719d7a38 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5626719d7a08 <col:13> 'const bool' lvalue ->_status 0x5626719c2ea8
|   |     `-CXXThisExpr 0x5626719d79f8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5626719d7a98 <line:643:9, col:17>
|     `-UnaryOperator 0x5626719d7a80 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5626719d7a70 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5626719b1910 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x5626719d7b50 <col:30, line:651:5>
|   `-ReturnStmt 0x5626719d7b40 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x5626719d7b28 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5626719d7af8 <col:16> 'bool' lvalue ->_read_status 0x56267199c250
|         `-ImplicitCastExpr 0x5626719d7ad8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x5626719d7ac8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5626719b1a58 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x5626719b19c8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x5626719d7c58 <col:32, line:658:5>
|   |-BinaryOperator 0x5626719d7c00 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5626719d7b68 <col:9> 'bool' lvalue ParmVar 0x5626719b19c8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5626719d7be8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5626719d7bb8 <col:13> 'bool' lvalue ->_read_status 0x56267199c250
|   |     `-ImplicitCastExpr 0x5626719d7b98 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5626719d7b88 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5626719d7c48 <line:657:9, col:17>
|     `-UnaryOperator 0x5626719d7c30 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5626719d7c20 <col:17> 'Args *' this
|-CXXMethodDecl 0x5626719b1ba8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5626719b1b18 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x5626719d7d68 <col:44, line:663:5>
|   |-BinaryOperator 0x5626719d7d10 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5626719d7c78 <col:9> 'bool' lvalue ParmVar 0x5626719b1b18 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5626719d7cf8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5626719d7cc8 <col:13> 'bool' lvalue ->_read_status 0x56267199c250
|   |     `-ImplicitCastExpr 0x5626719d7ca8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5626719d7c98 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5626719d7d58 <line:662:9, col:17>
|     `-UnaryOperator 0x5626719d7d40 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5626719d7d30 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5626719b1c70 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x5626719b1d38 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x5626719b1e00 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x5626719b1ec8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x5626719b21d8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x5626719b1f68 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5626719b2138 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x5626719b2048 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x5626719d8120 <col:19, line:706:5>
|     `-IfStmt 0x5626719d80f8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x5626719d7e68 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x5626719d8028 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x5626719d7ff8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x5626719d7fb8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x5626719d7ec0 <col:42> '<bound member function type>' ->simple_slot 0x5626719d0eb0
|       |     | `-CXXThisExpr 0x5626719d7eb0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x5626719d7f58 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x5626719d7f10 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x56267172a1d8
|       |     | `-DeclRefExpr 0x5626719d7ef0 <col:55> 'T' lvalue ParmVar 0x5626719b2048 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x5626719d7f98 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x5626719d80e8 <line:705:13, col:34>
|         `-CallExpr 0x5626719d80c0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x5626719d8048 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x5626719d80a0 <col:33> 'T' lvalue ParmVar 0x5626719b2048 'x' 'T &'
|-FunctionTemplateDecl 0x5626719b24a8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x5626719b2238 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5626719b2408 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x5626719b2318 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x5626719d8500 <col:31, line:717:5>
|     |-DeclStmt 0x5626719d8260 <line:713:9, col:23>
|     | `-VarDecl 0x5626719d8148 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x5626719d8238 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5626719d81c0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5626719d8218 <col:21> 'T' lvalue ParmVar 0x5626719b2318 'x' 'T &'
|     |-IfStmt 0x5626719d84b0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x5626719d8358 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x5626719d8490 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5626719d8430 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5626719d83c0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5626718e12d8 0x5626718e0ef8 0x5626718e0b28 0x5626718e0748 0x5626718e0368 0x5626718dff98
|     |   | `-DeclRefExpr 0x5626719d83a0 <col:14> 'T *' lvalue Var 0x5626719d8148 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x5626719d8470 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x5626719d84e8 <line:716:9, col:16>
|       `-DeclRefExpr 0x5626719d84c8 <col:16> 'T *' lvalue Var 0x5626719d8148 's' 'T *'
|-FunctionTemplateDecl 0x5626719b28b8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x5626719b2508 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5626719b2588 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5626719b2818 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x5626719b2668 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x5626719b2708 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x5626719d8810 <col:37, line:726:5>
|     |-IfStmt 0x5626719d87a0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x5626719d87c0 <line:723:13, col:26>
|     | | `-VarDecl 0x5626719d8568 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x5626719d8658 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x5626719d85e0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x5626719d8638 <col:25> 'T' lvalue ParmVar 0x5626719b2668 'x' 'T &'
|     | |-DeclRefExpr 0x5626719d8680 <col:16> 'T *' lvalue Var 0x5626719d8568 's' 'T *'
|     | `-BinaryOperator 0x5626719d8780 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5626719d8730 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5626719d86c0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5626718e12d8 0x5626718e0ef8 0x5626718e0b28 0x5626718e0748 0x5626718e0368 0x5626718dff98
|     |   | `-DeclRefExpr 0x5626719d86a0 <col:14> 'T *' lvalue Var 0x5626719d8568 's' 'T *'
|     |   `-DeclRefExpr 0x5626719d8760 <col:18> 'const V' lvalue ParmVar 0x5626719b2708 'value' 'const V &'
|     `-ReturnStmt 0x5626719d8800 <line:725:9, col:17>
|       `-UnaryOperator 0x5626719d87e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5626719d87d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5626719b2cb8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x5626719b2920 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5626719b2c18 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x5626719b29d0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719b2a50 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5626719b2af8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x5626719d9630 <col:65, line:737:5>
|     |-DeclStmt 0x5626719d88a8 <line:732:9, col:26>
|     | `-VarDecl 0x5626719d8840 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5626719d95f8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x5626719d9618 <line:733:13, col:58>
|       | `-VarDecl 0x5626719d88d0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5626719d8ab0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5626719d8a80 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5626719d8a68 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5626719d8a48 <col:26, col:58> 'String' (CXXTemporary 0x5626719d8a48)
|       |           `-CXXMemberCallExpr 0x5626719d89d8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5626719d8948 <col:26> '<bound member function type>' ->find 0x5626719d04c8
|       |             | `-CXXThisExpr 0x5626719d8938 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5626719d8a10 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5626719d8978 <col:31> 'const char *' lvalue ParmVar 0x5626719b29d0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5626719d8a28 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5626719d8998 <col:40> 'int' lvalue ParmVar 0x5626719b2a50 'flags' 'int'
|       |             `-DeclRefExpr 0x5626719d89b8 <col:47> 'Args::Slot *' lvalue Var 0x5626719d8840 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5626719d8b68 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5626719d8b50 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5626719d8b30 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5626719d8b00 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5626716ed1a8
|       |       `-ImplicitCastExpr 0x5626719d8ae8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5626719d8ac8 <col:20> 'String' lvalue Var 0x5626719d88d0 'str' 'String'
|       `-CompoundStmt 0x5626719d95d8 <col:61, line:736:9>
|         |-DeclStmt 0x5626719d9020 <line:734:13, col:76>
|         | `-VarDecl 0x5626719d8bb8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5626719d8ff0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5626719d8f60 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5626719d8fa8 <col:60> 'T' lvalue ParmVar 0x5626719b2af8 'variable' 'T &'
|         |     `-UnaryOperator 0x5626719d8fd8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5626719d8fc8 <col:71> 'Args *' this
|         `-CallExpr 0x5626719d95a8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x5626719d9048 <col:13> '<bound member function type>' ->postparse 0x5626719d06d8
|           | `-CXXThisExpr 0x5626719d9038 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5626719d9568 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5626719d9078 <col:23> 'T *' lvalue Var 0x5626719d8bb8 's' 'T *'
|           | `-CallExpr 0x5626719d9528 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5626719d9300 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x5626719d9400 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x5626719d9420 <col:86> 'String' lvalue Var 0x5626719d88d0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5626719d94d0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5626719d9460 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5626718e12d8 0x5626718e0ef8 0x5626718e0b28 0x5626718e0748 0x5626718e0368 0x5626718dff98
|           |   | `-DeclRefExpr 0x5626719d9440 <col:92> 'T *' lvalue Var 0x5626719d8bb8 's' 'T *'
|           |   `-UnaryOperator 0x5626719d9510 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5626719d9500 <col:96> 'Args *' this
|           `-DeclRefExpr 0x5626719d9588 <col:103> 'Args::Slot *' lvalue Var 0x5626719d8840 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5626719b3208 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5626719b2d28 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5626719b2da8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5626719b3168 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5626719b2e68 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719b2ee8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5626719b2f88 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x5626719b3028 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x5626719da4d0 <col:88, line:745:5>
|     |-DeclStmt 0x5626719d96c8 <line:741:9, col:26>
|     | `-VarDecl 0x5626719d9660 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5626719d98e8 <line:742:9, col:55>
|     | `-VarDecl 0x5626719d96f0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5626719d98d0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5626719d98a0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5626719d9888 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5626719d9868 <col:22, col:54> 'String' (CXXTemporary 0x5626719d9868)
|     |           `-CXXMemberCallExpr 0x5626719d97f8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5626719d9768 <col:22> '<bound member function type>' ->find 0x5626719d04c8
|     |             | `-CXXThisExpr 0x5626719d9758 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5626719d9830 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5626719d9798 <col:27> 'const char *' lvalue ParmVar 0x5626719b2e68 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5626719d9848 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5626719d97b8 <col:36> 'int' lvalue ParmVar 0x5626719b2ee8 'flags' 'int'
|     |             `-DeclRefExpr 0x5626719d97d8 <col:43> 'Args::Slot *' lvalue Var 0x5626719d9660 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5626719d9cc0 <line:743:9, col:72>
|     | `-VarDecl 0x5626719d9938 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5626719d9c90 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5626719d9c00 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5626719d9c48 <col:56> 'T' lvalue ParmVar 0x5626719b2f88 'variable' 'T &'
|     |     `-UnaryOperator 0x5626719d9c78 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5626719d9c68 <col:67> 'Args *' this
|     `-CallExpr 0x5626719da4a0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x5626719d9ce8 <col:9> '<bound member function type>' ->postparse 0x5626719d06d8
|       | `-CXXThisExpr 0x5626719d9cd8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5626719da460 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5626719d9d18 <col:19> 'T *' lvalue Var 0x5626719d9938 's' 'T *'
|       | `-ParenExpr 0x5626719da440 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x5626719da410 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5626719da3f8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5626719da3e0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5626719da3c0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5626719da390 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5626716ed1a8
|       |     |       `-ImplicitCastExpr 0x5626719da378 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5626719d9d38 <col:25> 'String' lvalue Var 0x5626719d96f0 'str' 'String'
|       |     |-CallExpr 0x5626719da1e8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5626719d9fc0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x5626719da0c0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x5626719da0e0 <col:89> 'String' lvalue Var 0x5626719d96f0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5626719da190 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5626719da120 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5626718e12d8 0x5626718e0ef8 0x5626718e0b28 0x5626718e0748 0x5626718e0368 0x5626718dff98
|       |     | | `-DeclRefExpr 0x5626719da100 <col:95> 'T *' lvalue Var 0x5626719d9938 's' 'T *'
|       |     | `-UnaryOperator 0x5626719da1d0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5626719da1c0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x5626719da358 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x5626719da338 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x5626719da308 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5626719da2b8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5626719da248 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5626718e12d8 0x5626718e0ef8 0x5626718e0b28 0x5626718e0748 0x5626718e0368 0x5626718dff98
|       |         | | `-DeclRefExpr 0x5626719da228 <col:109> 'T *' lvalue Var 0x5626719d9938 's' 'T *'
|       |         | `-DeclRefExpr 0x5626719da2e8 <col:113> 'const V' lvalue ParmVar 0x5626719b3028 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5626719da328 <col:120> 'bool' true
|       `-DeclRefExpr 0x5626719da480 <col:128> 'Args::Slot *' lvalue Var 0x5626719d9660 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5626719b3738 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x5626719b3280 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5626719b32f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5626719b3698 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5626719b33b8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719b3438 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5626719b34b0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5626719b3558 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x5626719db0c8 <col:75, line:754:5>
|     |-DeclStmt 0x5626719da578 <line:749:9, col:26>
|     | `-VarDecl 0x5626719da510 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5626719db090 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x5626719db0b0 <line:750:13, col:58>
|       | `-VarDecl 0x5626719da5a0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5626719da780 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5626719da750 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5626719da738 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5626719da718 <col:26, col:58> 'String' (CXXTemporary 0x5626719da718)
|       |           `-CXXMemberCallExpr 0x5626719da6a8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5626719da618 <col:26> '<bound member function type>' ->find 0x5626719d04c8
|       |             | `-CXXThisExpr 0x5626719da608 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5626719da6e0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5626719da648 <col:31> 'const char *' lvalue ParmVar 0x5626719b33b8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5626719da6f8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5626719da668 <col:40> 'int' lvalue ParmVar 0x5626719b3438 'flags' 'int'
|       |             `-DeclRefExpr 0x5626719da688 <col:47> 'Args::Slot *' lvalue Var 0x5626719da510 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5626719da838 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5626719da820 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5626719da800 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5626719da7d0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5626716ed1a8
|       |       `-ImplicitCastExpr 0x5626719da7b8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5626719da798 <col:20> 'String' lvalue Var 0x5626719da5a0 'str' 'String'
|       `-CompoundStmt 0x5626719db070 <col:61, line:753:9>
|         |-DeclStmt 0x5626719dac10 <line:751:13, col:63>
|         | `-VarDecl 0x5626719da888 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5626719dabe0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5626719dab50 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5626719dab98 <col:47> 'T' lvalue ParmVar 0x5626719b3558 'variable' 'T &'
|         |     `-UnaryOperator 0x5626719dabc8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5626719dabb8 <col:58> 'Args *' this
|         `-CallExpr 0x5626719db040 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x5626719dac38 <col:13> '<bound member function type>' ->postparse 0x5626719d06d8
|           | `-CXXThisExpr 0x5626719dac28 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5626719db000 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5626719dac68 <col:23> 'T *' lvalue Var 0x5626719da888 's' 'T *'
|           | `-CallExpr 0x5626719dafc0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5626719dae50 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5626719dae98 <col:56> 'P' lvalue ParmVar 0x5626719b34b0 'parser' 'P'
|           |   |-DeclRefExpr 0x5626719daeb8 <col:64> 'String' lvalue Var 0x5626719da5a0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5626719daf68 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5626719daef8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5626718e12d8 0x5626718e0ef8 0x5626718e0b28 0x5626718e0748 0x5626718e0368 0x5626718dff98
|           |   | `-DeclRefExpr 0x5626719daed8 <col:70> 'T *' lvalue Var 0x5626719da888 's' 'T *'
|           |   `-UnaryOperator 0x5626719dafa8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5626719daf98 <col:74> 'Args *' this
|           `-DeclRefExpr 0x5626719db020 <col:81> 'Args::Slot *' lvalue Var 0x5626719da510 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5626719b3d98 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5626719b37b0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5626719b3828 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x5626719b38a8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5626719b3cf8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5626719b3970 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719b39f0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5626719b3a68 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x5626719b3b08 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x5626719b3ba8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x5626719dbe58 <col:98, line:762:5>
|     |-DeclStmt 0x5626719db160 <line:758:9, col:26>
|     | `-VarDecl 0x5626719db0f8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5626719db380 <line:759:9, col:55>
|     | `-VarDecl 0x5626719db188 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5626719db368 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5626719db338 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5626719db320 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5626719db300 <col:22, col:54> 'String' (CXXTemporary 0x5626719db300)
|     |           `-CXXMemberCallExpr 0x5626719db290 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5626719db200 <col:22> '<bound member function type>' ->find 0x5626719d04c8
|     |             | `-CXXThisExpr 0x5626719db1f0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5626719db2c8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5626719db230 <col:27> 'const char *' lvalue ParmVar 0x5626719b3970 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5626719db2e0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5626719db250 <col:36> 'int' lvalue ParmVar 0x5626719b39f0 'flags' 'int'
|     |             `-DeclRefExpr 0x5626719db270 <col:43> 'Args::Slot *' lvalue Var 0x5626719db0f8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5626719db7a0 <line:760:9, col:59>
|     | `-VarDecl 0x5626719db3d8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5626719db770 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5626719db6e0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5626719db728 <col:43> 'T' lvalue ParmVar 0x5626719b3b08 'variable' 'T &'
|     |     `-UnaryOperator 0x5626719db758 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5626719db748 <col:54> 'Args *' this
|     `-CallExpr 0x5626719dbe28 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x5626719db7c8 <col:9> '<bound member function type>' ->postparse 0x5626719d06d8
|       | `-CXXThisExpr 0x5626719db7b8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5626719dbde8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5626719db7f8 <col:19> 'T *' lvalue Var 0x5626719db3d8 's' 'T *'
|       | `-ParenExpr 0x5626719dbdc8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x5626719dbd98 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5626719dbd80 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5626719dbd68 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5626719dbd48 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5626719dbd18 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5626716ed1a8
|       |     |       `-ImplicitCastExpr 0x5626719dbd00 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5626719db818 <col:25> 'String' lvalue Var 0x5626719db188 'str' 'String'
|       |     |-CallExpr 0x5626719dbb70 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5626719dba00 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x5626719dba48 <col:59> 'P' lvalue ParmVar 0x5626719b3a68 'parser' 'P'
|       |     | |-DeclRefExpr 0x5626719dba68 <col:67> 'String' lvalue Var 0x5626719db188 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5626719dbb18 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5626719dbaa8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5626718e12d8 0x5626718e0ef8 0x5626718e0b28 0x5626718e0748 0x5626718e0368 0x5626718dff98
|       |     | | `-DeclRefExpr 0x5626719dba88 <col:73> 'T *' lvalue Var 0x5626719db3d8 's' 'T *'
|       |     | `-UnaryOperator 0x5626719dbb58 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5626719dbb48 <col:77> 'Args *' this
|       |     `-ParenExpr 0x5626719dbce0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x5626719dbcc0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x5626719dbc90 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5626719dbc40 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5626719dbbd0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5626718e12d8 0x5626718e0ef8 0x5626718e0b28 0x5626718e0748 0x5626718e0368 0x5626718dff98
|       |         | | `-DeclRefExpr 0x5626719dbbb0 <col:87> 'T *' lvalue Var 0x5626719db3d8 's' 'T *'
|       |         | `-DeclRefExpr 0x5626719dbc70 <col:91> 'const V' lvalue ParmVar 0x5626719b3ba8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5626719dbcb0 <col:98> 'bool' true
|       `-DeclRefExpr 0x5626719dbe08 <col:106> 'Args::Slot *' lvalue Var 0x5626719db0f8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5626719b4408 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x5626719b3e18 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5626719b3e98 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5626719b3f18 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5626719b4368 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5626719b3fe0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719b4060 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5626719b40d8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x5626719b4178 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x5626719b4218 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x5626719dce38 <col:60, line:773:5>
|     |-DeclStmt 0x5626719dbf00 <line:767:9, col:26>
|     | `-VarDecl 0x5626719dbe98 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5626719dce00 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x5626719dce20 <line:768:13, col:58>
|       | `-VarDecl 0x5626719dbf28 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5626719dc108 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5626719dc0d8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5626719dc0c0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5626719dc0a0 <col:26, col:58> 'String' (CXXTemporary 0x5626719dc0a0)
|       |           `-CXXMemberCallExpr 0x5626719dc030 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5626719dbfa0 <col:26> '<bound member function type>' ->find 0x5626719d04c8
|       |             | `-CXXThisExpr 0x5626719dbf90 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5626719dc068 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5626719dbfd0 <col:31> 'const char *' lvalue ParmVar 0x5626719b3fe0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5626719dc080 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5626719dbff0 <col:40> 'int' lvalue ParmVar 0x5626719b4060 'flags' 'int'
|       |             `-DeclRefExpr 0x5626719dc010 <col:47> 'Args::Slot *' lvalue Var 0x5626719dbe98 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5626719dc1c0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5626719dc1a8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5626719dc188 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5626719dc158 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5626716ed1a8
|       |       `-ImplicitCastExpr 0x5626719dc140 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5626719dc120 <col:20> 'String' lvalue Var 0x5626719dbf28 'str' 'String'
|       `-CompoundStmt 0x5626719dcdd8 <col:61, line:772:9>
|         |-DeclStmt 0x5626719dc500 <line:769:13, col:66>
|         | `-VarDecl 0x5626719dc218 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x5626719dc4d0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5626719dc440 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5626719dc488 <col:49> 'T1' lvalue ParmVar 0x5626719b4178 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x5626719dc4b8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5626719dc4a8 <col:61> 'Args *' this
|         |-DeclStmt 0x5626719dc870 <line:770:13, col:66>
|         | `-VarDecl 0x5626719dc588 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x5626719dc840 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5626719dc7b0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5626719dc7f8 <col:49> 'T2' lvalue ParmVar 0x5626719b4218 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x5626719dc828 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5626719dc818 <col:61> 'Args *' this
|         `-CallExpr 0x5626719dcda8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x5626719dc898 <col:13> '<bound member function type>' ->postparse 0x5626719d06d8
|           | `-CXXThisExpr 0x5626719dc888 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5626719dcd68 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x5626719dc908 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x5626719dc8c8 <col:23> 'T1 *' lvalue Var 0x5626719dc218 's1' 'T1 *'
|           | | `-DeclRefExpr 0x5626719dc8e8 <col:29> 'T2 *' lvalue Var 0x5626719dc588 's2' 'T2 *'
|           | `-CallExpr 0x5626719dcd20 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5626719dcaf0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5626719dcb38 <col:63> 'P' lvalue ParmVar 0x5626719b40d8 'parser' 'P'
|           |   |-DeclRefExpr 0x5626719dcb58 <col:71> 'String' lvalue Var 0x5626719dbf28 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5626719dcc08 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5626719dcb98 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5626718e12d8 0x5626718e0ef8 0x5626718e0b28 0x5626718e0748 0x5626718e0368 0x5626718dff98
|           |   | `-DeclRefExpr 0x5626719dcb78 <col:77> 'T1 *' lvalue Var 0x5626719dc218 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x5626719dccc8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5626719dcc58 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5626718e12d8 0x5626718e0ef8 0x5626718e0b28 0x5626718e0748 0x5626718e0368 0x5626718dff98
|           |   | `-DeclRefExpr 0x5626719dcc38 <col:82> 'T2 *' lvalue Var 0x5626719dc588 's2' 'T2 *'
|           |   `-UnaryOperator 0x5626719dcd08 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5626719dccf8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x5626719dcd88 <col:94> 'Args::Slot *' lvalue Var 0x5626719dbe98 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5626719b47f8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x5626719b4488 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5626719b4758 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5626719b4540 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719b45c0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5626719b4638 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5626719dd350 <col:67, line:780:5>
|     |-DeclStmt 0x5626719dced0 <line:777:9, col:26>
|     | `-VarDecl 0x5626719dce68 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5626719dd318 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x5626719dd338 <line:778:13, col:58>
|       | `-VarDecl 0x5626719dcef8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5626719dd0d8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5626719dd0a8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5626719dd090 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5626719dd070 <col:26, col:58> 'String' (CXXTemporary 0x5626719dd070)
|       |           `-CXXMemberCallExpr 0x5626719dd000 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5626719dcf70 <col:26> '<bound member function type>' ->find 0x5626719d04c8
|       |             | `-CXXThisExpr 0x5626719dcf60 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5626719dd038 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5626719dcfa0 <col:31> 'const char *' lvalue ParmVar 0x5626719b4540 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5626719dd050 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5626719dcfc0 <col:40> 'int' lvalue ParmVar 0x5626719b45c0 'flags' 'int'
|       |             `-DeclRefExpr 0x5626719dcfe0 <col:47> 'Args::Slot *' lvalue Var 0x5626719dce68 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5626719dd190 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5626719dd178 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5626719dd158 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5626719dd128 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5626716ed1a8
|       |       `-ImplicitCastExpr 0x5626719dd110 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5626719dd0f0 <col:20> 'String' lvalue Var 0x5626719dcef8 'str' 'String'
|       `-CallExpr 0x5626719dd2e8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x5626719dd1b8 <col:13> '<bound member function type>' ->postparse 0x5626719d06d8
|         | `-CXXThisExpr 0x5626719dd1a8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x5626719dd298 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x5626719dd208 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x5626719dd1e8 <col:23> 'P' lvalue ParmVar 0x5626719b4638 'parser' 'P'
|         | |-DeclRefExpr 0x5626719dd250 <col:36> 'String' lvalue Var 0x5626719dcef8 'str' 'String'
|         | `-UnaryOperator 0x5626719dd280 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x5626719dd270 <col:42> 'Args *' this
|         `-DeclRefExpr 0x5626719dd2c8 <col:49> 'Args::Slot *' lvalue Var 0x5626719dce68 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5626719b4b98 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5626719b4868 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5626719b4af8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5626719b4920 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719b49a0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5626719b4a18 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x5626719ddcc0 <col:71, line:792:5>
|     |-DeclStmt 0x5626719dd3e8 <line:784:9, col:26>
|     | `-VarDecl 0x5626719dd380 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5626719dd4b8 <line:785:9, col:29>
|     | `-VarDecl 0x5626719dd418 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5626719dd4a0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5626719dd480 <col:28> 'int' 1
|     |-WhileStmt 0x5626719ddb70 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x5626719ddb90 <line:786:16, col:61>
|     | | `-VarDecl 0x5626719dd4e0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5626719dd6c0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5626719dd690 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5626719dd678 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5626719dd658 <col:29, col:61> 'String' (CXXTemporary 0x5626719dd658)
|     | |           `-CXXMemberCallExpr 0x5626719dd5e8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5626719dd558 <col:29> '<bound member function type>' ->find 0x5626719d04c8
|     | |             | `-CXXThisExpr 0x5626719dd548 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5626719dd620 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5626719dd588 <col:34> 'const char *' lvalue ParmVar 0x5626719b4920 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5626719dd638 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5626719dd5a8 <col:43> 'int' lvalue ParmVar 0x5626719b49a0 'flags' 'int'
|     | |             `-DeclRefExpr 0x5626719dd5c8 <col:50> 'Args::Slot *' lvalue Var 0x5626719dd380 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5626719dd778 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5626719dd760 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5626719dd740 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5626719dd710 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5626716ed1a8
|     | |       `-ImplicitCastExpr 0x5626719dd6f8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5626719dd6d8 <col:23> 'String' lvalue Var 0x5626719dd4e0 'str' 'String'
|     | `-CompoundStmt 0x5626719ddb48 <col:64, line:790:9>
|     |   |-CallExpr 0x5626719dd8d0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x5626719dd7a0 <col:13> '<bound member function type>' ->postparse 0x5626719d06d8
|     |   | | `-CXXThisExpr 0x5626719dd790 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5626719dd880 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5626719dd7f0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5626719dd7d0 <col:23> 'P' lvalue ParmVar 0x5626719b4a18 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5626719dd838 <col:36> 'String' lvalue Var 0x5626719dd4e0 'str' 'String'
|     |   | | `-UnaryOperator 0x5626719dd868 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5626719dd858 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x5626719dd8b0 <col:49> 'Args::Slot *' lvalue Var 0x5626719dd380 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5626719dda68 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5626719dd900 <col:13> 'int' lvalue Var 0x5626719dd418 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5626719dda50 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5626719dda30 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5626719dd998 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5626719dd978 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5626719dd960 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5626719dd920 <col:28> 'int' lvalue Var 0x5626719dd418 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5626719dd940 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5626719dda18 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5626719dd9e8 <col:49> 'bool' lvalue ->_read_status 0x56267199c250
|     |   |         `-ImplicitCastExpr 0x5626719dd9c8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5626719dd9b8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5626719ddb18 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5626719dda88 <col:13> 'int' lvalue ParmVar 0x5626719b49a0 'flags' 'int'
|     |     `-UnaryOperator 0x5626719ddb00 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5626719ddae8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5626719ddac8 <col:23> 'const int' lvalue Var 0x5626719a37a8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5626719ddca0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5626719ddbd8 <col:9> 'bool' lvalue ->_read_status 0x56267199c250
|       | `-ImplicitCastExpr 0x5626719ddbb8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5626719ddba8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5626719ddc80 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5626719ddc60 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5626719ddc48 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5626719ddc08 <col:25> 'int' lvalue Var 0x5626719dd418 'read_status' 'int'
|           `-IntegerLiteral 0x5626719ddc28 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5626719b5078 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5626719b4c08 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5626719b4c88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5626719b4fd8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5626719b4d48 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719b4dc8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5626719b4e40 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x5626719b4ee8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x5626719e2b40 <col:84, line:805:5>
|     |-DeclStmt 0x5626719ddd68 <line:796:9, col:26>
|     | `-VarDecl 0x5626719ddd00 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5626719dde38 <line:797:9, col:29>
|     | `-VarDecl 0x5626719ddd98 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5626719dde20 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5626719dde00 <col:28> 'int' 1
|     |-DeclStmt 0x5626719de170 <line:798:9, col:71>
|     | `-VarDecl 0x5626719dde88 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5626719de140 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5626719de0b0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x5626719de0f8 <col:55> 'T' lvalue ParmVar 0x5626719b4ee8 'variable' 'T &'
|     |     `-UnaryOperator 0x5626719de128 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5626719de118 <col:66> 'Args *' this
|     |-WhileStmt 0x5626719e29f0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x5626719e2a10 <line:799:16, col:61>
|     | | `-VarDecl 0x5626719de198 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5626719de378 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5626719de348 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5626719de330 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5626719de310 <col:29, col:61> 'String' (CXXTemporary 0x5626719de310)
|     | |           `-CXXMemberCallExpr 0x5626719de2a0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5626719de210 <col:29> '<bound member function type>' ->find 0x5626719d04c8
|     | |             | `-CXXThisExpr 0x5626719de200 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5626719de2d8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5626719de240 <col:34> 'const char *' lvalue ParmVar 0x5626719b4d48 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5626719de2f0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5626719de260 <col:43> 'int' lvalue ParmVar 0x5626719b4dc8 'flags' 'int'
|     | |             `-DeclRefExpr 0x5626719de280 <col:50> 'Args::Slot *' lvalue Var 0x5626719ddd00 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5626719de430 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5626719de418 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5626719de3f8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5626719de3c8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5626716ed1a8
|     | |       `-ImplicitCastExpr 0x5626719de3b0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5626719de390 <col:23> 'String' lvalue Var 0x5626719de198 'str' 'String'
|     | `-CompoundStmt 0x5626719e29c8 <col:64, line:803:9>
|     |   |-CallExpr 0x5626719e2750 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x5626719de458 <col:13> '<bound member function type>' ->postparse 0x5626719d06d8
|     |   | | `-CXXThisExpr 0x5626719de448 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x5626719e2710 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x5626719de488 <col:23> 'T *' lvalue Var 0x5626719dde88 's' 'T *'
|     |   | | `-CallExpr 0x5626719e26d0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x5626719de670 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x5626719de6b8 <col:56> 'P' lvalue ParmVar 0x5626719b4e40 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x5626719de6d8 <col:64> 'String' lvalue Var 0x5626719de198 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x5626719de788 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x5626719de718 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5626718e12d8 0x5626718e0ef8 0x5626718e0b28 0x5626718e0748 0x5626718e0368 0x5626718dff98
|     |   | |   | `-DeclRefExpr 0x5626719de6f8 <col:70> 'T *' lvalue Var 0x5626719dde88 's' 'T *'
|     |   | |   `-UnaryOperator 0x5626719de7c8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x5626719de7b8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x5626719e2730 <col:81> 'Args::Slot *' lvalue Var 0x5626719ddd00 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5626719e28e8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5626719e2780 <col:13> 'int' lvalue Var 0x5626719ddd98 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5626719e28d0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5626719e28b0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5626719e2818 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5626719e27f8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5626719e27e0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5626719e27a0 <col:28> 'int' lvalue Var 0x5626719ddd98 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5626719e27c0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5626719e2898 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5626719e2868 <col:49> 'bool' lvalue ->_read_status 0x56267199c250
|     |   |         `-ImplicitCastExpr 0x5626719e2848 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5626719e2838 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5626719e2998 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5626719e2908 <col:13> 'int' lvalue ParmVar 0x5626719b4dc8 'flags' 'int'
|     |     `-UnaryOperator 0x5626719e2980 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5626719e2968 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5626719e2948 <col:23> 'const int' lvalue Var 0x5626719a37a8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5626719e2b20 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5626719e2a58 <col:9> 'bool' lvalue ->_read_status 0x56267199c250
|       | `-ImplicitCastExpr 0x5626719e2a38 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5626719e2a28 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5626719e2b00 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5626719e2ae0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5626719e2ac8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5626719e2a88 <col:25> 'int' lvalue Var 0x5626719ddd98 'read_status' 'int'
|           `-IntegerLiteral 0x5626719e2aa8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5626719b5658 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x5626719b50f0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5626719b5168 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5626719b55b8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5626719b5228 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5626719b52a8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x5626719b5320 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x5626719b5470 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x5626719e3948 <col:87, line:821:5>
|     |-DeclStmt 0x5626719e2bf0 <line:809:9, col:26>
|     | `-VarDecl 0x5626719e2b88 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5626719e2cc0 <line:810:9, col:29>
|     | `-VarDecl 0x5626719e2c20 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5626719e2ca8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5626719e2c88 <col:28> 'int' 1
|     |-DeclStmt 0x5626719e2f08 <line:811:9, col:38>
|     | `-VarDecl 0x5626719e2df0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x5626719e2ee0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5626719e2e68 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5626719e2ec0 <col:29> 'Vector<T>' lvalue ParmVar 0x5626719b5470 'variable' 'Vector<T> &'
|     |-WhileStmt 0x5626719e37f8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x5626719e3818 <line:812:16, col:61>
|     | | `-VarDecl 0x5626719e2f30 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5626719e3110 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5626719e30e0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5626719e30c8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5626719e30a8 <col:29, col:61> 'String' (CXXTemporary 0x5626719e30a8)
|     | |           `-CXXMemberCallExpr 0x5626719e3038 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5626719e2fa8 <col:29> '<bound member function type>' ->find 0x5626719d04c8
|     | |             | `-CXXThisExpr 0x5626719e2f98 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5626719e3070 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5626719e2fd8 <col:34> 'const char *' lvalue ParmVar 0x5626719b5228 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5626719e3088 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5626719e2ff8 <col:43> 'int' lvalue ParmVar 0x5626719b52a8 'flags' 'int'
|     | |             `-DeclRefExpr 0x5626719e3018 <col:50> 'Args::Slot *' lvalue Var 0x5626719e2b88 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5626719e31c8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5626719e31b0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5626719e3190 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5626719e3160 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5626716ed1a8
|     | |       `-ImplicitCastExpr 0x5626719e3148 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5626719e3128 <col:23> 'String' lvalue Var 0x5626719e2f30 'str' 'String'
|     | `-CompoundStmt 0x5626719e37c0 <col:64, line:819:9>
|     |   |-DeclStmt 0x5626719e3288 <line:813:13, col:23>
|     |   | `-VarDecl 0x5626719e31f0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x5626719e3268 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x5626719e3408 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x5626719e32b0 <col:13> '<bound member function type>' ->postparse 0x5626719d06d8
|     |   | | `-CXXThisExpr 0x5626719e32a0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5626719e33b0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5626719e3300 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5626719e32e0 <col:23> 'P' lvalue ParmVar 0x5626719b5320 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5626719e3348 <col:36> 'String' lvalue Var 0x5626719e2f30 'str' 'String'
|     |   | | |-DeclRefExpr 0x5626719e3368 <col:41> 'T' lvalue Var 0x5626719e31f0 'sx' 'T'
|     |   | | `-UnaryOperator 0x5626719e3398 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5626719e3388 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x5626719e33e8 <col:53> 'Args::Slot *' lvalue Var 0x5626719e2b88 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x5626719e3560 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x5626719e3498 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x5626719e3468 <col:17> 'bool' lvalue ->_read_status 0x56267199c250
|     |   | |   `-ImplicitCastExpr 0x5626719e3448 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x5626719e3438 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x5626719e3538 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x5626719e34d0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x5626719e34b0 <col:17> 'Vector<T> *' lvalue Var 0x5626719e2df0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x5626719e3518 <col:30> 'T' lvalue Var 0x5626719e31f0 'sx' 'T'
|     |   |-BinaryOperator 0x5626719e36e0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5626719e3578 <col:13> 'int' lvalue Var 0x5626719e2c20 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5626719e36c8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5626719e36a8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5626719e3610 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5626719e35f0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5626719e35d8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5626719e3598 <col:28> 'int' lvalue Var 0x5626719e2c20 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5626719e35b8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5626719e3690 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5626719e3660 <col:49> 'bool' lvalue ->_read_status 0x56267199c250
|     |   |         `-ImplicitCastExpr 0x5626719e3640 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5626719e3630 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5626719e3790 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5626719e3700 <col:13> 'int' lvalue ParmVar 0x5626719b52a8 'flags' 'int'
|     |     `-UnaryOperator 0x5626719e3778 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5626719e3760 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5626719e3740 <col:23> 'const int' lvalue Var 0x5626719a37a8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5626719e3928 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5626719e3860 <col:9> 'bool' lvalue ->_read_status 0x56267199c250
|       | `-ImplicitCastExpr 0x5626719e3840 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5626719e3830 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5626719e3908 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5626719e38e8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5626719e38d0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5626719e3890 <col:25> 'int' lvalue Var 0x5626719e2c20 'read_status' 'int'
|           `-IntegerLiteral 0x5626719e38b0 <col:40> 'int' 1
|-AccessSpecDecl 0x5626719b56d0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x5626719b56f8 prev 0x5626719a1aa8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x5626719b57f0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x5626719b58e0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x5626719e3980 <col:16, line:828:9>
| |-CXXDestructorDecl 0x5626719b59d0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x5626719e3990 <col:25, line:830:9>
| |-CXXMethodDecl 0x5626719b5ad0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x5626719b5b80 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x5626719b5c28 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5626719b5c28
| | `-ParmVarDecl 0x5626719b5d38 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x5626719b64f8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5626719b64f8
|   `-ParmVarDecl 0x5626719b6608 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x5626719b5da8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x5626719b5f08 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x5626719b6100 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x5626719b5fb0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x5626719b6028 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x5626719e3b70 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x5626719b63b8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x5626719e39e0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5626719e39a0 <col:20> 'void *' lvalue ParmVar 0x5626719b5fb0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x5626719b6420 '_slot' 'char *'
| | | `-CXXNewExpr 0x5626719e3a68 <col:32, col:45> 'char *' array Function 0x56267150fe18 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x5626719e3a50 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x5626719e3a20 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x5626719b6028 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x5626719b6480 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x5626719e3b30 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5626719e3af0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x5626719b6028 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x5626719e3bf0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x5626719b6200 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x5626719b59d0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x5626719e3c78 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x5626719e3c58 <line:840:13, col:22> 'void' array Function 0x562671510178 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x5626719e3c40 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x5626719e3c10 <col:22> 'char *' lvalue ->_slot 0x5626719b6420
| |         `-CXXThisExpr 0x5626719e3c00 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x5626719b6300 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x5626719b5ad0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x5626719e3e68 <col:22, line:844:9>
| |   `-CallExpr 0x5626719e3dd0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x5626719e3db8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5626719e3d98 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x56267161bbf8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x5626719e3e08 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x5626719e3ce8 <col:20> 'void *' lvalue ->_ptr 0x5626719b63b8
| |     |   `-CXXThisExpr 0x5626719e3cd8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x5626719e3e38 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x5626719e3e20 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x5626719e3d28 <col:26> 'char *' lvalue ->_slot 0x5626719b6420
| |     |     `-CXXThisExpr 0x5626719e3d18 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x5626719e3e50 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x5626719e3d68 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x5626719b6480
| |         `-CXXThisExpr 0x5626719e3d58 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x5626719b63b8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x5626719b6420 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x5626719b6480 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x5626719b6678 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5626719b6678
| | `-ParmVarDecl 0x5626719b6788 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x5626719b6828 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5626719b6828
|   `-ParmVarDecl 0x5626719b6938 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x5626719b6ad8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x5626719b69a8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x5626719b6a48 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x5626719b6d70 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x5626719b6f68 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x5626719b6e38 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x5626719c2c00 '_ptr' 'T *'
|   | | `-ParenListExpr 0x5626719e3ea0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x5626719e3e80 <col:20> 'T *' lvalue ParmVar 0x5626719b6e38 'ptr' 'T *'
|   | `-CompoundStmt 0x5626719e3ef0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x5626719b7038 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x5626719b5ad0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x5626719e40a0 <col:22, line:857:9>
|   |   `-CallExpr 0x5626719e4070 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x5626719e3f00 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x5626716d4328 0x56267167e658
|   |     |-CXXOperatorCallExpr 0x5626719e4000 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x5626719e3f90 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5626718e12d8 0x5626718e0ef8 0x5626718e0b28 0x5626718e0748 0x5626718e0368 0x5626718dff98
|   |     | `-MemberExpr 0x5626719e3f60 <col:29> 'T *' lvalue ->_ptr 0x5626719c2c00
|   |     |   `-CXXThisExpr 0x5626719e3f50 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x5626719e4040 <col:35> 'T' lvalue ->_slot 0x5626719c2c60
|   |       `-CXXThisExpr 0x5626719e4030 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x5626719c2c00 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x5626719c2c60 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x5626719c2cc8 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x5626719c2dd0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x5626719c2e20 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5626719c2db0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x5626719c2d90 <col:31> 'int' 48
|-FieldDecl 0x5626719c2e48 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x5626719c2ea8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x5626719c2f08 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x5626719c3040 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x5626719cfd70 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5626719cfdd0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x5626719cfe80 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x5626719d00a8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x5626719cffb0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x5626719d01f8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x5626719d0168 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x5626719d04c8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x5626719d02b8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x5626719d0338 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x5626719d03e0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x5626719d06d8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x5626719d0590 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x5626719d0608 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x5626719d07a8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x5626719d08f8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x5626719d0860 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x5626719d0c88 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x5626719d09b8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x5626719d0a38 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x5626719d0ae0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x5626719d0b98 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x5626719d0eb0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x5626719d0d60 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x5626719d0dd8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x5626719d11c8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x5626719d0f60 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x5626719d1128 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x5626719d1038 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | struct click_icmp_sequenced
         0 |   uint8_t icmp_type
         1 |   uint8_t icmp_code
         2 |   uint16_t icmp_cksum
         4 |   uint16_t icmp_identifier
         6 |   uint16_t icmp_sequence
           | [sizeof=8, dsize=8, align=2,
           |  nvsize=8, nvalign=2]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5626716dd050 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5626716dd168 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x5626716dd1f8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x5626716dd2c8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x5626716dd3b0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x5626716dd5c8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5626716dd470 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5626716dd778 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5626716dd680 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5626716dd8c0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5626716dd830 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5626716dda08 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5626716dd978 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5626716ddb50 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5626716ddac0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5626716ddc18 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x5626716ddd60 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x5626716ddcd0 <col:28> col:31 'int'
|-CXXMethodDecl 0x5626716dde28 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x5626716ddf70 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x5626716ddee0 <col:28> col:31 'int'
|-CXXMethodDecl 0x5626716de0e8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5626716de028 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5626716de230 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5626716de1a0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5626716de2f8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x5626716de4b8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5626716de3a8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5626716de420 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5626716de708 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5626716de578 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5626716de5f0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5626716de7b8 <col:86> "" ""
|-CXXMethodDecl 0x5626716dea28 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x5626716de898 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x5626716de910 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5626716debd8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5626716deae8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5626716ded88 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5626716dec90 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5626716df058 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5626716dee40 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5626716deeb8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5626716def30 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5626716df338 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5626716df120 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5626716df198 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5626716df210 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5626716df3f0 <col:115> "" ""
|-AccessSpecDecl 0x5626716df460 <line:84:3, col:10> col:3 private
|-FieldDecl 0x5626716df498 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5626716e09b0 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5626716e09b0
| `-ParmVarDecl 0x5626716e0ab8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x5626716e0b58 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5626716e0b58
| `-ParmVarDecl 0x5626716e0c68 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x562671716298 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x562671908090 <col:7>
|-CXXConstructorDecl 0x562671716370 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x562671716370
| `-ParmVarDecl 0x562671716488 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x5626717164f8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5626717164f8
| `-ParmVarDecl 0x562671716608 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x56267190aa90 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5626718f6c38 prev 0x5626718ebe40 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5626718f6d30 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5626718f6e20 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5626718f6f48 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5626718f70c8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5626718f7248 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5626718f73c8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x5626719081f8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x562671908a68 <col:11>
|-CXXDestructorDecl 0x5626719082d0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x562671908408 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x562671908408
| `-ParmVarDecl 0x562671908518 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x5626719085b8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5626719085b8
| `-ParmVarDecl 0x5626719086c8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x56267190b488 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x56267190b598 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x56267190b818 <col:11>
|   `-ReturnStmt 0x56267190b808 <col:11>
|     `-UnaryOperator 0x56267190b7f0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56267190b7e0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x56267190b608 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56267190b608
  `-ParmVarDecl 0x56267190b718 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5626718f7430 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5626718f7548 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5626718f75e8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5626718f7650 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5626718f76b8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5626718f7720 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5626718f7780 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5626718f7840 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5626718f78a0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5626718f7900 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x562671908108 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5626718f75e8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x562671908a78 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x562671908ad0 <col:12>
|-CXXConstructorDecl 0x562671908738 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x562671908738
| `-ParmVarDecl 0x562671908848 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x5626719088e8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5626719088e8
| `-ParmVarDecl 0x5626719089f8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x56267190ab70 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5626718e5550 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5626718e5668 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5626718e56f8 <col:16, col:22> col:16 public
|-EnumDecl 0x5626718e5720 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5626718e5820 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5626718e5900 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5626718e5800 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5626718e57e0 <col:21> 'int' 28
| `-EnumConstantDecl 0x5626718e58b0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5626718e5918 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5626718e5890 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5626718e5870 <col:22> 'int' 64
|-CXXMethodDecl 0x5626718e5c58 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5626718e5940 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5626718e59c0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5626718e5a38 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5626718e5ab0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5626718e5d18 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5626718e5f18 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5626718e5d90 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5626718e5e08 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5626718e5fc8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5626718e6128 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5626718e6038 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5626718e61d0 <col:72> warn_unused_result ""
|-TypedefDecl 0x5626718e6530 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5626718e64c0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5626718e6460 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5626718e6420 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x5626713bc2d0 'void'
|       |-PointerType 0x5626716658f0 'unsigned char *'
|       | `-BuiltinType 0x5626713bc3d0 'unsigned char'
|       |-TypedefType 0x562671461e60 'size_t' sugar
|       | |-Typedef 0x56267142cb20 'size_t'
|       | `-BuiltinType 0x5626713bc430 'unsigned long'
|       `-PointerType 0x5626713bcad0 'void *'
|         `-BuiltinType 0x5626713bc2d0 'void'
|-CXXMethodDecl 0x5626718e69a8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5626718e65a0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5626718e6618 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5626718e66b0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5626718e6730 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5626719010a0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x562671901088 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x562671901050 <col:58> 'int' 0
| |-ParmVarDecl 0x5626718e67b0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5626719010c8 <col:76> 'int' 0
| |-ParmVarDecl 0x5626718e6830 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x5626719010e8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5626718e6a78 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5626718e6af8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5626718e6bb8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5626718e6c58 <col:20>
| `-OptimizeNoneAttr 0x5626718e6cb0 <col:30>
|-CXXMethodDecl 0x5626718e6d28 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5626718e6dc8 <col:20>
| `-OptimizeNoneAttr 0x5626718e6e20 <col:30>
|-CXXMethodDecl 0x5626718e6e98 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5626718e6f38 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5626718e6fe8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5626718e7088 <col:20>
| |-OptimizeNoneAttr 0x5626718e70e0 <col:30>
| `-WarnUnusedResultAttr 0x5626718e7108 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5626718e7160 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5626718e7200 <col:20>
| `-OptimizeNoneAttr 0x5626718e7258 <col:30>
|-CXXMethodDecl 0x5626718e72a8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5626718e7348 <col:20>
| `-OptimizeNoneAttr 0x5626718e73a0 <col:30>
|-CXXMethodDecl 0x5626718e73e8 <line:81:5, col:58> col:49 used length 'uint32_t () const'
| |-NoInlineAttr 0x5626718e7488 <col:20>
| `-OptimizeNoneAttr 0x5626718e74e0 <col:30>
|-CXXMethodDecl 0x5626718e7528 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5626718e75e8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5626718e76b0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5626718e7778 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5626718e7838 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5626718e7958 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5626719011b0 <col:54, line:99:5>
|   `-ReturnStmt 0x5626719011a0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x562671901188 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x562671901158 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5626718f7c38
|         `-CXXThisExpr 0x562671901148 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5626718e7af8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5626718e7a08 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x562671901260 <col:67, line:103:5>
|   `-BinaryOperator 0x562671901240 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5626719011d8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5626718f7c38
|     | `-CXXThisExpr 0x5626719011c8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x562671901228 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x562671901208 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5626718e7a08 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5626718e7bf0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5626719012e0 <col:33, line:107:5>
|   `-ReturnStmt 0x5626719012d0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5626719012b8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x562671901288 <col:16> 'void *' lvalue ->_destructor_argument 0x5626718f7ca0
|         `-CXXThisExpr 0x562671901278 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5626718e7cb0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x562671901910 <col:25, line:113:5>
|   |-ParenExpr 0x562671901658 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x562671901628 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x562671901398 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x562671901370 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x562671901338 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x562671901308 <col:24> '<bound member function type>' ->shared 0x5626718e6d28
|   |   |       `-ImplicitCastExpr 0x562671901358 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x5626719012f8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5626719013f8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5626719013d8 <col:42> 'int' 0
|   |   `-CallExpr 0x562671901588 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x562671901570 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562671901550 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562671458c70 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5626719015c8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562671901468 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5626719015e0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562671901490 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5626719015f8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5626719014c8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x562671901610 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562671901538 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562671901520 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5626719014e8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x562671901858 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x562671901688 <col:2> 'unsigned char *' lvalue ->_head 0x5626718f7a40
|   | | `-CXXThisExpr 0x562671901678 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x562671901840 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x562671901820 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x5626719016c8 <col:10> 'unsigned char *' lvalue ->_data 0x5626718f7aa8
|   |     | `-CXXThisExpr 0x5626719016b8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x562671901808 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x5626719017e8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x562671901708 <col:18> 'unsigned char *' lvalue ->_tail 0x5626718f7b10
|   |         | `-CXXThisExpr 0x5626719016f8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x5626719017d0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x5626719017b0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x562671901748 <col:26> 'unsigned char *' lvalue ->_end 0x5626718f7b78
|   |             | `-CXXThisExpr 0x562671901738 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x562671901798 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x562671901778 <col:33> 'int' 0
|   `-BinaryOperator 0x5626719018f0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x562671901888 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5626718f7c38
|     | `-CXXThisExpr 0x562671901878 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5626719018d8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x5626719018b8 <col:16> 'int' 0
|-CXXMethodDecl 0x5626718e7df0 <line:141:5, col:109> col:56 used push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5626718e7d60 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5626718e7e98 <col:20>
| |-OptimizeNoneAttr 0x5626718e7ef0 <col:30>
| `-WarnUnusedResultAttr 0x5626718e7f18 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5626718e7fe8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5626718e7f58 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5626718e8090 <col:20>
| |-OptimizeNoneAttr 0x5626718e80e8 <col:30>
| `-WarnUnusedResultAttr 0x5626718e8110 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5626718e8248 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5626718e8150 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5626718e82f0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5626718e83f0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5626718e8360 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5626718e8498 <col:20>
| `-OptimizeNoneAttr 0x5626718e84f0 <col:30>
|-CXXMethodDecl 0x5626718e85b8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5626718e8528 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5626718e8660 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5626718e8760 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5626718e86d0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5626718e8808 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5626718e8908 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x5626718e8878 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5626718e89b0 <col:20>
| `-OptimizeNoneAttr 0x5626718e8a08 <col:30>
|-CXXMethodDecl 0x5626718e8b98 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5626718e8a48 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5626718e8ac0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x562671901108 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5626718e8c48 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5626718e8e48 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5626718e8cc0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5626718e8d38 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5626718e9058 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5626718e8f08 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5626718e8f80 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5626718e9268 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5626718e9118 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5626718e9198 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x562671901118 <col:39> 'int' 0
|-CXXMethodDecl 0x5626718e9338 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5626718e9400 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5626718e94c8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5626718e9588 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5626718e9650 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5626718e9798 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5626718e9708 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5626718e9968 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5626718e9858 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5626718e98d0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5626718e9a38 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5626718e9af8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x5626718e9b98 <col:20>
| `-OptimizeNoneAttr 0x5626718e9bf0 <col:30>
|-CXXMethodDecl 0x5626718e9c40 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5626718e9ce0 <col:20>
| `-OptimizeNoneAttr 0x5626718e9d38 <col:30>
|-CXXMethodDecl 0x5626718e9d88 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5626718e9e48 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5626718e9f10 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x5626718e9fb0 <col:20>
| `-OptimizeNoneAttr 0x5626718ea008 <col:30>
|-CXXMethodDecl 0x5626718ea158 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5626718ea048 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5626718ea0c0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5626718ea2a8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5626718ea218 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5626718ea380 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5626718ea440 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x5626718ea4e0 <col:20>
| `-OptimizeNoneAttr 0x5626718ea538 <col:30>
|-CXXMethodDecl 0x5626718ea588 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5626718ea628 <col:20>
| `-OptimizeNoneAttr 0x5626718ea680 <col:30>
|-CXXMethodDecl 0x5626718ea6d0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5626718ea798 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x5626718ea838 <col:20>
| `-OptimizeNoneAttr 0x5626718ea890 <col:30>
|-CXXMethodDecl 0x5626718ea8d8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5626718ea9f8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5626718eab68 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5626718eaaa8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5626718eac58 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5626718eacf8 <col:20>
| `-OptimizeNoneAttr 0x5626718ead50 <col:30>
|-CXXMethodDecl 0x5626718eada0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5626718eae60 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5626718eb098 <line:310:5, col:92> col:45 used set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5626718eaf10 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5626718eaf88 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5626718eb148 <col:20>
| `-OptimizeNoneAttr 0x5626718eb1a0 <col:30>
|-CXXMethodDecl 0x5626718eb248 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5626718eb2e8 <col:20>
| `-OptimizeNoneAttr 0x5626718eb340 <col:30>
|-CXXMethodDecl 0x5626718eb390 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5626718eb430 <col:20>
| `-OptimizeNoneAttr 0x5626718eb488 <col:30>
|-CXXMethodDecl 0x5626718eb4d0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5626718eb570 <col:20>
| `-OptimizeNoneAttr 0x5626718eb5c8 <col:30>
|-CXXMethodDecl 0x5626718eb6c8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5626718eb600 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5626718eb770 <col:20>
| `-OptimizeNoneAttr 0x5626718eb7c8 <col:30>
|-CXXMethodDecl 0x5626718eb988 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5626718eb800 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5626718eb878 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5626718eba38 <col:20>
| `-OptimizeNoneAttr 0x5626718eba90 <col:30>
|-CXXMethodDecl 0x5626718ebb38 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5626718ebc58 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5626718ebd78 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5626718ebe18 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5626718ebe40 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5626718ebf68 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5626718ec008 <col:20>
| `-OptimizeNoneAttr 0x5626718ec060 <col:30>
|-CXXMethodDecl 0x5626718ec108 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5626718ec1a8 <col:20>
| `-OptimizeNoneAttr 0x5626718ec200 <col:30>
|-AccessSpecDecl 0x5626718ec228 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5626718ec250 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5626718ec350 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5626718ec3a0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5626718ec330 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5626718ec310 <col:14> 'int' 48
|-CXXMethodDecl 0x5626718ec408 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5626718ec4a8 <col:20>
| `-OptimizeNoneAttr 0x5626718ec500 <col:30>
|-CXXMethodDecl 0x5626718ec578 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5626718ec618 <col:20>
| `-OptimizeNoneAttr 0x5626718ec670 <col:30>
|-CXXMethodDecl 0x5626718ec738 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5626718ec6a8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5626718ec8d8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5626718eca78 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5626718ec988 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5626718ecb20 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5626718ecc20 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5626718ecfd0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5626718ecc00 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5626718ecbe0 <col:9> 'int' 0
| |-EnumConstantDecl 0x5626718eccb0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5626718ecfe8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5626718ecc90 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5626718ecc70 <col:14> 'int' 1
| |-EnumConstantDecl 0x5626718ecd40 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5626718ed000 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5626718ecd20 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5626718ecd00 <col:14> 'int' 2
| |-EnumConstantDecl 0x5626718ecdd0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5626718ed018 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5626718ecdb0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5626718ecd90 <col:14> 'int' 3
| |-EnumConstantDecl 0x5626718ece60 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5626718ed030 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5626718ece40 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5626718ece20 <col:13> 'int' 4
| |-EnumConstantDecl 0x5626718ecef0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5626718ed048 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5626718eced0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5626718eceb0 <col:13> 'int' 5
| `-EnumConstantDecl 0x5626718ecf80 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5626718ed060 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5626718ecf60 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5626718ecf40 <col:14> 'int' 6
|-CXXMethodDecl 0x5626718ed0c8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5626718ed168 <col:20>
| `-OptimizeNoneAttr 0x5626718ed1c0 <col:30>
|-CXXMethodDecl 0x5626718ed2b8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5626718ed1f8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5626718ed360 <col:20>
| `-OptimizeNoneAttr 0x5626718ed3b8 <col:30>
|-CXXMethodDecl 0x5626718ed428 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5626718ed550 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5626718ed6c8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5626718ed600 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5626718ed790 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5626718ed858 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5626718ed998 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5626718ed908 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5626718eda40 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5626718edb40 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5626718edd40 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5626718edb20 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5626718edb00 <col:23> 'int' 0
| |-EnumConstantDecl 0x5626718edbd0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5626718edd58 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5626718edbb0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5626718edb90 <col:45> 'int' 4
| |-EnumConstantDecl 0x5626718edc60 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5626718edd70 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5626718edc40 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5626718edc20 <col:24> 'int' 0
| `-EnumConstantDecl 0x5626718edcf0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5626718edd88 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5626718edcd0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5626718edcb0 <col:47> 'int' 16
|-CXXMethodDecl 0x5626718edde8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5626718edf58 <line:436:5, col:75> col:45 used set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5626718ede98 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5626718ee000 <col:20>
| `-OptimizeNoneAttr 0x5626718ee058 <col:30>
|-CXXMethodDecl 0x5626718ee0a8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x562671901a30 <col:18, col:36>
|   `-ReturnStmt 0x562671901a20 <col:20, col:33>
|     `-ImplicitCastExpr 0x562671901a08 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x5626719019e8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x5626719019b8 <col:27> '<bound member function type>' ->xanno 0x5626718ec108
|           `-CXXThisExpr 0x5626719019a8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5626718ee1a0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x562671901b40 <col:30, col:48>
|   `-ReturnStmt 0x562671901b30 <col:32, col:45>
|     `-ImplicitCastExpr 0x562671901b18 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x562671901af8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x562671901ac8 <col:39> '<bound member function type>' ->xanno 0x5626718ebf68
|           `-CXXThisExpr 0x562671901ab8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5626718ee288 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x562671901cd8 <col:24, col:50>
|   `-ReturnStmt 0x562671901cc8 <col:26, col:47>
|     `-UnaryOperator 0x562671901cb0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x562671901c90 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x562671901c78 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x562671901c28 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5626718f6f48
|         |   `-CXXMemberCallExpr 0x562671901c08 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x562671901bd8 <col:34> '<bound member function type>' ->xanno 0x5626718ec108
|         |       `-CXXThisExpr 0x562671901bc8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x562671901c58 <col:46> 'int' 0
|-CXXMethodDecl 0x5626718ee390 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x562671901ea8 <col:36, col:62>
|   `-ReturnStmt 0x562671901e98 <col:38, col:59>
|     `-UnaryOperator 0x562671901e80 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x562671901e60 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x562671901e48 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x562671901dc0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5626718f6f48
|         |   `-CXXMemberCallExpr 0x562671901da0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x562671901d70 <col:46> '<bound member function type>' ->xanno 0x5626718ebf68
|         |       `-CXXThisExpr 0x562671901d60 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x562671901df0 <col:58> 'int' 0
|-CXXMethodDecl 0x5626718ee4a8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x562671902040 <col:26, col:53>
|   `-ReturnStmt 0x562671902030 <col:28, col:50>
|     `-UnaryOperator 0x562671902018 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x562671901ff8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x562671901fe0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x562671901f90 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5626718f7248
|         |   `-CXXMemberCallExpr 0x562671901f70 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x562671901f40 <col:36> '<bound member function type>' ->xanno 0x5626718ec108
|         |       `-CXXThisExpr 0x562671901f30 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x562671901fc0 <col:49> 'int' 0
|-CXXMethodDecl 0x5626718ee5c8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x562671902218 <col:38, col:65>
|   `-ReturnStmt 0x562671902208 <col:40, col:62>
|     `-UnaryOperator 0x5626719021f0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5626719021d0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5626719021b8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x562671902128 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5626718f7248
|         |   `-CXXMemberCallExpr 0x562671902108 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5626719020d8 <col:48> '<bound member function type>' ->xanno 0x5626718ebf68
|         |       `-CXXThisExpr 0x5626719020c8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x562671902158 <col:61> 'int' 0
|-CXXMethodDecl 0x5626718ee778 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5626718ee680 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x5626719028e8 <col:34, line:463:5>
|   |-ParenExpr 0x562671902730 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x562671902700 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x562671902368 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562671902338 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562671902288 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562671902270 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562671902230 <col:23> 'int' lvalue ParmVar 0x5626718ee680 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562671902250 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562671902318 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5626719022e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5626719022a8 <col:33> 'int' lvalue ParmVar 0x5626718ee680 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x562671902300 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5626719022c8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5626718ec350 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5626719023c8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5626719023a8 <col:56> 'int' 0
|   |   `-CallExpr 0x562671902660 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x562671902648 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562671902628 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562671458c70 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5626719026a0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5626719024b8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5626719026b8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5626719024e8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5626719026d0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562671902520 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x5626719026e8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562671902610 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5626719025f8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5626719025b8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x5626719028d8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x5626719028c0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x5626719028a0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x562671902870 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x562671902820 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5626718f6f48
|         |   `-CXXMemberCallExpr 0x562671902800 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5626719027d0 <col:9> '<bound member function type>' ->xanno 0x5626718ebf68
|         |       `-CXXThisExpr 0x5626719027c0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x562671902888 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x562671902850 <col:21> 'int' lvalue ParmVar 0x5626718ee680 'i' 'int'
|-CXXMethodDecl 0x5626718ee9c8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5626718ee838 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5626718ee8b0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x562671902f78 <col:40, line:472:5>
|   |-ParenExpr 0x562671902d90 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x562671902d60 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x562671902a40 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562671902a10 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562671902960 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562671902948 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562671902908 <col:23> 'int' lvalue ParmVar 0x5626718ee838 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562671902928 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5626719029f0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5626719029c0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562671902980 <col:33> 'int' lvalue ParmVar 0x5626718ee838 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5626719029d8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5626719029a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5626718ec350 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x562671902aa0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562671902a80 <col:56> 'int' 0
|   |   `-CallExpr 0x562671902cc0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x562671902ca8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562671902c88 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562671458c70 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562671902d00 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562671902b10 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x562671902d18 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562671902b40 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562671902d30 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562671902b78 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x562671902d48 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562671902c70 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562671902c58 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562671902c18 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x562671902f58 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x562671902f00 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x562671902ed0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x562671902e80 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5626718f6f48
|     | |   `-CXXMemberCallExpr 0x562671902e60 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x562671902e30 <col:2> '<bound member function type>' ->xanno 0x5626718ec108
|     | |       `-CXXThisExpr 0x562671902e20 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x562671902ee8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x562671902eb0 <col:14> 'int' lvalue ParmVar 0x5626718ee838 'i' 'int'
|     `-ImplicitCastExpr 0x562671902f40 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x562671902f20 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5626718ee8b0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5626718eeb88 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5626718eea90 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5626719036f8 <col:36, line:485:5>
|   |-ParenExpr 0x562671903460 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x562671903430 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x562671903110 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5626719030e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562671902ff0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562671902fd8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562671902f98 <col:23> 'int' lvalue ParmVar 0x5626718eea90 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562671902fb8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5626719030c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5626719030a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562671903010 <col:33> 'int' lvalue ParmVar 0x5626718eea90 'i' 'int'
|   |   |     `-BinaryOperator 0x562671903088 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562671903070 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562671903030 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5626718ec350 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x562671903050 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x562671903170 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562671903150 <col:60> 'int' 0
|   |   `-CallExpr 0x562671903390 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x562671903378 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562671903358 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562671458c70 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5626719033d0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5626719031e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5626719033e8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562671903218 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562671903400 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562671903250 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x562671903418 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562671903340 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562671903328 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5626719032e8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x5626719036e8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x5626719036d0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x5626719036b8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x562671903688 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x562671903628 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5626719035f8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x562671903570 <col:61, col:70> 'char const[48]' lvalue ->c 0x5626718f6e20
|             |   `-CXXMemberCallExpr 0x562671903550 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x562671903520 <col:61> '<bound member function type>' ->xanno 0x5626718ebf68
|             |       `-CXXThisExpr 0x562671903510 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x562671903610 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5626719035a0 <col:74> 'int' lvalue ParmVar 0x5626718eea90 'i' 'int'
|-CXXMethodDecl 0x5626718eedd8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5626718eec48 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5626718eecc0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x562671903e48 <col:42, line:500:5>
|   |-ParenExpr 0x562671903be0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x562671903bb0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x562671903890 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562671903860 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562671903770 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562671903758 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562671903718 <col:23> 'int' lvalue ParmVar 0x5626718eec48 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562671903738 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562671903840 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562671903828 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562671903790 <col:33> 'int' lvalue ParmVar 0x5626718eec48 'i' 'int'
|   |   |     `-BinaryOperator 0x562671903808 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5626719037f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5626719037b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5626718ec350 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5626719037d0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5626719038f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5626719038d0 <col:60> 'int' 0
|   |   `-CallExpr 0x562671903b10 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x562671903af8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562671903ad8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562671458c70 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562671903b50 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562671903960 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x562671903b68 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562671903998 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562671903b80 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5626719039d0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x562671903b98 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562671903ac0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562671903aa8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562671903a68 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x562671903e28 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x562671903dd8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x562671903da8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x562671903d50 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x562671903d20 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x562671903cd0 <col:48, col:57> 'char [48]' lvalue ->c 0x5626718f6e20
|     |     |   `-CXXMemberCallExpr 0x562671903cb0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x562671903c80 <col:48> '<bound member function type>' ->xanno 0x5626718ec108
|     |     |       `-CXXThisExpr 0x562671903c70 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x562671903d38 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x562671903d00 <col:61> 'int' lvalue ParmVar 0x5626718eec48 'i' 'int'
|     `-ImplicitCastExpr 0x562671903e10 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x562671903df0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5626718eecc0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5626718eef98 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5626718eeea0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5626719045a8 <col:35, line:513:5>
|   |-ParenExpr 0x5626719042b8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x562671904288 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x562671903fe0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562671903fb0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562671903ec0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562671903ea8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562671903e68 <col:23> 'int' lvalue ParmVar 0x5626718eeea0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562671903e88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562671903f90 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562671903f78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562671903ee0 <col:33> 'int' lvalue ParmVar 0x5626718eeea0 'i' 'int'
|   |   |     `-BinaryOperator 0x562671903f58 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562671903f40 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562671903f00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5626718ec350 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x562671903f20 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x562671904040 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562671904020 <col:60> 'int' 0
|   |   `-CallExpr 0x5626719041e8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5626719041d0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5626719041b0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562671458c70 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562671904228 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5626719040b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x562671904240 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5626719040e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562671904258 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562671904120 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x562671904270 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562671904198 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562671904180 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562671904140 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x562671904598 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x562671904580 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x562671904568 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x562671904538 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x5626719044b0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x562671904480 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x562671904430 <col:60, col:69> 'char const[48]' lvalue ->c 0x5626718f6e20
|             |   `-CXXMemberCallExpr 0x562671904410 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5626719043e0 <col:60> '<bound member function type>' ->xanno 0x5626718ebf68
|             |       `-CXXThisExpr 0x5626719043d0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x562671904498 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x562671904460 <col:73> 'int' lvalue ParmVar 0x5626718eeea0 'i' 'int'
|-CXXMethodDecl 0x5626718ef1e8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5626718ef058 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5626718ef0d0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x562671904cc8 <col:41, line:528:5>
|   |-ParenExpr 0x562671904a50 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x562671904a20 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x562671904740 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562671904710 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562671904620 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562671904608 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5626719045c8 <col:23> 'int' lvalue ParmVar 0x5626718ef058 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5626719045e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5626719046f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5626719046d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562671904640 <col:33> 'int' lvalue ParmVar 0x5626718ef058 'i' 'int'
|   |   |     `-BinaryOperator 0x5626719046b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5626719046a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562671904660 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5626718ec350 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x562671904680 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5626719047a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562671904780 <col:60> 'int' 0
|   |   `-CallExpr 0x562671904980 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x562671904968 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562671904948 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562671458c70 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5626719049c0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562671904810 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5626719049d8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562671904848 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5626719049f0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562671904880 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x562671904a08 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562671904930 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562671904918 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5626719048d8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x562671904ca8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x562671904c58 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x562671904c28 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x562671904bd0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x562671904b90 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x562671904b40 <col:47, col:56> 'char [48]' lvalue ->c 0x5626718f6e20
|     |     |   `-CXXMemberCallExpr 0x562671904b20 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x562671904af0 <col:47> '<bound member function type>' ->xanno 0x5626718ec108
|     |     |       `-CXXThisExpr 0x562671904ae0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x562671904ba8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x562671904b70 <col:60> 'int' lvalue ParmVar 0x5626718ef058 'i' 'int'
|     `-ImplicitCastExpr 0x562671904c90 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x562671904c70 <col:65> 'int16_t':'short' lvalue ParmVar 0x5626718ef0d0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5626718ef3a8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5626718ef2b0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x562671905398 <col:36, line:541:5>
|   |-ParenExpr 0x562671905138 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x562671905108 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x562671904e60 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562671904e30 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562671904d40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562671904d28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562671904ce8 <col:23> 'int' lvalue ParmVar 0x5626718ef2b0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562671904d08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562671904e10 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562671904df8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562671904d60 <col:33> 'int' lvalue ParmVar 0x5626718ef2b0 'i' 'int'
|   |   |     `-BinaryOperator 0x562671904dd8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562671904dc0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562671904d80 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5626718ec350 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x562671904da0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x562671904ec0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562671904ea0 <col:60> 'int' 0
|   |   `-CallExpr 0x562671905068 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x562671905050 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562671905030 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562671458c70 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5626719050a8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562671904f30 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5626719050c0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562671904f68 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5626719050d8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562671904fa0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x5626719050f0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562671905018 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562671905000 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562671904fc0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x562671905388 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x562671905370 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x562671905358 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x562671905328 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x5626719052d0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5626719052a0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x562671905250 <col:61, col:70> 'char const[48]' lvalue ->c 0x5626718f6e20
|             |   `-CXXMemberCallExpr 0x562671905230 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x562671905200 <col:61> '<bound member function type>' ->xanno 0x5626718ebf68
|             |       `-CXXThisExpr 0x5626719051f0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5626719052b8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x562671905280 <col:74> 'int' lvalue ParmVar 0x5626718ef2b0 'i' 'int'
|-CXXMethodDecl 0x5626718ef578 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5626718ef468 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5626718ef4e0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5626718ef628 <col:20>
| `-OptimizeNoneAttr 0x5626718ef680 <col:30>
|-CXXMethodDecl 0x5626718ef7b8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5626718ef6c0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x562671905a68 <col:35, line:562:5>
|   |-ParenExpr 0x562671905808 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x5626719057d8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x562671905530 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562671905500 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562671905410 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5626719053f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5626719053b8 <col:23> 'int' lvalue ParmVar 0x5626718ef6c0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5626719053d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5626719054e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5626719054c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562671905430 <col:33> 'int' lvalue ParmVar 0x5626718ef6c0 'i' 'int'
|   |   |     `-BinaryOperator 0x5626719054a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562671905490 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562671905450 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5626718ec350 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x562671905470 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x562671905590 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562671905570 <col:60> 'int' 0
|   |   `-CallExpr 0x562671905738 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x562671905720 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562671905700 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562671458c70 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562671905778 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562671905600 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x562671905790 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562671905638 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5626719057a8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562671905670 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x5626719057c0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5626719056e8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5626719056d0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562671905690 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x562671905a58 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x562671905a40 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x562671905a28 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5626719059f8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x5626719059a0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x562671905970 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x562671905920 <col:60, col:69> 'char const[48]' lvalue ->c 0x5626718f6e20
|             |   `-CXXMemberCallExpr 0x562671905900 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5626719058d0 <col:60> '<bound member function type>' ->xanno 0x5626718ebf68
|             |       `-CXXThisExpr 0x5626719058c0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x562671905988 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x562671905950 <col:73> 'int' lvalue ParmVar 0x5626718ef6c0 'i' 'int'
|-CXXMethodDecl 0x5626718ef9c8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5626718ef878 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5626718ef8f0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x562671906148 <col:41, line:577:5>
|   |-ParenExpr 0x562671905ed8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x562671905ea8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x562671905c00 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562671905bd0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562671905ae0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562671905ac8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562671905a88 <col:23> 'int' lvalue ParmVar 0x5626718ef878 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562671905aa8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562671905bb0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562671905b98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562671905b00 <col:33> 'int' lvalue ParmVar 0x5626718ef878 'i' 'int'
|   |   |     `-BinaryOperator 0x562671905b78 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562671905b60 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562671905b20 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5626718ec350 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x562671905b40 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x562671905c60 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562671905c40 <col:60> 'int' 0
|   |   `-CallExpr 0x562671905e08 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x562671905df0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562671905dd0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562671458c70 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562671905e48 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562671905cd0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x562671905e60 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562671905d08 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562671905e78 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562671905d40 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x562671905e90 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562671905db8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562671905da0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562671905d60 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x562671906128 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x5626719060d8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5626719060a8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x562671906048 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x562671906018 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x562671905fc8 <col:47, col:56> 'char [48]' lvalue ->c 0x5626718f6e20
|     |     |   `-CXXMemberCallExpr 0x562671905fa8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x562671905f78 <col:47> '<bound member function type>' ->xanno 0x5626718ec108
|     |     |       `-CXXThisExpr 0x562671905f68 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x562671906030 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x562671905ff8 <col:60> 'int' lvalue ParmVar 0x5626718ef878 'i' 'int'
|     `-ImplicitCastExpr 0x562671906110 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5626719060f0 <col:65> 'int32_t':'int' lvalue ParmVar 0x5626718ef8f0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5626718efb88 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5626718efa90 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x562671906878 <col:36, line:591:5>
|   |-ParenExpr 0x5626719065b8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x562671906588 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5626719062e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5626719062b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5626719061c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5626719061a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562671906168 <col:23> 'int' lvalue ParmVar 0x5626718efa90 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562671906188 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562671906290 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562671906278 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5626719061e0 <col:33> 'int' lvalue ParmVar 0x5626718efa90 'i' 'int'
|   |   |     `-BinaryOperator 0x562671906258 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562671906240 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562671906200 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5626718ec350 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x562671906220 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x562671906340 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562671906320 <col:60> 'int' 0
|   |   `-CallExpr 0x5626719064e8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5626719064d0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5626719064b0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562671458c70 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562671906528 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5626719063b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x562671906540 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5626719063e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562671906558 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562671906420 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x562671906570 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562671906498 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562671906480 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562671906440 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x562671906868 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x562671906850 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x562671906838 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x562671906808 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x562671906780 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x562671906750 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x562671906700 <col:61, col:70> 'char const[48]' lvalue ->c 0x5626718f6e20
|             |   `-CXXMemberCallExpr 0x5626719066e0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5626719066b0 <col:61> '<bound member function type>' ->xanno 0x5626718ebf68
|             |       `-CXXThisExpr 0x5626719066a0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x562671906768 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x562671906730 <col:74> 'int' lvalue ParmVar 0x5626718efa90 'i' 'int'
|-CXXMethodDecl 0x5626718efdd8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5626718efc48 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5626718efcc0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x562671906f58 <col:42, line:606:5>
|   |-ParenExpr 0x562671906ce8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x562671906cb8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x562671906a10 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5626719069e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5626719068f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5626719068d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562671906898 <col:23> 'int' lvalue ParmVar 0x5626718efc48 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5626719068b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5626719069c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5626719069a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562671906910 <col:33> 'int' lvalue ParmVar 0x5626718efc48 'i' 'int'
|   |   |     `-BinaryOperator 0x562671906988 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562671906970 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562671906930 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5626718ec350 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x562671906950 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x562671906a70 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562671906a50 <col:60> 'int' 0
|   |   `-CallExpr 0x562671906c18 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x562671906c00 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562671906be0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562671458c70 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562671906c58 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562671906ae0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x562671906c70 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562671906b18 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562671906c88 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562671906b50 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x562671906ca0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562671906bc8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562671906bb0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562671906b70 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x562671906f38 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x562671906ee8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x562671906eb8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x562671906e58 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x562671906e28 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x562671906dd8 <col:48, col:57> 'char [48]' lvalue ->c 0x5626718f6e20
|     |     |   `-CXXMemberCallExpr 0x562671906db8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x562671906d88 <col:48> '<bound member function type>' ->xanno 0x5626718ec108
|     |     |       `-CXXThisExpr 0x562671906d78 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x562671906e40 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x562671906e08 <col:61> 'int' lvalue ParmVar 0x5626718efc48 'i' 'int'
|     `-ImplicitCastExpr 0x562671906f20 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x562671906f00 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5626718efcc0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5626718eff70 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5626718efea0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x5626719077c8 <col:33, line:620:5>
|   |-ParenExpr 0x562671907540 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x562671907510 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x562671907160 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562671907130 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562671906fd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562671906fb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562671906f78 <col:23> 'int' lvalue ParmVar 0x5626718efea0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562671906f98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562671907110 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5626719070f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562671906ff0 <col:33> 'int' lvalue ParmVar 0x5626718efea0 'i' 'int'
|   |   |     `-BinaryOperator 0x5626719070d8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5626719070c0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562671907010 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5626718ec350 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x562671907098 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x562671907080 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x562671907048 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5626719071c0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5626719071a0 <col:79> 'int' 0
|   |   `-CallExpr 0x562671907470 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x562671907458 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562671907438 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562671458c70 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5626719074b0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5626719072a8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5626719074c8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5626719072f0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5626719074e0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562671907328 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x5626719074f8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562671907420 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562671907408 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5626719073c8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x5626719077b8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x5626719077a0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x562671907788 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x562671907758 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x5626719076d0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x5626719076a0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x562671907650 <col:67, col:76> 'char const[48]' lvalue ->c 0x5626718f6e20
|             |   `-CXXMemberCallExpr 0x562671907630 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x562671907600 <col:67> '<bound member function type>' ->xanno 0x5626718ebf68
|             |       `-CXXThisExpr 0x5626719075f0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5626719076b8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x562671907680 <col:80> 'int' lvalue ParmVar 0x5626718efea0 'i' 'int'
|-CXXMethodDecl 0x5626718f0188 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5626718f0030 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5626718f00b0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x562671907ff0 <col:45, line:635:5>
|   |-ParenExpr 0x562671907d38 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x562671907d08 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5626719079d0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5626719079a0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562671907840 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562671907828 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5626719077e8 <col:23> 'int' lvalue ParmVar 0x5626718f0030 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562671907808 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562671907980 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x562671907968 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562671907860 <col:33> 'int' lvalue ParmVar 0x5626718f0030 'i' 'int'
|   |   |     `-BinaryOperator 0x562671907948 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562671907930 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562671907880 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5626718ec350 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x562671907908 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5626719078f0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5626719078b8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x562671907a30 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562671907a10 <col:79> 'int' 0
|   |   `-CallExpr 0x562671907c68 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x562671907c50 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562671907c30 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x562671458c70 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562671907ca8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562671907aa0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x562671907cc0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562671907ae8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562671907cd8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562671907b20 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x562671907cf0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562671907c18 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562671907c00 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562671907bb8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x562671907fd0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x562671907f38 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x562671907f08 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x562671907ea8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x562671907e78 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x562671907e28 <col:54, col:63> 'char [48]' lvalue ->c 0x5626718f6e20
|     |     |   `-CXXMemberCallExpr 0x562671907e08 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x562671907dd8 <col:54> '<bound member function type>' ->xanno 0x5626718ec108
|     |     |       `-CXXThisExpr 0x562671907dc8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x562671907e90 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x562671907e58 <col:67> 'int' lvalue ParmVar 0x5626718f0030 'i' 'int'
|     `-CXXConstCastExpr 0x562671907fa0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x562671907f88 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x562671907f50 <col:91> 'const void *' lvalue ParmVar 0x5626718f00b0 'x' 'const void *'
|-CXXMethodDecl 0x5626718f0258 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x562671908078 <col:34, line:640:5>
|   `-ReturnStmt 0x562671908068 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x562671908050 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x562671908020 <col:16> 'Packet *' lvalue ->_data_packet 0x5626718f79d8
|         `-CXXThisExpr 0x562671908010 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5626718f0398 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5626718f0308 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x562671901138 <col:46> 'bool' true
|-CXXMethodDecl 0x5626718f0518 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5626718f0450 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5626718f05c0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5626718f0d70 <line:660:22> "" ""
| |-EnumConstantDecl 0x5626718f06c0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5626718f0de0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5626718f06a0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5626718f0680 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5626718e5820 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5626718f0750 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5626718f0df8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5626718f0730 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5626718f0710 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5626718e58b0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5626718f07e0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5626718f0e10 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5626718f07c0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5626718f07a0 <col:21> 'int' 0
| |-EnumConstantDecl 0x5626718f0870 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5626718f0e28 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5626718f0850 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5626718f0830 <col:19> 'int' 16
| |-EnumConstantDecl 0x5626718f0900 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5626718f0e40 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5626718f08e0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5626718f08c0 <col:21> 'int' 16
| |-EnumConstantDecl 0x5626718f0990 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5626718f0e58 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5626718f0970 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5626718f0950 <col:19> 'int' 32
| |-EnumConstantDecl 0x5626718f0a20 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5626718f0e70 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5626718f0a00 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5626718f09e0 <col:19> 'int' EnumConstant 0x5626718f0870 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5626718f0ab0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5626718f0e88 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5626718f0a90 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5626718f0a70 <col:19> 'int' EnumConstant 0x5626718f0990 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5626718f0b80 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5626718f0ea0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5626718f0b60 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5626718f0b40 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5626718f0b00 <col:23> 'int' EnumConstant 0x5626718f0ab0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5626718f0b20 <col:40> 'int' 2
| |-EnumConstantDecl 0x5626718f0c50 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5626718f0eb8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5626718f0c30 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5626718f0c10 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5626718f0bd0 <col:23> 'int' EnumConstant 0x5626718f0ab0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5626718f0bf0 <col:40> 'int' 4
| `-EnumConstantDecl 0x5626718f0d20 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5626718f0ed0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5626718f0d00 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5626718f0ce0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5626718f0ca0 <col:23> 'int' EnumConstant 0x5626718f0ab0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5626718f0cc0 <col:40> 'int' 8
|-CXXMethodDecl 0x5626718f0f10 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5626718f0fb0 <col:68> "" ""
|-CXXMethodDecl 0x5626718f1048 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5626718f10e8 <col:45> "" ""
|-CXXMethodDecl 0x5626718f1180 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5626718f1220 <col:57> "" ""
|-CXXMethodDecl 0x5626718f12b8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5626718f1358 <col:45> "" ""
|-CXXMethodDecl 0x5626718f13f0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5626718f1490 <col:57> "" ""
|-CXXMethodDecl 0x5626718f1520 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5626718f15c0 <col:51> "" ""
|-CXXMethodDecl 0x5626718f1650 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5626718f16f0 <col:63> "" ""
|-CXXMethodDecl 0x5626718f1780 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5626718f1820 <col:53> "" ""
|-CXXMethodDecl 0x5626718f18b0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5626718f1950 <col:65> "" ""
|-CXXMethodDecl 0x5626718f1a68 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5626718f19d8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5626718f1b10 <col:61> "" ""
|-CXXMethodDecl 0x5626718f1ca8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5626718f1b98 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5626718f1c10 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5626718f1d58 <col:67> "" ""
|-CXXMethodDecl 0x5626718f1e70 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5626718f1de0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5626718f1f18 <col:63> "" ""
|-CXXMethodDecl 0x5626718f20b0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5626718f1fa0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5626718f2018 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5626718f2160 <col:69> "" ""
|-CXXMethodDecl 0x5626718f2278 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5626718f21e8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5626718f2320 <col:63> "" ""
|-CXXMethodDecl 0x5626718f49f8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5626718f48e8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5626718f4960 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5626718f4aa8 <col:69> "" ""
|-CXXMethodDecl 0x5626718f4bc0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5626718f4b30 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5626718f4c68 <col:62> "" ""
|-CXXMethodDecl 0x5626718f4e00 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5626718f4cf0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5626718f4d68 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5626718f4eb0 <col:68> "" ""
|-CXXMethodDecl 0x5626718f4fc8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5626718f4f38 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5626718f5070 <col:63> "" ""
|-CXXMethodDecl 0x5626718f5208 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5626718f50f8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5626718f5170 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5626718f52b8 <col:69> "" ""
|-CXXMethodDecl 0x5626718f5348 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5626718f53e8 <col:64> "" ""
|-CXXMethodDecl 0x5626718f5478 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5626718f5518 <col:52> "" ""
|-CXXMethodDecl 0x5626718f55a8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5626718f5648 <col:67> "" ""
|-CXXMethodDecl 0x5626718f56d8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5626718f5778 <col:55> "" ""
|-CXXMethodDecl 0x5626718f5890 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5626718f5800 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5626718f5938 <col:58> "" ""
|-CXXMethodDecl 0x5626718f5ad0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5626718f59c0 <col:33> col:36 'int'
| |-ParmVarDecl 0x5626718f5a38 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5626718f5b80 <col:62> "" ""
|-CXXMethodDecl 0x5626718f5c98 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5626718f5c08 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5626718f5d40 <col:58> "" ""
|-CXXMethodDecl 0x5626718f5ed8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5626718f5dc8 <col:33> col:36 'int'
| |-ParmVarDecl 0x5626718f5e40 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5626718f5f88 <col:62> "" ""
|-CXXMethodDecl 0x5626718f60a0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5626718f6010 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5626718f6148 <col:60> "" ""
|-CXXMethodDecl 0x5626718f62e0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5626718f61d0 <col:34> col:37 'int'
| |-ParmVarDecl 0x5626718f6248 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5626718f6390 <col:64> "" ""
|-CXXMethodDecl 0x5626718f64a8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5626718f6418 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5626718f6550 <col:58> "" ""
|-CXXMethodDecl 0x5626718f66e8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5626718f65d8 <col:33> col:36 'int'
| |-ParmVarDecl 0x5626718f6650 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5626718f6798 <col:62> "" ""
|-CXXMethodDecl 0x5626718f68b0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5626718f6820 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5626718f6958 <col:59> "" ""
|-CXXMethodDecl 0x5626718f6af0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5626718f69e0 <col:33> col:36 'int'
| |-ParmVarDecl 0x5626718f6a58 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5626718f6ba0 <col:63> "" ""
|-AccessSpecDecl 0x5626718f6c10 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5626718f6c38 prev 0x5626718ebe40 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5626718f6d30 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5626718f6e20 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5626718f6f48 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5626718f70c8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5626718f7248 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5626718f73c8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x5626719081f8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x562671908a68 <col:11>
| |-CXXDestructorDecl 0x5626719082d0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x562671908408 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x562671908408
| | `-ParmVarDecl 0x562671908518 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x5626719085b8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5626719085b8
| | `-ParmVarDecl 0x5626719086c8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x56267190b488 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56267190b598 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x56267190b818 <col:11>
| |   `-ReturnStmt 0x56267190b808 <col:11>
| |     `-UnaryOperator 0x56267190b7f0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x56267190b7e0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x56267190b608 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56267190b608
|   `-ParmVarDecl 0x56267190b718 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5626718f7430 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5626718f7548 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5626718f75e8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5626718f7650 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5626718f76b8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5626718f7720 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5626718f7780 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5626718f7840 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5626718f78a0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5626718f7900 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x562671908108 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5626718f75e8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x562671908a78 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x562671908ad0 <col:12>
| |-CXXConstructorDecl 0x562671908738 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x562671908738
| | `-ParmVarDecl 0x562671908848 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x5626719088e8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5626719088e8
| | `-ParmVarDecl 0x5626719089f8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x56267190ab70 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5626718f7978 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5626718f79d8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5626718f7a40 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5626718f7aa8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5626718f7b10 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5626718f7b78 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5626718f7bd8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5626718f7c38 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5626718f7ca0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5626718f7d28 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5626718f7978 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x5626719080a0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5626718f7bd8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x562671908ae0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x562671908b40 <col:21, line:755:5>
|-CXXConstructorDecl 0x5626718f7ec8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5626718f7e08 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5626718f7fc0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5626718f81a8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5626718f80b0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5626718f8478 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5626718f8260 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5626718f82d8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5626718f8350 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5626718f8698 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5626718f8548 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5626718f85c0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x562671900c78 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5626718f8758 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5626718f87d0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5626718f8848 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x562671900dd0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x562671900d40 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562671900f18 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x562671900e88 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x562671901010 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562671908be0 prev 0x5626718e54a0 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x562671908d18 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x562671908da8 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x562671908e50 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x562671908ef0 <col:20>
| `-OptimizeNoneAttr 0x562671908f48 <col:30>
|-CXXMethodDecl 0x562671908f98 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x562671909038 <col:20>
| `-OptimizeNoneAttr 0x562671909090 <col:30>
|-CXXMethodDecl 0x5626719090e0 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5626719091a8 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x562671909270 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x562671909388 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x562671909450 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x5626719094f0 <col:20>
| `-OptimizeNoneAttr 0x562671909548 <col:30>
|-CXXMethodDecl 0x5626719095b8 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x562671909658 <col:20>
| `-OptimizeNoneAttr 0x5626719096b0 <col:30>
|-CXXMethodDecl 0x562671909758 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x5626719097f8 <col:20>
| `-OptimizeNoneAttr 0x562671909850 <col:30>
|-CXXMethodDecl 0x5626719098a0 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5626719099b8 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x562671909ad8 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x562671909bf8 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x562671909cc0 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x562671909d60 <col:62> "" ""
|-AccessSpecDecl 0x562671909dd0 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x562671909e30 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x56267190aa28 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x56267190ac50 <col:29, col:31>
|-CXXMethodDecl 0x562671909ef8 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x56267190a038 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x562671909fa8 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x56267190a130 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x56267190ac60 <col:23, col:25>
|-CXXMethodDecl 0x56267190a2e8 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x56267190a220 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x56267190a5b8 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x56267190a3a0 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56267190a418 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56267190a490 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56267190a748 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x56267190a680 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x56267190a840 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x56267190a8a8 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x56267190a8a8
  `-ParmVarDecl 0x56267190a9b8 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56267171c628 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x56267171c748 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x56267171c830 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x56267171c810 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x56267171c7d8 <col:22> 'int' 4
|-FieldDecl 0x56267171c8d8 <line:29:5, col:21> col:14 referenced ip_v 'unsigned int'
| `-ConstantExpr 0x56267171c8b8 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x56267171c880 <col:21> 'int' 4
|-FieldDecl 0x56267171c938 <line:33:5, col:13> col:13 referenced ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x56267171c998 <line:40:5, col:14> col:14 referenced ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x56267171c9f8 <line:41:5, col:14> col:14 referenced ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x56267171ca58 <line:42:5, col:14> col:14 referenced ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x56267171cab8 <line:47:5, col:13> col:13 referenced ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x56267171cb18 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x56267171cb78 <line:49:5, col:14> col:14 referenced ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x56267171cbe8 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x56267171cc58 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562671a12b68 <../dummy_inc/clicknet/icmp.h:27:1, line:33:1> line:27:8 referenced struct click_icmp_sequenced definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x562671a12c88 <col:1, col:8> col:8 implicit struct click_icmp_sequenced
|-FieldDecl 0x562671a12d28 <line:28:5, col:13> col:13 referenced icmp_type 'uint8_t':'unsigned char'
|-FieldDecl 0x562671a12d88 <line:29:5, col:13> col:13 referenced icmp_code 'uint8_t':'unsigned char'
|-FieldDecl 0x562671a12de8 <line:30:5, col:14> col:14 referenced icmp_cksum 'uint16_t':'unsigned short'
|-FieldDecl 0x562671a12e48 <line:31:5, col:14> col:14 referenced icmp_identifier 'uint16_t':'unsigned short'
`-FieldDecl 0x562671a12ea8 <line:32:5, col:14> col:14 referenced icmp_sequence 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_icmp_sequenced = type { i8, i8, i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_icmp_sequenced = type { i8, i8, i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56267171f570 prev 0x5626716845a8 <../dummy_inc/click/ipaddress.hh:15:1, line:154:1> line:15:7 referenced class IPAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56267171f668 <col:1, col:7> col:7 implicit referenced class IPAddress
|-AccessSpecDecl 0x56267171f6f8 <col:19, col:25> col:19 public
|-TypedefDecl 0x56267171f730 <line:17:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x562671511e80 'uninitialized_type'
|   `-CXXRecord 0x562671511de8 'uninitialized_type'
|-CXXConstructorDecl 0x56267171f7f0 <line:20:5, line:22:5> line:20:12 IPAddress 'void ()' inline
| |-CXXCtorInitializer Field 0x562671722f40 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x562671722fe8 <line:21:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x562671722fa8 <col:10> 'int' 0
| `-CompoundStmt 0x562671723030 <col:13, line:22:5>
|-CXXConstructorDecl 0x56267171f940 <line:25:5, line:27:5> line:25:12 used IPAddress 'void (unsigned int)' inline
| |-ParmVarDecl 0x56267171f8b0 <col:22, col:31> col:31 used x 'unsigned int'
| |-CXXCtorInitializer Field 0x562671722f40 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x562671723080 <line:26:10> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x562671723040 <col:10> 'unsigned int' lvalue ParmVar 0x56267171f8b0 'x' 'unsigned int'
| `-CompoundStmt 0x5626717230c8 <col:13, line:27:5>
|-CXXConstructorDecl 0x56267171fa98 <line:29:5, line:31:5> line:29:21 IPAddress 'void (int)' inline
| |-ParmVarDecl 0x56267171fa08 <col:31, col:35> col:35 used x 'int'
| |-CXXCtorInitializer Field 0x562671722f40 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x562671723130 <line:30:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x562671723118 <col:10> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x5626717230d8 <col:10> 'int' lvalue ParmVar 0x56267171fa08 'x' 'int'
| `-CompoundStmt 0x562671723178 <col:13, line:31:5>
|-CXXConstructorDecl 0x56267171fbf0 <line:33:5, line:35:5> line:33:21 IPAddress 'void (unsigned long)' inline
| |-ParmVarDecl 0x56267171fb60 <col:31, col:45> col:45 used x 'unsigned long'
| |-CXXCtorInitializer Field 0x562671722f40 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5626717231e0 <line:34:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5626717231c8 <col:10> 'unsigned long' <LValueToRValue>
| |     `-DeclRefExpr 0x562671723188 <col:10> 'unsigned long' lvalue ParmVar 0x56267171fb60 'x' 'unsigned long'
| `-CompoundStmt 0x562671723228 <col:13, line:35:5>
|-CXXConstructorDecl 0x56267171fd48 <line:37:5, line:39:5> line:37:21 IPAddress 'void (long)' inline
| |-ParmVarDecl 0x56267171fcb8 <col:31, col:36> col:36 used x 'long'
| |-CXXCtorInitializer Field 0x562671722f40 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x562671723290 <line:38:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x562671723278 <col:10> 'long' <LValueToRValue>
| |     `-DeclRefExpr 0x562671723238 <col:10> 'long' lvalue ParmVar 0x56267171fcb8 'x' 'long'
| `-CompoundStmt 0x5626717232d8 <col:13, line:39:5>
|-CXXConstructorDecl 0x56267171ff08 <line:42:5, line:44:5> line:42:12 used IPAddress 'void (struct in_addr)' inline
| |-ParmVarDecl 0x56267171fe18 <col:22, col:37> col:37 used x 'struct in_addr':'in_addr'
| |-CXXCtorInitializer Field 0x562671722f40 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x562671723358 <line:43:10, col:12> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x562671723308 <col:10, col:12> 'in_addr_t':'unsigned int' lvalue .s_addr 0x562671653360
| |     `-DeclRefExpr 0x5626717232e8 <col:10> 'struct in_addr':'in_addr' lvalue ParmVar 0x56267171fe18 'x' 'struct in_addr':'in_addr'
| `-CompoundStmt 0x5626717233a0 <col:20, line:44:5>
|-CXXConstructorDecl 0x562671720098 <line:50:5, line:56:5> line:50:14 IPAddress 'void (const unsigned char *)'
| |-ParmVarDecl 0x56267171ffd0 <col:24, col:45> col:45 used data 'const unsigned char *'
| `-CompoundStmt 0x562671723508 <col:51, line:56:5>
|   `-BinaryOperator 0x5626717234e8 <line:52:2, col:52> 'uint32_t':'unsigned int' lvalue '='
|     |-MemberExpr 0x5626717233c0 <col:2> 'uint32_t':'unsigned int' lvalue ->_addr 0x562671722f40
|     | `-CXXThisExpr 0x5626717233b0 <col:2> 'IPAddress *' implicit this
|     `-ImplicitCastExpr 0x5626717234d0 <col:10, col:52> 'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5626717234b8 <col:10, col:52> 'const unsigned int' lvalue prefix '*' cannot overflow
|         `-ParenExpr 0x562671723498 <col:11, col:52> 'const unsigned int *'
|           `-CXXReinterpretCastExpr 0x562671723468 <col:12, col:51> 'const unsigned int *' reinterpret_cast<const unsigned int *> <BitCast>
|             `-ImplicitCastExpr 0x562671723450 <col:47> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|               `-DeclRefExpr 0x5626717233f0 <col:47> 'const unsigned char *' lvalue ParmVar 0x56267171ffd0 'data' 'const unsigned char *'
|-CXXConstructorDecl 0x5626717201e8 <line:63:5, col:39> col:14 IPAddress 'void (const String &)'
| `-ParmVarDecl 0x562671720158 <col:24, col:38> col:38 x 'const String &'
|-CXXConstructorDecl 0x562671720398 <line:66:5, line:68:5> line:66:12 IPAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x5626717202d8 <col:22, col:48> col:48 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x562671723578 <col:56, line:68:5>
|   `-CStyleCastExpr 0x562671723550 <line:67:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x562671723520 <col:9> 'const uninitialized_type' lvalue ParmVar 0x5626717202d8 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x562671720528 <line:78:5, col:48> col:22 make_prefix 'IPAddress (int)' static
| `-ParmVarDecl 0x562671720460 <col:34, col:38> col:38 prefix_len 'int'
|-CXXMethodDecl 0x562671720618 <line:81:5, line:83:5> line:81:29 make_broadcast 'IPAddress ()' static inline
| `-CompoundStmt 0x562671724538 <col:46, line:83:5>
|   `-ReturnStmt 0x562671724528 <line:82:2, col:29>
|     `-ExprWithCleanups 0x562671724510 <col:9, col:29> 'IPAddress'
|       `-CXXConstructExpr 0x5626717244e0 <col:9, col:29> 'IPAddress' 'void (IPAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x562671724398 <col:9, col:29> 'IPAddress' xvalue
|           `-CXXFunctionalCastExpr 0x562671724280 <col:9, col:29> 'IPAddress' functional cast to class IPAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x562671724168 <col:9, col:29> 'IPAddress' 'void (unsigned int)'
|               `-IntegerLiteral 0x5626717235a0 <col:19> 'unsigned int' 4294967295
|-CXXMethodDecl 0x562671720708 <line:86:5, line:88:5> line:86:17 empty 'bool () const' inline
| `-CompoundStmt 0x5626717245e8 <col:31, line:88:5>
|   `-ReturnStmt 0x5626717245d8 <line:87:2, col:10>
|     `-UnaryOperator 0x5626717245c0 <col:9, col:10> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x5626717245a8 <col:10> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x562671724590 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x562671724560 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x562671722f40
|             `-CXXThisExpr 0x562671724550 <col:10> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x5626717207c8 <line:91:5, line:93:5> line:91:21 used addr 'uint32_t () const' inline
| `-CompoundStmt 0x562671724668 <col:34, line:93:5>
|   `-ReturnStmt 0x562671724658 <line:92:2, col:9>
|     `-ImplicitCastExpr 0x562671724640 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x562671724610 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x562671722f40
|         `-CXXThisExpr 0x562671724600 <col:9> 'const IPAddress *' implicit this
|-CXXConversionDecl 0x562671720898 <line:99:5, line:101:5> line:99:12 operator unsigned int 'uint32_t () const' inline
| `-CompoundStmt 0x5626717246e8 <col:38, line:101:5>
|   `-ReturnStmt 0x5626717246d8 <line:100:2, col:9>
|     `-ImplicitCastExpr 0x5626717246c0 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x562671724690 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x562671722f40
|         `-CXXThisExpr 0x562671724680 <col:9> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x562671720968 <line:106:5, line:108:5> line:106:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x5626717249b8 <col:38, line:108:5>
|   `-ReturnStmt 0x5626717249a8 <line:107:2, col:58>
|     `-BinaryOperator 0x562671724988 <col:9, col:58> 'bool' '=='
|       |-ParenExpr 0x5626717248a0 <col:9, col:36> 'unsigned int'
|       | `-BinaryOperator 0x562671724880 <col:10, col:35> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x562671724868 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x562671724710 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x562671722f40
|       |   |   `-CXXThisExpr 0x562671724700 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x562671724840 <col:18, col:35> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x562671724828 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5626717247a8 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x562671661898 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x562671724788 <col:24> 'unsigned int' 4026531840
|       `-CallExpr 0x562671724960 <col:41, col:58> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x562671724948 <col:41> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x562671724928 <col:41> 'uint32_t (uint32_t) throw()' lvalue Function 0x562671661898 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x562671724908 <col:47> 'unsigned int' 3758096384
|-CXXMethodDecl 0x562671720a28 <line:110:5, line:112:5> line:110:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x562671724c28 <col:39, line:112:5>
|   `-ReturnStmt 0x562671724c18 <line:111:2, col:56>
|     `-BinaryOperator 0x562671724bf8 <col:9, col:56> 'bool' '=='
|       |-ParenExpr 0x562671724b10 <col:9, col:35> 'unsigned int'
|       | `-BinaryOperator 0x562671724af0 <col:10, col:34> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x562671724ad8 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x5626717249e0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x562671722f40
|       |   |   `-CXXThisExpr 0x5626717249d0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x562671724ab0 <col:18, col:34> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x562671724a98 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x562671724a78 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x562671661898 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x562671724a58 <col:24> 'unsigned int' 4294901760
|       `-CallExpr 0x562671724bd0 <col:40, col:56> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x562671724bb8 <col:40> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x562671724b98 <col:40> 'uint32_t (uint32_t) throw()' lvalue Function 0x562671661898 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x562671724b78 <col:46> 'unsigned int' 2851995648
|-CXXMethodDecl 0x562671720b58 <line:114:5, col:37> col:27 used in_addr 'struct in_addr () const' inline
|-CXXConversionDecl 0x562671720c60 <line:115:5, col:38> col:12 operator in_addr 'struct in_addr () const' inline
|-CXXMethodDecl 0x562671720d70 <line:117:5, col:32> col:27 data 'unsigned char *()' inline
|-CXXMethodDecl 0x562671721e38 <line:118:5, col:40> col:33 data 'const unsigned char *() const' inline
|-CXXMethodDecl 0x562671721ef8 <line:120:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x562671721fc0 <line:122:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x5626717221b8 <line:123:5, col:64> col:17 matches_prefix 'bool (IPAddress, IPAddress) const' inline
| |-ParmVarDecl 0x562671722070 <col:32, col:42> col:42 addr 'IPAddress'
| `-ParmVarDecl 0x5626717220e8 <col:48, col:58> col:58 mask 'IPAddress'
|-CXXMethodDecl 0x562671722338 <line:124:5, col:50> col:17 mask_as_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x562671722278 <col:34, col:44> col:44 mask 'IPAddress'
|-CXXMethodDecl 0x562671722480 <line:125:5, col:52> col:17 mask_more_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x5626717223f0 <col:36, col:46> col:46 mask 'IPAddress'
|-CXXMethodDecl 0x562671722628 <line:137:5, col:43> col:23 operator&= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x562671722538 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x562671722770 <line:138:5, col:43> col:23 operator|= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x5626717226e0 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x5626717228b8 <line:139:5, col:43> col:23 operator^= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x562671722828 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x562671722980 <line:141:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x562671722a40 <line:142:5, col:27> col:12 unparse_mask 'String () const'
|-CXXMethodDecl 0x562671722bb8 <line:143:5, col:41> col:12 unparse_with_mask 'String (IPAddress) const'
| `-ParmVarDecl 0x562671722af0 <col:30> col:39 'IPAddress'
|-CXXMethodDecl 0x562671722c80 <line:145:5, col:23> col:19 s 'String () const' inline
|-CXXConversionDecl 0x562671722d68 <line:146:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x562671722e10 <col:51> "" ""
|-TypedefDecl 0x562671722eb0 <line:148:5, col:23> col:23 parameter_type 'IPAddress'
| `-RecordType 0x562671684640 'IPAddress'
|   `-CXXRecord 0x56267171f570 'IPAddress'
|-AccessSpecDecl 0x562671722f08 <line:150:3, col:10> col:3 private
|-FieldDecl 0x562671722f40 <line:152:5, col:14> col:14 referenced _addr 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5626717235e8 <line:15:7> col:7 implicit constexpr IPAddress 'void (const IPAddress &)' inline default trivial noexcept-unevaluated 0x5626717235e8
| `-ParmVarDecl 0x5626717236f8 <col:7> col:7 'const IPAddress &'
|-CXXConstructorDecl 0x562671723798 <col:7> col:7 implicit used constexpr IPAddress 'void (IPAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5626717238a8 <col:7> col:7 used 'IPAddress &&'
| |-CXXCtorInitializer Field 0x562671722f40 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x562671724488 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x562671724440 <col:7> 'uint32_t':'unsigned int' xvalue ._addr 0x562671722f40
| |     `-CXXStaticCastExpr 0x562671724410 <col:7> 'IPAddress' xvalue static_cast<class IPAddress &&> <NoOp>
| |       `-DeclRefExpr 0x5626717243e0 <col:7> 'IPAddress' lvalue ParmVar 0x5626717238a8 '' 'IPAddress &&'
| `-CompoundStmt 0x5626717244d0 <col:7>
`-CXXDestructorDecl 0x562671724198 <col:7> col:7 implicit referenced ~IPAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddress = type { i32 }
  NonVirtualBaseLLVMType:%class.IPAddress = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPAddressArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56267172bf40 prev 0x56267171f338 <../dummy_inc/click/ipaddress.hh:367:1, line:378:1> line:367:7 referenced class IPAddressArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56267172c038 <col:1, col:7> col:7 implicit class IPAddressArg
|-AccessSpecDecl 0x56267172c0c8 <col:22, col:28> col:22 public
|-CXXMethodDecl 0x56267172c4f0 <line:368:5, line:369:43> line:368:24 basic_parse 'const char *(const char *, const char *, unsigned char *, int &)' static
| |-ParmVarDecl 0x56267172c108 <col:36, col:48> col:48 begin 'const char *'
| |-ParmVarDecl 0x56267172c188 <col:55, col:67> col:67 end 'const char *'
| |-ParmVarDecl 0x56267172c2c0 <line:369:8, col:29> col:22 value 'unsigned char *':'unsigned char *'
| `-ParmVarDecl 0x56267172c370 <col:32, col:37> col:37 nbytes 'int &'
|-CXXMethodDecl 0x56267172c7b8 <line:370:5, line:371:44> line:370:17 used parse 'bool (const String &, IPAddress &, const ArgContext &)' static
| |-ParmVarDecl 0x56267172c5c0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x56267172c638 <col:42, col:53> col:53 result 'IPAddress &'
| `-ParmVarDecl 0x56267172c6d8 <line:371:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x562671731158 <col:34> 'const ArgContext' lvalue Var 0x56267171f2d0 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x562671730bb0 <line:372:5, line:375:5> line:372:17 parse 'bool (const String &, struct in_addr &, const ArgContext &)' static
| |-ParmVarDecl 0x56267172c880 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x56267172c970 <col:42, col:58> col:58 used result 'struct in_addr &'
| |-ParmVarDecl 0x56267172c9e8 <line:373:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x562671731178 <col:34> 'const ArgContext' lvalue Var 0x56267171f2d0 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x562671731358 <col:46, line:375:5>
|   `-ReturnStmt 0x562671731348 <line:374:2, col:63>
|     `-CallExpr 0x562671731310 <col:9, col:63> 'bool'
|       |-ImplicitCastExpr 0x5626717312f8 <col:9> 'bool (*)(const String &, IPAddress &, const ArgContext &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626717312b0 <col:9> 'bool (const String &, IPAddress &, const ArgContext &)' lvalue CXXMethod 0x56267172c7b8 'parse' 'bool (const String &, IPAddress &, const ArgContext &)'
|       |-DeclRefExpr 0x562671731210 <col:15> 'const String' lvalue ParmVar 0x56267172c880 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x562671731260 <col:20, col:56> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x562671731230 <col:50> 'struct in_addr':'in_addr' lvalue ParmVar 0x56267172c970 'result' 'struct in_addr &'
|       `-DeclRefExpr 0x562671731290 <col:59> 'const ArgContext' lvalue ParmVar 0x56267172c9e8 'args' 'const ArgContext &'
|-CXXMethodDecl 0x562671731088 <line:376:5, line:377:44> line:376:17 parse 'bool (const String &, Vector<IPAddress> &, const ArgContext &)' static
| |-ParmVarDecl 0x562671730c78 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x562671730ef0 <col:42, col:61> col:61 result 'Vector<IPAddress> &'
| `-ParmVarDecl 0x562671730f68 <line:377:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x562671731198 <col:34> 'const ArgContext' lvalue Var 0x56267171f2d0 'blank_args' 'const ArgContext'
|-CXXConstructorDecl 0x562671a3f320 <line:367:7> col:7 implicit referenced constexpr IPAddressArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x562671a3f428 <col:7> col:7 implicit constexpr IPAddressArg 'void (const IPAddressArg &)' inline default trivial noexcept-unevaluated 0x562671a3f428
| `-ParmVarDecl 0x562671a3f538 <col:7> col:7 'const IPAddressArg &'
|-CXXConstructorDecl 0x562671a3f5d8 <col:7> col:7 implicit constexpr IPAddressArg 'void (IPAddressArg &&)' inline default trivial noexcept-unevaluated 0x562671a3f5d8
| `-ParmVarDecl 0x562671a3f6e8 <col:7> col:7 'IPAddressArg &&'
`-CXXDestructorDecl 0x562671a3f788 <col:7> col:7 implicit referenced ~IPAddressArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddressArg = type { i8 }
  NonVirtualBaseLLVMType:%class.IPAddressArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5)
         0 |   TimerCallback callback
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timer
         0 |   int _schedpos1
         8 |   class Timestamp _expiry_s
         8 |     union Timestamp::rep_t _t
         8 |       int64_t x
        16 |   union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
        16 |     TimerCallback callback
        24 |   void * _thunk
        32 |   class Element * _owner
        40 |   class RouterThread * _thread
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5626718b6ed0 prev 0x5626718add10 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5626718b6fc8 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x5626718b7068 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x5626718bde30 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5626718be218 <col:11>
|-CXXConstructorDecl 0x5626718bdf10 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5626718bdff8 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5626718be960 <col:11>
|-CXXConstructorDecl 0x5626718be098 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5626718be1a8 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x5626718c01b8 <col:11>
|-CXXDestructorDecl 0x5626718bf4c8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5626715c6078 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5626715c6188 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5626715c6a50 <col:11>
|   `-ReturnStmt 0x5626715c6a40 <col:11>
|     `-UnaryOperator 0x5626715c6a28 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5626715c6a18 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x5626715c61f8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5626715c6308 <col:11> col:11 'Timestamp::rep_t &&'
  `-CompoundStmt 0x5626719544f0 <col:11>
    `-ReturnStmt 0x5626719544e0 <col:11>
      `-UnaryOperator 0x5626719544c8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x5626719544b8 <col:11> 'Timestamp::rep_t *' this

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5626718acec8 prev 0x5626718acbd8 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5626718acfc0 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x5626718ad050 <col:19, col:25> col:19 public
|-TypedefDecl 0x5626718ad088 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x562671512250 'int32_t' sugar
|   |-Typedef 0x562671425268 'int32_t'
|   `-TypedefType 0x5626713fe3b0 '__int32_t' sugar
|     |-Typedef 0x5626713fdfc8 '__int32_t'
|     `-BuiltinType 0x5626713bc370 'int'
|-TypedefDecl 0x5626718ad0f0 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x562671512410 'int64_t' sugar
|   |-Typedef 0x5626714252d0 'int64_t'
|   `-TypedefType 0x5626713fe4d0 '__int64_t' sugar
|     |-Typedef 0x5626713fe0a8 '__int64_t'
|     `-BuiltinType 0x5626713bc390 'long'
|-EnumDecl 0x5626718ad148 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x5626718ad2c0 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x5626718ad2a0 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x5626718ad278 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x5626718ad260 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x5626718ad230 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x5626718ad3b8 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x5626718ad398 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x5626718ad370 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x5626718ad358 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x5626718ad330 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x5626718ad310 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x5626718ad408 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x5626718ad510 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5626718ada60 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5626718ad4f0 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x5626718ad4d0 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x5626718ad5a0 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5626718ada78 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5626718ad580 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x5626718ad560 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x5626718ad630 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5626718ada90 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5626718ad610 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x5626718ad5f0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x5626718ad6c0 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5626718adaa8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5626718ad6a0 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x5626718ad680 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x5626718ad750 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5626718adac0 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5626718ad730 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x5626718ad710 <col:25> 'int' 1000
| |-EnumConstantDecl 0x5626718ad7e0 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5626718adad8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5626718ad7c0 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x5626718ad7a0 <col:24> 'int' 1000
| |-EnumConstantDecl 0x5626718ad870 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5626718adaf0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5626718ad850 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x5626718ad830 <col:26> 'int' EnumConstant 0x5626718ad510 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x5626718ad940 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5626718adb08 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5626718ad920 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x5626718ad900 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x5626718ad8c0 <col:27> 'int' EnumConstant 0x5626718ad870 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x5626718ad8e0 <col:44> 'int' EnumConstant 0x5626718ad7e0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x5626718ada10 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x5626718adb20 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5626718ad9f0 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x5626718ad9d0 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x5626718ad990 <col:27> 'int' EnumConstant 0x5626718ad870 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x5626718ad9b0 <col:44> 'int' EnumConstant 0x5626718ad6c0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x5626718adb38 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x5626718adc40 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x5626718adc90 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5626718adc20 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x5626718adc00 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5626718ad870 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x5626718adcb8 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x562671511e80 'uninitialized_type'
|   `-CXXRecord 0x562671511de8 'uninitialized_type'
|-CXXRecordDecl 0x5626718add10 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x5626718ade20 <line:174:5, line:176:5> line:174:12 used Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x5626718b8018 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5626718be228 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5626718be348 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x5626718be300 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x5626718be290 <col:9> '<bound member function type>' ->assign 0x5626718b2a68
|     | `-CXXThisExpr 0x5626718be280 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x5626718be2c0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x5626718be330 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5626718be2e0 <col:19> 'int' 0
|-CXXConstructorDecl 0x5626718ae068 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x5626718adee0 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x5626718adf58 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5626718b9b60 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5626718b9b40 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x5626718b8018 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5626718be360 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5626718be4b0 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x5626718be438 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x5626718be3c8 <col:9> '<bound member function type>' ->assign 0x5626718b2a68
|     | `-CXXThisExpr 0x5626718be3b8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5626718be480 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5626718be468 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x5626718be3f8 <col:16> 'long' lvalue ParmVar 0x5626718adee0 'sec' 'long'
|     `-ImplicitCastExpr 0x5626718be498 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5626718be418 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5626718adf58 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5626718ae2c8 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5626718ae138 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x5626718ae1b0 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5626718b9b98 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5626718b9b78 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x5626718b8018 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5626718be4c8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5626718be600 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x5626718be5a0 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x5626718be530 <col:9> '<bound member function type>' ->assign 0x5626718b2a68
|     | `-CXXThisExpr 0x5626718be520 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5626718be5d0 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5626718be560 <col:16> 'int' lvalue ParmVar 0x5626718ae138 'sec' 'int'
|     `-ImplicitCastExpr 0x5626718be5e8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5626718be580 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5626718ae1b0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5626718ae528 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x5626718ae398 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x5626718ae410 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5626718b9bd0 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5626718b9bb0 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x5626718b8018 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5626718be618 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5626718be768 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x5626718be6f0 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x5626718be680 <col:9> '<bound member function type>' ->assign 0x5626718b2a68
|     | `-CXXThisExpr 0x5626718be670 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5626718be738 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5626718be720 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x5626718be6b0 <col:16> 'unsigned long' lvalue ParmVar 0x5626718ae398 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x5626718be750 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5626718be6d0 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5626718ae410 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5626718af6c0 <line:199:5, line:201:5> line:199:21 used Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x5626718ae5f8 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x5626718ae670 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5626718b9c08 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5626718b9be8 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x5626718b8018 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5626718be780 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5626718be8d0 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x5626718be858 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x5626718be7e8 <col:9> '<bound member function type>' ->assign 0x5626718b2a68
|     | `-CXXThisExpr 0x5626718be7d8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5626718be8a0 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5626718be888 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5626718be818 <col:16> 'unsigned int' lvalue ParmVar 0x5626718ae5f8 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x5626718be8b8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5626718be838 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5626718ae670 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5626718af820 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x5626718af790 <col:31> col:37 'double'
|-CXXConstructorDecl 0x5626718af9b8 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x5626718af8f8 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x5626718afbe8 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x5626718afaf0 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x5626718afd98 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x5626718afcd8 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x5626718b8018 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5626718be970 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x5626718be8e8 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x5626718afcd8 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5626718be9d0 <col:19, line:214:5>
|-CXXConstructorDecl 0x5626718aff68 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x5626718afea8 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x5626718b8018 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5626718be9e0 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5626718bea90 <col:53, line:219:5>
|   `-CStyleCastExpr 0x5626718bea68 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x5626718bea38 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x5626718afea8 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x5626718b0158 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x5626718b00d0 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x5626718acc70 'Timestamp'
|   | `-CXXRecord 0x5626718acec8 'Timestamp'
|   `-ParenType 0x5626718b0070 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x5626718b0040 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x5626718ad210 'Timestamp::seconds_type' sugar
|         |-Typedef 0x5626718ad088 'seconds_type'
|         `-TypedefType 0x562671512250 'int32_t' sugar
|           |-Typedef 0x562671425268 'int32_t'
|           `-TypedefType 0x5626713fe3b0 '__int32_t' sugar
|             |-Typedef 0x5626713fdfc8 '__int32_t'
|             `-BuiltinType 0x5626713bc370 'int'
|-CXXConversionDecl 0x5626718b0298 <line:222:5, col:45> col:12 used operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5626718b0368 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x5626718beb98 <col:37, line:231:5>
|   `-ReturnStmt 0x5626718beb88 <line:227:9, col:23>
|     `-BinaryOperator 0x5626718beb68 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x5626718beb38 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5626718beae8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x5626718b7068
|       |   `-MemberExpr 0x5626718beab8 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x5626718b8018
|       |     `-CXXThisExpr 0x5626718beaa8 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5626718beb50 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x5626718beb18 <col:23> 'int' 0
|-CXXMethodDecl 0x5626718b0428 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x5626718b04e8 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x5626718b05a8 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x5626718b0668 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x5626718b0728 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x5626718b0898 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x5626718b07d8 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x5626718b09e0 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x5626718b0950 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5626718b0aa8 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5626718b0b48 <col:54> "" ""
|-CXXMethodDecl 0x5626718b0bd8 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5626718b0c78 <col:54> "" ""
|-CXXMethodDecl 0x5626718b0d08 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5626718b0da8 <col:54> "" ""
|-CXXMethodDecl 0x5626718b0ea8 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x5626718b0f78 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x5626718b10a8 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x5626718b11a0 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x5626718b12d8 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5626718bedb0 <col:39, line:271:5>
|   `-ReturnStmt 0x5626718beda0 <line:267:9, col:61>
|     `-CallExpr 0x5626718bed40 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x5626718bed28 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626718bebb0 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5626718b8348 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x5626718bed70 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5626718bec10 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x5626718b7068
|       |   `-MemberExpr 0x5626718bebe0 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x5626718b8018
|       |     `-CXXThisExpr 0x5626718bebd0 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5626718bed88 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x5626718becb0 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x5626718bec80 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x5626718bec40 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5626718ad870 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x5626718bec98 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x5626718bec60 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5626718ad7e0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5626718b1398 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5626718bef70 <col:39, line:279:5>
|   `-ReturnStmt 0x5626718bef60 <line:275:9, col:61>
|     `-CallExpr 0x5626718bef00 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x5626718beee8 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626718bedc8 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5626718b8348 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x5626718bef30 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5626718bee28 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x5626718b7068
|       |   `-MemberExpr 0x5626718bedf8 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x5626718b8018
|       |     `-CXXThisExpr 0x5626718bede8 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5626718bef48 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x5626718beec8 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x5626718bee98 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x5626718bee58 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5626718ad870 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x5626718beeb0 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x5626718bee78 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5626718ad6c0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5626718b1458 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5626718bf108 <col:39, line:287:5>
|   `-ReturnStmt 0x5626718bf0f8 <line:283:9, col:53>
|     `-BinaryOperator 0x5626718bf0d8 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x5626718bf0a8 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5626718befc8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x5626718b7068
|       |   `-MemberExpr 0x5626718bef98 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x5626718b8018
|       |     `-CXXThisExpr 0x5626718bef88 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5626718bf0c0 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x5626718bf088 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5626718bf068 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x5626718bf038 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5626718beff8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5626718ad510 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5626718bf050 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5626718bf018 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5626718ad870 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5626718b1548 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5626718c03a0 <col:40, line:293:5>
|   |-DeclStmt 0x5626718bf250 <line:291:9, col:48>
|   | `-VarDecl 0x5626718bf130 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x5626718bf230 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x5626718bf1d8 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x5626718bf1a8 <col:22> '<bound member function type>' ->subsec 0x5626718b04e8
|   |     |   `-CXXThisExpr 0x5626718bf198 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x5626718bf218 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x5626718bf1f8 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5626718ad940 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5626718c0390 <line:292:9, col:70>
|     `-ExprWithCleanups 0x5626718c0378 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x5626718c0348 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5626718c0330 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x5626718c0310 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x5626718c02e0 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x5626718c0078 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x5626718c0060 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x5626718bf268 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x5626718bf130 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x5626718c0280 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x5626718c0268 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x5626718c0238 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x5626718c0090 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x5626718c0000 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x5626718bffe8 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x5626718bff98 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5626718ace18 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x5626718bff38 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x5626718bf298 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x5626718bf288 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x5626718bff80 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x5626718bff68 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x5626718bf758 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x5626718bf2c0 <col:39> 'int' 0
|               |               `-BinaryOperator 0x5626718bf350 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x5626718bf320 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x5626718bf2e0 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5626718ad940 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x5626718bf338 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x5626718bf300 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x5626718bf130 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x5626718c02b0 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x5626718c0048 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x5626718c0038 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x5626718b1608 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5626718c08f8 <col:40, line:302:5>
|   |-DeclStmt 0x5626718c04f0 <line:297:9, col:48>
|   | `-VarDecl 0x5626718c03d0 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x5626718c04d0 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x5626718c0478 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x5626718c0448 <col:22> '<bound member function type>' ->subsec 0x5626718b04e8
|   |     |   `-CXXThisExpr 0x5626718c0438 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x5626718c04b8 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x5626718c0498 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5626718ada10 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5626718c08e8 <line:298:9, col:70>
|     `-ExprWithCleanups 0x5626718c08d0 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x5626718c08a0 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5626718c0888 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x5626718c0868 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x5626718c0838 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x5626718c0760 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x5626718c0748 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x5626718c0508 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x5626718c03d0 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x5626718c07d8 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x5626718c07c0 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x5626718c0790 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x5626718c0778 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x5626718c06e8 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x5626718c06d0 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x5626718c06b0 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5626718ace18 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x5626718c0650 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x5626718c0538 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x5626718c0528 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x5626718c0698 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x5626718c0680 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x5626718c0610 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x5626718c0560 <col:39> 'int' 0
|               |               `-BinaryOperator 0x5626718c05f0 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x5626718c05c0 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x5626718c0580 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5626718ada10 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x5626718c05d8 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x5626718c05a0 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x5626718c03d0 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x5626718c0808 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x5626718c0730 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x5626718c0720 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x5626718b16c8 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5626718c0980 <col:40, line:306:5>
|   `-ReturnStmt 0x5626718c0970 <line:305:9, col:17>
|     `-CXXConstructExpr 0x5626718c0940 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x5626718c0928 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5626718c0918 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x5626718b1868 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x5626718b1778 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x5626718b1a38 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x5626718b1940 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x5626718b1b28 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x5626718b1c98 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x5626718b1bd8 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x5626718c0ac8 <col:56, line:320:5>
|   `-ReturnStmt 0x5626718c0ab8 <line:319:9, col:32>
|     `-ExprWithCleanups 0x5626718c0aa0 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x5626718c0a70 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5626718c0a58 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5626718c0a18 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5626718c09e8 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5626718c09a8 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5626718b1bd8 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x5626718c0a00 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5626718c09c8 <col:31> 'int' 0
|-CXXMethodDecl 0x5626718b1ed8 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5626718b1d50 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5626718b1dc8 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5626718c0c98 <col:72, line:326:5>
|   `-ReturnStmt 0x5626718c0c88 <line:325:9, col:51>
|     `-ExprWithCleanups 0x5626718c0c70 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5626718c0c40 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5626718c0c28 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5626718c0be8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5626718c0bd0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5626718c0af0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5626718b1d50 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5626718c0b90 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5626718c0b78 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5626718c0b10 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5626718b67c0 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5626718c0bb8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5626718c0b30 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5626718b1dc8 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5626718b2088 <line:328:5, line:337:5> line:328:29 used make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5626718b1f98 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5626718c1360 <col:56, line:337:5>
|   |-DeclStmt 0x5626718c0f98 <line:329:9, col:51>
|   | `-VarDecl 0x5626718c0cc0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5626718c0f80 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5626718c0f50 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5626718c0f38 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5626718c0f20 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5626718c0ef0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5626718c0ed8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5626718c0ec0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5626718c0db0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5626718c1150 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5626718c1000 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5626718b7068
|   | | `-MemberExpr 0x5626718c0fd0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5626718b8018
|   | |   `-DeclRefExpr 0x5626718c0fb0 <col:9> 'Timestamp' lvalue Var 0x5626718c0cc0 't' 'Timestamp'
|   | `-BinaryOperator 0x5626718c1130 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x5626718c1100 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5626718c1030 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x5626718b1f98 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5626718c1118 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x5626718c10e0 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x5626718c10c0 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x5626718c1090 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x5626718c1050 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5626718ad870 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x5626718c10a8 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x5626718c1070 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5626718ad7e0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5626718c1348 <line:336:9, col:16>
|     `-CXXConstructExpr 0x5626718c1318 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5626718c1300 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5626718c12e0 <col:16> 'Timestamp' lvalue Var 0x5626718c0cc0 't' 'Timestamp'
|-CXXMethodDecl 0x5626718b2250 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5626718b2140 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5626718b21b8 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5626718c1518 <col:72, line:343:5>
|   `-ReturnStmt 0x5626718c1508 <line:342:9, col:51>
|     `-ExprWithCleanups 0x5626718c14f0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5626718c14c0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5626718c14a8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5626718c1468 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5626718c1450 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5626718c1398 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5626718b2140 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5626718c1410 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5626718c13f8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5626718c13b8 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5626718b6908 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5626718c1438 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5626718c13d8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5626718b21b8 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5626718b23a0 <line:345:5, line:354:5> line:345:29 used make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5626718b2310 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5626718c1960 <col:56, line:354:5>
|   |-DeclStmt 0x5626718c1708 <line:346:9, col:51>
|   | `-VarDecl 0x5626718c1540 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5626718c16f0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5626718c16c0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5626718c16a8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5626718c1690 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5626718c1660 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5626718c1648 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5626718c1630 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5626718c1600 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5626718c18c0 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5626718c1770 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5626718b7068
|   | | `-MemberExpr 0x5626718c1740 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5626718b8018
|   | |   `-DeclRefExpr 0x5626718c1720 <col:9> 'Timestamp' lvalue Var 0x5626718c1540 't' 'Timestamp'
|   | `-BinaryOperator 0x5626718c18a0 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x5626718c1870 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5626718c17a0 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x5626718b2310 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5626718c1888 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x5626718c1850 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x5626718c1830 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x5626718c1800 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x5626718c17c0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5626718ad870 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x5626718c1818 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x5626718c17e0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5626718ad6c0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5626718c1948 <line:353:9, col:16>
|     `-CXXConstructExpr 0x5626718c1918 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5626718c1900 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5626718c18e0 <col:16> 'Timestamp' lvalue Var 0x5626718c1540 't' 'Timestamp'
|-CXXMethodDecl 0x5626718b2568 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5626718b2458 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5626718b24d0 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5626718c1b18 <col:72, line:360:5>
|   `-ReturnStmt 0x5626718c1b08 <line:359:9, col:51>
|     `-ExprWithCleanups 0x5626718c1af0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5626718c1ac0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5626718c1aa8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5626718c1a68 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5626718c1a50 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5626718c1998 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5626718b2458 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5626718c1a10 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5626718c19f8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5626718c19b8 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5626718b6a50 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5626718c1a38 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5626718c19d8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5626718b24d0 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5626718b26b8 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5626718b2628 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5626718ce488 <col:56, line:371:5>
|   |-DeclStmt 0x5626718c1d08 <line:363:9, col:51>
|   | `-VarDecl 0x5626718c1b40 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5626718c1cf0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5626718c1cc0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5626718c1ca8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5626718c1c90 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5626718c1c60 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5626718c1c48 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5626718c1c30 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5626718c1c00 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5626718ce3e8 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5626718c1d70 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5626718b7068
|   | | `-MemberExpr 0x5626718c1d40 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5626718b8018
|   | |   `-DeclRefExpr 0x5626718c1d20 <col:9> 'Timestamp' lvalue Var 0x5626718c1b40 't' 'Timestamp'
|   | `-CallExpr 0x5626718ce388 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x5626718ce370 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5626718c1da0 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5626718b8348 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x5626718ce3b8 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5626718c1dc0 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x5626718b2628 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5626718ce3d0 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x5626718ce350 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x5626718ce320 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x5626718c1de0 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5626718ad510 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x5626718ce338 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x5626718c1e00 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5626718ad870 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5626718ce470 <line:370:9, col:16>
|     `-CXXConstructExpr 0x5626718ce440 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5626718ce428 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5626718ce408 <col:16> 'Timestamp' lvalue Var 0x5626718c1b40 't' 'Timestamp'
|-CXXMethodDecl 0x5626718b27a8 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x5626718ce5c8 <col:39, line:377:5>
|   `-ReturnStmt 0x5626718ce5b8 <line:376:9, col:30>
|     `-ExprWithCleanups 0x5626718ce5a0 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x5626718ce570 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5626718ce558 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5626718ce518 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x5626718ce4c0 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x5626718ce500 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5626718ce4e0 <col:29> 'int' 1
|-CXXMethodDecl 0x5626718b2868 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x5626718ce6a8 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x5626718ce660 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x5626718ce5f0 <col:9> '<bound member function type>' ->assign 0x5626718b2a68
|     | `-CXXThisExpr 0x5626718ce5e0 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x5626718ce620 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x5626718ce690 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5626718ce640 <col:19> 'int' 0
|-CXXMethodDecl 0x5626718b2a68 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5626718b2918 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5626718b2990 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5626718b9c40 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5626718b9c20 <col:60> 'int' 0
| `-CompoundStmt 0x5626718ce8a0 <col:63, line:395:5>
|   `-BinaryOperator 0x5626718ce880 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x5626718ce700 <col:9, col:12> 'int64_t':'long' lvalue .x 0x5626718b7068
|     | `-MemberExpr 0x5626718ce6d0 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x5626718b8018
|     |   `-CXXThisExpr 0x5626718ce6c0 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x5626718ce860 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x5626718ce7f0 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x5626718ce790 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x5626718ce778 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x5626718ce760 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x5626718ce730 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5626718b2918 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x5626718ce7d8 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x5626718ce7b8 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5626718ad870 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x5626718ce848 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x5626718ce830 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x5626718ce810 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x5626718b2990 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5626718b2c38 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5626718b2b28 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5626718b2ba0 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5626718ce9f8 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x5626718ce9b0 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x5626718ce8c8 <col:9> '<bound member function type>' ->assign 0x5626718b2a68
|     | `-CXXThisExpr 0x5626718ce8b8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5626718ce9e0 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5626718ce8f8 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5626718b2b28 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x5626718ce970 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5626718ce958 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626718ce918 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5626718b6908 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x5626718ce998 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5626718ce938 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x5626718b2ba0 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5626718b2e08 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5626718b2cf8 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5626718b2d70 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5626718ceb50 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x5626718ceb08 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x5626718cea20 <col:9> '<bound member function type>' ->assign 0x5626718b2a68
|     | `-CXXThisExpr 0x5626718cea10 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5626718ceb38 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5626718cea50 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5626718b2cf8 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x5626718ceac8 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5626718ceab0 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626718cea70 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5626718b6a50 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x5626718ceaf0 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5626718cea90 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x5626718b2d70 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5626718b2fd8 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5626718b2ec8 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5626718b2f40 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5626718b9c78 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5626718b9c58 <col:57> 'int' 0
| `-DeprecatedAttr 0x5626718b3088 <col:75> "" ""
|-CXXMethodDecl 0x5626718b3218 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5626718b3108 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5626718b3180 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5626718b32c8 <col:74> "" ""
|-CXXMethodDecl 0x5626718b3458 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5626718b3348 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5626718b33c0 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5626718b3508 <col:74> "" ""
|-CXXMethodDecl 0x5626718b3598 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x5626718b3638 <col:42> "" ""
|-CXXMethodDecl 0x5626718b5e70 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x5626718b5d50 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5626718b5dd0 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x5626718b5f40 <line:432:5, col:33> col:29 now 'Timestamp ()' static inline
|-CXXMethodDecl 0x5626718b6000 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x5626718b60a0 <col:20>
| `-OptimizeNoneAttr 0x5626718b60f8 <col:30>
|-CXXMethodDecl 0x5626718b6140 <line:446:5, col:36> col:29 used recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x5626718b6200 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x5626718b62c0 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x5626718b6380 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x5626718b6440 <line:481:5, col:43> col:29 used recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x5626718b6500 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x5626718b65c0 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x5626718b6680 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x5626718b67c0 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5626718b6730 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5626718cec98 <col:58, line:512:5>
|   `-ReturnStmt 0x5626718cec88 <line:511:9, col:53>
|     `-BinaryOperator 0x5626718cec68 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5626718cec38 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5626718ceb68 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5626718b6730 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5626718cec50 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5626718cec18 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5626718cebf8 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5626718cebc8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5626718ceb88 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5626718ad870 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5626718cebe0 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5626718ceba8 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5626718ad7e0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5626718b6908 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5626718b6878 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5626718cede0 <col:58, line:516:5>
|   `-ReturnStmt 0x5626718cedd0 <line:515:9, col:53>
|     `-BinaryOperator 0x5626718cedb0 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5626718ced80 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5626718cecb0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5626718b6878 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5626718ced98 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5626718ced60 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5626718ced40 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5626718ced10 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5626718cecd0 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5626718ad870 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5626718ced28 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5626718cecf0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5626718ad6c0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5626718b6a50 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5626718b69c0 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5626718cef28 <col:58, line:520:5>
|   `-ReturnStmt 0x5626718cef18 <line:519:9, col:53>
|     `-BinaryOperator 0x5626718ceef8 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5626718ceec8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5626718cedf8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5626718b69c0 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5626718ceee0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5626718ceea8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5626718cee88 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x5626718cee58 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5626718cee18 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5626718ad510 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5626718cee70 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5626718cee38 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5626718ad870 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5626718b6b98 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5626718b6b08 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5626718cf070 <col:60, line:524:5>
|   `-ReturnStmt 0x5626718cf060 <line:523:9, col:55>
|     `-BinaryOperator 0x5626718cf040 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5626718cf010 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5626718cef40 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5626718b6b08 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5626718cf028 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5626718ceff0 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5626718cefd0 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x5626718cefa0 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5626718cef60 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5626718ad870 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5626718cefb8 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5626718cef80 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5626718ad7e0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5626718b6ce0 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5626718b6c50 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5626718cf1b8 <col:60, line:528:5>
|   `-ReturnStmt 0x5626718cf1a8 <line:527:9, col:55>
|     `-BinaryOperator 0x5626718cf188 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5626718cf158 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5626718cf088 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5626718b6c50 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5626718cf170 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5626718cf138 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5626718cf118 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x5626718cf0e8 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5626718cf0a8 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5626718ad870 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5626718cf100 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5626718cf0c8 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5626718ad6c0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5626718b6e28 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5626718b6d98 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5626718cf300 <col:60, line:532:5>
|   `-ReturnStmt 0x5626718cf2f0 <line:531:9, col:55>
|     `-BinaryOperator 0x5626718cf2d0 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5626718cf2a0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5626718cf1d0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5626718b6d98 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5626718cf2b8 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5626718cf280 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5626718cf260 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5626718cf230 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5626718cf1f0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5626718ad510 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5626718cf248 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5626718cf210 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5626718ad870 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x5626718b6ed0 prev 0x5626718add10 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5626718b6fc8 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x5626718b7068 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x5626718bde30 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5626718be218 <col:11>
| |-CXXConstructorDecl 0x5626718bdf10 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5626718bdff8 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x5626718be960 <col:11>
| |-CXXConstructorDecl 0x5626718be098 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x5626718be1a8 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x5626718c01b8 <col:11>
| |-CXXDestructorDecl 0x5626718bf4c8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5626715c6078 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5626715c6188 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x5626715c6a50 <col:11>
| |   `-ReturnStmt 0x5626715c6a40 <col:11>
| |     `-UnaryOperator 0x5626715c6a28 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5626715c6a18 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x5626715c61f8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x5626715c6308 <col:11> col:11 'Timestamp::rep_t &&'
|   `-CompoundStmt 0x5626719544f0 <col:11>
|     `-ReturnStmt 0x5626719544e0 <col:11>
|       `-UnaryOperator 0x5626719544c8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5626719544b8 <col:11> 'Timestamp::rep_t *' this
|-EnumDecl 0x5626718b70d0 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x5626718b71d0 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5626718b73d0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5626718b71b0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5626718b7190 <col:21> 'int' 0
| |-EnumConstantDecl 0x5626718b7260 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5626718b73e8 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5626718b7240 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x5626718b7220 <col:23> 'int' 1
| |-EnumConstantDecl 0x5626718b72f0 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5626718b7400 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5626718b72d0 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x5626718b72b0 <col:23> 'int' 2
| `-EnumConstantDecl 0x5626718b7380 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x5626718b7418 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5626718b7360 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x5626718b7340 <col:27> 'int' 3
|-CXXMethodDecl 0x5626718b7458 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x5626718b7520 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x5626718b7728 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x5626718b75d0 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x5626718b7650 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x5626718b9c90 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x5626718b7938 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x5626718b77e8 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x5626718b7860 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x5626718b7a08 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x5626718b7ac8 <line:635:5, col:37> col:24 used warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x5626718b7c38 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x5626718b7b78 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x5626718b7d00 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x5626718b7dc0 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x5626718b7e80 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x5626718b7f40 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x5626718b7fe0 <line:670:3, col:10> col:3 private
|-FieldDecl 0x5626718b8018 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x5626718b8088 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x5626718cf318 <col:27, line:684:5>
|-CXXMethodDecl 0x5626718b8148 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x5626718cf328 <col:27, line:696:5>
|-CXXMethodDecl 0x5626718b8348 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x5626718b81f8 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x5626718b8270 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5626718cf4b0 <col:66, line:700:5>
|   `-ReturnStmt 0x5626718cf4a0 <line:699:9, col:31>
|     `-CallExpr 0x5626718cf440 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x5626718cf428 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5626718cf3d8 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x56267173a6f8 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x5626718cf470 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x5626718cf398 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x5626718b81f8 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x5626718cf488 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5626718cf3b8 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x5626718b8270 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5626718b86b8 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x5626718b8408 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x5626718b8480 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x5626718b84f8 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x5626718b8570 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5626718cf800 <col:64, line:707:5>
|   |-DeclStmt 0x5626718cf540 <line:704:9, col:24>
|   | `-VarDecl 0x5626718cf4d8 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x5626718cf750 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x5626718cf558 <col:9> 'int32_t':'int' lvalue ParmVar 0x5626718b8480 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x5626718cf738 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x5626718cf6d0 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x5626718cf6b8 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5626718cf638 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x56267173f9c8 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x5626718cf708 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5626718cf5d8 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x5626718b84f8 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x5626718cf720 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5626718cf5f8 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x5626718b8570 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x5626718cf618 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x5626718cf4d8 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x5626718cf7e0 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x5626718cf770 <col:9> 'int32_t':'int' lvalue ParmVar 0x5626718b8408 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x5626718cf7c8 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x5626718cf7b0 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x5626718cf790 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x5626718cf4d8 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x5626718b8958 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x5626718b8788 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x5626718b8800 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x5626718b8878 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x5626718b8bf8 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x5626718b8a20 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x5626718b8a98 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x5626718b8b10 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x5626718b8d88 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x5626718b8cc0 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x5626718b8f88 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x5626718b8e40 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x5626718b8eb8 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x5626718b9258 <line:717:5, col:73> col:24
| `-FunctionDecl 0x5626718b9198 parent 0x5626713bc278 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5626718b9048 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x5626718b90c0 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x5626718b9478 <line:718:5, col:72> col:24
| `-FunctionDecl 0x5626718b93b8 parent 0x5626713bc278 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5626718b92a8 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x5626718b9320 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x5626718b9640 <line:719:5, col:57> col:29
| `-FunctionDecl 0x5626718b9588 parent 0x5626713bc278 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x5626718b94c8 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x5626718b98c8 <line:720:5, col:73> col:30
| `-FunctionDecl 0x5626718b9808 parent 0x5626713bc278 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5626718b96b8 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x5626718b9730 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x5626718b9ae8 <line:721:5, col:73> col:30
| `-FunctionDecl 0x5626718b9a28 parent 0x5626713bc278 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5626718b9918 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x5626718b9990 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x5626718bf370 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x5626718bf458 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x5626718b8018 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5626718bfec8 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x5626718bfe80 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x5626718b8018
| |     `-DeclRefExpr 0x5626718bfe60 <col:7> 'const Timestamp' lvalue ParmVar 0x5626718bf458 '' 'const Timestamp &'
| `-CompoundStmt 0x5626718bff28 <col:7>
|-CXXConstructorDecl 0x5626718bf5d8 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5626718bf6e8 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x5626718b8018 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5626718c01c8 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x5626718c0170 <col:7> 'Timestamp::rep_t' xvalue ._t 0x5626718b8018
| |     `-CXXStaticCastExpr 0x5626718c0140 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x5626718c0110 <col:7> 'Timestamp' lvalue ParmVar 0x5626718bf6e8 '' 'Timestamp &&'
| `-CompoundStmt 0x5626718c0228 <col:7>
|-CXXDestructorDecl 0x5626718bf798 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5626715c5ec8 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x5626715c5fd8 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x5626715c6ac8 <col:7>
|   |-CXXMemberCallExpr 0x5626715c6a68 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x5626715c69a8 <col:7> '<bound member function type>' .operator= 0x5626715c6078
|   | | `-MemberExpr 0x5626715c68b8 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x5626718b8018
|   | |   `-CXXThisExpr 0x5626715c68a8 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x5626715c6978 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x5626718b8018
|   |   `-DeclRefExpr 0x5626715c6958 <col:7> 'const Timestamp' lvalue ParmVar 0x5626715c5fd8 '' 'const Timestamp &'
|   `-ReturnStmt 0x5626715c6ab8 <col:7>
|     `-UnaryOperator 0x5626715c6aa0 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5626715c6a90 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x5626715c6378 <col:7> col:7 implicit used operator= 'Timestamp &(Timestamp &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5626715c6488 <col:7> col:7 used 'Timestamp &&'
  `-CompoundStmt 0x562671954568 <col:7>
    |-CXXMemberCallExpr 0x562671954508 <col:7> 'Timestamp::rep_t' lvalue
    | |-MemberExpr 0x562671954470 <col:7> '<bound member function type>' .operator= 0x5626715c61f8
    | | `-MemberExpr 0x562671954340 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x5626718b8018
    | |   `-CXXThisExpr 0x562671954330 <col:7> 'Timestamp *' this
    | `-MemberExpr 0x562671954440 <col:7> 'Timestamp::rep_t' xvalue ._t 0x5626718b8018
    |   `-CXXStaticCastExpr 0x562671954410 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
    |     `-DeclRefExpr 0x5626719543e0 <col:7> 'Timestamp' lvalue ParmVar 0x5626715c6488 '' 'Timestamp &&'
    `-ReturnStmt 0x562671954558 <col:7>
      `-UnaryOperator 0x562671954540 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x562671954530 <col:7> 'Timestamp *' this

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562671951548 <../dummy_inc/click/timer.hh:343:5, line:345:5> line:343:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x562671951678 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
`-CXXDestructorDecl 0x562671952168 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { void (%class.Timer*, i8*)* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56267193bd78 prev 0x56267191e1c0 <../dummy_inc/click/timer.hh:14:1, line:358:1> line:14:7 class Timer definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56267193be70 <col:1, col:7> col:7 implicit referenced class Timer
|-AccessSpecDecl 0x56267193bf00 <col:15, col:21> col:15 public
|-CXXConstructorDecl 0x56267193bf60 <line:22:5, col:11> col:5 Timer 'void ()'
|-CXXRecordDecl 0x56267193c008 <line:24:5, line:25:5> line:24:12 referenced struct do_nothing_t definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| `-CXXRecordDecl 0x56267193c128 <col:5, col:12> col:12 implicit struct do_nothing_t
|-CXXConstructorDecl 0x56267193c2c8 <line:32:5, col:37> col:5 Timer 'void (const Timer::do_nothing_t &)'
| `-ParmVarDecl 0x56267193c208 <col:11, col:31> col:31 unused 'const Timer::do_nothing_t &'
|-CXXConstructorDecl 0x56267193c518 <line:38:5, col:43> col:5 Timer 'void (TimerCallback, void *)'
| |-ParmVarDecl 0x56267193c388 <col:11, col:25> col:25 f 'TimerCallback':'void (*)(Timer *, void *)'
| `-ParmVarDecl 0x56267193c408 <col:28, col:34> col:34 user_data 'void *'
|-CXXConstructorDecl 0x56267193c6a8 <line:43:5, col:27> col:5 Timer 'void (Element *)'
| `-ParmVarDecl 0x56267193c5e0 <col:11, col:20> col:20 element 'Element *'
|-CXXConstructorDecl 0x56267193c828 <line:47:5, col:21> col:5 Timer 'void (Task *)'
| `-ParmVarDecl 0x56267193c768 <col:11, col:17> col:17 task 'Task *'
|-CXXConstructorDecl 0x56267193c9d8 <line:52:5, col:25> col:5 Timer 'void (const Timer &)'
| `-ParmVarDecl 0x56267193c918 <col:11, col:24> col:24 x 'const Timer &'
|-CXXDestructorDecl 0x56267193cad0 <line:55:5, line:58:5> line:55:12 ~Timer 'void () noexcept' inline
| `-CompoundStmt 0x562671952340 <col:21, line:58:5>
|   `-IfStmt 0x562671952328 <line:56:2, line:57:17>
|     |-CXXMemberCallExpr 0x562671952290 <line:56:6, col:16> 'bool'
|     | `-MemberExpr 0x562671952260 <col:6> '<bound member function type>' ->scheduled 0x56267193d328
|     |   `-ImplicitCastExpr 0x5626719522b0 <col:6> 'const Timer *' <NoOp>
|     |     `-CXXThisExpr 0x562671952250 <col:6> 'Timer *' implicit this
|     `-CXXMemberCallExpr 0x562671952308 <line:57:6, col:17> 'void'
|       `-MemberExpr 0x5626719522d8 <col:6> '<bound member function type>' ->unschedule 0x5626719509f0
|         `-CXXThisExpr 0x5626719522c8 <col:6> 'Timer *' implicit this
|-CXXMethodDecl 0x56267193cbd0 <line:62:5, line:65:5> line:62:17 used assign 'void ()' inline
| `-CompoundStmt 0x5626719524e0 <col:26, line:65:5>
|   |-BinaryOperator 0x562671952400 <line:63:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x562671952398 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x562671951678
|   | | `-MemberExpr 0x562671952368 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x562671951738
|   | |   `-CXXThisExpr 0x562671952358 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5626719523e8 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5626719523c8 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x562671951b98 'do_nothing_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5626719524c0 <line:64:2, col:20> 'void *' lvalue '='
|     |-MemberExpr 0x562671952430 <col:2> 'void *' lvalue ->_thunk 0x5626719517b8
|     | `-CXXThisExpr 0x562671952420 <col:2> 'Timer *' implicit this
|     `-CStyleCastExpr 0x562671952498 <col:11, col:20> 'void *' <IntegralToPointer>
|       `-IntegerLiteral 0x562671952460 <col:20> 'int' 1
|-CXXMethodDecl 0x56267193cd10 <line:68:5, line:71:5> line:68:17 assign 'void (const Timer::do_nothing_t &)' inline
| |-ParmVarDecl 0x56267193cc80 <col:24, col:44> col:44 used unused 'const Timer::do_nothing_t &'
| `-CompoundStmt 0x562671952640 <col:52, line:71:5>
|   |-CStyleCastExpr 0x562671952530 <line:69:2, col:9> 'void' <ToVoid>
|   | `-DeclRefExpr 0x562671952500 <col:9> 'const Timer::do_nothing_t' lvalue ParmVar 0x56267193cc80 'unused' 'const Timer::do_nothing_t &'
|   `-CXXMemberCallExpr 0x562671952620 <line:70:2, col:9> 'void'
|     `-MemberExpr 0x5626719525f0 <col:2> '<bound member function type>' ->assign 0x56267193cbd0
|       `-CXXThisExpr 0x5626719525e0 <col:2> 'Timer *' implicit this
|-CXXMethodDecl 0x56267193cee0 <line:76:5, line:79:5> line:76:17 assign 'void (TimerCallback, void *)' inline
| |-ParmVarDecl 0x56267193cdc8 <col:24, col:38> col:38 used f 'TimerCallback':'void (*)(Timer *, void *)'
| |-ParmVarDecl 0x56267193ce48 <col:41, col:47> col:47 used user_data 'void *'
| `-CompoundStmt 0x5626719527c0 <col:58, line:79:5>
|   |-BinaryOperator 0x562671952708 <line:77:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5626719526a0 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x562671951678
|   | | `-MemberExpr 0x562671952670 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x562671951738
|   | |   `-CXXThisExpr 0x562671952660 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5626719526f0 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' <LValueToRValue>
|   |   `-DeclRefExpr 0x5626719526d0 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue ParmVar 0x56267193cdc8 'f' 'TimerCallback':'void (*)(Timer *, void *)'
|   `-BinaryOperator 0x5626719527a0 <line:78:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x562671952738 <col:2> 'void *' lvalue ->_thunk 0x5626719517b8
|     | `-CXXThisExpr 0x562671952728 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x562671952788 <col:11> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x562671952768 <col:11> 'void *' lvalue ParmVar 0x56267193ce48 'user_data' 'void *'
|-CXXMethodDecl 0x56267193d030 <line:84:5, line:87:5> line:84:10 assign 'void (Element *)'
| |-ParmVarDecl 0x56267193cfa0 <col:17, col:26> col:26 used element 'Element *'
| `-CompoundStmt 0x562671952958 <col:35, line:87:5>
|   |-BinaryOperator 0x562671952888 <line:85:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x562671952820 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x562671951678
|   | | `-MemberExpr 0x5626719527f0 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x562671951738
|   | |   `-CXXThisExpr 0x5626719527e0 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x562671952870 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x562671952850 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x562671951d70 'element_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x562671952938 <line:86:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5626719528b8 <col:2> 'void *' lvalue ->_thunk 0x5626719517b8
|     | `-CXXThisExpr 0x5626719528a8 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x562671952920 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x562671952908 <col:11> 'Element *' <LValueToRValue>
|         `-DeclRefExpr 0x5626719528e8 <col:11> 'Element *' lvalue ParmVar 0x56267193cfa0 'element' 'Element *'
|-CXXMethodDecl 0x56267193d178 <line:91:5, line:94:5> line:91:10 assign 'void (Task *)'
| |-ParmVarDecl 0x56267193d0e8 <col:17, col:23> col:23 used task 'Task *'
| `-CompoundStmt 0x562671952af0 <col:29, line:94:5>
|   |-BinaryOperator 0x562671952a20 <line:92:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5626719529b8 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x562671951678
|   | | `-MemberExpr 0x562671952988 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x562671951738
|   | |   `-CXXThisExpr 0x562671952978 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x562671952a08 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5626719529e8 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x562671951f48 'task_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x562671952ad0 <line:93:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x562671952a50 <col:2> 'void *' lvalue ->_thunk 0x5626719517b8
|     | `-CXXThisExpr 0x562671952a40 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x562671952ab8 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x562671952aa0 <col:11> 'Task *' <LValueToRValue>
|         `-DeclRefExpr 0x562671952a80 <col:11> 'Task *' lvalue ParmVar 0x56267193d0e8 'task' 'Task *'
|-CXXMethodDecl 0x56267193d268 <line:98:5, line:100:5> line:98:17 initialized 'bool () const' inline
| `-CompoundStmt 0x562671952bd0 <col:37, line:100:5>
|   `-ReturnStmt 0x562671952bc0 <line:99:2, col:19>
|     `-BinaryOperator 0x562671952ba0 <col:9, col:19> 'bool' '!='
|       |-ImplicitCastExpr 0x562671952b70 <col:9> 'Element *' <LValueToRValue>
|       | `-MemberExpr 0x562671952b20 <col:9> 'Element *const' lvalue ->_owner 0x562671951818
|       |   `-CXXThisExpr 0x562671952b10 <col:9> 'const Timer *' implicit this
|       `-ImplicitCastExpr 0x562671952b88 <col:19> 'Element *' <NullToPointer>
|         `-IntegerLiteral 0x562671952b50 <col:19> 'int' 0
|-CXXMethodDecl 0x56267193d328 <line:103:5, line:105:5> line:103:17 used scheduled 'bool () const' inline
| `-CompoundStmt 0x562671952c90 <col:35, line:105:5>
|   `-ReturnStmt 0x562671952c80 <line:104:2, col:23>
|     `-BinaryOperator 0x562671952c60 <col:9, col:23> 'bool' '!='
|       |-ImplicitCastExpr 0x562671952c48 <col:9> 'int' <LValueToRValue>
|       | `-MemberExpr 0x562671952bf8 <col:9> 'const int' lvalue ->_schedpos1 0x562671951498
|       |   `-CXXThisExpr 0x562671952be8 <col:9> 'const Timer *' implicit this
|       `-IntegerLiteral 0x562671952c28 <col:23> 'int' 0
|-CXXMethodDecl 0x56267193d3e8 <line:116:5, line:118:5> line:116:29 expiry_steady 'const Timestamp &() const' inline
| `-CompoundStmt 0x562671952cf8 <col:51, line:118:5>
|   `-ReturnStmt 0x562671952ce8 <line:117:2, col:9>
|     `-MemberExpr 0x562671952cb8 <col:9> 'const Timestamp' lvalue ->_expiry_s 0x5626719514f8
|       `-CXXThisExpr 0x562671952ca8 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x56267193d4a8 <line:131:5, line:136:5> line:131:22 expiry 'Timestamp () const' inline
| `-CompoundStmt 0x562671953250 <col:37, line:136:5>
|   `-IfStmt 0x562671953228 <line:132:2, line:135:13> has_else
|     |-ImplicitCastExpr 0x562671952db8 <line:132:6> 'bool' <MemberPointerToBoolean>
|     | `-ImplicitCastExpr 0x562671952da0 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const' <UserDefinedConversion>
|     |   `-CXXMemberCallExpr 0x562671952d80 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const'
|     |     `-MemberExpr 0x562671952d50 <col:6> '<bound member function type>' .operator int (Timestamp::*)() const 0x5626718b0298
|     |       `-MemberExpr 0x562671952d20 <col:6> 'const Timestamp' lvalue ->_expiry_s 0x5626719514f8
|     |         `-CXXThisExpr 0x562671952d10 <col:6> 'const Timer *' implicit this
|     |-ReturnStmt 0x562671953198 <line:133:6, col:72>
|     | `-ExprWithCleanups 0x562671953180 <col:13, col:72> 'Timestamp'
|     |   `-CXXConstructExpr 0x562671953150 <col:13, col:72> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |     `-MaterializeTemporaryExpr 0x562671953138 <col:13, col:72> 'Timestamp' xvalue
|     |       `-CXXOperatorCallExpr 0x562671953100 <col:13, col:72> 'Timestamp'
|     |         |-ImplicitCastExpr 0x5626719530e8 <col:45> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         | `-DeclRefExpr 0x5626719530c8 <col:45> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5626718dea70 'operator-' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |-CXXConstructExpr 0x562671953068 <col:13, col:43> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |         | `-MaterializeTemporaryExpr 0x562671953050 <col:13, col:43> 'Timestamp' xvalue
|     |         |   `-CXXOperatorCallExpr 0x562671952f78 <col:13, col:43> 'Timestamp'
|     |         |     |-ImplicitCastExpr 0x562671952f60 <col:23> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         |     | `-DeclRefExpr 0x562671952f40 <col:23> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5626718de730 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |     |-CXXConstructExpr 0x562671952ee0 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|     |         |     | `-MemberExpr 0x562671952de0 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x5626719514f8
|     |         |     |   `-CXXThisExpr 0x562671952dd0 <col:13> 'const Timer *' implicit this
|     |         |     `-MaterializeTemporaryExpr 0x562671952f28 <col:25, col:43> 'const Timestamp' lvalue
|     |         |       `-ImplicitCastExpr 0x562671952f10 <col:25, col:43> 'const Timestamp' <NoOp>
|     |         |         `-CallExpr 0x562671952ec0 <col:25, col:43> 'Timestamp'
|     |         |           `-ImplicitCastExpr 0x562671952ea8 <col:25, col:36> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |         |             `-DeclRefExpr 0x562671952e48 <col:25, col:36> 'Timestamp ()' lvalue CXXMethod 0x5626718d1d90 'recent' 'Timestamp ()'
|     |         `-MaterializeTemporaryExpr 0x5626719530b0 <col:47, col:72> 'const Timestamp' lvalue
|     |           `-ImplicitCastExpr 0x562671953098 <col:47, col:72> 'const Timestamp' <NoOp>
|     |             `-CallExpr 0x562671953030 <col:47, col:72> 'Timestamp'
|     |               `-ImplicitCastExpr 0x562671953018 <col:47, col:58> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |                 `-DeclRefExpr 0x562671952fe8 <col:47, col:58> 'Timestamp ()' lvalue CXXMethod 0x56267172d2e0 'recent_steady' 'Timestamp ()'
|     `-ReturnStmt 0x562671953218 <line:135:6, col:13>
|       `-CXXConstructExpr 0x5626719531e8 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|         `-MemberExpr 0x5626719531b8 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x5626719514f8
|           `-CXXThisExpr 0x5626719531a8 <col:13> 'const Timer *' implicit this
|-CXXMethodDecl 0x56267193d568 <line:139:5, line:141:5> line:139:20 router 'Router *() const' inline
| `-CompoundStmt 0x562671953338 <col:35, line:141:5>
|   `-ReturnStmt 0x562671953328 <line:140:2, col:24>
|     `-CXXMemberCallExpr 0x5626719532f0 <col:9, col:24> 'Router *'
|       `-MemberExpr 0x5626719532c0 <col:9, col:17> '<bound member function type>' ->router 0x562671930920
|         `-ImplicitCastExpr 0x562671953310 <col:9> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x5626719532a8 <col:9> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x562671953278 <col:9> 'Element *const' lvalue ->_owner 0x562671951818
|               `-CXXThisExpr 0x562671953268 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x56267193d628 <line:144:5, line:146:5> line:144:21 element 'Element *() const' inline
| `-CompoundStmt 0x5626719533b8 <col:37, line:146:5>
|   `-ReturnStmt 0x5626719533a8 <line:145:2, col:9>
|     `-ImplicitCastExpr 0x562671953390 <col:9> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x562671953360 <col:9> 'Element *const' lvalue ->_owner 0x562671951818
|         `-CXXThisExpr 0x562671953350 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x56267193d6e8 <line:149:5, line:151:5> line:149:26 thread 'RouterThread *() const' inline
| `-CompoundStmt 0x562671953438 <col:41, line:151:5>
|   `-ReturnStmt 0x562671953428 <line:150:2, col:9>
|     `-ImplicitCastExpr 0x562671953410 <col:9> 'RouterThread *' <LValueToRValue>
|       `-MemberExpr 0x5626719533e0 <col:9> 'RouterThread *const' lvalue ->_thread 0x562671951878
|         `-CXXThisExpr 0x5626719533d0 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x56267193d7b0 <line:154:5, col:26> col:9 home_thread_id 'int () const'
|-CXXMethodDecl 0x56267193d9a8 <line:171:5, col:55> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x56267193d860 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x56267193d8d8 <col:37, col:50> col:42 quiet 'bool' cinit
|   `-CXXBoolLiteralExpr 0x562671952158 <col:50> 'bool' false
|-CXXMethodDecl 0x56267193db28 <line:181:5, col:35> col:10 initialize 'void (Router *)'
| `-ParmVarDecl 0x56267193da68 <col:21, col:29> col:29 router 'Router *'
|-CXXMethodDecl 0x56267194fce0 <line:191:5, col:57> col:10 used schedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x56267193dbe0 <col:29, col:46> col:46 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x56267194fe28 <line:197:5, col:59> col:10 reschedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x56267194fd98 <col:31, col:48> col:48 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x56267194ff70 <line:210:5, col:50> col:17 used schedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x56267194fee0 <col:29, col:46> col:46 when 'const Timestamp &'
|-CXXMethodDecl 0x5626719500b8 <line:216:5, col:52> col:17 reschedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x562671950028 <col:31, col:48> col:48 when 'const Timestamp &'
|-CXXMethodDecl 0x562671950180 <line:221:5, line:223:5> line:221:17 schedule_now 'void ()' inline
| `-CompoundStmt 0x5626719535a0 <col:32, line:223:5>
|   `-ExprWithCleanups 0x562671953588 <line:222:2, col:47> 'void'
|     `-CXXMemberCallExpr 0x562671953530 <col:2, col:47> 'void'
|       |-MemberExpr 0x562671953460 <col:2> '<bound member function type>' ->schedule_at_steady 0x56267194fce0
|       | `-CXXThisExpr 0x562671953450 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x562671953570 <col:21, col:46> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x562671953558 <col:21, col:46> 'const Timestamp' <NoOp>
|           `-CallExpr 0x562671953510 <col:21, col:46> 'Timestamp'
|             `-ImplicitCastExpr 0x5626719534f8 <col:21, col:32> 'Timestamp (*)()' <FunctionToPointerDecay>
|               `-DeclRefExpr 0x5626719534c8 <col:21, col:32> 'Timestamp ()' lvalue CXXMethod 0x56267172d2e0 'recent_steady' 'Timestamp ()'
|-CXXMethodDecl 0x5626719502c0 <line:233:5, col:47> col:10 used schedule_after 'void (const Timestamp &)'
| `-ParmVarDecl 0x562671950230 <col:25, col:42> col:42 delta 'const Timestamp &'
|-CXXMethodDecl 0x562671950408 <line:239:5, line:241:5> line:239:17 used schedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x562671950378 <col:36, col:45> col:45 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x562671953728 <col:56, line:241:5>
|   `-ExprWithCleanups 0x562671953710 <line:240:2, col:40> 'void'
|     `-CXXMemberCallExpr 0x5626719536b8 <col:2, col:40> 'void'
|       |-MemberExpr 0x5626719535c8 <col:2> '<bound member function type>' ->schedule_after 0x5626719502c0
|       | `-CXXThisExpr 0x5626719535b8 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5626719536f8 <col:17, col:39> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5626719536e0 <col:17, col:39> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x562671953678 <col:17, col:39> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-ImplicitCastExpr 0x562671953648 <col:27> 'uint32_t':'unsigned int' <LValueToRValue>
|             | `-DeclRefExpr 0x562671953608 <col:27> 'uint32_t':'unsigned int' lvalue ParmVar 0x562671950378 'delta_sec' 'uint32_t':'unsigned int'
|             `-ImplicitCastExpr 0x562671953660 <col:38> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x562671953628 <col:38> 'int' 0
|-CXXMethodDecl 0x562671950550 <line:247:5, line:249:5> line:247:17 used schedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5626719504c0 <col:37, col:46> col:46 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x562671953998 <col:58, line:249:5>
|   `-ExprWithCleanups 0x562671953980 <line:248:2, col:49> 'void'
|     `-CXXMemberCallExpr 0x562671953928 <col:2, col:49> 'void'
|       |-MemberExpr 0x562671953750 <col:2> '<bound member function type>' ->schedule_after 0x5626719502c0
|       | `-CXXThisExpr 0x562671953740 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x562671953968 <col:17, col:48> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x562671953950 <col:17, col:48> 'const Timestamp' <NoOp>
|           `-CallExpr 0x5626719538d0 <col:17, col:48> 'Timestamp'
|             |-ImplicitCastExpr 0x5626719538b8 <col:17, col:28> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x562671953828 <col:17, col:28> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5626718b2088 'make_msec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x562671953910 <col:38> 'Timestamp::value_type':'long' <IntegralCast>
|               `-ImplicitCastExpr 0x5626719538f8 <col:38> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x562671953808 <col:38> 'uint32_t':'unsigned int' lvalue ParmVar 0x5626719504c0 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562671950698 <line:259:5, line:261:5> line:259:17 reschedule_after 'void (const Timestamp &)' inline
| |-ParmVarDecl 0x562671950608 <col:34, col:51> col:51 used delta 'const Timestamp &'
| `-CompoundStmt 0x562671953b78 <col:58, line:261:5>
|   `-ExprWithCleanups 0x562671953b60 <line:260:2, col:38> 'void'
|     `-CXXMemberCallExpr 0x562671953b08 <col:2, col:38> 'void'
|       |-MemberExpr 0x5626719539c0 <col:2> '<bound member function type>' ->schedule_at_steady 0x56267194fce0
|       | `-CXXThisExpr 0x5626719539b0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x562671953b48 <col:21, col:33> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x562671953b30 <col:21, col:33> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x562671953ad0 <col:21, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x562671953ab8 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x562671953a98 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5626718de730 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x562671953a68 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x562671953a50 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x562671953a00 <col:21> 'Timestamp' lvalue ->_expiry_s 0x5626719514f8
|             |     `-CXXThisExpr 0x5626719539f0 <col:21> 'Timer *' implicit this
|             `-DeclRefExpr 0x562671953a30 <col:33> 'const Timestamp' lvalue ParmVar 0x562671950608 'delta' 'const Timestamp &'
|-CXXMethodDecl 0x5626719507e0 <line:268:5, line:270:5> line:268:17 used reschedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x562671950750 <col:38, col:47> col:47 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x562671953e50 <col:58, line:270:5>
|   `-ExprWithCleanups 0x562671953e38 <line:269:2, col:79> 'void'
|     `-CXXMemberCallExpr 0x562671953de0 <col:2, col:79> 'void'
|       |-MemberExpr 0x562671953ba0 <col:2> '<bound member function type>' ->schedule_at_steady 0x56267194fce0
|       | `-CXXThisExpr 0x562671953b90 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x562671953e20 <col:21, col:78> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x562671953e08 <col:21, col:78> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x562671953da0 <col:21, col:78> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-BinaryOperator 0x562671953cd8 <col:31, col:49> 'unsigned int' '+'
|             | |-ImplicitCastExpr 0x562671953cc0 <col:31, col:45> 'unsigned int' <IntegralCast>
|             | | `-CXXMemberCallExpr 0x562671953c50 <col:31, col:45> 'Timestamp::seconds_type':'int'
|             | |   `-MemberExpr 0x562671953c20 <col:31, col:41> '<bound member function type>' .sec 0x56267172edd8
|             | |     `-ImplicitCastExpr 0x562671953c70 <col:31> 'const Timestamp' lvalue <NoOp>
|             | |       `-MemberExpr 0x562671953bf0 <col:31> 'Timestamp' lvalue ->_expiry_s 0x5626719514f8
|             | |         `-CXXThisExpr 0x562671953be0 <col:31> 'Timer *' implicit this
|             | `-ImplicitCastExpr 0x562671953ca8 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|             |   `-DeclRefExpr 0x562671953c88 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x562671950750 'delta_sec' 'uint32_t':'unsigned int'
|             `-CXXMemberCallExpr 0x562671953d68 <col:60, col:77> 'uint32_t':'unsigned int'
|               `-MemberExpr 0x562671953d38 <col:60, col:70> '<bound member function type>' .subsec 0x56267172f4d0
|                 `-ImplicitCastExpr 0x562671953d88 <col:60> 'const Timestamp' lvalue <NoOp>
|                   `-MemberExpr 0x562671953d08 <col:60> 'Timestamp' lvalue ->_expiry_s 0x5626719514f8
|                     `-CXXThisExpr 0x562671953cf8 <col:60> 'Timer *' implicit this
|-CXXMethodDecl 0x562671950928 <line:277:5, line:279:5> line:277:17 used reschedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x562671950898 <col:39, col:48> col:48 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x562671954188 <col:60, line:279:5>
|   `-ExprWithCleanups 0x562671954170 <line:278:2, col:65> 'void'
|     `-CXXMemberCallExpr 0x562671954118 <col:2, col:65> 'void'
|       |-MemberExpr 0x562671953e78 <col:2> '<bound member function type>' ->schedule_at_steady 0x56267194fce0
|       | `-CXXThisExpr 0x562671953e68 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x562671954158 <col:21, col:64> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x562671954140 <col:21, col:64> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x5626719540e0 <col:21, col:64> 'Timestamp'
|             |-ImplicitCastExpr 0x5626719540c8 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5626719540a8 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5626718de730 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x562671954048 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x562671954030 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x562671953eb8 <col:21> 'Timestamp' lvalue ->_expiry_s 0x5626719514f8
|             |     `-CXXThisExpr 0x562671953ea8 <col:21> 'Timer *' implicit this
|             `-MaterializeTemporaryExpr 0x562671954090 <col:33, col:64> 'const Timestamp' lvalue
|               `-ImplicitCastExpr 0x562671954078 <col:33, col:64> 'const Timestamp' <NoOp>
|                 `-CallExpr 0x562671953fd8 <col:33, col:64> 'Timestamp'
|                   |-ImplicitCastExpr 0x562671953fc0 <col:33, col:44> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|                   | `-DeclRefExpr 0x562671953f90 <col:33, col:44> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5626718b2088 'make_msec' 'Timestamp (Timestamp::value_type)'
|                   `-ImplicitCastExpr 0x562671954018 <col:54> 'Timestamp::value_type':'long' <IntegralCast>
|                     `-ImplicitCastExpr 0x562671954000 <col:54> 'uint32_t':'unsigned int' <LValueToRValue>
|                       `-DeclRefExpr 0x562671953f70 <col:54> 'uint32_t':'unsigned int' lvalue ParmVar 0x562671950898 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5626719509f0 <line:285:5, col:21> col:10 used unschedule 'void ()'
|-CXXMethodDecl 0x562671950ab0 <line:288:5, line:291:5> line:288:17 clear 'void ()' inline
| `-CompoundStmt 0x562671954650 <col:25, line:291:5>
|   |-CXXMemberCallExpr 0x5626719541e0 <line:289:2, col:13> 'void'
|   | `-MemberExpr 0x5626719541b0 <col:2> '<bound member function type>' ->unschedule 0x5626719509f0
|   |   `-CXXThisExpr 0x5626719541a0 <col:2> 'Timer *' implicit this
|   `-ExprWithCleanups 0x562671954638 <line:290:2, col:24> 'Timestamp' lvalue
|     `-CXXOperatorCallExpr 0x562671954600 <col:2, col:24> 'Timestamp' lvalue
|       |-ImplicitCastExpr 0x5626719545e8 <col:12> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x562671954298 <col:12> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x5626715c6378 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|       |-MemberExpr 0x562671954210 <col:2> 'Timestamp' lvalue ->_expiry_s 0x5626719514f8
|       | `-CXXThisExpr 0x562671954200 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x562671954280 <col:14, col:24> 'Timestamp' xvalue
|         `-CXXTemporaryObjectExpr 0x562671954250 <col:14, col:24> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x562671950b70 <line:304:5, line:310:5> line:304:29 adjustment 'Timestamp ()' static inline
| `-CompoundStmt 0x5626719549a8 <col:42, line:310:5>
|   |-IfStmt 0x5626719547f0 <line:306:2, line:307:23>
|   | |-CallExpr 0x562671954720 <line:306:6, col:30> 'bool'
|   | | `-ImplicitCastExpr 0x562671954708 <col:6, col:17> 'bool (*)()' <FunctionToPointerDecay>
|   | |   `-DeclRefExpr 0x5626719546a8 <col:6, col:17> 'bool ()' lvalue CXXMethod 0x5626718d0200 'warp_jumping' 'bool ()'
|   | `-ReturnStmt 0x5626719547e0 <line:307:6, col:23>
|   |   `-ExprWithCleanups 0x5626719547c8 <col:13, col:23> 'Timestamp'
|   |     `-CXXConstructExpr 0x562671954798 <col:13, col:23> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x562671954780 <col:13, col:23> 'Timestamp' xvalue
|   |         `-CXXTemporaryObjectExpr 0x562671954750 <col:13, col:23> 'Timestamp' 'void ()'
|   `-ReturnStmt 0x562671954998 <line:309:2, col:33>
|     `-ExprWithCleanups 0x562671954980 <col:9, col:33> 'Timestamp'
|       `-CXXConstructExpr 0x562671954950 <col:9, col:33> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x562671954938 <col:9, col:33> 'Timestamp' xvalue
|           `-CallExpr 0x5626719548f8 <col:9, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x5626719548e0 <col:9, col:20> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5626719548b0 <col:9, col:20> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5626718b23a0 'make_usec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x562671954920 <col:30> 'Timestamp::value_type':'long' <IntegralCast>
|               `-IntegerLiteral 0x562671954890 <col:30> 'int' 500
|-CXXMethodDecl 0x562671950cb0 <line:317:5, col:80> col:17 schedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x562671950c20 <col:34, col:43> col:43 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x562671950d58 <col:69> "" ""
|-CXXMethodDecl 0x562671950e68 <line:323:5, col:81> col:17 schedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x562671950dd8 <col:35, col:44> col:44 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x562671950f10 <col:70> "" ""
|-CXXMethodDecl 0x562671951020 <line:329:5, col:82> col:17 reschedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x562671950f90 <col:36, col:45> col:45 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5626719510c8 <col:71> "" ""
|-CXXMethodDecl 0x5626719511d8 <line:335:5, col:83> col:17 reschedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x562671951148 <col:37, col:46> col:46 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x562671951280 <col:72> "" ""
|-EnumDecl 0x5626719512f0 <line:337:5, col:27> col:5
| `-EnumConstantDecl 0x5626719513f0 <col:12, col:25> col:12 behind_sec 'Timer::(anonymous enum at ../dummy_inc/click/timer.hh:337:5)'
|   `-ImplicitCastExpr 0x562671951440 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5626719513d0 <col:25> 'int' Int: 1
|       `-IntegerLiteral 0x5626719513b0 <col:25> 'int' 1
|-AccessSpecDecl 0x562671951458 <line:339:3, col:10> col:3 private
|-FieldDecl 0x562671951498 <line:341:5, col:9> col:9 referenced _schedpos1 'int'
|-FieldDecl 0x5626719514f8 <line:342:5, col:15> col:15 referenced _expiry_s 'Timestamp'
|-CXXRecordDecl 0x562671951548 <line:343:5, line:345:5> line:343:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x562671951678 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
| `-CXXDestructorDecl 0x562671952168 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-FieldDecl 0x562671951738 <col:5, line:345:7> col:7 referenced _hook 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)'
|-FieldDecl 0x5626719517b8 <line:346:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x562671951818 <line:347:5, col:14> col:14 referenced _owner 'Element *'
|-FieldDecl 0x562671951878 <line:348:5, col:19> col:19 referenced _thread 'RouterThread *'
|-CXXMethodDecl 0x5626719519c8 <line:350:5, col:36> col:12 operator= 'Timer &(const Timer &)'
| `-ParmVarDecl 0x5626719518d8 <col:22, col:35> col:35 x 'const Timer &'
|-CXXMethodDecl 0x562671951b98 <line:352:5, col:58> col:17 used do_nothing_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x562671951a80 <col:33, col:40> col:40 t 'Timer *'
| `-ParmVarDecl 0x562671951b00 <col:43, col:49> col:49 user_data 'void *'
|-CXXMethodDecl 0x562671951d70 <line:353:5, col:55> col:17 used element_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x562671951c58 <col:30, col:37> col:37 t 'Timer *'
| `-ParmVarDecl 0x562671951cd8 <col:40, col:46> col:46 user_data 'void *'
|-CXXMethodDecl 0x562671951f48 <line:354:5, col:52> col:17 used task_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x562671951e30 <col:27, col:34> col:34 t 'Timer *'
| `-ParmVarDecl 0x562671951eb0 <col:37, col:43> col:43 user_data 'void *'
`-FriendDecl 0x562671952118 <line:356:5, col:18> col:12 'class TimerSet':'TimerSet'

Layout: <CGRecordLayout
  LLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  NonVirtualBaseLLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<struct in_addr>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   struct in_addr * _ptr
        24 |   struct in_addr _slot
        24 |     in_addr_t s_addr
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned short>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned short * _ptr
        24 |   unsigned short _slot
           | [sizeof=32, dsize=26, align=8,
           |  nvsize=26, nvalign=8]

*** Dumping AST Record Layout
         0 | struct DefaultArg<struct in_addr> (empty)
         0 |   class IPAddressArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5626717324c8 <../dummy_inc/click/ipaddress.hh:399:1, col:69> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IPAddressArg'
|-TemplateArgument type 'in_addr'
|-CXXRecordDecl 0x562671732728 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x562671a725e8 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x562671a726e8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<struct in_addr> &)' inline default trivial noexcept-unevaluated 0x562671a726e8
| `-ParmVarDecl 0x562671a727f8 <col:19> col:19 'const DefaultArg<struct in_addr> &'
|-CXXConstructorDecl 0x562671a72898 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<struct in_addr> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x562671a729a8 <col:19> col:19 used 'DefaultArg<struct in_addr> &&'
| |-CXXCtorInitializer 'IPAddressArg'
| | `-CXXConstructExpr 0x562671a732e0 <col:19> 'IPAddressArg' 'void (IPAddressArg &&) noexcept'
| |   `-ImplicitCastExpr 0x562671a732b0 <col:19> 'IPAddressArg' xvalue <UncheckedDerivedToBase (IPAddressArg)>
| |     `-CXXStaticCastExpr 0x562671a73280 <col:19> 'DefaultArg<struct in_addr>' xvalue static_cast<struct DefaultArg<struct in_addr> &&> <NoOp>
| |       `-DeclRefExpr 0x562671a73250 <col:19> 'DefaultArg<struct in_addr>' lvalue ParmVar 0x562671a729a8 '' 'DefaultArg<struct in_addr> &&'
| `-CompoundStmt 0x562671a73350 <col:19>
`-CXXDestructorDecl 0x562671a72a48 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned short>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5626719ec7f0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5626719ec908 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x5626719ec998 <col:16, col:22> col:16 public
|-EnumDecl 0x5626719ec9c0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x5626719ecac0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5626719ecd10 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5626719ecaa0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5626719eca80 <col:21> 'int' 0
| |-EnumConstantDecl 0x5626719ecb50 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5626719ecd28 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5626719ecb30 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x5626719ecb10 <col:24> 'int' 22
| |-EnumConstantDecl 0x5626719ecbe0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5626719ecd40 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5626719ecbc0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x5626719ecba0 <col:24> 'int' 34
| |-EnumConstantDecl 0x5626719ecc70 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5626719ecd58 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5626719ecc50 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x5626719ecc30 <col:25> 'int' 95
| `-EnumConstantDecl 0x5626719eccc0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x5626719ee6d0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5626719eeb08 <col:7>
|-CXXConstructorDecl 0x5626719ee7d8 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x5626719ee7d8
| `-ParmVarDecl 0x5626719ee8e8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x5626719ee988 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5626719eea98 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x5626718d49a0 <col:7>
`-CXXDestructorDecl 0x5626719f0c08 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5626719ecd88 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x5626719ecee8 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x5626719ecf78 <col:32, col:38> col:32 public
|-TypedefDecl 0x5626719ecfb0 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x562671512170 'uint32_t' sugar
|   |-Typedef 0x562671425408 'uint32_t'
|   `-TypedefType 0x5626713fe440 '__uint32_t' sugar
|     |-Typedef 0x5626713fe038 '__uint32_t'
|     `-BuiltinType 0x5626713bc410 'unsigned int'
|-CXXConstructorDecl 0x5626719ed0f8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x5626719ed020 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x5626719ee5d8 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5626719eeb18 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5626719ede90 'base' 'int'
| | `-ImplicitCastExpr 0x5626719ee678 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5626719ee638 <col:16> 'int' lvalue ParmVar 0x5626719ed020 'b' 'int'
| `-CompoundStmt 0x5626719eeb88 <col:19, line:1046:5>
|-CXXMethodDecl 0x5626719ed5f0 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x5626719ed1c0 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x5626719ed240 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x5626719ed2b8 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x5626719ed338 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x5626719ed3f8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x5626719ed478 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x5626719eda48 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x5626719ed6c0 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5626719ed9a8 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5626719ed768 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x5626719ed808 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x5626719ed880 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5626719ee5f8 <col:82> 'const ArgContext' lvalue Var 0x5626719e40c8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5626719efab8 <col:94, line:1067:5>
| |   |-DeclStmt 0x5626719eed18 <line:1054:9, col:64>
| |   | `-VarDecl 0x5626719eeba8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x5626719eecd0 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x5626719eef38 <line:1055:9, col:91>
| |   | `-VarDecl 0x5626719eed48 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x5626719eef10 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x5626719eeef0 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x5626719eeea0 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x5626719eee80 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x5626719eee28 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x5626719eedd8 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x5626719eee08 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x5626719eee68 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x5626719eee48 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x5626719eeed0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x5626719ef098 <line:1056:9, col:27>
| |   | `-VarDecl 0x5626719ef030 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x5626719ef4e0 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x5626719ef410 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x5626719ef390 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5626718dc158 0x562671725738 0x562671725410 0x562671716bf0 0x5626717168a0 0x562671716190 0x5626716e8b00 0x562671674fc0
| |   | | |-CallExpr 0x5626719ef2d0 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x5626719ef0c0 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x5626719ef170 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5626719ef140 <col:19, col:23> '<bound member function type>' .begin 0x562671705df8
| |   | | | |   `-DeclRefExpr 0x5626719ef120 <col:19> 'const String' lvalue ParmVar 0x5626719ed768 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x5626719ef1e0 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5626719ef1b0 <col:32, col:36> '<bound member function type>' .end 0x562671706010
| |   | | | |   `-DeclRefExpr 0x5626719ef190 <col:32> 'const String' lvalue ParmVar 0x5626719ed768 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x5626719ef200 <col:43> 'const bool' lvalue Var 0x5626719eeba8 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x5626719ef268 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x5626719ef248 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x5626719ef290 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x5626719ef030 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x5626719ef2b0 <col:73> 'const int' lvalue Var 0x5626719eed48 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x5626719ef370 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x5626719ef340 <col:16, col:20> '<bound member function type>' .end 0x562671706010
| |   | |     `-DeclRefExpr 0x5626719ef320 <col:16> 'const String' lvalue ParmVar 0x5626719ed768 'str' 'const String &'
| |   | `-BinaryOperator 0x5626719ef4c0 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x5626719ef458 <col:13> 'int' lvalue ->status 0x5626719edef8
| |   |   | `-CXXThisExpr 0x5626719ef448 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x5626719ef4a8 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x5626719ef488 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5626719ecb50 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x5626719ef730 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x5626719ef618 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x5626719ef600 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x5626719ef5e8 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x5626719ef508 <col:13> 'int' lvalue ->status 0x5626719edef8
| |   | | |     `-CXXThisExpr 0x5626719ef4f8 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x5626719ef5c8 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x5626719ef598 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x5626719ef548 <col:23> 'int' lvalue ->status 0x5626719edef8
| |   | |   |   `-CXXThisExpr 0x5626719ef538 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x5626719ef5b0 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x5626719ef578 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5626719ecbe0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x5626719ef710 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x5626719ef6b0 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x5626719ef658 <col:13, col:18> '<bound member function type>' .error 0x56267199b860
| |   |   | | `-DeclRefExpr 0x5626719ef638 <col:13> 'const ArgContext' lvalue ParmVar 0x5626719ed880 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x5626719ef6d8 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x5626719ef688 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x5626719ef700 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x5626719ef6f0 <col:20> 'bool' false
| |   |-DeclStmt 0x5626719ef908 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x5626719ef8b0 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x5626719ef840 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x5626719efa68 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x5626719ef920 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x5626716a8f88
| |   | |-DeclRefExpr 0x5626719ef968 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x5626719ef030 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x5626719efa38 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x5626719ef9b0 <col:64> 'V' lvalue ParmVar 0x5626719ed808 'result' 'V &'
| |   `-ReturnStmt 0x5626719efaa8 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x5626719efa98 <col:16> 'bool' true
| `-CXXMethodDecl 0x5626718d8398 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned short &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned short'
|   |-ParmVarDecl 0x5626718d8170 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x5626718d8248 <col:46, col:49> col:49 used result 'unsigned short &'
|   |-ParmVarDecl 0x5626718d82b0 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x5626718da130 <col:94, line:1067:5>
|     |-DeclStmt 0x5626718d8ba8 <line:1054:9, col:64>
|     | `-VarDecl 0x5626718d89c8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x5626718d8b38 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x5626718d8b08 <col:36, col:55> 'const bool' lvalue Var 0x562671693ff0 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x5626718d8d88 <line:1055:9, col:91>
|     | `-VarDecl 0x5626718d8bc0 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x5626718d8d08 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x5626718d8cf0 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x5626718d8cd0 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x5626718d8cb0 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x5626718d8c90 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x5626718d8c58 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x5626718d8c38 <col:36, col:44> 'unsigned long' sizeof 'unsigned short':'unsigned short'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x5626719eee08 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x5626718d8c78 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x5626719eee48 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x5626719eeed0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x5626718d8f20 <line:1056:9, col:27>
|     | `-VarDecl 0x5626718d8eb8 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x5626718d93a8 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x5626718d9350 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x5626718d9208 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x5626718d91d8 <col:13> '<bound member function type>' ->parse 0x5626719ed5f0
|     | | | | `-CXXThisExpr 0x5626718d91c8 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x5626718d9068 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5626718d9038 <col:19, col:23> '<bound member function type>' .begin 0x562671705df8
|     | | | |   `-DeclRefExpr 0x5626718d9018 <col:19> 'const String' lvalue ParmVar 0x5626718d8170 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x5626718d90d8 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5626718d90a8 <col:32, col:36> '<bound member function type>' .end 0x562671706010
|     | | | |   `-DeclRefExpr 0x5626718d9088 <col:32> 'const String' lvalue ParmVar 0x5626718d8170 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x5626718d9278 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x5626718d9258 <col:43> 'const bool' lvalue Var 0x5626718d89c8 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x5626718d9160 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x5626718d9148 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x5626718d9128 <col:58, col:66> 'unsigned long' sizeof 'unsigned short':'unsigned short'
|     | | | |-ImplicitCastExpr 0x5626718d9290 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x5626718d9188 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x5626718d8eb8 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x5626718d92c8 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x5626718d92a8 <col:73> 'const int' lvalue Var 0x5626718d8bc0 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x5626718d9330 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x5626718d9300 <col:16, col:20> '<bound member function type>' .end 0x562671706010
|     | |     `-DeclRefExpr 0x5626718d92e0 <col:16> 'const String' lvalue ParmVar 0x5626718d8170 'str' 'const String &'
|     | `-BinaryOperator 0x5626718d9388 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x5626719ef458 <col:13> 'int' lvalue ->status 0x5626719edef8
|     |   | `-CXXThisExpr 0x5626719ef448 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x5626718d9370 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x5626719ef488 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5626719ecb50 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x5626718d9520 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x5626718d9440 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x5626718d9428 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x5626718d9410 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x5626719ef508 <col:13> 'int' lvalue ->status 0x5626719edef8
|     | | |     `-CXXThisExpr 0x5626719ef4f8 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x5626718d93f0 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x5626718d93c0 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x5626719ef548 <col:23> 'int' lvalue ->status 0x5626719edef8
|     | |   |   `-CXXThisExpr 0x5626719ef538 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x5626718d93d8 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x5626719ef578 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5626719ecbe0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x5626718d9500 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x5626718d94b0 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x5626718d9480 <col:13, col:18> '<bound member function type>' .error 0x56267199b860
|     |   | | `-DeclRefExpr 0x5626718d9460 <col:13> 'const ArgContext' lvalue ParmVar 0x5626718d82b0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x5626718d94d8 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x5626719ef688 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x5626718d94f0 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x5626719ef6f0 <col:20> 'bool' false
|     |-DeclStmt 0x5626718d9a68 <line:1064:9, col:64>
|     | `-TypedefDecl 0x5626718d9a10 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned short>::type':'unsigned short'
|     |   `-ElaboratedType 0x5626718d99c0 'typename make_unsigned<unsigned short>::type' sugar
|     |     `-TypedefType 0x5626718d99a0 'make_unsigned<unsigned short>::type' sugar
|     |       |-Typedef 0x5626718d9930 'type'
|     |       `-ElaboratedType 0x5626718d98e0 'typename integer_traits<unsigned short>::unsigned_type' sugar
|     |         `-TypedefType 0x5626718d98c0 'integer_traits<unsigned short>::unsigned_type' sugar
|     |           |-Typedef 0x562671694148 'unsigned_type'
|     |           `-BuiltinType 0x5626713bc3f0 'unsigned short'
|     |-CallExpr 0x5626718da0c0 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x5626718da0a8 <col:9> 'void (*)(const unsigned int *, unsigned short &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x5626718da028 <col:9> 'void (const unsigned int *, unsigned short &)' lvalue Function 0x5626718d9f08 'extract_integer' 'void (const unsigned int *, unsigned short &)' (FunctionTemplate 0x5626716a8f88 'extract_integer')
|     | |-ImplicitCastExpr 0x5626718da108 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x5626718da0f0 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x5626718d9ac8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x5626718d8eb8 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x5626718d9b98 <col:28, col:70> 'unsigned_v_type':'unsigned short' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x5626718d9b48 <col:64> 'unsigned short':'unsigned short' lvalue ParmVar 0x5626718d8248 'result' 'unsigned short &'
|     `-ReturnStmt 0x5626718da120 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x5626719efa98 <col:16> 'bool' true
|-FunctionTemplateDecl 0x5626719ede08 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x5626719edab8 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5626719edd68 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5626719edb68 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x5626719edc08 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x5626719edc80 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5626719ee618 <col:71> 'const ArgContext' lvalue Var 0x5626719e40c8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5626719f0228 <col:83, line:1083:5>
| |   |-DeclStmt 0x5626719efb80 <line:1071:9, col:12>
| |   | `-VarDecl 0x5626719efb18 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x5626719f0200 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x5626719efe10 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x5626719efc98 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x5626719efc60 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x5626719efba8 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x5626719efc00 <col:31> 'const String' lvalue ParmVar 0x5626719edb68 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x5626719efc20 <col:36> 'V' lvalue Var 0x5626719efb18 'x' 'V'
| |     | |   `-DeclRefExpr 0x5626719efc40 <col:39> 'const ArgContext' lvalue ParmVar 0x5626719edc80 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x5626719efdf0 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x5626719efdd0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x5626719efdb8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x5626719efda0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x5626719efcc0 <col:17> 'int' lvalue ->status 0x5626719edef8
| |     |     |     `-CXXThisExpr 0x5626719efcb0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x5626719efd80 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x5626719efd50 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x5626719efd00 <col:27> 'int' lvalue ->status 0x5626719edef8
| |     |       |   `-CXXThisExpr 0x5626719efcf0 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x5626719efd68 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x5626719efd30 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5626719ecbe0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x5626719efe40 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x5626719efe30 <col:20> 'bool' false
| |     `-IfStmt 0x5626719f01d8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x5626719efee0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x5626719efeb0 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5626719efe60 <col:18> 'int' lvalue ->status 0x5626719edef8
| |       | |   `-CXXThisExpr 0x5626719efe50 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x5626719efec8 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x5626719efe90 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5626719ecbe0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x5626719f0118 <col:42, line:1079:9>
| |       | |-CallExpr 0x5626719f00c0 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x5626719eff10 <line:1076:13> '<bound member function type>' ->range_error 0x5626719ee508
| |       | | | `-CXXThisExpr 0x5626719eff00 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x5626719eff40 <col:25> 'const ArgContext' lvalue ParmVar 0x5626719edc80 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x5626719f0020 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x5626719f0098 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x5626719f0078 <col:43> 'V' lvalue Var 0x5626719efb18 'x' 'V'
| |       | `-ReturnStmt 0x5626719f0108 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x5626719f00f8 <col:20> 'bool' false
| |       `-CompoundStmt 0x5626719f01b8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x5626719f0178 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x5626719f0138 <col:13> 'V' lvalue ParmVar 0x5626719edc08 'result' 'V &'
| |         | `-DeclRefExpr 0x5626719f0158 <col:22> 'V' lvalue Var 0x5626719efb18 'x' 'V'
| |         `-ReturnStmt 0x5626719f01a8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x5626719f0198 <col:20> 'bool' true
| `-CXXMethodDecl 0x5626718d7d58 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned short &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned short'
|   |-ParmVarDecl 0x5626718d7af0 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x5626718d7bc8 <col:35, col:38> col:38 used result 'unsigned short &'
|   |-ParmVarDecl 0x5626718d7c30 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x5626718d89a8 <col:83, line:1083:5>
|     |-DeclStmt 0x5626718d7fe0 <line:1071:9, col:12>
|     | `-VarDecl 0x5626718d7f78 <col:9, col:11> col:11 used x 'unsigned short':'unsigned short'
|     `-IfStmt 0x5626718d8980 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x5626718d8610 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x5626718d8538 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x5626718d8500 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x5626718d84b8 <col:14> '<bound member function type>' ->parse_saturating 0x5626718d8398
|       | |   | `-CXXThisExpr 0x5626718d84a8 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x5626718d8050 <col:31> 'const String' lvalue ParmVar 0x5626718d7af0 'str' 'const String &'
|       | |   |-DeclRefExpr 0x5626718d8070 <col:36> 'unsigned short':'unsigned short' lvalue Var 0x5626718d7f78 'x' 'unsigned short':'unsigned short'
|       | |   `-DeclRefExpr 0x5626718d8090 <col:39> 'const ArgContext' lvalue ParmVar 0x5626718d7c30 'args' 'const ArgContext &'
|       | `-ParenExpr 0x5626718d85f0 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x5626718d85d0 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x5626718d85b8 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x5626718d85a0 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x5626719efcc0 <col:17> 'int' lvalue ->status 0x5626719edef8
|       |     |     `-CXXThisExpr 0x5626719efcb0 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x5626718d8580 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x5626718d8550 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x5626719efd00 <col:27> 'int' lvalue ->status 0x5626719edef8
|       |       |   `-CXXThisExpr 0x5626719efcf0 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x5626718d8568 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x5626719efd30 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5626719ecbe0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x5626718d8630 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x5626719efe30 <col:20> 'bool' false
|       `-IfStmt 0x5626718d8958 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x5626718d8670 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x5626718d8640 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x5626719efe60 <col:18> 'int' lvalue ->status 0x5626719edef8
|         | |   `-CXXThisExpr 0x5626719efe50 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x5626718d8658 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x5626719efe90 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5626719ecbe0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x5626718d8890 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x5626718d8800 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x5626719eff10 <line:1076:13> '<bound member function type>' ->range_error 0x5626719ee508
|         | | | `-CXXThisExpr 0x5626719eff00 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x5626718d8690 <col:25> 'const ArgContext' lvalue ParmVar 0x5626718d7c30 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x5626718d8868 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x5626718d8838 <col:31, col:50> 'const bool' lvalue Var 0x562671693ff0 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x5626718d87d8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x5626718d87c0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x5626718d87a8 <col:43> 'unsigned short':'unsigned short' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x5626718d8788 <col:43> 'unsigned short':'unsigned short' lvalue Var 0x5626718d7f78 'x' 'unsigned short':'unsigned short'
|         | `-ReturnStmt 0x5626718d8880 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x5626719f00f8 <col:20> 'bool' false
|         `-CompoundStmt 0x5626718d8938 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x5626718d8908 <line:1080:13, col:22> 'unsigned short':'unsigned short' lvalue '='
|           | |-DeclRefExpr 0x5626718d88b0 <col:13> 'unsigned short':'unsigned short' lvalue ParmVar 0x5626718d7bc8 'result' 'unsigned short &'
|           | `-ImplicitCastExpr 0x5626718d88f0 <col:22> 'unsigned short':'unsigned short' <LValueToRValue>
|           |   `-DeclRefExpr 0x5626718d88d0 <col:22> 'unsigned short':'unsigned short' lvalue Var 0x5626718d7f78 'x' 'unsigned short':'unsigned short'
|           `-ReturnStmt 0x5626718d8928 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x5626719f0198 <col:20> 'bool' true
|-FieldDecl 0x5626719ede90 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x5626719edef8 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x5626719edf48 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x5626719ee200 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x5626719edf88 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x5626719ee008 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x5626719ee080 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x5626719ee100 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x5626719ee508 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x5626719ee2d0 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x5626719ee348 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x5626719ee3e0 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x5626719f0a88 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x5626719f0a88
| `-ParmVarDecl 0x5626719f0b98 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x5626719f0d18 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5626719f0e28 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5626718d49b0 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5626718d4980 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x5626718d4950 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5626718d4920 <col:7> 'IntArg' lvalue ParmVar 0x5626719f0e28 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5626719ede90 'base' 'int'
| | `-ImplicitCastExpr 0x5626718d4aa8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5626718d4a78 <col:7> 'int' xvalue .base 0x5626719ede90
| |     `-CXXStaticCastExpr 0x5626718d4a48 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5626718d4a18 <col:7> 'IntArg' lvalue ParmVar 0x5626719f0e28 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5626719edef8 'status' 'int'
| | `-ImplicitCastExpr 0x5626718d4b78 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5626718d4b48 <col:7> 'int' xvalue .status 0x5626719edef8
| |     `-CXXStaticCastExpr 0x5626718d4b18 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5626718d4ae8 <col:7> 'IntArg' lvalue ParmVar 0x5626719f0e28 '' 'IntArg &&'
| `-CompoundStmt 0x5626718d4bd0 <col:7>
`-CXXDestructorDecl 0x5626718d3b10 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5626719f49e0 <../dummy_inc/click/args.hh:1180:1, col:63> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned short'
|-CXXRecordDecl 0x5626719f4c38 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5626718d3a38 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5626718d3fb0 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x5626718d3f90 <<invalid sloc>> 'int'
| `-CompoundStmt 0x5626718d4020 <col:19>
|-CXXConstructorDecl 0x5626718d3c18 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned short> &)' inline default trivial noexcept-unevaluated 0x5626718d3c18
| `-ParmVarDecl 0x5626718d3d28 <col:19> col:19 'const DefaultArg<unsigned short> &'
|-CXXConstructorDecl 0x5626718d3dc8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned short> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5626718d3ed8 <col:19> col:19 used 'DefaultArg<unsigned short> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5626718d4be0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5626718d4900 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x5626718d48d0 <col:19> 'DefaultArg<unsigned short>' xvalue static_cast<struct DefaultArg<unsigned short> &&> <NoOp>
| |       `-DeclRefExpr 0x5626718d48a0 <col:19> 'DefaultArg<unsigned short>' lvalue ParmVar 0x5626718d3ed8 '' 'DefaultArg<unsigned short> &&'
| `-CompoundStmt 0x5626718d4c50 <col:19>
`-CXXDestructorDecl 0x5626718d4060 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.2 = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg.2 = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
