
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct libdivide_u32_t
         0 |   uint32_t magic
         4 |   uint8_t more
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPFlowID
         0 |   class IPAddress _saddr
         0 |     uint32_t _addr
         4 |   class IPAddress _daddr
         4 |     uint32_t _addr
         8 |   uint16_t _sport
        10 |   uint16_t _dport
           | [sizeof=12, dsize=12, align=4,
           |  nvsize=12, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPRewriterEntry
         0 |   class IPFlowID _flowid
         0 |     class IPAddress _saddr
         0 |       uint32_t _addr
         4 |     class IPAddress _daddr
         4 |       uint32_t _addr
         8 |     uint16_t _sport
        10 |     uint16_t _dport
   12:0-23 |   uint32_t _output
        15 |   uint8_t _direction
        16 |   class IPRewriterEntry * _hashnext
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<8> >
         0 |   vector_memory<class sized_array_memory<8> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class IPRewriterFlow *>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | union IPRewriterInput::(anonymous at ../elements/ip/iprewriterbase.hh:23:5)
         0 |   class IPRewriterPattern * pattern
         0 |   class IPMapper * mapper
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPRewriterInput
         0 |   class IPRewriterBase * owner
         8 |   int owner_input
        12 |   int kind
        16 |   int foutput
        24 |   class IPRewriterBase * reply_element
        32 |   int routput
        36 |   uint32_t count
        40 |   uint32_t failures
        48 |   union IPRewriterInput::(anonymous at ../elements/ip/iprewriterbase.hh:23:5) u
        48 |     class IPRewriterPattern * pattern
        48 |     class IPMapper * mapper
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | class HashContainer_const_iterator<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> >
         0 |   class IPRewriterEntry * _element
         8 |   class IPRewriterEntry ** _pprev
        16 |   HashContainer_const_iterator<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> >::bucket_count_type _bucket
        24 |   const HashContainer<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > * _hc
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping AST Record Layout
         0 | class HashContainer_iterator<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> >
         0 |   class HashContainer_const_iterator<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > (base)
         0 |     class IPRewriterEntry * _element
         8 |     class IPRewriterEntry ** _pprev
        16 |     HashContainer_const_iterator<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> >::bucket_count_type _bucket
        24 |     const HashContainer<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > * _hc
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping AST Record Layout
         0 | struct ICMPRewriter::MapEntry
         0 |   class IPRewriterBase * _elt
         8 |   int _port_offset
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | struct StringAccum::rep_t
         0 |   unsigned char * s
         8 |   int len
        12 |   int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed24f6118 prev 0x55bed24ed8b8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bed24f6210 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55bed24f62a0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55bed24f6318 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55bed24f63d8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55bed24f64a0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55bed24f6618 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55bed24f6550 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55bed24f66c0 <col:24>
| `-OptimizeNoneAttr 0x55bed24f6718 <col:34>
|-CXXMethodDecl 0x55bed24f6760 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55bed24f6a18 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55bed24f6810 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55bed24f6888 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55bed24f6908 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55bed24f6ad0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55bed24f6b08 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55bed24f6b70 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55bed24f6bf8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55bed24f6f18 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55bed24f6cb0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55bed24f6d28 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55bed24f6da0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55bed24f6e20 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55bed24f7030 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55bed24fe9a8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55bed24fe9a8
| `-ParmVarDecl 0x55bed24feab8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55bed24feb58 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55bed24feb58
| `-ParmVarDecl 0x55bed24fec68 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55bed26ed6d8 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed24e9130 prev 0x55bed24e8eb0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55bed24e9228 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55bed24e92b8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55bed24e9318 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55bed24e9408 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55bed24e9508 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55bed24e96d8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55bed24e9588 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55bed24e9600 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55bed24e9868 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55bed24e97a0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55bed24e9910 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55bed24e9a48 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55bed24e9980 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55bed24e9be8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55bed24e9b28 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55bed24e9d88 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55bed24e9cc8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55bed24e9e30 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55bed24e9f30 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55bed24ea010 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24e9f10 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55bed24e9ef0 <col:26> 'int' 1
| `-EnumConstantDecl 0x55bed24e9fc0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55bed24ea028 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bed24e9fa0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55bed24e9f80 <col:44> 'int' 2
|-CXXMethodDecl 0x55bed24ea170 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55bed24ea058 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55bed24ea0d8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55bed24ea2c8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55bed24ea238 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55bed24ea508 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55bed24ea388 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55bed24ea400 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55bed24ea5b8 <col:20>
| `-OptimizeNoneAttr 0x55bed24ea610 <col:30>
|-CXXMethodDecl 0x55bed24ea718 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55bed24ea650 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55bed24ea7c0 <col:20>
| `-OptimizeNoneAttr 0x55bed24ea818 <col:30>
|-CXXMethodDecl 0x55bed24ea868 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55bed24ea930 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55bed24eaa48 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55bed24eaad0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55bed24eab58 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55bed24eabe0 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x55bed24eac68 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55bed24eacf8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55bed24eadb8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55bed24eae40 <line:63:5, col:28> col:23 used PUSH 'const char []' static
|-VarDecl 0x55bed24eaec8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55bed24eaf50 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55bed24eafd8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55bed24eb060 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55bed24eb0f0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55bed24eb1b0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55bed24eb240 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55bed24eb390 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55bed24eb2f8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55bed24eb520 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55bed24eb450 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55bed24eb7d0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55bed24eb5d8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55bed24eb658 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55bed24eb6d8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55bed24eb888 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55bed24eb990 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55bed24ebc20 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24eb970 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55bed24eb950 <col:33> 'int' 0
| |-EnumConstantDecl 0x55bed24eba20 <line:81:9, col:32> col:9 referenced CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55bed24ebc38 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24eba00 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55bed24eb9e0 <col:32> 'int' 20
| |-EnumConstantDecl 0x55bed24ebab0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55bed24ebc50 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24eba90 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55bed24eba70 <col:38> 'int' 90
| |-EnumConstantDecl 0x55bed24ebb40 <line:83:9, col:35> col:9 referenced CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55bed24ebc68 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24ebb20 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55bed24ebb00 <col:35> 'int' 100
| `-EnumConstantDecl 0x55bed24ebbd0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55bed24ebc80 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bed24ebbb0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55bed24ebb90 <col:32> 'int' 2000
|-CXXMethodDecl 0x55bed24ebcc0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55bed24ec100 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55bed24ebf70 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55bed24ebfe8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55bed24ec1d0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55bed24ec350 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55bed24ec280 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55bed24ec558 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55bed24ec408 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55bed24ec480 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55bed24ec658 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55bed24ec6f8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55bed24ec7c0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55bed24ec850 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55bed24eca80 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24ec830 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55bed24ec810 <col:36> 'int' EnumConstant 0x55bed24ec7c0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55bed24ec8a0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55bed24ec8f0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55bed24ec940 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55bed24ec990 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55bed24ec9e0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55bed24eca30 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55bed24ecb68 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55bed24ecaa8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55bed24ecc30 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55bed24eccf0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55bed24ecdb0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55bed24ece70 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55bed24ecf88 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55bed24ed050 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55bed24ed1d0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55bed24ed100 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55bed24ed2f8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55bed24ed4f8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55bed24ed3a8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55bed24ed428 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55bed24fae48 <col:54, line:127:5>
|   |-ParenExpr 0x55bed24facf8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55bed24facc8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55bed24fa9b8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55bed24fa990 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55bed24fa978 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55bed24fa960 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55bed24fa930 <col:31> 'Router *' lvalue ->_router 0x55bed24f8810
|   |   |         `-CXXThisExpr 0x55bed24fa920 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55bed24faa18 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bed24fa9f8 <col:48> 'int' 0
|   |   `-CallExpr 0x55bed24fac28 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55bed24fac10 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bed24fabf0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bed20237b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bed24fac68 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bed24faa88 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55bed24fac80 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bed24faaa8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55bed24fac98 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bed24faae0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55bed24facb0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bed24fabd8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bed24fabc0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bed24fab78 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55bed24fad90 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55bed24fad28 <col:9> 'Router *' lvalue ->_router 0x55bed24f8810
|   | | `-CXXThisExpr 0x55bed24fad18 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55bed24fad78 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55bed24fad58 <col:19> 'Router *' lvalue ParmVar 0x55bed24ed3a8 'r' 'Router *'
|   `-BinaryOperator 0x55bed24fae28 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55bed24fadc0 <col:9> 'int' lvalue ->_eindex 0x55bed24f8878
|     | `-CXXThisExpr 0x55bed24fadb0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55bed24fae10 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55bed24fadf0 <col:19> 'int' lvalue ParmVar 0x55bed24ed428 'eindex' 'int'
|-CXXMethodDecl 0x55bed24ed680 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55bed24ed5b8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55bed24ed750 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55bed24ed818 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55bed24ed8b8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55bed24edb08 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55bed24ed980 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55bed24eda00 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55bed24edbb8 <col:20>
| `-OptimizeNoneAttr 0x55bed24edc10 <col:30>
|-CXXMethodDecl 0x55bed24edd18 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55bed24edc50 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55bed24eddc0 <col:20>
| `-OptimizeNoneAttr 0x55bed24ede18 <col:30>
|-CXXMethodDecl 0x55bed24edee8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55bed24ede58 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55bed24edf90 <col:20>
| `-OptimizeNoneAttr 0x55bed24edfe8 <col:30>
|-CXXMethodDecl 0x55bed24ee178 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55bed24ee020 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55bed24ee0a0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55bed24ee308 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55bed24ee240 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55bed24ee458 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55bed24ee3c8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55bed24ee5a8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55bed24ee518 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55bed24ee6f8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55bed24ee668 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55bed24ee9b8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55bed24ee7b0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55bed24ee830 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55bed24ee8d8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55bed24eea90 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55bed24eeb50 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55bed24eee20 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55bed24eecd0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55bed24eed48 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55bed24eef48 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55bed24ef120 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55bed24ef000 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55bed24ef080 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55bed24ef308 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55bed24ef1e8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55bed24ef268 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55bed24ef678 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55bed24ef3c8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55bed24ef440 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55bed24ef4c0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55bed24fa430 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55bed24fa410 <col:106> 'int' 0
| `-ParmVarDecl 0x55bed24ef538 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55bed24fa468 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55bed24fa448 <col:126> 'int' 0
|-CXXMethodDecl 0x55bed24efa18 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55bed24ef748 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55bed24ef7e0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55bed24ef860 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55bed24ef8d8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55bed24fa4a0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55bed24fa480 <col:114> 'int' 0
|-CXXMethodDecl 0x55bed24efda8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55bed24efaf0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55bed24efb68 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55bed24efbe8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55bed24fa4b8 <col:96> 'int' 0
| `-ParmVarDecl 0x55bed24efc60 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55bed24fa4f8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55bed24fa4d8 <col:116> 'int' 0
|-CXXMethodDecl 0x55bed24f0128 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55bed24efe78 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55bed24efef0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55bed24eff70 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55bed24fa530 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55bed24fa510 <col:109> 'int' 0
| `-ParmVarDecl 0x55bed24effe8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55bed24fa568 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55bed24fa548 <col:129> 'int' 0
|-CXXMethodDecl 0x55bed24f04a8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55bed24f01f8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55bed24f0270 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55bed24f02f0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55bed24f0368 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55bed24fa5a0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55bed24fa580 <col:117> 'int' 0
|-CXXMethodDecl 0x55bed24f0838 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55bed24f0580 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bed24f05f8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55bed24f0678 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55bed24fa5b8 <col:99> 'int' 0
| `-ParmVarDecl 0x55bed24f06f0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55bed24fa5f8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55bed24fa5d8 <col:119> 'int' 0
|-CXXMethodDecl 0x55bed24f0c58 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55bed24f0908 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55bed24f0988 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55bed24f0a00 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55bed24f0a80 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55bed24fa630 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55bed24fa610 <col:108> 'int' 0
| `-ParmVarDecl 0x55bed24f0b00 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55bed24fa668 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55bed24fa648 <col:141> 'int' 0
|-CXXMethodDecl 0x55bed24f1078 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55bed24f0d30 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55bed24f0db0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55bed24f0e28 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55bed24f0ea8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55bed24f0f28 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55bed24fa680 <col:121> 'int' 0
|-CXXMethodDecl 0x55bed24f14a8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55bed24f1158 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55bed24f11d8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55bed24f1250 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55bed24f12d0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55bed24fa6a0 <col:98> 'int' 0
| `-ParmVarDecl 0x55bed24f1350 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55bed24fa6c0 <col:123> 'int' 0
|-CXXMethodDecl 0x55bed24f1770 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55bed24f1580 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55bed24f1600 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55bed24f1680 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55bed24fa6e0 <col:80> 'int' 0
|-EnumDecl 0x55bed24f1828 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55bed24f1930 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55bed24f1bc0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24f1910 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55bed24f18f0 <col:42> 'int' 1
| |-EnumConstantDecl 0x55bed24f19c0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55bed24f1bd8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24f19a0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55bed24f1980 <col:40> 'int' 2
| |-EnumConstantDecl 0x55bed24f1a50 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55bed24f1bf0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24f1a30 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55bed24f1a10 <col:44> 'int' 4
| |-EnumConstantDecl 0x55bed24f1ae0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55bed24f1c08 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24f1ac0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55bed24f1aa0 <col:36> 'int' 7
| `-EnumConstantDecl 0x55bed24f1b70 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55bed24f1c20 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bed24f1b50 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55bed24f1b30 <col:34> 'int' 6
|-CXXMethodDecl 0x55bed24f1ed8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55bed24f1c48 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55bed24f1ce8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55bed24f1d68 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55bed24f1de0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55bed24fa798 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55bed24fa780 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55bed24fa768 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55bed24fa748 <col:98, col:105> 'String' (CXXTemporary 0x55bed24fa748)
|           `-CXXTemporaryObjectExpr 0x55bed24fa710 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55bed24f2178 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55bed24f1fa8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55bed24f2020 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55bed24f2098 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55bed24fa848 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55bed24fa830 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55bed24fa818 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55bed24fa7f8 <col:94, col:101> 'String' (CXXTemporary 0x55bed24fa7f8)
| |         `-CXXTemporaryObjectExpr 0x55bed24fa7c0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55bed24fb030 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55bed24fafa8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55bed24faf78 <col:9> '<bound member function type>' ->add_task_handlers 0x55bed24f1ed8
|     | `-CXXThisExpr 0x55bed24faf68 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55bed24fafe8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55bed24faee8 <col:27> 'Task *' lvalue ParmVar 0x55bed24f1fa8 'task' 'Task *'
|     |-ImplicitCastExpr 0x55bed24fb000 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55bed24faf08 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55bed24f2020 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55bed24fb018 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55bed24faf28 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55bed24f1b70 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55bed24faf48 <col:62> 'const String' lvalue ParmVar 0x55bed24f2098 'prefix' 'const String &'
|-CXXMethodDecl 0x55bed24f2388 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55bed24f2240 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55bed24f22b8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55bed24fa8f8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55bed24fa8e0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55bed24fa8c8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55bed24fa8a8 <col:70, col:77> 'String' (CXXTemporary 0x55bed24fa8a8)
| |         `-CXXTemporaryObjectExpr 0x55bed24fa870 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55bed24fb208 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55bed24fb180 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55bed24fb150 <col:9> '<bound member function type>' ->add_task_handlers 0x55bed24f1ed8
|     | `-CXXThisExpr 0x55bed24fb140 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55bed24fb1c0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55bed24fb0c0 <col:27> 'Task *' lvalue ParmVar 0x55bed24f2240 'task' 'Task *'
|     |-ImplicitCastExpr 0x55bed24fb1d8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55bed24fb0e0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55bed24fb1f0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55bed24fb100 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55bed24f1b70 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55bed24fb120 <col:57> 'const String' lvalue ParmVar 0x55bed24f22b8 'prefix' 'const String &'
|-CXXMethodDecl 0x55bed24f2668 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55bed24f2450 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bed24f24d0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bed24f2548 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55bed24f2918 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55bed24f2738 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bed24f27b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bed24f2838 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55bed24f2c08 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55bed24f29e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bed24f2a68 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bed24f2ae0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55bed24f2eb8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55bed24f2cd8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bed24f2d58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bed24f2dd8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55bed24f3168 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55bed24f2f88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bed24f3008 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bed24f3088 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55bed24f3418 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55bed24f3238 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bed24f32b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bed24f3330 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55bed24f36c8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55bed24f34e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bed24f3568 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bed24f35e8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55bed24f39d8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55bed24f37f0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bed24f3870 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bed24f38f0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55bed24f3cb8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55bed24f3aa8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bed24f3b28 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bed24f3bd0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55bed24f3f98 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55bed24f3d88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bed24f3e08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bed24f3eb0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55bed24f4200 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55bed24f4068 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55bed24f40e8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55bed24f4160 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55bed24f44a8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55bed24f42d0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55bed24f4350 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55bed24f43c8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55bed24f4758 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55bed24f4578 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bed24f45f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bed24f4678 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55bed24f4a08 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55bed24f4828 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bed24f48a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bed24f4920 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55bed24f4cb8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55bed24f4ad8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bed24f4b58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bed24f4bd0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55bed24f4f88 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55bed24f4d88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bed24f4e08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55bed24f4ea8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55bed24f52b8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55bed24f5058 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55bed24f50d8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55bed24f5150 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55bed24f51c8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55bed24fa910 <col:93> 'bool' false
|-CXXMethodDecl 0x55bed24f54a0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55bed24f5388 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55bed24f5408 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55bed24f5678 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55bed24f5560 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55bed24f55e0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55bed24f5958 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55bed24f5738 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55bed24f57b0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55bed24f5830 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55bed24f58a8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55bed24f5c48 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55bed24f5a28 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55bed24f5aa0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55bed24f5b20 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55bed24f5b98 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55bed24f5e80 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55bed24f5d20 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55bed24f5da0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55bed24f6068 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55bed24f5f48 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55bed24f5fc8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55bed24f6118 prev 0x55bed24ed8b8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55bed24f6210 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55bed24f62a0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55bed24f6318 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55bed24f63d8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55bed24f64a0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55bed24f6618 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55bed24f6550 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55bed24f66c0 <col:24>
| | `-OptimizeNoneAttr 0x55bed24f6718 <col:34>
| |-CXXMethodDecl 0x55bed24f6760 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55bed24f6a18 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55bed24f6810 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55bed24f6888 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55bed24f6908 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55bed24f6ad0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55bed24f6b08 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55bed24f6b70 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55bed24f6bf8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55bed24f6f18 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55bed24f6cb0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55bed24f6d28 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55bed24f6da0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55bed24f6e20 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55bed24f7030 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55bed24fe9a8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55bed24fe9a8
| | `-ParmVarDecl 0x55bed24feab8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55bed24feb58 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55bed24feb58
| | `-ParmVarDecl 0x55bed24fec68 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55bed26ed6d8 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55bed24f70a8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55bed24f7148 <col:38> "" ""
|-CXXMethodDecl 0x55bed24f71d8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55bed24f7278 <col:44> "" ""
|-AccessSpecDecl 0x55bed24f72e8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55bed24f7310 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55bed24f7410 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55bed24f7460 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bed24f73f0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55bed24f73d0 <col:27> 'int' 4
|-FieldDecl 0x55bed24f7518 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55bed24f76c8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55bed24f7780 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55bed24f8810 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55bed24f8878 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55bed24f89c8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55bed24f8908 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55bed24f8b78 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55bed24f8a88 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55bed24f8d58 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55bed24f8c38 <col:20> col:23 'int'
| `-ParmVarDecl 0x55bed24f8cb8 <col:25> col:28 'int'
|-CXXMethodDecl 0x55bed24f9000 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55bed24f8e20 <col:23> col:26 'int'
| |-ParmVarDecl 0x55bed24f8ea0 <col:28> col:31 'int'
| `-ParmVarDecl 0x55bed24f8f18 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55bed24f90b8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55bed24f9180 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55bed24f91d0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55bed24f9220 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55bed24f9400 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55bed24f92b0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55bed24f9328 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55bed24f96a8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55bed24f94c8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55bed24f9548 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55bed24f95c0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55bed24f98c8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55bed24f9778 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55bed24f97f8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55bed24f9c00 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55bed24f9988 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55bed24f9a08 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55bed24f9a80 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55bed24f9b00 <col:57> col:60 'int'
|-CXXMethodDecl 0x55bed24f9de8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55bed24f9cd0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55bed24f9d50 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55bed24f9f38 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55bed24f9ea8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55bed24fa2b8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55bed24f9ff8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55bed24fa078 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55bed24fa0f0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55bed24fa170 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55bed24fa3d0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<16> >
         0 |   vector_memory<class sized_array_memory<16> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct ICMPRewriter::MapEntry>
         0 |   class vector_memory<class sized_array_memory<16> > vm_
         0 |     vector_memory<class sized_array_memory<16> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class ICMPRewriter
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       112 |   class Vector<struct ICMPRewriter::MapEntry> _maps
       112 |     class vector_memory<class sized_array_memory<16> > vm_
       112 |       vector_memory<class sized_array_memory<16> >::type * l_
       120 |       vector_memory::size_type n_
       124 |       vector_memory::size_type capacity_
       128 |   unsigned int _annos
           | [sizeof=136, dsize=132, align=8,
           |  nvsize=132, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55bed25fc050 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<16>'
|-CXXRecordDecl 0x55bed25fc228 prev 0x55bed25fc050 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55bed25fc2b8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55bed25fc2e0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55bed1f83580 'int'
|-TypedefDecl 0x55bed25fdeb0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<16>::type':'char_array<16>'
| `-ElaboratedType 0x55bed25fde60 'typename sized_array_memory<16>::type' sugar
|   `-TypedefType 0x55bed25fc790 'sized_array_memory<16>::type' sugar
|     |-Typedef 0x55bed25fc690 'type'
|     `-TemplateSpecializationType 0x55bed25fc620 'char_array<16UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55bed25fc500 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 16
|       |   `-SubstNonTypeTemplateParmExpr 0x55bed25fc4e0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55bed25fc4c0 <col:24> 'unsigned long' 16
|       `-RecordType 0x55bed25fc600 'char_array<16>'
|         `-ClassTemplateSpecialization 0x55bed25fc520 'char_array'
|-TypedefDecl 0x55bed25fdf68 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<16> >::type *'
| `-PointerType 0x55bed25fdf30 'vector_memory<sized_array_memory<16> >::type *'
|   `-TypedefType 0x55bed25fdf10 'vector_memory<sized_array_memory<16> >::type' sugar
|     |-Typedef 0x55bed25fdeb0 'type'
|     `-ElaboratedType 0x55bed25fde60 'typename sized_array_memory<16>::type' sugar
|       `-TypedefType 0x55bed25fc790 'sized_array_memory<16>::type' sugar
|         |-Typedef 0x55bed25fc690 'type'
|         `-TemplateSpecializationType 0x55bed25fc620 'char_array<16UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55bed25fc500 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 16
|           |   `-SubstNonTypeTemplateParmExpr 0x55bed25fc4e0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55bed25fc4c0 <col:24> 'unsigned long' 16
|           `-RecordType 0x55bed25fc600 'char_array<16>'
|             `-ClassTemplateSpecialization 0x55bed25fc520 'char_array'
|-CXXMethodDecl 0x55bed25fe0e8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<16> >::type *) const' inline
| `-ParmVarDecl 0x55bed25fdff8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXConstructorDecl 0x55bed25fe1d8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55bed25fe2b8 <line:23:5, col:20> col:5 used ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55bed25fe588 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<16> > &)'
| `-ParmVarDecl 0x55bed25fe490 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<16> > &'
|-CXXMethodDecl 0x55bed25fe7c8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x55bed25fe640 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55bed25fe6b8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x55bed25fe998 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x55bed25fe888 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55bed25fe900 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x55bed25feaf8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<16> >::iterator ()'
|-CXXMethodDecl 0x55bed25febc8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<16> >::iterator ()'
|-CXXMethodDecl 0x55bed25fee18 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<16> >::iterator (vector_memory<sized_array_memory<16> >::iterator, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x55bed25fec88 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
| `-ParmVarDecl 0x55bed25fed00 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x55bed25ff078 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<16> >::iterator (vector_memory<sized_array_memory<16> >::iterator, vector_memory<sized_array_memory<16> >::iterator)'
| |-ParmVarDecl 0x55bed25feee8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
| `-ParmVarDecl 0x55bed25fef60 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x55bed25ff238 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<16> >::type *)' inline
| `-ParmVarDecl 0x55bed25ff148 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x55bed25ff3f8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<16> >::type *)' inline
| `-ParmVarDecl 0x55bed25ff300 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x55bed25ff4b0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55bed25ff560 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55bed25ff798 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x55bed25ff610 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55bed25ff688 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x55bed25ffa38 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<16> > &)'
| `-ParmVarDecl 0x55bed25ff940 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<16> > &'
|-FieldDecl 0x55bed25ffb00 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<16> >::type *'
|-FieldDecl 0x55bed25ffb50 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55bed25ffba0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55bed25faba8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'ICMPRewriter::MapEntry'
|-CXXRecordDecl 0x55bed25fadb8 prev 0x55bed25faba8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55bed25fbfc0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<MapEntry>::type':'sized_array_memory<16>'
| `-ElaboratedType 0x55bed25fbf70 'typename array_memory<MapEntry>::type' sugar
|   `-TypedefType 0x55bed25fbf50 'conditional<true, sized_array_memory<16>, typed_array_memory<ICMPRewriter::MapEntry> >::type' sugar
|     |-Typedef 0x55bed25fbe00 'type'
|     `-SubstTemplateTypeParmType 0x55bed25fbc20 'sized_array_memory<16>' sugar
|       |-TemplateTypeParmType 0x55bed224d410 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bed224d3b8 'T'
|       `-RecordType 0x55bed25fb770 'sized_array_memory<16>'
|         `-ClassTemplateSpecialization 0x55bed25fb688 'sized_array_memory'
|-FieldDecl 0x55bed25ffbf0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<ICMPRewriter::MapEntry>::array_memory_type>':'vector_memory<sized_array_memory<16> >' mutable
|-AccessSpecDecl 0x55bed25ffc40 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55bed25ffc78 <line:118:5, col:15> col:15 value_type 'ICMPRewriter::MapEntry':'ICMPRewriter::MapEntry'
| `-SubstTemplateTypeParmType 0x55bed25fae50 'ICMPRewriter::MapEntry' sugar
|   |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55bed22850a8 'T'
|   `-RecordType 0x55bed25fa5e0 'ICMPRewriter::MapEntry'
|     `-CXXRecord 0x55bed25fa550 'MapEntry'
|-TypedefDecl 0x55bed25ffd38 <line:119:5, col:16> col:16 reference 'ICMPRewriter::MapEntry &'
| `-LValueReferenceType 0x55bed25ffd00 'ICMPRewriter::MapEntry &'
|   `-SubstTemplateTypeParmType 0x55bed25fae50 'ICMPRewriter::MapEntry' sugar
|     |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55bed22850a8 'T'
|     `-RecordType 0x55bed25fa5e0 'ICMPRewriter::MapEntry'
|       `-CXXRecord 0x55bed25fa550 'MapEntry'
|-TypedefDecl 0x55bed25ffdf8 <line:120:5, col:22> col:22 const_reference 'const ICMPRewriter::MapEntry &'
| `-LValueReferenceType 0x55bed25ffdc0 'const ICMPRewriter::MapEntry &'
|   `-QualType 0x55bed25fae51 'const ICMPRewriter::MapEntry' const
|     `-SubstTemplateTypeParmType 0x55bed25fae50 'ICMPRewriter::MapEntry' sugar
|       |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bed22850a8 'T'
|       `-RecordType 0x55bed25fa5e0 'ICMPRewriter::MapEntry'
|         `-CXXRecord 0x55bed25fa550 'MapEntry'
|-TypedefDecl 0x55bed25ffe88 <line:121:5, col:16> col:16 pointer 'ICMPRewriter::MapEntry *'
| `-PointerType 0x55bed25ffe50 'ICMPRewriter::MapEntry *'
|   `-SubstTemplateTypeParmType 0x55bed25fae50 'ICMPRewriter::MapEntry' sugar
|     |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55bed22850a8 'T'
|     `-RecordType 0x55bed25fa5e0 'ICMPRewriter::MapEntry'
|       `-CXXRecord 0x55bed25fa550 'MapEntry'
|-TypedefDecl 0x55bed25fff48 <line:122:5, col:22> col:22 const_pointer 'const ICMPRewriter::MapEntry *'
| `-PointerType 0x55bed25fff10 'const ICMPRewriter::MapEntry *'
|   `-QualType 0x55bed25fae51 'const ICMPRewriter::MapEntry' const
|     `-SubstTemplateTypeParmType 0x55bed25fae50 'ICMPRewriter::MapEntry' sugar
|       |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bed22850a8 'T'
|       `-RecordType 0x55bed25fa5e0 'ICMPRewriter::MapEntry'
|         `-CXXRecord 0x55bed25fa550 'MapEntry'
|-TypedefDecl 0x55bed2600ba0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<MapEntry>::type':'const ICMPRewriter::MapEntry &'
| `-ElaboratedType 0x55bed2600b50 'typename fast_argument<MapEntry>::type' sugar
|   `-TypedefType 0x55bed2600b30 'fast_argument<ICMPRewriter::MapEntry, true>::type' sugar
|     |-Typedef 0x55bed2600a68 'type'
|     `-LValueReferenceType 0x55bed2600a30 'const ICMPRewriter::MapEntry &'
|       `-QualType 0x55bed26007d1 'const ICMPRewriter::MapEntry' const
|         `-SubstTemplateTypeParmType 0x55bed26007d0 'ICMPRewriter::MapEntry' sugar
|           |-TemplateTypeParmType 0x55bed2257ae0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55bed2257a88 'T'
|           `-RecordType 0x55bed25fa5e0 'ICMPRewriter::MapEntry'
|             `-CXXRecord 0x55bed25fa550 'MapEntry'
|-TypedefDecl 0x55bed2600c08 <line:126:5, col:22> col:22 const_access_type 'const ICMPRewriter::MapEntry &'
| `-LValueReferenceType 0x55bed25ffdc0 'const ICMPRewriter::MapEntry &'
|   `-QualType 0x55bed25fae51 'const ICMPRewriter::MapEntry' const
|     `-SubstTemplateTypeParmType 0x55bed25fae50 'ICMPRewriter::MapEntry' sugar
|       |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bed22850a8 'T'
|       `-RecordType 0x55bed25fa5e0 'ICMPRewriter::MapEntry'
|         `-CXXRecord 0x55bed25fa550 'MapEntry'
|-TypedefDecl 0x55bed2600c60 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55bed1f83580 'int'
|-TypedefDecl 0x55bed2600cc8 <line:130:5, col:16> col:16 iterator 'ICMPRewriter::MapEntry *'
| `-PointerType 0x55bed25ffe50 'ICMPRewriter::MapEntry *'
|   `-SubstTemplateTypeParmType 0x55bed25fae50 'ICMPRewriter::MapEntry' sugar
|     |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55bed22850a8 'T'
|     `-RecordType 0x55bed25fa5e0 'ICMPRewriter::MapEntry'
|       `-CXXRecord 0x55bed25fa550 'MapEntry'
|-TypedefDecl 0x55bed2600d30 <line:131:5, col:22> col:22 const_iterator 'const ICMPRewriter::MapEntry *'
| `-PointerType 0x55bed25fff10 'const ICMPRewriter::MapEntry *'
|   `-QualType 0x55bed25fae51 'const ICMPRewriter::MapEntry' const
|     `-SubstTemplateTypeParmType 0x55bed25fae50 'ICMPRewriter::MapEntry' sugar
|       |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bed22850a8 'T'
|       `-RecordType 0x55bed25fa5e0 'ICMPRewriter::MapEntry'
|         `-CXXRecord 0x55bed25fa550 'MapEntry'
|-EnumDecl 0x55bed2600d88 <line:134:5> col:5
| `-EnumConstantDecl 0x55bed2600e80 <col:12, col:40> col:12 RESERVE_GROW 'Vector<ICMPRewriter::MapEntry>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55bed2600e60 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55bed2286788 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55bed2286760 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55bed2286740 <col:40> 'int' 1
|-CXXConstructorDecl 0x55bed2600f08 <line:137:5, col:28> col:21 used Vector 'void ()' inline
|-CXXConstructorDecl 0x55bed2601198 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<ICMPRewriter::MapEntry>::value_argument_type)' inline
| |-ParmVarDecl 0x55bed2600fc0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55bed2601060 <col:41, col:61> col:61 v 'Vector<ICMPRewriter::MapEntry>::value_argument_type':'const ICMPRewriter::MapEntry &'
|-CXXConstructorDecl 0x55bed2601458 <line:139:5, col:37> col:12 Vector 'void (const Vector<ICMPRewriter::MapEntry> &)' inline
| `-ParmVarDecl 0x55bed2601340 <col:19, col:36> col:36 x 'const Vector<ICMPRewriter::MapEntry> &'
|-CXXConstructorDecl 0x55bed2601718 <line:141:5, col:32> col:12 Vector 'void (Vector<ICMPRewriter::MapEntry> &&)' inline
| `-ParmVarDecl 0x55bed2601600 <col:19, col:31> col:31 x 'Vector<ICMPRewriter::MapEntry> &&'
|-CXXMethodDecl 0x55bed2601a60 <line:144:5, col:51> col:23 operator= 'Vector<ICMPRewriter::MapEntry> &(const Vector<ICMPRewriter::MapEntry> &)' inline
| `-ParmVarDecl 0x55bed2601940 <col:33, col:50> col:50 x 'const Vector<ICMPRewriter::MapEntry> &'
|-CXXMethodDecl 0x55bed26029b0 <line:146:5, col:46> col:23 operator= 'Vector<ICMPRewriter::MapEntry> &(Vector<ICMPRewriter::MapEntry> &&)' inline
| `-ParmVarDecl 0x55bed2602898 <col:33, col:45> col:45 x 'Vector<ICMPRewriter::MapEntry> &&'
|-CXXMethodDecl 0x55bed2602ca0 <line:148:5, col:70> col:23 assign 'Vector<ICMPRewriter::MapEntry> &(Vector::size_type, Vector<ICMPRewriter::MapEntry>::value_argument_type)' inline
| |-ParmVarDecl 0x55bed2602ae8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55bed2602b60 <col:43, col:69> col:63 v 'Vector<ICMPRewriter::MapEntry>::value_argument_type':'const ICMPRewriter::MapEntry &'
|-CXXMethodDecl 0x55bed2602df8 <line:150:5, col:55> col:49 begin 'Vector<ICMPRewriter::MapEntry>::iterator ()'
| |-NoInlineAttr 0x55bed2602ed8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bed2602f30 <col:30> Inherited
|-CXXMethodDecl 0x55bed2602f78 <line:151:5, col:53> col:49 end 'Vector<ICMPRewriter::MapEntry>::iterator ()'
| |-NoInlineAttr 0x55bed2603028 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bed2603080 <col:30> Inherited
|-CXXMethodDecl 0x55bed2603148 <line:152:5, col:63> col:55 begin 'Vector<ICMPRewriter::MapEntry>::const_iterator () const'
| |-NoInlineAttr 0x55bed26031f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bed2603250 <col:30> Inherited
|-CXXMethodDecl 0x55bed2603298 <line:153:5, col:61> col:55 end 'Vector<ICMPRewriter::MapEntry>::const_iterator () const'
| |-NoInlineAttr 0x55bed2603348 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bed26033a0 <col:30> Inherited
|-CXXMethodDecl 0x55bed26033e8 <line:154:5, col:64> col:55 cbegin 'Vector<ICMPRewriter::MapEntry>::const_iterator () const'
| |-NoInlineAttr 0x55bed2603498 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bed26034f0 <col:30> Inherited
|-CXXMethodDecl 0x55bed2603538 <line:155:5, col:62> col:55 cend 'Vector<ICMPRewriter::MapEntry>::const_iterator () const'
| |-NoInlineAttr 0x55bed26035e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bed2603640 <col:30> Inherited
|-CXXMethodDecl 0x55bed2603668 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55bed2603718 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55bed26037c8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55bed2603988 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<ICMPRewriter::MapEntry>::value_argument_type)' inline
| |-ParmVarDecl 0x55bed2603878 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55bed26038f0 <col:37, col:63> col:57 v 'Vector<ICMPRewriter::MapEntry>::value_argument_type':'const ICMPRewriter::MapEntry &'
|-CXXMethodDecl 0x55bed2603ad8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55bed2603a48 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bed2603c88 <line:163:5, col:65> col:43 operator[] 'ICMPRewriter::MapEntry &(Vector::size_type)'
| |-ParmVarDecl 0x55bed2603b90 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55bed2603d40 <col:20>
| `-OptimizeNoneAttr 0x55bed2603d98 <col:30>
|-CXXMethodDecl 0x55bed2603eb8 <line:164:5, col:73> col:49 operator[] 'const ICMPRewriter::MapEntry &(Vector::size_type) const'
| |-ParmVarDecl 0x55bed2603dc0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55bed2603f70 <col:20>
| `-OptimizeNoneAttr 0x55bed2603fc8 <col:30>
|-CXXMethodDecl 0x55bed2604080 <line:165:5, col:29> col:15 at 'ICMPRewriter::MapEntry &(Vector::size_type)' inline
| `-ParmVarDecl 0x55bed2603ff0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bed26041c8 <line:166:5, col:37> col:21 at 'const ICMPRewriter::MapEntry &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55bed2604138 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bed26042f8 <line:167:5, col:21> col:15 front 'ICMPRewriter::MapEntry &()' inline
|-CXXMethodDecl 0x55bed2604428 <line:168:5, col:29> col:21 front 'const ICMPRewriter::MapEntry &() const' inline
|-CXXMethodDecl 0x55bed26044f8 <line:169:5, col:20> col:15 back 'ICMPRewriter::MapEntry &()' inline
|-CXXMethodDecl 0x55bed26045c8 <line:170:5, col:28> col:21 back 'const ICMPRewriter::MapEntry &() const' inline
|-CXXMethodDecl 0x55bed2604708 <line:172:5, col:39> col:15 unchecked_at 'ICMPRewriter::MapEntry &(Vector::size_type)' inline
| `-ParmVarDecl 0x55bed2604678 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bed2604850 <line:173:5, col:47> col:21 unchecked_at 'const ICMPRewriter::MapEntry &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55bed26047c0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bed2604998 <line:174:5, col:59> col:15 at_u 'ICMPRewriter::MapEntry &(Vector::size_type)' inline
| |-ParmVarDecl 0x55bed2604908 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55bed2604a50 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55bed2604b50 <line:175:5, col:71> col:21 at_u 'const ICMPRewriter::MapEntry &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55bed2604ac0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55bed2604c08 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55bed2604cc8 <line:177:5, col:20> col:15 data 'ICMPRewriter::MapEntry *()' inline
|-CXXMethodDecl 0x55bed2604dc8 <line:178:5, col:28> col:21 data 'const ICMPRewriter::MapEntry *() const' inline
|-CXXMethodDecl 0x55bed2604f78 <line:180:5, col:48> col:17 push_back 'void (Vector<ICMPRewriter::MapEntry>::value_argument_type)' inline
| `-ParmVarDecl 0x55bed2604e88 <col:27, col:47> col:47 v 'Vector<ICMPRewriter::MapEntry>::value_argument_type':'const ICMPRewriter::MapEntry &'
|-FunctionTemplateDecl 0x55bed2605738 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55bed2605030 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<ICMPRewriter::MapEntry>':'fast_argument<ICMPRewriter::MapEntry, true>'
| `-CXXMethodDecl 0x55bed2605698 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (ICMPRewriter::MapEntry &&)' inline
|   `-ParmVarDecl 0x55bed2605598 <col:58, col:62> col:62 v 'ICMPRewriter::MapEntry &&'
|-CXXMethodDecl 0x55bed2605818 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55bed2605968 <line:186:5, col:49> col:17 push_front 'void (Vector<ICMPRewriter::MapEntry>::value_argument_type)' inline
| `-ParmVarDecl 0x55bed26058d8 <col:28, col:48> col:48 v 'Vector<ICMPRewriter::MapEntry>::value_argument_type':'const ICMPRewriter::MapEntry &'
|-CXXMethodDecl 0x55bed2605a20 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55bed2605c68 <line:189:5, col:62> col:21 insert 'Vector<ICMPRewriter::MapEntry>::iterator (Vector<ICMPRewriter::MapEntry>::iterator, Vector<ICMPRewriter::MapEntry>::value_argument_type)' inline
| |-ParmVarDecl 0x55bed2605ae0 <col:28, col:37> col:37 it 'Vector<ICMPRewriter::MapEntry>::iterator':'ICMPRewriter::MapEntry *'
| `-ParmVarDecl 0x55bed2605b58 <col:41, col:61> col:61 v 'Vector<ICMPRewriter::MapEntry>::value_argument_type':'const ICMPRewriter::MapEntry &'
|-CXXMethodDecl 0x55bed2605e28 <line:190:5, col:38> col:21 erase 'Vector<ICMPRewriter::MapEntry>::iterator (Vector<ICMPRewriter::MapEntry>::iterator)' inline
| `-ParmVarDecl 0x55bed2605d38 <col:27, col:36> col:36 it 'Vector<ICMPRewriter::MapEntry>::iterator':'ICMPRewriter::MapEntry *'
|-CXXMethodDecl 0x55bed2606078 <line:191:5, col:49> col:21 erase 'Vector<ICMPRewriter::MapEntry>::iterator (Vector<ICMPRewriter::MapEntry>::iterator, Vector<ICMPRewriter::MapEntry>::iterator)' inline
| |-ParmVarDecl 0x55bed2605ef0 <col:27, col:36> col:36 a 'Vector<ICMPRewriter::MapEntry>::iterator':'ICMPRewriter::MapEntry *'
| `-ParmVarDecl 0x55bed2605f68 <col:39, col:48> col:48 b 'Vector<ICMPRewriter::MapEntry>::iterator':'ICMPRewriter::MapEntry *'
|-CXXMethodDecl 0x55bed2606138 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x55bed2606398 <line:195:5, col:34> col:17 swap 'void (Vector<ICMPRewriter::MapEntry> &)' inline
| `-ParmVarDecl 0x55bed26062a0 <col:22, col:33> col:33 x 'Vector<ICMPRewriter::MapEntry> &'
`-CXXDestructorDecl 0x55bed2606468 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit used ~Vector 'void () noexcept' inline default
  `-CompoundStmt 0x55bed26ed6c8 <col:29>

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed25f5860 <../elements/icmp/icmprewriter.hh:61:1, line:96:1> line:61:7 class ICMPRewriter definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55bed25f59b8 <col:1, col:7> col:7 implicit referenced class ICMPRewriter
|-AccessSpecDecl 0x55bed25f5a48 <col:39, col:45> col:39 public
|-CXXConstructorDecl 0x55bed25f9c20 <line:63:5, col:18> col:5 ICMPRewriter 'void ()'
|-CXXDestructorDecl 0x55bed25f9d10 <line:64:5, col:19> col:5 ~ICMPRewriter 'void ()' noexcept-unevaluated 0x55bed25f9d10
| `-Overrides: [ 0x55bed24e9408 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55bed25f9e40 <line:66:5, col:61> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x55bed24ea868 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55bed26072d8 <col:36, col:61>
|   `-ReturnStmt 0x55bed26072c8 <col:38, col:45>
|     `-ImplicitCastExpr 0x55bed26072b0 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55bed2607288 <col:45> 'const char [13]' lvalue "ICMPRewriter"
|-CXXMethodDecl 0x55bed25f9f08 <line:67:5, col:53> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x55bed24ea930 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55bed26073b0 <col:36, col:53>
|   `-ReturnStmt 0x55bed26073a0 <col:38, col:45>
|     `-ImplicitCastExpr 0x55bed2607388 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55bed2607368 <col:45> 'const char [5]' lvalue "1/1-"
|-CXXMethodDecl 0x55bed25f9fd0 <line:68:5, col:51> col:17 processing 'const char *() const'
| |-Overrides: [ 0x55bed24eacf8 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x55bed2607410 <col:36, col:51>
|   `-ReturnStmt 0x55bed2607400 <col:38, col:45>
|     `-ImplicitCastExpr 0x55bed26073e8 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55bed26073c8 <col:45> 'const char []' lvalue Var 0x55bed24eae40 'PUSH' 'const char []'
|-CXXMethodDecl 0x55bed25fa2a0 <line:70:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55bed24ec100 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55bed25fa150 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x55bed25fa1c8 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x55bed25fa478 <line:72:5, col:28> col:10 push 'void (int, Packet *)'
| |-Overrides: [ 0x55bed24e96d8 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x55bed25fa368 <col:15> col:18 'int'
| `-ParmVarDecl 0x55bed25fa3e0 <col:20, col:27> col:28 'Packet *'
|-AccessSpecDecl 0x55bed25fa528 <line:74:3, col:12> col:3 protected
|-CXXRecordDecl 0x55bed25fa550 <line:76:5, line:80:5> line:76:12 referenced struct MapEntry definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55bed25fa668 <col:5, col:12> col:12 implicit referenced struct MapEntry
| |-CXXConstructorDecl 0x55bed25fa898 <line:77:2, col:67> col:2 MapEntry 'void (IPRewriterBase *, int)'
| | |-ParmVarDecl 0x55bed25fa708 <col:11, col:27> col:27 used e 'IPRewriterBase *'
| | |-ParmVarDecl 0x55bed25fa788 <col:30, col:34> col:34 used po 'int'
| | |-CXXCtorInitializer Field 0x55bed25fa960 '_elt' 'IPRewriterBase *'
| | | `-ImplicitCastExpr 0x55bed2607468 <col:45> 'IPRewriterBase *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55bed2607428 <col:45> 'IPRewriterBase *' lvalue ParmVar 0x55bed25fa708 'e' 'IPRewriterBase *'
| | |-CXXCtorInitializer Field 0x55bed25fa9c8 '_port_offset' 'int'
| | | `-ImplicitCastExpr 0x55bed26074e8 <col:62> 'int' <LValueToRValue>
| | |   `-DeclRefExpr 0x55bed26074a8 <col:62> 'int' lvalue ParmVar 0x55bed25fa788 'po' 'int'
| | `-CompoundStmt 0x55bed2607538 <col:66, col:67>
| |-FieldDecl 0x55bed25fa960 <line:78:2, col:18> col:18 _elt 'IPRewriterBase *'
| `-FieldDecl 0x55bed25fa9c8 <line:79:2, col:6> col:6 _port_offset 'int'
|-EnumDecl 0x55bed25faa30 <line:82:5, line:84:5> line:82:5
| `-EnumConstantDecl 0x55bed25fab48 <line:83:2, col:21> col:2 unmapped_output 'ICMPRewriter::(anonymous enum at ../elements/icmp/icmprewriter.hh:82:5)'
|   `-ConstantExpr 0x55bed25fab28 <col:20, col:21> 'int' Int: -1
|     `-UnaryOperator 0x55bed25fab10 <col:20, col:21> 'int' prefix '-'
|       `-IntegerLiteral 0x55bed25faaf0 <col:21> 'int' 1
|-FieldDecl 0x55bed2606550 <line:86:5, col:22> col:22 _maps 'Vector<ICMPRewriter::MapEntry>':'Vector<ICMPRewriter::MapEntry>'
|-FieldDecl 0x55bed26065b8 <line:87:5, col:14> col:14 _annos 'unsigned int'
|-CXXMethodDecl 0x55bed26068f8 <line:89:5, line:90:39> line:89:10 rewrite_packet 'void (WritablePacket *, click_ip *, click_udp *, const IPFlowID &, IPRewriterEntry *)'
| |-ParmVarDecl 0x55bed2606618 <col:25, col:40> col:41 'WritablePacket *'
| |-ParmVarDecl 0x55bed2606690 <col:43, col:52> col:53 'click_ip *'
| |-ParmVarDecl 0x55bed2606708 <col:55, col:65> col:66 'click_udp *'
| |-ParmVarDecl 0x55bed2606780 <line:90:4, col:19> col:20 'const IPFlowID &'
| `-ParmVarDecl 0x55bed26067f8 <col:22, col:38> col:39 'IPRewriterEntry *'
|-CXXMethodDecl 0x55bed2606cd8 <line:91:5, line:92:44> line:91:10 rewrite_ping_packet 'void (WritablePacket *, click_ip *, click_icmp_sequenced *, const IPFlowID &, IPRewriterEntry *)'
| |-ParmVarDecl 0x55bed26069d0 <col:30, col:45> col:46 'WritablePacket *'
| |-ParmVarDecl 0x55bed2606a48 <col:48, col:57> col:58 'click_ip *'
| |-ParmVarDecl 0x55bed2606ae8 <col:60, col:81> col:82 'click_icmp_sequenced *'
| |-ParmVarDecl 0x55bed2606b60 <line:92:9, col:24> col:25 'const IPFlowID &'
| `-ParmVarDecl 0x55bed2606bd8 <col:27, col:43> col:44 'IPRewriterEntry *'
|-CXXMethodDecl 0x55bed2606e80 <line:94:5, col:33> col:9 handle 'int (WritablePacket *)'
| `-ParmVarDecl 0x55bed2606db0 <col:16, col:32> col:32 p 'WritablePacket *'
|-CXXConstructorDecl 0x55bed2606f58 <line:61:7> col:7 implicit ICMPRewriter 'void (const ICMPRewriter &)' inline default_delete noexcept-unevaluated 0x55bed2606f58
| `-ParmVarDecl 0x55bed2607068 <col:7> col:7 'const ICMPRewriter &'
`-CXXMethodDecl 0x55bed2607108 <col:7> col:7 implicit operator= 'ICMPRewriter &(const ICMPRewriter &)' inline default_delete noexcept-unevaluated 0x55bed2607108
  `-ParmVarDecl 0x55bed2607218 <col:7> col:7 'const ICMPRewriter &'

Layout: <CGRecordLayout
  LLVMType:%class.ICMPRewriter = type <{ %class.Element.base, [4 x i8], %class.Vector, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ICMPRewriter.base = type <{ %class.Element.base, [4 x i8], %class.Vector, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed22bcfd0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55bed22bd0e8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55bed22bd188 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55bed22bd1e8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55bed22bd248 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55bed22bd2f8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed22bd600 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bed22bd718 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55bed22bd7c0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55bed22bd828 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55bed22bd8b8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55bed22c3950 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55bed22c3d88 <col:12>
|-CXXConstructorDecl 0x55bed22c3a58 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55bed22c3b68 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55bed22bd7c0 'data' 'const char *'
| | `-ImplicitCastExpr 0x55bed22c6310 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55bed22c62e0 <col:12> 'const char *const' lvalue .data 0x55bed22bd7c0
| |     `-DeclRefExpr 0x55bed22c62c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bed22c3b68 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55bed22bd828 'length' 'int'
| | `-ImplicitCastExpr 0x55bed22c63a0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55bed22c6370 <col:12> 'const int' lvalue .length 0x55bed22bd828
| |     `-DeclRefExpr 0x55bed22c6350 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bed22c3b68 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55bed22bd8b8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55bed22c6430 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55bed22c6400 <col:12> 'String::memo_t *const' lvalue .memo 0x55bed22bd8b8
| |     `-DeclRefExpr 0x55bed22c63e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bed22c3b68 '' 'const String::rep_t &'
| `-CompoundStmt 0x55bed22c6488 <col:12>
|-CXXConstructorDecl 0x55bed22c3c08 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55bed22c3c08
| `-ParmVarDecl 0x55bed22c3d18 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55bed22c9270 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55bed22d4c88 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55bed22d4d98 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55bed22d52b0 <col:12>
|   |-BinaryOperator 0x55bed22d50c8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55bed22d5080 <col:12> 'const char *' lvalue ->data 0x55bed22bd7c0
|   | | `-CXXThisExpr 0x55bed22d5070 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55bed22d50b0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55bed22d5040 <col:12> 'const char *const' lvalue .data 0x55bed22bd7c0
|   |     `-DeclRefExpr 0x55bed22d5020 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bed22d4d98 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55bed22d5190 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55bed22d5148 <col:12> 'int' lvalue ->length 0x55bed22bd828
|   | | `-CXXThisExpr 0x55bed22d5138 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55bed22d5178 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55bed22d5108 <col:12> 'const int' lvalue .length 0x55bed22bd828
|   |     `-DeclRefExpr 0x55bed22d50e8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bed22d4d98 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55bed22d5258 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55bed22d5210 <col:12> 'String::memo_t *' lvalue ->memo 0x55bed22bd8b8
|   | | `-CXXThisExpr 0x55bed22d5200 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55bed22d5240 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55bed22d51d0 <col:12> 'String::memo_t *const' lvalue .memo 0x55bed22bd8b8
|   |     `-DeclRefExpr 0x55bed22d51b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bed22d4d98 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55bed22d52a0 <col:12>
|     `-UnaryOperator 0x55bed22d5288 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55bed22d5278 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55bed22d4e08 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55bed22d4e08
  `-ParmVarDecl 0x55bed22d4f18 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed22b4540 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55bed22b4658 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55bed22b46e8 <col:16, col:22> col:16 public
|-TypedefDecl 0x55bed22b4728 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55bed1f83fd0 'const char *'
|   `-QualType 0x55bed1f83521 'const char' const
|     `-BuiltinType 0x55bed1f83520 'char'
|-TypedefDecl 0x55bed22b47b0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55bed22b4780 'String::const_iterator' sugar
|   |-Typedef 0x55bed22b4728 'const_iterator'
|   `-PointerType 0x55bed1f83fd0 'const char *'
|     `-QualType 0x55bed1f83521 'const char' const
|       `-BuiltinType 0x55bed1f83520 'char'
|-TypedefDecl 0x55bed22b4920 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55bed22b4890 'int (String::*)() const'
|   |-RecordType 0x55bed22b45d0 'String'
|   | `-CXXRecord 0x55bed22b4540 'String'
|   `-ParenType 0x55bed22b4830 'int () const' sugar
|     `-FunctionProtoType 0x55bed22883c0 'int () const' const cdecl
|       `-BuiltinType 0x55bed1f83580 'int'
|-TypedefDecl 0x55bed22b4988 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55bed20dcfa0 'int64_t' sugar
|   |-Typedef 0x55bed1fec390 'int64_t'
|   `-TypedefType 0x55bed1fc5630 '__int64_t' sugar
|     |-Typedef 0x55bed1fc5208 '__int64_t'
|     `-BuiltinType 0x55bed1f835a0 'long'
|-TypedefDecl 0x55bed22b49f0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55bed20dcec0 'uint64_t' sugar
|   |-Typedef 0x55bed1fec530 'uint64_t'
|   `-TypedefType 0x55bed1fc56c0 '__uint64_t' sugar
|     |-Typedef 0x55bed1fc5278 '__uint64_t'
|     `-BuiltinType 0x55bed1f83640 'unsigned long'
|-TypedefDecl 0x55bed22b4a80 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55bed22b4a50 'String::intmax_t' sugar
|   |-Typedef 0x55bed22b4988 'intmax_t'
|   `-TypedefType 0x55bed20dcfa0 'int64_t' sugar
|     |-Typedef 0x55bed1fec390 'int64_t'
|     `-TypedefType 0x55bed1fc5630 '__int64_t' sugar
|       |-Typedef 0x55bed1fc5208 '__int64_t'
|       `-BuiltinType 0x55bed1f835a0 'long'
|-TypedefDecl 0x55bed22b4b10 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55bed22b4ae0 'String::uintmax_t' sugar
|   |-Typedef 0x55bed22b49f0 'uintmax_t'
|   `-TypedefType 0x55bed20dcec0 'uint64_t' sugar
|     |-Typedef 0x55bed1fec530 'uint64_t'
|     `-TypedefType 0x55bed1fc56c0 '__uint64_t' sugar
|       |-Typedef 0x55bed1fc5278 '__uint64_t'
|       `-BuiltinType 0x55bed1f83640 'unsigned long'
|-CXXConstructorDecl 0x55bed22b4bd0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55bed22b4d78 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55bed22b4cb8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55bed22b4f28 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55bed22b4e68 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55bed22b5080 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55bed22b4ff0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55bed22b5298 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55bed22b5148 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55bed22b51c8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55bed22b54b8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55bed22b5368 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55bed22b53e8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55bed22b56d8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55bed22b5588 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55bed22b5608 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55bed22b58f8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55bed22b57a8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55bed22b5828 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55bed22b5a88 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55bed22b59c0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55bed22b5c08 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55bed22b5b48 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55bed22b5d98 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55bed22b5cd0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55bed22b5ef0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55bed22b5e60 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55bed22b6048 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55bed22b5fb8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55bed22b61a0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55bed22b6110 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55bed22b6328 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55bed22b6268 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55bed22b64b8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55bed22b63f0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55bed22b6648 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55bed22b6580 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55bed22b67d8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55bed22b6710 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55bed22b68d0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55bed22b69f8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55bed22b6b78 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55bed22b6ab0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55bed22b6cc8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55bed22b6c38 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55bed22b6d80 <col:63> "" ""
|-CXXMethodDecl 0x55bed22b6ec8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55bed22b6e08 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55bed22b70d8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55bed22b6f88 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55bed22b7008 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55bed22b72f8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55bed22b71a0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55bed22b7220 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55bed22b75d8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55bed22b73b8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55bed22b7438 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55bed22c3420 <col:55> 'int' 10
| `-ParmVarDecl 0x55bed22b74b0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55bed22c3440 <col:76> 'bool' true
|-CXXMethodDecl 0x55bed22b78b8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55bed22b76a0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55bed22b7720 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55bed22c3450 <col:56> 'int' 10
| `-ParmVarDecl 0x55bed22b7798 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55bed22c3470 <col:77> 'bool' true
|-CXXMethodDecl 0x55bed22b79c0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55bed22b7a88 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55bed22b7b50 <line:81:5, col:60> col:52 used c_str 'const char *() const'
| |-NoInlineAttr 0x55bed22b7bf0 <col:20>
| `-OptimizeNoneAttr 0x55bed22b7c48 <col:30>
|-CXXConversionDecl 0x55bed22b7d38 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55bed22b7e08 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55bed22b7ec8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55bed22b7fb8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55bed22b8078 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55bed22b81f8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55bed22b8130 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55bed22b8348 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55bed22b82b8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55bed22b8438 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55bed22b84f8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55bed22b8748 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55bed22b85b0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55bed22b8630 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55bed22b89a8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55bed22b8810 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55bed22b8890 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55bed22b8a78 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55bed22b8c88 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55bed22b8b30 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55bed22b8bb0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55bed22b8ea8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55bed22b8d50 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55bed22b8dd0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55bed22b9038 <line:102:5, col:38> col:19 used substring 'String (int) const' inline
| `-ParmVarDecl 0x55bed22b8f70 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55bed22b9128 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55bed22b9298 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55bed22b91d8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55bed22b94a8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55bed22b9358 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55bed22b93d8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55bed22b96c0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55bed22b9568 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55bed22b95e0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55bed22b9850 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55bed22b9780 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55bed22b9a70 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55bed22b9910 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55bed22b9990 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55bed22b9bc0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55bed22b9b30 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55bed22b9d98 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55bed22b9c80 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55bed22b9d00 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55bed22b9ee8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55bed22b9e58 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55bed22ba100 <line:125:5, col:42> col:9 used find_left 'int (char, int) const'
| |-ParmVarDecl 0x55bed22b9fa0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55bed22ba020 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55bed22c3480 <col:39> 'int' 0
|-CXXMethodDecl 0x55bed22ba320 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55bed22ba1c0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55bed22ba240 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55bed22c34a0 <col:48> 'int' 0
|-CXXMethodDecl 0x55bed22ba500 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55bed22ba3e0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55bed22ba460 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55bed22c34c0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55bed22ba5d0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55bed22ba690 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55bed22ba750 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55bed22ba810 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55bed22ba8d0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55bed22baa78 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55bed22ba980 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55bed22babf8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55bed22bab30 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55bed22badd0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55bed22bacb8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55bed22baf48 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55bed22bae88 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55bed22bb090 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55bed22bb000 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55bed22bb1e0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55bed22bb150 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55bed22bb3b8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55bed22bb2a0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55bed22bb320 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55bed22bb598 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55bed22bb480 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55bed22bb500 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55bed22bb6e8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55bed22bb658 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55bed22bb8f8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55bed22bb7a8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55bed22bb828 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55bed22bba58 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55bed22bb9c0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55bed22bbbb0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55bed22bbb18 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55bed22bbc58 <col:57> "" ""
|-CXXMethodDecl 0x55bed22bbd68 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55bed22bbcd8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55bed22bbeb8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55bed22bbe28 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55bed22bc038 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55bed22bbf70 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55bed22bc100 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55bed22bc1c0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55bed22bc280 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55bed22bc320 <col:49> "" ""
|-CXXMethodDecl 0x55bed22bc3b0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55bed22bc470 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55bed22bc560 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55bed22bc628 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55bed22bc6e8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55bed22bc7a8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55bed22bc8a0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55bed22bc968 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55bed22bca30 <line:174:5, col:42> col:31 used empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55bed22bcc08 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55bed22bcae8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55bed22bcb68 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55bed22bce30 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55bed22bccd0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55bed22bcd50 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55bed22bcf40 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55bed22bcfa8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55bed22bcfd0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55bed22bd0e8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55bed22bd188 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55bed22bd1e8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55bed22bd248 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55bed22bd2f8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55bed22bd360 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55bed22bd598 <line:201:2, col:32> col:2 referenced MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55bed22bd5e8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bed22bd578 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55bed22bd488 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55bed22bd430 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55bed22bd470 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55bed22bd450 <col:32> 'int' 8
|-CXXRecordDecl 0x55bed22bd600 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55bed22bd718 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55bed22bd7c0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55bed22bd828 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55bed22bd8b8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55bed22c3950 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55bed22c3d88 <col:12>
| |-CXXConstructorDecl 0x55bed22c3a58 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55bed22c3b68 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55bed22bd7c0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55bed22c6310 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55bed22c62e0 <col:12> 'const char *const' lvalue .data 0x55bed22bd7c0
| | |     `-DeclRefExpr 0x55bed22c62c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bed22c3b68 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55bed22bd828 'length' 'int'
| | | `-ImplicitCastExpr 0x55bed22c63a0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55bed22c6370 <col:12> 'const int' lvalue .length 0x55bed22bd828
| | |     `-DeclRefExpr 0x55bed22c6350 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bed22c3b68 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55bed22bd8b8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55bed22c6430 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55bed22c6400 <col:12> 'String::memo_t *const' lvalue .memo 0x55bed22bd8b8
| | |     `-DeclRefExpr 0x55bed22c63e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bed22c3b68 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55bed22c6488 <col:12>
| |-CXXConstructorDecl 0x55bed22c3c08 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55bed22c3c08
| | `-ParmVarDecl 0x55bed22c3d18 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55bed22c9270 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55bed22d4c88 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55bed22d4d98 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55bed22d52b0 <col:12>
| |   |-BinaryOperator 0x55bed22d50c8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55bed22d5080 <col:12> 'const char *' lvalue ->data 0x55bed22bd7c0
| |   | | `-CXXThisExpr 0x55bed22d5070 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55bed22d50b0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55bed22d5040 <col:12> 'const char *const' lvalue .data 0x55bed22bd7c0
| |   |     `-DeclRefExpr 0x55bed22d5020 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bed22d4d98 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55bed22d5190 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55bed22d5148 <col:12> 'int' lvalue ->length 0x55bed22bd828
| |   | | `-CXXThisExpr 0x55bed22d5138 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55bed22d5178 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55bed22d5108 <col:12> 'const int' lvalue .length 0x55bed22bd828
| |   |     `-DeclRefExpr 0x55bed22d50e8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bed22d4d98 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55bed22d5258 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55bed22d5210 <col:12> 'String::memo_t *' lvalue ->memo 0x55bed22bd8b8
| |   | | `-CXXThisExpr 0x55bed22d5200 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55bed22d5240 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55bed22d51d0 <col:12> 'String::memo_t *const' lvalue .memo 0x55bed22bd8b8
| |   |     `-DeclRefExpr 0x55bed22d51b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55bed22d4d98 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55bed22d52a0 <col:12>
| |     `-UnaryOperator 0x55bed22d5288 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55bed22d5278 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55bed22d4e08 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55bed22d4e08
|   `-ParmVarDecl 0x55bed22d4f18 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55bed22bd930 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55bed22bdb78 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55bed22bd998 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55bed22bda18 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55bed22bda90 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55bed22c3910 <col:79, line:261:5>
|   |-BinaryOperator 0x55bed22c3588 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55bed22c3520 <col:2, col:5> 'const char *' lvalue .data 0x55bed22bd7c0
|   | | `-MemberExpr 0x55bed22c34f0 <col:2> 'String::rep_t' lvalue ->_r 0x55bed22bd930
|   | |   `-CXXThisExpr 0x55bed22c34e0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55bed22c3570 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55bed22c3550 <col:12> 'const char *' lvalue ParmVar 0x55bed22bd998 'data' 'const char *'
|   |-BinaryOperator 0x55bed22c3650 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55bed22c35e8 <col:2, col:5> 'int' lvalue .length 0x55bed22bd828
|   | | `-MemberExpr 0x55bed22c35b8 <col:2> 'String::rep_t' lvalue ->_r 0x55bed22bd930
|   | |   `-CXXThisExpr 0x55bed22c35a8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55bed22c3638 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55bed22c3618 <col:14> 'int' lvalue ParmVar 0x55bed22bda18 'length' 'int'
|   `-IfStmt 0x55bed22c38f8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55bed22c3770 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55bed22c3758 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55bed22c3738 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55bed22c3718 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55bed22c36b0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55bed22bd8b8
|     |       | `-MemberExpr 0x55bed22c3680 <col:7> 'String::rep_t' lvalue ->_r 0x55bed22bd930
|     |       |   `-CXXThisExpr 0x55bed22c3670 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55bed22c3700 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55bed22c36e0 <col:17> 'String::memo_t *' lvalue ParmVar 0x55bed22bda90 'memo' 'String::memo_t *'
|     `-CallExpr 0x55bed22c38d0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55bed22c38b8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55bed22c37c0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55bed22ac5a8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55bed22c3828 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55bed22bd188
|         `-ImplicitCastExpr 0x55bed22c3810 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55bed22c37f0 <col:27> 'String::memo_t *' lvalue ParmVar 0x55bed22bda90 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55bed22bde28 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55bed22bdc48 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55bed22bdcc8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55bed22bdd40 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55bed22bd930 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55bed22c3d98 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55bed22c3f28 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55bed22c3e90 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55bed22c3e00 <col:2> '<bound member function type>' ->assign_memo 0x55bed22bdb78
|     | `-ImplicitCastExpr 0x55bed22c3ec8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55bed22c3df0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55bed22c3ee0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55bed22c3e30 <col:14> 'const char *' lvalue ParmVar 0x55bed22bdc48 'data' 'const char *'
|     |-ImplicitCastExpr 0x55bed22c3ef8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55bed22c3e50 <col:20> 'int' lvalue ParmVar 0x55bed22bdcc8 'length' 'int'
|     `-ImplicitCastExpr 0x55bed22c3f10 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55bed22c3e70 <col:28> 'String::memo_t *' lvalue ParmVar 0x55bed22bdd40 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55bed22bdfb8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55bed22bdef8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55bed22c4180 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55bed22c4100 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55bed22c3f50 <col:2> '<bound member function type>' ->assign_memo 0x55bed22bdb78
|     | `-CXXThisExpr 0x55bed22c3f40 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55bed22c4138 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55bed22c3fd0 <col:14, col:19> 'const char *' lvalue .data 0x55bed22bd7c0
|     |   `-MemberExpr 0x55bed22c3fa0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55bed22bd930
|     |     `-DeclRefExpr 0x55bed22c3f80 <col:14> 'const String' lvalue ParmVar 0x55bed22bdef8 'x' 'const String &'
|     |-ImplicitCastExpr 0x55bed22c4150 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55bed22c4050 <col:25, col:30> 'int' lvalue .length 0x55bed22bd828
|     |   `-MemberExpr 0x55bed22c4020 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55bed22bd930
|     |     `-DeclRefExpr 0x55bed22c4000 <col:25> 'const String' lvalue ParmVar 0x55bed22bdef8 'x' 'const String &'
|     `-ImplicitCastExpr 0x55bed22c4168 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55bed22c40d0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55bed22bd8b8
|         `-MemberExpr 0x55bed22c40a0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55bed22bd930
|           `-DeclRefExpr 0x55bed22c4080 <col:38> 'const String' lvalue ParmVar 0x55bed22bdef8 'x' 'const String &'
|-CXXMethodDecl 0x55bed22be080 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55bed22c4b40 <col:31, line:278:5>
|   `-IfStmt 0x55bed22c4b28 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55bed22c4220 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55bed22c4208 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55bed22c41d8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55bed22bd8b8
|     |     `-MemberExpr 0x55bed22c41a8 <col:6> 'String::rep_t' lvalue ->_r 0x55bed22bd930
|     |       `-CXXThisExpr 0x55bed22c4198 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55bed22c4b00 <col:15, line:277:2>
|       |-ParenExpr 0x55bed22c46d0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55bed22c46a0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55bed22c4330 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55bed22c4318 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55bed22c4300 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55bed22c42c0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55bed22bd188
|       |   |       `-ImplicitCastExpr 0x55bed22c42a8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55bed22c4278 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55bed22bd8b8
|       |   |           `-MemberExpr 0x55bed22c4248 <col:27> 'String::rep_t' lvalue ->_r 0x55bed22bd930
|       |   |             `-CXXThisExpr 0x55bed22c4238 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55bed22c4390 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55bed22c4370 <col:54> 'int' 0
|       |   `-CallExpr 0x55bed22c4600 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55bed22c45e8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55bed22c4568 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bed20237b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55bed22c4640 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55bed22c4478 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55bed22c4658 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55bed22c44a8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55bed22c4670 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55bed22c44e0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55bed22c4688 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55bed22c4550 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55bed22c4538 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55bed22c4500 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55bed22c4a20 <line:274:6, line:275:22>
|       | |-CallExpr 0x55bed22c48e0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55bed22c48c8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55bed22c4840 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55bed22ad9f0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55bed22c4810 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55bed22bd188
|       | |   `-ImplicitCastExpr 0x55bed22c47f8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55bed22c47c8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55bed22bd8b8
|       | |       `-MemberExpr 0x55bed22c4798 <col:40> 'String::rep_t' lvalue ->_r 0x55bed22bd930
|       | |         `-CXXThisExpr 0x55bed22c4788 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55bed22c49e0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55bed22c49c8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55bed22c4908 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55bed22c2860 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55bed22c4a08 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55bed22c4968 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55bed22bd8b8
|       |       `-MemberExpr 0x55bed22c4938 <col:15> 'String::rep_t' lvalue ->_r 0x55bed22bd930
|       |         `-CXXThisExpr 0x55bed22c4928 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55bed22c4ae0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55bed22c4a78 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55bed22bd8b8
|         | `-MemberExpr 0x55bed22c4a48 <col:6> 'String::rep_t' lvalue ->_r 0x55bed22bd930
|         |   `-CXXThisExpr 0x55bed22c4a38 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55bed22c4ac8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55bed22c4aa8 <col:16> 'int' 0
|-CXXMethodDecl 0x55bed22be318 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55bed22be138 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55bed22be1b8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55bed22be230 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55bed22be3f0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55bed22be640 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55bed22be4a8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55bed22be528 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55bed22be5a0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55bed22be828 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55bed22be710 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55bed22be790 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55bed22be928 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55bed22c4c18 <col:41, line:286:5>
|   `-ReturnStmt 0x55bed22c4c08 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55bed22c4bd8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55bed22c4ba0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55bed22c4b88 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55bed22c4b68 <col:46> 'int' 1
|-CXXMethodDecl 0x55bed22bebc8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55bed22be9e0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55bed22bea60 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55bed22beae0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55bed22c2860 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55bed22bec90 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55bed22c2930 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55bed22c2b00 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55bed22c29e8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55bed22c2a68 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55bed22c2bc0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55bed22c2c88 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55bed22c2d88 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55bed22c2e00 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55bed22c2e78 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55bed22c2ee0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55bed22c2fe0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55bed22c3030 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bed22c2fc0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55bed22c2fa0 <col:22> 'int' 14
|-CXXMethodDecl 0x55bed22c3248 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55bed22c3060 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55bed22c30e0 <col:38> col:41 'int'
| `-ParmVarDecl 0x55bed22c3160 <col:43> col:46 'int'
|-FriendDecl 0x55bed22c3350 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55bed22c33e0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55bed2638750 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55bed2638928 prev 0x55bed2638750 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55bed26389b8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55bed26389e0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55bed1f83580 'int'
|-TypedefDecl 0x55bed263a340 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55bed263a2f0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55bed263a2d0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55bed2638bf8 'type'
|     `-SubstTemplateTypeParmType 0x55bed2638bc0 'String' sugar
|       |-TemplateTypeParmType 0x55bed2277de0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bed2277d90 'T'
|       `-RecordType 0x55bed22b45d0 'String'
|         `-CXXRecord 0x55bed22b4540 'String'
|-TypedefDecl 0x55bed263a3f8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55bed263a3c0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55bed263a3a0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55bed263a340 'type'
|     `-ElaboratedType 0x55bed263a2f0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55bed263a2d0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55bed2638bf8 'type'
|         `-SubstTemplateTypeParmType 0x55bed2638bc0 'String' sugar
|           |-TemplateTypeParmType 0x55bed2277de0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55bed2277d90 'T'
|           `-RecordType 0x55bed22b45d0 'String'
|             `-CXXRecord 0x55bed22b4540 'String'
|-CXXMethodDecl 0x55bed263a578 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55bed263a488 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55bed263a668 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55bed263a748 <line:23:5, col:20> col:5 used ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55bed263aa18 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55bed263a920 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55bed263ac58 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55bed263aad0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55bed263ab48 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55bed263ae28 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55bed263ad18 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55bed263ad90 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55bed263af88 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55bed263b058 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55bed263b2a8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55bed263b118 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55bed263b190 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55bed263b508 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55bed263b378 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55bed263b3f0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55bed263b6c8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55bed263b5d8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55bed263b888 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55bed263b790 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55bed263b940 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55bed263b9f0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55bed263bc28 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55bed263baa0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55bed263bb18 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55bed263bec8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55bed263bdd0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55bed263bf90 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55bed263bfe0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55bed263c030 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55bed24ebd70 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55bed26373d8 prev 0x55bed24ebd70 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55bed26386c0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55bed2638670 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55bed2638650 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55bed2638500 'type'
|     `-SubstTemplateTypeParmType 0x55bed2638370 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55bed224db90 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55bed224db38 'F'
|       `-RecordType 0x55bed2637fd0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55bed2637ef0 'typed_array_memory'
|-FieldDecl 0x55bed263c080 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55bed263c0d0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55bed263c108 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55bed2637470 'String' sugar
|   |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55bed22850a8 'T'
|   `-RecordType 0x55bed22b45d0 'String'
|     `-CXXRecord 0x55bed22b4540 'String'
|-TypedefDecl 0x55bed263c198 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55bed263c160 'String &'
|   `-SubstTemplateTypeParmType 0x55bed2637470 'String' sugar
|     |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55bed22850a8 'T'
|     `-RecordType 0x55bed22b45d0 'String'
|       `-CXXRecord 0x55bed22b4540 'String'
|-TypedefDecl 0x55bed263c228 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55bed263c1f0 'const String &'
|   `-QualType 0x55bed2637471 'const String' const
|     `-SubstTemplateTypeParmType 0x55bed2637470 'String' sugar
|       |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bed22850a8 'T'
|       `-RecordType 0x55bed22b45d0 'String'
|         `-CXXRecord 0x55bed22b4540 'String'
|-TypedefDecl 0x55bed263c2b8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55bed263c280 'String *'
|   `-SubstTemplateTypeParmType 0x55bed2637470 'String' sugar
|     |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55bed22850a8 'T'
|     `-RecordType 0x55bed22b45d0 'String'
|       `-CXXRecord 0x55bed22b4540 'String'
|-TypedefDecl 0x55bed263c348 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55bed263c310 'const String *'
|   `-QualType 0x55bed2637471 'const String' const
|     `-SubstTemplateTypeParmType 0x55bed2637470 'String' sugar
|       |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bed22850a8 'T'
|       `-RecordType 0x55bed22b45d0 'String'
|         `-CXXRecord 0x55bed22b4540 'String'
|-TypedefDecl 0x55bed263cfa0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55bed263cf50 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55bed263cf30 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55bed263ce68 'type'
|     `-LValueReferenceType 0x55bed263ce30 'const String &'
|       `-QualType 0x55bed263cbd1 'const String' const
|         `-SubstTemplateTypeParmType 0x55bed263cbd0 'String' sugar
|           |-TemplateTypeParmType 0x55bed2257ae0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55bed2257a88 'T'
|           `-RecordType 0x55bed22b45d0 'String'
|             `-CXXRecord 0x55bed22b4540 'String'
|-TypedefDecl 0x55bed263d008 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55bed263c1f0 'const String &'
|   `-QualType 0x55bed2637471 'const String' const
|     `-SubstTemplateTypeParmType 0x55bed2637470 'String' sugar
|       |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bed22850a8 'T'
|       `-RecordType 0x55bed22b45d0 'String'
|         `-CXXRecord 0x55bed22b4540 'String'
|-TypedefDecl 0x55bed263d060 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55bed1f83580 'int'
|-TypedefDecl 0x55bed263d0c8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55bed263c280 'String *'
|   `-SubstTemplateTypeParmType 0x55bed2637470 'String' sugar
|     |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55bed22850a8 'T'
|     `-RecordType 0x55bed22b45d0 'String'
|       `-CXXRecord 0x55bed22b4540 'String'
|-TypedefDecl 0x55bed263d130 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55bed263c310 'const String *'
|   `-QualType 0x55bed2637471 'const String' const
|     `-SubstTemplateTypeParmType 0x55bed2637470 'String' sugar
|       |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bed22850a8 'T'
|       `-RecordType 0x55bed22b45d0 'String'
|         `-CXXRecord 0x55bed22b4540 'String'
|-EnumDecl 0x55bed263d188 <line:134:5> col:5
| `-EnumConstantDecl 0x55bed263d280 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55bed263d260 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55bed2286788 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55bed2286760 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55bed2286740 <col:40> 'int' 1
|-CXXConstructorDecl 0x55bed263d308 <line:137:5, col:28> col:21 used Vector 'void ()' inline
|-CXXConstructorDecl 0x55bed263d598 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55bed263d3c0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55bed263d460 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55bed263d828 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55bed263d710 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55bed263dae8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55bed263d9d0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55bed263de00 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55bed263dce0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55bed263e110 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55bed263dff0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55bed263e400 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55bed263e248 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55bed263e2c0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55bed263e528 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55bed263e5d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bed263e630 <col:30> Inherited
|-CXXMethodDecl 0x55bed263e678 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55bed263e728 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bed263e780 <col:30> Inherited
|-CXXMethodDecl 0x55bed263e848 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55bed263e8f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bed263e950 <col:30> Inherited
|-CXXMethodDecl 0x55bed263e998 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55bed263ea48 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bed263eaa0 <col:30> Inherited
|-CXXMethodDecl 0x55bed263eae8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55bed263eb98 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bed263ebf0 <col:30> Inherited
|-CXXMethodDecl 0x55bed263ec38 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55bed263ece8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bed263ed40 <col:30> Inherited
|-CXXMethodDecl 0x55bed263ed68 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55bed263ee18 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55bed263eec8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55bed263f088 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55bed263ef78 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55bed263eff0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55bed263f1d8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55bed263f148 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bed263f388 <line:163:5, col:65> col:43 used operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55bed263f290 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55bed263f440 <col:20>
| `-OptimizeNoneAttr 0x55bed263f498 <col:30>
|-CXXMethodDecl 0x55bed263f5b8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55bed263f4c0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55bed263f670 <col:20>
| `-OptimizeNoneAttr 0x55bed263f6c8 <col:30>
|-CXXMethodDecl 0x55bed263f780 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55bed263f6f0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bed263f8c8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55bed263f838 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bed263f9f8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55bed263faf8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55bed263fbc8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55bed263fc98 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55bed263fdd8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55bed263fd48 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bed263ff20 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55bed263fe90 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bed2640068 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55bed263ffd8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55bed2640120 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55bed2640220 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55bed2640190 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55bed26402d8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55bed2640398 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55bed2640510 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55bed2640698 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55bed26405d0 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55bed2640e28 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55bed2640750 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55bed2640d88 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55bed2640c88 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55bed2640f08 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55bed2641058 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55bed2640fc8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55bed2641110 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55bed2641358 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55bed26411d0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55bed2641248 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55bed26414e8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55bed2641428 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55bed26416f8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55bed26415b0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55bed2641628 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55bed26417b8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55bed2641a18 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55bed2641920 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55bed2641ae8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit used ~Vector 'void () noexcept' inline default
  `-CompoundStmt 0x55bed26ff9d0 <col:29>

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed26dcbb8 prev 0x55bed264c6c8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55bed26dccb0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55bed26dcd40 <col:22, col:28> col:22 public
|-EnumDecl 0x55bed26dcd68 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55bed26dce88 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55bed26dce68 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55bed26dce50 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55bed26dce30 <col:14> 'int' 999
| |-EnumConstantDecl 0x55bed26dcf30 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55bed26dcf10 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55bed26dcef8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55bed26dced8 <col:14> 'int' 1
| |-EnumConstantDecl 0x55bed26dcfc0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55bed26dcfa0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55bed26dcf80 <col:17> 'int' 0
| |-EnumConstantDecl 0x55bed26dd050 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55bed26dd030 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55bed26dd010 <col:13> 'int' 1
| |-EnumConstantDecl 0x55bed26dd0e0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55bed26dd0c0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55bed26dd0a0 <col:16> 'int' 2
| |-EnumConstantDecl 0x55bed26dd170 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55bed26dd150 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55bed26dd130 <col:13> 'int' 3
| |-EnumConstantDecl 0x55bed26dd200 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55bed26dd1e0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55bed26dd1c0 <col:15> 'int' 4
| |-EnumConstantDecl 0x55bed26dd290 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55bed26dd270 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55bed26dd250 <col:14> 'int' 5
| |-EnumConstantDecl 0x55bed26dd320 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55bed26dd300 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55bed26dd2e0 <col:12> 'int' 6
| `-EnumConstantDecl 0x55bed26dd3b0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55bed26dd390 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55bed26dd370 <col:13> 'int' 7
|-VarDecl 0x55bed26dd420 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55bed26dd4a8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55bed26dd530 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55bed26dd5b8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55bed26dd640 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55bed26dd6c8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55bed26dd750 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55bed26dd7d8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55bed26dd860 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55bed26dd8e8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55bed26dd970 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55bed26dda70 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55bed26e2e08 '_nerrors' 'int'
| | `-IntegerLiteral 0x55bed26e3598 <line:128:13> 'int' 0
| `-CompoundStmt 0x55bed26e3608 <col:16, line:129:5>
|-CXXDestructorDecl 0x55bed26ddb60 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55bed26e3618 <col:29, line:132:5>
|-CXXMethodDecl 0x55bed26ddd18 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55bed26ddc50 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55bed26ddde0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55bed26ddec8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55bed26e3670 <col:44, line:161:5>
|   `-ReturnStmt 0x55bed26e3660 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55bed26e3648 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55bed26e3628 <col:9> 'ErrorHandler *' lvalue Var 0x55bed26e2e68 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55bed26de008 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55bed26ddf78 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55bed26de0d0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55bed26e36d0 <col:43, line:173:5>
|   `-ReturnStmt 0x55bed26e36c0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55bed26e36a8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55bed26e3688 <col:9> 'ErrorHandler *' lvalue Var 0x55bed26e2ee0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55bed26de188 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55bed26de208 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55bed26de318 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55bed26de288 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55bed26de468 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55bed26de3d8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55bed26de5c0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55bed26de528 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55bed26de718 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x55bed26de680 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55bed26de870 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55bed26de7d8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55bed26dea80 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55bed26de928 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55bed26de9a8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55bed26ded00 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55bed26deb40 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55bed26debc0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55bed26def28 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55bed26dedc0 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55bed26dee40 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55bed26df108 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55bed26defe8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55bed26df068 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55bed26df2e8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55bed26df1c8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55bed26df248 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55bed26df470 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55bed26df3a8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55bed26df640 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55bed26df528 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55bed26df5a0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55bed26e3928 <col:57, line:234:5>
|   `-ReturnStmt 0x55bed26e3918 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55bed26e3900 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55bed26e38a8 <col:9, col:41> 'int'
|         |-MemberExpr 0x55bed26e3878 <col:9> '<bound member function type>' ->xmessage 0x55bed26df470
|         | `-CXXThisExpr 0x55bed26e3868 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55bed26e38e8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55bed26e38d0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55bed26e3848 <col:18, col:40> 'String' (CXXTemporary 0x55bed26e3848)
|               `-CallExpr 0x55bed26e3810 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55bed26e37f8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55bed26e3770 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55bed26e1638 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55bed26e3790 <col:31> 'const String' lvalue ParmVar 0x55bed26df5a0 'str' 'const String &'
|                 `-DeclRefExpr 0x55bed26e37b0 <col:36> 'const String' lvalue ParmVar 0x55bed26df528 'anno' 'const String &'
|-CXXMethodDecl 0x55bed26df920 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55bed26df700 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55bed26df780 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55bed26df7f8 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55bed26e3bb8 <col:68, line:243:5>
|   `-ReturnStmt 0x55bed26e3ba8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55bed26e3b90 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55bed26e3b30 <col:9, col:41> 'int'
|         |-MemberExpr 0x55bed26e3b00 <col:9> '<bound member function type>' ->xmessage 0x55bed26df640
|         | `-CXXThisExpr 0x55bed26e3af0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55bed26e39c8 <col:18> 'const String' lvalue ParmVar 0x55bed26df700 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55bed26e3b78 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55bed26e3b60 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55bed26e3ad0 <col:24, col:40> 'String' (CXXTemporary 0x55bed26e3ad0)
|               `-CXXMemberCallExpr 0x55bed26e3a68 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55bed26e39f8 <col:24> '<bound member function type>' ->vformat 0x55bed26e0b00
|                 | `-CXXThisExpr 0x55bed26e39e8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55bed26e3a98 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55bed26e3a28 <col:32> 'const char *' lvalue ParmVar 0x55bed26df780 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55bed26e3ab0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55bed26e3a48 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55bed26df7f8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55bed26dfbc0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55bed26df9e8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55bed26dfa60 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55bed26dfad8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55bed26e3ef8 <col:23, line:254:5>
|   `-ReturnStmt 0x55bed26e3ee8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55bed26e3ed0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55bed26e3e70 <col:9, col:71> 'int'
|         |-MemberExpr 0x55bed26e3e40 <col:9> '<bound member function type>' ->xmessage 0x55bed26df640
|         | `-CXXThisExpr 0x55bed26e3e30 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55bed26e3eb8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55bed26e3ea0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55bed26e3df0 <col:18, col:65> 'String' (CXXTemporary 0x55bed26e3df0)
|         |     `-CallExpr 0x55bed26e3d88 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55bed26e3d70 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55bed26e3c58 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55bed26e1638 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55bed26e3c78 <col:31> 'const String' lvalue ParmVar 0x55bed26dfa60 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55bed26e3dd0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55bed26e3db8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55bed26e3d50 <col:37, col:64> 'String' (CXXTemporary 0x55bed26e3d50)
|         |             `-CallExpr 0x55bed26e3d20 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55bed26e3d08 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55bed26e3c98 <col:37> 'String (const String &)' lvalue CXXMethod 0x55bed26e1c88 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55bed26e3cb8 <col:56> 'const String' lvalue ParmVar 0x55bed26df9e8 'landmark' 'const String &'
|         `-DeclRefExpr 0x55bed26e3e10 <col:68> 'const String' lvalue ParmVar 0x55bed26dfad8 'str' 'const String &'
|-CXXMethodDecl 0x55bed26dff40 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55bed26dfc88 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55bed26dfd00 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55bed26dfd80 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55bed26dfdf8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55bed26e41b0 <col:34, line:267:5>
|   `-ReturnStmt 0x55bed26e41a0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55bed26e4188 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55bed26e4120 <col:9, col:51> 'int'
|         |-MemberExpr 0x55bed26e40f0 <col:9> '<bound member function type>' ->xmessage 0x55bed26dfbc0
|         | `-CXXThisExpr 0x55bed26e40e0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55bed26e3f98 <col:18> 'const String' lvalue ParmVar 0x55bed26dfc88 'landmark' 'const String &'
|         |-DeclRefExpr 0x55bed26e3fb8 <col:28> 'const String' lvalue ParmVar 0x55bed26dfd00 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55bed26e4170 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55bed26e4158 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55bed26e40c0 <col:34, col:50> 'String' (CXXTemporary 0x55bed26e40c0)
|               `-CXXMemberCallExpr 0x55bed26e4058 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55bed26e3fe8 <col:34> '<bound member function type>' ->vformat 0x55bed26e0b00
|                 | `-CXXThisExpr 0x55bed26e3fd8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55bed26e4088 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55bed26e4018 <col:42> 'const char *' lvalue ParmVar 0x55bed26dfd80 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55bed26e40a0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55bed26e4038 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55bed26dfdf8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55bed26e0050 <line:286:5, line:288:5> line:286:9 used nerrors 'int () const'
| `-CompoundStmt 0x55bed26e4230 <col:25, line:288:5>
|   `-ReturnStmt 0x55bed26e4220 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55bed26e4208 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55bed26e41d8 <col:9> 'const int' lvalue ->_nerrors 0x55bed26e2e08
|         `-CXXThisExpr 0x55bed26e41c8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55bed26e0260 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55bed26e0108 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55bed26e0188 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55bed26e0548 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55bed26e0328 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55bed26e03a8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55bed26e0420 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55bed26e06e0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55bed26e0618 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55bed26e0928 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55bed26e07a0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55bed26e0818 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55bed26e4490 <col:58, line:357:5>
|   `-ReturnStmt 0x55bed26e4480 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55bed26e4468 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55bed26e4438 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55bed26e4420 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55bed26e4400 <col:9, col:29> 'String' (CXXTemporary 0x55bed26e4400)
|             `-CallExpr 0x55bed26e4390 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55bed26e4378 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55bed26e42f8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55bed26e0548 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55bed26e4298 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55bed26e43c8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55bed26e42b8 <col:21> 'const char *' lvalue ParmVar 0x55bed26e07a0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55bed26e43e0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55bed26e42d8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55bed26e0818 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55bed26e0b00 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55bed26e09f0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55bed26e0a68 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55bed26e0c58 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55bed26e0bc8 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55bed26e0da0 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55bed26e0d10 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55bed26e1040 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55bed26e0e58 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55bed26e0ed8 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55bed26e0f50 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55bed26e11a0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55bed26e1110 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55bed26e45a8 <col:37, line:441:5>
|   `-IfStmt 0x55bed26e4590 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55bed26e4518 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55bed26e44e8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55bed26e44a8 <col:6> 'int' lvalue ParmVar 0x55bed26e1110 'level' 'int'
|     | `-ImplicitCastExpr 0x55bed26e4500 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55bed26e44c8 <col:15> 'ErrorHandler::Level' EnumConstant 0x55bed26dd170 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55bed26e4578 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55bed26e4548 <col:8> 'int' lvalue ->_nerrors 0x55bed26e2e08
|         `-CXXThisExpr 0x55bed26e4538 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55bed26e1268 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55bed26e4640 <col:26, line:448:5>
|   `-BinaryOperator 0x55bed26e4620 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55bed26e45d0 <col:2> 'int' lvalue ->_nerrors 0x55bed26e2e08
|     | `-CXXThisExpr 0x55bed26e45c0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55bed26e4600 <col:13> 'int' 0
|-CXXMethodDecl 0x55bed26e1430 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55bed26e1320 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55bed26e1398 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55bed26e1638 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55bed26e14f0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55bed26e1568 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55bed26e18e8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55bed26e16f8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55bed26e1778 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55bed26e17f8 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55bed26e19a0 <col:59> 0 0
|-CXXMethodDecl 0x55bed26e1b38 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55bed26e1a18 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55bed26e1a98 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55bed26e4cb0 <col:70, line:534:5>
|   |-DeclStmt 0x55bed26e47b0 <line:528:2, col:20>
|   | |-VarDecl 0x55bed26e4668 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55bed26e46d0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55bed26e4708 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55bed26e4770 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55bed26e4880 <line:529:2, col:23>
|   | `-VarDecl 0x55bed26e47e0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55bed26e4868 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55bed26e4848 <col:18> 'const char *' lvalue ParmVar 0x55bed26e1a18 'begin' 'const char *'
|   |-DoStmt 0x55bed26e4c48 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55bed26e4b78 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55bed26e4b60 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55bed26e4b40 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55bed26e4898 <col:6> 'const char *' lvalue Var 0x55bed26e47e0 'x' 'const char *'
|   | |     `-CallExpr 0x55bed26e4a90 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55bed26e4a78 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55bed26e4a30 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55bed26e32e0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55bed26e4af8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55bed26e4ae0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55bed26e4950 <col:20, col:27> 'String' (CXXTemporary 0x55bed26e4950)
|   | |       |     `-CXXTemporaryObjectExpr 0x55bed26e4918 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55bed26e4b10 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55bed26e4970 <col:30> 'const char *' lvalue Var 0x55bed26e47e0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55bed26e4b28 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55bed26e4990 <col:33> 'const char *' lvalue ParmVar 0x55bed26e1a98 'end' 'const char *'
|   | |       |-UnaryOperator 0x55bed26e49d0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55bed26e49b0 <col:39> 'String' lvalue Var 0x55bed26e4668 'name' 'String'
|   | |       |-UnaryOperator 0x55bed26e4a08 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55bed26e49e8 <col:46> 'String' lvalue Var 0x55bed26e4708 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55bed26e4a20 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55bed26e4c30 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55bed26e4c18 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55bed26e4bf8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55bed26e4bc8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55bed22b7d38
|   |         `-ImplicitCastExpr 0x55bed26e4bb0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55bed26e4b90 <col:11> 'String' lvalue Var 0x55bed26e4668 'name' 'String'
|   `-ReturnStmt 0x55bed26e4ca0 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55bed26e4c88 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55bed26e4c68 <col:9> 'const char *' lvalue Var 0x55bed26e47e0 'x' 'const char *'
|-CXXMethodDecl 0x55bed26e1c88 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55bed26e1bf8 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55bed26e52b8 <col:55, line:550:5>
|   `-IfStmt 0x55bed26e5290 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55bed26e4ef0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55bed26e4ed8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55bed26e4ec0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55bed26e4ea0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55bed26e4e70 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55bed22b7d38
|     | |       `-DeclRefExpr 0x55bed26e4d10 <col:6> 'const String' lvalue ParmVar 0x55bed26e1bf8 'x' 'const String &'
|     | `-BinaryOperator 0x55bed26e4e50 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55bed26e4e20 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55bed26e4dd0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55bed26e4db8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55bed26e4d70 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55bed22d1570 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55bed26e4d30 <col:11> 'const String' lvalue ParmVar 0x55bed26e1bf8 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55bed26e4d50 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55bed26e4e38 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55bed26e4e08 <col:19> 'char' 123
|     |-ReturnStmt 0x55bed26e4f60 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55bed26e4f30 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55bed26e4f10 <col:13> 'const String' lvalue ParmVar 0x55bed26e1bf8 'x' 'const String &'
|     `-IfStmt 0x55bed26e5268 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55bed26e4ff8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55bed26e4fe0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55bed26e4fc0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55bed26e4f90 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55bed22b7d38
|       |       `-DeclRefExpr 0x55bed26e4f70 <col:11> 'const String' lvalue ParmVar 0x55bed26e1bf8 'x' 'const String &'
|       |-ReturnStmt 0x55bed26e5180 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55bed26e5168 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55bed26e5138 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55bed26e5120 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55bed26e5100 <col:13, col:29> 'String' (CXXTemporary 0x55bed26e5100)
|       |         `-CallExpr 0x55bed26e50b0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55bed26e5098 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55bed26e5010 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55bed26e1430 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55bed26e50e0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55bed26e5030 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55bed26e5050 <col:28> 'const String' lvalue ParmVar 0x55bed26e1bf8 'x' 'const String &'
|       `-ReturnStmt 0x55bed26e5258 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55bed26e5240 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55bed26e5210 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55bed26e51f8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55bed26e51d8 <col:13, col:20> 'String' (CXXTemporary 0x55bed26e51d8)
|                 `-CXXTemporaryObjectExpr 0x55bed26e51a0 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55bed26e1e50 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55bed26e1d40 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55bed26e1db8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55bed26e3588 <col:71> 'bool' false
|-CXXRecordDecl 0x55bed26e1f00 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55bed26e21f8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55bed26e2190 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55bed26e2130 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55bed26e20f0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55bed22b45d0 'String'
|       | `-CXXRecord 0x55bed22b4540 'String'
|       |-BuiltinType 0x55bed1f83580 'int'
|       `-DecayedType 0x55bed264d710 '__va_list_tag *' sugar
|         |-TypedefType 0x55bed264d6e0 'va_list' sugar
|         | |-Typedef 0x55bed21a5680 'va_list'
|         | `-TypedefType 0x55bed21a5630 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55bed20dd258 '__gnuc_va_list'
|         |   `-TypedefType 0x55bed20dd1c0 '__builtin_va_list' sugar
|         |     |-Typedef 0x55bed1fc4d38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55bed1fc4ce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55bed1f842d0 '__va_list_tag'
|         |         `-CXXRecord 0x55bed1f84238 '__va_list_tag'
|         `-PointerType 0x55bed21aaf20 '__va_list_tag *'
|           `-RecordType 0x55bed1f842d0 '__va_list_tag'
|             `-CXXRecord 0x55bed1f84238 '__va_list_tag'
|-EnumDecl 0x55bed26e2250 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55bed26e2350 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55bed26e28b0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed26e2330 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55bed26e2310 <col:16> 'int' 1
| |-EnumConstantDecl 0x55bed26e23e0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55bed26e28c8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed26e23c0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55bed26e23a0 <col:21> 'int' 2
| |-EnumConstantDecl 0x55bed26e2470 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55bed26e28e0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed26e2450 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55bed26e2430 <col:22> 'int' 4
| |-EnumConstantDecl 0x55bed26e2500 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55bed26e28f8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed26e24e0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55bed26e24c0 <col:17> 'int' 8
| |-EnumConstantDecl 0x55bed26e2590 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55bed26e2910 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed26e2570 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55bed26e2550 <col:22> 'int' 16
| |-EnumConstantDecl 0x55bed26e2620 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55bed26e2928 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed26e2600 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55bed26e25e0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55bed26e26b0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55bed26e2940 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed26e2690 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55bed26e2670 <col:17> 'int' 64
| |-EnumConstantDecl 0x55bed26e2740 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55bed26e2958 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed26e2720 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55bed26e2700 <col:14> 'int' 128
| |-EnumConstantDecl 0x55bed26e27d0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55bed26e2970 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed26e27b0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55bed26e2790 <col:16> 'int' 256
| `-EnumConstantDecl 0x55bed26e2860 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55bed26e2988 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bed26e2840 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55bed26e2820 <col:12> 'int' 1024
|-CXXMethodDecl 0x55bed26e2b98 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55bed26e29b0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55bed26e2a50 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55bed26e2d20 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55bed26e2c58 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55bed26e2dc8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55bed26e2e08 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55bed26e2e68 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55bed26e2ee0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55bed26e32e0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55bed26e2f58 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55bed26e2fd8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55bed26e3058 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55bed26e30d0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55bed26e3148 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55bed26e31c0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55bed26e3408 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55bed26e3408
| `-ParmVarDecl 0x55bed26e3518 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55bed26e5618 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55bed26e5618
  `-ParmVarDecl 0x55bed26e5728 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed264c758 prev 0x55bed24ae818 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bed264c850 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55bed264c8e0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55bed264ca18 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55bed264c918 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55bed264de40 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55bed264de20 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55bed264d9b8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55bed264ded0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55bed264de90 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55bed264c918 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55bed264da20 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55bed264df50 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55bed264df10 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55bed264da80 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55bed264df90 <col:54> 'bool' false
| `-CompoundStmt 0x55bed264e098 <col:61, line:38:5>
|   `-BinaryOperator 0x55bed264e078 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55bed264e010 <col:9> 'const Element *' lvalue ->_context 0x55bed264d958
|     | `-CXXThisExpr 0x55bed264e000 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55bed264e060 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55bed264e040 <col:20> 'int' 0
|-CXXConstructorDecl 0x55bed264cc28 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55bed264cad8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55bed264cb50 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55bed264de78 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55bed264de58 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55bed264d958 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55bed264e0f0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55bed264e0b0 <col:20> 'const Element *' lvalue ParmVar 0x55bed264cad8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55bed264d9b8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55bed264e170 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55bed264e130 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55bed264cb50 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55bed264da20 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55bed264e1f0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55bed264e1b0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55bed264da80 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55bed264e230 <col:73> 'bool' false
| `-CompoundStmt 0x55bed264e2a8 <col:80, line:46:5>
|-CXXMethodDecl 0x55bed264cd58 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55bed264e320 <col:36, line:51:5>
|   `-ReturnStmt 0x55bed264e310 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55bed264e2f8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55bed264e2c8 <col:16> 'const Element *const' lvalue ->_context 0x55bed264d958
|         `-CXXThisExpr 0x55bed264e2b8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55bed264ce48 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55bed264e3a0 <col:32, line:57:5>
|   `-ReturnStmt 0x55bed264e390 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55bed264e378 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55bed264e348 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55bed264d9b8
|         `-CXXThisExpr 0x55bed264e338 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55bed264cf08 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55bed264d090 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55bed264cfc0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55bed264d1e0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55bed264d150 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55bed264d330 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55bed264d2a0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55bed264d538 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55bed264d3e8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55bed264d460 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55bed264d868 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55bed264d5f8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55bed264d678 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55bed264d740 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55bed264d920 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55bed264d958 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55bed264d9b8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55bed264da20 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55bed264da80 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55bed264dad0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55bed264dad0
| `-ParmVarDecl 0x55bed264dbe8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55bed264dc88 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55bed264dc88
| `-ParmVarDecl 0x55bed264dd98 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55bed26ee568 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55bed26744d0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55bed26746a8 prev 0x55bed26744d0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55bed2674738 <col:46, col:52> col:46 public
|-TypedefDecl 0x55bed2674760 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55bed1f83580 'int'
|-TypedefDecl 0x55bed2682000 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55bed2681fb0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55bed2674c10 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55bed2674b10 'type'
|     `-TemplateSpecializationType 0x55bed2674aa0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55bed2674980 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55bed2674960 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55bed2674940 <col:24> 'unsigned long' 4
|       `-RecordType 0x55bed2674a80 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55bed26749a0 'char_array'
|-TypedefDecl 0x55bed26820b8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55bed2682080 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55bed2682060 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55bed2682000 'type'
|     `-ElaboratedType 0x55bed2681fb0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55bed2674c10 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55bed2674b10 'type'
|         `-TemplateSpecializationType 0x55bed2674aa0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55bed2674980 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55bed2674960 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55bed2674940 <col:24> 'unsigned long' 4
|           `-RecordType 0x55bed2674a80 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55bed26749a0 'char_array'
|-CXXMethodDecl 0x55bed2682238 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55bed2682148 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55bed2682328 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55bed2682408 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55bed26826d8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55bed26825e0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55bed2682918 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55bed2682790 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55bed2682808 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55bed2682ae8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55bed26829d8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55bed2682a50 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55bed2682c48 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55bed2682d18 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55bed2682f68 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55bed2682dd8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55bed2682e50 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55bed26831c8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55bed2683038 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55bed26830b0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55bed2683388 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55bed2683298 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55bed2683548 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55bed2683450 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55bed2683600 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55bed26836b0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55bed26838e8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55bed2683760 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55bed26837d8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55bed2683b88 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55bed2683a90 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55bed2683c50 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55bed2683ca0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55bed2683cf0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.3 = type { %struct.char_array.4*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.3 = type { %struct.char_array.4*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55bed26730e8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55bed26732f8 prev 0x55bed26730e8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55bed2674440 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55bed26743f0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55bed26743d0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55bed2674280 'type'
|     `-SubstTemplateTypeParmType 0x55bed26740a0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55bed224d410 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bed224d3b8 'T'
|       `-RecordType 0x55bed2673bf0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55bed2673b08 'sized_array_memory'
|-FieldDecl 0x55bed2683d40 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55bed2683d90 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55bed2683dc8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55bed2673390 'int' sugar
|   |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55bed22850a8 'T'
|   `-BuiltinType 0x55bed1f83580 'int'
|-TypedefDecl 0x55bed2683e58 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55bed2683e20 'int &'
|   `-SubstTemplateTypeParmType 0x55bed2673390 'int' sugar
|     |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55bed22850a8 'T'
|     `-BuiltinType 0x55bed1f83580 'int'
|-TypedefDecl 0x55bed2683ee8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55bed2683eb0 'const int &'
|   `-QualType 0x55bed2673391 'const int' const
|     `-SubstTemplateTypeParmType 0x55bed2673390 'int' sugar
|       |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bed22850a8 'T'
|       `-BuiltinType 0x55bed1f83580 'int'
|-TypedefDecl 0x55bed2683f78 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55bed2683f40 'int *'
|   `-SubstTemplateTypeParmType 0x55bed2673390 'int' sugar
|     |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55bed22850a8 'T'
|     `-BuiltinType 0x55bed1f83580 'int'
|-TypedefDecl 0x55bed2684008 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55bed2683fd0 'const int *'
|   `-QualType 0x55bed2673391 'const int' const
|     `-SubstTemplateTypeParmType 0x55bed2673390 'int' sugar
|       |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bed22850a8 'T'
|       `-BuiltinType 0x55bed1f83580 'int'
|-TypedefDecl 0x55bed2684bf0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55bed2684ba0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55bed2684b80 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55bed2684b10 'type'
|     `-SubstTemplateTypeParmType 0x55bed26848d0 'int' sugar
|       |-TemplateTypeParmType 0x55bed2258210 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bed22581c0 'T'
|       `-BuiltinType 0x55bed1f83580 'int'
|-TypedefDecl 0x55bed2684c58 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55bed2683eb0 'const int &'
|   `-QualType 0x55bed2673391 'const int' const
|     `-SubstTemplateTypeParmType 0x55bed2673390 'int' sugar
|       |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bed22850a8 'T'
|       `-BuiltinType 0x55bed1f83580 'int'
|-TypedefDecl 0x55bed2684cb0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55bed1f83580 'int'
|-TypedefDecl 0x55bed2684d18 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55bed2683f40 'int *'
|   `-SubstTemplateTypeParmType 0x55bed2673390 'int' sugar
|     |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55bed22850a8 'T'
|     `-BuiltinType 0x55bed1f83580 'int'
|-TypedefDecl 0x55bed2684d80 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55bed2683fd0 'const int *'
|   `-QualType 0x55bed2673391 'const int' const
|     `-SubstTemplateTypeParmType 0x55bed2673390 'int' sugar
|       |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bed22850a8 'T'
|       `-BuiltinType 0x55bed1f83580 'int'
|-EnumDecl 0x55bed2684dd8 <line:134:5> col:5
| `-EnumConstantDecl 0x55bed2684ed0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55bed2684eb0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55bed2286788 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55bed2286760 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55bed2286740 <col:40> 'int' 1
|-CXXConstructorDecl 0x55bed2684f58 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55bed26851a8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55bed2685010 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55bed26850b0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55bed2685468 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55bed2685350 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55bed2685728 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55bed2685610 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55bed2685a70 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55bed2685950 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55bed2685d80 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55bed2685c60 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55bed2686070 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55bed2685eb8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55bed2685f30 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55bed2686198 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55bed2686278 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bed26862d0 <col:30> Inherited
|-CXXMethodDecl 0x55bed2686318 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55bed26863c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bed2686420 <col:30> Inherited
|-CXXMethodDecl 0x55bed26864e8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55bed2686598 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bed26865f0 <col:30> Inherited
|-CXXMethodDecl 0x55bed2686638 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55bed26866e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bed2686740 <col:30> Inherited
|-CXXMethodDecl 0x55bed2686788 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55bed2686838 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bed2686890 <col:30> Inherited
|-CXXMethodDecl 0x55bed26868d8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55bed2686988 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bed26869e0 <col:30> Inherited
|-CXXMethodDecl 0x55bed2686a08 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55bed2686ab8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55bed2686b68 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55bed2686d28 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55bed2686c18 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55bed2686c90 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55bed2686e78 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55bed2686de8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bed2687028 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55bed2686f30 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55bed26870e0 <col:20>
| `-OptimizeNoneAttr 0x55bed2687138 <col:30>
|-CXXMethodDecl 0x55bed2687258 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55bed2687160 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55bed2687310 <col:20>
| `-OptimizeNoneAttr 0x55bed2687368 <col:30>
|-CXXMethodDecl 0x55bed2687420 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55bed2687390 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bed2687568 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55bed26874d8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bed2687698 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55bed26877c8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55bed2687898 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55bed2687968 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55bed2687aa8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55bed2687a18 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bed2687bf0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55bed2687b60 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bed2687d38 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55bed2687ca8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55bed2687df0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55bed2687ef0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55bed2687e60 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55bed2687fa8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55bed2688068 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55bed2688168 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55bed26882e8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55bed2688228 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55bed2688aa8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55bed26883a0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55bed2688a08 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55bed2688908 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55bed2688b88 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55bed2688cd8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55bed2688c48 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55bed2688d90 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55bed268a5a8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55bed2688e50 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55bed268a490 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55bed268a768 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55bed268a678 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55bed268a9b8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55bed268a830 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55bed268a8a8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55bed268aa78 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55bed268acd8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55bed268abe0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55bed268ada8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.2 = type { %class.vector_memory.3 }
  NonVirtualBaseLLVMType:%class.Vector.2 = type { %class.vector_memory.3 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed2671258 prev 0x55bed2655998 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55bed2671350 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55bed2671440 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55bed269b6a0 <col:16, line:828:9>
|-CXXDestructorDecl 0x55bed2671530 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55bed269b6b0 <col:25, line:830:9>
|-CXXMethodDecl 0x55bed2671630 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55bed26716e0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55bed2671788 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55bed2671788
| `-ParmVarDecl 0x55bed2671898 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55bed2672058 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55bed2672058
  `-ParmVarDecl 0x55bed2672168 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed26557a8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55bed2655908 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55bed2655998 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55bed2655a50 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55bed2655b58 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55bed2655a88 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55bed268c368 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55bed268c348 <col:31> 'int' 0
|-CXXConstructorDecl 0x55bed2655e78 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55bed2655cf0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55bed2655d68 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55bed268c3a0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55bed268c380 <col:59> 'int' 0
|-CXXConstructorDecl 0x55bed2656050 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55bed2655f40 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55bed2655fb8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55bed268c3d8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55bed268c3b8 <col:55> 'int' 0
|-CXXConstructorDecl 0x55bed2656408 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55bed26561f0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55bed2656268 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55bed26562e0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55bed268c410 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55bed268c3f0 <col:31> 'int' 0
|-CXXConstructorDecl 0x55bed26565c8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55bed2656508 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55bed26566c0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55bed26568a8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55bed26567b0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55bed2656998 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55bed268c7c0 <col:24, line:291:5>
|   `-ReturnStmt 0x55bed268c7b0 <line:290:9, col:79>
|     `-BinaryOperator 0x55bed268c790 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55bed268c668 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55bed268c5c0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55bed268c5a0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55bed268c498 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55bed268c480 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55bed268c468 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55bed268c438 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55bed2673080
|       | |   |       `-CXXThisExpr 0x55bed268c428 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55bed268c588 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55bed268c570 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55bed268c538 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55bed268c508 <col:28, col:35> '<bound member function type>' ->size 0x55bed263ed68
|       | |           `-ImplicitCastExpr 0x55bed268c558 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55bed268c4f0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55bed268c4c0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55bed2673080
|       | |                 `-CXXThisExpr 0x55bed268c4b0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55bed268c650 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55bed268c638 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55bed268c620 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55bed268c5f0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55bed268aef0
|       |         `-CXXThisExpr 0x55bed268c5e0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55bed268c770 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55bed268c758 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55bed268c740 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55bed268c700 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55bed268c6e8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55bed268c698 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55bed268afa0
|         |     |   `-CXXThisExpr 0x55bed268c688 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55bed268c6c8 <col:73> 'int' 0
|         `-IntegerLiteral 0x55bed268c720 <col:79> 'int' 0
|-CXXMethodDecl 0x55bed2656a58 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55bed268c998 <col:32, line:296:5>
|   `-ReturnStmt 0x55bed268c988 <line:295:9, col:49>
|     `-BinaryOperator 0x55bed268c968 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55bed268c848 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55bed268c830 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55bed268c818 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55bed268c7e8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55bed268aef0
|       |       `-CXXThisExpr 0x55bed268c7d8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55bed268c948 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55bed268c930 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55bed268c918 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55bed268c8d8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55bed268c8c0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55bed268c870 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55bed268afa0
|         |     |   `-CXXThisExpr 0x55bed268c860 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55bed268c8a0 <col:43> 'int' 0
|         `-IntegerLiteral 0x55bed268c8f8 <col:49> 'int' 0
|-CXXMethodDecl 0x55bed2656b48 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55bed268cba8 <col:19, line:306:5>
|   |-IfStmt 0x55bed268cac8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55bed268ca08 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55bed268c9f0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55bed268c9c0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55bed2673080
|   | |     `-CXXThisExpr 0x55bed268c9b0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55bed268caa8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55bed268ca78 <col:13, col:20> '<bound member function type>' ->clear 0x55bed26417b8
|   |     `-ImplicitCastExpr 0x55bed268ca60 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55bed268ca30 <col:13> 'Vector<String> *' lvalue ->_conf 0x55bed2673080
|   |         `-CXXThisExpr 0x55bed268ca20 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55bed268cb50 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55bed268cb20 <col:9, col:16> '<bound member function type>' .clear 0x55bed268aa78
|   |   `-MemberExpr 0x55bed268caf0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55bed268ae90
|   |     `-CXXThisExpr 0x55bed268cae0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55bed268cb98 <line:305:9, col:17>
|     `-UnaryOperator 0x55bed268cb80 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55bed268cb70 <col:17> 'Args *' this
|-CXXMethodDecl 0x55bed2656dc8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55bed2656cd0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55bed2656f48 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55bed2656e80 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55bed26572c8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55bed2656ff0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55bed2657228 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55bed2657098 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55bed2657110 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55bed268cef0 <col:67, line:327:5>
|     |-WhileStmt 0x55bed268cea0 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55bed268ccb8 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55bed268cc10 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55bed25b79e0 0x55bed259ec48 0x55bed2596678 0x55bed2564e98 0x55bed252b078 0x55bed24a6ce8 0x55bed22f02c8 0x55bed22effa0 0x55bed22e1780 0x55bed22e1430 0x55bed22e0d20 0x55bed22b3690 0x55bed223fb50
|     | | |-DeclRefExpr 0x55bed268cbd0 <col:16> 'Iter' lvalue ParmVar 0x55bed2657098 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55bed268cbf0 <col:25> 'Iter' lvalue ParmVar 0x55bed2657110 'end' 'Iter'
|     | `-CompoundStmt 0x55bed268ce80 <col:30, line:325:9>
|     |   |-CallExpr 0x55bed268ce20 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55bed268cd00 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55bed268cdf0 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55bed268cd80 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bed24abe68 0x55bed24aba88 0x55bed24ab6b8 0x55bed24ab2d8 0x55bed24aaef8 0x55bed24aab28
|     |   |   `-DeclRefExpr 0x55bed268cd60 <col:24> 'Iter' lvalue ParmVar 0x55bed2657098 'begin' 'Iter'
|     |   `-UnaryOperator 0x55bed268ce68 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55bed268ce48 <col:15> 'Iter' lvalue ParmVar 0x55bed2657098 'begin' 'Iter'
|     `-ReturnStmt 0x55bed268cee0 <line:326:9, col:17>
|       `-UnaryOperator 0x55bed268cec8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55bed268ceb8 <col:17> 'Args *' this
|-CXXMethodDecl 0x55bed26573d0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55bed2657340 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55bed2657518 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55bed2657488 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55bed26575e0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55bed268cfd0 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55bed268cf70 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55bed268cf20 <col:9> '<bound member function type>' ->reset_from 0x55bed268b318
|   | | `-CXXThisExpr 0x55bed268cf10 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55bed268cf50 <col:20> 'int' 0
|   `-ReturnStmt 0x55bed268cfc0 <line:352:9, col:17>
|     `-UnaryOperator 0x55bed268cfa8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55bed268cf98 <col:17> 'Args *' this
|-VarDecl 0x55bed2657698 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55bed2657700 <col:38> 'int' 1
|-VarDecl 0x55bed2657790 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55bed26577f8 <col:39> 'int' 2
|-VarDecl 0x55bed2657888 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55bed26578f0 <col:39> 'int' 4
|-VarDecl 0x55bed2657980 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55bed26579e8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55bed2657d68 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55bed2657a60 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55bed2657cc8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55bed2657b10 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55bed2657bb8 <col:37, col:40> col:40 referenced x 'T &'
| | `-CompoundStmt 0x55bed268d128 <col:43, line:371:5>
| |   `-ReturnStmt 0x55bed268d118 <line:370:9, col:34>
| |     `-CallExpr 0x55bed268d0e0 <col:16, col:34> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55bed268d000 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55bed268d080 <col:21> 'const char *' lvalue ParmVar 0x55bed2657b10 'keyword' 'const char *'
| |       |-IntegerLiteral 0x55bed268d0a0 <col:30> 'int' 0
| |       `-DeclRefExpr 0x55bed268d0c0 <col:33> 'T' lvalue ParmVar 0x55bed2657bb8 'x' 'T &'
| `-CXXMethodDecl 0x55bed26fe5c8 <line:369:5, line:371:5> line:369:11 used read 'Args &(const char *, bool &)'
|   |-TemplateArgument type 'bool'
|   |-ParmVarDecl 0x55bed26fe3e8 <col:16, col:28> col:28 keyword 'const char *'
|   `-ParmVarDecl 0x55bed26fe4b8 <col:37, col:40> col:40 x 'bool &'
|-FunctionTemplateDecl 0x55bed2658098 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55bed2657dd0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55bed2657ff8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55bed2657e80 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed2657f28 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55bed268d278 <col:45, line:375:5>
|     `-ReturnStmt 0x55bed268d268 <line:374:9, col:42>
|       `-CallExpr 0x55bed268d230 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bed268d150 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bed268d1d0 <col:21> 'const char *' lvalue ParmVar 0x55bed2657e80 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bed268d1f0 <col:30> 'const int' lvalue Var 0x55bed2657698 'mandatory' 'const int'
|         `-DeclRefExpr 0x55bed268d210 <col:41> 'T' lvalue ParmVar 0x55bed2657f28 'x' 'T &'
|-FunctionTemplateDecl 0x55bed26583c8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55bed2658100 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55bed2658328 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55bed26581b0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed2658258 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55bed268d3c8 <col:45, line:379:5>
|     `-ReturnStmt 0x55bed268d3b8 <line:378:9, col:43>
|       `-CallExpr 0x55bed268d380 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bed268d2a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bed268d320 <col:21> 'const char *' lvalue ParmVar 0x55bed26581b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bed268d340 <col:30> 'const int' lvalue Var 0x55bed2657790 'positional' 'const int'
|         `-DeclRefExpr 0x55bed268d360 <col:42> 'T' lvalue ParmVar 0x55bed2658258 'x' 'T &'
|-FunctionTemplateDecl 0x55bed26586f8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55bed2658430 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55bed2658658 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55bed26584e0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed2658588 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x55bed268d5c8 <col:46, line:383:5>
|     `-ReturnStmt 0x55bed268d5b8 <line:382:9, col:55>
|       `-CallExpr 0x55bed268d580 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bed268d3f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bed268d470 <col:21> 'const char *' lvalue ParmVar 0x55bed26584e0 'keyword' 'const char *'
|         |-BinaryOperator 0x55bed268d540 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55bed268d4f0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55bed268d4d0 <col:30> 'const int' lvalue Var 0x55bed2657698 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55bed268d528 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55bed268d508 <col:42> 'const int' lvalue Var 0x55bed2657790 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55bed268d560 <col:54> 'T' lvalue ParmVar 0x55bed2658588 'x' 'T &'
|-FunctionTemplateDecl 0x55bed2658af8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55bed2658760 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55bed2658a58 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55bed2658810 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed2658890 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55bed2658938 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55bed268d708 <col:54, line:388:5>
|     |-CallExpr 0x55bed268d690 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55bed268d5e0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55bed268d620 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55bed268d630 <col:30> 'const char *' lvalue ParmVar 0x55bed2658810 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55bed268d650 <col:39> 'int' lvalue ParmVar 0x55bed2658890 'flags' 'int'
|     | `-DeclRefExpr 0x55bed268d670 <col:46> 'T' lvalue ParmVar 0x55bed2658938 'x' 'T &'
|     `-ReturnStmt 0x55bed268d6f8 <line:387:9, col:17>
|       `-UnaryOperator 0x55bed268d6e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55bed268d6d0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55bed2658fa8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55bed2658b68 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55bed2658be8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55bed2658f08 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55bed2658ca8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed2658d48 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55bed2658de8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55bed268d878 <col:74, line:403:5>
|     `-ReturnStmt 0x55bed268d868 <line:402:9, col:56>
|       `-CallExpr 0x55bed268d828 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bed268d738 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bed268d7a8 <col:28> 'const char *' lvalue ParmVar 0x55bed2658ca8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55bed268d7c8 <col:37> 'int' 0
|         |-DeclRefExpr 0x55bed268d7e8 <col:40> 'T' lvalue ParmVar 0x55bed2658d48 'x' 'T &'
|         `-DeclRefExpr 0x55bed268d808 <col:43> 'const V' lvalue ParmVar 0x55bed2658de8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55bed2659418 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55bed2659018 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55bed2659098 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55bed2659378 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55bed2659158 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed26591f8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55bed2659298 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55bed268d9e0 <col:76, line:407:5>
|     `-ReturnStmt 0x55bed268d9d0 <line:406:9, col:65>
|       `-CallExpr 0x55bed268d990 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bed268d8a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bed268d910 <col:28> 'const char *' lvalue ParmVar 0x55bed2659158 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bed268d930 <col:37> 'const int' lvalue Var 0x55bed2657790 'positional' 'const int'
|         |-DeclRefExpr 0x55bed268d950 <col:49> 'T' lvalue ParmVar 0x55bed26591f8 'x' 'T &'
|         `-DeclRefExpr 0x55bed268d970 <col:52> 'const V' lvalue ParmVar 0x55bed2659298 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55bed2659968 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55bed2659488 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55bed2659508 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55bed26598c8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55bed26595c8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed2659648 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55bed26596e8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55bed2659788 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55bed268db48 <col:85, line:412:5>
|     |-CallExpr 0x55bed268dac8 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55bed268d9f8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55bed268da38 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55bed268da48 <col:37> 'const char *' lvalue ParmVar 0x55bed26595c8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55bed268da68 <col:46> 'int' lvalue ParmVar 0x55bed2659648 'flags' 'int'
|     | |-DeclRefExpr 0x55bed268da88 <col:53> 'T' lvalue ParmVar 0x55bed26596e8 'x' 'T &'
|     | `-DeclRefExpr 0x55bed268daa8 <col:56> 'const V' lvalue ParmVar 0x55bed2659788 'default_value' 'const V &'
|     `-ReturnStmt 0x55bed268db38 <line:411:9, col:17>
|       `-UnaryOperator 0x55bed268db20 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55bed268db10 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55bed2659df8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55bed26599e0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bed2659a58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x55bed2659d58 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x55bed2659b18 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55bed2659b90 <col:37, col:39> col:39 referenced parser 'P'
| | |-ParmVarDecl 0x55bed2659c38 <col:47, col:50> col:50 referenced x 'T &'
| | `-CompoundStmt 0x55bed268dcc8 <col:53, line:425:5>
| |   `-ReturnStmt 0x55bed268dcb8 <line:424:9, col:42>
| |     `-CallExpr 0x55bed268dc78 <col:16, col:42> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55bed268db78 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55bed268dbf8 <col:21> 'const char *' lvalue ParmVar 0x55bed2659b18 'keyword' 'const char *'
| |       |-IntegerLiteral 0x55bed268dc18 <col:30> 'int' 0
| |       |-DeclRefExpr 0x55bed268dc38 <col:33> 'P' lvalue ParmVar 0x55bed2659b90 'parser' 'P'
| |       `-DeclRefExpr 0x55bed268dc58 <col:41> 'T' lvalue ParmVar 0x55bed2659c38 'x' 'T &'
| `-CXXMethodDecl 0x55bed26ff088 <line:423:5, line:425:5> line:423:11 used read 'Args &(const char *, AnnoArg, int &)'
|   |-TemplateArgument type 'AnnoArg'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55bed26fedf8 <col:16, col:28> col:28 keyword 'const char *'
|   |-ParmVarDecl 0x55bed26fee98 <col:37, col:39> col:39 parser 'AnnoArg':'AnnoArg'
|   `-ParmVarDecl 0x55bed26fef68 <col:47, col:50> col:50 x 'int &'
|-FunctionTemplateDecl 0x55bed265a248 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55bed2659e68 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bed2659ee8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bed265a1a8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55bed2659fa8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed265a020 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55bed265a0c8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55bed268de40 <col:55, line:429:5>
|     `-ReturnStmt 0x55bed268de30 <line:428:9, col:50>
|       `-CallExpr 0x55bed268ddf0 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bed268dcf0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bed268dd70 <col:21> 'const char *' lvalue ParmVar 0x55bed2659fa8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bed268dd90 <col:30> 'const int' lvalue Var 0x55bed2657698 'mandatory' 'const int'
|         |-DeclRefExpr 0x55bed268ddb0 <col:41> 'P' lvalue ParmVar 0x55bed265a020 'parser' 'P'
|         `-DeclRefExpr 0x55bed268ddd0 <col:49> 'T' lvalue ParmVar 0x55bed265a0c8 'x' 'T &'
|-FunctionTemplateDecl 0x55bed265a698 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55bed265a2b8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bed265a338 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bed265a5f8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55bed265a3f8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed265a470 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55bed265a518 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55bed268dfb8 <col:55, line:433:5>
|     `-ReturnStmt 0x55bed268dfa8 <line:432:9, col:51>
|       `-CallExpr 0x55bed268df68 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bed268de68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bed268dee8 <col:21> 'const char *' lvalue ParmVar 0x55bed265a3f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bed268df08 <col:30> 'const int' lvalue Var 0x55bed2657790 'positional' 'const int'
|         |-DeclRefExpr 0x55bed268df28 <col:42> 'P' lvalue ParmVar 0x55bed265a470 'parser' 'P'
|         `-DeclRefExpr 0x55bed268df48 <col:50> 'T' lvalue ParmVar 0x55bed265a518 'x' 'T &'
|-FunctionTemplateDecl 0x55bed265aae8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55bed265a708 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bed265a788 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x55bed265aa48 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x55bed265a848 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55bed265a8c0 <col:40, col:42> col:42 referenced parser 'P'
| | |-ParmVarDecl 0x55bed265a968 <col:50, col:53> col:53 referenced x 'T &'
| | `-CompoundStmt 0x55bed268e1e0 <col:56, line:437:5>
| |   `-ReturnStmt 0x55bed268e1d0 <line:436:9, col:63>
| |     `-CallExpr 0x55bed268e190 <col:16, col:63> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55bed268dfe0 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55bed268e060 <col:21> 'const char *' lvalue ParmVar 0x55bed265a848 'keyword' 'const char *'
| |       |-BinaryOperator 0x55bed268e130 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55bed268e0e0 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55bed268e0c0 <col:30> 'const int' lvalue Var 0x55bed2657698 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55bed268e118 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55bed268e0f8 <col:42> 'const int' lvalue Var 0x55bed2657790 'positional' 'const int' non_odr_use_constant
| |       |-DeclRefExpr 0x55bed268e150 <col:54> 'P' lvalue ParmVar 0x55bed265a8c0 'parser' 'P'
| |       `-DeclRefExpr 0x55bed268e170 <col:62> 'T' lvalue ParmVar 0x55bed265a968 'x' 'T &'
| `-CXXMethodDecl 0x55bed26fe028 <line:435:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, AnyArg, String &)'
|   |-TemplateArgument type 'AnyArg'
|   |-TemplateArgument type 'String'
|   |-ParmVarDecl 0x55bed26fdd90 <col:19, col:31> col:31 keyword 'const char *'
|   |-ParmVarDecl 0x55bed26fde38 <col:40, col:42> col:42 parser 'AnyArg':'AnyArg'
|   `-ParmVarDecl 0x55bed26fdf08 <col:50, col:53> col:53 x 'String &'
|-FunctionTemplateDecl 0x55bed265f558 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55bed265ab58 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bed265f120 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bed265f4b8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55bed265f1d8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed265f258 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55bed265f2d0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55bed265f378 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55bed268e348 <col:64, line:442:5>
|     |-CallExpr 0x55bed268e2c8 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55bed268e1f8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55bed268e238 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55bed268e248 <col:30> 'const char *' lvalue ParmVar 0x55bed265f1d8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55bed268e268 <col:39> 'int' lvalue ParmVar 0x55bed265f258 'flags' 'int'
|     | |-DeclRefExpr 0x55bed268e288 <col:46> 'P' lvalue ParmVar 0x55bed265f2d0 'parser' 'P'
|     | `-DeclRefExpr 0x55bed268e2a8 <col:54> 'T' lvalue ParmVar 0x55bed265f378 'x' 'T &'
|     `-ReturnStmt 0x55bed268e338 <line:441:9, col:17>
|       `-UnaryOperator 0x55bed268e320 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55bed268e310 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55bed265fb58 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55bed265f5d0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bed265f648 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55bed265f6c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55bed265fab8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55bed265f790 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed265f808 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55bed265f8a8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55bed265f978 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55bed268e4e0 <col:84, line:458:5>
|     `-ReturnStmt 0x55bed268e4d0 <line:457:9, col:64>
|       `-CallExpr 0x55bed268e488 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bed268e378 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bed268e3e8 <col:28> 'const char *' lvalue ParmVar 0x55bed265f790 'keyword' 'const char *'
|         |-IntegerLiteral 0x55bed268e408 <col:37> 'int' 0
|         |-DeclRefExpr 0x55bed268e428 <col:40> 'P' lvalue ParmVar 0x55bed265f808 'parser' 'P'
|         |-DeclRefExpr 0x55bed268e448 <col:48> 'T' lvalue ParmVar 0x55bed265f8a8 'x' 'T &'
|         `-DeclRefExpr 0x55bed268e468 <col:51> 'const V' lvalue ParmVar 0x55bed265f978 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55bed26600d8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55bed265fbd0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bed265fc48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55bed265fcc8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55bed2660038 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55bed265fd90 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed265fe08 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55bed265fea8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55bed265ff48 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55bed268e670 <col:86, line:462:5>
|     `-ReturnStmt 0x55bed268e660 <line:461:9, col:73>
|       `-CallExpr 0x55bed268e618 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bed268e508 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bed268e578 <col:28> 'const char *' lvalue ParmVar 0x55bed265fd90 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bed268e598 <col:37> 'const int' lvalue Var 0x55bed2657790 'positional' 'const int'
|         |-DeclRefExpr 0x55bed268e5b8 <col:49> 'P' lvalue ParmVar 0x55bed265fe08 'parser' 'P'
|         |-DeclRefExpr 0x55bed268e5d8 <col:57> 'T' lvalue ParmVar 0x55bed265fea8 'x' 'T &'
|         `-DeclRefExpr 0x55bed268e5f8 <col:60> 'const V' lvalue ParmVar 0x55bed265ff48 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55bed2660738 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55bed2660150 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bed26601c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55bed2660248 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55bed2660698 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55bed2660310 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed2660390 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55bed2660408 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55bed26604a8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55bed2660548 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55bed268e800 <col:95, line:467:5>
|     |-CallExpr 0x55bed268e778 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55bed268e688 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55bed268e6c8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55bed268e6d8 <col:37> 'const char *' lvalue ParmVar 0x55bed2660310 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55bed268e6f8 <col:46> 'int' lvalue ParmVar 0x55bed2660390 'flags' 'int'
|     | |-DeclRefExpr 0x55bed268e718 <col:53> 'P' lvalue ParmVar 0x55bed2660408 'parser' 'P'
|     | |-DeclRefExpr 0x55bed268e738 <col:61> 'T' lvalue ParmVar 0x55bed26604a8 'x' 'T &'
|     | `-DeclRefExpr 0x55bed268e758 <col:64> 'const V' lvalue ParmVar 0x55bed2660548 'default_value' 'const V &'
|     `-ReturnStmt 0x55bed268e7f0 <line:466:9, col:17>
|       `-UnaryOperator 0x55bed268e7d8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55bed268e7c8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55bed2660d18 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55bed26607b8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bed2660838 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55bed26608b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55bed2660c78 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55bed2660980 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed26609f8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55bed2660a98 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55bed2660b38 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55bed268e9a8 <col:63, line:481:5>
|     `-ReturnStmt 0x55bed268e998 <line:480:9, col:47>
|       `-CallExpr 0x55bed268e950 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bed268e830 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bed268e8b0 <col:21> 'const char *' lvalue ParmVar 0x55bed2660980 'keyword' 'const char *'
|         |-IntegerLiteral 0x55bed268e8d0 <col:30> 'int' 0
|         |-DeclRefExpr 0x55bed268e8f0 <col:33> 'P' lvalue ParmVar 0x55bed26609f8 'parser' 'P'
|         |-DeclRefExpr 0x55bed268e910 <col:41> 'T1' lvalue ParmVar 0x55bed2660a98 'x1' 'T1 &'
|         `-DeclRefExpr 0x55bed268e930 <col:45> 'T2' lvalue ParmVar 0x55bed2660b38 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55bed2661298 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55bed2660d90 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bed2660e08 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55bed2660e88 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55bed26611f8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55bed2660f50 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed2660fc8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55bed2661068 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55bed2661108 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55bed268eb48 <col:65, line:485:5>
|     `-ReturnStmt 0x55bed268eb38 <line:484:9, col:55>
|       `-CallExpr 0x55bed268eaf0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bed268e9d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bed268ea50 <col:21> 'const char *' lvalue ParmVar 0x55bed2660f50 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bed268ea70 <col:30> 'const int' lvalue Var 0x55bed2657698 'mandatory' 'const int'
|         |-DeclRefExpr 0x55bed268ea90 <col:41> 'P' lvalue ParmVar 0x55bed2660fc8 'parser' 'P'
|         |-DeclRefExpr 0x55bed268eab0 <col:49> 'T1' lvalue ParmVar 0x55bed2661068 'x1' 'T1 &'
|         `-DeclRefExpr 0x55bed268ead0 <col:53> 'T2' lvalue ParmVar 0x55bed2661108 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55bed2661818 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55bed2661310 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bed2661388 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55bed2661408 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55bed2661778 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55bed26614d0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed2661548 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55bed26615e8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55bed2661688 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55bed268ece8 <col:65, line:489:5>
|     `-ReturnStmt 0x55bed268ecd8 <line:488:9, col:56>
|       `-CallExpr 0x55bed268ec90 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bed268eb70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bed268ebf0 <col:21> 'const char *' lvalue ParmVar 0x55bed26614d0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bed268ec10 <col:30> 'const int' lvalue Var 0x55bed2657790 'positional' 'const int'
|         |-DeclRefExpr 0x55bed268ec30 <col:42> 'P' lvalue ParmVar 0x55bed2661548 'parser' 'P'
|         |-DeclRefExpr 0x55bed268ec50 <col:50> 'T1' lvalue ParmVar 0x55bed26615e8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55bed268ec70 <col:54> 'T2' lvalue ParmVar 0x55bed2661688 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55bed2661d98 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55bed2661890 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bed2661908 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55bed2661988 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55bed2661cf8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55bed2661a50 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed2661ac8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55bed2661b68 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55bed2661c08 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55bed268ef38 <col:66, line:493:5>
|     `-ReturnStmt 0x55bed268ef28 <line:492:9, col:68>
|       `-CallExpr 0x55bed268eee0 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bed268ed10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bed268ed90 <col:21> 'const char *' lvalue ParmVar 0x55bed2661a50 'keyword' 'const char *'
|         |-BinaryOperator 0x55bed268ee60 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55bed268ee10 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55bed268edf0 <col:30> 'const int' lvalue Var 0x55bed2657698 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55bed268ee48 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55bed268ee28 <col:42> 'const int' lvalue Var 0x55bed2657790 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55bed268ee80 <col:54> 'P' lvalue ParmVar 0x55bed2661ac8 'parser' 'P'
|         |-DeclRefExpr 0x55bed268eea0 <col:62> 'T1' lvalue ParmVar 0x55bed2661b68 'x1' 'T1 &'
|         `-DeclRefExpr 0x55bed268eec0 <col:66> 'T2' lvalue ParmVar 0x55bed2661c08 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55bed26623f8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55bed2661e10 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bed2661e88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55bed2661f08 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55bed2662358 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55bed2661fd0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed2662050 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55bed26620c8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55bed2662168 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55bed2662208 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55bed268f0c8 <col:74, line:498:5>
|     |-CallExpr 0x55bed268f040 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55bed268ef50 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55bed268ef90 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55bed268efa0 <col:30> 'const char *' lvalue ParmVar 0x55bed2661fd0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55bed268efc0 <col:39> 'int' lvalue ParmVar 0x55bed2662050 'flags' 'int'
|     | |-DeclRefExpr 0x55bed268efe0 <col:46> 'P' lvalue ParmVar 0x55bed26620c8 'parser' 'P'
|     | |-DeclRefExpr 0x55bed268f000 <col:54> 'T1' lvalue ParmVar 0x55bed2662168 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55bed268f020 <col:58> 'T2' lvalue ParmVar 0x55bed2662208 'x2' 'T2 &'
|     `-ReturnStmt 0x55bed268f0b8 <line:497:9, col:17>
|       `-UnaryOperator 0x55bed268f0a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55bed268f090 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55bed2662758 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55bed2662478 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55bed26626b8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55bed2662530 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed26625a8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55bed268f210 <col:52, line:509:5>
|     `-ReturnStmt 0x55bed268f200 <line:508:9, col:44>
|       `-CallExpr 0x55bed268f1c8 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bed268f0f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bed268f168 <col:26> 'const char *' lvalue ParmVar 0x55bed2662530 'keyword' 'const char *'
|         |-IntegerLiteral 0x55bed268f188 <col:35> 'int' 0
|         `-DeclRefExpr 0x55bed268f1a8 <col:38> 'P' lvalue ParmVar 0x55bed26625a8 'parser' 'P'
|-FunctionTemplateDecl 0x55bed2662a58 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55bed26627c0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55bed26629b8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55bed2662870 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed26628e8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55bed268f350 <col:54, line:513:5>
|     `-ReturnStmt 0x55bed268f340 <line:512:9, col:52>
|       `-CallExpr 0x55bed268f308 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bed268f238 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bed268f2a8 <col:26> 'const char *' lvalue ParmVar 0x55bed2662870 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bed268f2c8 <col:35> 'const int' lvalue Var 0x55bed2657698 'mandatory' 'const int'
|         `-DeclRefExpr 0x55bed268f2e8 <col:46> 'P' lvalue ParmVar 0x55bed26628e8 'parser' 'P'
|-FunctionTemplateDecl 0x55bed2662d58 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55bed2662ac0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55bed2662cb8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55bed2662b70 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed2662be8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55bed268f490 <col:54, line:517:5>
|     `-ReturnStmt 0x55bed268f480 <line:516:9, col:53>
|       `-CallExpr 0x55bed268f448 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bed268f378 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bed268f3e8 <col:26> 'const char *' lvalue ParmVar 0x55bed2662b70 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bed268f408 <col:35> 'const int' lvalue Var 0x55bed2657790 'positional' 'const int'
|         `-DeclRefExpr 0x55bed268f428 <col:47> 'P' lvalue ParmVar 0x55bed2662be8 'parser' 'P'
|-FunctionTemplateDecl 0x55bed2663058 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55bed2662dc0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55bed2662fb8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55bed2662e70 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed2662ee8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55bed268f680 <col:55, line:521:5>
|     `-ReturnStmt 0x55bed268f670 <line:520:9, col:65>
|       `-CallExpr 0x55bed268f638 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bed268f4b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bed268f528 <col:26> 'const char *' lvalue ParmVar 0x55bed2662e70 'keyword' 'const char *'
|         |-BinaryOperator 0x55bed268f5f8 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55bed268f5a8 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55bed268f588 <col:35> 'const int' lvalue Var 0x55bed2657698 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55bed268f5e0 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55bed268f5c0 <col:47> 'const int' lvalue Var 0x55bed2657790 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55bed268f618 <col:59> 'P' lvalue ParmVar 0x55bed2662ee8 'parser' 'P'
|-FunctionTemplateDecl 0x55bed2663428 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55bed26630c0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55bed2663388 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55bed2663170 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed26631f0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55bed2663268 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55bed268f7c0 <col:63, line:526:5>
|     |-CallExpr 0x55bed268f748 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55bed268f698 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55bed268f6d8 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55bed268f6e8 <col:35> 'const char *' lvalue ParmVar 0x55bed2663170 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55bed268f708 <col:44> 'int' lvalue ParmVar 0x55bed26631f0 'flags' 'int'
|     | `-DeclRefExpr 0x55bed268f728 <col:51> 'P' lvalue ParmVar 0x55bed2663268 'parser' 'P'
|     `-ReturnStmt 0x55bed268f7b0 <line:525:9, col:17>
|       `-UnaryOperator 0x55bed268f798 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55bed268f788 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55bed2663878 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55bed2663498 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bed2663518 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bed26637d8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55bed26635d8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed2663650 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55bed26636f8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55bed268f918 <col:58, line:541:5>
|     `-ReturnStmt 0x55bed268f908 <line:540:9, col:39>
|       `-CallExpr 0x55bed268f8d0 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bed268f7f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bed268f870 <col:21> 'const char *' lvalue ParmVar 0x55bed26635d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bed268f890 <col:30> 'P' lvalue ParmVar 0x55bed2663650 'parser' 'P'
|         `-DeclRefExpr 0x55bed268f8b0 <col:38> 'T' lvalue ParmVar 0x55bed26636f8 'x' 'T &'
|-FunctionTemplateDecl 0x55bed2663cc8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55bed26638e8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bed2663968 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bed2663c28 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55bed2663a28 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed2663aa0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55bed2663b48 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55bed268fa50 <col:60, line:545:5>
|     `-ReturnStmt 0x55bed268fa40 <line:544:9, col:41>
|       `-CallExpr 0x55bed268fa08 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bed268f940 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bed268f9a8 <col:23> 'const char *' lvalue ParmVar 0x55bed2663a28 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bed268f9c8 <col:32> 'P' lvalue ParmVar 0x55bed2663aa0 'parser' 'P'
|         `-DeclRefExpr 0x55bed268f9e8 <col:40> 'T' lvalue ParmVar 0x55bed2663b48 'x' 'T &'
|-FunctionTemplateDecl 0x55bed2664118 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55bed2663d38 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bed2663db8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bed2664078 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55bed2663e78 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed2663ef0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55bed2663f98 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55bed268fb88 <col:60, line:549:5>
|     `-ReturnStmt 0x55bed268fb78 <line:548:9, col:41>
|       `-CallExpr 0x55bed268fb40 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bed268fa78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bed268fae0 <col:23> 'const char *' lvalue ParmVar 0x55bed2663e78 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bed268fb00 <col:32> 'P' lvalue ParmVar 0x55bed2663ef0 'parser' 'P'
|         `-DeclRefExpr 0x55bed268fb20 <col:40> 'T' lvalue ParmVar 0x55bed2663f98 'x' 'T &'
|-FunctionTemplateDecl 0x55bed2664568 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55bed2664188 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bed2664208 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bed26644c8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55bed26642c8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed2664340 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55bed26643e8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55bed268fcc0 <col:61, line:553:5>
|     `-ReturnStmt 0x55bed268fcb0 <line:552:9, col:42>
|       `-CallExpr 0x55bed268fc78 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bed268fbb0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bed268fc18 <col:24> 'const char *' lvalue ParmVar 0x55bed26642c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bed268fc38 <col:33> 'P' lvalue ParmVar 0x55bed2664340 'parser' 'P'
|         `-DeclRefExpr 0x55bed268fc58 <col:41> 'T' lvalue ParmVar 0x55bed26643e8 'x' 'T &'
|-FunctionTemplateDecl 0x55bed2664a48 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55bed26645d8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bed2664658 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bed26649a8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55bed2664718 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed2664798 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55bed2664810 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55bed26648b8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55bed268fe38 <col:69, line:557:5>
|     `-ReturnStmt 0x55bed268fe28 <line:556:9, col:46>
|       `-CallExpr 0x55bed268fde8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bed268fce8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bed268fd68 <col:21> 'const char *' lvalue ParmVar 0x55bed2664718 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bed268fd88 <col:30> 'int' lvalue ParmVar 0x55bed2664798 'flags' 'int'
|         |-DeclRefExpr 0x55bed268fda8 <col:37> 'P' lvalue ParmVar 0x55bed2664810 'parser' 'P'
|         `-DeclRefExpr 0x55bed268fdc8 <col:45> 'T' lvalue ParmVar 0x55bed26648b8 'x' 'T &'
|-FunctionTemplateDecl 0x55bed2664d58 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55bed2664ac0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55bed2664cb8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55bed2664b70 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed2664be8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55bed268ff78 <col:56, line:571:5>
|     `-ReturnStmt 0x55bed268ff68 <line:570:9, col:48>
|       `-CallExpr 0x55bed268ff30 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bed268fe60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bed268fed0 <col:30> 'const char *' lvalue ParmVar 0x55bed2664b70 'keyword' 'const char *'
|         |-IntegerLiteral 0x55bed268fef0 <col:39> 'int' 0
|         `-DeclRefExpr 0x55bed268ff10 <col:42> 'P' lvalue ParmVar 0x55bed2664be8 'parser' 'P'
|-FunctionTemplateDecl 0x55bed26650e8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55bed2664dc0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55bed2665048 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55bed2664e70 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed2664ef0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55bed2664f68 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55bed2690148 <col:67, line:576:5>
|     |-CallExpr 0x55bed26900d0 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55bed268ff90 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55bed268ffd0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55bed268ffe0 <col:39> 'const char *' lvalue ParmVar 0x55bed2664e70 'keyword' 'const char *'
|     | |-BinaryOperator 0x55bed2690090 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55bed2690040 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55bed2690000 <col:48> 'int' lvalue ParmVar 0x55bed2664ef0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55bed2690078 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55bed2690058 <col:56> 'const int' lvalue Var 0x55bed2657980 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55bed26900b0 <col:68> 'P' lvalue ParmVar 0x55bed2664f68 'parser' 'P'
|     `-ReturnStmt 0x55bed2690138 <line:575:9, col:17>
|       `-UnaryOperator 0x55bed2690120 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55bed2690110 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55bed2665538 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55bed2665158 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bed26651d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bed2665498 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55bed2665298 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed2665310 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55bed26653b8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55bed26902b8 <col:62, line:592:5>
|     `-ReturnStmt 0x55bed26902a8 <line:591:9, col:51>
|       `-CallExpr 0x55bed2690268 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bed2690178 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bed26901e8 <col:30> 'const char *' lvalue ParmVar 0x55bed2665298 'keyword' 'const char *'
|         |-IntegerLiteral 0x55bed2690208 <col:39> 'int' 0
|         |-DeclRefExpr 0x55bed2690228 <col:42> 'P' lvalue ParmVar 0x55bed2665310 'parser' 'P'
|         `-DeclRefExpr 0x55bed2690248 <col:50> 'T' lvalue ParmVar 0x55bed26653b8 'x' 'T &'
|-FunctionTemplateDecl 0x55bed2665a18 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55bed26655a8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bed2665628 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bed2665978 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55bed26656e8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed2665768 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55bed26657e0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55bed2665888 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55bed26904b0 <col:73, line:597:5>
|     |-CallExpr 0x55bed2690430 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55bed26902d0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55bed2690310 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55bed2690320 <col:39> 'const char *' lvalue ParmVar 0x55bed26656e8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55bed26903d0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55bed2690380 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55bed2690340 <col:48> 'int' lvalue ParmVar 0x55bed2665768 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55bed26903b8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55bed2690398 <col:56> 'const int' lvalue Var 0x55bed2657980 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55bed26903f0 <col:68> 'P' lvalue ParmVar 0x55bed26657e0 'parser' 'P'
|     | `-DeclRefExpr 0x55bed2690410 <col:76> 'T' lvalue ParmVar 0x55bed2665888 'x' 'T &'
|     `-ReturnStmt 0x55bed26904a0 <line:596:9, col:17>
|       `-UnaryOperator 0x55bed2690488 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55bed2690478 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55bed2665fc8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55bed2665a90 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bed2665b08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bed2665f28 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55bed2665bc8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed2665c40 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55bed2665e00 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55bed2690620 <col:65, line:614:5>
|     `-ReturnStmt 0x55bed2690610 <line:613:9, col:46>
|       `-CallExpr 0x55bed26905d0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bed26904e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bed2690550 <col:25> 'const char *' lvalue ParmVar 0x55bed2665bc8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55bed2690570 <col:34> 'int' 0
|         |-DeclRefExpr 0x55bed2690590 <col:37> 'P' lvalue ParmVar 0x55bed2665c40 'parser' 'P'
|         `-DeclRefExpr 0x55bed26905b0 <col:45> 'Vector<T>' lvalue ParmVar 0x55bed2665e00 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55bed26663f8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55bed2666038 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55bed2666358 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55bed26660f0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed2666240 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55bed2690840 <col:55, line:618:5>
|     `-ReturnStmt 0x55bed2690830 <line:617:9, col:55>
|       `-CallExpr 0x55bed26907f0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bed2690648 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bed26906b8 <col:25> 'const char *' lvalue ParmVar 0x55bed26660f0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55bed26906d8 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55bed26907b0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55bed26907d0 <col:54> 'Vector<T>' lvalue ParmVar 0x55bed2666240 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55bed26669c8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55bed2666460 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bed26664d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bed2666928 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55bed2666598 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed2666618 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55bed2666690 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55bed26667e0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55bed2690a38 <col:76, line:623:5>
|     |-CallExpr 0x55bed26909b8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55bed2690858 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55bed2690898 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55bed26908a8 <col:34> 'const char *' lvalue ParmVar 0x55bed2666598 'keyword' 'const char *'
|     | |-BinaryOperator 0x55bed2690958 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55bed2690908 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55bed26908c8 <col:43> 'int' lvalue ParmVar 0x55bed2666618 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55bed2690940 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55bed2690920 <col:51> 'const int' lvalue Var 0x55bed2657980 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55bed2690978 <col:63> 'P' lvalue ParmVar 0x55bed2666690 'parser' 'P'
|     | `-DeclRefExpr 0x55bed2690998 <col:71> 'Vector<T>' lvalue ParmVar 0x55bed26667e0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55bed2690a28 <line:622:9, col:17>
|       `-UnaryOperator 0x55bed2690a10 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55bed2690a00 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55bed2666f08 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55bed2666a40 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bed2666ab8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bed2666e68 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55bed2666b78 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed2666bf8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55bed2666d40 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55bed2690ca0 <col:66, line:627:5>
|     `-ReturnStmt 0x55bed2690c90 <line:626:9, col:59>
|       `-CallExpr 0x55bed2690c50 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55bed2690a68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55bed2690ad8 <col:25> 'const char *' lvalue ParmVar 0x55bed2666b78 'keyword' 'const char *'
|         |-DeclRefExpr 0x55bed2690af8 <col:34> 'int' lvalue ParmVar 0x55bed2666bf8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55bed2690c10 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55bed2690c30 <col:58> 'Vector<T>' lvalue ParmVar 0x55bed2666d40 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55bed2666f98 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55bed2690d20 <col:25, line:633:5>
|   `-ReturnStmt 0x55bed2690d10 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55bed2690cf8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55bed2690cc8 <col:16> 'const bool' lvalue ->_status 0x55bed2672ee8
|         `-CXXThisExpr 0x55bed2690cb8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55bed266d220 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55bed2667050 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55bed2690e08 <col:27, line:639:5>
|   |-BinaryOperator 0x55bed2690db0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55bed2690d38 <col:9> 'bool' lvalue ParmVar 0x55bed2667050 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55bed2690d98 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55bed2690d68 <col:13> 'bool' lvalue ->_status 0x55bed2672ee8
|   |     `-CXXThisExpr 0x55bed2690d58 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55bed2690df8 <line:638:9, col:17>
|     `-UnaryOperator 0x55bed2690de0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55bed2690dd0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55bed266d3a8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55bed266d2e0 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55bed2690ef8 <col:39, line:644:5>
|   |-BinaryOperator 0x55bed2690ea0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55bed2690e28 <col:9> 'bool' lvalue ParmVar 0x55bed266d2e0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55bed2690e88 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55bed2690e58 <col:13> 'const bool' lvalue ->_status 0x55bed2672ee8
|   |     `-CXXThisExpr 0x55bed2690e48 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55bed2690ee8 <line:643:9, col:17>
|     `-UnaryOperator 0x55bed2690ed0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55bed2690ec0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55bed266d470 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55bed2690fa0 <col:30, line:651:5>
|   `-ReturnStmt 0x55bed2690f90 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55bed2690f78 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55bed2690f48 <col:16> 'bool' lvalue ->_read_status 0x55bed264da80
|         `-ImplicitCastExpr 0x55bed2690f28 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55bed2690f18 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55bed266d5b8 <line:655:5, line:658:5> line:655:11 used read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55bed266d528 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55bed26910a8 <col:32, line:658:5>
|   |-BinaryOperator 0x55bed2691050 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55bed2690fb8 <col:9> 'bool' lvalue ParmVar 0x55bed266d528 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55bed2691038 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55bed2691008 <col:13> 'bool' lvalue ->_read_status 0x55bed264da80
|   |     `-ImplicitCastExpr 0x55bed2690fe8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55bed2690fd8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55bed2691098 <line:657:9, col:17>
|     `-UnaryOperator 0x55bed2691080 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55bed2691070 <col:17> 'Args *' this
|-CXXMethodDecl 0x55bed266d708 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55bed266d678 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55bed26911b8 <col:44, line:663:5>
|   |-BinaryOperator 0x55bed2691160 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55bed26910c8 <col:9> 'bool' lvalue ParmVar 0x55bed266d678 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55bed2691148 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55bed2691118 <col:13> 'bool' lvalue ->_read_status 0x55bed264da80
|   |     `-ImplicitCastExpr 0x55bed26910f8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55bed26910e8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55bed26911a8 <line:662:9, col:17>
|     `-UnaryOperator 0x55bed2691190 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55bed2691180 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55bed266d7d0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55bed266d898 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55bed266d960 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55bed266da28 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55bed266dd38 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55bed266dac8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55bed266dc98 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55bed266dba8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55bed2691578 <col:19, line:706:5>
|     `-IfStmt 0x55bed2691550 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55bed26912b8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55bed2691480 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55bed2691450 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55bed2691410 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55bed2691310 <col:42> '<bound member function type>' ->simple_slot 0x55bed268bfd0
|       |     | `-CXXThisExpr 0x55bed2691300 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55bed26913b0 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55bed2691360 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55bed25b8780 0x55bed22f4d68
|       |     | `-DeclRefExpr 0x55bed2691340 <col:55> 'T' lvalue ParmVar 0x55bed266dba8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55bed26913f0 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55bed2691540 <line:705:13, col:34>
|         `-CallExpr 0x55bed2691518 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55bed26914a0 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55bed26914f8 <col:33> 'T' lvalue ParmVar 0x55bed266dba8 'x' 'T &'
|-FunctionTemplateDecl 0x55bed266e008 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55bed266dd98 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55bed266df68 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55bed266de78 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55bed2691950 <col:31, line:717:5>
|     |-DeclStmt 0x55bed26916b8 <line:713:9, col:23>
|     | `-VarDecl 0x55bed26915a0 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55bed2691690 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55bed2691618 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55bed2691670 <col:21> 'T' lvalue ParmVar 0x55bed266de78 'x' 'T &'
|     |-IfStmt 0x55bed2691900 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55bed26917a8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55bed26918e0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55bed2691880 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55bed2691810 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bed24abe68 0x55bed24aba88 0x55bed24ab6b8 0x55bed24ab2d8 0x55bed24aaef8 0x55bed24aab28
|     |   | `-DeclRefExpr 0x55bed26917f0 <col:14> 'T *' lvalue Var 0x55bed26915a0 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55bed26918c0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55bed2691938 <line:716:9, col:16>
|       `-DeclRefExpr 0x55bed2691918 <col:16> 'T *' lvalue Var 0x55bed26915a0 's' 'T *'
|-FunctionTemplateDecl 0x55bed266e418 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55bed266e068 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55bed266e0e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55bed266e378 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55bed266e1c8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55bed266e268 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55bed2691c60 <col:37, line:726:5>
|     |-IfStmt 0x55bed2691bf0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55bed2691c10 <line:723:13, col:26>
|     | | `-VarDecl 0x55bed26919b8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55bed2691aa8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55bed2691a30 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55bed2691a88 <col:25> 'T' lvalue ParmVar 0x55bed266e1c8 'x' 'T &'
|     | |-DeclRefExpr 0x55bed2691ad0 <col:16> 'T *' lvalue Var 0x55bed26919b8 's' 'T *'
|     | `-BinaryOperator 0x55bed2691bd0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55bed2691b80 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55bed2691b10 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bed24abe68 0x55bed24aba88 0x55bed24ab6b8 0x55bed24ab2d8 0x55bed24aaef8 0x55bed24aab28
|     |   | `-DeclRefExpr 0x55bed2691af0 <col:14> 'T *' lvalue Var 0x55bed26919b8 's' 'T *'
|     |   `-DeclRefExpr 0x55bed2691bb0 <col:18> 'const V' lvalue ParmVar 0x55bed266e268 'value' 'const V &'
|     `-ReturnStmt 0x55bed2691c50 <line:725:9, col:17>
|       `-UnaryOperator 0x55bed2691c38 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55bed2691c28 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55bed266e818 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55bed266e480 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55bed266e778 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55bed266e530 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed266e5b0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55bed266e658 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55bed2695240 <col:65, line:737:5>
|     |-DeclStmt 0x55bed2691cf8 <line:732:9, col:26>
|     | `-VarDecl 0x55bed2691c90 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55bed2695208 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55bed2695228 <line:733:13, col:58>
|       | `-VarDecl 0x55bed2691d20 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55bed2691f00 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55bed2691ed0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55bed2691eb8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55bed2691e98 <col:26, col:58> 'String' (CXXTemporary 0x55bed2691e98)
|       |           `-CXXMemberCallExpr 0x55bed2691e28 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55bed2691d98 <col:26> '<bound member function type>' ->find 0x55bed268b5e8
|       |             | `-CXXThisExpr 0x55bed2691d88 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55bed2691e60 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55bed2691dc8 <col:31> 'const char *' lvalue ParmVar 0x55bed266e530 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55bed2691e78 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55bed2691de8 <col:40> 'int' lvalue ParmVar 0x55bed266e5b0 'flags' 'int'
|       |             `-DeclRefExpr 0x55bed2691e08 <col:47> 'Args::Slot *' lvalue Var 0x55bed2691c90 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55bed2691fb8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55bed2691fa0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55bed2691f80 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55bed2691f50 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55bed22b7d38
|       |       `-ImplicitCastExpr 0x55bed2691f38 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55bed2691f18 <col:20> 'String' lvalue Var 0x55bed2691d20 'str' 'String'
|       `-CompoundStmt 0x55bed26951e8 <col:61, line:736:9>
|         |-DeclStmt 0x55bed2692470 <line:734:13, col:76>
|         | `-VarDecl 0x55bed2692008 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55bed2692440 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55bed26923b0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55bed26923f8 <col:60> 'T' lvalue ParmVar 0x55bed266e658 'variable' 'T &'
|         |     `-UnaryOperator 0x55bed2692428 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55bed2692418 <col:71> 'Args *' this
|         `-CallExpr 0x55bed26951b8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55bed2694c60 <col:13> '<bound member function type>' ->postparse 0x55bed268b7f8
|           | `-CXXThisExpr 0x55bed2694c50 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55bed2695178 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55bed2694c90 <col:23> 'T *' lvalue Var 0x55bed2692008 's' 'T *'
|           | `-CallExpr 0x55bed2695138 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55bed2694f10 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55bed2695010 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55bed2695030 <col:86> 'String' lvalue Var 0x55bed2691d20 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55bed26950e0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55bed2695070 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bed24abe68 0x55bed24aba88 0x55bed24ab6b8 0x55bed24ab2d8 0x55bed24aaef8 0x55bed24aab28
|           |   | `-DeclRefExpr 0x55bed2695050 <col:92> 'T *' lvalue Var 0x55bed2692008 's' 'T *'
|           |   `-UnaryOperator 0x55bed2695120 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55bed2695110 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55bed2695198 <col:103> 'Args::Slot *' lvalue Var 0x55bed2691c90 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55bed266ed68 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55bed266e888 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55bed266e908 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55bed266ecc8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55bed266e9c8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed266ea48 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55bed266eae8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55bed266eb88 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55bed26960e0 <col:88, line:745:5>
|     |-DeclStmt 0x55bed26952d8 <line:741:9, col:26>
|     | `-VarDecl 0x55bed2695270 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55bed26954f8 <line:742:9, col:55>
|     | `-VarDecl 0x55bed2695300 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55bed26954e0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55bed26954b0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55bed2695498 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55bed2695478 <col:22, col:54> 'String' (CXXTemporary 0x55bed2695478)
|     |           `-CXXMemberCallExpr 0x55bed2695408 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55bed2695378 <col:22> '<bound member function type>' ->find 0x55bed268b5e8
|     |             | `-CXXThisExpr 0x55bed2695368 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55bed2695440 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55bed26953a8 <col:27> 'const char *' lvalue ParmVar 0x55bed266e9c8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55bed2695458 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55bed26953c8 <col:36> 'int' lvalue ParmVar 0x55bed266ea48 'flags' 'int'
|     |             `-DeclRefExpr 0x55bed26953e8 <col:43> 'Args::Slot *' lvalue Var 0x55bed2695270 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55bed26958d0 <line:743:9, col:72>
|     | `-VarDecl 0x55bed2695548 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55bed26958a0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55bed2695810 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55bed2695858 <col:56> 'T' lvalue ParmVar 0x55bed266eae8 'variable' 'T &'
|     |     `-UnaryOperator 0x55bed2695888 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55bed2695878 <col:67> 'Args *' this
|     `-CallExpr 0x55bed26960b0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55bed26958f8 <col:9> '<bound member function type>' ->postparse 0x55bed268b7f8
|       | `-CXXThisExpr 0x55bed26958e8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55bed2696070 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55bed2695928 <col:19> 'T *' lvalue Var 0x55bed2695548 's' 'T *'
|       | `-ParenExpr 0x55bed2696050 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55bed2696020 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55bed2696008 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55bed2695ff0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55bed2695fd0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55bed2695fa0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55bed22b7d38
|       |     |       `-ImplicitCastExpr 0x55bed2695f88 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55bed2695948 <col:25> 'String' lvalue Var 0x55bed2695300 'str' 'String'
|       |     |-CallExpr 0x55bed2695df8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55bed2695bd0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55bed2695cd0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55bed2695cf0 <col:89> 'String' lvalue Var 0x55bed2695300 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55bed2695da0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55bed2695d30 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bed24abe68 0x55bed24aba88 0x55bed24ab6b8 0x55bed24ab2d8 0x55bed24aaef8 0x55bed24aab28
|       |     | | `-DeclRefExpr 0x55bed2695d10 <col:95> 'T *' lvalue Var 0x55bed2695548 's' 'T *'
|       |     | `-UnaryOperator 0x55bed2695de0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55bed2695dd0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55bed2695f68 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55bed2695f48 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55bed2695f18 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55bed2695ec8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55bed2695e58 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bed24abe68 0x55bed24aba88 0x55bed24ab6b8 0x55bed24ab2d8 0x55bed24aaef8 0x55bed24aab28
|       |         | | `-DeclRefExpr 0x55bed2695e38 <col:109> 'T *' lvalue Var 0x55bed2695548 's' 'T *'
|       |         | `-DeclRefExpr 0x55bed2695ef8 <col:113> 'const V' lvalue ParmVar 0x55bed266eb88 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55bed2695f38 <col:120> 'bool' true
|       `-DeclRefExpr 0x55bed2696090 <col:128> 'Args::Slot *' lvalue Var 0x55bed2695270 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55bed266f298 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55bed266ede0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bed266ee58 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bed266f1f8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55bed266ef18 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed266ef98 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55bed266f010 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55bed266f0b8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55bed2696cd8 <col:75, line:754:5>
|     |-DeclStmt 0x55bed2696188 <line:749:9, col:26>
|     | `-VarDecl 0x55bed2696120 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55bed2696ca0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55bed2696cc0 <line:750:13, col:58>
|       | `-VarDecl 0x55bed26961b0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55bed2696390 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55bed2696360 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55bed2696348 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55bed2696328 <col:26, col:58> 'String' (CXXTemporary 0x55bed2696328)
|       |           `-CXXMemberCallExpr 0x55bed26962b8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55bed2696228 <col:26> '<bound member function type>' ->find 0x55bed268b5e8
|       |             | `-CXXThisExpr 0x55bed2696218 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55bed26962f0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55bed2696258 <col:31> 'const char *' lvalue ParmVar 0x55bed266ef18 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55bed2696308 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55bed2696278 <col:40> 'int' lvalue ParmVar 0x55bed266ef98 'flags' 'int'
|       |             `-DeclRefExpr 0x55bed2696298 <col:47> 'Args::Slot *' lvalue Var 0x55bed2696120 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55bed2696448 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55bed2696430 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55bed2696410 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55bed26963e0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55bed22b7d38
|       |       `-ImplicitCastExpr 0x55bed26963c8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55bed26963a8 <col:20> 'String' lvalue Var 0x55bed26961b0 'str' 'String'
|       `-CompoundStmt 0x55bed2696c80 <col:61, line:753:9>
|         |-DeclStmt 0x55bed2696820 <line:751:13, col:63>
|         | `-VarDecl 0x55bed2696498 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55bed26967f0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55bed2696760 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55bed26967a8 <col:47> 'T' lvalue ParmVar 0x55bed266f0b8 'variable' 'T &'
|         |     `-UnaryOperator 0x55bed26967d8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55bed26967c8 <col:58> 'Args *' this
|         `-CallExpr 0x55bed2696c50 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55bed2696848 <col:13> '<bound member function type>' ->postparse 0x55bed268b7f8
|           | `-CXXThisExpr 0x55bed2696838 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55bed2696c10 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55bed2696878 <col:23> 'T *' lvalue Var 0x55bed2696498 's' 'T *'
|           | `-CallExpr 0x55bed2696bd0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55bed2696a60 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55bed2696aa8 <col:56> 'P' lvalue ParmVar 0x55bed266f010 'parser' 'P'
|           |   |-DeclRefExpr 0x55bed2696ac8 <col:64> 'String' lvalue Var 0x55bed26961b0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55bed2696b78 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55bed2696b08 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bed24abe68 0x55bed24aba88 0x55bed24ab6b8 0x55bed24ab2d8 0x55bed24aaef8 0x55bed24aab28
|           |   | `-DeclRefExpr 0x55bed2696ae8 <col:70> 'T *' lvalue Var 0x55bed2696498 's' 'T *'
|           |   `-UnaryOperator 0x55bed2696bb8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55bed2696ba8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55bed2696c30 <col:81> 'Args::Slot *' lvalue Var 0x55bed2696120 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55bed266f8f8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55bed266f310 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55bed266f388 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55bed266f408 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55bed266f858 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55bed266f4d0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed266f550 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55bed266f5c8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55bed266f668 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55bed266f708 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55bed2697a68 <col:98, line:762:5>
|     |-DeclStmt 0x55bed2696d70 <line:758:9, col:26>
|     | `-VarDecl 0x55bed2696d08 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55bed2696f90 <line:759:9, col:55>
|     | `-VarDecl 0x55bed2696d98 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55bed2696f78 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55bed2696f48 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55bed2696f30 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55bed2696f10 <col:22, col:54> 'String' (CXXTemporary 0x55bed2696f10)
|     |           `-CXXMemberCallExpr 0x55bed2696ea0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55bed2696e10 <col:22> '<bound member function type>' ->find 0x55bed268b5e8
|     |             | `-CXXThisExpr 0x55bed2696e00 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55bed2696ed8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55bed2696e40 <col:27> 'const char *' lvalue ParmVar 0x55bed266f4d0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55bed2696ef0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55bed2696e60 <col:36> 'int' lvalue ParmVar 0x55bed266f550 'flags' 'int'
|     |             `-DeclRefExpr 0x55bed2696e80 <col:43> 'Args::Slot *' lvalue Var 0x55bed2696d08 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55bed26973b0 <line:760:9, col:59>
|     | `-VarDecl 0x55bed2696fe8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55bed2697380 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55bed26972f0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55bed2697338 <col:43> 'T' lvalue ParmVar 0x55bed266f668 'variable' 'T &'
|     |     `-UnaryOperator 0x55bed2697368 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55bed2697358 <col:54> 'Args *' this
|     `-CallExpr 0x55bed2697a38 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55bed26973d8 <col:9> '<bound member function type>' ->postparse 0x55bed268b7f8
|       | `-CXXThisExpr 0x55bed26973c8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55bed26979f8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55bed2697408 <col:19> 'T *' lvalue Var 0x55bed2696fe8 's' 'T *'
|       | `-ParenExpr 0x55bed26979d8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55bed26979a8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55bed2697990 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55bed2697978 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55bed2697958 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55bed2697928 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55bed22b7d38
|       |     |       `-ImplicitCastExpr 0x55bed2697910 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55bed2697428 <col:25> 'String' lvalue Var 0x55bed2696d98 'str' 'String'
|       |     |-CallExpr 0x55bed2697780 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55bed2697610 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55bed2697658 <col:59> 'P' lvalue ParmVar 0x55bed266f5c8 'parser' 'P'
|       |     | |-DeclRefExpr 0x55bed2697678 <col:67> 'String' lvalue Var 0x55bed2696d98 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55bed2697728 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55bed26976b8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bed24abe68 0x55bed24aba88 0x55bed24ab6b8 0x55bed24ab2d8 0x55bed24aaef8 0x55bed24aab28
|       |     | | `-DeclRefExpr 0x55bed2697698 <col:73> 'T *' lvalue Var 0x55bed2696fe8 's' 'T *'
|       |     | `-UnaryOperator 0x55bed2697768 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55bed2697758 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55bed26978f0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55bed26978d0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55bed26978a0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55bed2697850 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55bed26977e0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bed24abe68 0x55bed24aba88 0x55bed24ab6b8 0x55bed24ab2d8 0x55bed24aaef8 0x55bed24aab28
|       |         | | `-DeclRefExpr 0x55bed26977c0 <col:87> 'T *' lvalue Var 0x55bed2696fe8 's' 'T *'
|       |         | `-DeclRefExpr 0x55bed2697880 <col:91> 'const V' lvalue ParmVar 0x55bed266f708 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55bed26978c0 <col:98> 'bool' true
|       `-DeclRefExpr 0x55bed2697a18 <col:106> 'Args::Slot *' lvalue Var 0x55bed2696d08 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55bed266ff68 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55bed266f978 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bed266f9f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55bed266fa78 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55bed266fec8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55bed266fb40 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed266fbc0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55bed266fc38 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55bed266fcd8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55bed266fd78 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55bed2698a48 <col:60, line:773:5>
|     |-DeclStmt 0x55bed2697b10 <line:767:9, col:26>
|     | `-VarDecl 0x55bed2697aa8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55bed2698a10 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55bed2698a30 <line:768:13, col:58>
|       | `-VarDecl 0x55bed2697b38 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55bed2697d18 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55bed2697ce8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55bed2697cd0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55bed2697cb0 <col:26, col:58> 'String' (CXXTemporary 0x55bed2697cb0)
|       |           `-CXXMemberCallExpr 0x55bed2697c40 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55bed2697bb0 <col:26> '<bound member function type>' ->find 0x55bed268b5e8
|       |             | `-CXXThisExpr 0x55bed2697ba0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55bed2697c78 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55bed2697be0 <col:31> 'const char *' lvalue ParmVar 0x55bed266fb40 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55bed2697c90 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55bed2697c00 <col:40> 'int' lvalue ParmVar 0x55bed266fbc0 'flags' 'int'
|       |             `-DeclRefExpr 0x55bed2697c20 <col:47> 'Args::Slot *' lvalue Var 0x55bed2697aa8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55bed2697dd0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55bed2697db8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55bed2697d98 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55bed2697d68 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55bed22b7d38
|       |       `-ImplicitCastExpr 0x55bed2697d50 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55bed2697d30 <col:20> 'String' lvalue Var 0x55bed2697b38 'str' 'String'
|       `-CompoundStmt 0x55bed26989e8 <col:61, line:772:9>
|         |-DeclStmt 0x55bed2698110 <line:769:13, col:66>
|         | `-VarDecl 0x55bed2697e28 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55bed26980e0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55bed2698050 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55bed2698098 <col:49> 'T1' lvalue ParmVar 0x55bed266fcd8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55bed26980c8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55bed26980b8 <col:61> 'Args *' this
|         |-DeclStmt 0x55bed2698480 <line:770:13, col:66>
|         | `-VarDecl 0x55bed2698198 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55bed2698450 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55bed26983c0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55bed2698408 <col:49> 'T2' lvalue ParmVar 0x55bed266fd78 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55bed2698438 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55bed2698428 <col:61> 'Args *' this
|         `-CallExpr 0x55bed26989b8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55bed26984a8 <col:13> '<bound member function type>' ->postparse 0x55bed268b7f8
|           | `-CXXThisExpr 0x55bed2698498 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55bed2698978 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55bed2698518 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55bed26984d8 <col:23> 'T1 *' lvalue Var 0x55bed2697e28 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55bed26984f8 <col:29> 'T2 *' lvalue Var 0x55bed2698198 's2' 'T2 *'
|           | `-CallExpr 0x55bed2698930 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55bed2698700 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55bed2698748 <col:63> 'P' lvalue ParmVar 0x55bed266fc38 'parser' 'P'
|           |   |-DeclRefExpr 0x55bed2698768 <col:71> 'String' lvalue Var 0x55bed2697b38 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55bed2698818 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55bed26987a8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bed24abe68 0x55bed24aba88 0x55bed24ab6b8 0x55bed24ab2d8 0x55bed24aaef8 0x55bed24aab28
|           |   | `-DeclRefExpr 0x55bed2698788 <col:77> 'T1 *' lvalue Var 0x55bed2697e28 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55bed26988d8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55bed2698868 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bed24abe68 0x55bed24aba88 0x55bed24ab6b8 0x55bed24ab2d8 0x55bed24aaef8 0x55bed24aab28
|           |   | `-DeclRefExpr 0x55bed2698848 <col:82> 'T2 *' lvalue Var 0x55bed2698198 's2' 'T2 *'
|           |   `-UnaryOperator 0x55bed2698918 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55bed2698908 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55bed2698998 <col:94> 'Args::Slot *' lvalue Var 0x55bed2697aa8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55bed2670358 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55bed266ffe8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55bed26702b8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55bed26700a0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed2670120 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55bed2670198 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55bed2698f60 <col:67, line:780:5>
|     |-DeclStmt 0x55bed2698ae0 <line:777:9, col:26>
|     | `-VarDecl 0x55bed2698a78 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55bed2698f28 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55bed2698f48 <line:778:13, col:58>
|       | `-VarDecl 0x55bed2698b08 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55bed2698ce8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55bed2698cb8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55bed2698ca0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55bed2698c80 <col:26, col:58> 'String' (CXXTemporary 0x55bed2698c80)
|       |           `-CXXMemberCallExpr 0x55bed2698c10 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55bed2698b80 <col:26> '<bound member function type>' ->find 0x55bed268b5e8
|       |             | `-CXXThisExpr 0x55bed2698b70 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55bed2698c48 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55bed2698bb0 <col:31> 'const char *' lvalue ParmVar 0x55bed26700a0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55bed2698c60 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55bed2698bd0 <col:40> 'int' lvalue ParmVar 0x55bed2670120 'flags' 'int'
|       |             `-DeclRefExpr 0x55bed2698bf0 <col:47> 'Args::Slot *' lvalue Var 0x55bed2698a78 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55bed2698da0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55bed2698d88 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55bed2698d68 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55bed2698d38 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55bed22b7d38
|       |       `-ImplicitCastExpr 0x55bed2698d20 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55bed2698d00 <col:20> 'String' lvalue Var 0x55bed2698b08 'str' 'String'
|       `-CallExpr 0x55bed2698ef8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55bed2698dc8 <col:13> '<bound member function type>' ->postparse 0x55bed268b7f8
|         | `-CXXThisExpr 0x55bed2698db8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55bed2698ea8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55bed2698e18 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55bed2698df8 <col:23> 'P' lvalue ParmVar 0x55bed2670198 'parser' 'P'
|         | |-DeclRefExpr 0x55bed2698e60 <col:36> 'String' lvalue Var 0x55bed2698b08 'str' 'String'
|         | `-UnaryOperator 0x55bed2698e90 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55bed2698e80 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55bed2698ed8 <col:49> 'Args::Slot *' lvalue Var 0x55bed2698a78 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55bed26706f8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55bed26703c8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55bed2670658 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55bed2670480 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed2670500 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55bed2670578 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55bed26998d0 <col:71, line:792:5>
|     |-DeclStmt 0x55bed2698ff8 <line:784:9, col:26>
|     | `-VarDecl 0x55bed2698f90 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55bed26990c8 <line:785:9, col:29>
|     | `-VarDecl 0x55bed2699028 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55bed26990b0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55bed2699090 <col:28> 'int' 1
|     |-WhileStmt 0x55bed2699780 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55bed26997a0 <line:786:16, col:61>
|     | | `-VarDecl 0x55bed26990f0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55bed26992d0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55bed26992a0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55bed2699288 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55bed2699268 <col:29, col:61> 'String' (CXXTemporary 0x55bed2699268)
|     | |           `-CXXMemberCallExpr 0x55bed26991f8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55bed2699168 <col:29> '<bound member function type>' ->find 0x55bed268b5e8
|     | |             | `-CXXThisExpr 0x55bed2699158 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55bed2699230 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55bed2699198 <col:34> 'const char *' lvalue ParmVar 0x55bed2670480 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55bed2699248 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55bed26991b8 <col:43> 'int' lvalue ParmVar 0x55bed2670500 'flags' 'int'
|     | |             `-DeclRefExpr 0x55bed26991d8 <col:50> 'Args::Slot *' lvalue Var 0x55bed2698f90 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55bed2699388 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55bed2699370 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55bed2699350 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55bed2699320 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55bed22b7d38
|     | |       `-ImplicitCastExpr 0x55bed2699308 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55bed26992e8 <col:23> 'String' lvalue Var 0x55bed26990f0 'str' 'String'
|     | `-CompoundStmt 0x55bed2699758 <col:64, line:790:9>
|     |   |-CallExpr 0x55bed26994e0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55bed26993b0 <col:13> '<bound member function type>' ->postparse 0x55bed268b7f8
|     |   | | `-CXXThisExpr 0x55bed26993a0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55bed2699490 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55bed2699400 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55bed26993e0 <col:23> 'P' lvalue ParmVar 0x55bed2670578 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55bed2699448 <col:36> 'String' lvalue Var 0x55bed26990f0 'str' 'String'
|     |   | | `-UnaryOperator 0x55bed2699478 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55bed2699468 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55bed26994c0 <col:49> 'Args::Slot *' lvalue Var 0x55bed2698f90 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55bed2699678 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55bed2699510 <col:13> 'int' lvalue Var 0x55bed2699028 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55bed2699660 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55bed2699640 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55bed26995a8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55bed2699588 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55bed2699570 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55bed2699530 <col:28> 'int' lvalue Var 0x55bed2699028 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55bed2699550 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55bed2699628 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55bed26995f8 <col:49> 'bool' lvalue ->_read_status 0x55bed264da80
|     |   |         `-ImplicitCastExpr 0x55bed26995d8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55bed26995c8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55bed2699728 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55bed2699698 <col:13> 'int' lvalue ParmVar 0x55bed2670500 'flags' 'int'
|     |     `-UnaryOperator 0x55bed2699710 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55bed26996f8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55bed26996d8 <col:23> 'const int' lvalue Var 0x55bed2657698 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55bed26998b0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55bed26997e8 <col:9> 'bool' lvalue ->_read_status 0x55bed264da80
|       | `-ImplicitCastExpr 0x55bed26997c8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55bed26997b8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55bed2699890 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55bed2699870 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55bed2699858 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55bed2699818 <col:25> 'int' lvalue Var 0x55bed2699028 'read_status' 'int'
|           `-IntegerLiteral 0x55bed2699838 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55bed2670bd8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55bed2670768 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bed26707e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bed2670b38 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55bed26708a8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed2670928 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55bed26709a0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55bed2670a48 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55bed269a860 <col:84, line:805:5>
|     |-DeclStmt 0x55bed2699978 <line:796:9, col:26>
|     | `-VarDecl 0x55bed2699910 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55bed2699a48 <line:797:9, col:29>
|     | `-VarDecl 0x55bed26999a8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55bed2699a30 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55bed2699a10 <col:28> 'int' 1
|     |-DeclStmt 0x55bed2699d80 <line:798:9, col:71>
|     | `-VarDecl 0x55bed2699a98 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55bed2699d50 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55bed2699cc0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55bed2699d08 <col:55> 'T' lvalue ParmVar 0x55bed2670a48 'variable' 'T &'
|     |     `-UnaryOperator 0x55bed2699d38 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55bed2699d28 <col:66> 'Args *' this
|     |-WhileStmt 0x55bed269a710 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55bed269a730 <line:799:16, col:61>
|     | | `-VarDecl 0x55bed2699da8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55bed2699f88 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55bed2699f58 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55bed2699f40 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55bed2699f20 <col:29, col:61> 'String' (CXXTemporary 0x55bed2699f20)
|     | |           `-CXXMemberCallExpr 0x55bed2699eb0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55bed2699e20 <col:29> '<bound member function type>' ->find 0x55bed268b5e8
|     | |             | `-CXXThisExpr 0x55bed2699e10 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55bed2699ee8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55bed2699e50 <col:34> 'const char *' lvalue ParmVar 0x55bed26708a8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55bed2699f00 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55bed2699e70 <col:43> 'int' lvalue ParmVar 0x55bed2670928 'flags' 'int'
|     | |             `-DeclRefExpr 0x55bed2699e90 <col:50> 'Args::Slot *' lvalue Var 0x55bed2699910 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55bed269a040 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55bed269a028 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55bed269a008 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55bed2699fd8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55bed22b7d38
|     | |       `-ImplicitCastExpr 0x55bed2699fc0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55bed2699fa0 <col:23> 'String' lvalue Var 0x55bed2699da8 'str' 'String'
|     | `-CompoundStmt 0x55bed269a6e8 <col:64, line:803:9>
|     |   |-CallExpr 0x55bed269a470 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55bed269a068 <col:13> '<bound member function type>' ->postparse 0x55bed268b7f8
|     |   | | `-CXXThisExpr 0x55bed269a058 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55bed269a430 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55bed269a098 <col:23> 'T *' lvalue Var 0x55bed2699a98 's' 'T *'
|     |   | | `-CallExpr 0x55bed269a3f0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55bed269a280 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55bed269a2c8 <col:56> 'P' lvalue ParmVar 0x55bed26709a0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55bed269a2e8 <col:64> 'String' lvalue Var 0x55bed2699da8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55bed269a398 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55bed269a328 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bed24abe68 0x55bed24aba88 0x55bed24ab6b8 0x55bed24ab2d8 0x55bed24aaef8 0x55bed24aab28
|     |   | |   | `-DeclRefExpr 0x55bed269a308 <col:70> 'T *' lvalue Var 0x55bed2699a98 's' 'T *'
|     |   | |   `-UnaryOperator 0x55bed269a3d8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55bed269a3c8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55bed269a450 <col:81> 'Args::Slot *' lvalue Var 0x55bed2699910 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55bed269a608 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55bed269a4a0 <col:13> 'int' lvalue Var 0x55bed26999a8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55bed269a5f0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55bed269a5d0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55bed269a538 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55bed269a518 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55bed269a500 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55bed269a4c0 <col:28> 'int' lvalue Var 0x55bed26999a8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55bed269a4e0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55bed269a5b8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55bed269a588 <col:49> 'bool' lvalue ->_read_status 0x55bed264da80
|     |   |         `-ImplicitCastExpr 0x55bed269a568 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55bed269a558 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55bed269a6b8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55bed269a628 <col:13> 'int' lvalue ParmVar 0x55bed2670928 'flags' 'int'
|     |     `-UnaryOperator 0x55bed269a6a0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55bed269a688 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55bed269a668 <col:23> 'const int' lvalue Var 0x55bed2657698 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55bed269a840 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55bed269a778 <col:9> 'bool' lvalue ->_read_status 0x55bed264da80
|       | `-ImplicitCastExpr 0x55bed269a758 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55bed269a748 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55bed269a820 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55bed269a800 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55bed269a7e8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55bed269a7a8 <col:25> 'int' lvalue Var 0x55bed26999a8 'read_status' 'int'
|           `-IntegerLiteral 0x55bed269a7c8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55bed26711b8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55bed2670c50 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55bed2670cc8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55bed2671118 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55bed2670d88 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55bed2670e08 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55bed2670e80 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55bed2670fd0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55bed269b668 <col:87, line:821:5>
|     |-DeclStmt 0x55bed269a910 <line:809:9, col:26>
|     | `-VarDecl 0x55bed269a8a8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55bed269a9e0 <line:810:9, col:29>
|     | `-VarDecl 0x55bed269a940 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55bed269a9c8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55bed269a9a8 <col:28> 'int' 1
|     |-DeclStmt 0x55bed269ac28 <line:811:9, col:38>
|     | `-VarDecl 0x55bed269ab10 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55bed269ac00 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55bed269ab88 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55bed269abe0 <col:29> 'Vector<T>' lvalue ParmVar 0x55bed2670fd0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55bed269b518 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55bed269b538 <line:812:16, col:61>
|     | | `-VarDecl 0x55bed269ac50 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55bed269ae30 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55bed269ae00 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55bed269ade8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55bed269adc8 <col:29, col:61> 'String' (CXXTemporary 0x55bed269adc8)
|     | |           `-CXXMemberCallExpr 0x55bed269ad58 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55bed269acc8 <col:29> '<bound member function type>' ->find 0x55bed268b5e8
|     | |             | `-CXXThisExpr 0x55bed269acb8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55bed269ad90 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55bed269acf8 <col:34> 'const char *' lvalue ParmVar 0x55bed2670d88 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55bed269ada8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55bed269ad18 <col:43> 'int' lvalue ParmVar 0x55bed2670e08 'flags' 'int'
|     | |             `-DeclRefExpr 0x55bed269ad38 <col:50> 'Args::Slot *' lvalue Var 0x55bed269a8a8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55bed269aee8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55bed269aed0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55bed269aeb0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55bed269ae80 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55bed22b7d38
|     | |       `-ImplicitCastExpr 0x55bed269ae68 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55bed269ae48 <col:23> 'String' lvalue Var 0x55bed269ac50 'str' 'String'
|     | `-CompoundStmt 0x55bed269b4e0 <col:64, line:819:9>
|     |   |-DeclStmt 0x55bed269afa8 <line:813:13, col:23>
|     |   | `-VarDecl 0x55bed269af10 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55bed269af88 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55bed269b128 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55bed269afd0 <col:13> '<bound member function type>' ->postparse 0x55bed268b7f8
|     |   | | `-CXXThisExpr 0x55bed269afc0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55bed269b0d0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55bed269b020 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55bed269b000 <col:23> 'P' lvalue ParmVar 0x55bed2670e80 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55bed269b068 <col:36> 'String' lvalue Var 0x55bed269ac50 'str' 'String'
|     |   | | |-DeclRefExpr 0x55bed269b088 <col:41> 'T' lvalue Var 0x55bed269af10 'sx' 'T'
|     |   | | `-UnaryOperator 0x55bed269b0b8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55bed269b0a8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55bed269b108 <col:53> 'Args::Slot *' lvalue Var 0x55bed269a8a8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55bed269b280 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55bed269b1b8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55bed269b188 <col:17> 'bool' lvalue ->_read_status 0x55bed264da80
|     |   | |   `-ImplicitCastExpr 0x55bed269b168 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55bed269b158 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55bed269b258 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55bed269b1f0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55bed269b1d0 <col:17> 'Vector<T> *' lvalue Var 0x55bed269ab10 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55bed269b238 <col:30> 'T' lvalue Var 0x55bed269af10 'sx' 'T'
|     |   |-BinaryOperator 0x55bed269b400 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55bed269b298 <col:13> 'int' lvalue Var 0x55bed269a940 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55bed269b3e8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55bed269b3c8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55bed269b330 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55bed269b310 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55bed269b2f8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55bed269b2b8 <col:28> 'int' lvalue Var 0x55bed269a940 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55bed269b2d8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55bed269b3b0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55bed269b380 <col:49> 'bool' lvalue ->_read_status 0x55bed264da80
|     |   |         `-ImplicitCastExpr 0x55bed269b360 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55bed269b350 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55bed269b4b0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55bed269b420 <col:13> 'int' lvalue ParmVar 0x55bed2670e08 'flags' 'int'
|     |     `-UnaryOperator 0x55bed269b498 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55bed269b480 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55bed269b460 <col:23> 'const int' lvalue Var 0x55bed2657698 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55bed269b648 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55bed269b580 <col:9> 'bool' lvalue ->_read_status 0x55bed264da80
|       | `-ImplicitCastExpr 0x55bed269b560 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55bed269b550 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55bed269b628 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55bed269b608 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55bed269b5f0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55bed269b5b0 <col:25> 'int' lvalue Var 0x55bed269a940 'read_status' 'int'
|           `-IntegerLiteral 0x55bed269b5d0 <col:40> 'int' 1
|-AccessSpecDecl 0x55bed2671230 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55bed2671258 prev 0x55bed2655998 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55bed2671350 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55bed2671440 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55bed269b6a0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55bed2671530 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55bed269b6b0 <col:25, line:830:9>
| |-CXXMethodDecl 0x55bed2671630 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55bed26716e0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55bed2671788 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55bed2671788
| | `-ParmVarDecl 0x55bed2671898 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55bed2672058 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55bed2672058
|   `-ParmVarDecl 0x55bed2672168 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55bed2671908 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55bed2671a68 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55bed2671c60 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55bed2671b10 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55bed2671b88 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55bed269b890 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55bed2671f18 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55bed269b700 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55bed269b6c0 <col:20> 'void *' lvalue ParmVar 0x55bed2671b10 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55bed2671f80 '_slot' 'char *'
| | | `-CXXNewExpr 0x55bed269b788 <col:32, col:45> 'char *' array Function 0x55bed20da9a8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55bed269b770 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55bed269b740 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55bed2671b88 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55bed2671fe0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55bed269b850 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55bed269b810 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55bed2671b88 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55bed269b910 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55bed2671d60 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55bed2671530 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55bed269b998 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55bed269b978 <line:840:13, col:22> 'void' array Function 0x55bed20dad08 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55bed269b960 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55bed269b930 <col:22> 'char *' lvalue ->_slot 0x55bed2671f80
| |         `-CXXThisExpr 0x55bed269b920 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55bed2671e60 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55bed2671630 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55bed269bb88 <col:22, line:844:9>
| |   `-CallExpr 0x55bed269baf0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55bed269bad8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55bed269bab8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55bed21e6788 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55bed269bb28 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55bed269ba08 <col:20> 'void *' lvalue ->_ptr 0x55bed2671f18
| |     |   `-CXXThisExpr 0x55bed269b9f8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55bed269bb58 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55bed269bb40 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55bed269ba48 <col:26> 'char *' lvalue ->_slot 0x55bed2671f80
| |     |     `-CXXThisExpr 0x55bed269ba38 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55bed269bb70 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55bed269ba88 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55bed2671fe0
| |         `-CXXThisExpr 0x55bed269ba78 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55bed2671f18 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55bed2671f80 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55bed2671fe0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55bed26721d8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55bed26721d8
| | `-ParmVarDecl 0x55bed26722e8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55bed2672388 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55bed2672388
|   `-ParmVarDecl 0x55bed2672498 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55bed2672638 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55bed2672508 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55bed26725a8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55bed26728d0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55bed2672ac8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55bed2672998 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55bed2672c48 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55bed269bbc0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55bed269bba0 <col:20> 'T *' lvalue ParmVar 0x55bed2672998 'ptr' 'T *'
|   | `-CompoundStmt 0x55bed269bc10 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55bed2672b98 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55bed2671630 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55bed269bdd0 <col:22, line:857:9>
|   |   `-CallExpr 0x55bed269bda0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55bed269bc20 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55bed25bc0b8 0x55bed25975a8 0x55bed229eeb8 0x55bed22491e8
|   |     |-CXXOperatorCallExpr 0x55bed269bd30 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55bed269bcc0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55bed24abe68 0x55bed24aba88 0x55bed24ab6b8 0x55bed24ab2d8 0x55bed24aaef8 0x55bed24aab28
|   |     | `-MemberExpr 0x55bed269bc90 <col:29> 'T *' lvalue ->_ptr 0x55bed2672c48
|   |     |   `-CXXThisExpr 0x55bed269bc80 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55bed269bd70 <col:35> 'T' lvalue ->_slot 0x55bed2672ca8
|   |       `-CXXThisExpr 0x55bed269bd60 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55bed2672c48 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55bed2672ca8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55bed2672d10 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55bed2672e10 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55bed2672e60 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bed2672df0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55bed2672dd0 <col:31> 'int' 48
|-FieldDecl 0x55bed2672e88 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55bed2672ee8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55bed2672f48 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55bed2673080 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55bed268ae90 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55bed268aef0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55bed268afa0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55bed268b1c8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55bed268b0d0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55bed268b318 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55bed268b288 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55bed268b5e8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55bed268b3d8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55bed268b458 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55bed268b500 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55bed268b7f8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55bed268b6b0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55bed268b728 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55bed268b8c8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55bed268ba18 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55bed268b980 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55bed268bda8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55bed268bad8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55bed268bb58 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55bed268bc00 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55bed268bcb8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55bed268bfd0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55bed268be80 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55bed268bef8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55bed268c2e8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55bed268c080 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55bed268c248 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55bed268c158 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.0*, %class.Vector.2, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.0*, %class.Vector.2, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class AnyArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed26bf498 <../dummy_inc/click/args.hh:1326:1, line:1338:1> line:1326:7 referenced class AnyArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bed26bf5b8 <col:1, col:7> col:7 implicit class AnyArg
|-AccessSpecDecl 0x55bed26bf648 <col:16, col:22> col:16 public
|-CXXMethodDecl 0x55bed26bf7f8 <line:1327:5, line:1329:5> line:1327:17 parse 'bool (const String &, const ArgContext &)' static
| |-ParmVarDecl 0x55bed26bf680 <col:23, col:36> col:37 'const String &'
| |-ParmVarDecl 0x55bed26bf6f8 <col:39, col:60> col:58 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55bed26bff08 <col:60> 'const ArgContext' lvalue Var 0x55bed269bdf8 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55bed26bff88 <col:72, line:1329:5>
|   `-ReturnStmt 0x55bed26bff78 <line:1328:9, col:16>
|     `-CXXBoolLiteralExpr 0x55bed26bff68 <col:16> 'bool' true
|-CXXMethodDecl 0x55bed26bfa88 <line:1330:5, line:1333:5> line:1330:17 parse 'bool (const String &, String &, const ArgContext &)' static
| |-ParmVarDecl 0x55bed26bf8b8 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55bed26bf930 <col:42, col:50> col:50 used result 'String &'
| |-ParmVarDecl 0x55bed26bf9a8 <col:58, col:79> col:77 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55bed26bff28 <col:79> 'const ArgContext' lvalue Var 0x55bed269bdf8 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55bed26c0368 <col:91, line:1333:5>
|   |-CXXOperatorCallExpr 0x55bed26c0310 <line:1331:9, col:18> 'String' lvalue
|   | |-ImplicitCastExpr 0x55bed26c02f8 <col:16> 'String &(*)(const String &)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55bed26c02d8 <col:16> 'String &(const String &)' lvalue CXXMethod 0x55bed22d4350 'operator=' 'String &(const String &)'
|   | |-DeclRefExpr 0x55bed26bffa0 <col:9> 'String' lvalue ParmVar 0x55bed26bf930 'result' 'String &'
|   | `-DeclRefExpr 0x55bed26bffc0 <col:18> 'const String' lvalue ParmVar 0x55bed26bf8b8 'str' 'const String &'
|   `-ReturnStmt 0x55bed26c0358 <line:1332:9, col:16>
|     `-CXXBoolLiteralExpr 0x55bed26c0348 <col:16> 'bool' true
|-CXXMethodDecl 0x55bed26bfe38 <line:1334:5, line:1337:5> line:1334:17 parse 'bool (const String &, Vector<String> &, const ArgContext &)' static
| |-ParmVarDecl 0x55bed26bfb50 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55bed26bfca0 <col:42, col:58> col:58 used result 'Vector<String> &'
| |-ParmVarDecl 0x55bed26bfd18 <col:66, col:87> col:85 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55bed26bff48 <col:87> 'const ArgContext' lvalue Var 0x55bed269bdf8 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55bed26c04a0 <col:99, line:1337:5>
|   |-CXXMemberCallExpr 0x55bed26c0458 <line:1335:9, col:29> 'void'
|   | |-MemberExpr 0x55bed26c0428 <col:9, col:16> '<bound member function type>' .push_back 0x55bed2640698
|   | | `-DeclRefExpr 0x55bed26c0388 <col:9> 'Vector<String>':'Vector<String>' lvalue ParmVar 0x55bed26bfca0 'result' 'Vector<String> &'
|   | `-DeclRefExpr 0x55bed26c0408 <col:26> 'const String' lvalue ParmVar 0x55bed26bfb50 'str' 'const String &'
|   `-ReturnStmt 0x55bed26c0490 <line:1336:9, col:16>
|     `-CXXBoolLiteralExpr 0x55bed26c0480 <col:16> 'bool' true
|-CXXConstructorDecl 0x55bed26ee740 <line:1326:7> col:7 implicit referenced constexpr AnyArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55bed26ee848 <col:7> col:7 implicit constexpr AnyArg 'void (const AnyArg &)' inline default trivial noexcept-unevaluated 0x55bed26ee848
| `-ParmVarDecl 0x55bed26ee958 <col:7> col:7 'const AnyArg &'
|-CXXConstructorDecl 0x55bed26ee9f8 <col:7> col:7 implicit used constexpr AnyArg 'void (AnyArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55bed26eeb08 <col:7> col:7 'AnyArg &&'
| `-CompoundStmt 0x55bed26fe230 <col:7>
`-CXXDestructorDecl 0x55bed26eeba8 <col:7> col:7 implicit referenced ~AnyArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.AnyArg = type { i8 }
  NonVirtualBaseLLVMType:%class.AnyArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class AnnoArg
         0 |   int size
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed26bdfc0 <../dummy_inc/click/args.hh:1294:1, line:1301:1> line:1294:7 referenced class AnnoArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bed26be0d8 <col:1, col:7> col:7 implicit referenced class AnnoArg
|-AccessSpecDecl 0x55bed26be168 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55bed26be278 <line:1295:5, line:1297:5> line:1295:5 used AnnoArg 'void (int)'
| |-ParmVarDecl 0x55bed26be1a8 <col:13, col:17> col:17 used s 'int'
| |-CXXCtorInitializer Field 0x55bed26be5c8 'size' 'int'
| | `-ImplicitCastExpr 0x55bed26be690 <line:1296:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55bed26be650 <col:16> 'int' lvalue ParmVar 0x55bed26be1a8 's' 'int'
| `-CompoundStmt 0x55bed26be6d8 <col:19, line:1297:5>
|-CXXMethodDecl 0x55bed26be4d0 <line:1298:5, col:83> col:10 parse 'bool (const String &, int &, const ArgContext &)'
| |-ParmVarDecl 0x55bed26be338 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x55bed26be3b8 <col:35, col:40> col:40 result 'int &'
| `-ParmVarDecl 0x55bed26be430 <col:48, col:73> col:66 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55bed26be630 <col:73> 'const ArgContext' lvalue Var 0x55bed269bdf8 'blank_args' 'const ArgContext'
|-AccessSpecDecl 0x55bed26be588 <line:1299:3, col:10> col:3 private
|-FieldDecl 0x55bed26be5c8 <line:1300:5, col:9> col:9 referenced size 'int'
|-CXXConstructorDecl 0x55bed26fe868 <line:1294:7> col:7 implicit constexpr AnnoArg 'void (const AnnoArg &)' inline default trivial noexcept-unevaluated 0x55bed26fe868
| `-ParmVarDecl 0x55bed26fe978 <col:7> col:7 'const AnnoArg &'
|-CXXConstructorDecl 0x55bed26fea18 <col:7> col:7 implicit used constexpr AnnoArg 'void (AnnoArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55bed26feb28 <col:7> col:7 used 'AnnoArg &&'
| |-CXXCtorInitializer Field 0x55bed26be5c8 'size' 'int'
| | `-ImplicitCastExpr 0x55bed26ff338 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55bed26ff2f0 <col:7> 'int' xvalue .size 0x55bed26be5c8
| |     `-CXXStaticCastExpr 0x55bed26ff2c0 <col:7> 'AnnoArg' xvalue static_cast<class AnnoArg &&> <NoOp>
| |       `-DeclRefExpr 0x55bed26ff290 <col:7> 'AnnoArg' lvalue ParmVar 0x55bed26feb28 '' 'AnnoArg &&'
| `-CompoundStmt 0x55bed26ff380 <col:7>
`-CXXDestructorDecl 0x55bed26febc8 <col:7> col:7 implicit referenced ~AnnoArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.AnnoArg = type { i32 }
  NonVirtualBaseLLVMType:%class.AnnoArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed24a47a0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bed24a48b8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55bed24a4948 <col:16, col:22> col:16 public
|-EnumDecl 0x55bed24a4970 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55bed24a4a70 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55bed24a4cc0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24a4a50 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55bed24a4a30 <col:21> 'int' 0
| |-EnumConstantDecl 0x55bed24a4b00 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55bed24a4cd8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24a4ae0 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55bed24a4ac0 <col:24> 'int' 22
| |-EnumConstantDecl 0x55bed24a4b90 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55bed24a4cf0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24a4b70 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55bed24a4b50 <col:24> 'int' 34
| |-EnumConstantDecl 0x55bed24a4c20 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55bed24a4d08 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24a4c00 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55bed24a4be0 <col:25> 'int' 95
| `-EnumConstantDecl 0x55bed24a4c70 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55bed26b0480 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55bed26b08b8 <col:7>
|-CXXConstructorDecl 0x55bed26b0588 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55bed26b0588
| `-ParmVarDecl 0x55bed26b0698 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55bed26b0738 <col:7> col:7 implicit constexpr NumArg 'void (NumArg &&)' inline default trivial noexcept-unevaluated 0x55bed26b0738
| `-ParmVarDecl 0x55bed26b0848 <col:7> col:7 'NumArg &&'
`-CXXDestructorDecl 0x55bed26b2b88 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed24a4d38 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55bed26aeca0 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55bed26aed30 <col:32, col:38> col:32 public
|-TypedefDecl 0x55bed26aed68 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55bed20dcd00 'uint32_t' sugar
|   |-Typedef 0x55bed1fec4c8 'uint32_t'
|   `-TypedefType 0x55bed1fc55a0 '__uint32_t' sugar
|     |-Typedef 0x55bed1fc5198 '__uint32_t'
|     `-BuiltinType 0x55bed1f83620 'unsigned int'
|-CXXConstructorDecl 0x55bed26aeea8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55bed26aedd8 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55bed26b0388 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55bed26b08c8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55bed26afc40 'base' 'int'
| | `-ImplicitCastExpr 0x55bed26b0428 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55bed26b03e8 <col:16> 'int' lvalue ParmVar 0x55bed26aedd8 'b' 'int'
| `-CompoundStmt 0x55bed26b0938 <col:19, line:1046:5>
|-CXXMethodDecl 0x55bed26af3a0 <line:1048:5, line:1050:50> line:1048:17 parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55bed26aef70 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55bed26aeff0 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55bed26af068 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55bed26af0e8 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55bed26af1a8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55bed26af228 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55bed26af7f8 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55bed26af470 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| `-CXXMethodDecl 0x55bed26af758 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
|   |-ParmVarDecl 0x55bed26af518 <col:27, col:41> col:41 referenced str 'const String &'
|   |-ParmVarDecl 0x55bed26af5b8 <col:46, col:49> col:49 referenced result 'V &'
|   |-ParmVarDecl 0x55bed26af630 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
|   | `-DeclRefExpr 0x55bed26b03a8 <col:82> 'const ArgContext' lvalue Var 0x55bed269bdf8 'blank_args' 'const ArgContext'
|   `-CompoundStmt 0x55bed26b1918 <col:94, line:1067:5>
|     |-DeclStmt 0x55bed26b0ac8 <line:1054:9, col:64>
|     | `-VarDecl 0x55bed26b0958 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-CXXDependentScopeMemberExpr 0x55bed26b0a80 <col:36, col:55> '<dependent type>' lvalue ->is_signed
|     |-DeclStmt 0x55bed26b0ce8 <line:1055:9, col:91>
|     | `-VarDecl 0x55bed26b0af8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55bed26b0cc0 <col:31, col:90> 'int' functional cast to int <Dependent>
|     |     `-BinaryOperator 0x55bed26b0ca0 <col:35, col:89> 'unsigned long' '/'
|     |       |-ParenExpr 0x55bed26b0c50 <col:35, col:69> 'unsigned long'
|     |       | `-BinaryOperator 0x55bed26b0c30 <col:36, col:68> 'unsigned long' '-'
|     |       |   |-BinaryOperator 0x55bed26b0bd8 <col:36, col:64> 'unsigned long' '+'
|     |       |   | |-UnaryExprOrTypeTraitExpr 0x55bed26b0b88 <col:36, col:44> 'unsigned long' sizeof 'V'
|     |       |   | `-UnaryExprOrTypeTraitExpr 0x55bed26b0bb8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |       |   `-ImplicitCastExpr 0x55bed26b0c18 <col:68> 'unsigned long' <IntegralCast>
|     |       |     `-IntegerLiteral 0x55bed26b0bf8 <col:68> 'int' 1
|     |       `-UnaryExprOrTypeTraitExpr 0x55bed26b0c80 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55bed26b0e48 <line:1056:9, col:27>
|     | `-VarDecl 0x55bed26b0de0 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
|     |-IfStmt 0x55bed26b12b8 <line:1057:9, line:1059:22>
|     | |-CXXOperatorCallExpr 0x55bed26b11e8 <line:1057:13, line:1058:24> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55bed26b1140 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55bed25b79e0 0x55bed259ec48 0x55bed2596678 0x55bed2564e98 0x55bed252b078 0x55bed24a6ce8 0x55bed22f02c8 0x55bed22effa0 0x55bed22e1780 0x55bed22e1430 0x55bed22e0d20 0x55bed22b3690 0x55bed223fb50
|     | | |-CallExpr 0x55bed26b1080 <line:1057:13, col:78> '<dependent type>'
|     | | | |-UnresolvedMemberExpr 0x55bed26b0e70 <col:13> '<bound member function type>' lvalue
|     | | | |-CXXMemberCallExpr 0x55bed26b0f20 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55bed26b0ef0 <col:19, col:23> '<bound member function type>' .begin 0x55bed22d0988
|     | | | |   `-DeclRefExpr 0x55bed26b0ed0 <col:19> 'const String' lvalue ParmVar 0x55bed26af518 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55bed26b0f90 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55bed26b0f60 <col:32, col:36> '<bound member function type>' .end 0x55bed22d0ba0
|     | | | |   `-DeclRefExpr 0x55bed26b0f40 <col:32> 'const String' lvalue ParmVar 0x55bed26af518 'str' 'const String &'
|     | | | |-DeclRefExpr 0x55bed26b0fb0 <col:43> 'const bool' lvalue Var 0x55bed26b0958 'is_signed' 'const bool'
|     | | | |-CXXFunctionalCastExpr 0x55bed26b1018 <col:54, col:67> 'int' functional cast to int <Dependent>
|     | | | | `-UnaryExprOrTypeTraitExpr 0x55bed26b0ff8 <col:58, col:66> 'unsigned long' sizeof 'V'
|     | | | |-DeclRefExpr 0x55bed26b1040 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55bed26b0de0 'x' 'IntArg::limb_type [nlimb]'
|     | | | `-DeclRefExpr 0x55bed26b1060 <col:73> 'const int' lvalue Var 0x55bed26b0af8 'nlimb' 'const int'
|     | | `-CXXMemberCallExpr 0x55bed26b1120 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55bed26b10f0 <col:16, col:20> '<bound member function type>' .end 0x55bed22d0ba0
|     | |     `-DeclRefExpr 0x55bed26b10d0 <col:16> 'const String' lvalue ParmVar 0x55bed26af518 'str' 'const String &'
|     | `-BinaryOperator 0x55bed26b1298 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55bed26b1230 <col:13> 'int' lvalue ->status 0x55bed26afca8
|     |   | `-CXXThisExpr 0x55bed26b1220 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55bed26b1280 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55bed26b1260 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55bed24a4b00 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55bed26b1598 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55bed26b1480 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55bed26b1468 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55bed26b1450 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55bed26b12e0 <col:13> 'int' lvalue ->status 0x55bed26afca8
|     | | |     `-CXXThisExpr 0x55bed26b12d0 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55bed26b1430 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55bed26b1400 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55bed26b1320 <col:23> 'int' lvalue ->status 0x55bed26afca8
|     | |   |   `-CXXThisExpr 0x55bed26b1310 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55bed26b1418 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55bed26b1350 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55bed24a4b90 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55bed26b1578 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55bed26b1518 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55bed26b14c0 <col:13, col:18> '<bound member function type>' .error 0x55bed264d090
|     |   | | `-DeclRefExpr 0x55bed26b14a0 <col:13> 'const ArgContext' lvalue ParmVar 0x55bed26af630 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55bed26b1540 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55bed26b14f0 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55bed26b1568 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55bed26b1558 <col:20> 'bool' false
|     |-DeclStmt 0x55bed26b1768 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55bed26b1710 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
|     |   `-DependentNameType 0x55bed26b16a0 'typename make_unsigned<V>::type' dependent
|     |-CallExpr 0x55bed26b18c8 <line:1065:9, col:71> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55bed26b1780 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55bed2273b18
|     | |-DeclRefExpr 0x55bed26b17c8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55bed26b0de0 'x' 'IntArg::limb_type [nlimb]'
|     | `-CXXReinterpretCastExpr 0x55bed26b1898 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
|     |   `-DeclRefExpr 0x55bed26b1810 <col:64> 'V' lvalue ParmVar 0x55bed26af5b8 'result' 'V &'
|     `-ReturnStmt 0x55bed26b1908 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x55bed26b18f8 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55bed26afbb8 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55bed26af868 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55bed26afb18 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55bed26af918 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55bed26af9b8 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55bed26afa30 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55bed26b03c8 <col:71> 'const ArgContext' lvalue Var 0x55bed269bdf8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55bed26b21a8 <col:83, line:1083:5>
| |   |-DeclStmt 0x55bed26b19e0 <line:1071:9, col:12>
| |   | `-VarDecl 0x55bed26b1978 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x55bed26b2180 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55bed26b1d00 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x55bed26b1af8 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x55bed26b1ac0 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x55bed26b1a08 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x55bed26b1a60 <col:31> 'const String' lvalue ParmVar 0x55bed26af918 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55bed26b1a80 <col:36> 'V' lvalue Var 0x55bed26b1978 'x' 'V'
| |     | |   `-DeclRefExpr 0x55bed26b1aa0 <col:39> 'const ArgContext' lvalue ParmVar 0x55bed26afa30 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55bed26b1ce0 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55bed26b1cc0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55bed26b1ca8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55bed26b1c90 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55bed26b1b20 <col:17> 'int' lvalue ->status 0x55bed26afca8
| |     |     |     `-CXXThisExpr 0x55bed26b1b10 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55bed26b1c70 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55bed26b1c40 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55bed26b1b60 <col:27> 'int' lvalue ->status 0x55bed26afca8
| |     |       |   `-CXXThisExpr 0x55bed26b1b50 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55bed26b1c58 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55bed26b1b90 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55bed24a4b90 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55bed26b1d30 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55bed26b1d20 <col:20> 'bool' false
| |     `-IfStmt 0x55bed26b2158 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55bed26b1e60 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55bed26b1e30 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55bed26b1d50 <col:18> 'int' lvalue ->status 0x55bed26afca8
| |       | |   `-CXXThisExpr 0x55bed26b1d40 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55bed26b1e48 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55bed26b1d80 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55bed24a4b90 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55bed26b2098 <col:42, line:1079:9>
| |       | |-CallExpr 0x55bed26b2040 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x55bed26b1e90 <line:1076:13> '<bound member function type>' ->range_error 0x55bed26b02b8
| |       | | | `-CXXThisExpr 0x55bed26b1e80 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55bed26b1ec0 <col:25> 'const ArgContext' lvalue ParmVar 0x55bed26afa30 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x55bed26b1fa0 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x55bed26b2018 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x55bed26b1ff8 <col:43> 'V' lvalue Var 0x55bed26b1978 'x' 'V'
| |       | `-ReturnStmt 0x55bed26b2088 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55bed26b2078 <col:20> 'bool' false
| |       `-CompoundStmt 0x55bed26b2138 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55bed26b20f8 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x55bed26b20b8 <col:13> 'V' lvalue ParmVar 0x55bed26af9b8 'result' 'V &'
| |         | `-DeclRefExpr 0x55bed26b20d8 <col:22> 'V' lvalue Var 0x55bed26b1978 'x' 'V'
| |         `-ReturnStmt 0x55bed26b2128 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55bed26b2118 <col:20> 'bool' true
| `-CXXMethodDecl 0x55bed2700898 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55bed2700670 <col:16, col:30> col:30 str 'const String &'
|   |-ParmVarDecl 0x55bed2700748 <col:35, col:38> col:38 result 'int &'
|   `-ParmVarDecl 0x55bed27007b0 <col:46, col:71> col:64 args 'const ArgContext &' cinit
|     `-DeclRefExpr 0x55bed26b03c8 <col:71> 'const ArgContext' lvalue Var 0x55bed269bdf8 'blank_args' 'const ArgContext'
|-FieldDecl 0x55bed26afc40 <line:1085:5, col:9> col:9 base 'int'
|-FieldDecl 0x55bed26afca8 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55bed26afcf8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55bed26affb0 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55bed26afd38 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55bed26afdb8 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55bed26afe30 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55bed26afeb0 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55bed26b02b8 <line:1092:5, line:1093:45> line:1092:10 referenced range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55bed26b0080 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55bed26b00f8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55bed26b0190 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x55bed26b2a08 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x55bed26b2a08
| `-ParmVarDecl 0x55bed26b2b18 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x55bed26b2c98 <col:7> col:7 implicit constexpr IntArg 'void (IntArg &&)' inline default trivial noexcept-unevaluated 0x55bed26b2c98
| `-ParmVarDecl 0x55bed26b2da8 <col:7> col:7 'IntArg &&'
`-CXXDestructorDecl 0x55bed27002a0 <col:7> col:7 implicit referenced ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class HashContainer_adapter<class IPRewriterEntry> (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class HashContainer_rep<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> >
         0 |   class HashContainer_adapter<class IPRewriterEntry> (base) (empty)
         0 |   class IPRewriterEntry ** buckets
         8 |   uint32_t nbuckets
        12 |   uint32_t first_bucket
        16 |   size_t size
        24 |   struct libdivide_u32_t bucket_divider
        24 |     uint32_t magic
        28 |     uint8_t more
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping AST Record Layout
         0 | class HashContainer<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> >
         0 |   class HashContainer_rep<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > _rep
         0 |     class HashContainer_adapter<class IPRewriterEntry> (base) (empty)
         0 |     class IPRewriterEntry ** buckets
         8 |     uint32_t nbuckets
        12 |     uint32_t first_bucket
        16 |     size_t size
        24 |     struct libdivide_u32_t bucket_divider
        24 |       uint32_t magic
        28 |       uint8_t more
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<56> >
         0 |   vector_memory<class sized_array_memory<56> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class IPRewriterInput>
         0 |   class vector_memory<class sized_array_memory<56> > vm_
         0 |     vector_memory<class sized_array_memory<56> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5)
         0 |   TimerCallback callback
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timer
         0 |   int _schedpos1
         8 |   class Timestamp _expiry_s
         8 |     union Timestamp::rep_t _t
         8 |       int64_t x
        16 |   union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
        16 |     TimerCallback callback
        24 |   void * _thunk
        32 |   class Element * _owner
        40 |   class RouterThread * _thread
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPRewriterBase
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       112 |   class HashContainer<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > _map
       112 |     class HashContainer_rep<class IPRewriterEntry, class HashContainer_adapter<class IPRewriterEntry> > _rep
       112 |       class HashContainer_adapter<class IPRewriterEntry> (base) (empty)
       112 |       class IPRewriterEntry ** buckets
       120 |       uint32_t nbuckets
       124 |       uint32_t first_bucket
       128 |       size_t size
       136 |       struct libdivide_u32_t bucket_divider
       136 |         uint32_t magic
       140 |         uint8_t more
       144 |   class Vector<class IPRewriterInput> _input_specs
       144 |     class vector_memory<class sized_array_memory<56> > vm_
       144 |       vector_memory<class sized_array_memory<56> >::type * l_
       152 |       vector_memory::size_type n_
       156 |       vector_memory::size_type capacity_
       160 |   class IPRewriterHeap * _heap
       168 |   uint32_t [2] _timeouts
       176 |   uint32_t _gc_interval_sec
       184 |   class Timer _gc_timer
       184 |     int _schedpos1
       192 |     class Timestamp _expiry_s
       192 |       union Timestamp::rep_t _t
       192 |         int64_t x
       200 |     union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
       200 |       TimerCallback callback
       208 |     void * _thunk
       216 |     class Element * _owner
       224 |     class RouterThread * _thread
           | [sizeof=232, dsize=232, align=8,
           |  nvsize=232, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55bed25a1838 <../dummy_inc/click/hashcontainer.hh:13:1, col:29> line:33:7 class HashContainer_adapter definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-TemplateArgument type 'IPRewriterEntry'
|-CXXRecordDecl 0x55bed25d4d88 prev 0x55bed25a1838 <col:1, col:7> col:7 implicit class HashContainer_adapter
|-AccessSpecDecl 0x55bed25d4e18 <col:31, col:37> col:31 public
|-TypedefDecl 0x55bed25d4f10 <line:34:5, col:34> col:34 referenced key_type 'typename IPRewriterEntry::key_type':'IPFlowID'
| `-ElaboratedType 0x55bed25d4ec0 'typename IPRewriterEntry::key_type' sugar
|   `-TypedefType 0x55bed25d4ea0 'IPRewriterEntry::key_type' sugar
|     |-Typedef 0x55bed25a3380 'key_type'
|     `-RecordType 0x55bed2597f70 'IPFlowID'
|       `-CXXRecord 0x55bed2597ee0 'IPFlowID'
|-TypedefDecl 0x55bed25d4fe0 <line:35:5, col:45> col:45 key_const_reference 'typename IPRewriterEntry::key_const_reference':'const IPFlowID &'
| `-ElaboratedType 0x55bed25d4f90 'typename IPRewriterEntry::key_const_reference' sugar
|   `-TypedefType 0x55bed25a3dc0 'IPRewriterEntry::key_const_reference' sugar
|     |-Typedef 0x55bed25a33e8 'key_const_reference'
|     `-LValueReferenceType 0x55bed259a3b0 'const IPFlowID &'
|       `-QualType 0x55bed2597f71 'const IPFlowID' const
|         `-RecordType 0x55bed2597f70 'IPFlowID'
|           `-CXXRecord 0x55bed2597ee0 'IPFlowID'
|-CXXMethodDecl 0x55bed25d51d0 <line:36:5, line:38:5> line:36:16 hashnext 'IPRewriterEntry *&(IPRewriterEntry *)' static
| `-ParmVarDecl 0x55bed25d50d8 <col:25, col:28> col:28 e 'IPRewriterEntry *'
|-CXXMethodDecl 0x55bed25d53d8 <line:39:5, line:41:5> line:39:32 hashkey 'HashContainer_adapter<IPRewriterEntry>::key_const_reference (const IPRewriterEntry *)' static
| `-ParmVarDecl 0x55bed25d52e8 <col:40, col:49> col:49 e 'const IPRewriterEntry *'
|-CXXMethodDecl 0x55bed25d5638 <line:42:5, line:44:5> line:42:17 hashkeyeq 'bool (const HashContainer_adapter<IPRewriterEntry>::key_type &, const HashContainer_adapter<IPRewriterEntry>::key_type &)' static
| |-ParmVarDecl 0x55bed25d54e8 <col:27, col:43> col:43 a 'const HashContainer_adapter<IPRewriterEntry>::key_type &'
| `-ParmVarDecl 0x55bed25d5560 <col:46, col:62> col:62 b 'const HashContainer_adapter<IPRewriterEntry>::key_type &'
|-CXXConstructorDecl 0x55bed25dab38 <line:33:7> col:7 implicit constexpr HashContainer_adapter 'void (const HashContainer_adapter<IPRewriterEntry> &)' inline default trivial noexcept-unevaluated 0x55bed25dab38
| `-ParmVarDecl 0x55bed25dac48 <col:7> col:7 'const HashContainer_adapter<IPRewriterEntry> &'
|-CXXConstructorDecl 0x55bed25dace8 <col:7> col:7 implicit constexpr HashContainer_adapter 'void (HashContainer_adapter<IPRewriterEntry> &&)' inline default trivial noexcept-unevaluated 0x55bed25dace8
| `-ParmVarDecl 0x55bed25dadf8 <col:7> col:7 'HashContainer_adapter<IPRewriterEntry> &&'
|-CXXDestructorDecl 0x55bed25db008 <col:7> col:7 implicit ~HashContainer_adapter 'void ()' inline default trivial noexcept-unevaluated 0x55bed25db008
|-CXXMethodDecl 0x55bed25db148 <col:7> col:7 implicit constexpr operator= 'HashContainer_adapter<IPRewriterEntry> &(const HashContainer_adapter<IPRewriterEntry> &)' inline default trivial noexcept-unevaluated 0x55bed25db148
| `-ParmVarDecl 0x55bed25db258 <col:7> col:7 'const HashContainer_adapter<IPRewriterEntry> &'
`-CXXMethodDecl 0x55bed25db2c8 <col:7> col:7 implicit constexpr operator= 'HashContainer_adapter<IPRewriterEntry> &(HashContainer_adapter<IPRewriterEntry> &&)' inline default trivial noexcept-unevaluated 0x55bed25db2c8
  `-ParmVarDecl 0x55bed25db3d8 <col:7> col:7 'HashContainer_adapter<IPRewriterEntry> &&'

Layout: <CGRecordLayout
  LLVMType:%class.HashContainer_adapter = type { i8 }
  NonVirtualBaseLLVMType:%class.HashContainer_adapter = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed22ea100 prev 0x55bed224f138 <../dummy_inc/click/ipaddress.hh:15:1, line:154:1> line:15:7 referenced class IPAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bed22ea1f8 <col:1, col:7> col:7 implicit referenced class IPAddress
|-AccessSpecDecl 0x55bed22ea288 <col:19, col:25> col:19 public
|-TypedefDecl 0x55bed22ea2c0 <line:17:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x55bed20dca10 'uninitialized_type'
|   `-CXXRecord 0x55bed20dc978 'uninitialized_type'
|-CXXConstructorDecl 0x55bed22ea380 <line:20:5, line:22:5> line:20:12 used IPAddress 'void ()' inline
| |-CXXCtorInitializer Field 0x55bed22edad0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55bed22edb78 <line:21:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55bed22edb38 <col:10> 'int' 0
| `-CompoundStmt 0x55bed22edbc0 <col:13, line:22:5>
|-CXXConstructorDecl 0x55bed22ea4d0 <line:25:5, line:27:5> line:25:12 used IPAddress 'void (unsigned int)' inline
| |-ParmVarDecl 0x55bed22ea440 <col:22, col:31> col:31 used x 'unsigned int'
| |-CXXCtorInitializer Field 0x55bed22edad0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55bed22edc10 <line:26:10> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x55bed22edbd0 <col:10> 'unsigned int' lvalue ParmVar 0x55bed22ea440 'x' 'unsigned int'
| `-CompoundStmt 0x55bed22edc58 <col:13, line:27:5>
|-CXXConstructorDecl 0x55bed22ea628 <line:29:5, line:31:5> line:29:21 IPAddress 'void (int)' inline
| |-ParmVarDecl 0x55bed22ea598 <col:31, col:35> col:35 used x 'int'
| |-CXXCtorInitializer Field 0x55bed22edad0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55bed22edcc0 <line:30:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55bed22edca8 <col:10> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x55bed22edc68 <col:10> 'int' lvalue ParmVar 0x55bed22ea598 'x' 'int'
| `-CompoundStmt 0x55bed22edd08 <col:13, line:31:5>
|-CXXConstructorDecl 0x55bed22ea780 <line:33:5, line:35:5> line:33:21 IPAddress 'void (unsigned long)' inline
| |-ParmVarDecl 0x55bed22ea6f0 <col:31, col:45> col:45 used x 'unsigned long'
| |-CXXCtorInitializer Field 0x55bed22edad0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55bed22edd70 <line:34:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55bed22edd58 <col:10> 'unsigned long' <LValueToRValue>
| |     `-DeclRefExpr 0x55bed22edd18 <col:10> 'unsigned long' lvalue ParmVar 0x55bed22ea6f0 'x' 'unsigned long'
| `-CompoundStmt 0x55bed22eddb8 <col:13, line:35:5>
|-CXXConstructorDecl 0x55bed22ea8d8 <line:37:5, line:39:5> line:37:21 IPAddress 'void (long)' inline
| |-ParmVarDecl 0x55bed22ea848 <col:31, col:36> col:36 used x 'long'
| |-CXXCtorInitializer Field 0x55bed22edad0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55bed22ede20 <line:38:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55bed22ede08 <col:10> 'long' <LValueToRValue>
| |     `-DeclRefExpr 0x55bed22eddc8 <col:10> 'long' lvalue ParmVar 0x55bed22ea848 'x' 'long'
| `-CompoundStmt 0x55bed22ede68 <col:13, line:39:5>
|-CXXConstructorDecl 0x55bed22eaa98 <line:42:5, line:44:5> line:42:12 IPAddress 'void (struct in_addr)' inline
| |-ParmVarDecl 0x55bed22ea9a8 <col:22, col:37> col:37 used x 'struct in_addr':'in_addr'
| |-CXXCtorInitializer Field 0x55bed22edad0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55bed22edee8 <line:43:10, col:12> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55bed22ede98 <col:10, col:12> 'in_addr_t':'unsigned int' lvalue .s_addr 0x55bed221def0
| |     `-DeclRefExpr 0x55bed22ede78 <col:10> 'struct in_addr':'in_addr' lvalue ParmVar 0x55bed22ea9a8 'x' 'struct in_addr':'in_addr'
| `-CompoundStmt 0x55bed22edf30 <col:20, line:44:5>
|-CXXConstructorDecl 0x55bed22eac28 <line:50:5, line:56:5> line:50:14 IPAddress 'void (const unsigned char *)'
| |-ParmVarDecl 0x55bed22eab60 <col:24, col:45> col:45 used data 'const unsigned char *'
| `-CompoundStmt 0x55bed22ee098 <col:51, line:56:5>
|   `-BinaryOperator 0x55bed22ee078 <line:52:2, col:52> 'uint32_t':'unsigned int' lvalue '='
|     |-MemberExpr 0x55bed22edf50 <col:2> 'uint32_t':'unsigned int' lvalue ->_addr 0x55bed22edad0
|     | `-CXXThisExpr 0x55bed22edf40 <col:2> 'IPAddress *' implicit this
|     `-ImplicitCastExpr 0x55bed22ee060 <col:10, col:52> 'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55bed22ee048 <col:10, col:52> 'const unsigned int' lvalue prefix '*' cannot overflow
|         `-ParenExpr 0x55bed22ee028 <col:11, col:52> 'const unsigned int *'
|           `-CXXReinterpretCastExpr 0x55bed22edff8 <col:12, col:51> 'const unsigned int *' reinterpret_cast<const unsigned int *> <BitCast>
|             `-ImplicitCastExpr 0x55bed22edfe0 <col:47> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|               `-DeclRefExpr 0x55bed22edf80 <col:47> 'const unsigned char *' lvalue ParmVar 0x55bed22eab60 'data' 'const unsigned char *'
|-CXXConstructorDecl 0x55bed22ead78 <line:63:5, col:39> col:14 IPAddress 'void (const String &)'
| `-ParmVarDecl 0x55bed22eace8 <col:24, col:38> col:38 x 'const String &'
|-CXXConstructorDecl 0x55bed22eaf28 <line:66:5, line:68:5> line:66:12 IPAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x55bed22eae68 <col:22, col:48> col:48 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x55bed22ee108 <col:56, line:68:5>
|   `-CStyleCastExpr 0x55bed22ee0e0 <line:67:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x55bed22ee0b0 <col:9> 'const uninitialized_type' lvalue ParmVar 0x55bed22eae68 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x55bed22eb0b8 <line:78:5, col:48> col:22 make_prefix 'IPAddress (int)' static
| `-ParmVarDecl 0x55bed22eaff0 <col:34, col:38> col:38 prefix_len 'int'
|-CXXMethodDecl 0x55bed22eb1a8 <line:81:5, line:83:5> line:81:29 make_broadcast 'IPAddress ()' static inline
| `-CompoundStmt 0x55bed22ef0c8 <col:46, line:83:5>
|   `-ReturnStmt 0x55bed22ef0b8 <line:82:2, col:29>
|     `-ExprWithCleanups 0x55bed22ef0a0 <col:9, col:29> 'IPAddress'
|       `-CXXConstructExpr 0x55bed22ef070 <col:9, col:29> 'IPAddress' 'void (IPAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55bed22eef28 <col:9, col:29> 'IPAddress' xvalue
|           `-CXXFunctionalCastExpr 0x55bed22eee10 <col:9, col:29> 'IPAddress' functional cast to class IPAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x55bed22eecf8 <col:9, col:29> 'IPAddress' 'void (unsigned int)'
|               `-IntegerLiteral 0x55bed22ee130 <col:19> 'unsigned int' 4294967295
|-CXXMethodDecl 0x55bed22eb298 <line:86:5, line:88:5> line:86:17 empty 'bool () const' inline
| `-CompoundStmt 0x55bed22ef178 <col:31, line:88:5>
|   `-ReturnStmt 0x55bed22ef168 <line:87:2, col:10>
|     `-UnaryOperator 0x55bed22ef150 <col:9, col:10> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x55bed22ef138 <col:10> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x55bed22ef120 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x55bed22ef0f0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55bed22edad0
|             `-CXXThisExpr 0x55bed22ef0e0 <col:10> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x55bed22eb358 <line:91:5, line:93:5> line:91:21 used addr 'uint32_t () const' inline
| `-CompoundStmt 0x55bed22ef1f8 <col:34, line:93:5>
|   `-ReturnStmt 0x55bed22ef1e8 <line:92:2, col:9>
|     `-ImplicitCastExpr 0x55bed22ef1d0 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55bed22ef1a0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55bed22edad0
|         `-CXXThisExpr 0x55bed22ef190 <col:9> 'const IPAddress *' implicit this
|-CXXConversionDecl 0x55bed22eb428 <line:99:5, line:101:5> line:99:12 used operator unsigned int 'uint32_t () const' inline
| `-CompoundStmt 0x55bed22ef278 <col:38, line:101:5>
|   `-ReturnStmt 0x55bed22ef268 <line:100:2, col:9>
|     `-ImplicitCastExpr 0x55bed22ef250 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55bed22ef220 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55bed22edad0
|         `-CXXThisExpr 0x55bed22ef210 <col:9> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x55bed22eb4f8 <line:106:5, line:108:5> line:106:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x55bed22ef548 <col:38, line:108:5>
|   `-ReturnStmt 0x55bed22ef538 <line:107:2, col:58>
|     `-BinaryOperator 0x55bed22ef518 <col:9, col:58> 'bool' '=='
|       |-ParenExpr 0x55bed22ef430 <col:9, col:36> 'unsigned int'
|       | `-BinaryOperator 0x55bed22ef410 <col:10, col:35> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x55bed22ef3f8 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x55bed22ef2a0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55bed22edad0
|       |   |   `-CXXThisExpr 0x55bed22ef290 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x55bed22ef3d0 <col:18, col:35> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x55bed22ef3b8 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55bed22ef338 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x55bed222c428 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x55bed22ef318 <col:24> 'unsigned int' 4026531840
|       `-CallExpr 0x55bed22ef4f0 <col:41, col:58> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x55bed22ef4d8 <col:41> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55bed22ef4b8 <col:41> 'uint32_t (uint32_t) throw()' lvalue Function 0x55bed222c428 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x55bed22ef498 <col:47> 'unsigned int' 3758096384
|-CXXMethodDecl 0x55bed22eb5b8 <line:110:5, line:112:5> line:110:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x55bed22ef7b8 <col:39, line:112:5>
|   `-ReturnStmt 0x55bed22ef7a8 <line:111:2, col:56>
|     `-BinaryOperator 0x55bed22ef788 <col:9, col:56> 'bool' '=='
|       |-ParenExpr 0x55bed22ef6a0 <col:9, col:35> 'unsigned int'
|       | `-BinaryOperator 0x55bed22ef680 <col:10, col:34> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x55bed22ef668 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x55bed22ef570 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55bed22edad0
|       |   |   `-CXXThisExpr 0x55bed22ef560 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x55bed22ef640 <col:18, col:34> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x55bed22ef628 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55bed22ef608 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x55bed222c428 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x55bed22ef5e8 <col:24> 'unsigned int' 4294901760
|       `-CallExpr 0x55bed22ef760 <col:40, col:56> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x55bed22ef748 <col:40> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55bed22ef728 <col:40> 'uint32_t (uint32_t) throw()' lvalue Function 0x55bed222c428 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x55bed22ef708 <col:46> 'unsigned int' 2851995648
|-CXXMethodDecl 0x55bed22eb6e8 <line:114:5, col:37> col:27 used in_addr 'struct in_addr () const' inline
|-CXXConversionDecl 0x55bed22eb7f0 <line:115:5, col:38> col:12 operator in_addr 'struct in_addr () const' inline
|-CXXMethodDecl 0x55bed22eb900 <line:117:5, col:32> col:27 data 'unsigned char *()' inline
|-CXXMethodDecl 0x55bed22ec9c8 <line:118:5, col:40> col:33 data 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55bed22eca88 <line:120:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55bed22ecb50 <line:122:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x55bed22ecd48 <line:123:5, col:64> col:17 matches_prefix 'bool (IPAddress, IPAddress) const' inline
| |-ParmVarDecl 0x55bed22ecc00 <col:32, col:42> col:42 addr 'IPAddress'
| `-ParmVarDecl 0x55bed22ecc78 <col:48, col:58> col:58 mask 'IPAddress'
|-CXXMethodDecl 0x55bed22ecec8 <line:124:5, col:50> col:17 mask_as_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x55bed22ece08 <col:34, col:44> col:44 mask 'IPAddress'
|-CXXMethodDecl 0x55bed22ed010 <line:125:5, col:52> col:17 mask_more_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x55bed22ecf80 <col:36, col:46> col:46 mask 'IPAddress'
|-CXXMethodDecl 0x55bed22ed1b8 <line:137:5, col:43> col:23 operator&= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55bed22ed0c8 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55bed22ed300 <line:138:5, col:43> col:23 operator|= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55bed22ed270 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55bed22ed448 <line:139:5, col:43> col:23 operator^= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55bed22ed3b8 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55bed22ed510 <line:141:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x55bed22ed5d0 <line:142:5, col:27> col:12 unparse_mask 'String () const'
|-CXXMethodDecl 0x55bed22ed748 <line:143:5, col:41> col:12 unparse_with_mask 'String (IPAddress) const'
| `-ParmVarDecl 0x55bed22ed680 <col:30> col:39 'IPAddress'
|-CXXMethodDecl 0x55bed22ed810 <line:145:5, col:23> col:19 s 'String () const' inline
|-CXXConversionDecl 0x55bed22ed8f8 <line:146:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x55bed22ed9a0 <col:51> "" ""
|-TypedefDecl 0x55bed22eda40 <line:148:5, col:23> col:23 parameter_type 'IPAddress'
| `-RecordType 0x55bed224f1d0 'IPAddress'
|   `-CXXRecord 0x55bed22ea100 'IPAddress'
|-AccessSpecDecl 0x55bed22eda98 <line:150:3, col:10> col:3 private
|-FieldDecl 0x55bed22edad0 <line:152:5, col:14> col:14 referenced _addr 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55bed22ee178 <line:15:7> col:7 implicit used constexpr IPAddress 'void (const IPAddress &) noexcept' inline default trivial
| |-ParmVarDecl 0x55bed22ee288 <col:7> col:7 used 'const IPAddress &'
| |-CXXCtorInitializer Field 0x55bed22edad0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55bed259a8e8 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55bed259a8a0 <col:7> 'const uint32_t':'const unsigned int' lvalue ._addr 0x55bed22edad0
| |     `-DeclRefExpr 0x55bed259a880 <col:7> 'const IPAddress' lvalue ParmVar 0x55bed22ee288 '' 'const IPAddress &'
| `-CompoundStmt 0x55bed259a930 <col:7>
|-CXXConstructorDecl 0x55bed22ee328 <col:7> col:7 implicit used constexpr IPAddress 'void (IPAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55bed22ee438 <col:7> col:7 used 'IPAddress &&'
| |-CXXCtorInitializer Field 0x55bed22edad0 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55bed22ef018 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55bed22eefd0 <col:7> 'uint32_t':'unsigned int' xvalue ._addr 0x55bed22edad0
| |     `-CXXStaticCastExpr 0x55bed22eefa0 <col:7> 'IPAddress' xvalue static_cast<class IPAddress &&> <NoOp>
| |       `-DeclRefExpr 0x55bed22eef70 <col:7> 'IPAddress' lvalue ParmVar 0x55bed22ee438 '' 'IPAddress &&'
| `-CompoundStmt 0x55bed22ef060 <col:7>
|-CXXDestructorDecl 0x55bed22eed28 <col:7> col:7 implicit referenced ~IPAddress 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55bed259b1d8 <col:7> col:7 implicit used operator= 'IPAddress &(const IPAddress &) noexcept' inline default trivial
| |-ParmVarDecl 0x55bed259b2e8 <col:7> col:7 used 'const IPAddress &'
| `-CompoundStmt 0x55bed259b640 <col:7>
|   |-BinaryOperator 0x55bed259b5e8 <col:7> 'uint32_t':'unsigned int' lvalue '='
|   | |-MemberExpr 0x55bed259b5a0 <col:7> 'uint32_t':'unsigned int' lvalue ->_addr 0x55bed22edad0
|   | | `-CXXThisExpr 0x55bed259b590 <col:7> 'IPAddress *' this
|   | `-ImplicitCastExpr 0x55bed259b5d0 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
|   |   `-MemberExpr 0x55bed259b560 <col:7> 'const uint32_t':'const unsigned int' lvalue ._addr 0x55bed22edad0
|   |     `-DeclRefExpr 0x55bed259b540 <col:7> 'const IPAddress' lvalue ParmVar 0x55bed259b2e8 '' 'const IPAddress &'
|   `-ReturnStmt 0x55bed259b630 <col:7>
|     `-UnaryOperator 0x55bed259b618 <col:7> 'IPAddress' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55bed259b608 <col:7> 'IPAddress *' this
`-CXXMethodDecl 0x55bed259b358 <col:7> col:7 implicit operator= 'IPAddress &(IPAddress &&)' inline default trivial noexcept-unevaluated 0x55bed259b358
  `-ParmVarDecl 0x55bed259b468 <col:7> col:7 'IPAddress &&'

Layout: <CGRecordLayout
  LLVMType:%class.IPAddress = type { i32 }
  NonVirtualBaseLLVMType:%class.IPAddress = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed2597ee0 <../dummy_inc/click/ipflowid.hh:9:1, line:143:1> line:9:7 referenced class IPFlowID definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bed2597ff8 <col:1, col:7> col:7 implicit referenced class IPFlowID
|-AccessSpecDecl 0x55bed2598088 <col:18, col:24> col:18 public
|-TypedefDecl 0x55bed25980c0 <line:11:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x55bed20dca10 'uninitialized_type'
|   `-CXXRecord 0x55bed20dc978 'uninitialized_type'
|-CXXConstructorDecl 0x55bed2598180 <line:17:5, line:19:5> line:17:5 used IPFlowID 'void ()'
| |-CXXCtorInitializer Field 0x55bed259a038 '_saddr' 'IPAddress'
| | `-CXXConstructExpr 0x55bed259a608 <line:18:4, col:11> 'IPAddress' 'void ()'
| |-CXXCtorInitializer Field 0x55bed259a098 '_daddr' 'IPAddress'
| | `-CXXConstructExpr 0x55bed259a670 <col:14, col:21> 'IPAddress' 'void ()'
| |-CXXCtorInitializer Field 0x55bed259a0f8 '_sport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x55bed259a700 <col:31> 'uint16_t':'unsigned short' <IntegralCast>
| |   `-IntegerLiteral 0x55bed259a6c0 <col:31> 'int' 0
| |-CXXCtorInitializer Field 0x55bed259a158 '_dport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x55bed259a780 <col:42> 'uint16_t':'unsigned short' <IntegralCast>
| |   `-IntegerLiteral 0x55bed259a740 <col:42> 'int' 0
| `-CompoundStmt 0x55bed259a7e0 <col:45, line:19:5>
|-CXXConstructorDecl 0x55bed25984e8 <line:26:5, line:28:5> line:26:5 used IPFlowID 'void (IPAddress, uint16_t, IPAddress, uint16_t)'
| |-ParmVarDecl 0x55bed2598238 <col:14, col:24> col:24 used saddr 'IPAddress'
| |-ParmVarDecl 0x55bed25982b0 <col:31, col:40> col:40 used sport 'uint16_t':'unsigned short'
| |-ParmVarDecl 0x55bed2598328 <col:47, col:57> col:57 used daddr 'IPAddress'
| |-ParmVarDecl 0x55bed25983a0 <col:64, col:73> col:73 used dport 'uint16_t':'unsigned short'
| |-CXXCtorInitializer Field 0x55bed259a038 '_saddr' 'IPAddress'
| | `-CXXConstructExpr 0x55bed259a940 <line:27:4, col:16> 'IPAddress' 'void (const IPAddress &) noexcept'
| |   `-ImplicitCastExpr 0x55bed259a830 <col:11> 'const IPAddress' lvalue <NoOp>
| |     `-DeclRefExpr 0x55bed259a7f0 <col:11> 'IPAddress' lvalue ParmVar 0x55bed2598238 'saddr' 'IPAddress'
| |-CXXCtorInitializer Field 0x55bed259a098 '_daddr' 'IPAddress'
| | `-CXXConstructExpr 0x55bed259a9f0 <col:19, col:31> 'IPAddress' 'void (const IPAddress &) noexcept'
| |   `-ImplicitCastExpr 0x55bed259a9d8 <col:26> 'const IPAddress' lvalue <NoOp>
| |     `-DeclRefExpr 0x55bed259a998 <col:26> 'IPAddress' lvalue ParmVar 0x55bed2598328 'daddr' 'IPAddress'
| |-CXXCtorInitializer Field 0x55bed259a0f8 '_sport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x55bed259aa88 <col:41> 'uint16_t':'unsigned short' <LValueToRValue>
| |   `-DeclRefExpr 0x55bed259aa48 <col:41> 'uint16_t':'unsigned short' lvalue ParmVar 0x55bed25982b0 'sport' 'uint16_t':'unsigned short'
| |-CXXCtorInitializer Field 0x55bed259a158 '_dport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x55bed259ab08 <col:56> 'uint16_t':'unsigned short' <LValueToRValue>
| |   `-DeclRefExpr 0x55bed259aac8 <col:56> 'uint16_t':'unsigned short' lvalue ParmVar 0x55bed25983a0 'dport' 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55bed259ab68 <col:63, line:28:5>
|-CXXConstructorDecl 0x55bed2598708 <line:37:5, col:60> col:14 IPFlowID 'void (const Packet *, bool)'
| |-ParmVarDecl 0x55bed25985c0 <col:23, col:37> col:37 p 'const Packet *'
| `-ParmVarDecl 0x55bed2598638 <col:40, col:55> col:45 reverse 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55bed259a5d0 <col:55> 'bool' false
|-CXXConstructorDecl 0x55bed2598918 <line:47:5, col:64> col:14 IPFlowID 'void (const click_ip *, bool)'
| |-ParmVarDecl 0x55bed25987d0 <col:23, col:39> col:39 iph 'const click_ip *'
| `-ParmVarDecl 0x55bed2598848 <col:44, col:59> col:49 reverse 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55bed259a5e0 <col:59> 'bool' false
|-CXXConstructorDecl 0x55bed2598a70 <line:50:5, line:52:5> line:50:12 IPFlowID 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x55bed25989e0 <col:21, col:47> col:47 used unused 'const uninitialized_type &'
| |-CXXCtorInitializer Field 0x55bed259a038 '_saddr' 'IPAddress'
| | `-CXXConstructExpr 0x55bed259ab78 <col:12> 'IPAddress' 'void ()'
| |-CXXCtorInitializer Field 0x55bed259a098 '_daddr' 'IPAddress'
| | `-CXXConstructExpr 0x55bed259abc8 <col:12> 'IPAddress' 'void ()'
| `-CompoundStmt 0x55bed259ac80 <col:55, line:52:5>
|   `-CStyleCastExpr 0x55bed259ac58 <line:51:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x55bed259ac28 <col:9> 'const uninitialized_type' lvalue ParmVar 0x55bed25989e0 'unused' 'const uninitialized_type &'
|-TypedefDecl 0x55bed2598c28 <line:55:5, col:60> col:35 referenced unspecified_bool_type 'IPAddress (IPFlowID::*)() const'
| `-MemberPointerType 0x55bed2598ba0 'IPAddress (IPFlowID::*)() const'
|   |-RecordType 0x55bed2597f70 'IPFlowID'
|   | `-CXXRecord 0x55bed2597ee0 'IPFlowID'
|   `-ParenType 0x55bed2598b40 'IPAddress () const' sugar
|     `-FunctionProtoType 0x55bed24b8930 'IPAddress () const' const cdecl
|       `-RecordType 0x55bed224f1d0 'IPAddress'
|         `-CXXRecord 0x55bed22ea100 'IPAddress'
|-CXXConversionDecl 0x55bed2598d68 <line:57:5, line:59:5> line:57:5 operator IPAddress (IPFlowID::*)() const 'IPFlowID::unspecified_bool_type () const'
| `-CompoundStmt 0x55bed259af30 <col:44, line:59:5>
|   `-ReturnStmt 0x55bed259af20 <line:58:2, col:47>
|     `-ConditionalOperator 0x55bed259aef0 <col:9, col:47> 'IPAddress (IPFlowID::*)() const'
|       |-BinaryOperator 0x55bed259ae18 <col:9, col:19> 'bool' '||'
|       | |-ImplicitCastExpr 0x55bed259ade8 <col:9> 'bool' <IntegralToBoolean>
|       | | `-ImplicitCastExpr 0x55bed259ad68 <col:9> 'uint32_t':'unsigned int' <UserDefinedConversion>
|       | |   `-CXXMemberCallExpr 0x55bed259ad48 <col:9> 'uint32_t':'unsigned int'
|       | |     `-MemberExpr 0x55bed259ad18 <col:9> '<bound member function type>' .operator unsigned int 0x55bed22eb428
|       | |       `-MemberExpr 0x55bed259aca8 <col:9> 'const IPAddress' lvalue ->_saddr 0x55bed259a038
|       | |         `-CXXThisExpr 0x55bed259ac98 <col:9> 'const IPFlowID *' implicit this
|       | `-ImplicitCastExpr 0x55bed259ae00 <col:19> 'bool' <IntegralToBoolean>
|       |   `-ImplicitCastExpr 0x55bed259add0 <col:19> 'uint32_t':'unsigned int' <UserDefinedConversion>
|       |     `-CXXMemberCallExpr 0x55bed259adb0 <col:19> 'uint32_t':'unsigned int'
|       |       `-MemberExpr 0x55bed259ad80 <col:19> '<bound member function type>' .operator unsigned int 0x55bed22eb428
|       |         `-MemberExpr 0x55bed259ace8 <col:19> 'const IPAddress' lvalue ->_daddr 0x55bed259a098
|       |           `-CXXThisExpr 0x55bed259acd8 <col:19> 'const IPFlowID *' implicit this
|       |-UnaryOperator 0x55bed259aea0 <col:28, col:39> 'IPAddress (IPFlowID::*)() const' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x55bed259ae70 <col:29, col:39> 'IPAddress () const' CXXMethod 0x55bed2598e38 'saddr' 'IPAddress () const'
|       `-ImplicitCastExpr 0x55bed259aed8 <col:47> 'IPAddress (IPFlowID::*)() const' <NullToMemberPointer>
|         `-IntegerLiteral 0x55bed259aeb8 <col:47> 'int' 0
|-CXXMethodDecl 0x55bed2598e38 <line:63:5, line:65:5> line:63:15 used saddr 'IPAddress () const'
| `-CompoundStmt 0x55bed259afc8 <col:29, line:65:5>
|   `-ReturnStmt 0x55bed259afb8 <line:64:2, col:9>
|     `-CXXConstructExpr 0x55bed259af88 <col:9> 'IPAddress' 'void (const IPAddress &) noexcept'
|       `-MemberExpr 0x55bed259af58 <col:9> 'const IPAddress' lvalue ->_saddr 0x55bed259a038
|         `-CXXThisExpr 0x55bed259af48 <col:9> 'const IPFlowID *' implicit this
|-CXXMethodDecl 0x55bed2598f58 <line:67:5, line:69:5> line:67:14 used sport 'uint16_t () const'
| `-CompoundStmt 0x55bed259b048 <col:28, line:69:5>
|   `-ReturnStmt 0x55bed259b038 <line:68:2, col:9>
|     `-ImplicitCastExpr 0x55bed259b020 <col:9> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-MemberExpr 0x55bed259aff0 <col:9> 'const uint16_t':'const unsigned short' lvalue ->_sport 0x55bed259a0f8
|         `-CXXThisExpr 0x55bed259afe0 <col:9> 'const IPFlowID *' implicit this
|-CXXMethodDecl 0x55bed2599018 <line:71:5, line:73:5> line:71:15 used daddr 'IPAddress () const'
| `-CompoundStmt 0x55bed259b0e0 <col:29, line:73:5>
|   `-ReturnStmt 0x55bed259b0d0 <line:72:2, col:9>
|     `-CXXConstructExpr 0x55bed259b0a0 <col:9> 'IPAddress' 'void (const IPAddress &) noexcept'
|       `-MemberExpr 0x55bed259b070 <col:9> 'const IPAddress' lvalue ->_daddr 0x55bed259a098
|         `-CXXThisExpr 0x55bed259b060 <col:9> 'const IPFlowID *' implicit this
|-CXXMethodDecl 0x55bed25990d8 <line:75:5, line:77:5> line:75:14 used dport 'uint16_t () const'
| `-CompoundStmt 0x55bed259b160 <col:28, line:77:5>
|   `-ReturnStmt 0x55bed259b150 <line:76:2, col:9>
|     `-ImplicitCastExpr 0x55bed259b138 <col:9> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-MemberExpr 0x55bed259b108 <col:9> 'const uint16_t':'const unsigned short' lvalue ->_dport 0x55bed259a158
|         `-CXXThisExpr 0x55bed259b0f8 <col:9> 'const IPFlowID *' implicit this
|-CXXMethodDecl 0x55bed2599218 <line:80:5, line:82:5> line:80:10 set_saddr 'void (IPAddress)'
| |-ParmVarDecl 0x55bed2599188 <col:20, col:30> col:30 used a 'IPAddress'
| `-CompoundStmt 0x55bed259b708 <col:33, line:82:5>
|   `-CXXOperatorCallExpr 0x55bed259b6d0 <line:81:2, col:11> 'IPAddress' lvalue
|     |-ImplicitCastExpr 0x55bed259b6b8 <col:9> 'IPAddress &(*)(const IPAddress &) noexcept' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55bed259b4f0 <col:9> 'IPAddress &(const IPAddress &) noexcept' lvalue CXXMethod 0x55bed259b1d8 'operator=' 'IPAddress &(const IPAddress &) noexcept'
|     |-MemberExpr 0x55bed259b188 <col:2> 'IPAddress' lvalue ->_saddr 0x55bed259a038
|     | `-CXXThisExpr 0x55bed259b178 <col:2> 'IPFlowID *' implicit this
|     `-ImplicitCastExpr 0x55bed259b4d8 <col:11> 'const IPAddress' lvalue <NoOp>
|       `-DeclRefExpr 0x55bed259b1b8 <col:11> 'IPAddress' lvalue ParmVar 0x55bed2599188 'a' 'IPAddress'
|-CXXMethodDecl 0x55bed25993c8 <line:85:5, line:87:5> line:85:10 set_sport 'void (uint16_t)'
| |-ParmVarDecl 0x55bed25992d0 <col:20, col:29> col:29 used p 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55bed259b7b8 <col:32, line:87:5>
|   `-BinaryOperator 0x55bed259b798 <line:86:2, col:11> 'uint16_t':'unsigned short' lvalue '='
|     |-MemberExpr 0x55bed259b730 <col:2> 'uint16_t':'unsigned short' lvalue ->_sport 0x55bed259a0f8
|     | `-CXXThisExpr 0x55bed259b720 <col:2> 'IPFlowID *' implicit this
|     `-ImplicitCastExpr 0x55bed259b780 <col:11> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55bed259b760 <col:11> 'uint16_t':'unsigned short' lvalue ParmVar 0x55bed25992d0 'p' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55bed2599510 <line:89:5, line:91:5> line:89:10 set_daddr 'void (IPAddress)'
| |-ParmVarDecl 0x55bed2599480 <col:20, col:30> col:30 used a 'IPAddress'
| `-CompoundStmt 0x55bed259b8b8 <col:33, line:91:5>
|   `-CXXOperatorCallExpr 0x55bed259b880 <line:90:2, col:11> 'IPAddress' lvalue
|     |-ImplicitCastExpr 0x55bed259b868 <col:9> 'IPAddress &(*)(const IPAddress &) noexcept' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55bed259b848 <col:9> 'IPAddress &(const IPAddress &) noexcept' lvalue CXXMethod 0x55bed259b1d8 'operator=' 'IPAddress &(const IPAddress &) noexcept'
|     |-MemberExpr 0x55bed259b7e0 <col:2> 'IPAddress' lvalue ->_daddr 0x55bed259a098
|     | `-CXXThisExpr 0x55bed259b7d0 <col:2> 'IPFlowID *' implicit this
|     `-ImplicitCastExpr 0x55bed259b830 <col:11> 'const IPAddress' lvalue <NoOp>
|       `-DeclRefExpr 0x55bed259b810 <col:11> 'IPAddress' lvalue ParmVar 0x55bed2599480 'a' 'IPAddress'
|-CXXMethodDecl 0x55bed2599658 <line:94:5, line:96:5> line:94:10 set_dport 'void (uint16_t)'
| |-ParmVarDecl 0x55bed25995c8 <col:20, col:29> col:29 used p 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55bed259b968 <col:32, line:96:5>
|   `-BinaryOperator 0x55bed259b948 <line:95:2, col:11> 'uint16_t':'unsigned short' lvalue '='
|     |-MemberExpr 0x55bed259b8e0 <col:2> 'uint16_t':'unsigned short' lvalue ->_dport 0x55bed259a158
|     | `-CXXThisExpr 0x55bed259b8d0 <col:2> 'IPFlowID *' implicit this
|     `-ImplicitCastExpr 0x55bed259b930 <col:11> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55bed259b910 <col:11> 'uint16_t':'unsigned short' lvalue ParmVar 0x55bed25995c8 'p' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55bed2599920 <line:103:5, line:108:5> line:103:10 assign 'void (IPAddress, uint16_t, IPAddress, uint16_t)'
| |-ParmVarDecl 0x55bed2599710 <col:17, col:27> col:27 used saddr 'IPAddress'
| |-ParmVarDecl 0x55bed2599788 <col:34, col:43> col:43 used sport 'uint16_t':'unsigned short'
| |-ParmVarDecl 0x55bed2599800 <col:50, col:60> col:60 used daddr 'IPAddress'
| |-ParmVarDecl 0x55bed2599878 <col:67, col:76> col:76 used dport 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55bed259bc80 <col:83, line:108:5>
|   |-CXXOperatorCallExpr 0x55bed259ba30 <line:104:2, col:11> 'IPAddress' lvalue
|   | |-ImplicitCastExpr 0x55bed259ba18 <col:9> 'IPAddress &(*)(const IPAddress &) noexcept' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55bed259b9f8 <col:9> 'IPAddress &(const IPAddress &) noexcept' lvalue CXXMethod 0x55bed259b1d8 'operator=' 'IPAddress &(const IPAddress &) noexcept'
|   | |-MemberExpr 0x55bed259b990 <col:2> 'IPAddress' lvalue ->_saddr 0x55bed259a038
|   | | `-CXXThisExpr 0x55bed259b980 <col:2> 'IPFlowID *' implicit this
|   | `-ImplicitCastExpr 0x55bed259b9e0 <col:11> 'const IPAddress' lvalue <NoOp>
|   |   `-DeclRefExpr 0x55bed259b9c0 <col:11> 'IPAddress' lvalue ParmVar 0x55bed2599710 'saddr' 'IPAddress'
|   |-CXXOperatorCallExpr 0x55bed259bb18 <line:105:2, col:11> 'IPAddress' lvalue
|   | |-ImplicitCastExpr 0x55bed259bb00 <col:9> 'IPAddress &(*)(const IPAddress &) noexcept' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55bed259bae0 <col:9> 'IPAddress &(const IPAddress &) noexcept' lvalue CXXMethod 0x55bed259b1d8 'operator=' 'IPAddress &(const IPAddress &) noexcept'
|   | |-MemberExpr 0x55bed259ba78 <col:2> 'IPAddress' lvalue ->_daddr 0x55bed259a098
|   | | `-CXXThisExpr 0x55bed259ba68 <col:2> 'IPFlowID *' implicit this
|   | `-ImplicitCastExpr 0x55bed259bac8 <col:11> 'const IPAddress' lvalue <NoOp>
|   |   `-DeclRefExpr 0x55bed259baa8 <col:11> 'IPAddress' lvalue ParmVar 0x55bed2599800 'daddr' 'IPAddress'
|   |-BinaryOperator 0x55bed259bbc8 <line:106:2, col:11> 'uint16_t':'unsigned short' lvalue '='
|   | |-MemberExpr 0x55bed259bb60 <col:2> 'uint16_t':'unsigned short' lvalue ->_sport 0x55bed259a0f8
|   | | `-CXXThisExpr 0x55bed259bb50 <col:2> 'IPFlowID *' implicit this
|   | `-ImplicitCastExpr 0x55bed259bbb0 <col:11> 'uint16_t':'unsigned short' <LValueToRValue>
|   |   `-DeclRefExpr 0x55bed259bb90 <col:11> 'uint16_t':'unsigned short' lvalue ParmVar 0x55bed2599788 'sport' 'uint16_t':'unsigned short'
|   `-BinaryOperator 0x55bed259bc60 <line:107:2, col:11> 'uint16_t':'unsigned short' lvalue '='
|     |-MemberExpr 0x55bed259bbf8 <col:2> 'uint16_t':'unsigned short' lvalue ->_dport 0x55bed259a158
|     | `-CXXThisExpr 0x55bed259bbe8 <col:2> 'IPFlowID *' implicit this
|     `-ImplicitCastExpr 0x55bed259bc48 <col:11> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55bed259bc28 <col:11> 'uint16_t':'unsigned short' lvalue ParmVar 0x55bed2599878 'dport' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55bed2599a28 <line:113:5, line:115:5> line:113:14 used reverse 'IPFlowID () const'
| `-CompoundStmt 0x55bed259c7b8 <col:30, line:115:5>
|   `-ReturnStmt 0x55bed259c7a8 <line:114:2, col:48>
|     `-ExprWithCleanups 0x55bed259c790 <col:9, col:48> 'IPFlowID'
|       `-CXXConstructExpr 0x55bed259c760 <col:9, col:48> 'IPFlowID' 'void (IPFlowID &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55bed259c318 <col:9, col:48> 'IPFlowID' xvalue
|           `-CXXTemporaryObjectExpr 0x55bed259c188 <col:9, col:48> 'IPFlowID' 'void (IPAddress, uint16_t, IPAddress, uint16_t)'
|             |-CXXConstructExpr 0x55bed259c0f8 <col:18> 'IPAddress' 'void (const IPAddress &) noexcept'
|             | `-MemberExpr 0x55bed259bcd0 <col:18> 'const IPAddress' lvalue ->_daddr 0x55bed259a098
|             |   `-CXXThisExpr 0x55bed259bcc0 <col:18> 'const IPFlowID *' implicit this
|             |-ImplicitCastExpr 0x55bed259c128 <col:26> 'uint16_t':'unsigned short' <LValueToRValue>
|             | `-MemberExpr 0x55bed259bd10 <col:26> 'const uint16_t':'const unsigned short' lvalue ->_dport 0x55bed259a158
|             |   `-CXXThisExpr 0x55bed259bd00 <col:26> 'const IPFlowID *' implicit this
|             |-CXXConstructExpr 0x55bed259c140 <col:34> 'IPAddress' 'void (const IPAddress &) noexcept'
|             | `-MemberExpr 0x55bed259bd50 <col:34> 'const IPAddress' lvalue ->_saddr 0x55bed259a038
|             |   `-CXXThisExpr 0x55bed259bd40 <col:34> 'const IPFlowID *' implicit this
|             `-ImplicitCastExpr 0x55bed259c170 <col:42> 'uint16_t':'unsigned short' <LValueToRValue>
|               `-MemberExpr 0x55bed259bd90 <col:42> 'const uint16_t':'const unsigned short' lvalue ->_sport 0x55bed259a0f8
|                 `-CXXThisExpr 0x55bed259bd80 <col:42> 'const IPFlowID *' implicit this
|-CXXMethodDecl 0x55bed2599ae8 <line:116:5, col:59> col:21 rev 'IPFlowID () const' inline
| `-DeprecatedAttr 0x55bed2599b88 <col:48> "" ""
|-CXXMethodDecl 0x55bed2599c18 <line:122:5, col:34> col:23 hashcode 'hashcode_t () const' inline
|-CXXMethodDecl 0x55bed2599cd8 <line:127:5, col:22> col:12 used unparse 'String () const'
|-CXXConversionDecl 0x55bed2599da8 <line:129:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x55bed2599e50 <col:51> "" ""
|-CXXMethodDecl 0x55bed2599ef0 <line:130:5, col:55> col:19 s 'String () const' inline
| `-DeprecatedAttr 0x55bed2599f90 <col:44> "" ""
|-AccessSpecDecl 0x55bed259a000 <line:132:3, col:12> col:3 protected
|-FieldDecl 0x55bed259a038 <line:135:5, col:15> col:15 referenced _saddr 'IPAddress'
|-FieldDecl 0x55bed259a098 <line:136:5, col:15> col:15 referenced _daddr 'IPAddress'
|-FieldDecl 0x55bed259a0f8 <line:137:5, col:14> col:14 referenced _sport 'uint16_t':'unsigned short'
|-FieldDecl 0x55bed259a158 <line:138:5, col:14> col:14 referenced _dport 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55bed259a290 <line:140:5, col:26> col:9 unparse 'int (char *) const'
| `-ParmVarDecl 0x55bed259a1c0 <col:17, col:23> col:23 s 'char *'
|-FriendDecl 0x55bed259a578 <line:141:5, col:76> col:25
| `-FunctionDecl 0x55bed259a4b8 parent 0x55bed1f83488 <col:5, col:76> col:25 operator<< 'StringAccum &(StringAccum &, const IPFlowID &)'
|   |-ParmVarDecl 0x55bed259a348 <col:36, col:49> col:49 sa 'StringAccum &'
|   `-ParmVarDecl 0x55bed259a3e8 <col:53, col:69> col:69 flow_id 'const IPFlowID &'
|-CXXConstructorDecl 0x55bed259bdc0 <line:9:7> col:7 implicit constexpr IPFlowID 'void (const IPFlowID &)' inline default trivial noexcept-unevaluated 0x55bed259bdc0
| `-ParmVarDecl 0x55bed259bed8 <col:7> col:7 'const IPFlowID &'
|-CXXConstructorDecl 0x55bed259bf78 <col:7> col:7 implicit used constexpr IPFlowID 'void (IPFlowID &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55bed259c088 <col:7> col:7 used 'IPFlowID &&'
| |-CXXCtorInitializer Field 0x55bed259a038 '_saddr' 'IPAddress'
| | `-CXXConstructExpr 0x55bed259c408 <col:7> 'IPAddress' 'void (IPAddress &&) noexcept'
| |   `-MemberExpr 0x55bed259c3c0 <col:7> 'IPAddress' xvalue ._saddr 0x55bed259a038
| |     `-CXXStaticCastExpr 0x55bed259c390 <col:7> 'IPFlowID' xvalue static_cast<class IPFlowID &&> <NoOp>
| |       `-DeclRefExpr 0x55bed259c360 <col:7> 'IPFlowID' lvalue ParmVar 0x55bed259c088 '' 'IPFlowID &&'
| |-CXXCtorInitializer Field 0x55bed259a098 '_daddr' 'IPAddress'
| | `-CXXConstructExpr 0x55bed259c508 <col:7> 'IPAddress' 'void (IPAddress &&) noexcept'
| |   `-MemberExpr 0x55bed259c4c0 <col:7> 'IPAddress' xvalue ._daddr 0x55bed259a098
| |     `-CXXStaticCastExpr 0x55bed259c490 <col:7> 'IPFlowID' xvalue static_cast<class IPFlowID &&> <NoOp>
| |       `-DeclRefExpr 0x55bed259c460 <col:7> 'IPFlowID' lvalue ParmVar 0x55bed259c088 '' 'IPFlowID &&'
| |-CXXCtorInitializer Field 0x55bed259a0f8 '_sport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x55bed259c608 <col:7> 'uint16_t':'unsigned short' <LValueToRValue>
| |   `-MemberExpr 0x55bed259c5c0 <col:7> 'uint16_t':'unsigned short' xvalue ._sport 0x55bed259a0f8
| |     `-CXXStaticCastExpr 0x55bed259c590 <col:7> 'IPFlowID' xvalue static_cast<class IPFlowID &&> <NoOp>
| |       `-DeclRefExpr 0x55bed259c560 <col:7> 'IPFlowID' lvalue ParmVar 0x55bed259c088 '' 'IPFlowID &&'
| |-CXXCtorInitializer Field 0x55bed259a158 '_dport' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x55bed259c6f0 <col:7> 'uint16_t':'unsigned short' <LValueToRValue>
| |   `-MemberExpr 0x55bed259c6a8 <col:7> 'uint16_t':'unsigned short' xvalue ._dport 0x55bed259a158
| |     `-CXXStaticCastExpr 0x55bed259c678 <col:7> 'IPFlowID' xvalue static_cast<class IPFlowID &&> <NoOp>
| |       `-DeclRefExpr 0x55bed259c648 <col:7> 'IPFlowID' lvalue ParmVar 0x55bed259c088 '' 'IPFlowID &&'
| `-CompoundStmt 0x55bed259c750 <col:7>
|-CXXDestructorDecl 0x55bed259c1d8 <col:7> col:7 implicit referenced ~IPFlowID 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55bed25a4700 <col:7> col:7 implicit used operator= 'IPFlowID &(const IPFlowID &) noexcept' inline default trivial
| |-ParmVarDecl 0x55bed25a4808 <col:7> col:7 used 'const IPFlowID &'
| `-CompoundStmt 0x55bed25a5368 <col:7>
|   |-CXXMemberCallExpr 0x55bed25a4ff8 <col:7> 'IPAddress' lvalue
|   | |-MemberExpr 0x55bed25a4fb0 <col:7> '<bound member function type>' .operator= 0x55bed259b1d8
|   | | `-MemberExpr 0x55bed25a4ec0 <col:7> 'IPAddress' lvalue ->_saddr 0x55bed259a038
|   | |   `-CXXThisExpr 0x55bed25a4eb0 <col:7> 'IPFlowID *' this
|   | `-MemberExpr 0x55bed25a4f80 <col:7> 'const IPAddress' lvalue ._saddr 0x55bed259a038
|   |   `-DeclRefExpr 0x55bed25a4f60 <col:7> 'const IPFlowID' lvalue ParmVar 0x55bed25a4808 '' 'const IPFlowID &'
|   |-CXXMemberCallExpr 0x55bed25a5178 <col:7> 'IPAddress' lvalue
|   | |-MemberExpr 0x55bed25a5130 <col:7> '<bound member function type>' .operator= 0x55bed259b1d8
|   | | `-MemberExpr 0x55bed25a5040 <col:7> 'IPAddress' lvalue ->_daddr 0x55bed259a098
|   | |   `-CXXThisExpr 0x55bed25a5030 <col:7> 'IPFlowID *' this
|   | `-MemberExpr 0x55bed25a5100 <col:7> 'const IPAddress' lvalue ._daddr 0x55bed259a098
|   |   `-DeclRefExpr 0x55bed25a50e0 <col:7> 'const IPFlowID' lvalue ParmVar 0x55bed25a4808 '' 'const IPFlowID &'
|   |-BinaryOperator 0x55bed25a5248 <col:7> 'uint16_t':'unsigned short' lvalue '='
|   | |-MemberExpr 0x55bed25a5200 <col:7> 'uint16_t':'unsigned short' lvalue ->_sport 0x55bed259a0f8
|   | | `-CXXThisExpr 0x55bed25a51f0 <col:7> 'IPFlowID *' this
|   | `-ImplicitCastExpr 0x55bed25a5230 <col:7> 'uint16_t':'unsigned short' <LValueToRValue>
|   |   `-MemberExpr 0x55bed25a51c0 <col:7> 'const uint16_t':'const unsigned short' lvalue ._sport 0x55bed259a0f8
|   |     `-DeclRefExpr 0x55bed25a51a0 <col:7> 'const IPFlowID' lvalue ParmVar 0x55bed25a4808 '' 'const IPFlowID &'
|   |-BinaryOperator 0x55bed25a5310 <col:7> 'uint16_t':'unsigned short' lvalue '='
|   | |-MemberExpr 0x55bed25a52c8 <col:7> 'uint16_t':'unsigned short' lvalue ->_dport 0x55bed259a158
|   | | `-CXXThisExpr 0x55bed25a52b8 <col:7> 'IPFlowID *' this
|   | `-ImplicitCastExpr 0x55bed25a52f8 <col:7> 'uint16_t':'unsigned short' <LValueToRValue>
|   |   `-MemberExpr 0x55bed25a5288 <col:7> 'const uint16_t':'const unsigned short' lvalue ._dport 0x55bed259a158
|   |     `-DeclRefExpr 0x55bed25a5268 <col:7> 'const IPFlowID' lvalue ParmVar 0x55bed25a4808 '' 'const IPFlowID &'
|   `-ReturnStmt 0x55bed25a5358 <col:7>
|     `-UnaryOperator 0x55bed25a5340 <col:7> 'IPFlowID' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55bed25a5330 <col:7> 'IPFlowID *' this
`-CXXMethodDecl 0x55bed25a4878 <col:7> col:7 implicit operator= 'IPFlowID &(IPFlowID &&)' inline default trivial noexcept-unevaluated 0x55bed25a4878
  `-ParmVarDecl 0x55bed25a4988 <col:7> col:7 'IPFlowID &&'

Layout: <CGRecordLayout
  LLVMType:%class.IPFlowID = type { %class.IPAddress, %class.IPAddress, i16, i16 }
  NonVirtualBaseLLVMType:%class.IPFlowID = type { %class.IPAddress, %class.IPAddress, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed25a31c0 prev 0x55bed259fdc0 <../elements/ip/iprwmapping.hh:16:1, line:65:1> line:16:7 referenced class IPRewriterEntry definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55bed25a32b8 <col:1, col:7> col:7 implicit referenced class IPRewriterEntry
|-AccessSpecDecl 0x55bed25a3348 <col:25, col:31> col:25 public
|-TypedefDecl 0x55bed25a3380 <line:18:5, col:22> col:22 referenced key_type 'IPFlowID'
| `-RecordType 0x55bed2597f70 'IPFlowID'
|   `-CXXRecord 0x55bed2597ee0 'IPFlowID'
|-TypedefDecl 0x55bed25a33e8 <line:19:5, col:29> col:29 referenced key_const_reference 'const IPFlowID &'
| `-LValueReferenceType 0x55bed259a3b0 'const IPFlowID &'
|   `-QualType 0x55bed2597f71 'const IPFlowID' const
|     `-RecordType 0x55bed2597f70 'IPFlowID'
|       `-CXXRecord 0x55bed2597ee0 'IPFlowID'
|-CXXConstructorDecl 0x55bed25a34a0 <line:21:5, line:22:5> line:21:5 IPRewriterEntry 'void ()'
| |-CXXCtorInitializer Field 0x55bed25a3f00 '_flowid' 'IPFlowID'
| | `-CXXConstructExpr 0x55bed25a4208 <col:5> 'IPFlowID' 'void ()'
| `-CompoundStmt 0x55bed25a4260 <col:23, line:22:5>
|-CXXMethodDecl 0x55bed25a3768 <line:24:5, line:30:5> line:24:10 initialize 'void (const IPFlowID &, uint32_t, bool)'
| |-ParmVarDecl 0x55bed25a3558 <col:21, col:37> col:37 used flowid 'const IPFlowID &'
| |-ParmVarDecl 0x55bed25a35d0 <col:45, col:54> col:54 used output 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55bed25a3648 <col:62, col:67> col:67 used direction 'bool'
| `-CompoundStmt 0x55bed25a5628 <col:78, line:30:5>
|   |-ParenExpr 0x55bed25a4680 <line:25:2, col:164> 'void'
|   | `-ConditionalOperator 0x55bed25a4650 <col:3, col:163> 'void'
|   |   |-CXXStaticCastExpr 0x55bed25a4310 <col:3, col:41> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bed25a42e0 <col:23, col:33> 'bool' '<='
|   |   |   |-ImplicitCastExpr 0x55bed25a42b0 <col:23> 'uint32_t':'unsigned int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x55bed25a4270 <col:23> 'uint32_t':'unsigned int' lvalue ParmVar 0x55bed25a35d0 'output' 'uint32_t':'unsigned int'
|   |   |   `-ImplicitCastExpr 0x55bed25a42c8 <col:33> 'unsigned int' <IntegralCast>
|   |   |     `-IntegerLiteral 0x55bed25a4290 <col:33> 'int' 16777215
|   |   |-CXXFunctionalCastExpr 0x55bed25a4370 <col:45, col:52> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bed25a4350 <col:51> 'int' 0
|   |   `-CallExpr 0x55bed25a45b0 <col:56, col:163> 'void'
|   |     |-ImplicitCastExpr 0x55bed25a4598 <col:56> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bed25a4578 <col:56> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bed20237b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bed25a45f0 <col:71> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bed25a43e0 <col:71> 'const char [19]' lvalue "output <= 0xFFFFFF"
|   |     |-ImplicitCastExpr 0x55bed25a4608 <col:93> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bed25a4410 <col:93> 'const char [30]' lvalue "../elements/ip/iprwmapping.hh"
|   |     |-ImplicitCastExpr 0x55bed25a4620 <col:126> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bed25a4448 <col:126> 'int' 25
|   |     `-ImplicitCastExpr 0x55bed25a4638 <col:130, col:144> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bed25a4560 <col:130, col:144> 'const char [67]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bed25a4548 <col:144> 'const char [67]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bed25a44e8 <col:144> 'const char [67]' lvalue "void IPRewriterEntry::initialize(const IPFlowID &, uint32_t, bool)"
|   |-CXXOperatorCallExpr 0x55bed25a5410 <line:26:2, col:12> 'IPFlowID' lvalue
|   | |-ImplicitCastExpr 0x55bed25a53f8 <col:10> 'IPFlowID &(*)(const IPFlowID &) noexcept' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x55bed25a4e48 <col:10> 'IPFlowID &(const IPFlowID &) noexcept' lvalue CXXMethod 0x55bed25a4700 'operator=' 'IPFlowID &(const IPFlowID &) noexcept'
|   | |-MemberExpr 0x55bed25a46b0 <col:2> 'IPFlowID' lvalue ->_flowid 0x55bed25a3f00
|   | | `-CXXThisExpr 0x55bed25a46a0 <col:2> 'IPRewriterEntry *' implicit this
|   | `-DeclRefExpr 0x55bed25a46e0 <col:12> 'const IPFlowID' lvalue ParmVar 0x55bed25a3558 'flowid' 'const IPFlowID &'
|   |-BinaryOperator 0x55bed25a54c0 <line:27:2, col:12> 'uint32_t':'unsigned int' lvalue bitfield '='
|   | |-MemberExpr 0x55bed25a5458 <col:2> 'uint32_t':'unsigned int' lvalue bitfield ->_output 0x55bed25a3fa0
|   | | `-CXXThisExpr 0x55bed25a5448 <col:2> 'IPRewriterEntry *' implicit this
|   | `-ImplicitCastExpr 0x55bed25a54a8 <col:12> 'uint32_t':'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55bed25a5488 <col:12> 'uint32_t':'unsigned int' lvalue ParmVar 0x55bed25a35d0 'output' 'uint32_t':'unsigned int'
|   |-BinaryOperator 0x55bed25a5570 <line:28:2, col:15> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x55bed25a54f0 <col:2> 'uint8_t':'unsigned char' lvalue ->_direction 0x55bed25a4000
|   | | `-CXXThisExpr 0x55bed25a54e0 <col:2> 'IPRewriterEntry *' implicit this
|   | `-ImplicitCastExpr 0x55bed25a5558 <col:15> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-ImplicitCastExpr 0x55bed25a5540 <col:15> 'bool' <LValueToRValue>
|   |     `-DeclRefExpr 0x55bed25a5520 <col:15> 'bool' lvalue ParmVar 0x55bed25a3648 'direction' 'bool'
|   `-BinaryOperator 0x55bed25a5608 <line:29:2, col:14> 'IPRewriterEntry *' lvalue '='
|     |-MemberExpr 0x55bed25a55a0 <col:2> 'IPRewriterEntry *' lvalue ->_hashnext 0x55bed25a4060
|     | `-CXXThisExpr 0x55bed25a5590 <col:2> 'IPRewriterEntry *' implicit this
|     `-ImplicitCastExpr 0x55bed25a55f0 <col:14> 'IPRewriterEntry *' <NullToPointer>
|       `-IntegerLiteral 0x55bed25a55d0 <col:14> 'int' 0
|-CXXMethodDecl 0x55bed25a3898 <line:32:5, line:34:5> line:32:21 flowid 'const IPFlowID &() const'
| `-CompoundStmt 0x55bed25a56b0 <col:36, line:34:5>
|   `-ReturnStmt 0x55bed25a56a0 <line:33:2, col:9>
|     `-MemberExpr 0x55bed25a5670 <col:9> 'const IPFlowID' lvalue ->_flowid 0x55bed25a3f00
|       `-CXXThisExpr 0x55bed25a5660 <col:9> 'const IPRewriterEntry *' implicit this
|-CXXMethodDecl 0x55bed25a3958 <line:35:5, col:40> col:21 rewritten_flowid 'IPFlowID () const' inline
|-CXXMethodDecl 0x55bed25a3a18 <line:37:5, line:39:5> line:37:10 direction 'bool () const'
| `-CompoundStmt 0x55bed25a5748 <col:28, line:39:5>
|   `-ReturnStmt 0x55bed25a5738 <line:38:2, col:9>
|     `-ImplicitCastExpr 0x55bed25a5720 <col:9> 'bool' <IntegralToBoolean>
|       `-ImplicitCastExpr 0x55bed25a5708 <col:9> 'uint8_t':'unsigned char' <LValueToRValue>
|         `-MemberExpr 0x55bed25a56d8 <col:9> 'const uint8_t':'const unsigned char' lvalue ->_direction 0x55bed25a4000
|           `-CXXThisExpr 0x55bed25a56c8 <col:9> 'const IPRewriterEntry *' implicit this
|-CXXMethodDecl 0x55bed25a3ae0 <line:41:5, line:43:5> line:41:9 output 'int () const'
| `-CompoundStmt 0x55bed25a57e0 <col:24, line:43:5>
|   `-ReturnStmt 0x55bed25a57d0 <line:42:2, col:9>
|     `-ImplicitCastExpr 0x55bed25a57b8 <col:9> 'int' <IntegralCast>
|       `-ImplicitCastExpr 0x55bed25a57a0 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-MemberExpr 0x55bed25a5770 <col:9> 'const uint32_t':'const unsigned int' lvalue bitfield ->_output 0x55bed25a3fa0
|           `-CXXThisExpr 0x55bed25a5760 <col:9> 'const IPRewriterEntry *' implicit this
|-CXXMethodDecl 0x55bed25a3bf8 <line:45:5, line:47:5> line:45:21 flow 'IPRewriterFlow *()'
| `-CompoundStmt 0x55bed25a58e8 <col:28, line:47:5>
|   `-ReturnStmt 0x55bed25a58d8 <line:46:2, col:61>
|     `-CXXReinterpretCastExpr 0x55bed25a58a8 <col:9, col:61> 'IPRewriterFlow *' reinterpret_cast<class IPRewriterFlow *> <BitCast>
|       `-BinaryOperator 0x55bed25a5878 <col:44, col:51> 'IPRewriterEntry *' '-'
|         |-CXXThisExpr 0x55bed25a57f8 <col:44> 'IPRewriterEntry *' this
|         `-ImplicitCastExpr 0x55bed25a5860 <col:51> 'int' <IntegralCast>
|           `-ImplicitCastExpr 0x55bed25a5848 <col:51> 'uint8_t':'unsigned char' <LValueToRValue>
|             `-MemberExpr 0x55bed25a5818 <col:51> 'uint8_t':'unsigned char' lvalue ->_direction 0x55bed25a4000
|               `-CXXThisExpr 0x55bed25a5808 <col:51> 'IPRewriterEntry *' implicit this
|-CXXMethodDecl 0x55bed25a3d18 <line:48:5, line:50:5> line:48:27 flow 'const IPRewriterFlow *() const'
| `-CompoundStmt 0x55bed25a59f0 <col:40, line:50:5>
|   `-ReturnStmt 0x55bed25a59e0 <line:49:2, col:67>
|     `-CXXReinterpretCastExpr 0x55bed25a59b0 <col:9, col:67> 'const IPRewriterFlow *' reinterpret_cast<const class IPRewriterFlow *> <BitCast>
|       `-BinaryOperator 0x55bed25a5980 <col:50, col:57> 'const IPRewriterEntry *' '-'
|         |-CXXThisExpr 0x55bed25a5900 <col:50> 'const IPRewriterEntry *' this
|         `-ImplicitCastExpr 0x55bed25a5968 <col:57> 'int' <IntegralCast>
|           `-ImplicitCastExpr 0x55bed25a5950 <col:57> 'uint8_t':'unsigned char' <LValueToRValue>
|             `-MemberExpr 0x55bed25a5920 <col:57> 'const uint8_t':'const unsigned char' lvalue ->_direction 0x55bed25a4000
|               `-CXXThisExpr 0x55bed25a5910 <col:57> 'const IPRewriterEntry *' implicit this
|-CXXMethodDecl 0x55bed25a3e28 <line:52:5, line:54:5> line:52:25 used hashkey 'IPRewriterEntry::key_const_reference () const'
| `-CompoundStmt 0x55bed25a5a58 <col:41, line:54:5>
|   `-ReturnStmt 0x55bed25a5a48 <line:53:2, col:9>
|     `-MemberExpr 0x55bed25a5a18 <col:9> 'const IPFlowID' lvalue ->_flowid 0x55bed25a3f00
|       `-CXXThisExpr 0x55bed25a5a08 <col:9> 'const IPRewriterEntry *' implicit this
|-AccessSpecDecl 0x55bed25a3ec8 <line:56:3, col:10> col:3 private
|-FieldDecl 0x55bed25a3f00 <line:58:5, col:14> col:14 referenced _flowid 'IPFlowID'
|-FieldDecl 0x55bed25a3fa0 <line:59:5, col:24> col:14 referenced _output 'uint32_t':'unsigned int'
| `-ConstantExpr 0x55bed25a3f80 <col:24> 'int' Int: 24
|   `-IntegerLiteral 0x55bed25a3f50 <col:24> 'int' 24
|-FieldDecl 0x55bed25a4000 <line:60:5, col:13> col:13 referenced _direction 'uint8_t':'unsigned char'
|-FieldDecl 0x55bed25a4060 <line:61:5, col:22> col:22 referenced _hashnext 'IPRewriterEntry *'
`-FriendDecl 0x55bed25a41b0 <line:63:5, col:55> col:12 'class HashContainer_adapter<IPRewriterEntry>':'HashContainer_adapter<IPRewriterEntry>'

Layout: <CGRecordLayout
  LLVMType:%class.IPRewriterEntry = type { %class.IPFlowID, [3 x i8], i8, %class.IPRewriterEntry* }
  NonVirtualBaseLLVMType:%class.IPRewriterEntry = type { %class.IPFlowID, [3 x i8], i8, %class.IPRewriterEntry* }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:24 IsSigned:0 StorageSize:24 StorageOffset:12>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed252d228 <../dummy_inc/click/libdivide.h:95:1, line:98:1> line:95:8 referenced struct libdivide_u32_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bed252d348 <col:1, col:8> col:8 implicit struct libdivide_u32_t
|-FieldDecl 0x55bed252d3e8 <line:96:5, col:14> col:14 referenced magic 'uint32_t':'unsigned int'
|-FieldDecl 0x55bed252d448 <line:97:5, col:13> col:13 referenced more 'uint8_t':'unsigned char'
|-CXXConstructorDecl 0x55bed2530530 <line:95:8> col:8 implicit used libdivide_u32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55bed2530968 <col:8>
|-CXXConstructorDecl 0x55bed2530638 <col:8> col:8 implicit constexpr libdivide_u32_t 'void (const libdivide_u32_t &)' inline default trivial noexcept-unevaluated 0x55bed2530638
| `-ParmVarDecl 0x55bed2530748 <col:8> col:8 'const libdivide_u32_t &'
|-CXXConstructorDecl 0x55bed25307e8 <col:8> col:8 implicit used constexpr libdivide_u32_t 'void (libdivide_u32_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55bed25308f8 <col:8> col:8 used 'libdivide_u32_t &&'
| |-CXXCtorInitializer Field 0x55bed252d3e8 'magic' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55bed2532810 <col:8> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55bed25327e0 <col:8> 'uint32_t':'unsigned int' xvalue .magic 0x55bed252d3e8
| |     `-CXXStaticCastExpr 0x55bed25327b0 <col:8> 'libdivide_u32_t' xvalue static_cast<struct libdivide_u32_t &&> <NoOp>
| |       `-DeclRefExpr 0x55bed2532780 <col:8> 'libdivide_u32_t' lvalue ParmVar 0x55bed25308f8 '' 'libdivide_u32_t &&'
| |-CXXCtorInitializer Field 0x55bed252d448 'more' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x55bed25328f0 <col:8> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-MemberExpr 0x55bed25328c0 <col:8> 'uint8_t':'unsigned char' xvalue .more 0x55bed252d448
| |     `-CXXStaticCastExpr 0x55bed2532890 <col:8> 'libdivide_u32_t' xvalue static_cast<struct libdivide_u32_t &&> <NoOp>
| |       `-DeclRefExpr 0x55bed2532850 <col:8> 'libdivide_u32_t' lvalue ParmVar 0x55bed25308f8 '' 'libdivide_u32_t &&'
| `-CompoundStmt 0x55bed2532940 <col:8>
|-CXXDestructorDecl 0x55bed2532cb8 <col:8> col:8 implicit referenced ~libdivide_u32_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55bed25db478 <col:8> col:8 implicit constexpr operator= 'libdivide_u32_t &(const libdivide_u32_t &)' inline default trivial noexcept-unevaluated 0x55bed25db478
| `-ParmVarDecl 0x55bed25db588 <col:8> col:8 'const libdivide_u32_t &'
`-CXXMethodDecl 0x55bed25db5f8 <col:8> col:8 implicit constexpr operator= 'libdivide_u32_t &(libdivide_u32_t &&)' inline default trivial noexcept-unevaluated 0x55bed25db5f8
  `-ParmVarDecl 0x55bed25db708 <col:8> col:8 'libdivide_u32_t &&'

Layout: <CGRecordLayout
  LLVMType:%struct.libdivide_u32_t = type { i32, i8 }
  NonVirtualBaseLLVMType:%struct.libdivide_u32_t = type { i32, i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55bed25da150 <../dummy_inc/click/hashcontainer.hh:19:1, line:29:1> line:20:7 class HashContainer_rep definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal has_mutable_fields
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-public 'HashContainer_adapter<IPRewriterEntry>':'HashContainer_adapter<IPRewriterEntry>'
|-TemplateArgument type 'IPRewriterEntry'
|-TemplateArgument type 'HashContainer_adapter<IPRewriterEntry>'
|-CXXRecordDecl 0x55bed25da3e8 prev 0x55bed25da150 <col:1, col:7> col:7 implicit class HashContainer_rep
|-FieldDecl 0x55bed25da550 <line:21:5, col:9> col:9 buckets 'IPRewriterEntry **'
|-FieldDecl 0x55bed25da5a0 <line:22:5, col:14> col:14 nbuckets 'uint32_t':'unsigned int'
|-FieldDecl 0x55bed25da5f0 <line:23:5, col:22> col:22 first_bucket 'uint32_t':'unsigned int' mutable
|-FieldDecl 0x55bed25da640 <line:24:5, col:12> col:12 size 'size_t':'unsigned long'
|-FieldDecl 0x55bed25da690 <line:25:5, col:21> col:21 bucket_divider 'libdivide_u32_t'
|-FriendDecl 0x55bed25da7e8 <line:26:5, col:36> col:12 'class HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|-FriendDecl 0x55bed25da938 <line:27:5, col:51> col:12 'class HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|-FriendDecl 0x55bed25daa88 <line:28:5, col:45> col:12 'class HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|-CXXConstructorDecl 0x55bed25dae80 <line:20:7> col:7 implicit constexpr HashContainer_rep 'void (const HashContainer_rep<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &)' inline default trivial noexcept-unevaluated 0x55bed25dae80
| `-ParmVarDecl 0x55bed25daf98 <col:7> col:7 'const HashContainer_rep<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &'
`-CXXMethodDecl 0x55bed25db778 <col:7> col:7 implicit constexpr operator= 'HashContainer_rep<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &(const HashContainer_rep<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &)' inline default trivial noexcept-unevaluated 0x55bed25db778
  `-ParmVarDecl 0x55bed25db888 <col:7> col:7 'const HashContainer_rep<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &'

Layout: <CGRecordLayout
  LLVMType:%class.HashContainer_rep = type { %class.IPRewriterEntry**, i32, i32, i64, %struct.libdivide_u32_t }
  NonVirtualBaseLLVMType:%class.HashContainer_rep = type { %class.IPRewriterEntry**, i32, i32, i64, %struct.libdivide_u32_t }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55bed25a19b0 <../dummy_inc/click/hashcontainer.hh:81:1, line:297:1> line:82:7 class HashContainer definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'IPRewriterEntry'
|-TemplateArgument type 'HashContainer_adapter<IPRewriterEntry>'
|-CXXRecordDecl 0x55bed25d4c08 prev 0x55bed25a19b0 <col:1, col:7> col:7 implicit class HashContainer
|-AccessSpecDecl 0x55bed25d4c98 <col:23, col:29> col:23 public
|-TypedefDecl 0x55bed25d5760 <line:85:5, col:34> col:34 key_type 'typename HashContainer_adapter<IPRewriterEntry>::key_type':'IPFlowID'
| `-ElaboratedType 0x55bed25d5710 'typename HashContainer_adapter<IPRewriterEntry>::key_type' sugar
|   `-TypedefType 0x55bed25d5490 'HashContainer_adapter<IPRewriterEntry>::key_type' sugar
|     |-Typedef 0x55bed25d4f10 'key_type'
|     `-ElaboratedType 0x55bed25d4ec0 'typename IPRewriterEntry::key_type' sugar
|       `-TypedefType 0x55bed25d4ea0 'IPRewriterEntry::key_type' sugar
|         |-Typedef 0x55bed25a3380 'key_type'
|         `-RecordType 0x55bed2597f70 'IPFlowID'
|           `-CXXRecord 0x55bed2597ee0 'IPFlowID'
|-TypedefDecl 0x55bed25d57f8 <line:90:5, col:15> col:15 value_type 'IPRewriterEntry':'IPRewriterEntry'
| `-SubstTemplateTypeParmType 0x55bed25d57c0 'IPRewriterEntry' sugar
|   |-TemplateTypeParmType 0x55bed253be20 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55bed253bdc8 'T'
|   `-RecordType 0x55bed259fe50 'IPRewriterEntry'
|     `-CXXRecord 0x55bed25a31c0 'IPRewriterEntry'
|-TypedefDecl 0x55bed25d5850 <line:93:5, col:20> col:20 referenced size_type 'size_t':'unsigned long'
| `-TypedefType 0x55bed202ca50 'size_t' sugar
|   |-Typedef 0x55bed1ff3be0 'size_t'
|   `-BuiltinType 0x55bed1f83640 'unsigned long'
|-TypedefDecl 0x55bed25d58a8 <line:96:5, col:22> col:22 referenced bucket_count_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55bed20dcd00 'uint32_t' sugar
|   |-Typedef 0x55bed1fec4c8 'uint32_t'
|   `-TypedefType 0x55bed1fc55a0 '__uint32_t' sugar
|     |-Typedef 0x55bed1fc5198 '__uint32_t'
|     `-BuiltinType 0x55bed1f83620 'unsigned int'
|-EnumDecl 0x55bed25d5900 <line:98:5> col:5
| |-EnumConstantDecl 0x55bed25d5a30 <line:102:2, col:42> col:2 max_bucket_count 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::(anonymous enum at ../dummy_inc/click/hashcontainer.hh:98:5)'
| | `-ConstantExpr 0x55bed25d5a10 <col:21, col:42> 'HashContainer::bucket_count_type':'unsigned int' Int: 4294967295
| |   `-CStyleCastExpr 0x55bed25d59e8 <col:21, col:42> 'HashContainer::bucket_count_type':'unsigned int' <NoOp>
| |     `-ImplicitCastExpr 0x55bed25d59d0 <col:41, col:42> 'HashContainer::bucket_count_type':'unsigned int' <IntegralCast> part_of_explicit_cast
| |       `-UnaryOperator 0x55bed253c470 <col:41, col:42> 'int' prefix '-'
| |         `-IntegerLiteral 0x55bed253c450 <col:42> 'int' 1
| `-EnumConstantDecl 0x55bed25d5aa0 <line:104:2, col:25> col:2 initial_bucket_count 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::(anonymous enum at ../dummy_inc/click/hashcontainer.hh:98:5)'
|   `-ImplicitCastExpr 0x55bed25d5af0 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bed25d5a80 <col:25> 'int' Int: 63
|       `-IntegerLiteral 0x55bed253c528 <col:25> 'int' 63
|-CXXConstructorDecl 0x55bed25d5b40 <line:108:5, col:19> col:5 HashContainer 'void ()'
|-CXXConstructorDecl 0x55bed25d5ca8 <line:111:5, col:47> col:14 HashContainer 'void (HashContainer::bucket_count_type)'
| `-ParmVarDecl 0x55bed25d5bf8 <col:28, col:46> col:46 n 'HashContainer::bucket_count_type':'unsigned int'
|-CXXDestructorDecl 0x55bed25d5d90 <line:114:5, col:20> col:5 ~HashContainer 'void ()' noexcept-unevaluated 0x55bed25d5d90
|-CXXMethodDecl 0x55bed25d5e80 <line:118:5, line:120:5> line:118:22 size 'HashContainer::size_type () const' inline
|-CXXMethodDecl 0x55bed25d5f30 <line:123:5, line:125:5> line:123:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55bed25d5fe0 <line:128:5, line:130:5> line:128:30 bucket_count 'HashContainer::bucket_count_type () const' inline
|-CXXMethodDecl 0x55bed25d6178 <line:133:5, line:139:5> line:133:22 bucket_size 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::size_type (HashContainer::bucket_count_type) const' inline
| `-ParmVarDecl 0x55bed25d60b0 <col:34, col:52> col:52 n 'HashContainer::bucket_count_type':'unsigned int'
|-CXXMethodDecl 0x55bed25d6398 <line:142:5, col:51> col:23 bucket 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::bucket_count_type (const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &) const'
| `-ParmVarDecl 0x55bed25d62a8 <col:30, col:46> col:46 key 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &'
|-CXXMethodDecl 0x55bed25d6450 <line:145:5, line:147:5> line:145:17 unbalanced 'bool () const' inline
|-TypedefDecl 0x55bed25d66e0 <line:149:5, col:48> col:48 const_iterator 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
| `-TemplateSpecializationType 0x55bed25d6640 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' sugar HashContainer_const_iterator
|   |-TemplateArgument type 'IPRewriterEntry':'IPRewriterEntry'
|   |-TemplateArgument type 'HashContainer_adapter<IPRewriterEntry>':'HashContainer_adapter<IPRewriterEntry>'
|   `-RecordType 0x55bed25d6620 'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|     `-ClassTemplateSpecialization 0x55bed25d6520 'HashContainer_const_iterator'
|-TypedefDecl 0x55bed25d6910 <line:150:5, col:42> col:42 referenced iterator 'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
| `-TemplateSpecializationType 0x55bed25d6870 'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' sugar HashContainer_iterator
|   |-TemplateArgument type 'IPRewriterEntry':'IPRewriterEntry'
|   |-TemplateArgument type 'HashContainer_adapter<IPRewriterEntry>':'HashContainer_adapter<IPRewriterEntry>'
|   `-RecordType 0x55bed25d6850 'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|     `-ClassTemplateSpecialization 0x55bed25d6758 'HashContainer_iterator'
|-CXXMethodDecl 0x55bed25d6a08 <line:155:5, col:27> col:21 begin 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::iterator ()' inline
|-CXXMethodDecl 0x55bed25d6b58 <line:157:5, col:35> col:27 begin 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::const_iterator () const' inline
|-CXXMethodDecl 0x55bed25d6c28 <line:161:5, col:25> col:21 end 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::iterator ()' inline
|-CXXMethodDecl 0x55bed25d6cf8 <line:163:5, col:33> col:27 end 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::const_iterator () const' inline
|-CXXMethodDecl 0x55bed25d6e98 <line:166:5, col:46> col:21 begin 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::iterator (HashContainer::bucket_count_type)' inline
| `-ParmVarDecl 0x55bed25d6da8 <col:27, col:45> col:45 n 'HashContainer::bucket_count_type':'unsigned int'
|-CXXMethodDecl 0x55bed25d7048 <line:168:5, col:54> col:27 begin 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::const_iterator (HashContainer::bucket_count_type) const' inline
| `-ParmVarDecl 0x55bed25d6f50 <col:33, col:51> col:51 n 'HashContainer::bucket_count_type':'unsigned int'
|-CXXMethodDecl 0x55bed25d7208 <line:171:5, col:47> col:17 contains 'bool (const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &) const' inline
| `-ParmVarDecl 0x55bed25d7110 <col:26, col:42> col:42 key 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &'
|-CXXMethodDecl 0x55bed25d73c8 <line:173:5, col:49> col:22 count 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::size_type (const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &) const' inline
| `-ParmVarDecl 0x55bed25d72d0 <col:28, col:44> col:44 key 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &'
|-CXXMethodDecl 0x55bed25d7588 <line:183:5, col:45> col:21 used find 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::iterator (const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &)' inline
| `-ParmVarDecl 0x55bed25d7490 <col:26, col:42> col:42 key 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &'
|-CXXMethodDecl 0x55bed25d7748 <line:185:5, col:53> col:27 find 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::const_iterator (const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &) const' inline
| `-ParmVarDecl 0x55bed25d7650 <col:32, col:48> col:48 key 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &'
|-CXXMethodDecl 0x55bed25d78a0 <line:191:5, col:52> col:21 find_prefer 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::iterator (const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &)' inline
| `-ParmVarDecl 0x55bed25d7810 <col:33, col:49> col:49 key 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &'
|-CXXMethodDecl 0x55bed25d7a88 <line:197:5, col:68> col:43 get 'IPRewriterEntry *(const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &) const'
| |-ParmVarDecl 0x55bed25d7998 <col:47, col:63> col:63 key 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &'
| |-NoInlineAttr 0x55bed25d7b40 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bed25d7b98 <col:30> Inherited
|-CXXMethodDecl 0x55bed25d7db8 <line:219:5, col:51> col:17 insert_at 'void (HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::iterator &, IPRewriterEntry *)' inline
| |-ParmVarDecl 0x55bed25d7c28 <col:27, col:37> col:37 it 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::iterator &'
| `-ParmVarDecl 0x55bed25d7ca0 <col:41, col:44> col:44 element 'IPRewriterEntry *'
|-CXXMethodDecl 0x55bed25d8088 <line:239:5, col:58> col:8 set 'IPRewriterEntry *(HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::iterator &, IPRewriterEntry *, bool)'
| |-ParmVarDecl 0x55bed25d7e88 <col:12, col:22> col:22 it 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::iterator &'
| |-ParmVarDecl 0x55bed25d7f00 <col:26, col:29> col:29 element 'IPRewriterEntry *'
| `-ParmVarDecl 0x55bed25d7f68 <col:38, col:53> col:43 balance 'bool'
|-CXXMethodDecl 0x55bed25d8258 <line:249:5, col:57> col:43 set 'IPRewriterEntry *(IPRewriterEntry *)'
| |-ParmVarDecl 0x55bed25d8160 <col:47, col:50> col:50 element 'IPRewriterEntry *'
| |-NoInlineAttr 0x55bed25d8310 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bed25d8368 <col:30> Inherited
|-CXXMethodDecl 0x55bed25d8498 <line:256:5, col:33> col:15 used erase 'IPRewriterEntry *(HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::iterator &)' inline
| `-ParmVarDecl 0x55bed25d83a0 <col:21, col:31> col:31 it 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::iterator &'
|-CXXMethodDecl 0x55bed25d8658 <line:262:5, col:40> col:15 erase 'IPRewriterEntry *(const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &)' inline
| `-ParmVarDecl 0x55bed25d8560 <col:21, col:37> col:37 key 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >::key_type &'
|-CXXMethodDecl 0x55bed25d8710 <line:266:5, col:16> col:10 clear 'void ()'
|-CXXMethodDecl 0x55bed25d9e58 <line:269:5, col:44> col:17 swap 'void (HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &)' inline
| `-ParmVarDecl 0x55bed25d9d60 <col:22, col:43> col:43 x 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &'
|-CXXMethodDecl 0x55bed25d9fa0 <line:277:5, col:36> col:10 rehash 'void (HashContainer::bucket_count_type)'
| `-ParmVarDecl 0x55bed25d9f10 <col:17, col:35> col:35 n 'HashContainer::bucket_count_type':'unsigned int'
|-CXXMethodDecl 0x55bed25da058 <line:282:5, line:285:5> line:282:17 balance 'void ()' inline
|-AccessSpecDecl 0x55bed25da108 <line:287:3, col:10> col:3 private
|-FieldDecl 0x55bed25db910 <line:289:5, col:29> col:29 _rep 'HashContainer_rep<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_rep<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|-CXXConstructorDecl 0x55bed25dbb68 <line:291:5, col:46> col:5 HashContainer 'void (const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &)'
| `-ParmVarDecl 0x55bed25dba58 <col:19, col:45> col:46 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &'
|-CXXMethodDecl 0x55bed25dbf08 <line:292:5, col:63> col:26 operator= 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &(const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &)'
| `-ParmVarDecl 0x55bed25dbdd8 <col:36, col:62> col:63 'const HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> > &'
|-FriendDecl 0x55bed25dc0c8 <line:294:5, col:45> col:12 'class HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
`-FriendDecl 0x55bed25dc218 <line:295:5, col:51> col:12 'class HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >':'HashContainer_const_iterator<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'

Layout: <CGRecordLayout
  LLVMType:%class.HashContainer = type { %class.HashContainer_rep }
  NonVirtualBaseLLVMType:%class.HashContainer = type { %class.HashContainer_rep }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55bed25dd850 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<56>'
|-CXXRecordDecl 0x55bed25dda28 prev 0x55bed25dd850 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55bed25ddab8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55bed25ddae0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55bed1f83580 'int'
|-TypedefDecl 0x55bed25df6b0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<56>::type':'char_array<56>'
| `-ElaboratedType 0x55bed25df660 'typename sized_array_memory<56>::type' sugar
|   `-TypedefType 0x55bed25ddf90 'sized_array_memory<56>::type' sugar
|     |-Typedef 0x55bed25dde90 'type'
|     `-TemplateSpecializationType 0x55bed25dde20 'char_array<56UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55bed25ddd00 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 56
|       |   `-SubstNonTypeTemplateParmExpr 0x55bed25ddce0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55bed25ddcc0 <col:24> 'unsigned long' 56
|       `-RecordType 0x55bed25dde00 'char_array<56>'
|         `-ClassTemplateSpecialization 0x55bed25ddd20 'char_array'
|-TypedefDecl 0x55bed25df768 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<56> >::type *'
| `-PointerType 0x55bed25df730 'vector_memory<sized_array_memory<56> >::type *'
|   `-TypedefType 0x55bed25df710 'vector_memory<sized_array_memory<56> >::type' sugar
|     |-Typedef 0x55bed25df6b0 'type'
|     `-ElaboratedType 0x55bed25df660 'typename sized_array_memory<56>::type' sugar
|       `-TypedefType 0x55bed25ddf90 'sized_array_memory<56>::type' sugar
|         |-Typedef 0x55bed25dde90 'type'
|         `-TemplateSpecializationType 0x55bed25dde20 'char_array<56UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55bed25ddd00 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 56
|           |   `-SubstNonTypeTemplateParmExpr 0x55bed25ddce0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55bed25ddcc0 <col:24> 'unsigned long' 56
|           `-RecordType 0x55bed25dde00 'char_array<56>'
|             `-ClassTemplateSpecialization 0x55bed25ddd20 'char_array'
|-CXXMethodDecl 0x55bed25df8e8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<56> >::type *) const' inline
| `-ParmVarDecl 0x55bed25df7f8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<56> >::type *'
|-CXXConstructorDecl 0x55bed25df9d8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55bed25dfab8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55bed25dfab8
|-CXXMethodDecl 0x55bed25dfd88 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<56> > &)'
| `-ParmVarDecl 0x55bed25dfc90 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<56> > &'
|-CXXMethodDecl 0x55bed25dffc8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<56> >::type *)'
| |-ParmVarDecl 0x55bed25dfe40 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55bed25dfeb8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<56> >::type *'
|-CXXMethodDecl 0x55bed25e0198 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<56> >::type *)'
| |-ParmVarDecl 0x55bed25e0088 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55bed25e0100 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<56> >::type *'
|-CXXMethodDecl 0x55bed25e02f8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<56> >::iterator ()'
|-CXXMethodDecl 0x55bed25e03c8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<56> >::iterator ()'
|-CXXMethodDecl 0x55bed25e0618 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<56> >::iterator (vector_memory<sized_array_memory<56> >::iterator, const vector_memory<sized_array_memory<56> >::type *)'
| |-ParmVarDecl 0x55bed25e0488 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<56> >::iterator':'vector_memory<sized_array_memory<56> >::type *'
| `-ParmVarDecl 0x55bed25e0500 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<56> >::type *'
|-CXXMethodDecl 0x55bed25e0878 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<56> >::iterator (vector_memory<sized_array_memory<56> >::iterator, vector_memory<sized_array_memory<56> >::iterator)'
| |-ParmVarDecl 0x55bed25e06e8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<56> >::iterator':'vector_memory<sized_array_memory<56> >::type *'
| `-ParmVarDecl 0x55bed25e0760 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<56> >::iterator':'vector_memory<sized_array_memory<56> >::type *'
|-CXXMethodDecl 0x55bed25e0a38 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<56> >::type *)' inline
| `-ParmVarDecl 0x55bed25e0948 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<56> >::type *'
|-CXXMethodDecl 0x55bed25e0bf8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<56> >::type *)' inline
| `-ParmVarDecl 0x55bed25e0b00 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<56> >::type *'
|-CXXMethodDecl 0x55bed25e0cb0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55bed25e0d60 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55bed25e0f98 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<56> >::type *)'
| |-ParmVarDecl 0x55bed25e0e10 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55bed25e0e88 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<56> >::type *'
|-CXXMethodDecl 0x55bed25e1238 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<56> > &)'
| `-ParmVarDecl 0x55bed25e1140 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<56> > &'
|-FieldDecl 0x55bed25e1300 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<56> >::type *'
|-FieldDecl 0x55bed25e1350 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55bed25e13a0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.6 = type { %struct.char_array.7*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.6 = type { %struct.char_array.7*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55bed25dc2b8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'IPRewriterInput'
|-CXXRecordDecl 0x55bed25dc4c8 prev 0x55bed25dc2b8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55bed25dd7c0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<IPRewriterInput>::type':'sized_array_memory<56>'
| `-ElaboratedType 0x55bed25dd770 'typename array_memory<IPRewriterInput>::type' sugar
|   `-TypedefType 0x55bed25dd750 'conditional<true, sized_array_memory<56>, typed_array_memory<IPRewriterInput> >::type' sugar
|     |-Typedef 0x55bed25dd600 'type'
|     `-SubstTemplateTypeParmType 0x55bed25dd420 'sized_array_memory<56>' sugar
|       |-TemplateTypeParmType 0x55bed224d410 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bed224d3b8 'T'
|       `-RecordType 0x55bed25dcf70 'sized_array_memory<56>'
|         `-ClassTemplateSpecialization 0x55bed25dce90 'sized_array_memory'
|-FieldDecl 0x55bed25e13f0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<IPRewriterInput>::array_memory_type>':'vector_memory<sized_array_memory<56> >' mutable
|-AccessSpecDecl 0x55bed25e1440 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55bed25e1478 <line:118:5, col:15> col:15 value_type 'IPRewriterInput':'IPRewriterInput'
| `-SubstTemplateTypeParmType 0x55bed25dc560 'IPRewriterInput' sugar
|   |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55bed22850a8 'T'
|   `-RecordType 0x55bed259ff00 'IPRewriterInput'
|     `-CXXRecord 0x55bed25be540 'IPRewriterInput'
|-TypedefDecl 0x55bed25e1538 <line:119:5, col:16> col:16 reference 'IPRewriterInput &'
| `-LValueReferenceType 0x55bed25e1500 'IPRewriterInput &'
|   `-SubstTemplateTypeParmType 0x55bed25dc560 'IPRewriterInput' sugar
|     |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55bed22850a8 'T'
|     `-RecordType 0x55bed259ff00 'IPRewriterInput'
|       `-CXXRecord 0x55bed25be540 'IPRewriterInput'
|-TypedefDecl 0x55bed25e15f8 <line:120:5, col:22> col:22 const_reference 'const IPRewriterInput &'
| `-LValueReferenceType 0x55bed25e15c0 'const IPRewriterInput &'
|   `-QualType 0x55bed25dc561 'const IPRewriterInput' const
|     `-SubstTemplateTypeParmType 0x55bed25dc560 'IPRewriterInput' sugar
|       |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bed22850a8 'T'
|       `-RecordType 0x55bed259ff00 'IPRewriterInput'
|         `-CXXRecord 0x55bed25be540 'IPRewriterInput'
|-TypedefDecl 0x55bed25e1688 <line:121:5, col:16> col:16 pointer 'IPRewriterInput *'
| `-PointerType 0x55bed25e1650 'IPRewriterInput *'
|   `-SubstTemplateTypeParmType 0x55bed25dc560 'IPRewriterInput' sugar
|     |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55bed22850a8 'T'
|     `-RecordType 0x55bed259ff00 'IPRewriterInput'
|       `-CXXRecord 0x55bed25be540 'IPRewriterInput'
|-TypedefDecl 0x55bed25e1748 <line:122:5, col:22> col:22 const_pointer 'const IPRewriterInput *'
| `-PointerType 0x55bed25e1710 'const IPRewriterInput *'
|   `-QualType 0x55bed25dc561 'const IPRewriterInput' const
|     `-SubstTemplateTypeParmType 0x55bed25dc560 'IPRewriterInput' sugar
|       |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bed22850a8 'T'
|       `-RecordType 0x55bed259ff00 'IPRewriterInput'
|         `-CXXRecord 0x55bed25be540 'IPRewriterInput'
|-TypedefDecl 0x55bed25e3810 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<IPRewriterInput>::type':'const IPRewriterInput &'
| `-ElaboratedType 0x55bed25e37c0 'typename fast_argument<IPRewriterInput>::type' sugar
|   `-TypedefType 0x55bed25e37a0 'fast_argument<IPRewriterInput, true>::type' sugar
|     |-Typedef 0x55bed25e36d8 'type'
|     `-LValueReferenceType 0x55bed25e36a0 'const IPRewriterInput &'
|       `-QualType 0x55bed25e3441 'const IPRewriterInput' const
|         `-SubstTemplateTypeParmType 0x55bed25e3440 'IPRewriterInput' sugar
|           |-TemplateTypeParmType 0x55bed2257ae0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55bed2257a88 'T'
|           `-RecordType 0x55bed259ff00 'IPRewriterInput'
|             `-CXXRecord 0x55bed25be540 'IPRewriterInput'
|-TypedefDecl 0x55bed25e3878 <line:126:5, col:22> col:22 const_access_type 'const IPRewriterInput &'
| `-LValueReferenceType 0x55bed25e15c0 'const IPRewriterInput &'
|   `-QualType 0x55bed25dc561 'const IPRewriterInput' const
|     `-SubstTemplateTypeParmType 0x55bed25dc560 'IPRewriterInput' sugar
|       |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bed22850a8 'T'
|       `-RecordType 0x55bed259ff00 'IPRewriterInput'
|         `-CXXRecord 0x55bed25be540 'IPRewriterInput'
|-TypedefDecl 0x55bed25e38d0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55bed1f83580 'int'
|-TypedefDecl 0x55bed25e3938 <line:130:5, col:16> col:16 iterator 'IPRewriterInput *'
| `-PointerType 0x55bed25e1650 'IPRewriterInput *'
|   `-SubstTemplateTypeParmType 0x55bed25dc560 'IPRewriterInput' sugar
|     |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55bed22850a8 'T'
|     `-RecordType 0x55bed259ff00 'IPRewriterInput'
|       `-CXXRecord 0x55bed25be540 'IPRewriterInput'
|-TypedefDecl 0x55bed25e39a0 <line:131:5, col:22> col:22 const_iterator 'const IPRewriterInput *'
| `-PointerType 0x55bed25e1710 'const IPRewriterInput *'
|   `-QualType 0x55bed25dc561 'const IPRewriterInput' const
|     `-SubstTemplateTypeParmType 0x55bed25dc560 'IPRewriterInput' sugar
|       |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bed22850a8 'T'
|       `-RecordType 0x55bed259ff00 'IPRewriterInput'
|         `-CXXRecord 0x55bed25be540 'IPRewriterInput'
|-EnumDecl 0x55bed25e39f8 <line:134:5> col:5
| `-EnumConstantDecl 0x55bed25e3af0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<IPRewriterInput>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55bed25e3ad0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55bed2286788 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55bed2286760 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55bed2286740 <col:40> 'int' 1
|-CXXConstructorDecl 0x55bed25e3b78 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55bed25e3e08 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<IPRewriterInput>::value_argument_type)' inline
| |-ParmVarDecl 0x55bed25e3c30 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55bed25e3cd0 <col:41, col:61> col:61 v 'Vector<IPRewriterInput>::value_argument_type':'const IPRewriterInput &'
|-CXXConstructorDecl 0x55bed25e40c8 <line:139:5, col:37> col:12 Vector 'void (const Vector<IPRewriterInput> &)' inline
| `-ParmVarDecl 0x55bed25e3fb0 <col:19, col:36> col:36 x 'const Vector<IPRewriterInput> &'
|-CXXConstructorDecl 0x55bed25e4388 <line:141:5, col:32> col:12 Vector 'void (Vector<IPRewriterInput> &&)' inline
| `-ParmVarDecl 0x55bed25e4270 <col:19, col:31> col:31 x 'Vector<IPRewriterInput> &&'
|-CXXMethodDecl 0x55bed25e46d0 <line:144:5, col:51> col:23 operator= 'Vector<IPRewriterInput> &(const Vector<IPRewriterInput> &)' inline
| `-ParmVarDecl 0x55bed25e45b0 <col:33, col:50> col:50 x 'const Vector<IPRewriterInput> &'
|-CXXMethodDecl 0x55bed25e49e0 <line:146:5, col:46> col:23 operator= 'Vector<IPRewriterInput> &(Vector<IPRewriterInput> &&)' inline
| `-ParmVarDecl 0x55bed25e48c0 <col:33, col:45> col:45 x 'Vector<IPRewriterInput> &&'
|-CXXMethodDecl 0x55bed25e4cd0 <line:148:5, col:70> col:23 assign 'Vector<IPRewriterInput> &(Vector::size_type, Vector<IPRewriterInput>::value_argument_type)' inline
| |-ParmVarDecl 0x55bed25e4b18 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55bed25e4b90 <col:43, col:69> col:63 v 'Vector<IPRewriterInput>::value_argument_type':'const IPRewriterInput &'
|-CXXMethodDecl 0x55bed25e4e28 <line:150:5, col:55> col:49 begin 'Vector<IPRewriterInput>::iterator ()'
| |-NoInlineAttr 0x55bed25e4f08 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bed25e4f60 <col:30> Inherited
|-CXXMethodDecl 0x55bed25e4fa8 <line:151:5, col:53> col:49 end 'Vector<IPRewriterInput>::iterator ()'
| |-NoInlineAttr 0x55bed25e5058 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bed25e50b0 <col:30> Inherited
|-CXXMethodDecl 0x55bed25e5178 <line:152:5, col:63> col:55 begin 'Vector<IPRewriterInput>::const_iterator () const'
| |-NoInlineAttr 0x55bed25e5228 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bed25e5280 <col:30> Inherited
|-CXXMethodDecl 0x55bed25e52c8 <line:153:5, col:61> col:55 end 'Vector<IPRewriterInput>::const_iterator () const'
| |-NoInlineAttr 0x55bed25e5378 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bed25e53d0 <col:30> Inherited
|-CXXMethodDecl 0x55bed25e5418 <line:154:5, col:64> col:55 cbegin 'Vector<IPRewriterInput>::const_iterator () const'
| |-NoInlineAttr 0x55bed25e54c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bed25e5520 <col:30> Inherited
|-CXXMethodDecl 0x55bed25e5568 <line:155:5, col:62> col:55 cend 'Vector<IPRewriterInput>::const_iterator () const'
| |-NoInlineAttr 0x55bed25e5618 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bed25e5670 <col:30> Inherited
|-CXXMethodDecl 0x55bed25e5698 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55bed25e5748 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55bed25e57f8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55bed25e59b8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<IPRewriterInput>::value_argument_type)' inline
| |-ParmVarDecl 0x55bed25e58a8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55bed25e5920 <col:37, col:63> col:57 v 'Vector<IPRewriterInput>::value_argument_type':'const IPRewriterInput &'
|-CXXMethodDecl 0x55bed25e5b08 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55bed25e5a78 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bed25e5cb8 <line:163:5, col:65> col:43 operator[] 'IPRewriterInput &(Vector::size_type)'
| |-ParmVarDecl 0x55bed25e5bc0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55bed25e5d70 <col:20>
| `-OptimizeNoneAttr 0x55bed25e5dc8 <col:30>
|-CXXMethodDecl 0x55bed25e5ee8 <line:164:5, col:73> col:49 used operator[] 'const IPRewriterInput &(Vector::size_type) const'
| |-ParmVarDecl 0x55bed25e5df0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55bed25e5fa0 <col:20>
| `-OptimizeNoneAttr 0x55bed25e5ff8 <col:30>
|-CXXMethodDecl 0x55bed25e60b0 <line:165:5, col:29> col:15 at 'IPRewriterInput &(Vector::size_type)' inline
| `-ParmVarDecl 0x55bed25e6020 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bed25e61f8 <line:166:5, col:37> col:21 at 'const IPRewriterInput &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55bed25e6168 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bed25e6328 <line:167:5, col:21> col:15 front 'IPRewriterInput &()' inline
|-CXXMethodDecl 0x55bed25e6458 <line:168:5, col:29> col:21 front 'const IPRewriterInput &() const' inline
|-CXXMethodDecl 0x55bed25e6528 <line:169:5, col:20> col:15 back 'IPRewriterInput &()' inline
|-CXXMethodDecl 0x55bed25e65f8 <line:170:5, col:28> col:21 back 'const IPRewriterInput &() const' inline
|-CXXMethodDecl 0x55bed25e6738 <line:172:5, col:39> col:15 unchecked_at 'IPRewriterInput &(Vector::size_type)' inline
| `-ParmVarDecl 0x55bed25e66a8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bed25e6880 <line:173:5, col:47> col:21 unchecked_at 'const IPRewriterInput &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55bed25e67f0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bed25e69c8 <line:174:5, col:59> col:15 at_u 'IPRewriterInput &(Vector::size_type)' inline
| |-ParmVarDecl 0x55bed25e6938 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55bed25e6a80 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55bed25e6b80 <line:175:5, col:71> col:21 at_u 'const IPRewriterInput &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55bed25e6af0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55bed25e6c38 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55bed25e6cf8 <line:177:5, col:20> col:15 data 'IPRewriterInput *()' inline
|-CXXMethodDecl 0x55bed25e6df8 <line:178:5, col:28> col:21 data 'const IPRewriterInput *() const' inline
|-CXXMethodDecl 0x55bed25e6fa8 <line:180:5, col:48> col:17 push_back 'void (Vector<IPRewriterInput>::value_argument_type)' inline
| `-ParmVarDecl 0x55bed25e6eb8 <col:27, col:47> col:47 v 'Vector<IPRewriterInput>::value_argument_type':'const IPRewriterInput &'
|-FunctionTemplateDecl 0x55bed25e7768 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55bed25e7060 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<IPRewriterInput>':'fast_argument<IPRewriterInput, true>'
| `-CXXMethodDecl 0x55bed25e76c8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (IPRewriterInput &&)' inline
|   `-ParmVarDecl 0x55bed25e75c8 <col:58, col:62> col:62 v 'IPRewriterInput &&'
|-CXXMethodDecl 0x55bed25e7848 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55bed25e7998 <line:186:5, col:49> col:17 push_front 'void (Vector<IPRewriterInput>::value_argument_type)' inline
| `-ParmVarDecl 0x55bed25e7908 <col:28, col:48> col:48 v 'Vector<IPRewriterInput>::value_argument_type':'const IPRewriterInput &'
|-CXXMethodDecl 0x55bed25e7a50 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55bed25e7c98 <line:189:5, col:62> col:21 insert 'Vector<IPRewriterInput>::iterator (Vector<IPRewriterInput>::iterator, Vector<IPRewriterInput>::value_argument_type)' inline
| |-ParmVarDecl 0x55bed25e7b10 <col:28, col:37> col:37 it 'Vector<IPRewriterInput>::iterator':'IPRewriterInput *'
| `-ParmVarDecl 0x55bed25e7b88 <col:41, col:61> col:61 v 'Vector<IPRewriterInput>::value_argument_type':'const IPRewriterInput &'
|-CXXMethodDecl 0x55bed25e7e58 <line:190:5, col:38> col:21 erase 'Vector<IPRewriterInput>::iterator (Vector<IPRewriterInput>::iterator)' inline
| `-ParmVarDecl 0x55bed25e7d68 <col:27, col:36> col:36 it 'Vector<IPRewriterInput>::iterator':'IPRewriterInput *'
|-CXXMethodDecl 0x55bed25e80a8 <line:191:5, col:49> col:21 erase 'Vector<IPRewriterInput>::iterator (Vector<IPRewriterInput>::iterator, Vector<IPRewriterInput>::iterator)' inline
| |-ParmVarDecl 0x55bed25e7f20 <col:27, col:36> col:36 a 'Vector<IPRewriterInput>::iterator':'IPRewriterInput *'
| `-ParmVarDecl 0x55bed25e7f98 <col:39, col:48> col:48 b 'Vector<IPRewriterInput>::iterator':'IPRewriterInput *'
|-CXXMethodDecl 0x55bed25e8168 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x55bed25e83c8 <line:195:5, col:34> col:17 swap 'void (Vector<IPRewriterInput> &)' inline
| `-ParmVarDecl 0x55bed25e82d0 <col:22, col:33> col:33 x 'Vector<IPRewriterInput> &'
`-CXXDestructorDecl 0x55bed25e8498 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55bed25e8498

Layout: <CGRecordLayout
  LLVMType:%class.Vector.5 = type { %class.vector_memory.6 }
  NonVirtualBaseLLVMType:%class.Vector.5 = type { %class.vector_memory.6 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPRewriterHeap
         0 |   Vector<class IPRewriterFlow *> [2] _heaps
        32 |   int32_t _capacity
        36 |   uint32_t _use_count
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55bed25c1a00 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<8>'
|-CXXRecordDecl 0x55bed25c1bd8 prev 0x55bed25c1a00 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55bed25c1c68 <col:46, col:52> col:46 public
|-TypedefDecl 0x55bed25c1c90 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55bed1f83580 'int'
|-TypedefDecl 0x55bed25c62d0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<8>::type':'char_array<8>'
| `-ElaboratedType 0x55bed25c6280 'typename sized_array_memory<8>::type' sugar
|   `-TypedefType 0x55bed25c2140 'sized_array_memory<8>::type' sugar
|     |-Typedef 0x55bed25c2040 'type'
|     `-TemplateSpecializationType 0x55bed25c1fd0 'char_array<8UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55bed25c1eb0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|       |   `-SubstNonTypeTemplateParmExpr 0x55bed25c1e90 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55bed25c1e70 <col:24> 'unsigned long' 8
|       `-RecordType 0x55bed25c1fb0 'char_array<8>'
|         `-ClassTemplateSpecialization 0x55bed25c1ed0 'char_array'
|-TypedefDecl 0x55bed25c6388 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<8> >::type *'
| `-PointerType 0x55bed25c6350 'vector_memory<sized_array_memory<8> >::type *'
|   `-TypedefType 0x55bed25c6330 'vector_memory<sized_array_memory<8> >::type' sugar
|     |-Typedef 0x55bed25c62d0 'type'
|     `-ElaboratedType 0x55bed25c6280 'typename sized_array_memory<8>::type' sugar
|       `-TypedefType 0x55bed25c2140 'sized_array_memory<8>::type' sugar
|         |-Typedef 0x55bed25c2040 'type'
|         `-TemplateSpecializationType 0x55bed25c1fd0 'char_array<8UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55bed25c1eb0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|           |   `-SubstNonTypeTemplateParmExpr 0x55bed25c1e90 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55bed25c1e70 <col:24> 'unsigned long' 8
|           `-RecordType 0x55bed25c1fb0 'char_array<8>'
|             `-ClassTemplateSpecialization 0x55bed25c1ed0 'char_array'
|-CXXMethodDecl 0x55bed25c6508 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<8> >::type *) const' inline
| `-ParmVarDecl 0x55bed25c6418 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXConstructorDecl 0x55bed25c65f8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55bed25c66d8 <line:23:5, col:20> col:5 used ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55bed25c69a8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x55bed25c68b0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<8> > &'
|-CXXMethodDecl 0x55bed25c6be8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x55bed25c6a60 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55bed25c6ad8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x55bed25c6db8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x55bed25c6ca8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55bed25c6d20 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x55bed25c6f18 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x55bed25c6fe8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x55bed25c7238 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x55bed25c70a8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x55bed25c7120 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x55bed25c7498 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, vector_memory<sized_array_memory<8> >::iterator)'
| |-ParmVarDecl 0x55bed25c7308 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x55bed25c7380 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x55bed25c7658 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x55bed25c7568 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x55bed25c7818 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x55bed25c7720 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x55bed25c78d0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55bed25c7980 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55bed25c7bb8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x55bed25c7a30 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55bed25c7aa8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x55bed25c7e58 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x55bed25c7d60 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<8> > &'
|-FieldDecl 0x55bed25c7f20 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<8> >::type *'
|-FieldDecl 0x55bed25c7f70 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55bed25c7fc0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.9 = type { %struct.char_array.10*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.9 = type { %struct.char_array.10*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55bed25c03f0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'IPRewriterFlow *'
|-CXXRecordDecl 0x55bed25c05f0 prev 0x55bed25c03f0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55bed25c1970 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<IPRewriterFlow *>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x55bed25c1920 'typename array_memory<IPRewriterFlow *>::type' sugar
|   `-TypedefType 0x55bed25c1900 'conditional<true, sized_array_memory<8>, typed_array_memory<IPRewriterFlow *> >::type' sugar
|     |-Typedef 0x55bed25c17b0 'type'
|     `-SubstTemplateTypeParmType 0x55bed25c15d0 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x55bed224d410 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bed224d3b8 'T'
|       `-RecordType 0x55bed25c1120 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x55bed25c1038 'sized_array_memory'
|-FieldDecl 0x55bed25c8010 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<IPRewriterFlow *>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x55bed25c8060 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55bed25c8098 <line:118:5, col:15> col:15 value_type 'IPRewriterFlow *':'IPRewriterFlow *'
| `-SubstTemplateTypeParmType 0x55bed25c0680 'IPRewriterFlow *' sugar
|   |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55bed22850a8 'T'
|   `-PointerType 0x55bed25a3b80 'IPRewriterFlow *'
|     `-RecordType 0x55bed259fda0 'IPRewriterFlow'
|       `-CXXRecord 0x55bed25a5a70 'IPRewriterFlow'
|-TypedefDecl 0x55bed25c8158 <line:119:5, col:16> col:16 reference 'IPRewriterFlow *&'
| `-LValueReferenceType 0x55bed25c8120 'IPRewriterFlow *&'
|   `-SubstTemplateTypeParmType 0x55bed25c0680 'IPRewriterFlow *' sugar
|     |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55bed22850a8 'T'
|     `-PointerType 0x55bed25a3b80 'IPRewriterFlow *'
|       `-RecordType 0x55bed259fda0 'IPRewriterFlow'
|         `-CXXRecord 0x55bed25a5a70 'IPRewriterFlow'
|-TypedefDecl 0x55bed25c8218 <line:120:5, col:22> col:22 const_reference 'IPRewriterFlow *const &'
| `-LValueReferenceType 0x55bed25c81e0 'IPRewriterFlow *const &'
|   `-QualType 0x55bed25c0681 'IPRewriterFlow *const' const
|     `-SubstTemplateTypeParmType 0x55bed25c0680 'IPRewriterFlow *' sugar
|       |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bed22850a8 'T'
|       `-PointerType 0x55bed25a3b80 'IPRewriterFlow *'
|         `-RecordType 0x55bed259fda0 'IPRewriterFlow'
|           `-CXXRecord 0x55bed25a5a70 'IPRewriterFlow'
|-TypedefDecl 0x55bed25c82a8 <line:121:5, col:16> col:16 pointer 'IPRewriterFlow **'
| `-PointerType 0x55bed25c8270 'IPRewriterFlow **'
|   `-SubstTemplateTypeParmType 0x55bed25c0680 'IPRewriterFlow *' sugar
|     |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55bed22850a8 'T'
|     `-PointerType 0x55bed25a3b80 'IPRewriterFlow *'
|       `-RecordType 0x55bed259fda0 'IPRewriterFlow'
|         `-CXXRecord 0x55bed25a5a70 'IPRewriterFlow'
|-TypedefDecl 0x55bed25c8368 <line:122:5, col:22> col:22 const_pointer 'IPRewriterFlow *const *'
| `-PointerType 0x55bed25c8330 'IPRewriterFlow *const *'
|   `-QualType 0x55bed25c0681 'IPRewriterFlow *const' const
|     `-SubstTemplateTypeParmType 0x55bed25c0680 'IPRewriterFlow *' sugar
|       |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bed22850a8 'T'
|       `-PointerType 0x55bed25a3b80 'IPRewriterFlow *'
|         `-RecordType 0x55bed259fda0 'IPRewriterFlow'
|           `-CXXRecord 0x55bed25a5a70 'IPRewriterFlow'
|-TypedefDecl 0x55bed25c9150 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<IPRewriterFlow *>::type':'IPRewriterFlow *'
| `-ElaboratedType 0x55bed25c9100 'typename fast_argument<IPRewriterFlow *>::type' sugar
|   `-TypedefType 0x55bed25c90e0 'fast_argument<IPRewriterFlow *, false>::type' sugar
|     |-Typedef 0x55bed25c9070 'type'
|     `-SubstTemplateTypeParmType 0x55bed25c8e30 'IPRewriterFlow *' sugar
|       |-TemplateTypeParmType 0x55bed2258210 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bed22581c0 'T'
|       `-PointerType 0x55bed25a3b80 'IPRewriterFlow *'
|         `-RecordType 0x55bed259fda0 'IPRewriterFlow'
|           `-CXXRecord 0x55bed25a5a70 'IPRewriterFlow'
|-TypedefDecl 0x55bed25c91b8 <line:126:5, col:22> col:22 const_access_type 'IPRewriterFlow *const &'
| `-LValueReferenceType 0x55bed25c81e0 'IPRewriterFlow *const &'
|   `-QualType 0x55bed25c0681 'IPRewriterFlow *const' const
|     `-SubstTemplateTypeParmType 0x55bed25c0680 'IPRewriterFlow *' sugar
|       |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bed22850a8 'T'
|       `-PointerType 0x55bed25a3b80 'IPRewriterFlow *'
|         `-RecordType 0x55bed259fda0 'IPRewriterFlow'
|           `-CXXRecord 0x55bed25a5a70 'IPRewriterFlow'
|-TypedefDecl 0x55bed25c9210 <line:128:5, col:17> col:17 referenced size_type 'int'
| `-BuiltinType 0x55bed1f83580 'int'
|-TypedefDecl 0x55bed25c9278 <line:130:5, col:16> col:16 iterator 'IPRewriterFlow **'
| `-PointerType 0x55bed25c8270 'IPRewriterFlow **'
|   `-SubstTemplateTypeParmType 0x55bed25c0680 'IPRewriterFlow *' sugar
|     |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55bed22850a8 'T'
|     `-PointerType 0x55bed25a3b80 'IPRewriterFlow *'
|       `-RecordType 0x55bed259fda0 'IPRewriterFlow'
|         `-CXXRecord 0x55bed25a5a70 'IPRewriterFlow'
|-TypedefDecl 0x55bed25c92e0 <line:131:5, col:22> col:22 const_iterator 'IPRewriterFlow *const *'
| `-PointerType 0x55bed25c8330 'IPRewriterFlow *const *'
|   `-QualType 0x55bed25c0681 'IPRewriterFlow *const' const
|     `-SubstTemplateTypeParmType 0x55bed25c0680 'IPRewriterFlow *' sugar
|       |-TemplateTypeParmType 0x55bed2285100 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55bed22850a8 'T'
|       `-PointerType 0x55bed25a3b80 'IPRewriterFlow *'
|         `-RecordType 0x55bed259fda0 'IPRewriterFlow'
|           `-CXXRecord 0x55bed25a5a70 'IPRewriterFlow'
|-EnumDecl 0x55bed25c9338 <line:134:5> col:5
| `-EnumConstantDecl 0x55bed25c9430 <col:12, col:40> col:12 RESERVE_GROW 'Vector<IPRewriterFlow *>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55bed25c9410 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55bed2286788 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55bed2286760 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55bed2286740 <col:40> 'int' 1
|-CXXConstructorDecl 0x55bed25c94b8 <line:137:5, col:28> col:21 used Vector 'void ()' inline
|-CXXConstructorDecl 0x55bed25c9748 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<IPRewriterFlow *>::value_argument_type)' inline
| |-ParmVarDecl 0x55bed25c9570 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55bed25c9610 <col:41, col:61> col:61 v 'Vector<IPRewriterFlow *>::value_argument_type':'IPRewriterFlow *'
|-CXXConstructorDecl 0x55bed25c9a08 <line:139:5, col:37> col:12 Vector 'void (const Vector<IPRewriterFlow *> &)' inline
| `-ParmVarDecl 0x55bed25c98f0 <col:19, col:36> col:36 x 'const Vector<IPRewriterFlow *> &'
|-CXXConstructorDecl 0x55bed25c9cc8 <line:141:5, col:32> col:12 Vector 'void (Vector<IPRewriterFlow *> &&)' inline
| `-ParmVarDecl 0x55bed25c9bb0 <col:19, col:31> col:31 x 'Vector<IPRewriterFlow *> &&'
|-CXXMethodDecl 0x55bed25ca010 <line:144:5, col:51> col:23 operator= 'Vector<IPRewriterFlow *> &(const Vector<IPRewriterFlow *> &)' inline
| `-ParmVarDecl 0x55bed25c9ef0 <col:33, col:50> col:50 x 'const Vector<IPRewriterFlow *> &'
|-CXXMethodDecl 0x55bed25ca320 <line:146:5, col:46> col:23 operator= 'Vector<IPRewriterFlow *> &(Vector<IPRewriterFlow *> &&)' inline
| `-ParmVarDecl 0x55bed25ca200 <col:33, col:45> col:45 x 'Vector<IPRewriterFlow *> &&'
|-CXXMethodDecl 0x55bed25ca610 <line:148:5, col:70> col:23 assign 'Vector<IPRewriterFlow *> &(Vector::size_type, Vector<IPRewriterFlow *>::value_argument_type)' inline
| |-ParmVarDecl 0x55bed25ca458 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55bed25ca4d0 <col:43, col:69> col:63 v 'Vector<IPRewriterFlow *>::value_argument_type':'IPRewriterFlow *'
|-CXXMethodDecl 0x55bed25ca768 <line:150:5, col:55> col:49 begin 'Vector<IPRewriterFlow *>::iterator ()'
| |-NoInlineAttr 0x55bed25ca848 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bed25ca8a0 <col:30> Inherited
|-CXXMethodDecl 0x55bed25ca8e8 <line:151:5, col:53> col:49 end 'Vector<IPRewriterFlow *>::iterator ()'
| |-NoInlineAttr 0x55bed25ca998 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bed25ca9f0 <col:30> Inherited
|-CXXMethodDecl 0x55bed25caab8 <line:152:5, col:63> col:55 begin 'Vector<IPRewriterFlow *>::const_iterator () const'
| |-NoInlineAttr 0x55bed25cab68 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bed25cabc0 <col:30> Inherited
|-CXXMethodDecl 0x55bed25cac08 <line:153:5, col:61> col:55 end 'Vector<IPRewriterFlow *>::const_iterator () const'
| |-NoInlineAttr 0x55bed25cacb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bed25cad10 <col:30> Inherited
|-CXXMethodDecl 0x55bed25cad58 <line:154:5, col:64> col:55 cbegin 'Vector<IPRewriterFlow *>::const_iterator () const'
| |-NoInlineAttr 0x55bed25cae08 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bed25cae60 <col:30> Inherited
|-CXXMethodDecl 0x55bed25caea8 <line:155:5, col:62> col:55 cend 'Vector<IPRewriterFlow *>::const_iterator () const'
| |-NoInlineAttr 0x55bed25caf58 <col:20> Inherited
| `-OptimizeNoneAttr 0x55bed25cafb0 <col:30> Inherited
|-CXXMethodDecl 0x55bed25cafd8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55bed25cb088 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55bed25cb138 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55bed25cb2f8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<IPRewriterFlow *>::value_argument_type)' inline
| |-ParmVarDecl 0x55bed25cb1e8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55bed25cb260 <col:37, col:63> col:57 v 'Vector<IPRewriterFlow *>::value_argument_type':'IPRewriterFlow *'
|-CXXMethodDecl 0x55bed25cb448 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55bed25cb3b8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bed25cb5f8 <line:163:5, col:65> col:43 operator[] 'IPRewriterFlow *&(Vector::size_type)'
| |-ParmVarDecl 0x55bed25cb500 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55bed25cb6b0 <col:20>
| `-OptimizeNoneAttr 0x55bed25cb708 <col:30>
|-CXXMethodDecl 0x55bed25cb828 <line:164:5, col:73> col:49 operator[] 'IPRewriterFlow *const &(Vector::size_type) const'
| |-ParmVarDecl 0x55bed25cb730 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55bed25cb8e0 <col:20>
| `-OptimizeNoneAttr 0x55bed25cb938 <col:30>
|-CXXMethodDecl 0x55bed25cb9f0 <line:165:5, col:29> col:15 at 'IPRewriterFlow *&(Vector::size_type)' inline
| `-ParmVarDecl 0x55bed25cb960 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bed25cbb38 <line:166:5, col:37> col:21 at 'IPRewriterFlow *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55bed25cbaa8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bed25cbc68 <line:167:5, col:21> col:15 front 'IPRewriterFlow *&()' inline
|-CXXMethodDecl 0x55bed25cbd98 <line:168:5, col:29> col:21 front 'IPRewriterFlow *const &() const' inline
|-CXXMethodDecl 0x55bed25cbe68 <line:169:5, col:20> col:15 back 'IPRewriterFlow *&()' inline
|-CXXMethodDecl 0x55bed25cbf38 <line:170:5, col:28> col:21 back 'IPRewriterFlow *const &() const' inline
|-CXXMethodDecl 0x55bed25cc078 <line:172:5, col:39> col:15 unchecked_at 'IPRewriterFlow *&(Vector::size_type)' inline
| `-ParmVarDecl 0x55bed25cbfe8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bed25cc1c0 <line:173:5, col:47> col:21 unchecked_at 'IPRewriterFlow *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55bed25cc130 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55bed25cc308 <line:174:5, col:59> col:15 at_u 'IPRewriterFlow *&(Vector::size_type)' inline
| |-ParmVarDecl 0x55bed25cc278 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55bed25cc3c0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55bed25cc4c0 <line:175:5, col:71> col:21 at_u 'IPRewriterFlow *const &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55bed25cc430 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55bed25cc578 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55bed25cc638 <line:177:5, col:20> col:15 data 'IPRewriterFlow **()' inline
|-CXXMethodDecl 0x55bed25cc738 <line:178:5, col:28> col:21 data 'IPRewriterFlow *const *() const' inline
|-CXXMethodDecl 0x55bed25cc8e8 <line:180:5, col:48> col:17 push_back 'void (Vector<IPRewriterFlow *>::value_argument_type)' inline
| `-ParmVarDecl 0x55bed25cc7f8 <col:27, col:47> col:47 v 'Vector<IPRewriterFlow *>::value_argument_type':'IPRewriterFlow *'
|-FunctionTemplateDecl 0x55bed25cd0d8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55bed25cc9a0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<IPRewriterFlow *>':'fast_argument<IPRewriterFlow *, false>'
| `-CXXMethodDecl 0x55bed25cd038 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (IPRewriterFlow *&&)' inline
|   `-ParmVarDecl 0x55bed25ccf38 <col:58, col:62> col:62 v 'IPRewriterFlow *&&'
|-CXXMethodDecl 0x55bed25cd1b8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55bed25cd308 <line:186:5, col:49> col:17 push_front 'void (Vector<IPRewriterFlow *>::value_argument_type)' inline
| `-ParmVarDecl 0x55bed25cd278 <col:28, col:48> col:48 v 'Vector<IPRewriterFlow *>::value_argument_type':'IPRewriterFlow *'
|-CXXMethodDecl 0x55bed25cd3c0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55bed25cd608 <line:189:5, col:62> col:21 insert 'Vector<IPRewriterFlow *>::iterator (Vector<IPRewriterFlow *>::iterator, Vector<IPRewriterFlow *>::value_argument_type)' inline
| |-ParmVarDecl 0x55bed25cd480 <col:28, col:37> col:37 it 'Vector<IPRewriterFlow *>::iterator':'IPRewriterFlow **'
| `-ParmVarDecl 0x55bed25cd4f8 <col:41, col:61> col:61 v 'Vector<IPRewriterFlow *>::value_argument_type':'IPRewriterFlow *'
|-CXXMethodDecl 0x55bed25cd7c8 <line:190:5, col:38> col:21 erase 'Vector<IPRewriterFlow *>::iterator (Vector<IPRewriterFlow *>::iterator)' inline
| `-ParmVarDecl 0x55bed25cd6d8 <col:27, col:36> col:36 it 'Vector<IPRewriterFlow *>::iterator':'IPRewriterFlow **'
|-CXXMethodDecl 0x55bed25cda18 <line:191:5, col:49> col:21 erase 'Vector<IPRewriterFlow *>::iterator (Vector<IPRewriterFlow *>::iterator, Vector<IPRewriterFlow *>::iterator)' inline
| |-ParmVarDecl 0x55bed25cd890 <col:27, col:36> col:36 a 'Vector<IPRewriterFlow *>::iterator':'IPRewriterFlow **'
| `-ParmVarDecl 0x55bed25cd908 <col:39, col:48> col:48 b 'Vector<IPRewriterFlow *>::iterator':'IPRewriterFlow **'
|-CXXMethodDecl 0x55bed25cdad8 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x55bed25cdd38 <line:195:5, col:34> col:17 swap 'void (Vector<IPRewriterFlow *> &)' inline
| `-ParmVarDecl 0x55bed25cdc40 <col:22, col:33> col:33 x 'Vector<IPRewriterFlow *> &'
`-CXXDestructorDecl 0x55bed25cde08 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit used ~Vector 'void () noexcept' inline default
  `-CompoundStmt 0x55bed25d16b8 <col:29>

Layout: <CGRecordLayout
  LLVMType:%class.Vector.8 = type { %class.vector_memory.9 }
  NonVirtualBaseLLVMType:%class.Vector.8 = type { %class.vector_memory.9 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed25bfea8 prev 0x55bed25a3080 <../elements/ip/iprewriterbase.hh:42:1, line:79:1> line:42:7 referenced class IPRewriterHeap definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55bed25bffa0 <col:1, col:7> col:7 implicit referenced class IPRewriterHeap
|-AccessSpecDecl 0x55bed25c0030 <col:24, col:30> col:24 public
|-CXXConstructorDecl 0x55bed25c0090 <line:44:5, line:46:5> line:44:5 IPRewriterHeap 'void ()'
| |-CXXCtorInitializer Field 0x55bed25d1048 '_heaps' 'Vector<IPRewriterFlow *> [2]'
| | `-CXXConstructExpr 0x55bed25d1690 <col:5> 'Vector<IPRewriterFlow *> [2]' 'void ()'
| |-CXXCtorInitializer Field 0x55bed25d10a8 '_capacity' 'int32_t':'int'
| | `-IntegerLiteral 0x55bed25d15a8 <line:45:14> 'int' 2147483647
| |-CXXCtorInitializer Field 0x55bed25d1108 '_use_count' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55bed25d1650 <col:38> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55bed25d1610 <col:38> 'int' 1
| `-CompoundStmt 0x55bed25d1708 <col:41, line:46:5>
|-CXXDestructorDecl 0x55bed25c0180 <line:47:5, line:49:5> line:47:5 used ~IPRewriterHeap 'void () noexcept'
| `-CompoundStmt 0x55bed25d1b48 <col:23, line:49:5>
|   `-ParenExpr 0x55bed25d1b28 <line:48:2, col:153> 'void'
|     `-ConditionalOperator 0x55bed25d1af8 <col:3, col:152> 'void'
|       |-CXXStaticCastExpr 0x55bed25d17e0 <col:3, col:34> 'bool' static_cast<_Bool> <NoOp>
|       | `-BinaryOperator 0x55bed25d17b0 <col:23, col:33> 'bool' '=='
|       |   |-CXXMemberCallExpr 0x55bed25d1758 <col:23, col:28> 'Vector<IPRewriterFlow *>::size_type':'int'
|       |   | `-MemberExpr 0x55bed25d1728 <col:23> '<bound member function type>' ->size 0x55bed25d0988
|       |   |   `-ImplicitCastExpr 0x55bed25d1778 <col:23> 'const IPRewriterHeap *' <NoOp>
|       |   |     `-CXXThisExpr 0x55bed25d1718 <col:23> 'IPRewriterHeap *' implicit this
|       |   `-IntegerLiteral 0x55bed25d1790 <col:33> 'int' 0
|       |-CXXFunctionalCastExpr 0x55bed25d1840 <col:38, col:45> 'void' functional cast to void <ToVoid>
|       | `-IntegerLiteral 0x55bed25d1820 <col:44> 'int' 0
|       `-CallExpr 0x55bed25d1a58 <col:49, col:152> 'void'
|         |-ImplicitCastExpr 0x55bed25d1a40 <col:49> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55bed25d1a20 <col:49> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bed20237b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|         |-ImplicitCastExpr 0x55bed25d1a98 <col:64> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x55bed25d18b0 <col:64> 'const char [12]' lvalue "size() == 0"
|         |-ImplicitCastExpr 0x55bed25d1ab0 <col:79> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x55bed25d1958 <col:79> 'const char [33]' lvalue "../elements/ip/iprewriterbase.hh"
|         |-ImplicitCastExpr 0x55bed25d1ac8 <col:115> 'unsigned int' <IntegralCast>
|         | `-IntegerLiteral 0x55bed25d1990 <col:115> 'int' 48
|         `-ImplicitCastExpr 0x55bed25d1ae0 <col:119, col:133> 'const char *' <ArrayToPointerDecay>
|           `-UnaryOperator 0x55bed25d1a08 <col:119, col:133> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|             `-PredefinedExpr 0x55bed25d19f0 <col:133> 'const char [34]' lvalue __PRETTY_FUNCTION__
|               `-StringLiteral 0x55bed25d19b0 <col:133> 'const char [34]' lvalue "IPRewriterHeap::~IPRewriterHeap()"
|-CXXMethodDecl 0x55bed25c0280 <line:51:5, line:53:5> line:51:10 use 'void ()'
| `-CompoundStmt 0x55bed25d1bb8 <col:16, line:53:5>
|   `-UnaryOperator 0x55bed25d1ba0 <line:52:2, col:4> 'uint32_t':'unsigned int' lvalue prefix '++'
|     `-MemberExpr 0x55bed25d1b70 <col:4> 'uint32_t':'unsigned int' lvalue ->_use_count 0x55bed25d1108
|       `-CXXThisExpr 0x55bed25d1b60 <col:4> 'IPRewriterHeap *' implicit this
|-CXXMethodDecl 0x55bed25c0340 <line:54:5, line:58:5> line:54:10 unuse 'void ()'
| `-CompoundStmt 0x55bed25d2080 <col:18, line:58:5>
|   |-ParenExpr 0x55bed25d1f50 <line:55:2, col:159> 'void'
|   | `-ConditionalOperator 0x55bed25d1f20 <col:3, col:158> 'void'
|   |   |-CXXStaticCastExpr 0x55bed25d1c90 <col:3, col:37> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bed25d1c60 <col:23, col:36> 'bool' '>'
|   |   |   |-ImplicitCastExpr 0x55bed25d1c30 <col:23> 'uint32_t':'unsigned int' <LValueToRValue>
|   |   |   | `-MemberExpr 0x55bed25d1be0 <col:23> 'uint32_t':'unsigned int' lvalue ->_use_count 0x55bed25d1108
|   |   |   |   `-CXXThisExpr 0x55bed25d1bd0 <col:23> 'IPRewriterHeap *' implicit this
|   |   |   `-ImplicitCastExpr 0x55bed25d1c48 <col:36> 'unsigned int' <IntegralCast>
|   |   |     `-IntegerLiteral 0x55bed25d1c10 <col:36> 'int' 0
|   |   |-CXXFunctionalCastExpr 0x55bed25d1cf0 <col:41, col:48> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bed25d1cd0 <col:47> 'int' 0
|   |   `-CallExpr 0x55bed25d1e80 <col:52, col:158> 'void'
|   |     |-ImplicitCastExpr 0x55bed25d1e68 <col:52> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bed25d1e48 <col:52> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bed20237b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bed25d1ec0 <col:67> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bed25d1d60 <col:67> 'const char [15]' lvalue "_use_count > 0"
|   |     |-ImplicitCastExpr 0x55bed25d1ed8 <col:85> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bed25d1d88 <col:85> 'const char [33]' lvalue "../elements/ip/iprewriterbase.hh"
|   |     |-ImplicitCastExpr 0x55bed25d1ef0 <col:121> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bed25d1dc0 <col:121> 'int' 55
|   |     `-ImplicitCastExpr 0x55bed25d1f08 <col:125, col:139> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bed25d1e30 <col:125, col:139> 'const char [29]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bed25d1e18 <col:139> 'const char [29]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bed25d1de0 <col:139> 'const char [29]' lvalue "void IPRewriterHeap::unuse()"
|   `-IfStmt 0x55bed25d2068 <line:56:2, line:57:13>
|     |-BinaryOperator 0x55bed25d2018 <line:56:6, col:22> 'bool' '=='
|     | |-ImplicitCastExpr 0x55bed25d1fe8 <col:6, col:8> 'uint32_t':'unsigned int' <LValueToRValue>
|     | | `-UnaryOperator 0x55bed25d1fb0 <col:6, col:8> 'uint32_t':'unsigned int' lvalue prefix '--'
|     | |   `-MemberExpr 0x55bed25d1f80 <col:8> 'uint32_t':'unsigned int' lvalue ->_use_count 0x55bed25d1108
|     | |     `-CXXThisExpr 0x55bed25d1f70 <col:8> 'IPRewriterHeap *' implicit this
|     | `-ImplicitCastExpr 0x55bed25d2000 <col:22> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x55bed25d1fc8 <col:22> 'int' 0
|     `-CXXDeleteExpr 0x55bed25d2048 <line:57:6, col:13> 'void' Function 0x55bed20dab58 'operator delete' 'void (void *) noexcept'
|       `-CXXThisExpr 0x55bed25d2038 <col:13> 'IPRewriterHeap *' this
|-CXXMethodDecl 0x55bed25d0988 <line:60:5, line:62:5> line:60:41 used size 'Vector<IPRewriterFlow *>::size_type () const'
| `-CompoundStmt 0x55bed25d2338 <col:54, line:62:5>
|   `-ReturnStmt 0x55bed25d2328 <line:61:2, col:43>
|     `-BinaryOperator 0x55bed25d2308 <col:9, col:43> 'int' '+'
|       |-CXXMemberCallExpr 0x55bed25d2200 <col:9, col:24> 'Vector::size_type':'int'
|       | `-MemberExpr 0x55bed25d21d0 <col:9, col:19> '<bound member function type>' .size 0x55bed25cafd8
|       |   `-ArraySubscriptExpr 0x55bed25d21b0 <col:9, col:17> 'const Vector<IPRewriterFlow *>':'const Vector<IPRewriterFlow *>' lvalue
|       |     |-ImplicitCastExpr 0x55bed25d2198 <col:9> 'const Vector<IPRewriterFlow *> *' <ArrayToPointerDecay>
|       |     | `-MemberExpr 0x55bed25d20b0 <col:9> 'Vector<IPRewriterFlow *> const[2]' lvalue ->_heaps 0x55bed25d1048
|       |     |   `-CXXThisExpr 0x55bed25d20a0 <col:9> 'const IPRewriterHeap *' implicit this
|       |     `-IntegerLiteral 0x55bed25d20e0 <col:16> 'int' 0
|       `-CXXMemberCallExpr 0x55bed25d22e8 <col:28, col:43> 'Vector::size_type':'int'
|         `-MemberExpr 0x55bed25d22b8 <col:28, col:38> '<bound member function type>' .size 0x55bed25cafd8
|           `-ArraySubscriptExpr 0x55bed25d2298 <col:28, col:36> 'const Vector<IPRewriterFlow *>':'const Vector<IPRewriterFlow *>' lvalue
|             |-ImplicitCastExpr 0x55bed25d2280 <col:28> 'const Vector<IPRewriterFlow *> *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55bed25d2230 <col:28> 'Vector<IPRewriterFlow *> const[2]' lvalue ->_heaps 0x55bed25d1048
|             |   `-CXXThisExpr 0x55bed25d2220 <col:28> 'const IPRewriterHeap *' implicit this
|             `-IntegerLiteral 0x55bed25d2260 <col:35> 'int' 1
|-CXXMethodDecl 0x55bed25d0a78 <line:63:5, line:65:5> line:63:13 capacity 'int32_t () const'
| `-CompoundStmt 0x55bed25d23b8 <col:30, line:65:5>
|   `-ReturnStmt 0x55bed25d23a8 <line:64:2, col:9>
|     `-ImplicitCastExpr 0x55bed25d2390 <col:9> 'int32_t':'int' <LValueToRValue>
|       `-MemberExpr 0x55bed25d2360 <col:9> 'const int32_t':'const int' lvalue ->_capacity 0x55bed25d10a8
|         `-CXXThisExpr 0x55bed25d2350 <col:9> 'const IPRewriterHeap *' implicit this
|-AccessSpecDecl 0x55bed25d0b18 <line:67:3, col:10> col:3 private
|-EnumDecl 0x55bed25d0b40 <line:69:5, line:71:5> line:69:5
| |-EnumConstantDecl 0x55bed25d0c40 <line:70:2, col:18> col:2 h_best_effort 'IPRewriterHeap::(anonymous enum at ../elements/ip/iprewriterbase.hh:69:5)'
| | `-ImplicitCastExpr 0x55bed25d0d20 <col:18> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed25d0c20 <col:18> 'int' Int: 0
| |     `-IntegerLiteral 0x55bed25d0c00 <col:18> 'int' 0
| `-EnumConstantDecl 0x55bed25d0cd0 <col:21, col:35> col:21 h_guarantee 'IPRewriterHeap::(anonymous enum at ../elements/ip/iprewriterbase.hh:69:5)'
|   `-ImplicitCastExpr 0x55bed25d0d38 <col:35> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bed25d0cb0 <col:35> 'int' Int: 1
|       `-IntegerLiteral 0x55bed25d0c90 <col:35> 'int' 1
|-FieldDecl 0x55bed25d1048 <line:72:5, col:38> col:30 referenced _heaps 'Vector<IPRewriterFlow *> [2]'
|-FieldDecl 0x55bed25d10a8 <line:73:5, col:13> col:13 referenced _capacity 'int32_t':'int'
|-FieldDecl 0x55bed25d1108 <line:74:5, col:14> col:14 referenced _use_count 'uint32_t':'unsigned int'
|-FriendDecl 0x55bed25d1178 <line:76:5, col:18> col:12 'class IPRewriterBase':'IPRewriterBase'
|-FriendDecl 0x55bed25d1210 <line:77:5, col:18> col:12 'class IPRewriterFlow':'IPRewriterFlow'
|-CXXConstructorDecl 0x55bed25d1278 <line:42:7> col:7 implicit IPRewriterHeap 'void (const IPRewriterHeap &)' inline default noexcept-unevaluated 0x55bed25d1278
| `-ParmVarDecl 0x55bed25d1388 <col:7> col:7 'const IPRewriterHeap &'
`-CXXMethodDecl 0x55bed25d1428 <col:7> col:7 implicit operator= 'IPRewriterHeap &(const IPRewriterHeap &)' inline default noexcept-unevaluated 0x55bed25d1428
  `-ParmVarDecl 0x55bed25d1538 <col:7> col:7 'const IPRewriterHeap &'

Layout: <CGRecordLayout
  LLVMType:%class.IPRewriterHeap = type { [2 x %class.Vector.8], i32, i32 }
  NonVirtualBaseLLVMType:%class.IPRewriterHeap = type { [2 x %class.Vector.8], i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed2481a60 prev 0x55bed24788a0 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bed2481b58 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x55bed2481bf8 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x55bed24889c0 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55bed2488da8 <col:11>
|-CXXConstructorDecl 0x55bed2488aa0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55bed2488b88 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55bed24894f0 <col:11>
|-CXXConstructorDecl 0x55bed2488c28 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55bed2488d38 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x55bed248ad48 <col:11>
|-CXXDestructorDecl 0x55bed248a058 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55bed2190c08 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55bed2190d18 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55bed21915e0 <col:11>
|   `-ReturnStmt 0x55bed21915d0 <col:11>
|     `-UnaryOperator 0x55bed21915b8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55bed21915a8 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x55bed2190d88 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55bed2190e98 <col:11> col:11 'Timestamp::rep_t &&'
  `-CompoundStmt 0x55bed246f520 <col:11>
    `-ReturnStmt 0x55bed246f510 <col:11>
      `-UnaryOperator 0x55bed246f4f8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x55bed246f4e8 <col:11> 'Timestamp::rep_t *' this

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed2477a58 prev 0x55bed2477768 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bed2477b50 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x55bed2477be0 <col:19, col:25> col:19 public
|-TypedefDecl 0x55bed2477c18 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x55bed20dcde0 'int32_t' sugar
|   |-Typedef 0x55bed1fec328 'int32_t'
|   `-TypedefType 0x55bed1fc5510 '__int32_t' sugar
|     |-Typedef 0x55bed1fc5128 '__int32_t'
|     `-BuiltinType 0x55bed1f83580 'int'
|-TypedefDecl 0x55bed2477c80 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x55bed20dcfa0 'int64_t' sugar
|   |-Typedef 0x55bed1fec390 'int64_t'
|   `-TypedefType 0x55bed1fc5630 '__int64_t' sugar
|     |-Typedef 0x55bed1fc5208 '__int64_t'
|     `-BuiltinType 0x55bed1f835a0 'long'
|-EnumDecl 0x55bed2477cd8 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x55bed2477e50 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x55bed2477e30 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x55bed2477e08 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x55bed2477df0 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x55bed2477dc0 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x55bed2477f48 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x55bed2477f28 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x55bed2477f00 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x55bed2477ee8 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x55bed2477ec0 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x55bed2477ea0 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x55bed2477f98 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x55bed24780a0 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55bed24785f0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed2478080 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x55bed2478060 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x55bed2478130 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55bed2478608 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed2478110 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x55bed24780f0 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x55bed24781c0 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55bed2478620 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24781a0 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x55bed2478180 <col:25> 'int' 1000
| |-EnumConstantDecl 0x55bed2478250 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55bed2478638 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed2478230 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x55bed2478210 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x55bed24782e0 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55bed2478650 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24782c0 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x55bed24782a0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x55bed2478370 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55bed2478668 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed2478350 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x55bed2478330 <col:24> 'int' 1000
| |-EnumConstantDecl 0x55bed2478400 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55bed2478680 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24783e0 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x55bed24783c0 <col:26> 'int' EnumConstant 0x55bed24780a0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x55bed24784d0 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55bed2478698 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24784b0 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x55bed2478490 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x55bed2478450 <col:27> 'int' EnumConstant 0x55bed2478400 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x55bed2478470 <col:44> 'int' EnumConstant 0x55bed2478370 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x55bed24785a0 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x55bed24786b0 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bed2478580 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x55bed2478560 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x55bed2478520 <col:27> 'int' EnumConstant 0x55bed2478400 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x55bed2478540 <col:44> 'int' EnumConstant 0x55bed2478250 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x55bed24786c8 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x55bed24787d0 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x55bed2478820 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bed24787b0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x55bed2478790 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55bed2478400 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x55bed2478848 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x55bed20dca10 'uninitialized_type'
|   `-CXXRecord 0x55bed20dc978 'uninitialized_type'
|-CXXRecordDecl 0x55bed24788a0 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x55bed24789b0 <line:174:5, line:176:5> line:174:12 used Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x55bed2482ba8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55bed2488db8 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55bed2488ed8 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x55bed2488e90 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x55bed2488e20 <col:9> '<bound member function type>' ->assign 0x55bed247d5f8
|     | `-CXXThisExpr 0x55bed2488e10 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x55bed2488e50 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x55bed2488ec0 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x55bed2488e70 <col:19> 'int' 0
|-CXXConstructorDecl 0x55bed2478bf8 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x55bed2478a70 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x55bed2478ae8 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55bed24846f0 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55bed24846d0 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x55bed2482ba8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55bed2488ef0 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55bed2489040 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x55bed2488fc8 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x55bed2488f58 <col:9> '<bound member function type>' ->assign 0x55bed247d5f8
|     | `-CXXThisExpr 0x55bed2488f48 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55bed2489010 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55bed2488ff8 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x55bed2488f88 <col:16> 'long' lvalue ParmVar 0x55bed2478a70 'sec' 'long'
|     `-ImplicitCastExpr 0x55bed2489028 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55bed2488fa8 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55bed2478ae8 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55bed2478e58 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55bed2478cc8 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x55bed2478d40 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55bed2484728 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55bed2484708 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x55bed2482ba8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55bed2489058 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55bed2489190 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x55bed2489130 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x55bed24890c0 <col:9> '<bound member function type>' ->assign 0x55bed247d5f8
|     | `-CXXThisExpr 0x55bed24890b0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55bed2489160 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55bed24890f0 <col:16> 'int' lvalue ParmVar 0x55bed2478cc8 'sec' 'int'
|     `-ImplicitCastExpr 0x55bed2489178 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55bed2489110 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55bed2478d40 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55bed24790b8 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x55bed2478f28 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x55bed2478fa0 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55bed2484760 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55bed2484740 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x55bed2482ba8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55bed24891a8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55bed24892f8 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x55bed2489280 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x55bed2489210 <col:9> '<bound member function type>' ->assign 0x55bed247d5f8
|     | `-CXXThisExpr 0x55bed2489200 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55bed24892c8 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55bed24892b0 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x55bed2489240 <col:16> 'unsigned long' lvalue ParmVar 0x55bed2478f28 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x55bed24892e0 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55bed2489260 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55bed2478fa0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55bed247a250 <line:199:5, line:201:5> line:199:21 used Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x55bed2479188 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x55bed2479200 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55bed2484798 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55bed2484778 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x55bed2482ba8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55bed2489310 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55bed2489460 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x55bed24893e8 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x55bed2489378 <col:9> '<bound member function type>' ->assign 0x55bed247d5f8
|     | `-CXXThisExpr 0x55bed2489368 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55bed2489430 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55bed2489418 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55bed24893a8 <col:16> 'unsigned int' lvalue ParmVar 0x55bed2479188 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x55bed2489448 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55bed24893c8 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55bed2479200 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55bed247a3b0 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x55bed247a320 <col:31> col:37 'double'
|-CXXConstructorDecl 0x55bed247a548 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x55bed247a488 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x55bed247a778 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x55bed247a680 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x55bed247a928 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x55bed247a868 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x55bed2482ba8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55bed2489500 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x55bed2489478 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x55bed247a868 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55bed2489560 <col:19, line:214:5>
|-CXXConstructorDecl 0x55bed247aaf8 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x55bed247aa38 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x55bed2482ba8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55bed2489570 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55bed2489620 <col:53, line:219:5>
|   `-CStyleCastExpr 0x55bed24895f8 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x55bed24895c8 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x55bed247aa38 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x55bed247ace8 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x55bed247ac60 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x55bed2477800 'Timestamp'
|   | `-CXXRecord 0x55bed2477a58 'Timestamp'
|   `-ParenType 0x55bed247ac00 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x55bed247abd0 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x55bed2477da0 'Timestamp::seconds_type' sugar
|         |-Typedef 0x55bed2477c18 'seconds_type'
|         `-TypedefType 0x55bed20dcde0 'int32_t' sugar
|           |-Typedef 0x55bed1fec328 'int32_t'
|           `-TypedefType 0x55bed1fc5510 '__int32_t' sugar
|             |-Typedef 0x55bed1fc5128 '__int32_t'
|             `-BuiltinType 0x55bed1f83580 'int'
|-CXXConversionDecl 0x55bed247ae28 <line:222:5, col:45> col:12 used operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55bed247aef8 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x55bed2489728 <col:37, line:231:5>
|   `-ReturnStmt 0x55bed2489718 <line:227:9, col:23>
|     `-BinaryOperator 0x55bed24896f8 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x55bed24896c8 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55bed2489678 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x55bed2481bf8
|       |   `-MemberExpr 0x55bed2489648 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x55bed2482ba8
|       |     `-CXXThisExpr 0x55bed2489638 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55bed24896e0 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x55bed24896a8 <col:23> 'int' 0
|-CXXMethodDecl 0x55bed247afb8 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x55bed247b078 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x55bed247b138 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x55bed247b1f8 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x55bed247b2b8 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x55bed247b428 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x55bed247b368 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x55bed247b570 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x55bed247b4e0 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bed247b638 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x55bed247b6d8 <col:54> "" ""
|-CXXMethodDecl 0x55bed247b768 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x55bed247b808 <col:54> "" ""
|-CXXMethodDecl 0x55bed247b898 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x55bed247b938 <col:54> "" ""
|-CXXMethodDecl 0x55bed247ba38 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x55bed247bb08 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x55bed247bc38 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x55bed247bd30 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x55bed247be68 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55bed2489940 <col:39, line:271:5>
|   `-ReturnStmt 0x55bed2489930 <line:267:9, col:61>
|     `-CallExpr 0x55bed24898d0 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x55bed24898b8 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55bed2489740 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55bed2482ed8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x55bed2489900 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55bed24897a0 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x55bed2481bf8
|       |   `-MemberExpr 0x55bed2489770 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x55bed2482ba8
|       |     `-CXXThisExpr 0x55bed2489760 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55bed2489918 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x55bed2489840 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x55bed2489810 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x55bed24897d0 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55bed2478400 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x55bed2489828 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x55bed24897f0 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55bed2478370 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55bed247bf28 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55bed2489b00 <col:39, line:279:5>
|   `-ReturnStmt 0x55bed2489af0 <line:275:9, col:61>
|     `-CallExpr 0x55bed2489a90 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x55bed2489a78 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55bed2489958 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55bed2482ed8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x55bed2489ac0 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55bed24899b8 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x55bed2481bf8
|       |   `-MemberExpr 0x55bed2489988 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x55bed2482ba8
|       |     `-CXXThisExpr 0x55bed2489978 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55bed2489ad8 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x55bed2489a58 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x55bed2489a28 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x55bed24899e8 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55bed2478400 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x55bed2489a40 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x55bed2489a08 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55bed2478250 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55bed247bfe8 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55bed2489c98 <col:39, line:287:5>
|   `-ReturnStmt 0x55bed2489c88 <line:283:9, col:53>
|     `-BinaryOperator 0x55bed2489c68 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x55bed2489c38 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55bed2489b58 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x55bed2481bf8
|       |   `-MemberExpr 0x55bed2489b28 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x55bed2482ba8
|       |     `-CXXThisExpr 0x55bed2489b18 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55bed2489c50 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x55bed2489c18 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55bed2489bf8 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x55bed2489bc8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55bed2489b88 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55bed24780a0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55bed2489be0 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55bed2489ba8 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55bed2478400 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55bed247c0d8 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x55bed248af30 <col:40, line:293:5>
|   |-DeclStmt 0x55bed2489de0 <line:291:9, col:48>
|   | `-VarDecl 0x55bed2489cc0 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x55bed2489dc0 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x55bed2489d68 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x55bed2489d38 <col:22> '<bound member function type>' ->subsec 0x55bed247b078
|   |     |   `-CXXThisExpr 0x55bed2489d28 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x55bed2489da8 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x55bed2489d88 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55bed24784d0 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55bed248af20 <line:292:9, col:70>
|     `-ExprWithCleanups 0x55bed248af08 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x55bed248aed8 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55bed248aec0 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x55bed248aea0 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x55bed248ae70 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x55bed248ac08 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x55bed248abf0 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x55bed2489df8 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x55bed2489cc0 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x55bed248ae10 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x55bed248adf8 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x55bed248adc8 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x55bed248ac20 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x55bed248ab90 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x55bed248ab78 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x55bed248ab28 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55bed24779a8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x55bed248aac8 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x55bed2489e28 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x55bed2489e18 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x55bed248ab10 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x55bed248aaf8 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x55bed248a2e8 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x55bed2489e50 <col:39> 'int' 0
|               |               `-BinaryOperator 0x55bed2489ee0 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x55bed2489eb0 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x55bed2489e70 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55bed24784d0 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x55bed2489ec8 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x55bed2489e90 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x55bed2489cc0 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x55bed248ae40 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x55bed248abd8 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x55bed248abc8 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x55bed247c198 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x55bed248b488 <col:40, line:302:5>
|   |-DeclStmt 0x55bed248b080 <line:297:9, col:48>
|   | `-VarDecl 0x55bed248af60 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x55bed248b060 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x55bed248b008 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x55bed248afd8 <col:22> '<bound member function type>' ->subsec 0x55bed247b078
|   |     |   `-CXXThisExpr 0x55bed248afc8 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x55bed248b048 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x55bed248b028 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55bed24785a0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55bed248b478 <line:298:9, col:70>
|     `-ExprWithCleanups 0x55bed248b460 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x55bed248b430 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55bed248b418 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x55bed248b3f8 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x55bed248b3c8 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x55bed248b2f0 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x55bed248b2d8 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x55bed248b098 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x55bed248af60 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x55bed248b368 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x55bed248b350 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x55bed248b320 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x55bed248b308 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x55bed248b278 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x55bed248b260 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x55bed248b240 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55bed24779a8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x55bed248b1e0 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x55bed248b0c8 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x55bed248b0b8 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x55bed248b228 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x55bed248b210 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x55bed248b1a0 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x55bed248b0f0 <col:39> 'int' 0
|               |               `-BinaryOperator 0x55bed248b180 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x55bed248b150 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x55bed248b110 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55bed24785a0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x55bed248b168 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x55bed248b130 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x55bed248af60 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x55bed248b398 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x55bed248b2c0 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x55bed248b2b0 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x55bed247c258 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x55bed248b510 <col:40, line:306:5>
|   `-ReturnStmt 0x55bed248b500 <line:305:9, col:17>
|     `-CXXConstructExpr 0x55bed248b4d0 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x55bed248b4b8 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55bed248b4a8 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x55bed247c3f8 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x55bed247c308 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x55bed247c5c8 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x55bed247c4d0 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x55bed247c6b8 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x55bed247c828 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x55bed247c768 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x55bed248b658 <col:56, line:320:5>
|   `-ReturnStmt 0x55bed248b648 <line:319:9, col:32>
|     `-ExprWithCleanups 0x55bed248b630 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x55bed248b600 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55bed248b5e8 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55bed248b5a8 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55bed248b578 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55bed248b538 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55bed247c768 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x55bed248b590 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x55bed248b558 <col:31> 'int' 0
|-CXXMethodDecl 0x55bed247ca68 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x55bed247c8e0 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55bed247c958 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55bed248b828 <col:72, line:326:5>
|   `-ReturnStmt 0x55bed248b818 <line:325:9, col:51>
|     `-ExprWithCleanups 0x55bed248b800 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55bed248b7d0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55bed248b7b8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55bed248b778 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55bed248b760 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55bed248b680 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55bed247c8e0 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55bed248b720 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55bed248b708 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55bed248b6a0 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55bed2481350 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55bed248b748 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55bed248b6c0 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x55bed247c958 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bed247cc18 <line:328:5, line:337:5> line:328:29 used make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x55bed247cb28 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55bed248bef0 <col:56, line:337:5>
|   |-DeclStmt 0x55bed248bb28 <line:329:9, col:51>
|   | `-VarDecl 0x55bed248b850 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55bed248bb10 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55bed248bae0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55bed248bac8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55bed248bab0 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55bed248ba80 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55bed248ba68 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55bed248ba50 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55bed248b940 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55bed248bce0 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55bed248bb90 <col:9, col:14> 'int64_t':'long' lvalue .x 0x55bed2481bf8
|   | | `-MemberExpr 0x55bed248bb60 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55bed2482ba8
|   | |   `-DeclRefExpr 0x55bed248bb40 <col:9> 'Timestamp' lvalue Var 0x55bed248b850 't' 'Timestamp'
|   | `-BinaryOperator 0x55bed248bcc0 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x55bed248bc90 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55bed248bbc0 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x55bed247cb28 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55bed248bca8 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x55bed248bc70 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x55bed248bc50 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x55bed248bc20 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x55bed248bbe0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55bed2478400 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x55bed248bc38 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x55bed248bc00 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55bed2478370 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55bed248bed8 <line:336:9, col:16>
|     `-CXXConstructExpr 0x55bed248bea8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55bed248be90 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55bed248be70 <col:16> 'Timestamp' lvalue Var 0x55bed248b850 't' 'Timestamp'
|-CXXMethodDecl 0x55bed247cde0 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x55bed247ccd0 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55bed247cd48 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55bed248c0a8 <col:72, line:343:5>
|   `-ReturnStmt 0x55bed248c098 <line:342:9, col:51>
|     `-ExprWithCleanups 0x55bed248c080 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55bed248c050 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55bed248c038 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55bed248bff8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55bed248bfe0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55bed248bf28 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55bed247ccd0 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55bed248bfa0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55bed248bf88 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55bed248bf48 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55bed2481498 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55bed248bfc8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55bed248bf68 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x55bed247cd48 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bed247cf30 <line:345:5, line:354:5> line:345:29 used make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x55bed247cea0 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55bed248c4f0 <col:56, line:354:5>
|   |-DeclStmt 0x55bed248c298 <line:346:9, col:51>
|   | `-VarDecl 0x55bed248c0d0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55bed248c280 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55bed248c250 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55bed248c238 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55bed248c220 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55bed248c1f0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55bed248c1d8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55bed248c1c0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55bed248c190 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55bed248c450 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55bed248c300 <col:9, col:14> 'int64_t':'long' lvalue .x 0x55bed2481bf8
|   | | `-MemberExpr 0x55bed248c2d0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55bed2482ba8
|   | |   `-DeclRefExpr 0x55bed248c2b0 <col:9> 'Timestamp' lvalue Var 0x55bed248c0d0 't' 'Timestamp'
|   | `-BinaryOperator 0x55bed248c430 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x55bed248c400 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55bed248c330 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x55bed247cea0 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55bed248c418 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x55bed248c3e0 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x55bed248c3c0 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x55bed248c390 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x55bed248c350 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55bed2478400 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x55bed248c3a8 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x55bed248c370 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55bed2478250 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55bed248c4d8 <line:353:9, col:16>
|     `-CXXConstructExpr 0x55bed248c4a8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55bed248c490 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55bed248c470 <col:16> 'Timestamp' lvalue Var 0x55bed248c0d0 't' 'Timestamp'
|-CXXMethodDecl 0x55bed247d0f8 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x55bed247cfe8 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55bed247d060 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55bed248c6a8 <col:72, line:360:5>
|   `-ReturnStmt 0x55bed248c698 <line:359:9, col:51>
|     `-ExprWithCleanups 0x55bed248c680 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55bed248c650 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55bed248c638 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55bed248c5f8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55bed248c5e0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55bed248c528 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55bed247cfe8 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55bed248c5a0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55bed248c588 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55bed248c548 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55bed24815e0 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55bed248c5c8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55bed248c568 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x55bed247d060 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bed247d248 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x55bed247d1b8 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55bed2499018 <col:56, line:371:5>
|   |-DeclStmt 0x55bed248c898 <line:363:9, col:51>
|   | `-VarDecl 0x55bed248c6d0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55bed248c880 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55bed248c850 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55bed248c838 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55bed248c820 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55bed248c7f0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55bed248c7d8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55bed248c7c0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55bed248c790 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55bed2498f78 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55bed248c900 <col:9, col:14> 'int64_t':'long' lvalue .x 0x55bed2481bf8
|   | | `-MemberExpr 0x55bed248c8d0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55bed2482ba8
|   | |   `-DeclRefExpr 0x55bed248c8b0 <col:9> 'Timestamp' lvalue Var 0x55bed248c6d0 't' 'Timestamp'
|   | `-CallExpr 0x55bed2498f18 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x55bed2498f00 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55bed248c930 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55bed2482ed8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x55bed2498f48 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55bed248c950 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x55bed247d1b8 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55bed2498f60 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x55bed2498ee0 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x55bed2498eb0 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x55bed248c970 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55bed24780a0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x55bed2498ec8 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x55bed248c990 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55bed2478400 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55bed2499000 <line:370:9, col:16>
|     `-CXXConstructExpr 0x55bed2498fd0 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55bed2498fb8 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55bed2498f98 <col:16> 'Timestamp' lvalue Var 0x55bed248c6d0 't' 'Timestamp'
|-CXXMethodDecl 0x55bed247d338 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x55bed2499158 <col:39, line:377:5>
|   `-ReturnStmt 0x55bed2499148 <line:376:9, col:30>
|     `-ExprWithCleanups 0x55bed2499130 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x55bed2499100 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55bed24990e8 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55bed24990a8 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x55bed2499050 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x55bed2499090 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x55bed2499070 <col:29> 'int' 1
|-CXXMethodDecl 0x55bed247d3f8 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x55bed2499238 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x55bed24991f0 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x55bed2499180 <col:9> '<bound member function type>' ->assign 0x55bed247d5f8
|     | `-CXXThisExpr 0x55bed2499170 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x55bed24991b0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x55bed2499220 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x55bed24991d0 <col:19> 'int' 0
|-CXXMethodDecl 0x55bed247d5f8 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55bed247d4a8 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55bed247d520 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55bed24847d0 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55bed24847b0 <col:60> 'int' 0
| `-CompoundStmt 0x55bed2499430 <col:63, line:395:5>
|   `-BinaryOperator 0x55bed2499410 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x55bed2499290 <col:9, col:12> 'int64_t':'long' lvalue .x 0x55bed2481bf8
|     | `-MemberExpr 0x55bed2499260 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x55bed2482ba8
|     |   `-CXXThisExpr 0x55bed2499250 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x55bed24993f0 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x55bed2499380 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x55bed2499320 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x55bed2499308 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x55bed24992f0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x55bed24992c0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55bed247d4a8 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x55bed2499368 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x55bed2499348 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55bed2478400 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x55bed24993d8 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x55bed24993c0 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x55bed24993a0 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x55bed247d520 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bed247d7c8 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55bed247d6b8 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55bed247d730 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55bed2499588 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x55bed2499540 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x55bed2499458 <col:9> '<bound member function type>' ->assign 0x55bed247d5f8
|     | `-CXXThisExpr 0x55bed2499448 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55bed2499570 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55bed2499488 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55bed247d6b8 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x55bed2499500 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55bed24994e8 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55bed24994a8 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55bed2481498 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x55bed2499528 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55bed24994c8 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x55bed247d730 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bed247d998 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55bed247d888 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55bed247d900 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55bed24996e0 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x55bed2499698 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x55bed24995b0 <col:9> '<bound member function type>' ->assign 0x55bed247d5f8
|     | `-CXXThisExpr 0x55bed24995a0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55bed24996c8 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55bed24995e0 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55bed247d888 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x55bed2499658 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55bed2499640 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55bed2499600 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55bed24815e0 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x55bed2499680 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55bed2499620 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x55bed247d900 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bed247db68 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55bed247da58 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55bed247dad0 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55bed2484808 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55bed24847e8 <col:57> 'int' 0
| `-DeprecatedAttr 0x55bed247dc18 <col:75> "" ""
|-CXXMethodDecl 0x55bed247dda8 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55bed247dc98 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55bed247dd10 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55bed247de58 <col:74> "" ""
|-CXXMethodDecl 0x55bed247dfe8 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55bed247ded8 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55bed247df50 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55bed247e098 <col:74> "" ""
|-CXXMethodDecl 0x55bed247e128 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x55bed247e1c8 <col:42> "" ""
|-CXXMethodDecl 0x55bed2480a00 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x55bed24808e0 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55bed2480960 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x55bed2480ad0 <line:432:5, col:33> col:29 now 'Timestamp ()' static inline
|-CXXMethodDecl 0x55bed2480b90 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x55bed2480c30 <col:20>
| `-OptimizeNoneAttr 0x55bed2480c88 <col:30>
|-CXXMethodDecl 0x55bed2480cd0 <line:446:5, col:36> col:29 used recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x55bed2480d90 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x55bed2480e50 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x55bed2480f10 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x55bed2480fd0 <line:481:5, col:43> col:29 used recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x55bed2481090 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x55bed2481150 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x55bed2481210 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x55bed2481350 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55bed24812c0 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55bed2499828 <col:58, line:512:5>
|   `-ReturnStmt 0x55bed2499818 <line:511:9, col:53>
|     `-BinaryOperator 0x55bed24997f8 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55bed24997c8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55bed24996f8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55bed24812c0 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55bed24997e0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55bed24997a8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55bed2499788 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55bed2499758 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55bed2499718 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55bed2478400 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55bed2499770 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55bed2499738 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55bed2478370 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55bed2481498 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55bed2481408 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55bed2499970 <col:58, line:516:5>
|   `-ReturnStmt 0x55bed2499960 <line:515:9, col:53>
|     `-BinaryOperator 0x55bed2499940 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55bed2499910 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55bed2499840 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55bed2481408 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55bed2499928 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55bed24998f0 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55bed24998d0 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55bed24998a0 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55bed2499860 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55bed2478400 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55bed24998b8 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55bed2499880 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55bed2478250 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55bed24815e0 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55bed2481550 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55bed2499ab8 <col:58, line:520:5>
|   `-ReturnStmt 0x55bed2499aa8 <line:519:9, col:53>
|     `-BinaryOperator 0x55bed2499a88 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55bed2499a58 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55bed2499988 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55bed2481550 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55bed2499a70 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55bed2499a38 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55bed2499a18 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x55bed24999e8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55bed24999a8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55bed24780a0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55bed2499a00 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55bed24999c8 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55bed2478400 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55bed2481728 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55bed2481698 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55bed2499c00 <col:60, line:524:5>
|   `-ReturnStmt 0x55bed2499bf0 <line:523:9, col:55>
|     `-BinaryOperator 0x55bed2499bd0 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55bed2499ba0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55bed2499ad0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55bed2481698 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55bed2499bb8 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55bed2499b80 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55bed2499b60 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x55bed2499b30 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55bed2499af0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55bed2478400 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55bed2499b48 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55bed2499b10 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55bed2478370 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55bed2481870 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55bed24817e0 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55bed2499d48 <col:60, line:528:5>
|   `-ReturnStmt 0x55bed2499d38 <line:527:9, col:55>
|     `-BinaryOperator 0x55bed2499d18 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55bed2499ce8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55bed2499c18 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55bed24817e0 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55bed2499d00 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55bed2499cc8 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55bed2499ca8 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x55bed2499c78 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55bed2499c38 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55bed2478400 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55bed2499c90 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55bed2499c58 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55bed2478250 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55bed24819b8 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55bed2481928 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55bed2499e90 <col:60, line:532:5>
|   `-ReturnStmt 0x55bed2499e80 <line:531:9, col:55>
|     `-BinaryOperator 0x55bed2499e60 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55bed2499e30 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55bed2499d60 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55bed2481928 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55bed2499e48 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55bed2499e10 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55bed2499df0 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55bed2499dc0 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55bed2499d80 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55bed24780a0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55bed2499dd8 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55bed2499da0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55bed2478400 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x55bed2481a60 prev 0x55bed24788a0 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55bed2481b58 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x55bed2481bf8 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x55bed24889c0 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55bed2488da8 <col:11>
| |-CXXConstructorDecl 0x55bed2488aa0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55bed2488b88 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x55bed24894f0 <col:11>
| |-CXXConstructorDecl 0x55bed2488c28 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x55bed2488d38 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x55bed248ad48 <col:11>
| |-CXXDestructorDecl 0x55bed248a058 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55bed2190c08 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55bed2190d18 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x55bed21915e0 <col:11>
| |   `-ReturnStmt 0x55bed21915d0 <col:11>
| |     `-UnaryOperator 0x55bed21915b8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55bed21915a8 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x55bed2190d88 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x55bed2190e98 <col:11> col:11 'Timestamp::rep_t &&'
|   `-CompoundStmt 0x55bed246f520 <col:11>
|     `-ReturnStmt 0x55bed246f510 <col:11>
|       `-UnaryOperator 0x55bed246f4f8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55bed246f4e8 <col:11> 'Timestamp::rep_t *' this
|-EnumDecl 0x55bed2481c60 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x55bed2481d60 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x55bed2481f60 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed2481d40 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55bed2481d20 <col:21> 'int' 0
| |-EnumConstantDecl 0x55bed2481df0 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x55bed2481f78 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed2481dd0 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x55bed2481db0 <col:23> 'int' 1
| |-EnumConstantDecl 0x55bed2481e80 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x55bed2481f90 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed2481e60 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x55bed2481e40 <col:23> 'int' 2
| `-EnumConstantDecl 0x55bed2481f10 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x55bed2481fa8 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bed2481ef0 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x55bed2481ed0 <col:27> 'int' 3
|-CXXMethodDecl 0x55bed2481fe8 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x55bed24820b0 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x55bed24822b8 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x55bed2482160 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x55bed24821e0 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x55bed2484820 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x55bed24824c8 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x55bed2482378 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x55bed24823f0 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x55bed2482598 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x55bed2482658 <line:635:5, col:37> col:24 used warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x55bed24827c8 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x55bed2482708 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x55bed2482890 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x55bed2482950 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x55bed2482a10 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x55bed2482ad0 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x55bed2482b70 <line:670:3, col:10> col:3 private
|-FieldDecl 0x55bed2482ba8 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x55bed2482c18 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x55bed2499ea8 <col:27, line:684:5>
|-CXXMethodDecl 0x55bed2482cd8 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x55bed2499eb8 <col:27, line:696:5>
|-CXXMethodDecl 0x55bed2482ed8 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x55bed2482d88 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x55bed2482e00 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55bed249a040 <col:66, line:700:5>
|   `-ReturnStmt 0x55bed249a030 <line:699:9, col:31>
|     `-CallExpr 0x55bed2499fd0 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x55bed2499fb8 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55bed2499f68 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x55bed2305288 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x55bed249a000 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x55bed2499f28 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x55bed2482d88 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x55bed249a018 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55bed2499f48 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x55bed2482e00 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bed2483248 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x55bed2482f98 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x55bed2483010 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x55bed2483088 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x55bed2483100 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55bed249a390 <col:64, line:707:5>
|   |-DeclStmt 0x55bed249a0d0 <line:704:9, col:24>
|   | `-VarDecl 0x55bed249a068 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x55bed249a2e0 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x55bed249a0e8 <col:9> 'int32_t':'int' lvalue ParmVar 0x55bed2483010 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x55bed249a2c8 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x55bed249a260 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x55bed249a248 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bed249a1c8 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x55bed230a558 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x55bed249a298 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x55bed249a168 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x55bed2483088 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x55bed249a2b0 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x55bed249a188 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x55bed2483100 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x55bed249a1a8 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x55bed249a068 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x55bed249a370 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x55bed249a300 <col:9> 'int32_t':'int' lvalue ParmVar 0x55bed2482f98 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x55bed249a358 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x55bed249a340 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x55bed249a320 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x55bed249a068 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x55bed24834e8 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x55bed2483318 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x55bed2483390 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x55bed2483408 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x55bed2483788 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x55bed24835b0 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x55bed2483628 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x55bed24836a0 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x55bed2483918 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x55bed2483850 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x55bed2483b18 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x55bed24839d0 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x55bed2483a48 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x55bed2483de8 <line:717:5, col:73> col:24
| `-FunctionDecl 0x55bed2483d28 parent 0x55bed1f83488 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55bed2483bd8 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x55bed2483c50 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x55bed2484008 <line:718:5, col:72> col:24
| `-FunctionDecl 0x55bed2483f48 parent 0x55bed1f83488 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55bed2483e38 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x55bed2483eb0 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x55bed24841d0 <line:719:5, col:57> col:29
| `-FunctionDecl 0x55bed2484118 parent 0x55bed1f83488 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x55bed2484058 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x55bed2484458 <line:720:5, col:73> col:30
| `-FunctionDecl 0x55bed2484398 parent 0x55bed1f83488 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55bed2484248 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x55bed24842c0 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x55bed2484678 <line:721:5, col:73> col:30
| `-FunctionDecl 0x55bed24845b8 parent 0x55bed1f83488 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55bed24844a8 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x55bed2484520 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x55bed2489f00 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x55bed2489fe8 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x55bed2482ba8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55bed248aa58 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x55bed248aa10 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x55bed2482ba8
| |     `-DeclRefExpr 0x55bed248a9f0 <col:7> 'const Timestamp' lvalue ParmVar 0x55bed2489fe8 '' 'const Timestamp &'
| `-CompoundStmt 0x55bed248aab8 <col:7>
|-CXXConstructorDecl 0x55bed248a168 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55bed248a278 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x55bed2482ba8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55bed248ad58 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x55bed248ad00 <col:7> 'Timestamp::rep_t' xvalue ._t 0x55bed2482ba8
| |     `-CXXStaticCastExpr 0x55bed248acd0 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x55bed248aca0 <col:7> 'Timestamp' lvalue ParmVar 0x55bed248a278 '' 'Timestamp &&'
| `-CompoundStmt 0x55bed248adb8 <col:7>
|-CXXDestructorDecl 0x55bed248a328 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55bed2190a58 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x55bed2190b68 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x55bed2191658 <col:7>
|   |-CXXMemberCallExpr 0x55bed21915f8 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x55bed2191538 <col:7> '<bound member function type>' .operator= 0x55bed2190c08
|   | | `-MemberExpr 0x55bed2191448 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x55bed2482ba8
|   | |   `-CXXThisExpr 0x55bed2191438 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x55bed2191508 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x55bed2482ba8
|   |   `-DeclRefExpr 0x55bed21914e8 <col:7> 'const Timestamp' lvalue ParmVar 0x55bed2190b68 '' 'const Timestamp &'
|   `-ReturnStmt 0x55bed2191648 <col:7>
|     `-UnaryOperator 0x55bed2191630 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55bed2191620 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x55bed2190f08 <col:7> col:7 implicit used operator= 'Timestamp &(Timestamp &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55bed2191018 <col:7> col:7 used 'Timestamp &&'
  `-CompoundStmt 0x55bed246f598 <col:7>
    |-CXXMemberCallExpr 0x55bed246f538 <col:7> 'Timestamp::rep_t' lvalue
    | |-MemberExpr 0x55bed246f4a0 <col:7> '<bound member function type>' .operator= 0x55bed2190d88
    | | `-MemberExpr 0x55bed246f370 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x55bed2482ba8
    | |   `-CXXThisExpr 0x55bed246f360 <col:7> 'Timestamp *' this
    | `-MemberExpr 0x55bed246f470 <col:7> 'Timestamp::rep_t' xvalue ._t 0x55bed2482ba8
    |   `-CXXStaticCastExpr 0x55bed246f440 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
    |     `-DeclRefExpr 0x55bed246f410 <col:7> 'Timestamp' lvalue ParmVar 0x55bed2191018 '' 'Timestamp &&'
    `-ReturnStmt 0x55bed246f588 <col:7>
      `-UnaryOperator 0x55bed246f570 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x55bed246f560 <col:7> 'Timestamp *' this

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed246c578 <../dummy_inc/click/timer.hh:343:5, line:345:5> line:343:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x55bed246c6a8 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
`-CXXDestructorDecl 0x55bed246d198 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { void (%class.Timer*, i8*)* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed25086b8 prev 0x55bed24e8d50 <../dummy_inc/click/timer.hh:14:1, line:358:1> line:14:7 referenced class Timer definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55bed2468f10 <col:1, col:7> col:7 implicit referenced class Timer
|-AccessSpecDecl 0x55bed2468fa0 <col:15, col:21> col:15 public
|-CXXConstructorDecl 0x55bed2469000 <line:22:5, col:11> col:5 Timer 'void ()'
|-CXXRecordDecl 0x55bed24690a8 <line:24:5, line:25:5> line:24:12 referenced struct do_nothing_t definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| `-CXXRecordDecl 0x55bed24691c8 <col:5, col:12> col:12 implicit struct do_nothing_t
|-CXXConstructorDecl 0x55bed2469368 <line:32:5, col:37> col:5 Timer 'void (const Timer::do_nothing_t &)'
| `-ParmVarDecl 0x55bed24692a8 <col:11, col:31> col:31 unused 'const Timer::do_nothing_t &'
|-CXXConstructorDecl 0x55bed24695b8 <line:38:5, col:43> col:5 Timer 'void (TimerCallback, void *)'
| |-ParmVarDecl 0x55bed2469428 <col:11, col:25> col:25 f 'TimerCallback':'void (*)(Timer *, void *)'
| `-ParmVarDecl 0x55bed24694a8 <col:28, col:34> col:34 user_data 'void *'
|-CXXConstructorDecl 0x55bed2469748 <line:43:5, col:27> col:5 Timer 'void (Element *)'
| `-ParmVarDecl 0x55bed2469680 <col:11, col:20> col:20 element 'Element *'
|-CXXConstructorDecl 0x55bed24698c8 <line:47:5, col:21> col:5 Timer 'void (Task *)'
| `-ParmVarDecl 0x55bed2469808 <col:11, col:17> col:17 task 'Task *'
|-CXXConstructorDecl 0x55bed2469a78 <line:52:5, col:25> col:5 Timer 'void (const Timer &)'
| `-ParmVarDecl 0x55bed24699b8 <col:11, col:24> col:24 x 'const Timer &'
|-CXXDestructorDecl 0x55bed2469b70 <line:55:5, line:58:5> line:55:12 ~Timer 'void () noexcept' inline
| `-CompoundStmt 0x55bed246d370 <col:21, line:58:5>
|   `-IfStmt 0x55bed246d358 <line:56:2, line:57:17>
|     |-CXXMemberCallExpr 0x55bed246d2c0 <line:56:6, col:16> 'bool'
|     | `-MemberExpr 0x55bed246d290 <col:6> '<bound member function type>' ->scheduled 0x55bed246a3c8
|     |   `-ImplicitCastExpr 0x55bed246d2e0 <col:6> 'const Timer *' <NoOp>
|     |     `-CXXThisExpr 0x55bed246d280 <col:6> 'Timer *' implicit this
|     `-CXXMemberCallExpr 0x55bed246d338 <line:57:6, col:17> 'void'
|       `-MemberExpr 0x55bed246d308 <col:6> '<bound member function type>' ->unschedule 0x55bed246ba20
|         `-CXXThisExpr 0x55bed246d2f8 <col:6> 'Timer *' implicit this
|-CXXMethodDecl 0x55bed2469c70 <line:62:5, line:65:5> line:62:17 used assign 'void ()' inline
| `-CompoundStmt 0x55bed246d510 <col:26, line:65:5>
|   |-BinaryOperator 0x55bed246d430 <line:63:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x55bed246d3c8 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x55bed246c6a8
|   | | `-MemberExpr 0x55bed246d398 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x55bed246c768
|   | |   `-CXXThisExpr 0x55bed246d388 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x55bed246d418 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55bed246d3f8 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x55bed246cbc8 'do_nothing_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x55bed246d4f0 <line:64:2, col:20> 'void *' lvalue '='
|     |-MemberExpr 0x55bed246d460 <col:2> 'void *' lvalue ->_thunk 0x55bed246c7e8
|     | `-CXXThisExpr 0x55bed246d450 <col:2> 'Timer *' implicit this
|     `-CStyleCastExpr 0x55bed246d4c8 <col:11, col:20> 'void *' <IntegralToPointer>
|       `-IntegerLiteral 0x55bed246d490 <col:20> 'int' 1
|-CXXMethodDecl 0x55bed2469db0 <line:68:5, line:71:5> line:68:17 assign 'void (const Timer::do_nothing_t &)' inline
| |-ParmVarDecl 0x55bed2469d20 <col:24, col:44> col:44 used unused 'const Timer::do_nothing_t &'
| `-CompoundStmt 0x55bed246d670 <col:52, line:71:5>
|   |-CStyleCastExpr 0x55bed246d560 <line:69:2, col:9> 'void' <ToVoid>
|   | `-DeclRefExpr 0x55bed246d530 <col:9> 'const Timer::do_nothing_t' lvalue ParmVar 0x55bed2469d20 'unused' 'const Timer::do_nothing_t &'
|   `-CXXMemberCallExpr 0x55bed246d650 <line:70:2, col:9> 'void'
|     `-MemberExpr 0x55bed246d620 <col:2> '<bound member function type>' ->assign 0x55bed2469c70
|       `-CXXThisExpr 0x55bed246d610 <col:2> 'Timer *' implicit this
|-CXXMethodDecl 0x55bed2469f80 <line:76:5, line:79:5> line:76:17 assign 'void (TimerCallback, void *)' inline
| |-ParmVarDecl 0x55bed2469e68 <col:24, col:38> col:38 used f 'TimerCallback':'void (*)(Timer *, void *)'
| |-ParmVarDecl 0x55bed2469ee8 <col:41, col:47> col:47 used user_data 'void *'
| `-CompoundStmt 0x55bed246d7f0 <col:58, line:79:5>
|   |-BinaryOperator 0x55bed246d738 <line:77:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x55bed246d6d0 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x55bed246c6a8
|   | | `-MemberExpr 0x55bed246d6a0 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x55bed246c768
|   | |   `-CXXThisExpr 0x55bed246d690 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x55bed246d720 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' <LValueToRValue>
|   |   `-DeclRefExpr 0x55bed246d700 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue ParmVar 0x55bed2469e68 'f' 'TimerCallback':'void (*)(Timer *, void *)'
|   `-BinaryOperator 0x55bed246d7d0 <line:78:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x55bed246d768 <col:2> 'void *' lvalue ->_thunk 0x55bed246c7e8
|     | `-CXXThisExpr 0x55bed246d758 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x55bed246d7b8 <col:11> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x55bed246d798 <col:11> 'void *' lvalue ParmVar 0x55bed2469ee8 'user_data' 'void *'
|-CXXMethodDecl 0x55bed246a0d0 <line:84:5, line:87:5> line:84:10 assign 'void (Element *)'
| |-ParmVarDecl 0x55bed246a040 <col:17, col:26> col:26 used element 'Element *'
| `-CompoundStmt 0x55bed246d988 <col:35, line:87:5>
|   |-BinaryOperator 0x55bed246d8b8 <line:85:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x55bed246d850 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x55bed246c6a8
|   | | `-MemberExpr 0x55bed246d820 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x55bed246c768
|   | |   `-CXXThisExpr 0x55bed246d810 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x55bed246d8a0 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55bed246d880 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x55bed246cda0 'element_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x55bed246d968 <line:86:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x55bed246d8e8 <col:2> 'void *' lvalue ->_thunk 0x55bed246c7e8
|     | `-CXXThisExpr 0x55bed246d8d8 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x55bed246d950 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x55bed246d938 <col:11> 'Element *' <LValueToRValue>
|         `-DeclRefExpr 0x55bed246d918 <col:11> 'Element *' lvalue ParmVar 0x55bed246a040 'element' 'Element *'
|-CXXMethodDecl 0x55bed246a218 <line:91:5, line:94:5> line:91:10 assign 'void (Task *)'
| |-ParmVarDecl 0x55bed246a188 <col:17, col:23> col:23 used task 'Task *'
| `-CompoundStmt 0x55bed246db20 <col:29, line:94:5>
|   |-BinaryOperator 0x55bed246da50 <line:92:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x55bed246d9e8 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x55bed246c6a8
|   | | `-MemberExpr 0x55bed246d9b8 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x55bed246c768
|   | |   `-CXXThisExpr 0x55bed246d9a8 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x55bed246da38 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55bed246da18 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x55bed246cf78 'task_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x55bed246db00 <line:93:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x55bed246da80 <col:2> 'void *' lvalue ->_thunk 0x55bed246c7e8
|     | `-CXXThisExpr 0x55bed246da70 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x55bed246dae8 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x55bed246dad0 <col:11> 'Task *' <LValueToRValue>
|         `-DeclRefExpr 0x55bed246dab0 <col:11> 'Task *' lvalue ParmVar 0x55bed246a188 'task' 'Task *'
|-CXXMethodDecl 0x55bed246a308 <line:98:5, line:100:5> line:98:17 initialized 'bool () const' inline
| `-CompoundStmt 0x55bed246dc00 <col:37, line:100:5>
|   `-ReturnStmt 0x55bed246dbf0 <line:99:2, col:19>
|     `-BinaryOperator 0x55bed246dbd0 <col:9, col:19> 'bool' '!='
|       |-ImplicitCastExpr 0x55bed246dba0 <col:9> 'Element *' <LValueToRValue>
|       | `-MemberExpr 0x55bed246db50 <col:9> 'Element *const' lvalue ->_owner 0x55bed246c848
|       |   `-CXXThisExpr 0x55bed246db40 <col:9> 'const Timer *' implicit this
|       `-ImplicitCastExpr 0x55bed246dbb8 <col:19> 'Element *' <NullToPointer>
|         `-IntegerLiteral 0x55bed246db80 <col:19> 'int' 0
|-CXXMethodDecl 0x55bed246a3c8 <line:103:5, line:105:5> line:103:17 used scheduled 'bool () const' inline
| `-CompoundStmt 0x55bed246dcc0 <col:35, line:105:5>
|   `-ReturnStmt 0x55bed246dcb0 <line:104:2, col:23>
|     `-BinaryOperator 0x55bed246dc90 <col:9, col:23> 'bool' '!='
|       |-ImplicitCastExpr 0x55bed246dc78 <col:9> 'int' <LValueToRValue>
|       | `-MemberExpr 0x55bed246dc28 <col:9> 'const int' lvalue ->_schedpos1 0x55bed246c4c8
|       |   `-CXXThisExpr 0x55bed246dc18 <col:9> 'const Timer *' implicit this
|       `-IntegerLiteral 0x55bed246dc58 <col:23> 'int' 0
|-CXXMethodDecl 0x55bed246a488 <line:116:5, line:118:5> line:116:29 expiry_steady 'const Timestamp &() const' inline
| `-CompoundStmt 0x55bed246dd28 <col:51, line:118:5>
|   `-ReturnStmt 0x55bed246dd18 <line:117:2, col:9>
|     `-MemberExpr 0x55bed246dce8 <col:9> 'const Timestamp' lvalue ->_expiry_s 0x55bed246c528
|       `-CXXThisExpr 0x55bed246dcd8 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x55bed246a548 <line:131:5, line:136:5> line:131:22 expiry 'Timestamp () const' inline
| `-CompoundStmt 0x55bed246e280 <col:37, line:136:5>
|   `-IfStmt 0x55bed246e258 <line:132:2, line:135:13> has_else
|     |-ImplicitCastExpr 0x55bed246dde8 <line:132:6> 'bool' <MemberPointerToBoolean>
|     | `-ImplicitCastExpr 0x55bed246ddd0 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const' <UserDefinedConversion>
|     |   `-CXXMemberCallExpr 0x55bed246ddb0 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const'
|     |     `-MemberExpr 0x55bed246dd80 <col:6> '<bound member function type>' .operator int (Timestamp::*)() const 0x55bed247ae28
|     |       `-MemberExpr 0x55bed246dd50 <col:6> 'const Timestamp' lvalue ->_expiry_s 0x55bed246c528
|     |         `-CXXThisExpr 0x55bed246dd40 <col:6> 'const Timer *' implicit this
|     |-ReturnStmt 0x55bed246e1c8 <line:133:6, col:72>
|     | `-ExprWithCleanups 0x55bed246e1b0 <col:13, col:72> 'Timestamp'
|     |   `-CXXConstructExpr 0x55bed246e180 <col:13, col:72> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |     `-MaterializeTemporaryExpr 0x55bed246e168 <col:13, col:72> 'Timestamp' xvalue
|     |       `-CXXOperatorCallExpr 0x55bed246e130 <col:13, col:72> 'Timestamp'
|     |         |-ImplicitCastExpr 0x55bed246e118 <col:45> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         | `-DeclRefExpr 0x55bed246e0f8 <col:45> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55bed24a9600 'operator-' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |-CXXConstructExpr 0x55bed246e098 <col:13, col:43> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |         | `-MaterializeTemporaryExpr 0x55bed246e080 <col:13, col:43> 'Timestamp' xvalue
|     |         |   `-CXXOperatorCallExpr 0x55bed246dfa8 <col:13, col:43> 'Timestamp'
|     |         |     |-ImplicitCastExpr 0x55bed246df90 <col:23> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         |     | `-DeclRefExpr 0x55bed246df70 <col:23> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55bed24a92c0 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |     |-CXXConstructExpr 0x55bed246df10 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|     |         |     | `-MemberExpr 0x55bed246de10 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x55bed246c528
|     |         |     |   `-CXXThisExpr 0x55bed246de00 <col:13> 'const Timer *' implicit this
|     |         |     `-MaterializeTemporaryExpr 0x55bed246df58 <col:25, col:43> 'const Timestamp' lvalue
|     |         |       `-ImplicitCastExpr 0x55bed246df40 <col:25, col:43> 'const Timestamp' <NoOp>
|     |         |         `-CallExpr 0x55bed246def0 <col:25, col:43> 'Timestamp'
|     |         |           `-ImplicitCastExpr 0x55bed246ded8 <col:25, col:36> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |         |             `-DeclRefExpr 0x55bed246de78 <col:25, col:36> 'Timestamp ()' lvalue CXXMethod 0x55bed249c920 'recent' 'Timestamp ()'
|     |         `-MaterializeTemporaryExpr 0x55bed246e0e0 <col:47, col:72> 'const Timestamp' lvalue
|     |           `-ImplicitCastExpr 0x55bed246e0c8 <col:47, col:72> 'const Timestamp' <NoOp>
|     |             `-CallExpr 0x55bed246e060 <col:47, col:72> 'Timestamp'
|     |               `-ImplicitCastExpr 0x55bed246e048 <col:47, col:58> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |                 `-DeclRefExpr 0x55bed246e018 <col:47, col:58> 'Timestamp ()' lvalue CXXMethod 0x55bed22f7e70 'recent_steady' 'Timestamp ()'
|     `-ReturnStmt 0x55bed246e248 <line:135:6, col:13>
|       `-CXXConstructExpr 0x55bed246e218 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|         `-MemberExpr 0x55bed246e1e8 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x55bed246c528
|           `-CXXThisExpr 0x55bed246e1d8 <col:13> 'const Timer *' implicit this
|-CXXMethodDecl 0x55bed246a608 <line:139:5, line:141:5> line:139:20 router 'Router *() const' inline
| `-CompoundStmt 0x55bed246e368 <col:35, line:141:5>
|   `-ReturnStmt 0x55bed246e358 <line:140:2, col:24>
|     `-CXXMemberCallExpr 0x55bed246e320 <col:9, col:24> 'Router *'
|       `-MemberExpr 0x55bed246e2f0 <col:9, col:17> '<bound member function type>' ->router 0x55bed24fb4b0
|         `-ImplicitCastExpr 0x55bed246e340 <col:9> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x55bed246e2d8 <col:9> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x55bed246e2a8 <col:9> 'Element *const' lvalue ->_owner 0x55bed246c848
|               `-CXXThisExpr 0x55bed246e298 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x55bed246a6c8 <line:144:5, line:146:5> line:144:21 element 'Element *() const' inline
| `-CompoundStmt 0x55bed246e3e8 <col:37, line:146:5>
|   `-ReturnStmt 0x55bed246e3d8 <line:145:2, col:9>
|     `-ImplicitCastExpr 0x55bed246e3c0 <col:9> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x55bed246e390 <col:9> 'Element *const' lvalue ->_owner 0x55bed246c848
|         `-CXXThisExpr 0x55bed246e380 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x55bed246a788 <line:149:5, line:151:5> line:149:26 thread 'RouterThread *() const' inline
| `-CompoundStmt 0x55bed246e468 <col:41, line:151:5>
|   `-ReturnStmt 0x55bed246e458 <line:150:2, col:9>
|     `-ImplicitCastExpr 0x55bed246e440 <col:9> 'RouterThread *' <LValueToRValue>
|       `-MemberExpr 0x55bed246e410 <col:9> 'RouterThread *const' lvalue ->_thread 0x55bed246c8a8
|         `-CXXThisExpr 0x55bed246e400 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x55bed246a850 <line:154:5, col:26> col:9 home_thread_id 'int () const'
|-CXXMethodDecl 0x55bed246aa48 <line:171:5, col:55> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x55bed246a900 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x55bed246a978 <col:37, col:50> col:42 quiet 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55bed246d188 <col:50> 'bool' false
|-CXXMethodDecl 0x55bed246abc8 <line:181:5, col:35> col:10 initialize 'void (Router *)'
| `-ParmVarDecl 0x55bed246ab08 <col:21, col:29> col:29 router 'Router *'
|-CXXMethodDecl 0x55bed246ad10 <line:191:5, col:57> col:10 used schedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x55bed246ac80 <col:29, col:46> col:46 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x55bed246ae58 <line:197:5, col:59> col:10 reschedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x55bed246adc8 <col:31, col:48> col:48 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x55bed246afa0 <line:210:5, col:50> col:17 used schedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55bed246af10 <col:29, col:46> col:46 when 'const Timestamp &'
|-CXXMethodDecl 0x55bed246b0e8 <line:216:5, col:52> col:17 reschedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55bed246b058 <col:31, col:48> col:48 when 'const Timestamp &'
|-CXXMethodDecl 0x55bed246b1b0 <line:221:5, line:223:5> line:221:17 schedule_now 'void ()' inline
| `-CompoundStmt 0x55bed246e5d0 <col:32, line:223:5>
|   `-ExprWithCleanups 0x55bed246e5b8 <line:222:2, col:47> 'void'
|     `-CXXMemberCallExpr 0x55bed246e560 <col:2, col:47> 'void'
|       |-MemberExpr 0x55bed246e490 <col:2> '<bound member function type>' ->schedule_at_steady 0x55bed246ad10
|       | `-CXXThisExpr 0x55bed246e480 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x55bed246e5a0 <col:21, col:46> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x55bed246e588 <col:21, col:46> 'const Timestamp' <NoOp>
|           `-CallExpr 0x55bed246e540 <col:21, col:46> 'Timestamp'
|             `-ImplicitCastExpr 0x55bed246e528 <col:21, col:32> 'Timestamp (*)()' <FunctionToPointerDecay>
|               `-DeclRefExpr 0x55bed246e4f8 <col:21, col:32> 'Timestamp ()' lvalue CXXMethod 0x55bed22f7e70 'recent_steady' 'Timestamp ()'
|-CXXMethodDecl 0x55bed246b2f0 <line:233:5, col:47> col:10 used schedule_after 'void (const Timestamp &)'
| `-ParmVarDecl 0x55bed246b260 <col:25, col:42> col:42 delta 'const Timestamp &'
|-CXXMethodDecl 0x55bed246b438 <line:239:5, line:241:5> line:239:17 used schedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x55bed246b3a8 <col:36, col:45> col:45 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55bed246e758 <col:56, line:241:5>
|   `-ExprWithCleanups 0x55bed246e740 <line:240:2, col:40> 'void'
|     `-CXXMemberCallExpr 0x55bed246e6e8 <col:2, col:40> 'void'
|       |-MemberExpr 0x55bed246e5f8 <col:2> '<bound member function type>' ->schedule_after 0x55bed246b2f0
|       | `-CXXThisExpr 0x55bed246e5e8 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x55bed246e728 <col:17, col:39> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x55bed246e710 <col:17, col:39> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x55bed246e6a8 <col:17, col:39> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-ImplicitCastExpr 0x55bed246e678 <col:27> 'uint32_t':'unsigned int' <LValueToRValue>
|             | `-DeclRefExpr 0x55bed246e638 <col:27> 'uint32_t':'unsigned int' lvalue ParmVar 0x55bed246b3a8 'delta_sec' 'uint32_t':'unsigned int'
|             `-ImplicitCastExpr 0x55bed246e690 <col:38> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x55bed246e658 <col:38> 'int' 0
|-CXXMethodDecl 0x55bed246b580 <line:247:5, line:249:5> line:247:17 used schedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x55bed246b4f0 <col:37, col:46> col:46 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55bed246e9c8 <col:58, line:249:5>
|   `-ExprWithCleanups 0x55bed246e9b0 <line:248:2, col:49> 'void'
|     `-CXXMemberCallExpr 0x55bed246e958 <col:2, col:49> 'void'
|       |-MemberExpr 0x55bed246e780 <col:2> '<bound member function type>' ->schedule_after 0x55bed246b2f0
|       | `-CXXThisExpr 0x55bed246e770 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x55bed246e998 <col:17, col:48> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x55bed246e980 <col:17, col:48> 'const Timestamp' <NoOp>
|           `-CallExpr 0x55bed246e900 <col:17, col:48> 'Timestamp'
|             |-ImplicitCastExpr 0x55bed246e8e8 <col:17, col:28> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x55bed246e858 <col:17, col:28> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x55bed247cc18 'make_msec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x55bed246e940 <col:38> 'Timestamp::value_type':'long' <IntegralCast>
|               `-ImplicitCastExpr 0x55bed246e928 <col:38> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55bed246e838 <col:38> 'uint32_t':'unsigned int' lvalue ParmVar 0x55bed246b4f0 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bed246b6c8 <line:259:5, line:261:5> line:259:17 reschedule_after 'void (const Timestamp &)' inline
| |-ParmVarDecl 0x55bed246b638 <col:34, col:51> col:51 used delta 'const Timestamp &'
| `-CompoundStmt 0x55bed246eba8 <col:58, line:261:5>
|   `-ExprWithCleanups 0x55bed246eb90 <line:260:2, col:38> 'void'
|     `-CXXMemberCallExpr 0x55bed246eb38 <col:2, col:38> 'void'
|       |-MemberExpr 0x55bed246e9f0 <col:2> '<bound member function type>' ->schedule_at_steady 0x55bed246ad10
|       | `-CXXThisExpr 0x55bed246e9e0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x55bed246eb78 <col:21, col:33> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x55bed246eb60 <col:21, col:33> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x55bed246eb00 <col:21, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x55bed246eae8 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x55bed246eac8 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55bed24a92c0 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x55bed246ea98 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x55bed246ea80 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x55bed246ea30 <col:21> 'Timestamp' lvalue ->_expiry_s 0x55bed246c528
|             |     `-CXXThisExpr 0x55bed246ea20 <col:21> 'Timer *' implicit this
|             `-DeclRefExpr 0x55bed246ea60 <col:33> 'const Timestamp' lvalue ParmVar 0x55bed246b638 'delta' 'const Timestamp &'
|-CXXMethodDecl 0x55bed246b810 <line:268:5, line:270:5> line:268:17 used reschedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x55bed246b780 <col:38, col:47> col:47 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55bed246ee80 <col:58, line:270:5>
|   `-ExprWithCleanups 0x55bed246ee68 <line:269:2, col:79> 'void'
|     `-CXXMemberCallExpr 0x55bed246ee10 <col:2, col:79> 'void'
|       |-MemberExpr 0x55bed246ebd0 <col:2> '<bound member function type>' ->schedule_at_steady 0x55bed246ad10
|       | `-CXXThisExpr 0x55bed246ebc0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x55bed246ee50 <col:21, col:78> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x55bed246ee38 <col:21, col:78> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x55bed246edd0 <col:21, col:78> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-BinaryOperator 0x55bed246ed08 <col:31, col:49> 'unsigned int' '+'
|             | |-ImplicitCastExpr 0x55bed246ecf0 <col:31, col:45> 'unsigned int' <IntegralCast>
|             | | `-CXXMemberCallExpr 0x55bed246ec80 <col:31, col:45> 'Timestamp::seconds_type':'int'
|             | |   `-MemberExpr 0x55bed246ec50 <col:31, col:41> '<bound member function type>' .sec 0x55bed22f9968
|             | |     `-ImplicitCastExpr 0x55bed246eca0 <col:31> 'const Timestamp' lvalue <NoOp>
|             | |       `-MemberExpr 0x55bed246ec20 <col:31> 'Timestamp' lvalue ->_expiry_s 0x55bed246c528
|             | |         `-CXXThisExpr 0x55bed246ec10 <col:31> 'Timer *' implicit this
|             | `-ImplicitCastExpr 0x55bed246ecd8 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|             |   `-DeclRefExpr 0x55bed246ecb8 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x55bed246b780 'delta_sec' 'uint32_t':'unsigned int'
|             `-CXXMemberCallExpr 0x55bed246ed98 <col:60, col:77> 'uint32_t':'unsigned int'
|               `-MemberExpr 0x55bed246ed68 <col:60, col:70> '<bound member function type>' .subsec 0x55bed22fa060
|                 `-ImplicitCastExpr 0x55bed246edb8 <col:60> 'const Timestamp' lvalue <NoOp>
|                   `-MemberExpr 0x55bed246ed38 <col:60> 'Timestamp' lvalue ->_expiry_s 0x55bed246c528
|                     `-CXXThisExpr 0x55bed246ed28 <col:60> 'Timer *' implicit this
|-CXXMethodDecl 0x55bed246b958 <line:277:5, line:279:5> line:277:17 used reschedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x55bed246b8c8 <col:39, col:48> col:48 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55bed246f1b8 <col:60, line:279:5>
|   `-ExprWithCleanups 0x55bed246f1a0 <line:278:2, col:65> 'void'
|     `-CXXMemberCallExpr 0x55bed246f148 <col:2, col:65> 'void'
|       |-MemberExpr 0x55bed246eea8 <col:2> '<bound member function type>' ->schedule_at_steady 0x55bed246ad10
|       | `-CXXThisExpr 0x55bed246ee98 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x55bed246f188 <col:21, col:64> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x55bed246f170 <col:21, col:64> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x55bed246f110 <col:21, col:64> 'Timestamp'
|             |-ImplicitCastExpr 0x55bed246f0f8 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x55bed246f0d8 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55bed24a92c0 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x55bed246f078 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x55bed246f060 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x55bed246eee8 <col:21> 'Timestamp' lvalue ->_expiry_s 0x55bed246c528
|             |     `-CXXThisExpr 0x55bed246eed8 <col:21> 'Timer *' implicit this
|             `-MaterializeTemporaryExpr 0x55bed246f0c0 <col:33, col:64> 'const Timestamp' lvalue
|               `-ImplicitCastExpr 0x55bed246f0a8 <col:33, col:64> 'const Timestamp' <NoOp>
|                 `-CallExpr 0x55bed246f008 <col:33, col:64> 'Timestamp'
|                   |-ImplicitCastExpr 0x55bed246eff0 <col:33, col:44> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|                   | `-DeclRefExpr 0x55bed246efc0 <col:33, col:44> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x55bed247cc18 'make_msec' 'Timestamp (Timestamp::value_type)'
|                   `-ImplicitCastExpr 0x55bed246f048 <col:54> 'Timestamp::value_type':'long' <IntegralCast>
|                     `-ImplicitCastExpr 0x55bed246f030 <col:54> 'uint32_t':'unsigned int' <LValueToRValue>
|                       `-DeclRefExpr 0x55bed246efa0 <col:54> 'uint32_t':'unsigned int' lvalue ParmVar 0x55bed246b8c8 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bed246ba20 <line:285:5, col:21> col:10 used unschedule 'void ()'
|-CXXMethodDecl 0x55bed246bae0 <line:288:5, line:291:5> line:288:17 clear 'void ()' inline
| `-CompoundStmt 0x55bed246f680 <col:25, line:291:5>
|   |-CXXMemberCallExpr 0x55bed246f210 <line:289:2, col:13> 'void'
|   | `-MemberExpr 0x55bed246f1e0 <col:2> '<bound member function type>' ->unschedule 0x55bed246ba20
|   |   `-CXXThisExpr 0x55bed246f1d0 <col:2> 'Timer *' implicit this
|   `-ExprWithCleanups 0x55bed246f668 <line:290:2, col:24> 'Timestamp' lvalue
|     `-CXXOperatorCallExpr 0x55bed246f630 <col:2, col:24> 'Timestamp' lvalue
|       |-ImplicitCastExpr 0x55bed246f618 <col:12> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55bed246f2c8 <col:12> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x55bed2190f08 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|       |-MemberExpr 0x55bed246f240 <col:2> 'Timestamp' lvalue ->_expiry_s 0x55bed246c528
|       | `-CXXThisExpr 0x55bed246f230 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x55bed246f2b0 <col:14, col:24> 'Timestamp' xvalue
|         `-CXXTemporaryObjectExpr 0x55bed246f280 <col:14, col:24> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x55bed246bba0 <line:304:5, line:310:5> line:304:29 adjustment 'Timestamp ()' static inline
| `-CompoundStmt 0x55bed246f9d8 <col:42, line:310:5>
|   |-IfStmt 0x55bed246f820 <line:306:2, line:307:23>
|   | |-CallExpr 0x55bed246f750 <line:306:6, col:30> 'bool'
|   | | `-ImplicitCastExpr 0x55bed246f738 <col:6, col:17> 'bool (*)()' <FunctionToPointerDecay>
|   | |   `-DeclRefExpr 0x55bed246f6d8 <col:6, col:17> 'bool ()' lvalue CXXMethod 0x55bed249ad90 'warp_jumping' 'bool ()'
|   | `-ReturnStmt 0x55bed246f810 <line:307:6, col:23>
|   |   `-ExprWithCleanups 0x55bed246f7f8 <col:13, col:23> 'Timestamp'
|   |     `-CXXConstructExpr 0x55bed246f7c8 <col:13, col:23> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55bed246f7b0 <col:13, col:23> 'Timestamp' xvalue
|   |         `-CXXTemporaryObjectExpr 0x55bed246f780 <col:13, col:23> 'Timestamp' 'void ()'
|   `-ReturnStmt 0x55bed246f9c8 <line:309:2, col:33>
|     `-ExprWithCleanups 0x55bed246f9b0 <col:9, col:33> 'Timestamp'
|       `-CXXConstructExpr 0x55bed246f980 <col:9, col:33> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55bed246f968 <col:9, col:33> 'Timestamp' xvalue
|           `-CallExpr 0x55bed246f928 <col:9, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x55bed246f910 <col:9, col:20> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x55bed246f8e0 <col:9, col:20> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x55bed247cf30 'make_usec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x55bed246f950 <col:30> 'Timestamp::value_type':'long' <IntegralCast>
|               `-IntegerLiteral 0x55bed246f8c0 <col:30> 'int' 500
|-CXXMethodDecl 0x55bed246bce0 <line:317:5, col:80> col:17 schedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x55bed246bc50 <col:34, col:43> col:43 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55bed246bd88 <col:69> "" ""
|-CXXMethodDecl 0x55bed246be98 <line:323:5, col:81> col:17 schedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x55bed246be08 <col:35, col:44> col:44 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55bed246bf40 <col:70> "" ""
|-CXXMethodDecl 0x55bed246c050 <line:329:5, col:82> col:17 reschedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x55bed246bfc0 <col:36, col:45> col:45 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55bed246c0f8 <col:71> "" ""
|-CXXMethodDecl 0x55bed246c208 <line:335:5, col:83> col:17 reschedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x55bed246c178 <col:37, col:46> col:46 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55bed246c2b0 <col:72> "" ""
|-EnumDecl 0x55bed246c320 <line:337:5, col:27> col:5
| `-EnumConstantDecl 0x55bed246c420 <col:12, col:25> col:12 behind_sec 'Timer::(anonymous enum at ../dummy_inc/click/timer.hh:337:5)'
|   `-ImplicitCastExpr 0x55bed246c470 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bed246c400 <col:25> 'int' Int: 1
|       `-IntegerLiteral 0x55bed246c3e0 <col:25> 'int' 1
|-AccessSpecDecl 0x55bed246c488 <line:339:3, col:10> col:3 private
|-FieldDecl 0x55bed246c4c8 <line:341:5, col:9> col:9 referenced _schedpos1 'int'
|-FieldDecl 0x55bed246c528 <line:342:5, col:15> col:15 referenced _expiry_s 'Timestamp'
|-CXXRecordDecl 0x55bed246c578 <line:343:5, line:345:5> line:343:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x55bed246c6a8 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
| `-CXXDestructorDecl 0x55bed246d198 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-FieldDecl 0x55bed246c768 <col:5, line:345:7> col:7 referenced _hook 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)'
|-FieldDecl 0x55bed246c7e8 <line:346:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x55bed246c848 <line:347:5, col:14> col:14 referenced _owner 'Element *'
|-FieldDecl 0x55bed246c8a8 <line:348:5, col:19> col:19 referenced _thread 'RouterThread *'
|-CXXMethodDecl 0x55bed246c9f8 <line:350:5, col:36> col:12 operator= 'Timer &(const Timer &)'
| `-ParmVarDecl 0x55bed246c908 <col:22, col:35> col:35 x 'const Timer &'
|-CXXMethodDecl 0x55bed246cbc8 <line:352:5, col:58> col:17 used do_nothing_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x55bed246cab0 <col:33, col:40> col:40 t 'Timer *'
| `-ParmVarDecl 0x55bed246cb30 <col:43, col:49> col:49 user_data 'void *'
|-CXXMethodDecl 0x55bed246cda0 <line:353:5, col:55> col:17 used element_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x55bed246cc88 <col:30, col:37> col:37 t 'Timer *'
| `-ParmVarDecl 0x55bed246cd08 <col:40, col:46> col:46 user_data 'void *'
|-CXXMethodDecl 0x55bed246cf78 <line:354:5, col:52> col:17 used task_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x55bed246ce60 <col:27, col:34> col:34 t 'Timer *'
| `-ParmVarDecl 0x55bed246cee0 <col:37, col:43> col:43 user_data 'void *'
`-FriendDecl 0x55bed246d148 <line:356:5, col:18> col:12 'class TimerSet':'TimerSet'

Layout: <CGRecordLayout
  LLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  NonVirtualBaseLLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed25d23d0 prev 0x55bed25a2f38 <../elements/ip/iprewriterbase.hh:81:1, line:182:1> line:81:7 referenced class IPRewriterBase definition
|-DefinitionData polymorphic abstract has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55bed25d2508 <col:1, col:7> col:7 implicit referenced class IPRewriterBase
|-AccessSpecDecl 0x55bed25d2598 <col:41, col:47> col:41 public
|-TypedefDecl 0x55bed25d26f0 <line:83:5, col:44> col:44 referenced Map 'HashContainer<IPRewriterEntry>':'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
| `-TemplateSpecializationType 0x55bed25d2650 'HashContainer<IPRewriterEntry>' sugar HashContainer
|   |-TemplateArgument type 'IPRewriterEntry'
|   `-RecordType 0x55bed25a1ab0 'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|     `-ClassTemplateSpecialization 0x55bed25a19b0 'HashContainer'
|-EnumDecl 0x55bed25d2748 <line:84:5, line:86:5> line:84:5
| |-EnumConstantDecl 0x55bed25d2868 <line:85:2, col:13> col:2 rw_drop 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:84:5)'
| | `-ConstantExpr 0x55bed25d2848 <col:12, col:13> 'int' Int: -1
| |   `-UnaryOperator 0x55bed25d2830 <col:12, col:13> 'int' prefix '-'
| |     `-IntegerLiteral 0x55bed25d2810 <col:13> 'int' 1
| `-EnumConstantDecl 0x55bed25d2910 <col:16, col:29> col:16 rw_addmap 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:84:5)'
|   `-ConstantExpr 0x55bed25d28f0 <col:28, col:29> 'int' Int: -2
|     `-UnaryOperator 0x55bed25d28d8 <col:28, col:29> 'int' prefix '-'
|       `-IntegerLiteral 0x55bed25d28b8 <col:29> 'int' 2
|-CXXConstructorDecl 0x55bed25d2998 <line:88:5, col:20> col:5 IPRewriterBase 'void ()'
|-CXXDestructorDecl 0x55bed25d2a88 <line:89:5, col:21> col:5 ~IPRewriterBase 'void ()' noexcept-unevaluated 0x55bed25d2a88
| `-Overrides: [ 0x55bed24e9408 Element::~Element 'void () noexcept' ]
|-EnumDecl 0x55bed25d2b70 <line:91:5, line:96:5> line:91:10 ConfigurePhase
| |-EnumConstantDecl 0x55bed25d2c70 <line:92:2, col:29> col:2 CONFIGURE_PHASE_PATTERNS 'IPRewriterBase::ConfigurePhase'
| | `-ImplicitCastExpr 0x55bed25d2f20 <col:29> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed25d2c50 <col:29> 'Element::ConfigurePhase' Int: 20
| |     `-DeclRefExpr 0x55bed25d2c30 <col:29> 'Element::ConfigurePhase' EnumConstant 0x55bed24eba20 'CONFIGURE_PHASE_INFO' 'Element::ConfigurePhase'
| |-EnumConstantDecl 0x55bed25d2d00 <line:93:2, col:29> col:2 referenced CONFIGURE_PHASE_REWRITER 'IPRewriterBase::ConfigurePhase'
| | `-ImplicitCastExpr 0x55bed25d2f38 <col:29> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed25d2ce0 <col:29> 'Element::ConfigurePhase' Int: 100
| |     `-DeclRefExpr 0x55bed25d2cc0 <col:29> 'Element::ConfigurePhase' EnumConstant 0x55bed24ebb40 'CONFIGURE_PHASE_DEFAULT' 'Element::ConfigurePhase'
| |-EnumConstantDecl 0x55bed25d2de8 <line:94:2, col:54> col:2 CONFIGURE_PHASE_MAPPER 'IPRewriterBase::ConfigurePhase'
| | `-ImplicitCastExpr 0x55bed25d2f50 <col:27, col:54> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed25d2dc8 <col:27, col:54> 'int' Int: 99
| |     `-BinaryOperator 0x55bed25d2da8 <col:27, col:54> 'int' '-'
| |       |-ImplicitCastExpr 0x55bed25d2d90 <col:27> 'int' <IntegralCast>
| |       | `-DeclRefExpr 0x55bed25d2d50 <col:27> 'Element::ConfigurePhase' EnumConstant 0x55bed25d2d00 'CONFIGURE_PHASE_REWRITER' 'IPRewriterBase::ConfigurePhase'
| |       `-IntegerLiteral 0x55bed25d2d70 <col:54> 'int' 1
| `-EnumConstantDecl 0x55bed25d2ed0 <line:95:2, col:52> col:2 CONFIGURE_PHASE_USER 'IPRewriterBase::ConfigurePhase'
|   `-ImplicitCastExpr 0x55bed25d2f68 <col:25, col:52> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bed25d2eb0 <col:25, col:52> 'int' Int: 101
|       `-BinaryOperator 0x55bed25d2e90 <col:25, col:52> 'int' '+'
|         |-ImplicitCastExpr 0x55bed25d2e78 <col:25> 'int' <IntegralCast>
|         | `-DeclRefExpr 0x55bed25d2e38 <col:25> 'Element::ConfigurePhase' EnumConstant 0x55bed25d2d00 'CONFIGURE_PHASE_REWRITER' 'IPRewriterBase::ConfigurePhase'
|         `-IntegerLiteral 0x55bed25d2e58 <col:52> 'int' 1
|-CXXMethodDecl 0x55bed25d2fd0 <line:98:5, col:54> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x55bed24ea930 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55bed25edc90 <col:36, col:54>
|   `-ReturnStmt 0x55bed25edc80 <col:38, col:45>
|     `-ImplicitCastExpr 0x55bed25edc68 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55bed25edc48 <col:45> 'const char [6]' lvalue "1-/1-"
|-CXXMethodDecl 0x55bed25d3098 <line:99:5, col:51> col:17 processing 'const char *() const'
| |-Overrides: [ 0x55bed24eacf8 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x55bed25edcf0 <col:36, col:51>
|   `-ReturnStmt 0x55bed25edce0 <col:38, col:45>
|     `-ImplicitCastExpr 0x55bed25edcc8 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55bed25edca8 <col:45> 'const char []' lvalue Var 0x55bed24eae40 'PUSH' 'const char []'
|-CXXMethodDecl 0x55bed25d3160 <line:101:5, col:68> col:9 configure_phase 'int () const'
| |-Overrides: [ 0x55bed24ebcc0 Element::configure_phase 'int () const' ]
| `-CompoundStmt 0x55bed25edd50 <col:33, col:68>
|   `-ReturnStmt 0x55bed25edd40 <col:35, col:42>
|     `-ImplicitCastExpr 0x55bed25edd28 <col:42> 'int' <IntegralCast>
|       `-DeclRefExpr 0x55bed25edd08 <col:42> 'IPRewriterBase::ConfigurePhase' EnumConstant 0x55bed25d2d00 'CONFIGURE_PHASE_REWRITER' 'IPRewriterBase::ConfigurePhase'
|-CXXMethodDecl 0x55bed25d3430 <line:102:5, col:59> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55bed24ec100 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55bed25d32e0 <col:19, col:35> col:35 conf 'Vector<String> &'
| `-ParmVarDecl 0x55bed25d3358 <col:41, col:55> col:55 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55bed25d3588 <line:103:5, col:38> col:9 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x55bed24ec350 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x55bed25d34f0 <col:20, col:34> col:34 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55bed25d36d0 <line:104:5, col:54> col:10 add_rewriter_handlers 'void (bool)'
| `-ParmVarDecl 0x55bed25d3640 <col:32, col:37> col:37 writable_patterns 'bool'
|-CXXMethodDecl 0x55bed25d3818 <line:105:5, col:30> col:10 cleanup 'void (Element::CleanupStage)'
| |-Overrides: [ 0x55bed24ecb68 Element::cleanup 'void (Element::CleanupStage)' ]
| `-ParmVarDecl 0x55bed25d3788 <col:18> col:30 'Element::CleanupStage'
|-CXXMethodDecl 0x55bed25d3908 <line:107:5, line:109:5> line:107:27 flow_heap 'const IPRewriterHeap *() const'
| `-CompoundStmt 0x55bed25edde8 <col:45, line:109:5>
|   `-ReturnStmt 0x55bed25eddd8 <line:108:2, col:9>
|     `-ImplicitCastExpr 0x55bed25eddc0 <col:9> 'const IPRewriterHeap *' <NoOp>
|       `-ImplicitCastExpr 0x55bed25edda8 <col:9> 'IPRewriterHeap *' <LValueToRValue>
|         `-MemberExpr 0x55bed25edd78 <col:9> 'IPRewriterHeap *const' lvalue ->_heap 0x55bed25e85e0
|           `-CXXThisExpr 0x55bed25edd68 <col:9> 'const IPRewriterBase *' implicit this
|-CXXMethodDecl 0x55bed25d3a88 <line:110:5, line:112:5> line:110:21 reply_element 'IPRewriterBase *(int) const'
| |-ParmVarDecl 0x55bed25d39c0 <col:35, col:39> col:39 used input 'int'
| `-CompoundStmt 0x55bed25edfc0 <col:52, line:112:5>
|   `-ReturnStmt 0x55bed25edfb0 <line:111:2, col:29>
|     `-ImplicitCastExpr 0x55bed25edf98 <col:9, col:29> 'IPRewriterBase *' <LValueToRValue>
|       `-MemberExpr 0x55bed25edf68 <col:9, col:29> 'IPRewriterBase *const' lvalue .reply_element 0x55bed25beb10
|         `-CXXOperatorCallExpr 0x55bed25edf30 <col:9, col:27> 'const IPRewriterInput':'const IPRewriterInput' lvalue
|           |-ImplicitCastExpr 0x55bed25edf18 <col:21, col:27> 'const IPRewriterInput &(*)(Vector::size_type) const' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x55bed25edea0 <col:21, col:27> 'const IPRewriterInput &(Vector::size_type) const' lvalue CXXMethod 0x55bed25e5ee8 'operator[]' 'const IPRewriterInput &(Vector::size_type) const'
|           |-MemberExpr 0x55bed25ede10 <col:9> 'const Vector<IPRewriterInput>':'const Vector<IPRewriterInput>' lvalue ->_input_specs 0x55bed25e8580
|           | `-CXXThisExpr 0x55bed25ede00 <col:9> 'const IPRewriterBase *' implicit this
|           `-ImplicitCastExpr 0x55bed25ede88 <col:22> 'int' <LValueToRValue>
|             `-DeclRefExpr 0x55bed25ede40 <col:22> 'int' lvalue ParmVar 0x55bed25d39c0 'input' 'int'
|-CXXMethodDecl 0x55bed25d3dc0 <line:113:5, line:115:5> line:113:45 get_map 'HashContainer<IPRewriterEntry> *(int)' virtual
| |-ParmVarDecl 0x55bed25d3c48 <col:53, col:57> col:57 used mapid 'int'
| `-CompoundStmt 0x55bed25ee330 <col:64, line:115:5>
|   `-ReturnStmt 0x55bed25ee320 <line:114:2, col:84>
|     `-ConditionalOperator 0x55bed25ee2f0 <col:9, col:84> 'IPRewriterBase::Map *'
|       |-ImplicitCastExpr 0x55bed25ee2c0 <col:9, col:72> 'bool' <IntegralToBoolean>
|       | `-CallExpr 0x55bed25ee1e8 <col:9, col:72> 'long'
|       |   |-ImplicitCastExpr 0x55bed25ee1d0 <col:9> 'long (*)(long, long) noexcept' <BuiltinFnToFnPtr>
|       |   | `-DeclRefExpr 0x55bed25edfd8 <col:9> '<builtin fn type>' Function 0x55bed22a0988 '__builtin_expect' 'long (long, long) noexcept'
|       |   |-ImplicitCastExpr 0x55bed25ee218 <col:26, col:68> 'long' <IntegralCast>
|       |   | `-UnaryOperator 0x55bed25ee198 <col:26, col:68> 'bool' prefix '!' cannot overflow
|       |   |   `-UnaryOperator 0x55bed25ee180 <col:27, col:68> 'bool' prefix '!' cannot overflow
|       |   |     `-ParenExpr 0x55bed25ee160 <col:28, col:68> 'bool'
|       |   |       `-BinaryOperator 0x55bed25ee140 <col:29, col:55> 'bool' '=='
|       |   |         |-ImplicitCastExpr 0x55bed25ee110 <col:29> 'int' <LValueToRValue>
|       |   |         | `-DeclRefExpr 0x55bed25edff8 <col:29> 'int' lvalue ParmVar 0x55bed25d3c48 'mapid' 'int'
|       |   |         `-ImplicitCastExpr 0x55bed25ee128 <col:38, col:55> 'int' <IntegralCast>
|       |   |           `-DeclRefExpr 0x55bed25ee050 <col:38, col:55> 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:33:5)' EnumConstant 0x55bed25bf150 'mapid_default' 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:33:5)'
|       |   `-ImplicitCastExpr 0x55bed25ee230 <col:71> 'long' <IntegralCast>
|       |     `-IntegerLiteral 0x55bed25ee1b0 <col:71> 'int' 1
|       |-UnaryOperator 0x55bed25ee288 <col:76, col:77> 'IPRewriterBase::Map *' prefix '&' cannot overflow
|       | `-MemberExpr 0x55bed25ee258 <col:77> 'IPRewriterBase::Map':'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >' lvalue ->_map 0x55bed25dc258
|       |   `-CXXThisExpr 0x55bed25ee248 <col:77> 'IPRewriterBase *' implicit this
|       `-ImplicitCastExpr 0x55bed25ee2d8 <col:84> 'IPRewriterBase::Map *' <NullToPointer>
|         `-IntegerLiteral 0x55bed25ee2a0 <col:84> 'int' 0
|-EnumDecl 0x55bed25d3e68 <line:117:5, line:119:5> line:117:5
| |-EnumConstantDecl 0x55bed25d3f88 <line:118:2, col:21> col:2 get_entry_check 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:117:5)'
| | `-ConstantExpr 0x55bed25d3f68 <col:20, col:21> 'int' Int: -1
| |   `-UnaryOperator 0x55bed25d3f50 <col:20, col:21> 'int' prefix '-'
| |     `-IntegerLiteral 0x55bed25d3f30 <col:21> 'int' 1
| `-EnumConstantDecl 0x55bed25d4030 <col:24, col:43> col:24 get_entry_reply 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:117:5)'
|   `-ConstantExpr 0x55bed25d4010 <col:42, col:43> 'int' Int: -2
|     `-UnaryOperator 0x55bed25d3ff8 <col:42, col:43> 'int' prefix '-'
|       `-IntegerLiteral 0x55bed25d3fd8 <col:43> 'int' 2
|-CXXMethodDecl 0x55bed25d4278 <line:120:5, line:121:21> line:120:30 get_entry 'IPRewriterEntry *(int, const IPFlowID &, int)' virtual
| |-ParmVarDecl 0x55bed25d4098 <col:40, col:44> col:44 ip_p 'int'
| |-ParmVarDecl 0x55bed25d4110 <col:50, col:66> col:66 flowid 'const IPFlowID &'
| `-ParmVarDecl 0x55bed25d4190 <line:121:12, col:16> col:16 input 'int'
|-CXXMethodDecl 0x55bed25d45a8 <line:122:5, line:124:24> line:122:30 add_flow 'IPRewriterEntry *(int, const IPFlowID &, const IPFlowID &, int)' virtual pure
| |-ParmVarDecl 0x55bed25d4348 <col:39, col:43> col:43 ip_p 'int'
| |-ParmVarDecl 0x55bed25d43c0 <col:49, col:65> col:65 flowid 'const IPFlowID &'
| |-ParmVarDecl 0x55bed25d4438 <line:123:11, col:27> col:27 rewritten_flowid 'const IPFlowID &'
| `-ParmVarDecl 0x55bed25d44b8 <line:124:11, col:15> col:15 input 'int'
|-CXXMethodDecl 0x55bed25d4708 <line:125:5, col:55> col:18 destroy_flow 'void (IPRewriterFlow *)' virtual pure
| `-ParmVarDecl 0x55bed25d4678 <col:31, col:47> col:47 flow 'IPRewriterFlow *'
|-CXXMethodDecl 0x55bed25d48b8 <line:126:5, line:128:5> line:126:29 best_effort_expiry 'click_jiffies_t (const IPRewriterFlow *)' virtual
| |-ParmVarDecl 0x55bed25d47c0 <col:48, col:70> col:70 used flow 'const IPRewriterFlow *'
| `-CompoundStmt 0x55bed25ee580 <col:76, line:128:5>
|   `-ReturnStmt 0x55bed25ee570 <line:127:2, col:52>
|     `-BinaryOperator 0x55bed25ee550 <col:9, col:52> 'unsigned int' '-'
|       |-BinaryOperator 0x55bed25ee480 <col:9, col:37> 'unsigned int' '+'
|       | |-CXXMemberCallExpr 0x55bed25ee3b0 <col:9, col:22> 'click_jiffies_t':'unsigned int'
|       | | `-MemberExpr 0x55bed25ee380 <col:9, col:15> '<bound member function type>' ->expiry 0x55bed25a6470
|       | |   `-ImplicitCastExpr 0x55bed25ee368 <col:9> 'const IPRewriterFlow *' <LValueToRValue>
|       | |     `-DeclRefExpr 0x55bed25ee348 <col:9> 'const IPRewriterFlow *' lvalue ParmVar 0x55bed25d47c0 'flow' 'const IPRewriterFlow *'
|       | `-ImplicitCastExpr 0x55bed25ee468 <col:26, col:37> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   `-ArraySubscriptExpr 0x55bed25ee448 <col:26, col:37> 'uint32_t':'unsigned int' lvalue
|       |     |-ImplicitCastExpr 0x55bed25ee430 <col:26> 'uint32_t *' <ArrayToPointerDecay>
|       |     | `-MemberExpr 0x55bed25ee3e0 <col:26> 'uint32_t [2]' lvalue ->_timeouts 0x55bed25e86c8
|       |     |   `-CXXThisExpr 0x55bed25ee3d0 <col:26> 'IPRewriterBase *' implicit this
|       |     `-IntegerLiteral 0x55bed25ee410 <col:36> 'int' 0
|       `-ImplicitCastExpr 0x55bed25ee538 <col:41, col:52> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-ArraySubscriptExpr 0x55bed25ee518 <col:41, col:52> 'uint32_t':'unsigned int' lvalue
|           |-ImplicitCastExpr 0x55bed25ee500 <col:41> 'uint32_t *' <ArrayToPointerDecay>
|           | `-MemberExpr 0x55bed25ee4b0 <col:41> 'uint32_t [2]' lvalue ->_timeouts 0x55bed25e86c8
|           |   `-CXXThisExpr 0x55bed25ee4a0 <col:41> 'IPRewriterBase *' implicit this
|           `-IntegerLiteral 0x55bed25ee4e0 <col:51> 'int' 1
|-CXXMethodDecl 0x55bed25d4a98 <line:130:5, col:43> col:9 llrpc 'int (unsigned int, void *)'
| |-Overrides: [ 0x55bed24f5e80 Element::llrpc 'int (unsigned int, void *)' ]
| |-ParmVarDecl 0x55bed25d4978 <col:15, col:24> col:24 command 'unsigned int'
| `-ParmVarDecl 0x55bed25d49f8 <col:33, col:39> col:39 data 'void *'
|-AccessSpecDecl 0x55bed25d4b48 <line:132:3, col:12> col:3 protected
|-FieldDecl 0x55bed25dc258 <line:134:5, col:9> col:9 referenced _map 'IPRewriterBase::Map':'HashContainer<IPRewriterEntry, HashContainer_adapter<IPRewriterEntry> >'
|-FieldDecl 0x55bed25e8580 <line:136:5, col:29> col:29 referenced _input_specs 'Vector<IPRewriterInput>':'Vector<IPRewriterInput>'
|-FieldDecl 0x55bed25e85e0 <line:138:5, col:21> col:21 referenced _heap 'IPRewriterHeap *'
|-FieldDecl 0x55bed25e86c8 <line:139:5, col:25> col:14 referenced _timeouts 'uint32_t [2]'
|-FieldDecl 0x55bed25e8728 <line:140:5, col:14> col:14 _gc_interval_sec 'uint32_t':'unsigned int'
|-FieldDecl 0x55bed25e8788 <line:141:5, col:11> col:11 _gc_timer 'Timer'
|-EnumDecl 0x55bed25e87d8 <line:143:5, line:147:5> line:143:5
| |-EnumConstantDecl 0x55bed25e88e0 <line:144:2, col:20> col:2 default_timeout 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:143:5)'
| | `-ImplicitCastExpr 0x55bed25e8a90 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed25e88c0 <col:20> 'int' Int: 300
| |     `-IntegerLiteral 0x55bed25e88a0 <col:20> 'int' 300
| |-EnumConstantDecl 0x55bed25e8970 <line:145:2, col:22> col:2 default_guarantee 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:143:5)'
| | `-ImplicitCastExpr 0x55bed25e8aa8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed25e8950 <col:22> 'int' Int: 5
| |     `-IntegerLiteral 0x55bed25e8930 <col:22> 'int' 5
| `-EnumConstantDecl 0x55bed25e8a40 <line:146:2, col:29> col:2 default_gc_interval 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:143:5)'
|   `-ImplicitCastExpr 0x55bed25e8ac0 <col:24, col:29> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bed25e8a20 <col:24, col:29> 'int' Int: 900
|       `-BinaryOperator 0x55bed25e8a00 <col:24, col:29> 'int' '*'
|         |-IntegerLiteral 0x55bed25e89c0 <col:24> 'int' 60
|         `-IntegerLiteral 0x55bed25e89e0 <col:29> 'int' 15
|-CXXMethodDecl 0x55bed25e8c28 <line:149:5, line:151:5> line:149:21 relevant_timeout 'uint32_t (const uint32_t *)' static
| |-ParmVarDecl 0x55bed25e8b38 <col:38, col:63> col:53 used timeouts 'const uint32_t *':'const uint32_t *'
| `-CompoundStmt 0x55bed25ee788 <col:66, line:151:5>
|   `-ReturnStmt 0x55bed25ee778 <line:150:2, col:47>
|     `-ImplicitCastExpr 0x55bed25ee760 <col:9, col:47> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-ConditionalOperator 0x55bed25ee730 <col:9, col:47> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55bed25ee718 <col:9, col:19> 'bool' <IntegralToBoolean>
|         | `-ImplicitCastExpr 0x55bed25ee700 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55bed25ee5f0 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|         |     |-ImplicitCastExpr 0x55bed25ee5d8 <col:9> 'const uint32_t *':'const uint32_t *' <LValueToRValue>
|         |     | `-DeclRefExpr 0x55bed25ee598 <col:9> 'const uint32_t *':'const uint32_t *' lvalue ParmVar 0x55bed25e8b38 'timeouts' 'const uint32_t *':'const uint32_t *'
|         |     `-IntegerLiteral 0x55bed25ee5b8 <col:18> 'int' 1
|         |-ArraySubscriptExpr 0x55bed25ee668 <col:23, col:33> 'const uint32_t':'const unsigned int' lvalue
|         | |-ImplicitCastExpr 0x55bed25ee650 <col:23> 'const uint32_t *':'const uint32_t *' <LValueToRValue>
|         | | `-DeclRefExpr 0x55bed25ee610 <col:23> 'const uint32_t *':'const uint32_t *' lvalue ParmVar 0x55bed25e8b38 'timeouts' 'const uint32_t *':'const uint32_t *'
|         | `-IntegerLiteral 0x55bed25ee630 <col:32> 'int' 1
|         `-ArraySubscriptExpr 0x55bed25ee6e0 <col:37, col:47> 'const uint32_t':'const unsigned int' lvalue
|           |-ImplicitCastExpr 0x55bed25ee6c8 <col:37> 'const uint32_t *':'const uint32_t *' <LValueToRValue>
|           | `-DeclRefExpr 0x55bed25ee688 <col:37> 'const uint32_t *':'const uint32_t *' lvalue ParmVar 0x55bed25e8b38 'timeouts' 'const uint32_t *':'const uint32_t *'
|           `-IntegerLiteral 0x55bed25ee6a8 <col:46> 'int' 0
|-CXXMethodDecl 0x55bed25e8fe8 <line:153:5, line:154:37> line:153:22 store_flow 'IPRewriterEntry *(IPRewriterFlow *, int, IPRewriterBase::Map &, IPRewriterBase::Map *)'
| |-ParmVarDecl 0x55bed25e8ce0 <col:33, col:49> col:49 flow 'IPRewriterFlow *'
| |-ParmVarDecl 0x55bed25e8d60 <col:55, col:59> col:59 input 'int'
| |-ParmVarDecl 0x55bed25e8e08 <line:154:5, col:10> col:10 map 'IPRewriterBase::Map &'
| `-ParmVarDecl 0x55bed25e8ea8 <col:15, col:36> col:20 reply_map_ptr 'IPRewriterBase::Map *' cinit
|   `-ImplicitCastExpr 0x55bed25edbf8 <col:36> 'IPRewriterBase::Map *' <NullToPointer>
|     `-IntegerLiteral 0x55bed25edbd8 <col:36> 'int' 0
|-CXXMethodDecl 0x55bed25e92c8 <line:155:5, line:156:39> line:155:17 unmap_flow 'void (IPRewriterFlow *, IPRewriterBase::Map &, IPRewriterBase::Map *)' inline
| |-ParmVarDecl 0x55bed25e90b8 <col:28, col:44> col:44 flow 'IPRewriterFlow *'
| |-ParmVarDecl 0x55bed25e9130 <line:156:7, col:12> col:12 map 'IPRewriterBase::Map &'
| `-ParmVarDecl 0x55bed25e91a8 <col:17, col:38> col:22 reply_map_ptr 'IPRewriterBase::Map *' cinit
|   `-ImplicitCastExpr 0x55bed25edc30 <col:38> 'IPRewriterBase::Map *' <NullToPointer>
|     `-IntegerLiteral 0x55bed25edc10 <col:38> 'int' 0
|-CXXMethodDecl 0x55bed25e94a8 <line:158:5, col:56> col:17 gc_timer_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x55bed25e9390 <col:31, col:38> col:38 t 'Timer *'
| `-ParmVarDecl 0x55bed25e9410 <col:41, col:47> col:47 user_data 'void *'
|-CXXMethodDecl 0x55bed25e97d0 <line:160:5, line:161:41> line:160:9 parse_input_spec 'int (const String &, IPRewriterInput &, int, ErrorHandler *)'
| |-ParmVarDecl 0x55bed25e9568 <col:26, col:40> col:40 str 'const String &'
| |-ParmVarDecl 0x55bed25e95e0 <col:45, col:62> col:62 is 'IPRewriterInput &'
| |-ParmVarDecl 0x55bed25e9660 <line:161:5, col:9> col:9 input_number 'int'
| `-ParmVarDecl 0x55bed25e96d8 <col:23, col:37> col:37 errh 'ErrorHandler *'
|-EnumDecl 0x55bed25e9890 <line:163:5, line:166:5> line:163:5
| |-EnumConstantDecl 0x55bed25e99a8 <line:164:2, col:17> col:2 h_nmappings 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:163:5)'
| | `-ConstantExpr 0x55bed25e9988 <col:16, col:17> 'int' Int: -1
| |   `-UnaryOperator 0x55bed25e9970 <col:16, col:17> 'int' prefix '-'
| |     `-IntegerLiteral 0x55bed25e9950 <col:17> 'int' 1
| |-EnumConstantDecl 0x55bed25e9a50 <col:20, col:42> col:20 h_mapping_failures 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:163:5)'
| | `-ConstantExpr 0x55bed25e9a30 <col:41, col:42> 'int' Int: -2
| |   `-UnaryOperator 0x55bed25e9a18 <col:41, col:42> 'int' prefix '-'
| |     `-IntegerLiteral 0x55bed25e99f8 <col:42> 'int' 2
| |-EnumConstantDecl 0x55bed25e9af8 <col:45, col:59> col:45 h_patterns 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:163:5)'
| | `-ConstantExpr 0x55bed25e9ad8 <col:58, col:59> 'int' Int: -3
| |   `-UnaryOperator 0x55bed25e9ac0 <col:58, col:59> 'int' prefix '-'
| |     `-IntegerLiteral 0x55bed25e9aa0 <col:59> 'int' 3
| |-EnumConstantDecl 0x55bed25e9ba0 <line:165:2, col:12> col:2 h_size 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:163:5)'
| | `-ConstantExpr 0x55bed25e9b80 <col:11, col:12> 'int' Int: -4
| |   `-UnaryOperator 0x55bed25e9b68 <col:11, col:12> 'int' prefix '-'
| |     `-IntegerLiteral 0x55bed25e9b48 <col:12> 'int' 4
| |-EnumConstantDecl 0x55bed25e9c48 <col:15, col:29> col:15 h_capacity 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:163:5)'
| | `-ConstantExpr 0x55bed25e9c28 <col:28, col:29> 'int' Int: -5
| |   `-UnaryOperator 0x55bed25e9c10 <col:28, col:29> 'int' prefix '-'
| |     `-IntegerLiteral 0x55bed25e9bf0 <col:29> 'int' 5
| `-EnumConstantDecl 0x55bed25e9cf0 <col:32, col:43> col:32 h_clear 'IPRewriterBase::(anonymous enum at ../elements/ip/iprewriterbase.hh:163:5)'
|   `-ConstantExpr 0x55bed25e9cd0 <col:42, col:43> 'int' Int: -6
|     `-UnaryOperator 0x55bed25e9cb8 <col:42, col:43> 'int' prefix '-'
|       `-IntegerLiteral 0x55bed25e9c98 <col:43> 'int' 6
|-CXXMethodDecl 0x55bed25e9e68 <line:167:5, col:59> col:19 read_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55bed25e9d50 <col:32, col:41> col:41 e 'Element *'
| `-ParmVarDecl 0x55bed25e9dd0 <col:44, col:50> col:50 user_data 'void *'
|-CXXMethodDecl 0x55bed25ea148 <line:168:5, col:96> col:16 write_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55bed25e9f28 <col:30, col:44> col:44 str 'const String &'
| |-ParmVarDecl 0x55bed25e9fa0 <col:49, col:58> col:58 e 'Element *'
| |-ParmVarDecl 0x55bed25ea020 <col:61, col:67> col:67 user_data 'void *'
| `-ParmVarDecl 0x55bed25ea098 <col:78, col:92> col:92 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55bed25ea438 <line:169:5, col:104> col:16 pattern_write_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55bed25ea218 <col:38, col:52> col:52 str 'const String &'
| |-ParmVarDecl 0x55bed25ea290 <col:57, col:66> col:66 e 'Element *'
| |-ParmVarDecl 0x55bed25ea310 <col:69, col:75> col:75 user_data 'void *'
| `-ParmVarDecl 0x55bed25ea388 <col:86, col:100> col:100 errh 'ErrorHandler *'
|-FriendDecl 0x55bed25ea8d8 <line:171:5, line:172:52> line:171:33
| `-CXXMethodDecl 0x55bed25ea748 parent 0x55bed25be540 prev 0x55bed25bf4e0 <col:5, line:172:52> line:171:33 rewrite_flowid 'int (const IPFlowID &, IPFlowID &, Packet *, int)'
|   |-ParmVarDecl 0x55bed25ea528 <col:48, col:64> col:64 flowid 'const IPFlowID &'
|   |-ParmVarDecl 0x55bed25ea5a0 <line:172:4, col:14> col:14 rewritten_flowid 'IPFlowID &'
|   |-ParmVarDecl 0x55bed25ea618 <col:32, col:40> col:40 p 'Packet *'
|   |-ParmVarDecl 0x55bed25ea698 <col:43, col:47> col:47 mapid 'int' cinit
|   | `-ImplicitCastExpr 0x55bed25bf658 <line:39:33> 'int' <IntegralCast>
|   |   `-DeclRefExpr 0x55bed25bf638 <col:33> 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:33:5)' EnumConstant 0x55bed25bf150 'mapid_default' 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:33:5)'
|   |-NoInlineAttr 0x55bed25ea888 <line:37:20> Inherited
|   `-OptimizeNoneAttr 0x55bed25ea8b0 <col:30> Inherited
|-AccessSpecDecl 0x55bed25ea918 <line:174:3, col:10> col:3 private
|-CXXMethodDecl 0x55bed25eaa18 <line:176:5, col:54> col:10 shift_heap_best_effort 'void (click_jiffies_t)'
| `-ParmVarDecl 0x55bed25ea950 <col:33, col:49> col:49 now_j 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x55bed25eac58 <line:177:5, col:78> col:10 shrink_heap_for_new_flow 'bool (IPRewriterFlow *, click_jiffies_t)'
| |-ParmVarDecl 0x55bed25eaad0 <col:35, col:51> col:51 flow 'IPRewriterFlow *'
| `-ParmVarDecl 0x55bed25eab48 <col:57, col:73> col:73 now_j 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x55bed25eada8 <line:178:5, col:36> col:10 shrink_heap 'void (bool)'
| `-ParmVarDecl 0x55bed25ead18 <col:22, col:27> col:27 clear_all 'bool'
|-FriendDecl 0x55bed25eae70 <line:180:5, col:18> col:12 'class IPRewriterFlow':'IPRewriterFlow'
|-CXXConstructorDecl 0x55bed25eaed8 <line:81:7> col:7 implicit IPRewriterBase 'void (const IPRewriterBase &)' inline default_delete noexcept-unevaluated 0x55bed25eaed8
| `-ParmVarDecl 0x55bed25eafe8 <col:7> col:7 'const IPRewriterBase &'
`-CXXMethodDecl 0x55bed25eb088 <col:7> col:7 implicit operator= 'IPRewriterBase &(const IPRewriterBase &)' inline default_delete noexcept-unevaluated 0x55bed25eb088
  `-ParmVarDecl 0x55bed25edb68 <col:7> col:7 'const IPRewriterBase &'

Layout: <CGRecordLayout
  LLVMType:%class.IPRewriterBase = type { %class.Element.base, %class.HashContainer, %class.Vector.5, %class.IPRewriterHeap*, [2 x i32], i32, %class.Timer }
  NonVirtualBaseLLVMType:%class.IPRewriterBase = type { %class.Element.base, %class.HashContainer, %class.Vector.5, %class.IPRewriterHeap*, [2 x i32], i32, %class.Timer }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed25fa550 <../elements/icmp/icmprewriter.hh:76:5, line:80:5> line:76:12 referenced struct MapEntry definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bed25fa668 <col:5, col:12> col:12 implicit referenced struct MapEntry
|-CXXConstructorDecl 0x55bed25fa898 <line:77:2, col:67> col:2 used MapEntry 'void (IPRewriterBase *, int)'
| |-ParmVarDecl 0x55bed25fa708 <col:11, col:27> col:27 used e 'IPRewriterBase *'
| |-ParmVarDecl 0x55bed25fa788 <col:30, col:34> col:34 used po 'int'
| |-CXXCtorInitializer Field 0x55bed25fa960 '_elt' 'IPRewriterBase *'
| | `-ImplicitCastExpr 0x55bed2607468 <col:45> 'IPRewriterBase *' <LValueToRValue>
| |   `-DeclRefExpr 0x55bed2607428 <col:45> 'IPRewriterBase *' lvalue ParmVar 0x55bed25fa708 'e' 'IPRewriterBase *'
| |-CXXCtorInitializer Field 0x55bed25fa9c8 '_port_offset' 'int'
| | `-ImplicitCastExpr 0x55bed26074e8 <col:62> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55bed26074a8 <col:62> 'int' lvalue ParmVar 0x55bed25fa788 'po' 'int'
| `-CompoundStmt 0x55bed2607538 <col:66, col:67>
|-FieldDecl 0x55bed25fa960 <line:78:2, col:18> col:18 _elt 'IPRewriterBase *'
|-FieldDecl 0x55bed25fa9c8 <line:79:2, col:6> col:6 _port_offset 'int'
|-CXXConstructorDecl 0x55bed2701c80 <line:76:12> col:12 implicit constexpr MapEntry 'void (const ICMPRewriter::MapEntry &)' inline default trivial noexcept-unevaluated 0x55bed2701c80
| `-ParmVarDecl 0x55bed2701d68 <col:12> col:12 'const ICMPRewriter::MapEntry &'
|-CXXConstructorDecl 0x55bed2701dd8 <col:12> col:12 implicit constexpr MapEntry 'void (ICMPRewriter::MapEntry &&)' inline default trivial noexcept-unevaluated 0x55bed2701dd8
| `-ParmVarDecl 0x55bed2701ee8 <col:12> col:12 'ICMPRewriter::MapEntry &&'
`-CXXDestructorDecl 0x55bed2701fc8 <col:12> col:12 implicit referenced ~MapEntry 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.ICMPRewriter::MapEntry" = type <{ %class.IPRewriterBase*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"struct.ICMPRewriter::MapEntry.base" = type <{ %class.IPRewriterBase*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_icmp
         0 |   uint8_t icmp_type
         1 |   uint8_t icmp_code
         2 |   uint16_t icmp_cksum
         4 |   uint32_t padding
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct click_ip
     0:0-3 |   unsigned int ip_hl
     0:4-7 |   unsigned int ip_v
         1 |   uint8_t ip_tos
         2 |   uint16_t ip_len
         4 |   uint16_t ip_id
         6 |   uint16_t ip_off
         8 |   uint8_t ip_ttl
         9 |   uint8_t ip_p
        10 |   uint16_t ip_sum
        12 |   struct in_addr ip_src
        12 |     in_addr_t s_addr
        16 |   struct in_addr ip_dst
        16 |     in_addr_t s_addr
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed22a7be0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bed22a7cf8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55bed22a7d88 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55bed22a7e58 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55bed22a7f40 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55bed22a8158 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55bed22a8000 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bed22a8308 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55bed22a8210 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55bed22a8450 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55bed22a83c0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55bed22a8598 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55bed22a8508 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bed22a86e0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55bed22a8650 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bed22a87a8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55bed22a88f0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55bed22a8860 <col:28> col:31 'int'
|-CXXMethodDecl 0x55bed22a89b8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55bed22a8b00 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55bed22a8a70 <col:28> col:31 'int'
|-CXXMethodDecl 0x55bed22a8c78 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55bed22a8bb8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bed22a8dc0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55bed22a8d30 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bed22a8e88 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55bed22a9048 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55bed22a8f38 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55bed22a8fb0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bed22a9298 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55bed22a9108 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55bed22a9180 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55bed22a9348 <col:86> "" ""
|-CXXMethodDecl 0x55bed22a95b8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55bed22a9428 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55bed22a94a0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bed22a9768 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55bed22a9678 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55bed22a9918 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55bed22a9820 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55bed22a9be8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55bed22a99d0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55bed22a9a48 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55bed22a9ac0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bed22a9ec8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55bed22a9cb0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55bed22a9d28 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55bed22a9da0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55bed22a9f80 <col:115> "" ""
|-AccessSpecDecl 0x55bed22a9ff0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55bed22aa028 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bed22ab540 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55bed22ab540
| `-ParmVarDecl 0x55bed22ab648 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55bed22ab6e8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55bed22ab6e8
| `-ParmVarDecl 0x55bed22ab7f8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55bed22e0e28 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55bed24d2c20 <col:7>
|-CXXConstructorDecl 0x55bed22e0f00 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55bed22e0f00
| `-ParmVarDecl 0x55bed22e1018 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55bed22e1088 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55bed22e1088
| `-ParmVarDecl 0x55bed22e1198 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55bed24d5620 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed24c17c8 prev 0x55bed24b69d0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bed24c18c0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55bed24c19b0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55bed24c1ad8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55bed24c1c58 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55bed24c1dd8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55bed24c1f58 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55bed24d2d88 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55bed24d35f8 <col:11>
|-CXXDestructorDecl 0x55bed24d2e60 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55bed24d2f98 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55bed24d2f98
| `-ParmVarDecl 0x55bed24d30a8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55bed24d3148 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55bed24d3148
| `-ParmVarDecl 0x55bed24d3258 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55bed24d6018 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55bed24d6128 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55bed24d63a8 <col:11>
|   `-ReturnStmt 0x55bed24d6398 <col:11>
|     `-UnaryOperator 0x55bed24d6380 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55bed24d6370 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55bed24d6198 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55bed24d6198
  `-ParmVarDecl 0x55bed24d62a8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed24c1fc0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bed24c20d8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55bed24c2178 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55bed24c21e0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55bed24c2248 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55bed24c22b0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55bed24c2310 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55bed24c23d0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55bed24c2430 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55bed24c2490 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55bed24d2c98 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55bed24c2178 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55bed24d3608 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55bed24d3660 <col:12>
|-CXXConstructorDecl 0x55bed24d32c8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55bed24d32c8
| `-ParmVarDecl 0x55bed24d33d8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55bed24d3478 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55bed24d3478
| `-ParmVarDecl 0x55bed24d3588 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55bed24d5700 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed24b00e0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55bed24b01f8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55bed24b0288 <col:16, col:22> col:16 public
|-EnumDecl 0x55bed24b02b0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55bed24b03b0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55bed24b0490 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24b0390 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55bed24b0370 <col:21> 'int' 28
| `-EnumConstantDecl 0x55bed24b0440 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55bed24b04a8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bed24b0420 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55bed24b0400 <col:22> 'int' 64
|-CXXMethodDecl 0x55bed24b07e8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55bed24b04d0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55bed24b0550 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55bed24b05c8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55bed24b0640 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55bed24b08a8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55bed24b0aa8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55bed24b0920 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55bed24b0998 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55bed24b0b58 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55bed24b0cb8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55bed24b0bc8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55bed24b0d60 <col:72> warn_unused_result ""
|-TypedefDecl 0x55bed24b10c0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55bed24b1050 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55bed24b0ff0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55bed24b0fb0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55bed1f834e0 'void'
|       |-PointerType 0x55bed2230480 'unsigned char *'
|       | `-BuiltinType 0x55bed1f835e0 'unsigned char'
|       |-TypedefType 0x55bed202ca50 'size_t' sugar
|       | |-Typedef 0x55bed1ff3be0 'size_t'
|       | `-BuiltinType 0x55bed1f83640 'unsigned long'
|       `-PointerType 0x55bed1f83ce0 'void *'
|         `-BuiltinType 0x55bed1f834e0 'void'
|-CXXMethodDecl 0x55bed24b1538 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55bed24b1130 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55bed24b11a8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55bed24b1240 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55bed24b12c0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55bed24cbc30 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55bed24cbc18 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55bed24cbbe0 <col:58> 'int' 0
| |-ParmVarDecl 0x55bed24b1340 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55bed24cbc58 <col:76> 'int' 0
| |-ParmVarDecl 0x55bed24b13c0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55bed24cbc78 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55bed24b1608 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55bed24b1688 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55bed24b1748 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55bed24b17e8 <col:20>
| `-OptimizeNoneAttr 0x55bed24b1840 <col:30>
|-CXXMethodDecl 0x55bed24b18b8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55bed24b1958 <col:20>
| `-OptimizeNoneAttr 0x55bed24b19b0 <col:30>
|-CXXMethodDecl 0x55bed24b1a28 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55bed24b1ac8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55bed24b1b78 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55bed24b1c18 <col:20>
| |-OptimizeNoneAttr 0x55bed24b1c70 <col:30>
| `-WarnUnusedResultAttr 0x55bed24b1c98 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55bed24b1cf0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55bed24b1d90 <col:20>
| `-OptimizeNoneAttr 0x55bed24b1de8 <col:30>
|-CXXMethodDecl 0x55bed24b1e38 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55bed24b1ed8 <col:20>
| `-OptimizeNoneAttr 0x55bed24b1f30 <col:30>
|-CXXMethodDecl 0x55bed24b1f78 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55bed24b2018 <col:20>
| `-OptimizeNoneAttr 0x55bed24b2070 <col:30>
|-CXXMethodDecl 0x55bed24b20b8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55bed24b2178 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55bed24b2240 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55bed24b2308 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55bed24b23c8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55bed24b24e8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55bed24cbd40 <col:54, line:99:5>
|   `-ReturnStmt 0x55bed24cbd30 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55bed24cbd18 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55bed24cbce8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55bed24c27c8
|         `-CXXThisExpr 0x55bed24cbcd8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55bed24b2688 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55bed24b2598 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55bed24cbdf0 <col:67, line:103:5>
|   `-BinaryOperator 0x55bed24cbdd0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55bed24cbd68 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55bed24c27c8
|     | `-CXXThisExpr 0x55bed24cbd58 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55bed24cbdb8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55bed24cbd98 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55bed24b2598 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55bed24b2780 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55bed24cbe70 <col:33, line:107:5>
|   `-ReturnStmt 0x55bed24cbe60 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55bed24cbe48 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55bed24cbe18 <col:16> 'void *' lvalue ->_destructor_argument 0x55bed24c2830
|         `-CXXThisExpr 0x55bed24cbe08 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55bed24b2840 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55bed24cc4a0 <col:25, line:113:5>
|   |-ParenExpr 0x55bed24cc1e8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55bed24cc1b8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55bed24cbf28 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55bed24cbf00 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55bed24cbec8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55bed24cbe98 <col:24> '<bound member function type>' ->shared 0x55bed24b18b8
|   |   |       `-ImplicitCastExpr 0x55bed24cbee8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55bed24cbe88 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55bed24cbf88 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bed24cbf68 <col:42> 'int' 0
|   |   `-CallExpr 0x55bed24cc118 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55bed24cc100 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bed24cc0e0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bed20237b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bed24cc158 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bed24cbff8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55bed24cc170 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bed24cc020 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bed24cc188 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bed24cc058 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55bed24cc1a0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bed24cc0c8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bed24cc0b0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bed24cc078 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55bed24cc3e8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55bed24cc218 <col:2> 'unsigned char *' lvalue ->_head 0x55bed24c25d0
|   | | `-CXXThisExpr 0x55bed24cc208 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55bed24cc3d0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55bed24cc3b0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55bed24cc258 <col:10> 'unsigned char *' lvalue ->_data 0x55bed24c2638
|   |     | `-CXXThisExpr 0x55bed24cc248 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55bed24cc398 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55bed24cc378 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55bed24cc298 <col:18> 'unsigned char *' lvalue ->_tail 0x55bed24c26a0
|   |         | `-CXXThisExpr 0x55bed24cc288 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55bed24cc360 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55bed24cc340 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55bed24cc2d8 <col:26> 'unsigned char *' lvalue ->_end 0x55bed24c2708
|   |             | `-CXXThisExpr 0x55bed24cc2c8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55bed24cc328 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55bed24cc308 <col:33> 'int' 0
|   `-BinaryOperator 0x55bed24cc480 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55bed24cc418 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55bed24c27c8
|     | `-CXXThisExpr 0x55bed24cc408 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55bed24cc468 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55bed24cc448 <col:16> 'int' 0
|-CXXMethodDecl 0x55bed24b2980 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55bed24b28f0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55bed24b2a28 <col:20>
| |-OptimizeNoneAttr 0x55bed24b2a80 <col:30>
| `-WarnUnusedResultAttr 0x55bed24b2aa8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55bed24b2b78 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55bed24b2ae8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55bed24b2c20 <col:20>
| |-OptimizeNoneAttr 0x55bed24b2c78 <col:30>
| `-WarnUnusedResultAttr 0x55bed24b2ca0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55bed24b2dd8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55bed24b2ce0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55bed24b2e80 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55bed24b2f80 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55bed24b2ef0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55bed24b3028 <col:20>
| `-OptimizeNoneAttr 0x55bed24b3080 <col:30>
|-CXXMethodDecl 0x55bed24b3148 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55bed24b30b8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55bed24b31f0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55bed24b32f0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55bed24b3260 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55bed24b3398 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55bed24b3498 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55bed24b3408 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55bed24b3540 <col:20>
| `-OptimizeNoneAttr 0x55bed24b3598 <col:30>
|-CXXMethodDecl 0x55bed24b3728 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55bed24b35d8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55bed24b3650 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55bed24cbc98 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55bed24b37d8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55bed24b39d8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55bed24b3850 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55bed24b38c8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bed24b3be8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55bed24b3a98 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55bed24b3b10 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bed24b3df8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55bed24b3ca8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55bed24b3d28 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55bed24cbca8 <col:39> 'int' 0
|-CXXMethodDecl 0x55bed24b3ec8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55bed24b3f90 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55bed24b4058 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55bed24b4118 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55bed24b41e0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55bed24b4328 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55bed24b4298 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55bed24b44f8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55bed24b43e8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55bed24b4460 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bed24b45c8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55bed24b4688 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55bed24b4728 <col:20>
| `-OptimizeNoneAttr 0x55bed24b4780 <col:30>
|-CXXMethodDecl 0x55bed24b47d0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55bed24b4870 <col:20>
| `-OptimizeNoneAttr 0x55bed24b48c8 <col:30>
|-CXXMethodDecl 0x55bed24b4918 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55bed24b49d8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55bed24b4aa0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55bed24b4b40 <col:20>
| `-OptimizeNoneAttr 0x55bed24b4b98 <col:30>
|-CXXMethodDecl 0x55bed24b4ce8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55bed24b4bd8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55bed24b4c50 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bed24b4e38 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55bed24b4da8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bed24b4f10 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55bed24b4fd0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55bed24b5070 <col:20>
| `-OptimizeNoneAttr 0x55bed24b50c8 <col:30>
|-CXXMethodDecl 0x55bed24b5118 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55bed24b51b8 <col:20>
| `-OptimizeNoneAttr 0x55bed24b5210 <col:30>
|-CXXMethodDecl 0x55bed24b5260 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55bed24b5328 <line:300:5, col:63> col:44 used transport_length 'int () const'
| |-NoInlineAttr 0x55bed24b53c8 <col:20>
| `-OptimizeNoneAttr 0x55bed24b5420 <col:30>
|-CXXMethodDecl 0x55bed24b5468 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55bed24b5588 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55bed24b56f8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55bed24b5638 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55bed24b57e8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55bed24b5888 <col:20>
| `-OptimizeNoneAttr 0x55bed24b58e0 <col:30>
|-CXXMethodDecl 0x55bed24b5930 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55bed24b59f0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55bed24b5c28 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55bed24b5aa0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55bed24b5b18 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55bed24b5cd8 <col:20>
| `-OptimizeNoneAttr 0x55bed24b5d30 <col:30>
|-CXXMethodDecl 0x55bed24b5dd8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55bed24b5e78 <col:20>
| `-OptimizeNoneAttr 0x55bed24b5ed0 <col:30>
|-CXXMethodDecl 0x55bed24b5f20 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55bed24b5fc0 <col:20>
| `-OptimizeNoneAttr 0x55bed24b6018 <col:30>
|-CXXMethodDecl 0x55bed24b6060 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55bed24b6100 <col:20>
| `-OptimizeNoneAttr 0x55bed24b6158 <col:30>
|-CXXMethodDecl 0x55bed24b6258 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55bed24b6190 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55bed24b6300 <col:20>
| `-OptimizeNoneAttr 0x55bed24b6358 <col:30>
|-CXXMethodDecl 0x55bed24b6518 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55bed24b6390 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55bed24b6408 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55bed24b65c8 <col:20>
| `-OptimizeNoneAttr 0x55bed24b6620 <col:30>
|-CXXMethodDecl 0x55bed24b66c8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55bed24b67e8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55bed24b6908 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55bed24b69a8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55bed24b69d0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55bed24b6af8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55bed24b6b98 <col:20>
| `-OptimizeNoneAttr 0x55bed24b6bf0 <col:30>
|-CXXMethodDecl 0x55bed24b6c98 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55bed24b6d38 <col:20>
| `-OptimizeNoneAttr 0x55bed24b6d90 <col:30>
|-AccessSpecDecl 0x55bed24b6db8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55bed24b6de0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55bed24b6ee0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55bed24b6f30 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bed24b6ec0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55bed24b6ea0 <col:14> 'int' 48
|-CXXMethodDecl 0x55bed24b6f98 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55bed24b7038 <col:20>
| `-OptimizeNoneAttr 0x55bed24b7090 <col:30>
|-CXXMethodDecl 0x55bed24b7108 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55bed24b71a8 <col:20>
| `-OptimizeNoneAttr 0x55bed24b7200 <col:30>
|-CXXMethodDecl 0x55bed24b72c8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55bed24b7238 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55bed24b7468 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55bed24b7608 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55bed24b7518 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55bed24b76b0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55bed24b77b0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55bed24b7b60 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24b7790 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55bed24b7770 <col:9> 'int' 0
| |-EnumConstantDecl 0x55bed24b7840 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55bed24b7b78 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24b7820 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55bed24b7800 <col:14> 'int' 1
| |-EnumConstantDecl 0x55bed24b78d0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55bed24b7b90 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24b78b0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55bed24b7890 <col:14> 'int' 2
| |-EnumConstantDecl 0x55bed24b7960 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55bed24b7ba8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24b7940 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55bed24b7920 <col:14> 'int' 3
| |-EnumConstantDecl 0x55bed24b79f0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55bed24b7bc0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24b79d0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55bed24b79b0 <col:13> 'int' 4
| |-EnumConstantDecl 0x55bed24b7a80 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55bed24b7bd8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24b7a60 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55bed24b7a40 <col:13> 'int' 5
| `-EnumConstantDecl 0x55bed24b7b10 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55bed24b7bf0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bed24b7af0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55bed24b7ad0 <col:14> 'int' 6
|-CXXMethodDecl 0x55bed24b7c58 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55bed24b7cf8 <col:20>
| `-OptimizeNoneAttr 0x55bed24b7d50 <col:30>
|-CXXMethodDecl 0x55bed24b7e48 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55bed24b7d88 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55bed24b7ef0 <col:20>
| `-OptimizeNoneAttr 0x55bed24b7f48 <col:30>
|-CXXMethodDecl 0x55bed24b7fb8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55bed24b80e0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55bed24b8258 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55bed24b8190 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55bed24b8320 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55bed24b83e8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55bed24b8528 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55bed24b8498 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55bed24b85d0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55bed24b86d0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55bed24b88d0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24b86b0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55bed24b8690 <col:23> 'int' 0
| |-EnumConstantDecl 0x55bed24b8760 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55bed24b88e8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24b8740 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55bed24b8720 <col:45> 'int' 4
| |-EnumConstantDecl 0x55bed24b87f0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55bed24b8900 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24b87d0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55bed24b87b0 <col:24> 'int' 0
| `-EnumConstantDecl 0x55bed24b8880 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55bed24b8918 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bed24b8860 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55bed24b8840 <col:47> 'int' 16
|-CXXMethodDecl 0x55bed24b8978 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55bed24b8ae8 <line:436:5, col:75> col:45 used set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55bed24b8a28 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55bed24b8b90 <col:20>
| `-OptimizeNoneAttr 0x55bed24b8be8 <col:30>
|-CXXMethodDecl 0x55bed24b8c38 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55bed24cc5c0 <col:18, col:36>
|   `-ReturnStmt 0x55bed24cc5b0 <col:20, col:33>
|     `-ImplicitCastExpr 0x55bed24cc598 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55bed24cc578 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55bed24cc548 <col:27> '<bound member function type>' ->xanno 0x55bed24b6c98
|           `-CXXThisExpr 0x55bed24cc538 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55bed24b8d30 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55bed24cc6d0 <col:30, col:48>
|   `-ReturnStmt 0x55bed24cc6c0 <col:32, col:45>
|     `-ImplicitCastExpr 0x55bed24cc6a8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55bed24cc688 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55bed24cc658 <col:39> '<bound member function type>' ->xanno 0x55bed24b6af8
|           `-CXXThisExpr 0x55bed24cc648 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55bed24b8e18 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55bed24cc868 <col:24, col:50>
|   `-ReturnStmt 0x55bed24cc858 <col:26, col:47>
|     `-UnaryOperator 0x55bed24cc840 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55bed24cc820 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55bed24cc808 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55bed24cc7b8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55bed24c1ad8
|         |   `-CXXMemberCallExpr 0x55bed24cc798 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55bed24cc768 <col:34> '<bound member function type>' ->xanno 0x55bed24b6c98
|         |       `-CXXThisExpr 0x55bed24cc758 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55bed24cc7e8 <col:46> 'int' 0
|-CXXMethodDecl 0x55bed24b8f20 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55bed24cca38 <col:36, col:62>
|   `-ReturnStmt 0x55bed24cca28 <col:38, col:59>
|     `-UnaryOperator 0x55bed24cca10 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55bed24cc9f0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55bed24cc9d8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55bed24cc950 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55bed24c1ad8
|         |   `-CXXMemberCallExpr 0x55bed24cc930 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55bed24cc900 <col:46> '<bound member function type>' ->xanno 0x55bed24b6af8
|         |       `-CXXThisExpr 0x55bed24cc8f0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55bed24cc980 <col:58> 'int' 0
|-CXXMethodDecl 0x55bed24b9038 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55bed24ccbd0 <col:26, col:53>
|   `-ReturnStmt 0x55bed24ccbc0 <col:28, col:50>
|     `-UnaryOperator 0x55bed24ccba8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55bed24ccb88 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55bed24ccb70 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55bed24ccb20 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55bed24c1dd8
|         |   `-CXXMemberCallExpr 0x55bed24ccb00 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55bed24ccad0 <col:36> '<bound member function type>' ->xanno 0x55bed24b6c98
|         |       `-CXXThisExpr 0x55bed24ccac0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55bed24ccb50 <col:49> 'int' 0
|-CXXMethodDecl 0x55bed24b9158 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55bed24ccda8 <col:38, col:65>
|   `-ReturnStmt 0x55bed24ccd98 <col:40, col:62>
|     `-UnaryOperator 0x55bed24ccd80 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55bed24ccd60 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55bed24ccd48 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55bed24cccb8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55bed24c1dd8
|         |   `-CXXMemberCallExpr 0x55bed24ccc98 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55bed24ccc68 <col:48> '<bound member function type>' ->xanno 0x55bed24b6af8
|         |       `-CXXThisExpr 0x55bed24ccc58 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55bed24ccce8 <col:61> 'int' 0
|-CXXMethodDecl 0x55bed24b9308 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55bed24b9210 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55bed24cd478 <col:34, line:463:5>
|   |-ParenExpr 0x55bed24cd2c0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55bed24cd290 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55bed24ccef8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bed24ccec8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bed24cce18 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bed24cce00 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bed24ccdc0 <col:23> 'int' lvalue ParmVar 0x55bed24b9210 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bed24ccde0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bed24ccea8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55bed24cce78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bed24cce38 <col:33> 'int' lvalue ParmVar 0x55bed24b9210 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55bed24cce90 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55bed24cce58 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bed24b6ee0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55bed24ccf58 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bed24ccf38 <col:56> 'int' 0
|   |   `-CallExpr 0x55bed24cd1f0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55bed24cd1d8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bed24cd1b8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bed20237b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bed24cd230 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bed24cd048 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55bed24cd248 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bed24cd078 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bed24cd260 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bed24cd0b0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55bed24cd278 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bed24cd1a0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bed24cd188 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bed24cd148 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55bed24cd468 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55bed24cd450 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55bed24cd430 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55bed24cd400 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55bed24cd3b0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55bed24c1ad8
|         |   `-CXXMemberCallExpr 0x55bed24cd390 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55bed24cd360 <col:9> '<bound member function type>' ->xanno 0x55bed24b6af8
|         |       `-CXXThisExpr 0x55bed24cd350 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55bed24cd418 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55bed24cd3e0 <col:21> 'int' lvalue ParmVar 0x55bed24b9210 'i' 'int'
|-CXXMethodDecl 0x55bed24b9558 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55bed24b93c8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55bed24b9440 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55bed24cdb08 <col:40, line:472:5>
|   |-ParenExpr 0x55bed24cd920 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55bed24cd8f0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55bed24cd5d0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bed24cd5a0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bed24cd4f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bed24cd4d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bed24cd498 <col:23> 'int' lvalue ParmVar 0x55bed24b93c8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bed24cd4b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bed24cd580 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55bed24cd550 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bed24cd510 <col:33> 'int' lvalue ParmVar 0x55bed24b93c8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55bed24cd568 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55bed24cd530 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bed24b6ee0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55bed24cd630 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bed24cd610 <col:56> 'int' 0
|   |   `-CallExpr 0x55bed24cd850 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55bed24cd838 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bed24cd818 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bed20237b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bed24cd890 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bed24cd6a0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55bed24cd8a8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bed24cd6d0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bed24cd8c0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bed24cd708 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55bed24cd8d8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bed24cd800 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bed24cd7e8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bed24cd7a8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55bed24cdae8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55bed24cda90 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55bed24cda60 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55bed24cda10 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55bed24c1ad8
|     | |   `-CXXMemberCallExpr 0x55bed24cd9f0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55bed24cd9c0 <col:2> '<bound member function type>' ->xanno 0x55bed24b6c98
|     | |       `-CXXThisExpr 0x55bed24cd9b0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55bed24cda78 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55bed24cda40 <col:14> 'int' lvalue ParmVar 0x55bed24b93c8 'i' 'int'
|     `-ImplicitCastExpr 0x55bed24cdad0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55bed24cdab0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55bed24b9440 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55bed24b9718 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55bed24b9620 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55bed24ce288 <col:36, line:485:5>
|   |-ParenExpr 0x55bed24cdff0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55bed24cdfc0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55bed24cdca0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bed24cdc70 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bed24cdb80 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bed24cdb68 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bed24cdb28 <col:23> 'int' lvalue ParmVar 0x55bed24b9620 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bed24cdb48 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bed24cdc50 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55bed24cdc38 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bed24cdba0 <col:33> 'int' lvalue ParmVar 0x55bed24b9620 'i' 'int'
|   |   |     `-BinaryOperator 0x55bed24cdc18 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55bed24cdc00 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55bed24cdbc0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bed24b6ee0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55bed24cdbe0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55bed24cdd00 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bed24cdce0 <col:60> 'int' 0
|   |   `-CallExpr 0x55bed24cdf20 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55bed24cdf08 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bed24cdee8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bed20237b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bed24cdf60 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bed24cdd70 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55bed24cdf78 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bed24cdda8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bed24cdf90 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bed24cdde0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55bed24cdfa8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bed24cded0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bed24cdeb8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bed24cde78 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55bed24ce278 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55bed24ce260 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55bed24ce248 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55bed24ce218 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55bed24ce1b8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55bed24ce188 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55bed24ce100 <col:61, col:70> 'char const[48]' lvalue ->c 0x55bed24c19b0
|             |   `-CXXMemberCallExpr 0x55bed24ce0e0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55bed24ce0b0 <col:61> '<bound member function type>' ->xanno 0x55bed24b6af8
|             |       `-CXXThisExpr 0x55bed24ce0a0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55bed24ce1a0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55bed24ce130 <col:74> 'int' lvalue ParmVar 0x55bed24b9620 'i' 'int'
|-CXXMethodDecl 0x55bed24b9968 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55bed24b97d8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55bed24b9850 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55bed24ce9d8 <col:42, line:500:5>
|   |-ParenExpr 0x55bed24ce770 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55bed24ce740 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55bed24ce420 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bed24ce3f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bed24ce300 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bed24ce2e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bed24ce2a8 <col:23> 'int' lvalue ParmVar 0x55bed24b97d8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bed24ce2c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bed24ce3d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55bed24ce3b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bed24ce320 <col:33> 'int' lvalue ParmVar 0x55bed24b97d8 'i' 'int'
|   |   |     `-BinaryOperator 0x55bed24ce398 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55bed24ce380 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55bed24ce340 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bed24b6ee0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55bed24ce360 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55bed24ce480 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bed24ce460 <col:60> 'int' 0
|   |   `-CallExpr 0x55bed24ce6a0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55bed24ce688 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bed24ce668 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bed20237b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bed24ce6e0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bed24ce4f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55bed24ce6f8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bed24ce528 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bed24ce710 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bed24ce560 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55bed24ce728 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bed24ce650 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bed24ce638 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bed24ce5f8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55bed24ce9b8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55bed24ce968 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55bed24ce938 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55bed24ce8e0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55bed24ce8b0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55bed24ce860 <col:48, col:57> 'char [48]' lvalue ->c 0x55bed24c19b0
|     |     |   `-CXXMemberCallExpr 0x55bed24ce840 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55bed24ce810 <col:48> '<bound member function type>' ->xanno 0x55bed24b6c98
|     |     |       `-CXXThisExpr 0x55bed24ce800 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55bed24ce8c8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55bed24ce890 <col:61> 'int' lvalue ParmVar 0x55bed24b97d8 'i' 'int'
|     `-ImplicitCastExpr 0x55bed24ce9a0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55bed24ce980 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55bed24b9850 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55bed24b9b28 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55bed24b9a30 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55bed24cf138 <col:35, line:513:5>
|   |-ParenExpr 0x55bed24cee48 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55bed24cee18 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55bed24ceb70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bed24ceb40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bed24cea50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bed24cea38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bed24ce9f8 <col:23> 'int' lvalue ParmVar 0x55bed24b9a30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bed24cea18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bed24ceb20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55bed24ceb08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bed24cea70 <col:33> 'int' lvalue ParmVar 0x55bed24b9a30 'i' 'int'
|   |   |     `-BinaryOperator 0x55bed24ceae8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55bed24cead0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55bed24cea90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bed24b6ee0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55bed24ceab0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55bed24cebd0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bed24cebb0 <col:60> 'int' 0
|   |   `-CallExpr 0x55bed24ced78 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55bed24ced60 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bed24ced40 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bed20237b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bed24cedb8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bed24cec40 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55bed24cedd0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bed24cec78 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bed24cede8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bed24cecb0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55bed24cee00 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bed24ced28 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bed24ced10 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bed24cecd0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55bed24cf128 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55bed24cf110 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55bed24cf0f8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55bed24cf0c8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55bed24cf040 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55bed24cf010 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55bed24cefc0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55bed24c19b0
|             |   `-CXXMemberCallExpr 0x55bed24cefa0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55bed24cef70 <col:60> '<bound member function type>' ->xanno 0x55bed24b6af8
|             |       `-CXXThisExpr 0x55bed24cef60 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55bed24cf028 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55bed24ceff0 <col:73> 'int' lvalue ParmVar 0x55bed24b9a30 'i' 'int'
|-CXXMethodDecl 0x55bed24b9d78 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55bed24b9be8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55bed24b9c60 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55bed24cf858 <col:41, line:528:5>
|   |-ParenExpr 0x55bed24cf5e0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55bed24cf5b0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55bed24cf2d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bed24cf2a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bed24cf1b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bed24cf198 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bed24cf158 <col:23> 'int' lvalue ParmVar 0x55bed24b9be8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bed24cf178 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bed24cf280 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55bed24cf268 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bed24cf1d0 <col:33> 'int' lvalue ParmVar 0x55bed24b9be8 'i' 'int'
|   |   |     `-BinaryOperator 0x55bed24cf248 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55bed24cf230 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55bed24cf1f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bed24b6ee0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55bed24cf210 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55bed24cf330 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bed24cf310 <col:60> 'int' 0
|   |   `-CallExpr 0x55bed24cf510 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55bed24cf4f8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bed24cf4d8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bed20237b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bed24cf550 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bed24cf3a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55bed24cf568 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bed24cf3d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bed24cf580 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bed24cf410 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55bed24cf598 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bed24cf4c0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bed24cf4a8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bed24cf468 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55bed24cf838 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55bed24cf7e8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55bed24cf7b8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55bed24cf760 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55bed24cf720 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55bed24cf6d0 <col:47, col:56> 'char [48]' lvalue ->c 0x55bed24c19b0
|     |     |   `-CXXMemberCallExpr 0x55bed24cf6b0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55bed24cf680 <col:47> '<bound member function type>' ->xanno 0x55bed24b6c98
|     |     |       `-CXXThisExpr 0x55bed24cf670 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55bed24cf738 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55bed24cf700 <col:60> 'int' lvalue ParmVar 0x55bed24b9be8 'i' 'int'
|     `-ImplicitCastExpr 0x55bed24cf820 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55bed24cf800 <col:65> 'int16_t':'short' lvalue ParmVar 0x55bed24b9c60 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55bed24b9f38 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55bed24b9e40 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55bed24cff28 <col:36, line:541:5>
|   |-ParenExpr 0x55bed24cfcc8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55bed24cfc98 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55bed24cf9f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bed24cf9c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bed24cf8d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bed24cf8b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bed24cf878 <col:23> 'int' lvalue ParmVar 0x55bed24b9e40 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bed24cf898 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bed24cf9a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55bed24cf988 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bed24cf8f0 <col:33> 'int' lvalue ParmVar 0x55bed24b9e40 'i' 'int'
|   |   |     `-BinaryOperator 0x55bed24cf968 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55bed24cf950 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55bed24cf910 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bed24b6ee0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55bed24cf930 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55bed24cfa50 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bed24cfa30 <col:60> 'int' 0
|   |   `-CallExpr 0x55bed24cfbf8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55bed24cfbe0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bed24cfbc0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bed20237b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bed24cfc38 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bed24cfac0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55bed24cfc50 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bed24cfaf8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bed24cfc68 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bed24cfb30 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55bed24cfc80 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bed24cfba8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bed24cfb90 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bed24cfb50 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55bed24cff18 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55bed24cff00 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55bed24cfee8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55bed24cfeb8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55bed24cfe60 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55bed24cfe30 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55bed24cfde0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55bed24c19b0
|             |   `-CXXMemberCallExpr 0x55bed24cfdc0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55bed24cfd90 <col:61> '<bound member function type>' ->xanno 0x55bed24b6af8
|             |       `-CXXThisExpr 0x55bed24cfd80 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55bed24cfe48 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55bed24cfe10 <col:74> 'int' lvalue ParmVar 0x55bed24b9e40 'i' 'int'
|-CXXMethodDecl 0x55bed24ba108 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55bed24b9ff8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55bed24ba070 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55bed24ba1b8 <col:20>
| `-OptimizeNoneAttr 0x55bed24ba210 <col:30>
|-CXXMethodDecl 0x55bed24ba348 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55bed24ba250 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55bed24d05f8 <col:35, line:562:5>
|   |-ParenExpr 0x55bed24d0398 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55bed24d0368 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55bed24d00c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bed24d0090 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bed24cffa0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bed24cff88 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bed24cff48 <col:23> 'int' lvalue ParmVar 0x55bed24ba250 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bed24cff68 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bed24d0070 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55bed24d0058 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bed24cffc0 <col:33> 'int' lvalue ParmVar 0x55bed24ba250 'i' 'int'
|   |   |     `-BinaryOperator 0x55bed24d0038 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55bed24d0020 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55bed24cffe0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bed24b6ee0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55bed24d0000 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55bed24d0120 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bed24d0100 <col:60> 'int' 0
|   |   `-CallExpr 0x55bed24d02c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55bed24d02b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bed24d0290 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bed20237b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bed24d0308 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bed24d0190 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55bed24d0320 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bed24d01c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bed24d0338 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bed24d0200 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55bed24d0350 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bed24d0278 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bed24d0260 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bed24d0220 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55bed24d05e8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55bed24d05d0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55bed24d05b8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55bed24d0588 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55bed24d0530 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55bed24d0500 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55bed24d04b0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55bed24c19b0
|             |   `-CXXMemberCallExpr 0x55bed24d0490 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55bed24d0460 <col:60> '<bound member function type>' ->xanno 0x55bed24b6af8
|             |       `-CXXThisExpr 0x55bed24d0450 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55bed24d0518 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55bed24d04e0 <col:73> 'int' lvalue ParmVar 0x55bed24ba250 'i' 'int'
|-CXXMethodDecl 0x55bed24ba558 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55bed24ba408 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55bed24ba480 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55bed24d0cd8 <col:41, line:577:5>
|   |-ParenExpr 0x55bed24d0a68 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55bed24d0a38 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55bed24d0790 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bed24d0760 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bed24d0670 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bed24d0658 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bed24d0618 <col:23> 'int' lvalue ParmVar 0x55bed24ba408 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bed24d0638 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bed24d0740 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55bed24d0728 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bed24d0690 <col:33> 'int' lvalue ParmVar 0x55bed24ba408 'i' 'int'
|   |   |     `-BinaryOperator 0x55bed24d0708 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55bed24d06f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55bed24d06b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bed24b6ee0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55bed24d06d0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55bed24d07f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bed24d07d0 <col:60> 'int' 0
|   |   `-CallExpr 0x55bed24d0998 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55bed24d0980 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bed24d0960 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bed20237b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bed24d09d8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bed24d0860 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55bed24d09f0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bed24d0898 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bed24d0a08 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bed24d08d0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55bed24d0a20 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bed24d0948 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bed24d0930 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bed24d08f0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55bed24d0cb8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55bed24d0c68 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55bed24d0c38 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55bed24d0bd8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55bed24d0ba8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55bed24d0b58 <col:47, col:56> 'char [48]' lvalue ->c 0x55bed24c19b0
|     |     |   `-CXXMemberCallExpr 0x55bed24d0b38 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55bed24d0b08 <col:47> '<bound member function type>' ->xanno 0x55bed24b6c98
|     |     |       `-CXXThisExpr 0x55bed24d0af8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55bed24d0bc0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55bed24d0b88 <col:60> 'int' lvalue ParmVar 0x55bed24ba408 'i' 'int'
|     `-ImplicitCastExpr 0x55bed24d0ca0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55bed24d0c80 <col:65> 'int32_t':'int' lvalue ParmVar 0x55bed24ba480 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55bed24ba718 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55bed24ba620 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55bed24d1408 <col:36, line:591:5>
|   |-ParenExpr 0x55bed24d1148 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55bed24d1118 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55bed24d0e70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bed24d0e40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bed24d0d50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bed24d0d38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bed24d0cf8 <col:23> 'int' lvalue ParmVar 0x55bed24ba620 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bed24d0d18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bed24d0e20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55bed24d0e08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bed24d0d70 <col:33> 'int' lvalue ParmVar 0x55bed24ba620 'i' 'int'
|   |   |     `-BinaryOperator 0x55bed24d0de8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55bed24d0dd0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55bed24d0d90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bed24b6ee0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55bed24d0db0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55bed24d0ed0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bed24d0eb0 <col:60> 'int' 0
|   |   `-CallExpr 0x55bed24d1078 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55bed24d1060 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bed24d1040 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bed20237b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bed24d10b8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bed24d0f40 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55bed24d10d0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bed24d0f78 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bed24d10e8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bed24d0fb0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55bed24d1100 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bed24d1028 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bed24d1010 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bed24d0fd0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55bed24d13f8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55bed24d13e0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55bed24d13c8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55bed24d1398 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55bed24d1310 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55bed24d12e0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55bed24d1290 <col:61, col:70> 'char const[48]' lvalue ->c 0x55bed24c19b0
|             |   `-CXXMemberCallExpr 0x55bed24d1270 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55bed24d1240 <col:61> '<bound member function type>' ->xanno 0x55bed24b6af8
|             |       `-CXXThisExpr 0x55bed24d1230 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55bed24d12f8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55bed24d12c0 <col:74> 'int' lvalue ParmVar 0x55bed24ba620 'i' 'int'
|-CXXMethodDecl 0x55bed24ba968 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55bed24ba7d8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55bed24ba850 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55bed24d1ae8 <col:42, line:606:5>
|   |-ParenExpr 0x55bed24d1878 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55bed24d1848 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55bed24d15a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bed24d1570 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bed24d1480 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bed24d1468 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bed24d1428 <col:23> 'int' lvalue ParmVar 0x55bed24ba7d8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bed24d1448 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bed24d1550 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55bed24d1538 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bed24d14a0 <col:33> 'int' lvalue ParmVar 0x55bed24ba7d8 'i' 'int'
|   |   |     `-BinaryOperator 0x55bed24d1518 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55bed24d1500 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55bed24d14c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bed24b6ee0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55bed24d14e0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55bed24d1600 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bed24d15e0 <col:60> 'int' 0
|   |   `-CallExpr 0x55bed24d17a8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55bed24d1790 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bed24d1770 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bed20237b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bed24d17e8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bed24d1670 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55bed24d1800 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bed24d16a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bed24d1818 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bed24d16e0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55bed24d1830 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bed24d1758 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bed24d1740 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bed24d1700 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55bed24d1ac8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55bed24d1a78 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55bed24d1a48 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55bed24d19e8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55bed24d19b8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55bed24d1968 <col:48, col:57> 'char [48]' lvalue ->c 0x55bed24c19b0
|     |     |   `-CXXMemberCallExpr 0x55bed24d1948 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55bed24d1918 <col:48> '<bound member function type>' ->xanno 0x55bed24b6c98
|     |     |       `-CXXThisExpr 0x55bed24d1908 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55bed24d19d0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55bed24d1998 <col:61> 'int' lvalue ParmVar 0x55bed24ba7d8 'i' 'int'
|     `-ImplicitCastExpr 0x55bed24d1ab0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55bed24d1a90 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55bed24ba850 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55bed24bab00 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55bed24baa30 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55bed24d2358 <col:33, line:620:5>
|   |-ParenExpr 0x55bed24d20d0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55bed24d20a0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55bed24d1cf0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bed24d1cc0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bed24d1b60 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bed24d1b48 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bed24d1b08 <col:23> 'int' lvalue ParmVar 0x55bed24baa30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bed24d1b28 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bed24d1ca0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55bed24d1c88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bed24d1b80 <col:33> 'int' lvalue ParmVar 0x55bed24baa30 'i' 'int'
|   |   |     `-BinaryOperator 0x55bed24d1c68 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55bed24d1c50 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55bed24d1ba0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bed24b6ee0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55bed24d1c28 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55bed24d1c10 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55bed24d1bd8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55bed24d1d50 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bed24d1d30 <col:79> 'int' 0
|   |   `-CallExpr 0x55bed24d2000 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55bed24d1fe8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bed24d1fc8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bed20237b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bed24d2040 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bed24d1e38 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55bed24d2058 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bed24d1e80 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bed24d2070 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bed24d1eb8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55bed24d2088 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bed24d1fb0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bed24d1f98 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bed24d1f58 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55bed24d2348 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55bed24d2330 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55bed24d2318 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55bed24d22e8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55bed24d2260 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55bed24d2230 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55bed24d21e0 <col:67, col:76> 'char const[48]' lvalue ->c 0x55bed24c19b0
|             |   `-CXXMemberCallExpr 0x55bed24d21c0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55bed24d2190 <col:67> '<bound member function type>' ->xanno 0x55bed24b6af8
|             |       `-CXXThisExpr 0x55bed24d2180 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55bed24d2248 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55bed24d2210 <col:80> 'int' lvalue ParmVar 0x55bed24baa30 'i' 'int'
|-CXXMethodDecl 0x55bed24bad18 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55bed24babc0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55bed24bac40 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55bed24d2b80 <col:45, line:635:5>
|   |-ParenExpr 0x55bed24d28c8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55bed24d2898 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55bed24d2560 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55bed24d2530 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55bed24d23d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55bed24d23b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55bed24d2378 <col:23> 'int' lvalue ParmVar 0x55bed24babc0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55bed24d2398 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55bed24d2510 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55bed24d24f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55bed24d23f0 <col:33> 'int' lvalue ParmVar 0x55bed24babc0 'i' 'int'
|   |   |     `-BinaryOperator 0x55bed24d24d8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55bed24d24c0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55bed24d2410 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55bed24b6ee0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55bed24d2498 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55bed24d2480 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55bed24d2448 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55bed24d25c0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55bed24d25a0 <col:79> 'int' 0
|   |   `-CallExpr 0x55bed24d27f8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55bed24d27e0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55bed24d27c0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55bed20237b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55bed24d2838 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bed24d2630 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55bed24d2850 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55bed24d2678 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55bed24d2868 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55bed24d26b0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55bed24d2880 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55bed24d27a8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55bed24d2790 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55bed24d2748 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55bed24d2b60 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55bed24d2ac8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55bed24d2a98 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55bed24d2a38 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55bed24d2a08 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55bed24d29b8 <col:54, col:63> 'char [48]' lvalue ->c 0x55bed24c19b0
|     |     |   `-CXXMemberCallExpr 0x55bed24d2998 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55bed24d2968 <col:54> '<bound member function type>' ->xanno 0x55bed24b6c98
|     |     |       `-CXXThisExpr 0x55bed24d2958 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55bed24d2a20 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55bed24d29e8 <col:67> 'int' lvalue ParmVar 0x55bed24babc0 'i' 'int'
|     `-CXXConstCastExpr 0x55bed24d2b30 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55bed24d2b18 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55bed24d2ae0 <col:91> 'const void *' lvalue ParmVar 0x55bed24bac40 'x' 'const void *'
|-CXXMethodDecl 0x55bed24bade8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55bed24d2c08 <col:34, line:640:5>
|   `-ReturnStmt 0x55bed24d2bf8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55bed24d2be0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55bed24d2bb0 <col:16> 'Packet *' lvalue ->_data_packet 0x55bed24c2568
|         `-CXXThisExpr 0x55bed24d2ba0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55bed24baf28 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55bed24bae98 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55bed24cbcc8 <col:46> 'bool' true
|-CXXMethodDecl 0x55bed24bb0a8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55bed24bafe0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55bed24bb150 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55bed24bb900 <line:660:22> "" ""
| |-EnumConstantDecl 0x55bed24bb250 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55bed24bb970 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24bb230 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55bed24bb210 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55bed24b03b0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55bed24bb2e0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55bed24bb988 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24bb2c0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55bed24bb2a0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55bed24b0440 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55bed24bb370 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55bed24bb9a0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24bb350 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55bed24bb330 <col:21> 'int' 0
| |-EnumConstantDecl 0x55bed24bb400 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55bed24bb9b8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24bb3e0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55bed24bb3c0 <col:19> 'int' 16
| |-EnumConstantDecl 0x55bed24bb490 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55bed24bb9d0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24bb470 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55bed24bb450 <col:21> 'int' 16
| |-EnumConstantDecl 0x55bed24bb520 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55bed24bb9e8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24bb500 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55bed24bb4e0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55bed24bb5b0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55bed24bba00 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24bb590 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55bed24bb570 <col:19> 'int' EnumConstant 0x55bed24bb400 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55bed24bb640 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55bed24bba18 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24bb620 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55bed24bb600 <col:19> 'int' EnumConstant 0x55bed24bb520 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55bed24bb710 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55bed24bba30 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24bb6f0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55bed24bb6d0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55bed24bb690 <col:23> 'int' EnumConstant 0x55bed24bb640 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55bed24bb6b0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55bed24bb7e0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55bed24bba48 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed24bb7c0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55bed24bb7a0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55bed24bb760 <col:23> 'int' EnumConstant 0x55bed24bb640 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55bed24bb780 <col:40> 'int' 4
| `-EnumConstantDecl 0x55bed24bb8b0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55bed24bba60 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bed24bb890 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55bed24bb870 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55bed24bb830 <col:23> 'int' EnumConstant 0x55bed24bb640 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55bed24bb850 <col:40> 'int' 8
|-CXXMethodDecl 0x55bed24bbaa0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55bed24bbb40 <col:68> "" ""
|-CXXMethodDecl 0x55bed24bbbd8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55bed24bbc78 <col:45> "" ""
|-CXXMethodDecl 0x55bed24bbd10 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55bed24bbdb0 <col:57> "" ""
|-CXXMethodDecl 0x55bed24bbe48 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55bed24bbee8 <col:45> "" ""
|-CXXMethodDecl 0x55bed24bbf80 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55bed24bc020 <col:57> "" ""
|-CXXMethodDecl 0x55bed24bc0b0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55bed24bc150 <col:51> "" ""
|-CXXMethodDecl 0x55bed24bc1e0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55bed24bc280 <col:63> "" ""
|-CXXMethodDecl 0x55bed24bc310 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55bed24bc3b0 <col:53> "" ""
|-CXXMethodDecl 0x55bed24bc440 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55bed24bc4e0 <col:65> "" ""
|-CXXMethodDecl 0x55bed24bc5f8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55bed24bc568 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55bed24bc6a0 <col:61> "" ""
|-CXXMethodDecl 0x55bed24bc838 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55bed24bc728 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55bed24bc7a0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55bed24bc8e8 <col:67> "" ""
|-CXXMethodDecl 0x55bed24bca00 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55bed24bc970 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55bed24bcaa8 <col:63> "" ""
|-CXXMethodDecl 0x55bed24bcc40 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55bed24bcb30 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55bed24bcba8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55bed24bccf0 <col:69> "" ""
|-CXXMethodDecl 0x55bed24bce08 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55bed24bcd78 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55bed24bceb0 <col:63> "" ""
|-CXXMethodDecl 0x55bed24bf588 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55bed24bf478 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55bed24bf4f0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55bed24bf638 <col:69> "" ""
|-CXXMethodDecl 0x55bed24bf750 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55bed24bf6c0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55bed24bf7f8 <col:62> "" ""
|-CXXMethodDecl 0x55bed24bf990 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55bed24bf880 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55bed24bf8f8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55bed24bfa40 <col:68> "" ""
|-CXXMethodDecl 0x55bed24bfb58 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55bed24bfac8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55bed24bfc00 <col:63> "" ""
|-CXXMethodDecl 0x55bed24bfd98 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55bed24bfc88 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55bed24bfd00 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55bed24bfe48 <col:69> "" ""
|-CXXMethodDecl 0x55bed24bfed8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55bed24bff78 <col:64> "" ""
|-CXXMethodDecl 0x55bed24c0008 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55bed24c00a8 <col:52> "" ""
|-CXXMethodDecl 0x55bed24c0138 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55bed24c01d8 <col:67> "" ""
|-CXXMethodDecl 0x55bed24c0268 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55bed24c0308 <col:55> "" ""
|-CXXMethodDecl 0x55bed24c0420 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55bed24c0390 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55bed24c04c8 <col:58> "" ""
|-CXXMethodDecl 0x55bed24c0660 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55bed24c0550 <col:33> col:36 'int'
| |-ParmVarDecl 0x55bed24c05c8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55bed24c0710 <col:62> "" ""
|-CXXMethodDecl 0x55bed24c0828 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55bed24c0798 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55bed24c08d0 <col:58> "" ""
|-CXXMethodDecl 0x55bed24c0a68 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55bed24c0958 <col:33> col:36 'int'
| |-ParmVarDecl 0x55bed24c09d0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55bed24c0b18 <col:62> "" ""
|-CXXMethodDecl 0x55bed24c0c30 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55bed24c0ba0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55bed24c0cd8 <col:60> "" ""
|-CXXMethodDecl 0x55bed24c0e70 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55bed24c0d60 <col:34> col:37 'int'
| |-ParmVarDecl 0x55bed24c0dd8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55bed24c0f20 <col:64> "" ""
|-CXXMethodDecl 0x55bed24c1038 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55bed24c0fa8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55bed24c10e0 <col:58> "" ""
|-CXXMethodDecl 0x55bed24c1278 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55bed24c1168 <col:33> col:36 'int'
| |-ParmVarDecl 0x55bed24c11e0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55bed24c1328 <col:62> "" ""
|-CXXMethodDecl 0x55bed24c1440 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55bed24c13b0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55bed24c14e8 <col:59> "" ""
|-CXXMethodDecl 0x55bed24c1680 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55bed24c1570 <col:33> col:36 'int'
| |-ParmVarDecl 0x55bed24c15e8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55bed24c1730 <col:63> "" ""
|-AccessSpecDecl 0x55bed24c17a0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55bed24c17c8 prev 0x55bed24b69d0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55bed24c18c0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55bed24c19b0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55bed24c1ad8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55bed24c1c58 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55bed24c1dd8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55bed24c1f58 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55bed24d2d88 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55bed24d35f8 <col:11>
| |-CXXDestructorDecl 0x55bed24d2e60 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55bed24d2f98 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55bed24d2f98
| | `-ParmVarDecl 0x55bed24d30a8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55bed24d3148 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55bed24d3148
| | `-ParmVarDecl 0x55bed24d3258 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55bed24d6018 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55bed24d6128 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55bed24d63a8 <col:11>
| |   `-ReturnStmt 0x55bed24d6398 <col:11>
| |     `-UnaryOperator 0x55bed24d6380 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55bed24d6370 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55bed24d6198 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55bed24d6198
|   `-ParmVarDecl 0x55bed24d62a8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55bed24c1fc0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55bed24c20d8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55bed24c2178 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55bed24c21e0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55bed24c2248 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55bed24c22b0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55bed24c2310 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55bed24c23d0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55bed24c2430 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55bed24c2490 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55bed24d2c98 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55bed24c2178 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55bed24d3608 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55bed24d3660 <col:12>
| |-CXXConstructorDecl 0x55bed24d32c8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55bed24d32c8
| | `-ParmVarDecl 0x55bed24d33d8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55bed24d3478 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55bed24d3478
| | `-ParmVarDecl 0x55bed24d3588 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55bed24d5700 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55bed24c2508 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55bed24c2568 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55bed24c25d0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55bed24c2638 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55bed24c26a0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55bed24c2708 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55bed24c2768 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55bed24c27c8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55bed24c2830 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55bed24c28b8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55bed24c2508 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55bed24d2c30 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55bed24c2768 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55bed24d3670 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55bed24d36d0 <col:21, line:755:5>
|-CXXConstructorDecl 0x55bed24c2a58 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55bed24c2998 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55bed24c2b50 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55bed24c2d38 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55bed24c2c40 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55bed24c3008 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55bed24c2df0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55bed24c2e68 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55bed24c2ee0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bed24c3228 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55bed24c30d8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55bed24c3150 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55bed24cb808 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55bed24c32e8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55bed24c3360 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55bed24c33d8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55bed24cb960 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55bed24cb8d0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bed24cbaa8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55bed24cba18 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55bed24cbba0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed24d3770 prev 0x55bed24b0030 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x55bed24d38a8 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x55bed24d3938 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x55bed24d39e0 <line:780:5, col:62> col:55 data 'unsigned char *() const'
| |-NoInlineAttr 0x55bed24d3a80 <col:20>
| `-OptimizeNoneAttr 0x55bed24d3ad8 <col:30>
|-CXXMethodDecl 0x55bed24d3b28 <line:781:5, col:66> col:55 used end_data 'unsigned char *() const'
| |-NoInlineAttr 0x55bed24d3bc8 <col:20>
| `-OptimizeNoneAttr 0x55bed24d3c20 <col:30>
|-CXXMethodDecl 0x55bed24d3c70 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55bed24d3d38 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55bed24d3e00 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55bed24d3f18 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x55bed24d3fe0 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x55bed24d4080 <col:20>
| `-OptimizeNoneAttr 0x55bed24d40d8 <col:30>
|-CXXMethodDecl 0x55bed24d4148 <line:787:5, col:62> col:50 used ip_header 'click_ip *() const'
| |-NoInlineAttr 0x55bed24d41e8 <col:20>
| `-OptimizeNoneAttr 0x55bed24d4240 <col:30>
|-CXXMethodDecl 0x55bed24d42e8 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x55bed24d4388 <col:20>
| `-OptimizeNoneAttr 0x55bed24d43e0 <col:30>
|-CXXMethodDecl 0x55bed24d4430 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55bed24d4548 <line:790:5, col:38> col:24 used icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x55bed24d4668 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x55bed24d4788 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x55bed24d4850 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x55bed24d48f0 <col:62> "" ""
|-AccessSpecDecl 0x55bed24d4960 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x55bed24d49c0 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x55bed24d55b8 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x55bed24d57e0 <col:29, col:31>
|-CXXMethodDecl 0x55bed24d4a88 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x55bed24d4bc8 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x55bed24d4b38 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x55bed24d4cc0 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x55bed24d57f0 <col:23, col:25>
|-CXXMethodDecl 0x55bed24d4e78 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x55bed24d4db0 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x55bed24d5148 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55bed24d4f30 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55bed24d4fa8 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55bed24d5020 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bed24d52d8 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x55bed24d5210 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x55bed24d53d0 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x55bed24d5438 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x55bed24d5438
  `-ParmVarDecl 0x55bed24d5548 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed2501e38 prev 0x55bed24afcc0 <../dummy_inc/clicknet/icmp.h:17:1, line:23:1> line:17:8 referenced struct click_icmp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55bed2501f30 <col:1, col:8> col:8 implicit struct click_icmp
|-FieldDecl 0x55bed2501fd0 <line:18:5, col:13> col:13 referenced icmp_type 'uint8_t':'unsigned char'
|-FieldDecl 0x55bed2502030 <line:19:5, col:13> col:13 icmp_code 'uint8_t':'unsigned char'
|-FieldDecl 0x55bed2502090 <line:20:5, col:14> col:14 referenced icmp_cksum 'uint16_t':'unsigned short'
`-FieldDecl 0x55bed25020f0 <line:21:5, col:14> col:14 padding 'uint32_t':'unsigned int'

Layout: <CGRecordLayout
  LLVMType:%struct.click_icmp = type { i8, i8, i16, i32 }
  NonVirtualBaseLLVMType:%struct.click_icmp = type { i8, i8, i16, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed221dd08 </usr/include/netinet/in.h:31:1, line:34:3> line:31:8 struct in_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bed221de28 <col:1, col:8> col:8 implicit struct in_addr
|-FieldDecl 0x55bed221def0 <line:33:5, col:15> col:15 referenced s_addr 'in_addr_t':'unsigned int'
|-CXXConstructorDecl 0x55bed22ee4c0 <line:31:8> col:8 implicit used in_addr 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55bed22f37d8 <col:8>
|-CXXConstructorDecl 0x55bed22ee5c8 <col:8> col:8 implicit used constexpr in_addr 'void (const in_addr &) noexcept' inline default trivial
| |-ParmVarDecl 0x55bed22ee6d8 <col:8> col:8 used 'const in_addr &'
| |-CXXCtorInitializer Field 0x55bed221def0 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x55bed2732fc0 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55bed2732f90 <col:8> 'const in_addr_t':'const unsigned int' lvalue .s_addr 0x55bed221def0
| |     `-DeclRefExpr 0x55bed2732f70 <col:8> 'const in_addr' lvalue ParmVar 0x55bed22ee6d8 '' 'const in_addr &'
| `-CompoundStmt 0x55bed2733008 <col:8>
|-CXXConstructorDecl 0x55bed22ee778 <col:8> col:8 implicit used constexpr in_addr 'void (in_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55bed22ee888 <col:8> col:8 used 'in_addr &&'
| |-CXXCtorInitializer Field 0x55bed221def0 's_addr' 'in_addr_t':'unsigned int'
| | `-ImplicitCastExpr 0x55bed22f39f0 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55bed22f39c0 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x55bed221def0
| |     `-CXXStaticCastExpr 0x55bed22f3990 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
| |       `-DeclRefExpr 0x55bed22f3960 <col:8> 'in_addr' lvalue ParmVar 0x55bed22ee888 '' 'in_addr &&'
| `-CompoundStmt 0x55bed22f3a38 <col:8>
|-CXXDestructorDecl 0x55bed22f3c70 <col:8> col:8 implicit referenced ~in_addr 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55bed2735708 <col:8> col:8 implicit constexpr operator= 'in_addr &(const in_addr &)' inline default trivial noexcept-unevaluated 0x55bed2735708
| `-ParmVarDecl 0x55bed2735818 <col:8> col:8 'const in_addr &'
`-CXXMethodDecl 0x55bed2735888 <col:8> col:8 implicit used constexpr operator= 'in_addr &(in_addr &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55bed2735998 <col:8> col:8 used 'in_addr &&'
  `-CompoundStmt 0x55bed2735c50 <col:8>
    |-BinaryOperator 0x55bed2735bf8 <col:8> 'in_addr_t':'unsigned int' lvalue '='
    | |-MemberExpr 0x55bed2735bb0 <col:8> 'in_addr_t':'unsigned int' lvalue ->s_addr 0x55bed221def0
    | | `-CXXThisExpr 0x55bed2735ba0 <col:8> 'in_addr *' this
    | `-ImplicitCastExpr 0x55bed2735be0 <col:8> 'in_addr_t':'unsigned int' <LValueToRValue>
    |   `-MemberExpr 0x55bed2735b70 <col:8> 'in_addr_t':'unsigned int' xvalue .s_addr 0x55bed221def0
    |     `-CXXStaticCastExpr 0x55bed2735b40 <col:8> 'in_addr' xvalue static_cast<struct in_addr &&> <NoOp>
    |       `-DeclRefExpr 0x55bed2735b10 <col:8> 'in_addr' lvalue ParmVar 0x55bed2735998 '' 'in_addr &&'
    `-ReturnStmt 0x55bed2735c40 <col:8>
      `-UnaryOperator 0x55bed2735c28 <col:8> 'in_addr' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x55bed2735c18 <col:8> 'in_addr *' this

Layout: <CGRecordLayout
  LLVMType:%struct.in_addr = type { i32 }
  NonVirtualBaseLLVMType:%struct.in_addr = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed22e71b8 <../dummy_inc/clicknet/ip.h:23:1, line:52:1> line:23:8 struct click_ip definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55bed22e72d8 <col:1, col:8> col:8 implicit struct click_ip
|-FieldDecl 0x55bed22e73c0 <line:28:5, col:22> col:14 referenced ip_hl 'unsigned int'
| `-ConstantExpr 0x55bed22e73a0 <col:22> 'int' Int: 4
|   `-IntegerLiteral 0x55bed22e7368 <col:22> 'int' 4
|-FieldDecl 0x55bed22e7468 <line:29:5, col:21> col:14 referenced ip_v 'unsigned int'
| `-ConstantExpr 0x55bed22e7448 <col:21> 'int' Int: 4
|   `-IntegerLiteral 0x55bed22e7410 <col:21> 'int' 4
|-FieldDecl 0x55bed22e74c8 <line:33:5, col:13> col:13 ip_tos 'uint8_t':'unsigned char'
|-FieldDecl 0x55bed22e7528 <line:40:5, col:14> col:14 ip_len 'uint16_t':'unsigned short'
|-FieldDecl 0x55bed22e7588 <line:41:5, col:14> col:14 ip_id 'uint16_t':'unsigned short'
|-FieldDecl 0x55bed22e75e8 <line:42:5, col:14> col:14 referenced ip_off 'uint16_t':'unsigned short'
|-FieldDecl 0x55bed22e7648 <line:47:5, col:13> col:13 ip_ttl 'uint8_t':'unsigned char'
|-FieldDecl 0x55bed22e76a8 <line:48:5, col:13> col:13 referenced ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x55bed22e7708 <line:49:5, col:14> col:14 referenced ip_sum 'uint16_t':'unsigned short'
|-FieldDecl 0x55bed22e7778 <line:50:5, col:20> col:20 referenced ip_src 'struct in_addr':'in_addr'
`-FieldDecl 0x55bed22e77e8 <line:51:5, col:20> col:20 referenced ip_dst 'struct in_addr':'in_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  NonVirtualBaseLLVMType:%struct.click_ip = type { i8, i8, i16, i16, i16, i8, i8, i16, %struct.in_addr, %struct.in_addr }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping AST Record Layout
         0 | struct click_udp
         0 |   uint16_t uh_sport
         2 |   uint16_t uh_dport
         4 |   uint16_t uh_ulen
         6 |   uint16_t uh_sum
           | [sizeof=8, dsize=8, align=2,
           |  nvsize=8, nvalign=2]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed2501b18 prev 0x55bed24afed0 <../dummy_inc/clicknet/udp.h:11:1, line:16:1> line:11:8 referenced struct click_udp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55bed2501c10 <col:1, col:8> col:8 implicit struct click_udp
|-FieldDecl 0x55bed2501cb0 <line:12:5, col:14> col:14 referenced uh_sport 'uint16_t':'unsigned short'
|-FieldDecl 0x55bed2501d10 <line:13:5, col:14> col:14 referenced uh_dport 'uint16_t':'unsigned short'
|-FieldDecl 0x55bed2501d70 <line:14:5, col:14> col:14 uh_ulen 'uint16_t':'unsigned short'
`-FieldDecl 0x55bed2501dd0 <line:15:5, col:14> col:14 referenced uh_sum 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_udp = type { i16, i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_udp = type { i16, i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_icmp_sequenced
         0 |   uint8_t icmp_type
         1 |   uint8_t icmp_code
         2 |   uint16_t icmp_cksum
         4 |   uint16_t icmp_identifier
         6 |   uint16_t icmp_sequence
           | [sizeof=8, dsize=8, align=2,
           |  nvsize=8, nvalign=2]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed2502158 <../dummy_inc/clicknet/icmp.h:27:1, line:33:1> line:27:8 referenced struct click_icmp_sequenced definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55bed2502278 <col:1, col:8> col:8 implicit struct click_icmp_sequenced
|-FieldDecl 0x55bed2502318 <line:28:5, col:13> col:13 referenced icmp_type 'uint8_t':'unsigned char'
|-FieldDecl 0x55bed2502378 <line:29:5, col:13> col:13 icmp_code 'uint8_t':'unsigned char'
|-FieldDecl 0x55bed25023d8 <line:30:5, col:14> col:14 referenced icmp_cksum 'uint16_t':'unsigned short'
|-FieldDecl 0x55bed2502438 <line:31:5, col:14> col:14 referenced icmp_identifier 'uint16_t':'unsigned short'
`-FieldDecl 0x55bed2502498 <line:32:5, col:14> col:14 icmp_sequence 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_icmp_sequenced = type { i8, i8, i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_icmp_sequenced = type { i8, i8, i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPRewriterFlow
         0 |   class IPRewriterEntry [2] _e
        48 |   uint16_t _ip_csum_delta
        50 |   uint16_t _udp_csum_delta
        52 |   click_jiffies_t _expiry_j
   56:0-31 |   size_t _place
        60 |   uint8_t _ip_p
        61 |   uint8_t _tflags
        62 |   _Bool _guaranteed
        63 |   uint8_t _reply_anno
        64 |   class IPRewriterInput * _owner
           | [sizeof=72, dsize=72, align=8,
           |  nvsize=72, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPRewriterPattern
         0 |   class IPAddress _saddr
         0 |     uint32_t _addr
         4 |   int _sport
         8 |   class IPAddress _daddr
         8 |     uint32_t _addr
        12 |   int _dport
        16 |   uint32_t _variation_top
        20 |   uint32_t _next_variation
        24 |   _Bool _is_napt
        25 |   _Bool _sequential
        26 |   _Bool _same_first
        28 |   int _refcount
           | [sizeof=32, dsize=32, align=4,
           |  nvsize=32, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed259ff20 <../elements/ip/iprwpattern.hh:12:1, line:68:1> line:12:7 class IPRewriterPattern definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bed25a0038 <col:1, col:7> col:7 implicit referenced class IPRewriterPattern
|-AccessSpecDecl 0x55bed25a00c8 <col:27, col:33> col:27 public
|-CXXConstructorDecl 0x55bed25a0638 <line:14:5, line:17:27> line:14:5 IPRewriterPattern 'void (const IPAddress &, int, const IPAddress &, int, bool, bool, bool, uint32_t)'
| |-ParmVarDecl 0x55bed25a0100 <col:23, col:40> col:40 saddr 'const IPAddress &'
| |-ParmVarDecl 0x55bed25a0180 <col:47, col:51> col:51 sport 'int'
| |-ParmVarDecl 0x55bed25a01f8 <line:15:9, col:26> col:26 daddr 'const IPAddress &'
| |-ParmVarDecl 0x55bed25a0278 <col:33, col:37> col:37 dport 'int'
| |-ParmVarDecl 0x55bed25a02f0 <line:16:9, col:14> col:14 is_napt 'bool'
| |-ParmVarDecl 0x55bed25a0368 <col:23, col:28> col:28 sequential 'bool'
| |-ParmVarDecl 0x55bed25a03e0 <col:40, col:45> col:45 same_first 'bool'
| `-ParmVarDecl 0x55bed25a0458 <line:17:9, col:18> col:18 variation 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bed25a0b18 <line:18:5, line:19:45> line:18:17 parse 'bool (const Vector<String> &, IPRewriterPattern **, Element *, ErrorHandler *)' static
| |-ParmVarDecl 0x55bed25a0830 <col:23, col:45> col:45 words 'const Vector<String> &'
| |-ParmVarDecl 0x55bed25a08e0 <col:52, col:72> col:72 result 'IPRewriterPattern **'
| |-ParmVarDecl 0x55bed25a0958 <line:19:9, col:18> col:18 context 'Element *'
| `-ParmVarDecl 0x55bed25a09d0 <col:27, col:41> col:41 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55bed25a0f98 <line:20:5, line:21:42> line:20:17 parse_ports 'bool (const Vector<String> &, IPRewriterInput *, Element *, ErrorHandler *)' static
| |-ParmVarDecl 0x55bed25a0cc0 <col:29, col:51> col:51 words 'const Vector<String> &'
| |-ParmVarDecl 0x55bed25a0d68 <col:58, col:75> col:75 input 'IPRewriterInput *'
| |-ParmVarDecl 0x55bed25a0de0 <line:21:8, col:17> col:17 model 'Element *'
| `-ParmVarDecl 0x55bed25a0e58 <col:24, col:38> col:38 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55bed25a12c8 <line:22:5, line:23:42> line:22:17 parse_with_ports 'bool (const String &, IPRewriterInput *, Element *, ErrorHandler *)' static
| |-ParmVarDecl 0x55bed25a1068 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55bed25a10e0 <col:53, col:70> col:70 input 'IPRewriterInput *'
| |-ParmVarDecl 0x55bed25a1158 <line:23:6, col:15> col:15 context 'Element *'
| `-ParmVarDecl 0x55bed25a11d0 <col:24, col:38> col:38 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55bed25a13a8 <line:25:5, line:27:5> line:25:10 use 'void ()'
| `-CompoundStmt 0x55bed25a2700 <col:16, line:27:5>
|   `-UnaryOperator 0x55bed25a26e8 <line:26:2, col:11> 'int' postfix '++'
|     `-MemberExpr 0x55bed25a26b8 <col:2> 'int' lvalue ->_refcount 0x55bed25a22e8
|       `-CXXThisExpr 0x55bed25a26a8 <col:2> 'IPRewriterPattern *' implicit this
|-CXXMethodDecl 0x55bed25a1468 <line:28:5, line:31:5> line:28:10 unuse 'void ()'
| `-CompoundStmt 0x55bed25a28f8 <col:18, line:31:5>
|   `-IfStmt 0x55bed25a28e0 <line:29:2, line:30:13>
|     |-BinaryOperator 0x55bed25a27a8 <line:29:6, col:21> 'bool' '<='
|     | |-ImplicitCastExpr 0x55bed25a2790 <col:6, col:8> 'int' <LValueToRValue>
|     | | `-UnaryOperator 0x55bed25a2758 <col:6, col:8> 'int' lvalue prefix '--'
|     | |   `-MemberExpr 0x55bed25a2728 <col:8> 'int' lvalue ->_refcount 0x55bed25a22e8
|     | |     `-CXXThisExpr 0x55bed25a2718 <col:8> 'IPRewriterPattern *' implicit this
|     | `-IntegerLiteral 0x55bed25a2770 <col:21> 'int' 0
|     `-CXXDeleteExpr 0x55bed25a28c0 <line:30:6, col:13> 'void' Function 0x55bed20dab58 'operator delete' 'void (void *) noexcept'
|       `-CXXThisExpr 0x55bed25a27c8 <col:13> 'IPRewriterPattern *' this
|-CXXConversionDecl 0x55bed25a1568 <line:33:5, line:35:5> line:33:5 operator bool 'bool () const'
| `-CompoundStmt 0x55bed25a2be0 <col:27, line:35:5>
|   `-ReturnStmt 0x55bed25a2bd0 <line:34:2, col:39>
|     `-BinaryOperator 0x55bed25a2bb0 <col:9, col:39> 'bool' '||'
|       |-BinaryOperator 0x55bed25a2b20 <col:9, col:29> 'bool' '||'
|       | |-BinaryOperator 0x55bed25a2a40 <col:9, col:19> 'bool' '||'
|       | | |-ImplicitCastExpr 0x55bed25a29f8 <col:9> 'bool' <IntegralToBoolean>
|       | | | `-ImplicitCastExpr 0x55bed25a29e0 <col:9> 'uint32_t':'unsigned int' <UserDefinedConversion>
|       | | |   `-CXXMemberCallExpr 0x55bed25a29c0 <col:9> 'uint32_t':'unsigned int'
|       | | |     `-MemberExpr 0x55bed25a2990 <col:9> '<bound member function type>' .operator unsigned int 0x55bed22eb428
|       | | |       `-MemberExpr 0x55bed25a2920 <col:9> 'const IPAddress' lvalue ->_saddr 0x55bed25a1f70
|       | | |         `-CXXThisExpr 0x55bed25a2910 <col:9> 'const IPRewriterPattern *' implicit this
|       | | `-ImplicitCastExpr 0x55bed25a2a28 <col:19> 'bool' <IntegralToBoolean>
|       | |   `-ImplicitCastExpr 0x55bed25a2a10 <col:19> 'int' <LValueToRValue>
|       | |     `-MemberExpr 0x55bed25a2960 <col:19> 'const int' lvalue ->_sport 0x55bed25a1fd8
|       | |       `-CXXThisExpr 0x55bed25a2950 <col:19> 'const IPRewriterPattern *' implicit this
|       | `-ImplicitCastExpr 0x55bed25a2b08 <col:29> 'bool' <IntegralToBoolean>
|       |   `-ImplicitCastExpr 0x55bed25a2af0 <col:29> 'uint32_t':'unsigned int' <UserDefinedConversion>
|       |     `-CXXMemberCallExpr 0x55bed25a2ad0 <col:29> 'uint32_t':'unsigned int'
|       |       `-MemberExpr 0x55bed25a2aa0 <col:29> '<bound member function type>' .operator unsigned int 0x55bed22eb428
|       |         `-MemberExpr 0x55bed25a2a70 <col:29> 'const IPAddress' lvalue ->_daddr 0x55bed25a2038
|       |           `-CXXThisExpr 0x55bed25a2a60 <col:29> 'const IPRewriterPattern *' implicit this
|       `-ImplicitCastExpr 0x55bed25a2b98 <col:39> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x55bed25a2b80 <col:39> 'int' <LValueToRValue>
|           `-MemberExpr 0x55bed25a2b50 <col:39> 'const int' lvalue ->_dport 0x55bed25a20a0
|             `-CXXThisExpr 0x55bed25a2b40 <col:39> 'const IPRewriterPattern *' implicit this
|-CXXMethodDecl 0x55bed25a1638 <line:36:5, line:38:5> line:36:15 daddr 'IPAddress () const'
| `-CompoundStmt 0x55bed25a2c78 <col:29, line:38:5>
|   `-ReturnStmt 0x55bed25a2c68 <line:37:2, col:9>
|     `-CXXConstructExpr 0x55bed25a2c38 <col:9> 'IPAddress' 'void (const IPAddress &) noexcept'
|       `-MemberExpr 0x55bed25a2c08 <col:9> 'const IPAddress' lvalue ->_daddr 0x55bed25a2038
|         `-CXXThisExpr 0x55bed25a2bf8 <col:9> 'const IPRewriterPattern *' implicit this
|-CXXMethodDecl 0x55bed25a1d00 <line:40:5, line:41:57> line:40:9 rewrite_flowid 'int (const IPFlowID &, IPFlowID &, const HashContainer<IPRewriterEntry> &)'
| |-ParmVarDecl 0x55bed25a16e8 <col:24, col:40> col:40 flowid 'const IPFlowID &'
| |-ParmVarDecl 0x55bed25a1788 <col:48, col:58> col:58 rewritten_flowid 'IPFlowID &'
| `-ParmVarDecl 0x55bed25a1bd0 <line:41:10, col:48> col:48 reply_map 'const HashContainer<IPRewriterEntry> &'
|-CXXMethodDecl 0x55bed25a1dd8 <line:43:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x55bed25a1e98 <line:45:5, line:47:5> line:45:21 get_flow_id 'IPFlowID () const' inline
| `-CompoundStmt 0x55bed25a2f20 <col:41, line:47:5>
|   `-ReturnStmt 0x55bed25a2f10 <line:46:9, col:55>
|     `-ExprWithCleanups 0x55bed25a2ef8 <col:16, col:55> 'IPFlowID'
|       `-CXXConstructExpr 0x55bed25a2ec8 <col:16, col:55> 'IPFlowID' 'void (IPFlowID &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55bed25a2eb0 <col:16, col:55> 'IPFlowID' xvalue
|           `-CXXTemporaryObjectExpr 0x55bed25a2e60 <col:16, col:55> 'IPFlowID' 'void (IPAddress, uint16_t, IPAddress, uint16_t)'
|             |-CXXConstructExpr 0x55bed25a2da0 <col:25> 'IPAddress' 'void (const IPAddress &) noexcept'
|             | `-MemberExpr 0x55bed25a2cb0 <col:25> 'const IPAddress' lvalue ->_saddr 0x55bed25a1f70
|             |   `-CXXThisExpr 0x55bed25a2ca0 <col:25> 'const IPRewriterPattern *' implicit this
|             |-ImplicitCastExpr 0x55bed25a2de8 <col:33> 'uint16_t':'unsigned short' <IntegralCast>
|             | `-ImplicitCastExpr 0x55bed25a2dd0 <col:33> 'int' <LValueToRValue>
|             |   `-MemberExpr 0x55bed25a2cf0 <col:33> 'const int' lvalue ->_sport 0x55bed25a1fd8
|             |     `-CXXThisExpr 0x55bed25a2ce0 <col:33> 'const IPRewriterPattern *' implicit this
|             |-CXXConstructExpr 0x55bed25a2e00 <col:41> 'IPAddress' 'void (const IPAddress &) noexcept'
|             | `-MemberExpr 0x55bed25a2d30 <col:41> 'const IPAddress' lvalue ->_daddr 0x55bed25a2038
|             |   `-CXXThisExpr 0x55bed25a2d20 <col:41> 'const IPRewriterPattern *' implicit this
|             `-ImplicitCastExpr 0x55bed25a2e48 <col:49> 'uint16_t':'unsigned short' <IntegralCast>
|               `-ImplicitCastExpr 0x55bed25a2e30 <col:49> 'int' <LValueToRValue>
|                 `-MemberExpr 0x55bed25a2d70 <col:49> 'const int' lvalue ->_dport 0x55bed25a20a0
|                   `-CXXThisExpr 0x55bed25a2d60 <col:49> 'const IPRewriterPattern *' implicit this
|-AccessSpecDecl 0x55bed25a1f38 <line:49:1, col:8> col:1 private
|-FieldDecl 0x55bed25a1f70 <line:51:5, col:15> col:15 referenced _saddr 'IPAddress'
|-FieldDecl 0x55bed25a1fd8 <line:52:5, col:9> col:9 referenced _sport 'int'
|-FieldDecl 0x55bed25a2038 <line:53:5, col:15> col:15 referenced _daddr 'IPAddress'
|-FieldDecl 0x55bed25a20a0 <line:54:5, col:9> col:9 referenced _dport 'int'
|-FieldDecl 0x55bed25a2100 <line:56:5, col:14> col:14 _variation_top 'uint32_t':'unsigned int'
|-FieldDecl 0x55bed25a2160 <line:57:5, col:14> col:14 _next_variation 'uint32_t':'unsigned int'
|-FieldDecl 0x55bed25a21c0 <line:59:5, col:10> col:10 _is_napt 'bool'
|-FieldDecl 0x55bed25a2220 <line:60:5, col:10> col:10 _sequential 'bool'
|-FieldDecl 0x55bed25a2280 <line:61:5, col:10> col:10 _same_first 'bool'
|-FieldDecl 0x55bed25a22e8 <line:63:5, col:9> col:9 referenced _refcount 'int'
|-CXXConstructorDecl 0x55bed25a2438 <line:65:5, col:47> col:5 IPRewriterPattern 'void (const IPRewriterPattern &)'
| `-ParmVarDecl 0x55bed25a2378 <col:23, col:46> col:47 'const IPRewriterPattern &'
|-CXXMethodDecl 0x55bed25a25e8 <line:66:5, col:58> col:24 operator= 'IPRewriterPattern &(const IPRewriterPattern &)'
| `-ParmVarDecl 0x55bed25a24f8 <col:34, col:57> col:58 'const IPRewriterPattern &'
`-CXXDestructorDecl 0x55bed25a27d8 <line:12:7> col:7 implicit ~IPRewriterPattern 'void ()' inline default trivial noexcept-unevaluated 0x55bed25a27d8

Layout: <CGRecordLayout
  LLVMType:%class.IPRewriterPattern = type { %class.IPAddress, i32, %class.IPAddress, i32, i32, i32, i8, i8, i8, i32 }
  NonVirtualBaseLLVMType:%class.IPRewriterPattern = type { %class.IPAddress, i32, %class.IPAddress, i32, i32, i32, i8, i8, i8, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPMapper
         0 |   (IPMapper vtable pointer)
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed25ee7a0 prev 0x55bed25be400 <../elements/ip/iprewriterbase.hh:185:1, line:197:1> line:185:7 class IPMapper definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55bed25ee898 <col:1, col:7> col:7 implicit referenced class IPMapper
|-AccessSpecDecl 0x55bed25ee928 <col:18, col:24> col:18 public
|-CXXConstructorDecl 0x55bed25ee988 <line:187:5, col:18> col:5 IPMapper 'void ()'
| `-CompoundStmt 0x55bed25ef3a8 <col:16, col:18>
|-CXXDestructorDecl 0x55bed25eea78 <line:188:5, col:27> col:13 ~IPMapper 'void () noexcept' virtual
| `-CompoundStmt 0x55bed25ef3b8 <col:25, col:27>
|-CXXMethodDecl 0x55bed25eed48 <line:190:5, line:191:24> line:190:18 notify_rewriter 'void (IPRewriterBase *, IPRewriterInput *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55bed25eeb70 <col:34, col:50> col:50 user 'IPRewriterBase *'
| |-ParmVarDecl 0x55bed25eebe8 <col:56, col:73> col:73 input 'IPRewriterInput *'
| `-ParmVarDecl 0x55bed25eec60 <line:191:6, col:20> col:20 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55bed25ef100 <line:192:5, line:195:31> line:192:17 rewrite_flowid 'int (IPRewriterInput *, const IPFlowID &, IPFlowID &, Packet *, int)' virtual
| |-ParmVarDecl 0x55bed25eee10 <col:32, col:49> col:49 input 'IPRewriterInput *'
| |-ParmVarDecl 0x55bed25eee88 <line:193:11, col:27> col:27 flowid 'const IPFlowID &'
| |-ParmVarDecl 0x55bed25eef00 <line:194:11, col:21> col:21 rewritten_flowid 'IPFlowID &'
| |-ParmVarDecl 0x55bed25eef78 <line:195:11, col:19> col:19 p 'Packet *'
| `-ParmVarDecl 0x55bed25eeff8 <col:22, col:26> col:26 mapid 'int'
`-CXXMethodDecl 0x55bed25ef228 <line:185:7> col:7 implicit operator= 'IPMapper &(const IPMapper &)' inline default noexcept-unevaluated 0x55bed25ef228
  `-ParmVarDecl 0x55bed25ef338 <col:7> col:7 'const IPMapper &'

Layout: <CGRecordLayout
  LLVMType:%class.IPMapper = type { i32 (...)** }
  NonVirtualBaseLLVMType:%class.IPMapper = type { i32 (...)** }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed25bec88 <../elements/ip/iprewriterbase.hh:23:5, line:26:5> line:23:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-FieldDecl 0x55bed25bedb8 <line:24:2, col:21> col:21 referenced pattern 'IPRewriterPattern *'
|-FieldDecl 0x55bed25bee48 <line:25:2, col:12> col:12 mapper 'IPMapper *'
|-CXXConstructorDecl 0x55bed25bf908 <line:23:5> col:5 implicit used  'void () noexcept' inline default trivial
| `-CompoundStmt 0x55bed25bfd38 <col:5>
|-CXXConstructorDecl 0x55bed25bfa08 <col:5> col:5 implicit constexpr  'void (const IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5) &)' inline default trivial noexcept-unevaluated 0x55bed25bfa08
| `-ParmVarDecl 0x55bed25bfb18 <col:5> col:5 'const IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5) &'
`-CXXConstructorDecl 0x55bed25bfbb8 <col:5> col:5 implicit constexpr  'void (IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5) &&)' inline default trivial noexcept-unevaluated 0x55bed25bfbb8
  `-ParmVarDecl 0x55bed25bfcc8 <col:5> col:5 'IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5) &&'

Layout: <CGRecordLayout
  LLVMType:%union.anon.11 = type { %class.IPRewriterPattern* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed25be540 prev 0x55bed25a3130 <../elements/ip/iprewriterbase.hh:11:1, line:40:1> line:11:7 referenced class IPRewriterInput definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55bed25be638 <col:1, col:7> col:7 implicit referenced class IPRewriterInput
|-AccessSpecDecl 0x55bed25be6c8 <col:25, col:31> col:25 public
|-EnumDecl 0x55bed25be6f0 <line:12:5, line:14:5> line:12:5
| |-EnumConstantDecl 0x55bed25be7b0 <line:13:2> col:2 referenced i_drop 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:12:5)'
| |-EnumConstantDecl 0x55bed25be800 <col:10> col:10 i_nochange 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:12:5)'
| |-EnumConstantDecl 0x55bed25be850 <col:22> col:22 i_keep 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:12:5)'
| |-EnumConstantDecl 0x55bed25be8a0 <col:30> col:30 i_pattern 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:12:5)'
| `-EnumConstantDecl 0x55bed25be8f0 <col:41> col:41 i_mapper 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:12:5)'
|-FieldDecl 0x55bed25be978 <line:15:5, col:21> col:21 owner 'IPRewriterBase *'
|-FieldDecl 0x55bed25be9e0 <line:16:5, col:9> col:9 owner_input 'int'
|-FieldDecl 0x55bed25bea48 <line:17:5, col:9> col:9 kind 'int'
|-FieldDecl 0x55bed25beab0 <line:18:5, col:9> col:9 foutput 'int'
|-FieldDecl 0x55bed25beb10 <line:19:5, col:21> col:21 referenced reply_element 'IPRewriterBase *'
|-FieldDecl 0x55bed25beb78 <line:20:5, col:9> col:9 routput 'int'
|-FieldDecl 0x55bed25bebd8 <line:21:5, col:14> col:14 count 'uint32_t':'unsigned int'
|-FieldDecl 0x55bed25bec38 <line:22:5, col:14> col:14 failures 'uint32_t':'unsigned int'
|-CXXRecordDecl 0x55bed25bec88 <line:23:5, line:26:5> line:23:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FieldDecl 0x55bed25bedb8 <line:24:2, col:21> col:21 referenced pattern 'IPRewriterPattern *'
| |-FieldDecl 0x55bed25bee48 <line:25:2, col:12> col:12 mapper 'IPMapper *'
| |-CXXConstructorDecl 0x55bed25bf908 <line:23:5> col:5 implicit used  'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55bed25bfd38 <col:5>
| |-CXXConstructorDecl 0x55bed25bfa08 <col:5> col:5 implicit constexpr  'void (const IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5) &)' inline default trivial noexcept-unevaluated 0x55bed25bfa08
| | `-ParmVarDecl 0x55bed25bfb18 <col:5> col:5 'const IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5) &'
| `-CXXConstructorDecl 0x55bed25bfbb8 <col:5> col:5 implicit constexpr  'void (IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5) &&)' inline default trivial noexcept-unevaluated 0x55bed25bfbb8
|   `-ParmVarDecl 0x55bed25bfcc8 <col:5> col:5 'IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5) &&'
|-FieldDecl 0x55bed25bef08 <col:5, line:26:7> col:7 referenced u 'union (anonymous union at ../elements/ip/iprewriterbase.hh:23:5)':'IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5)'
|-CXXConstructorDecl 0x55bed25befa8 <line:28:5, line:31:5> line:28:5 IPRewriterInput 'void ()'
| |-CXXCtorInitializer Field 0x55bed25bea48 'kind' 'int'
| | `-ImplicitCastExpr 0x55bed25bf6b0 <line:29:9> 'int' <IntegralCast>
| |   `-DeclRefExpr 0x55bed25bf670 <col:9> 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:12:5)' EnumConstant 0x55bed25be7b0 'i_drop' 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:12:5)'
| |-CXXCtorInitializer Field 0x55bed25beab0 'foutput' 'int'
| | `-UnaryOperator 0x55bed25bf710 <col:26, col:27> 'int' prefix '-'
| |   `-IntegerLiteral 0x55bed25bf6f0 <col:27> 'int' 1
| |-CXXCtorInitializer Field 0x55bed25beb78 'routput' 'int'
| | `-UnaryOperator 0x55bed25bf790 <col:39, col:40> 'int' prefix '-'
| |   `-IntegerLiteral 0x55bed25bf770 <col:40> 'int' 1
| |-CXXCtorInitializer Field 0x55bed25bebd8 'count' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55bed25bf830 <col:50> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55bed25bf7f0 <col:50> 'int' 0
| |-CXXCtorInitializer Field 0x55bed25bec38 'failures' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55bed25bf8b0 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55bed25bf870 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x55bed25bef08 'u' 'union (anonymous union at ../elements/ip/iprewriterbase.hh:23:5)':'IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5)'
| | `-CXXConstructExpr 0x55bed25bfd48 <line:28:5> 'union (anonymous union at ../elements/ip/iprewriterbase.hh:23:5)':'IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5)' 'void () noexcept'
| `-CompoundStmt 0x55bed25bfe90 <line:29:66, line:31:5>
|   `-BinaryOperator 0x55bed25bfe70 <line:30:2, col:14> 'IPRewriterPattern *' lvalue '='
|     |-MemberExpr 0x55bed25bfe08 <col:2, col:4> 'IPRewriterPattern *' lvalue .pattern 0x55bed25bedb8
|     | `-MemberExpr 0x55bed25bfdd8 <col:2> 'union (anonymous union at ../elements/ip/iprewriterbase.hh:23:5)':'IPRewriterInput::(anonymous union at ../elements/ip/iprewriterbase.hh:23:5)' lvalue ->u 0x55bed25bef08
|     |   `-CXXThisExpr 0x55bed25bfdc8 <col:2> 'IPRewriterInput *' implicit this
|     `-ImplicitCastExpr 0x55bed25bfe58 <col:14> 'IPRewriterPattern *' <NullToPointer>
|       `-IntegerLiteral 0x55bed25bfe38 <col:14> 'int' 0
|-EnumDecl 0x55bed25bf050 <line:33:5, line:35:5> line:33:5
| |-EnumConstantDecl 0x55bed25bf150 <line:34:2, col:18> col:2 referenced mapid_default 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:33:5)'
| | `-ImplicitCastExpr 0x55bed25bf230 <col:18> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55bed25bf130 <col:18> 'int' Int: 0
| |     `-IntegerLiteral 0x55bed25bf110 <col:18> 'int' 0
| `-EnumConstantDecl 0x55bed25bf1e0 <col:21, col:44> col:21 mapid_iprewriter_udp 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:33:5)'
|   `-ImplicitCastExpr 0x55bed25bf248 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55bed25bf1c0 <col:44> 'int' Int: 1
|       `-IntegerLiteral 0x55bed25bf1a0 <col:44> 'int' 1
`-CXXMethodDecl 0x55bed25bf4e0 <line:37:5, line:39:46> line:37:44 rewrite_flowid 'int (const IPFlowID &, IPFlowID &, Packet *, int)'
  |-ParmVarDecl 0x55bed25bf270 <col:59, col:75> col:75 flowid 'const IPFlowID &'
  |-ParmVarDecl 0x55bed25bf2e8 <line:38:10, col:20> col:20 rewritten_flowid 'IPFlowID &'
  |-ParmVarDecl 0x55bed25bf360 <line:39:10, col:18> col:18 p 'Packet *'
  |-ParmVarDecl 0x55bed25bf3e0 <col:21, col:33> col:25 mapid 'int' cinit
  | `-ImplicitCastExpr 0x55bed25bf658 <col:33> 'int' <IntegralCast>
  |   `-DeclRefExpr 0x55bed25bf638 <col:33> 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:33:5)' EnumConstant 0x55bed25bf150 'mapid_default' 'IPRewriterInput::(anonymous enum at ../elements/ip/iprewriterbase.hh:33:5)'
  |-NoInlineAttr 0x55bed25bf5a0 <line:37:20>
  `-OptimizeNoneAttr 0x55bed25bf5f8 <col:30>

Layout: <CGRecordLayout
  LLVMType:%class.IPRewriterInput = type { %class.IPRewriterBase*, i32, i32, i32, %class.IPRewriterBase*, i32, i32, i32, %union.anon.11 }
  NonVirtualBaseLLVMType:%class.IPRewriterInput = type { %class.IPRewriterBase*, i32, i32, i32, %class.IPRewriterBase*, i32, i32, i32, %union.anon.11 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed25a5a70 prev 0x55bed25a2ff0 <../elements/ip/iprwmapping.hh:68:1, line:174:1> line:68:7 referenced class IPRewriterFlow definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55bed25a5b68 <col:1, col:7> col:7 implicit referenced class IPRewriterFlow
|-AccessSpecDecl 0x55bed25a5bf8 <col:24, col:30> col:24 public
|-CXXConstructorDecl 0x55bed25a6018 <line:70:5, line:72:61> line:70:5 IPRewriterFlow 'void (IPRewriterInput *, const IPFlowID &, const IPFlowID &, uint8_t, bool, click_jiffies_t)'
| |-ParmVarDecl 0x55bed25a5c30 <col:20, col:37> col:37 owner 'IPRewriterInput *'
| |-ParmVarDecl 0x55bed25a5ca8 <col:44, col:60> col:60 flowid 'const IPFlowID &'
| |-ParmVarDecl 0x55bed25a5d20 <line:71:6, col:22> col:22 rewritten_flowid 'const IPFlowID &'
| |-ParmVarDecl 0x55bed25a5d98 <line:72:6, col:14> col:14 ip_p 'uint8_t':'unsigned char'
| |-ParmVarDecl 0x55bed25a5e10 <col:20, col:25> col:25 guaranteed 'bool'
| `-ParmVarDecl 0x55bed25a5e88 <col:37, col:53> col:53 expiry_j 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x55bed25a61f8 <line:74:5, line:76:5> line:74:22 used entry 'IPRewriterEntry &(bool)'
| |-ParmVarDecl 0x55bed25a6100 <col:28, col:33> col:33 used direction 'bool'
| `-CompoundStmt 0x55bed25a9f98 <col:44, line:76:5>
|   `-ReturnStmt 0x55bed25a9f88 <line:75:2, col:21>
|     `-ArraySubscriptExpr 0x55bed25a9f68 <col:9, col:21> 'IPRewriterEntry' lvalue
|       |-ImplicitCastExpr 0x55bed25a9f38 <col:9> 'IPRewriterEntry *' <ArrayToPointerDecay>
|       | `-MemberExpr 0x55bed25a9ee8 <col:9> 'IPRewriterEntry [2]' lvalue ->_e 0x55bed25a9808
|       |   `-CXXThisExpr 0x55bed25a9ed8 <col:9> 'IPRewriterFlow *' implicit this
|       `-ImplicitCastExpr 0x55bed25a9f50 <col:12> 'bool' <LValueToRValue>
|         `-DeclRefExpr 0x55bed25a9f18 <col:12> 'bool' lvalue ParmVar 0x55bed25a6100 'direction' 'bool'
|-CXXMethodDecl 0x55bed25a63a8 <line:77:5, line:79:5> line:77:28 entry 'const IPRewriterEntry &(bool) const'
| |-ParmVarDecl 0x55bed25a62b0 <col:34, col:39> col:39 used direction 'bool'
| `-CompoundStmt 0x55bed25aa0a8 <col:56, line:79:5>
|   `-ReturnStmt 0x55bed25aa098 <line:78:2, col:21>
|     `-ArraySubscriptExpr 0x55bed25aa078 <col:9, col:21> 'const IPRewriterEntry' lvalue
|       |-ImplicitCastExpr 0x55bed25aa048 <col:9> 'const IPRewriterEntry *' <ArrayToPointerDecay>
|       | `-MemberExpr 0x55bed25a9fc0 <col:9> 'IPRewriterEntry const[2]' lvalue ->_e 0x55bed25a9808
|       |   `-CXXThisExpr 0x55bed25a9fb0 <col:9> 'const IPRewriterFlow *' implicit this
|       `-ImplicitCastExpr 0x55bed25aa060 <col:12> 'bool' <LValueToRValue>
|         `-DeclRefExpr 0x55bed25a9ff0 <col:12> 'bool' lvalue ParmVar 0x55bed25a62b0 'direction' 'bool'
|-CXXMethodDecl 0x55bed25a6470 <line:83:5, line:85:5> line:83:21 used expiry 'click_jiffies_t () const'
| `-CompoundStmt 0x55bed25aa128 <col:36, line:85:5>
|   `-ReturnStmt 0x55bed25aa118 <line:84:2, col:9>
|     `-ImplicitCastExpr 0x55bed25aa100 <col:9> 'click_jiffies_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55bed25aa0d0 <col:9> 'const click_jiffies_t':'const unsigned int' lvalue ->_expiry_j 0x55bed25a9928
|         `-CXXThisExpr 0x55bed25aa0c0 <col:9> 'const IPRewriterFlow *' implicit this
|-CXXMethodDecl 0x55bed25a6618 <line:89:5, line:91:5> line:89:10 expired 'bool (click_jiffies_t) const'
| |-ParmVarDecl 0x55bed25a6520 <col:18, col:34> col:34 used now_j 'click_jiffies_t':'unsigned int'
| `-CompoundStmt 0x55bed25aa348 <col:47, line:91:5>
|   `-ReturnStmt 0x55bed25aa338 <line:90:2, col:67>
|     `-UnaryOperator 0x55bed25aa320 <col:9, col:67> 'bool' prefix '!' cannot overflow
|       `-ParenExpr 0x55bed25aa300 <col:10, col:67> 'bool'
|         `-BinaryOperator 0x55bed25aa2e0 <col:11, col:66> 'bool' '<'
|           |-CStyleCastExpr 0x55bed25aa298 <col:11, col:62> 'click_jiffies_difference_t':'int' <NoOp>
|           | `-ImplicitCastExpr 0x55bed25aa280 <col:40, col:62> 'click_jiffies_difference_t':'int' <IntegralCast> part_of_explicit_cast
|           |   `-ParenExpr 0x55bed25aa260 <col:40, col:62> 'unsigned int'
|           |     `-BinaryOperator 0x55bed25aa210 <col:41, col:61> 'unsigned int' '-'
|           |       |-ImplicitCastExpr 0x55bed25aa1e0 <col:41, col:47> 'click_jiffies_t':'unsigned int' <LValueToRValue>
|           |       | `-ParenExpr 0x55bed25aa160 <col:41, col:47> 'click_jiffies_t':'unsigned int' lvalue
|           |       |   `-DeclRefExpr 0x55bed25aa140 <col:42> 'click_jiffies_t':'unsigned int' lvalue ParmVar 0x55bed25a6520 'now_j' 'click_jiffies_t':'unsigned int'
|           |       `-ImplicitCastExpr 0x55bed25aa1f8 <col:51, col:61> 'click_jiffies_t':'unsigned int' <LValueToRValue>
|           |         `-ParenExpr 0x55bed25aa1c0 <col:51, col:61> 'const click_jiffies_t':'const unsigned int' lvalue
|           |           `-MemberExpr 0x55bed25aa190 <col:52> 'const click_jiffies_t':'const unsigned int' lvalue ->_expiry_j 0x55bed25a9928
|           |             `-CXXThisExpr 0x55bed25aa180 <col:52> 'const IPRewriterFlow *' implicit this
|           `-IntegerLiteral 0x55bed25aa2c0 <col:66> 'int' 0
|-CXXMethodDecl 0x55bed25a66e0 <line:94:5, line:96:5> line:94:10 guaranteed 'bool () const'
| `-CompoundStmt 0x55bed25aa3c8 <col:29, line:96:5>
|   `-ReturnStmt 0x55bed25aa3b8 <line:95:2, col:9>
|     `-ImplicitCastExpr 0x55bed25aa3a0 <col:9> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55bed25aa370 <col:9> 'const bool' lvalue ->_guaranteed 0x55bed25a9ae8
|         `-CXXThisExpr 0x55bed25aa360 <col:9> 'const IPRewriterFlow *' implicit this
|-CXXMethodDecl 0x55bed25a69c8 <line:102:5, line:103:34> line:102:10 used change_expiry 'void (IPRewriterHeap *, bool, click_jiffies_t)'
| |-ParmVarDecl 0x55bed25a67b8 <col:24, col:40> col:40 h 'IPRewriterHeap *'
| |-ParmVarDecl 0x55bed25a6830 <col:43, col:48> col:48 guaranteed 'bool'
| `-ParmVarDecl 0x55bed25a68a8 <line:103:10, col:26> col:26 expiry_j 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x55bed25a6d68 <line:114:5, line:118:5> line:114:10 change_expiry_by_timeout 'void (IPRewriterHeap *, click_jiffies_t, const uint32_t *)'
| |-ParmVarDecl 0x55bed25a6a90 <col:35, col:51> col:51 used h 'IPRewriterHeap *'
| |-ParmVarDecl 0x55bed25a6b08 <col:54, col:70> col:70 used now_j 'click_jiffies_t':'unsigned int'
| |-ParmVarDecl 0x55bed25a6c40 <line:115:7, col:32> col:22 used timeouts 'const uint32_t *':'const uint32_t *'
| `-CompoundStmt 0x55bed25aa868 <col:35, line:118:5>
|   |-DeclStmt 0x55bed25aa638 <line:116:2, col:60>
|   | `-VarDecl 0x55bed25aa3f0 <col:2, col:59> col:11 used timeout 'uint32_t':'unsigned int' cinit
|   |   `-ImplicitCastExpr 0x55bed25aa620 <col:21, col:59> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     `-ConditionalOperator 0x55bed25aa5f0 <col:21, col:59> 'const uint32_t':'const unsigned int' lvalue
|   |       |-ImplicitCastExpr 0x55bed25aa5d8 <col:21, col:31> 'bool' <IntegralToBoolean>
|   |       | `-ImplicitCastExpr 0x55bed25aa5c0 <col:21, col:31> 'uint32_t':'unsigned int' <LValueToRValue>
|   |       |   `-ArraySubscriptExpr 0x55bed25aa4b0 <col:21, col:31> 'const uint32_t':'const unsigned int' lvalue
|   |       |     |-ImplicitCastExpr 0x55bed25aa498 <col:21> 'const uint32_t *':'const uint32_t *' <LValueToRValue>
|   |       |     | `-DeclRefExpr 0x55bed25aa458 <col:21> 'const uint32_t *':'const uint32_t *' lvalue ParmVar 0x55bed25a6c40 'timeouts' 'const uint32_t *':'const uint32_t *'
|   |       |     `-IntegerLiteral 0x55bed25aa478 <col:30> 'int' 1
|   |       |-ArraySubscriptExpr 0x55bed25aa528 <col:35, col:45> 'const uint32_t':'const unsigned int' lvalue
|   |       | |-ImplicitCastExpr 0x55bed25aa510 <col:35> 'const uint32_t *':'const uint32_t *' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x55bed25aa4d0 <col:35> 'const uint32_t *':'const uint32_t *' lvalue ParmVar 0x55bed25a6c40 'timeouts' 'const uint32_t *':'const uint32_t *'
|   |       | `-IntegerLiteral 0x55bed25aa4f0 <col:44> 'int' 1
|   |       `-ArraySubscriptExpr 0x55bed25aa5a0 <col:49, col:59> 'const uint32_t':'const unsigned int' lvalue
|   |         |-ImplicitCastExpr 0x55bed25aa588 <col:49> 'const uint32_t *':'const uint32_t *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x55bed25aa548 <col:49> 'const uint32_t *':'const uint32_t *' lvalue ParmVar 0x55bed25a6c40 'timeouts' 'const uint32_t *':'const uint32_t *'
|   |         `-IntegerLiteral 0x55bed25aa568 <col:58> 'int' 0
|   `-CXXMemberCallExpr 0x55bed25aa818 <line:117:2, col:49> 'void'
|     |-MemberExpr 0x55bed25aa660 <col:2> '<bound member function type>' ->change_expiry 0x55bed25a69c8
|     | `-CXXThisExpr 0x55bed25aa650 <col:2> 'IPRewriterFlow *' implicit this
|     |-ImplicitCastExpr 0x55bed25aa850 <col:16> 'IPRewriterHeap *' <LValueToRValue>
|     | `-DeclRefExpr 0x55bed25aa690 <col:16> 'IPRewriterHeap *' lvalue ParmVar 0x55bed25a6a90 'h' 'IPRewriterHeap *'
|     |-UnaryOperator 0x55bed25aa770 <col:19, col:31> 'bool' prefix '!' cannot overflow
|     | `-UnaryOperator 0x55bed25aa758 <col:20, col:31> 'bool' prefix '!' cannot overflow
|     |   `-ImplicitCastExpr 0x55bed25aa740 <col:21, col:31> 'bool' <IntegralToBoolean>
|     |     `-ImplicitCastExpr 0x55bed25aa728 <col:21, col:31> 'uint32_t':'unsigned int' <LValueToRValue>
|     |       `-ArraySubscriptExpr 0x55bed25aa708 <col:21, col:31> 'const uint32_t':'const unsigned int' lvalue
|     |         |-ImplicitCastExpr 0x55bed25aa6f0 <col:21> 'const uint32_t *':'const uint32_t *' <LValueToRValue>
|     |         | `-DeclRefExpr 0x55bed25aa6b0 <col:21> 'const uint32_t *':'const uint32_t *' lvalue ParmVar 0x55bed25a6c40 'timeouts' 'const uint32_t *':'const uint32_t *'
|     |         `-IntegerLiteral 0x55bed25aa6d0 <col:30> 'int' 1
|     `-BinaryOperator 0x55bed25aa7f8 <col:34, col:42> 'unsigned int' '+'
|       |-ImplicitCastExpr 0x55bed25aa7c8 <col:34> 'click_jiffies_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55bed25aa788 <col:34> 'click_jiffies_t':'unsigned int' lvalue ParmVar 0x55bed25a6b08 'now_j' 'click_jiffies_t':'unsigned int'
|       `-ImplicitCastExpr 0x55bed25aa7e0 <col:42> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55bed25aa7a8 <col:42> 'uint32_t':'unsigned int' lvalue Var 0x55bed25aa3f0 'timeout' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55bed25a6e98 <line:120:5, line:122:5> line:120:13 ip_p 'uint8_t () const'
| `-CompoundStmt 0x55bed25aa8f0 <col:26, line:122:5>
|   `-ReturnStmt 0x55bed25aa8e0 <line:121:2, col:9>
|     `-ImplicitCastExpr 0x55bed25aa8c8 <col:9> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-MemberExpr 0x55bed25aa898 <col:9> 'const uint8_t':'const unsigned char' lvalue ->_ip_p 0x55bed25a9a28
|         `-CXXThisExpr 0x55bed25aa888 <col:9> 'const IPRewriterFlow *' implicit this
|-CXXMethodDecl 0x55bed25a6f88 <line:124:5, line:126:5> line:124:22 used owner 'IPRewriterInput *() const'
| `-CompoundStmt 0x55bed25aa970 <col:36, line:126:5>
|   `-ReturnStmt 0x55bed25aa960 <line:125:2, col:9>
|     `-ImplicitCastExpr 0x55bed25aa948 <col:9> 'IPRewriterInput *' <LValueToRValue>
|       `-MemberExpr 0x55bed25aa918 <col:9> 'IPRewriterInput *const' lvalue ->_owner 0x55bed25a9ba8
|         `-CXXThisExpr 0x55bed25aa908 <col:9> 'const IPRewriterFlow *' implicit this
|-CXXMethodDecl 0x55bed25a7048 <line:128:5, line:130:5> line:128:13 used reply_anno 'uint8_t () const'
| `-CompoundStmt 0x55bed25aa9f0 <col:32, line:130:5>
|   `-ReturnStmt 0x55bed25aa9e0 <line:129:2, col:9>
|     `-ImplicitCastExpr 0x55bed25aa9c8 <col:9> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-MemberExpr 0x55bed25aa998 <col:9> 'const uint8_t':'const unsigned char' lvalue ->_reply_anno 0x55bed25a9b48
|         `-CXXThisExpr 0x55bed25aa988 <col:9> 'const IPRewriterFlow *' implicit this
|-CXXMethodDecl 0x55bed25a71b8 <line:131:5, line:133:5> line:131:10 set_reply_anno 'void (uint8_t)'
| |-ParmVarDecl 0x55bed25a70f8 <col:25, col:33> col:33 used reply_anno 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55bed25aaaa0 <col:45, line:133:5>
|   `-BinaryOperator 0x55bed25aaa80 <line:132:2, col:16> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x55bed25aaa18 <col:2> 'uint8_t':'unsigned char' lvalue ->_reply_anno 0x55bed25a9b48
|     | `-CXXThisExpr 0x55bed25aaa08 <col:2> 'IPRewriterFlow *' implicit this
|     `-ImplicitCastExpr 0x55bed25aaa68 <col:16> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55bed25aaa48 <col:16> 'uint8_t':'unsigned char' lvalue ParmVar 0x55bed25a70f8 'reply_anno' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55bed25a84c8 <line:135:5, line:136:27> line:135:24 update_csum 'void (uint16_t *, bool, uint16_t)' static inline
| |-ParmVarDecl 0x55bed25a7270 <col:36, col:46> col:46 csum 'uint16_t *'
| |-ParmVarDecl 0x55bed25a72e8 <col:52, col:57> col:57 direction 'bool'
| `-ParmVarDecl 0x55bed25a83a0 <line:136:8, col:17> col:17 csum_delta 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55bed25a8768 <line:138:5, col:65> col:10 apply 'void (WritablePacket *, bool, unsigned int)'
| |-ParmVarDecl 0x55bed25a8590 <col:16, col:32> col:32 p 'WritablePacket *'
| |-ParmVarDecl 0x55bed25a8608 <col:35, col:40> col:40 direction 'bool'
| `-ParmVarDecl 0x55bed25a8688 <col:51, col:60> col:60 annos 'unsigned int'
|-CXXMethodDecl 0x55bed25a8a48 <line:140:5, col:72> col:10 unparse 'void (StringAccum &, bool, click_jiffies_t) const'
| |-ParmVarDecl 0x55bed25a8830 <col:18, col:31> col:31 sa 'StringAccum &'
| |-ParmVarDecl 0x55bed25a88a8 <col:35, col:40> col:40 direction 'bool'
| `-ParmVarDecl 0x55bed25a8920 <col:51, col:67> col:67 now 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x55bed25a8ca0 <line:141:5, col:78> col:10 unparse_ports 'void (StringAccum &, bool, click_jiffies_t) const'
| |-ParmVarDecl 0x55bed25a8b10 <col:24, col:37> col:37 sa 'StringAccum &'
| |-ParmVarDecl 0x55bed25a8b88 <col:41, col:46> col:46 direction 'bool'
| `-ParmVarDecl 0x55bed25a8c00 <col:57, col:73> col:73 now 'click_jiffies_t':'unsigned int'
|-CXXRecordDecl 0x55bed25a8d58 <line:143:5, line:147:5> line:143:12 struct heap_less definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55bed25a8e78 <col:5, col:12> col:12 implicit struct heap_less
| `-CXXMethodDecl 0x55bed25a9098 <line:144:2, line:146:2> line:144:14 operator() 'bool (IPRewriterFlow *, IPRewriterFlow *)' inline
|   |-ParmVarDecl 0x55bed25a8f18 <col:25, col:41> col:41 used a 'IPRewriterFlow *'
|   |-ParmVarDecl 0x55bed25a8f90 <col:44, col:60> col:60 used b 'IPRewriterFlow *'
|   `-CompoundStmt 0x55bed25aad58 <col:63, line:146:2>
|     `-ReturnStmt 0x55bed25aad48 <line:145:6, col:78>
|       `-ParenExpr 0x55bed25aad28 <col:13, col:78> 'bool'
|         `-BinaryOperator 0x55bed25aad08 <col:14, col:77> 'bool' '<'
|           |-CStyleCastExpr 0x55bed25aacc0 <col:14, col:73> 'click_jiffies_difference_t':'int' <NoOp>
|           | `-ImplicitCastExpr 0x55bed25aaca8 <col:43, col:73> 'click_jiffies_difference_t':'int' <IntegralCast> part_of_explicit_cast
|           |   `-ParenExpr 0x55bed25aac88 <col:43, col:73> 'unsigned int'
|           |     `-BinaryOperator 0x55bed25aac38 <col:44, col:72> 'unsigned int' '-'
|           |       |-ParenExpr 0x55bed25aab58 <col:44, col:56> 'click_jiffies_t':'unsigned int'
|           |       | `-CXXMemberCallExpr 0x55bed25aab20 <col:45, col:55> 'click_jiffies_t':'unsigned int'
|           |       |   `-MemberExpr 0x55bed25aaaf0 <col:45, col:48> '<bound member function type>' ->expiry 0x55bed25a6470
|           |       |     `-ImplicitCastExpr 0x55bed25aab40 <col:45> 'const IPRewriterFlow *' <NoOp>
|           |       |       `-ImplicitCastExpr 0x55bed25aaad8 <col:45> 'IPRewriterFlow *' <LValueToRValue>
|           |       |         `-DeclRefExpr 0x55bed25aaab8 <col:45> 'IPRewriterFlow *' lvalue ParmVar 0x55bed25a8f18 'a' 'IPRewriterFlow *'
|           |       `-ParenExpr 0x55bed25aac18 <col:60, col:72> 'click_jiffies_t':'unsigned int'
|           |         `-CXXMemberCallExpr 0x55bed25aabe0 <col:61, col:71> 'click_jiffies_t':'unsigned int'
|           |           `-MemberExpr 0x55bed25aabb0 <col:61, col:64> '<bound member function type>' ->expiry 0x55bed25a6470
|           |             `-ImplicitCastExpr 0x55bed25aac00 <col:61> 'const IPRewriterFlow *' <NoOp>
|           |               `-ImplicitCastExpr 0x55bed25aab98 <col:61> 'IPRewriterFlow *' <LValueToRValue>
|           |                 `-DeclRefExpr 0x55bed25aab78 <col:61> 'IPRewriterFlow *' lvalue ParmVar 0x55bed25a8f90 'b' 'IPRewriterFlow *'
|           `-IntegerLiteral 0x55bed25aace8 <col:77> 'int' 0
|-CXXRecordDecl 0x55bed25a9160 <line:148:5, line:152:5> line:148:12 struct heap_place definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55bed25a9278 <col:5, col:12> col:12 implicit struct heap_place
| `-CXXMethodDecl 0x55bed25a94d8 <line:149:2, line:151:2> line:149:14 operator() 'void (IPRewriterFlow **, IPRewriterFlow **)' inline
|   |-ParmVarDecl 0x55bed25a9350 <col:25, col:42> col:42 used begin 'IPRewriterFlow **'
|   |-ParmVarDecl 0x55bed25a93d0 <col:49, col:66> col:66 used it 'IPRewriterFlow **'
|   `-CompoundStmt 0x55bed25aaef0 <col:70, line:151:2>
|     `-BinaryOperator 0x55bed25aaed0 <line:150:6, col:27> 'size_t':'unsigned long' lvalue bitfield '='
|       |-MemberExpr 0x55bed25aadf8 <col:6, col:13> 'size_t':'unsigned long' lvalue bitfield ->_place 0x55bed25a99c8
|       | `-ImplicitCastExpr 0x55bed25aade0 <col:6, col:10> 'IPRewriterFlow *' <LValueToRValue>
|       |   `-ParenExpr 0x55bed25aadc0 <col:6, col:10> 'IPRewriterFlow *' lvalue
|       |     `-UnaryOperator 0x55bed25aada8 <col:7, col:8> 'IPRewriterFlow *' lvalue prefix '*' cannot overflow
|       |       `-ImplicitCastExpr 0x55bed25aad90 <col:8> 'IPRewriterFlow **' <LValueToRValue>
|       |         `-DeclRefExpr 0x55bed25aad70 <col:8> 'IPRewriterFlow **' lvalue ParmVar 0x55bed25a93d0 'it' 'IPRewriterFlow **'
|       `-ImplicitCastExpr 0x55bed25aaeb8 <col:22, col:27> 'size_t':'unsigned long' <IntegralCast>
|         `-BinaryOperator 0x55bed25aae98 <col:22, col:27> 'long' '-'
|           |-ImplicitCastExpr 0x55bed25aae68 <col:22> 'IPRewriterFlow **' <LValueToRValue>
|           | `-DeclRefExpr 0x55bed25aae28 <col:22> 'IPRewriterFlow **' lvalue ParmVar 0x55bed25a93d0 'it' 'IPRewriterFlow **'
|           `-ImplicitCastExpr 0x55bed25aae80 <col:27> 'IPRewriterFlow **' <LValueToRValue>
|             `-DeclRefExpr 0x55bed25aae48 <col:27> 'IPRewriterFlow **' lvalue ParmVar 0x55bed25a9350 'begin' 'IPRewriterFlow **'
|-AccessSpecDecl 0x55bed25a95a0 <line:154:3, col:12> col:3 protected
|-FieldDecl 0x55bed25a9808 <line:156:5, col:25> col:21 referenced _e 'IPRewriterEntry [2]'
|-FieldDecl 0x55bed25a9868 <line:157:5, col:14> col:14 _ip_csum_delta 'uint16_t':'unsigned short'
|-FieldDecl 0x55bed25a98c8 <line:158:5, col:14> col:14 _udp_csum_delta 'uint16_t':'unsigned short'
|-FieldDecl 0x55bed25a9928 <line:159:5, col:21> col:21 referenced _expiry_j 'click_jiffies_t':'unsigned int'
|-FieldDecl 0x55bed25a99c8 <line:160:5, col:21> col:12 referenced _place 'size_t':'unsigned long'
| `-ConstantExpr 0x55bed25a99a8 <col:21> 'int' Int: 32
|   `-IntegerLiteral 0x55bed25a9978 <col:21> 'int' 32
|-FieldDecl 0x55bed25a9a28 <line:161:5, col:13> col:13 referenced _ip_p 'uint8_t':'unsigned char'
|-FieldDecl 0x55bed25a9a88 <line:162:5, col:13> col:13 _tflags 'uint8_t':'unsigned char'
|-FieldDecl 0x55bed25a9ae8 <line:163:5, col:10> col:10 referenced _guaranteed 'bool'
|-FieldDecl 0x55bed25a9b48 <line:164:5, col:13> col:13 referenced _reply_anno 'uint8_t':'unsigned char'
|-FieldDecl 0x55bed25a9ba8 <line:165:5, col:22> col:22 referenced _owner 'IPRewriterInput *'
|-FriendDecl 0x55bed25a9c50 <line:167:5, col:18> col:12 'class IPRewriterBase':'IPRewriterBase'
|-FriendDecl 0x55bed25a9ce0 <line:168:5, col:18> col:12 'class IPRewriterEntry':'IPRewriterEntry'
|-AccessSpecDecl 0x55bed25a9d20 <line:170:3, col:10> col:3 private
`-CXXMethodDecl 0x55bed25a9e18 <line:172:5, col:38> col:10 destroy 'void (IPRewriterHeap *)'
  `-ParmVarDecl 0x55bed25a9d58 <col:18, col:34> col:34 heap 'IPRewriterHeap *'

Layout: <CGRecordLayout
  LLVMType:%class.IPRewriterFlow = type { [2 x %class.IPRewriterEntry], i16, i16, i32, i32, i8, i8, i8, i8, %class.IPRewriterInput* }
  NonVirtualBaseLLVMType:%class.IPRewriterFlow = type { [2 x %class.IPRewriterEntry], i16, i16, i32, i32, i8, i8, i8, i8, %class.IPRewriterInput* }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:32 IsSigned:0 StorageSize:32 StorageOffset:56>
]>

*** Dumping AST Record Layout
         0 | struct click_tcp
         0 |   uint16_t th_sport
         2 |   uint16_t th_dport
         4 |   tcp_seq_t th_seq
         8 |   tcp_seq_t th_ack
    12:0-3 |   unsigned int th_flags2
    12:4-7 |   unsigned int th_off
        13 |   uint8_t th_flags
        14 |   uint16_t th_win
        16 |   uint16_t th_sum
        18 |   uint16_t th_urp
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed26075b0 prev 0x55bed24afe20 <../dummy_inc/clicknet/tcp.h:24:1, line:51:1> line:24:8 referenced struct click_tcp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55bed26076a8 <col:1, col:8> col:8 implicit struct click_tcp
|-FieldDecl 0x55bed2607748 <line:25:5, col:14> col:14 th_sport 'uint16_t':'unsigned short'
|-FieldDecl 0x55bed26077a8 <line:26:5, col:14> col:14 th_dport 'uint16_t':'unsigned short'
|-FieldDecl 0x55bed2607830 <line:27:5, col:15> col:15 th_seq 'tcp_seq_t':'unsigned int'
|-FieldDecl 0x55bed2607890 <line:28:5, col:15> col:15 th_ack 'tcp_seq_t':'unsigned int'
|-FieldDecl 0x55bed2607938 <line:30:5, col:26> col:14 th_flags2 'unsigned int'
| `-ConstantExpr 0x55bed2607918 <col:26> 'int' Int: 4
|   `-IntegerLiteral 0x55bed26078e0 <col:26> 'int' 4
|-FieldDecl 0x55bed26079e0 <line:31:5, col:23> col:14 th_off 'unsigned int'
| `-ConstantExpr 0x55bed26079c0 <col:23> 'int' Int: 4
|   `-IntegerLiteral 0x55bed2607988 <col:23> 'int' 4
|-FieldDecl 0x55bed2607a40 <line:39:5, col:13> col:13 th_flags 'uint8_t':'unsigned char'
|-FieldDecl 0x55bed2607aa0 <line:48:5, col:14> col:14 th_win 'uint16_t':'unsigned short'
|-FieldDecl 0x55bed2607b00 <line:49:5, col:14> col:14 referenced th_sum 'uint16_t':'unsigned short'
`-FieldDecl 0x55bed2607b60 <line:50:5, col:14> col:14 th_urp 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_tcp = type { i16, i16, i32, i32, i8, i8, i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_tcp = type { i16, i16, i32, i32, i8, i8, i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:12>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:12>
]>

*** Dumping AST Record Layout
         0 | struct char_array<8>
         0 |   char [8] x
           | [sizeof=8, dsize=8, align=1,
           |  nvsize=8, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55bed25c1ed0 <../dummy_inc/click/type_traits.hh:165:1, line:167:1> line:165:28 struct char_array definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument integral 8
|-PackedAttr 0x55bed273e060 <line:167:18>
|-CXXRecordDecl 0x55bed273e120 prev 0x55bed25c1ed0 <line:165:21, col:28> col:28 implicit struct char_array
`-FieldDecl 0x55bed273e230 <line:166:5, col:13> col:10 x 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%struct.char_array.10 = type { [8 x i8] }
  NonVirtualBaseLLVMType:%struct.char_array.10 = type { [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct char_array<16>
         0 |   char [16] x
           | [sizeof=16, dsize=16, align=1,
           |  nvsize=16, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55bed25fc520 <../dummy_inc/click/type_traits.hh:165:1, line:167:1> line:165:28 struct char_array definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument integral 16
|-PackedAttr 0x55bed278de38 <line:167:18>
|-CXXRecordDecl 0x55bed278def8 prev 0x55bed25fc520 <line:165:21, col:28> col:28 implicit struct char_array
`-FieldDecl 0x55bed278e008 <line:166:5, col:13> col:10 x 'char [16]'

Layout: <CGRecordLayout
  LLVMType:%struct.char_array = type { [16 x i8] }
  NonVirtualBaseLLVMType:%struct.char_array = type { [16 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class String>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class String * _ptr
        24 |   class String _slot
        24 |     struct String::rep_t _r
        24 |       const char * data
        32 |       int length
        40 |       struct String::memo_t * memo
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55bed2798af8 <../dummy_inc/click/args.hh:850:5, line:860:5> line:851:12 struct SlotT definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Args::Slot'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55bed2798f00 prev 0x55bed2798af8 <col:5, col:12> col:12 implicit struct SlotT
|-CXXConstructorDecl 0x55bed27990f0 <line:852:9, line:854:9> line:852:9 used SlotT 'void (String *)'
| |-ParmVarDecl 0x55bed2798ff8 <col:15, col:18> col:18 used ptr 'String *'
| |-CXXCtorInitializer 'Args::Slot'
| | `-CXXConstructExpr 0x55bed279a040 <col:9> 'Args::Slot' 'void ()'
| |-CXXCtorInitializer Field 0x55bed2799270 '_ptr' 'String *'
| | `-ImplicitCastExpr 0x55bed279a000 <line:853:20> 'String *' <LValueToRValue>
| |   `-DeclRefExpr 0x55bed2799fc0 <col:20> 'String *' lvalue ParmVar 0x55bed2798ff8 'ptr' 'String *'
| |-CXXCtorInitializer Field 0x55bed27992d0 '_slot' 'String':'String'
| | `-CXXConstructExpr 0x55bed279a0a0 <line:852:9> 'String':'String' 'void ()'
| `-CompoundStmt 0x55bed269bc10 <line:853:25, line:854:9>
|-CXXMethodDecl 0x55bed27991b0 <line:855:9, line:857:9> line:855:14 used store 'void ()'
| |-Overrides: [ 0x55bed2671630 Slot::store 'void ()' ]
| `-CompoundStmt 0x55bed279a828 <col:22, line:857:9>
|   `-CallExpr 0x55bed279a7e0 <line:856:13, col:40> 'void'
|     |-ImplicitCastExpr 0x55bed279a7c8 <col:13> 'void (*)(String &, const String &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55bed279a748 <col:13> 'void (String &, const String &)' lvalue Function 0x55bed279a628 'assign_consume' 'void (String &, const String &)' (FunctionTemplate 0x55bed22491e8 'assign_consume')
|     |-UnaryOperator 0x55bed279a240 <col:28, col:29> 'String':'String' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x55bed279a228 <col:29> 'String *' <LValueToRValue>
|     |   `-MemberExpr 0x55bed279a1f8 <col:29> 'String *' lvalue ->_ptr 0x55bed2799270
|     |     `-CXXThisExpr 0x55bed279a1e8 <col:29> 'Args::SlotT<String> *' implicit this
|     `-ImplicitCastExpr 0x55bed279a810 <col:35> 'const String':'const String' lvalue <NoOp>
|       `-MemberExpr 0x55bed279a268 <col:35> 'String':'String' lvalue ->_slot 0x55bed27992d0
|         `-CXXThisExpr 0x55bed279a258 <col:35> 'Args::SlotT<String> *' implicit this
|-FieldDecl 0x55bed2799270 <line:858:9, col:12> col:12 referenced _ptr 'String *'
|-FieldDecl 0x55bed27992d0 <line:859:9, col:11> col:11 referenced _slot 'String':'String'
|-CXXConstructorDecl 0x55bed2799348 <line:851:12> col:12 implicit SlotT 'void (const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x55bed2799348
| `-ParmVarDecl 0x55bed2799458 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXConstructorDecl 0x55bed27994f8 <col:12> col:12 implicit SlotT 'void (Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x55bed27994f8
| `-ParmVarDecl 0x55bed2799608 <col:12> col:12 'Args::SlotT<String> &&'
|-CXXMethodDecl 0x55bed27996a8 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x55bed27996a8
| `-ParmVarDecl 0x55bed27997b8 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXMethodDecl 0x55bed2799828 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x55bed2799828
| `-ParmVarDecl 0x55bed2799938 <col:12> col:12 'Args::SlotT<String> &&'
`-CXXDestructorDecl 0x55bed27999c0 <col:12> col:12 implicit used ~SlotT 'void () noexcept' inline default
  |-Overrides: [ 0x55bed2671530 Slot::~Slot 'void () noexcept' ]
  `-CompoundStmt 0x55bed279a108 <col:12>

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  NonVirtualBaseLLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55bed26bc3a0 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55bed26bc4b8 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x55bed26bc548 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x55bed26bc788 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x55bed26bc580 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55bed26bc600 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x55bed26bc678 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55bed26bc9a0 <col:81> 'const ArgContext' lvalue Var 0x55bed269bdf8 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55bed26bc8e0 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x55bed26bc850 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x55bed26bcaf8 <col:35, line:1261:5>
|   `-ReturnStmt 0x55bed26bcae8 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x55bed26bcad0 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x55bed26bcaa0 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55bed26bca88 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x55bed26bca60 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x55bed26bca40 <col:16, col:24> 'String' (CXXTemporary 0x55bed26bca40)
|               `-CXXConstructExpr 0x55bed26bca08 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x55bed26bc9f0 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x55bed26bc9d0 <col:23> 'bool' lvalue ParmVar 0x55bed26bc850 'x' 'bool'
|-CXXConstructorDecl 0x55bed279f6c8 <line:1257:7> col:7 implicit constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x55bed279f7a0 <col:7> col:7 implicit ~BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55bed279f8d8 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x55bed279f8d8
| `-ParmVarDecl 0x55bed279f9e8 <col:7> col:7 'const BoolArg &'
`-CXXConstructorDecl 0x55bed279fa88 <col:7> col:7 implicit used constexpr BoolArg 'void (BoolArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55bed279fb98 <col:7> col:7 'BoolArg &&'
  `-CompoundStmt 0x55bed27a43f0 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55bed26bcb38 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x55bed26bcd98 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55bed279f5d8 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55bed279fc08 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x55bed279fc08
| `-ParmVarDecl 0x55bed279fd18 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x55bed279fdb8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55bed279fec8 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x55bed27a4400 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55bed27a43d0 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x55bed27a43a0 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x55bed27a4370 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x55bed279fec8 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x55bed27a4470 <col:19>
`-CXXDestructorDecl 0x55bed279ff68 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
