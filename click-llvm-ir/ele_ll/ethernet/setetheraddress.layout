
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55972d526c28 prev 0x55972d51e3c8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55972d526d20 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55972d526db0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55972d526e28 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55972d526ee8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55972d526fb0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55972d527128 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55972d527060 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55972d5271d0 <col:24>
| `-OptimizeNoneAttr 0x55972d527228 <col:34>
|-CXXMethodDecl 0x55972d527270 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55972d527528 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55972d527320 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55972d527398 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55972d527418 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55972d5275e0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55972d527618 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55972d527680 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55972d527708 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55972d527a28 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55972d5277c0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55972d527838 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55972d5278b0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55972d527930 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55972d527b40 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55972d52f4b8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55972d52f4b8
| `-ParmVarDecl 0x55972d52f5c8 <col:11> col:11 'const Element::Port &'
`-CXXConstructorDecl 0x55972d52f668 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55972d52f668
  `-ParmVarDecl 0x55972d52f778 <col:11> col:11 'Element::Port &&'

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55972d519c40 prev 0x55972d5199c0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55972d519d38 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55972d519dc8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55972d519e28 <line:31:5, col:13> col:5 Element 'void ()'
|-CXXDestructorDecl 0x55972d519f18 <line:32:5, col:22> col:13 ~Element 'void ()' virtual noexcept-unevaluated 0x55972d519f18
|-VarDecl 0x55972d51a018 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55972d51a1e8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55972d51a098 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55972d51a110 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55972d51a378 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55972d51a2b0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55972d51a420 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55972d51a558 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55972d51a490 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55972d51a6f8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55972d51a638 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55972d51a898 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55972d51a7d8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55972d51a940 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55972d51aa40 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55972d51ab20 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d51aa20 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55972d51aa00 <col:26> 'int' 1
| `-EnumConstantDecl 0x55972d51aad0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55972d51ab38 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55972d51aab0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55972d51aa90 <col:44> 'int' 2
|-CXXMethodDecl 0x55972d51ac80 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55972d51ab68 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55972d51abe8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55972d51add8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55972d51ad48 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55972d51b018 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55972d51ae98 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55972d51af10 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55972d51b0c8 <col:20>
| `-OptimizeNoneAttr 0x55972d51b120 <col:30>
|-CXXMethodDecl 0x55972d51b228 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55972d51b160 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55972d51b2d0 <col:20>
| `-OptimizeNoneAttr 0x55972d51b328 <col:30>
|-CXXMethodDecl 0x55972d51b378 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55972d51b440 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55972d51b558 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55972d51b5e0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55972d51b668 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55972d51b6f0 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x55972d51b778 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55972d51b808 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55972d51b8c8 <line:62:5, col:32> col:23 used AGNOSTIC 'const char []' static
|-VarDecl 0x55972d51b950 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55972d51b9d8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55972d51ba60 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55972d51bae8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55972d51bb70 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55972d51bc00 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55972d51bcc0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55972d51bd50 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55972d51bea0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55972d51be08 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55972d51c030 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55972d51bf60 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55972d51c2e0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55972d51c0e8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55972d51c168 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55972d51c1e8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55972d51c398 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55972d51c4a0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55972d51c730 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d51c480 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55972d51c460 <col:33> 'int' 0
| |-EnumConstantDecl 0x55972d51c530 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55972d51c748 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d51c510 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55972d51c4f0 <col:32> 'int' 20
| |-EnumConstantDecl 0x55972d51c5c0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55972d51c760 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d51c5a0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55972d51c580 <col:38> 'int' 90
| |-EnumConstantDecl 0x55972d51c650 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55972d51c778 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d51c630 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55972d51c610 <col:35> 'int' 100
| `-EnumConstantDecl 0x55972d51c6e0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55972d51c790 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55972d51c6c0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55972d51c6a0 <col:32> 'int' 2000
|-CXXMethodDecl 0x55972d51c7d0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55972d51cc10 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55972d51ca80 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55972d51caf8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55972d51cce0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55972d51ce60 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55972d51cd90 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55972d51d068 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55972d51cf18 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55972d51cf90 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55972d51d168 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55972d51d208 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55972d51d2d0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55972d51d360 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55972d51d590 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d51d340 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55972d51d320 <col:36> 'int' EnumConstant 0x55972d51d2d0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55972d51d3b0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55972d51d400 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55972d51d450 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55972d51d4a0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55972d51d4f0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55972d51d540 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55972d51d678 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55972d51d5b8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55972d51d740 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55972d51d800 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55972d51d8c0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55972d51d980 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55972d51da98 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55972d51db60 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55972d51dce0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55972d51dc10 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55972d51de08 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55972d51e008 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55972d51deb8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55972d51df38 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55972d52b958 <col:54, line:127:5>
|   |-ParenExpr 0x55972d52b808 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55972d52b7d8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55972d52b4c8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55972d52b4a0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55972d52b488 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55972d52b470 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55972d52b440 <col:31> 'Router *' lvalue ->_router 0x55972d529320
|   |   |         `-CXXThisExpr 0x55972d52b430 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55972d52b528 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55972d52b508 <col:48> 'int' 0
|   |   `-CallExpr 0x55972d52b738 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55972d52b720 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55972d52b700 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55972d054320 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55972d52b778 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55972d52b598 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55972d52b790 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55972d52b5b8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55972d52b7a8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55972d52b5f0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55972d52b7c0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55972d52b6e8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55972d52b6d0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55972d52b688 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55972d52b8a0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55972d52b838 <col:9> 'Router *' lvalue ->_router 0x55972d529320
|   | | `-CXXThisExpr 0x55972d52b828 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55972d52b888 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55972d52b868 <col:19> 'Router *' lvalue ParmVar 0x55972d51deb8 'r' 'Router *'
|   `-BinaryOperator 0x55972d52b938 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55972d52b8d0 <col:9> 'int' lvalue ->_eindex 0x55972d529388
|     | `-CXXThisExpr 0x55972d52b8c0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55972d52b920 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55972d52b900 <col:19> 'int' lvalue ParmVar 0x55972d51df38 'eindex' 'int'
|-CXXMethodDecl 0x55972d51e190 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55972d51e0c8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55972d51e260 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55972d51e328 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55972d51e3c8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55972d51e618 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55972d51e490 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55972d51e510 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55972d51e6c8 <col:20>
| `-OptimizeNoneAttr 0x55972d51e720 <col:30>
|-CXXMethodDecl 0x55972d51e828 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55972d51e760 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55972d51e8d0 <col:20>
| `-OptimizeNoneAttr 0x55972d51e928 <col:30>
|-CXXMethodDecl 0x55972d51e9f8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55972d51e968 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55972d51eaa0 <col:20>
| `-OptimizeNoneAttr 0x55972d51eaf8 <col:30>
|-CXXMethodDecl 0x55972d51ec88 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55972d51eb30 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55972d51ebb0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55972d51ee18 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55972d51ed50 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55972d51ef68 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55972d51eed8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55972d51f0b8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55972d51f028 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55972d51f208 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55972d51f178 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55972d51f4c8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55972d51f2c0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55972d51f340 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55972d51f3e8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55972d51f5a0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55972d51f660 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55972d51f930 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55972d51f7e0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55972d51f858 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55972d51fa58 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55972d51fc30 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55972d51fb10 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55972d51fb90 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55972d51fe18 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55972d51fcf8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55972d51fd78 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55972d520188 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55972d51fed8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55972d51ff50 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55972d51ffd0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55972d52af40 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55972d52af20 <col:106> 'int' 0
| `-ParmVarDecl 0x55972d520048 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55972d52af78 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55972d52af58 <col:126> 'int' 0
|-CXXMethodDecl 0x55972d520528 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55972d520258 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55972d5202f0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55972d520370 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55972d5203e8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55972d52afb0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55972d52af90 <col:114> 'int' 0
|-CXXMethodDecl 0x55972d5208b8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55972d520600 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55972d520678 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55972d5206f8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55972d52afc8 <col:96> 'int' 0
| `-ParmVarDecl 0x55972d520770 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55972d52b008 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55972d52afe8 <col:116> 'int' 0
|-CXXMethodDecl 0x55972d520c38 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55972d520988 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55972d520a00 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55972d520a80 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55972d52b040 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55972d52b020 <col:109> 'int' 0
| `-ParmVarDecl 0x55972d520af8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55972d52b078 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55972d52b058 <col:129> 'int' 0
|-CXXMethodDecl 0x55972d520fb8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55972d520d08 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55972d520d80 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55972d520e00 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55972d520e78 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55972d52b0b0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55972d52b090 <col:117> 'int' 0
|-CXXMethodDecl 0x55972d521348 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55972d521090 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55972d521108 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55972d521188 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55972d52b0c8 <col:99> 'int' 0
| `-ParmVarDecl 0x55972d521200 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55972d52b108 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55972d52b0e8 <col:119> 'int' 0
|-CXXMethodDecl 0x55972d521768 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55972d521418 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55972d521498 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55972d521510 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55972d521590 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55972d52b140 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55972d52b120 <col:108> 'int' 0
| `-ParmVarDecl 0x55972d521610 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55972d52b178 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55972d52b158 <col:141> 'int' 0
|-CXXMethodDecl 0x55972d521b88 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55972d521840 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55972d5218c0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55972d521938 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55972d5219b8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55972d521a38 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55972d52b190 <col:121> 'int' 0
|-CXXMethodDecl 0x55972d521fb8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55972d521c68 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55972d521ce8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55972d521d60 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55972d521de0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55972d52b1b0 <col:98> 'int' 0
| `-ParmVarDecl 0x55972d521e60 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55972d52b1d0 <col:123> 'int' 0
|-CXXMethodDecl 0x55972d522280 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55972d522090 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55972d522110 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55972d522190 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55972d52b1f0 <col:80> 'int' 0
|-EnumDecl 0x55972d522338 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55972d522440 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55972d5226d0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d522420 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55972d522400 <col:42> 'int' 1
| |-EnumConstantDecl 0x55972d5224d0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55972d5226e8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d5224b0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55972d522490 <col:40> 'int' 2
| |-EnumConstantDecl 0x55972d522560 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55972d522700 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d522540 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55972d522520 <col:44> 'int' 4
| |-EnumConstantDecl 0x55972d5225f0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55972d522718 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d5225d0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55972d5225b0 <col:36> 'int' 7
| `-EnumConstantDecl 0x55972d522680 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55972d522730 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55972d522660 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55972d522640 <col:34> 'int' 6
|-CXXMethodDecl 0x55972d5229e8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55972d522758 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55972d5227f8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55972d522878 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55972d5228f0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55972d52b2a8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55972d52b290 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55972d52b278 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55972d52b258 <col:98, col:105> 'String' (CXXTemporary 0x55972d52b258)
|           `-CXXTemporaryObjectExpr 0x55972d52b220 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55972d522c88 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55972d522ab8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55972d522b30 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55972d522ba8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55972d52b358 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55972d52b340 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55972d52b328 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55972d52b308 <col:94, col:101> 'String' (CXXTemporary 0x55972d52b308)
| |         `-CXXTemporaryObjectExpr 0x55972d52b2d0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55972d52bb40 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55972d52bab8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55972d52ba88 <col:9> '<bound member function type>' ->add_task_handlers 0x55972d5229e8
|     | `-CXXThisExpr 0x55972d52ba78 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55972d52baf8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55972d52b9f8 <col:27> 'Task *' lvalue ParmVar 0x55972d522ab8 'task' 'Task *'
|     |-ImplicitCastExpr 0x55972d52bb10 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55972d52ba18 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55972d522b30 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55972d52bb28 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55972d52ba38 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55972d522680 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55972d52ba58 <col:62> 'const String' lvalue ParmVar 0x55972d522ba8 'prefix' 'const String &'
|-CXXMethodDecl 0x55972d522e98 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55972d522d50 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55972d522dc8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55972d52b408 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55972d52b3f0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55972d52b3d8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55972d52b3b8 <col:70, col:77> 'String' (CXXTemporary 0x55972d52b3b8)
| |         `-CXXTemporaryObjectExpr 0x55972d52b380 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55972d52bd18 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55972d52bc90 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55972d52bc60 <col:9> '<bound member function type>' ->add_task_handlers 0x55972d5229e8
|     | `-CXXThisExpr 0x55972d52bc50 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55972d52bcd0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55972d52bbd0 <col:27> 'Task *' lvalue ParmVar 0x55972d522d50 'task' 'Task *'
|     |-ImplicitCastExpr 0x55972d52bce8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55972d52bbf0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55972d52bd00 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55972d52bc10 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55972d522680 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55972d52bc30 <col:57> 'const String' lvalue ParmVar 0x55972d522dc8 'prefix' 'const String &'
|-CXXMethodDecl 0x55972d523178 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55972d522f60 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55972d522fe0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55972d523058 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55972d523428 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55972d523248 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55972d5232c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55972d523348 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55972d523718 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55972d5234f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55972d523578 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55972d5235f0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55972d5239c8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55972d5237e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55972d523868 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55972d5238e8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55972d523c78 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55972d523a98 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55972d523b18 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55972d523b98 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55972d523f28 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55972d523d48 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55972d523dc8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55972d523e40 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55972d5241d8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55972d523ff8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55972d524078 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55972d5240f8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55972d5244e8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55972d524300 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55972d524380 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55972d524400 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55972d5247c8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55972d5245b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55972d524638 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55972d5246e0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55972d524aa8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55972d524898 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55972d524918 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55972d5249c0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55972d524d10 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55972d524b78 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55972d524bf8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55972d524c70 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55972d524fb8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55972d524de0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55972d524e60 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55972d524ed8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55972d525268 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55972d525088 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55972d525108 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55972d525188 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55972d525518 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55972d525338 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55972d5253b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55972d525430 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55972d5257c8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55972d5255e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55972d525668 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55972d5256e0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55972d525a98 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55972d525898 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55972d525918 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55972d5259b8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55972d525dc8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55972d525b68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55972d525be8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55972d525c60 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55972d525cd8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55972d52b420 <col:93> 'bool' false
|-CXXMethodDecl 0x55972d525fb0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55972d525e98 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55972d525f18 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55972d526188 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55972d526070 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55972d5260f0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55972d526468 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55972d526248 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55972d5262c0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55972d526340 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55972d5263b8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55972d526758 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55972d526538 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55972d5265b0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55972d526630 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55972d5266a8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55972d526990 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55972d526830 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55972d5268b0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55972d526b78 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55972d526a58 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55972d526ad8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55972d526c28 prev 0x55972d51e3c8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55972d526d20 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55972d526db0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55972d526e28 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55972d526ee8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55972d526fb0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55972d527128 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55972d527060 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55972d5271d0 <col:24>
| | `-OptimizeNoneAttr 0x55972d527228 <col:34>
| |-CXXMethodDecl 0x55972d527270 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55972d527528 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55972d527320 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55972d527398 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55972d527418 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55972d5275e0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55972d527618 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55972d527680 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55972d527708 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55972d527a28 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55972d5277c0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55972d527838 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55972d5278b0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55972d527930 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55972d527b40 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55972d52f4b8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55972d52f4b8
| | `-ParmVarDecl 0x55972d52f5c8 <col:11> col:11 'const Element::Port &'
| `-CXXConstructorDecl 0x55972d52f668 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55972d52f668
|   `-ParmVarDecl 0x55972d52f778 <col:11> col:11 'Element::Port &&'
|-CXXMethodDecl 0x55972d527bb8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55972d527c58 <col:38> "" ""
|-CXXMethodDecl 0x55972d527ce8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55972d527d88 <col:44> "" ""
|-AccessSpecDecl 0x55972d527df8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55972d527e20 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55972d527f20 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55972d527f70 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55972d527f00 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55972d527ee0 <col:27> 'int' 4
|-FieldDecl 0x55972d528028 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55972d5281d8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55972d528290 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55972d529320 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55972d529388 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55972d5294d8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55972d529418 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55972d529688 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55972d529598 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55972d529868 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55972d529748 <col:20> col:23 'int'
| `-ParmVarDecl 0x55972d5297c8 <col:25> col:28 'int'
|-CXXMethodDecl 0x55972d529b10 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55972d529930 <col:23> col:26 'int'
| |-ParmVarDecl 0x55972d5299b0 <col:28> col:31 'int'
| `-ParmVarDecl 0x55972d529a28 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55972d529bc8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55972d529c90 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55972d529ce0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55972d529d30 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55972d529f10 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55972d529dc0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55972d529e38 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55972d52a1b8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55972d529fd8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55972d52a058 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55972d52a0d0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55972d52a3d8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55972d52a288 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55972d52a308 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55972d52a710 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55972d52a498 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55972d52a518 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55972d52a590 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55972d52a610 <col:57> col:60 'int'
|-CXXMethodDecl 0x55972d52a8f8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55972d52a7e0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55972d52a860 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55972d52aa48 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55972d52a9b8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55972d52adc8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55972d52ab08 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55972d52ab88 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55972d52ac00 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55972d52ac80 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55972d52aee0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class EtherAddress
         0 |   uint16_t [3] _data
           | [sizeof=6, dsize=6, align=1,
           |  nvsize=6, nvalign=1]

*** Dumping AST Record Layout
         0 | class SetEtherAddress
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   class EtherAddress _addr
       108 |     uint16_t [3] _data
       116 |   int _anno
           | [sizeof=120, dsize=120, align=8,
           |  nvsize=120, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55972d532628 prev 0x55972d519b90 <../dummy_inc/click/etheraddress.hh:9:1, line:148:1> line:9:7 referenced class EtherAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-PackedAttr 0x55972d534098 <line:148:18>
|-CXXRecordDecl 0x55972d532720 <line:9:1, col:7> col:7 implicit referenced class EtherAddress
|-AccessSpecDecl 0x55972d5327b0 <col:22, col:28> col:22 public
|-TypedefDecl 0x55972d5327e8 <line:11:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x55972d10d520 'uninitialized_type'
|   `-CXXRecord 0x55972d10d488 'uninitialized_type'
|-CXXConstructorDecl 0x55972d532878 <line:14:5, line:16:5> line:14:12 EtherAddress 'void ()' inline
| `-CompoundStmt 0x55972d534398 <col:27, line:16:5>
|   `-BinaryOperator 0x55972d534378 <line:15:2, col:35> 'uint16_t':'unsigned short' lvalue '='
|     |-ArraySubscriptExpr 0x55972d534180 <col:2, col:9> 'uint16_t':'unsigned short' lvalue
|     | |-ImplicitCastExpr 0x55972d534168 <col:2> 'uint16_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55972d534118 <col:2> 'uint16_t [3]' lvalue ->_data 0x55972d533e98
|     | |   `-CXXThisExpr 0x55972d534108 <col:2> 'EtherAddress *' implicit this
|     | `-IntegerLiteral 0x55972d534148 <col:8> 'int' 0
|     `-ImplicitCastExpr 0x55972d534360 <col:13, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-BinaryOperator 0x55972d534340 <col:13, col:35> 'uint16_t':'unsigned short' lvalue '='
|         |-ArraySubscriptExpr 0x55972d534218 <col:13, col:20> 'uint16_t':'unsigned short' lvalue
|         | |-ImplicitCastExpr 0x55972d534200 <col:13> 'uint16_t *' <ArrayToPointerDecay>
|         | | `-MemberExpr 0x55972d5341b0 <col:13> 'uint16_t [3]' lvalue ->_data 0x55972d533e98
|         | |   `-CXXThisExpr 0x55972d5341a0 <col:13> 'EtherAddress *' implicit this
|         | `-IntegerLiteral 0x55972d5341e0 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x55972d534328 <col:24, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|           `-BinaryOperator 0x55972d534308 <col:24, col:35> 'uint16_t':'unsigned short' lvalue '='
|             |-ArraySubscriptExpr 0x55972d5342b0 <col:24, col:31> 'uint16_t':'unsigned short' lvalue
|             | |-ImplicitCastExpr 0x55972d534298 <col:24> 'uint16_t *' <ArrayToPointerDecay>
|             | | `-MemberExpr 0x55972d534248 <col:24> 'uint16_t [3]' lvalue ->_data 0x55972d533e98
|             | |   `-CXXThisExpr 0x55972d534238 <col:24> 'EtherAddress *' implicit this
|             | `-IntegerLiteral 0x55972d534278 <col:30> 'int' 2
|             `-ImplicitCastExpr 0x55972d5342f0 <col:35> 'uint16_t':'unsigned short' <IntegralCast>
|               `-IntegerLiteral 0x55972d5342d0 <col:35> 'int' 0
|-CXXConstructorDecl 0x55972d5329c8 <line:22:5, line:24:5> line:22:21 EtherAddress 'void (const unsigned char *)' inline
| |-ParmVarDecl 0x55972d532938 <col:34, col:55> col:55 used data 'const unsigned char *'
| `-CompoundStmt 0x55972d534560 <col:61, line:24:5>
|   `-CallExpr 0x55972d5344b0 <line:23:2, col:23> 'void *'
|     |-ImplicitCastExpr 0x55972d534498 <col:2> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55972d534478 <col:2> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55972d217298 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
|     |-ImplicitCastExpr 0x55972d534500 <col:9> 'void *' <BitCast>
|     | `-ImplicitCastExpr 0x55972d5344e8 <col:9> 'uint16_t *' <ArrayToPointerDecay>
|     |   `-MemberExpr 0x55972d534408 <col:9> 'uint16_t [3]' lvalue ->_data 0x55972d533e98
|     |     `-CXXThisExpr 0x55972d5343f8 <col:9> 'EtherAddress *' implicit this
|     |-ImplicitCastExpr 0x55972d534530 <col:16> 'const void *' <BitCast>
|     | `-ImplicitCastExpr 0x55972d534518 <col:16> 'const unsigned char *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55972d534438 <col:16> 'const unsigned char *' lvalue ParmVar 0x55972d532938 'data' 'const unsigned char *'
|     `-ImplicitCastExpr 0x55972d534548 <col:22> 'size_t':'unsigned long' <IntegralCast>
|       `-IntegerLiteral 0x55972d534458 <col:22> 'int' 6
|-CXXConstructorDecl 0x55972d532b18 <line:27:5, line:29:5> line:27:12 EtherAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x55972d532a88 <col:25, col:51> col:51 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x55972d5345d0 <col:59, line:29:5>
|   `-CStyleCastExpr 0x55972d5345a8 <line:28:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x55972d534578 <col:9> 'const uninitialized_type' lvalue ParmVar 0x55972d532a88 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x55972d532c18 <line:32:5, line:34:5> line:32:25 used make_broadcast 'EtherAddress ()' static
| `-CompoundStmt 0x55972d534d18 <col:42, line:34:5>
|   `-ReturnStmt 0x55972d534d08 <line:33:2, col:28>
|     `-ExprWithCleanups 0x55972d534cf0 <col:9, col:28> 'EtherAddress'
|       `-CXXConstructExpr 0x55972d534cc0 <col:9, col:28> 'EtherAddress' 'void (EtherAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55972d534af8 <col:9, col:28> 'EtherAddress' xvalue
|           `-CXXFunctionalCastExpr 0x55972d534a70 <col:9, col:28> 'EtherAddress' functional cast to class EtherAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x55972d534960 <col:9, col:28> 'EtherAddress' 'void (uint16_t)'
|               `-ImplicitCastExpr 0x55972d534948 <col:22> 'uint16_t':'unsigned short' <IntegralCast>
|                 `-IntegerLiteral 0x55972d5345f8 <col:22> 'int' 65535
|-CXXMethodDecl 0x55972d532cd8 <line:36:5, col:70> col:32 broadcast 'EtherAddress ()' static inline
| `-DeprecatedAttr 0x55972d532d78 <col:59> "" ""
|-TypedefDecl 0x55972d532ef8 <line:39:5, col:59> col:34 referenced unspecified_bool_type 'bool (EtherAddress::*)() const'
| `-MemberPointerType 0x55972d532e70 'bool (EtherAddress::*)() const'
|   |-RecordType 0x55972d519c20 'EtherAddress'
|   | `-CXXRecord 0x55972d532628 'EtherAddress'
|   `-ParenType 0x55972d532e10 'bool () const' sugar
|     `-FunctionProtoType 0x55972d0602a0 'bool () const' const cdecl
|       `-BuiltinType 0x55972cfb8330 'bool'
|-CXXConversionDecl 0x55972d533038 <line:41:5, line:43:5> line:41:12 operator bool (EtherAddress::*)() const 'EtherAddress::unspecified_bool_type () const' inline
| `-CompoundStmt 0x55972d5350f8 <col:51, line:43:5>
|   `-ReturnStmt 0x55972d5350e8 <line:42:2, col:70>
|     `-ConditionalOperator 0x55972d5350b8 <col:9, col:70> 'bool (EtherAddress::*)() const'
|       |-BinaryOperator 0x55972d534fe0 <col:9, col:40> 'bool' '||'
|       | |-BinaryOperator 0x55972d534ef8 <col:9, col:28> 'bool' '||'
|       | | |-ImplicitCastExpr 0x55972d534eb0 <col:9, col:16> 'bool' <IntegralToBoolean>
|       | | | `-ImplicitCastExpr 0x55972d534e98 <col:9, col:16> 'uint16_t':'unsigned short' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x55972d534de0 <col:9, col:16> 'const uint16_t':'const unsigned short' lvalue
|       | | |     |-ImplicitCastExpr 0x55972d534dc8 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       | | |     | `-MemberExpr 0x55972d534d40 <col:9> 'uint16_t const[3]' lvalue ->_data 0x55972d533e98
|       | | |     |   `-CXXThisExpr 0x55972d534d30 <col:9> 'const EtherAddress *' implicit this
|       | | |     `-IntegerLiteral 0x55972d534d70 <col:15> 'int' 0
|       | | `-ImplicitCastExpr 0x55972d534ee0 <col:21, col:28> 'bool' <IntegralToBoolean>
|       | |   `-ImplicitCastExpr 0x55972d534ec8 <col:21, col:28> 'uint16_t':'unsigned short' <LValueToRValue>
|       | |     `-ArraySubscriptExpr 0x55972d534e78 <col:21, col:28> 'const uint16_t':'const unsigned short' lvalue
|       | |       |-ImplicitCastExpr 0x55972d534e60 <col:21> 'const uint16_t *' <ArrayToPointerDecay>
|       | |       | `-MemberExpr 0x55972d534e10 <col:21> 'uint16_t const[3]' lvalue ->_data 0x55972d533e98
|       | |       |   `-CXXThisExpr 0x55972d534e00 <col:21> 'const EtherAddress *' implicit this
|       | |       `-IntegerLiteral 0x55972d534e40 <col:27> 'int' 1
|       | `-ImplicitCastExpr 0x55972d534fc8 <col:33, col:40> 'bool' <IntegralToBoolean>
|       |   `-ImplicitCastExpr 0x55972d534fb0 <col:33, col:40> 'uint16_t':'unsigned short' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x55972d534f90 <col:33, col:40> 'const uint16_t':'const unsigned short' lvalue
|       |       |-ImplicitCastExpr 0x55972d534f78 <col:33> 'const uint16_t *' <ArrayToPointerDecay>
|       |       | `-MemberExpr 0x55972d534f28 <col:33> 'uint16_t const[3]' lvalue ->_data 0x55972d533e98
|       |       |   `-CXXThisExpr 0x55972d534f18 <col:33> 'const EtherAddress *' implicit this
|       |       `-IntegerLiteral 0x55972d534f58 <col:39> 'int' 2
|       |-UnaryOperator 0x55972d535068 <col:44, col:59> 'bool (EtherAddress::*)() const' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x55972d535038 <col:45, col:59> 'bool () const' CXXMethod 0x55972d533108 'is_group' 'bool () const'
|       `-ImplicitCastExpr 0x55972d5350a0 <col:70> 'bool (EtherAddress::*)() const' <NullToMemberPointer>
|         `-IntegerLiteral 0x55972d535080 <col:70> 'int' 0
|-CXXMethodDecl 0x55972d533108 <line:49:5, line:51:5> line:49:17 used is_group 'bool () const' inline
| `-CompoundStmt 0x55972d5352b8 <col:34, line:51:5>
|   `-ReturnStmt 0x55972d5352a8 <line:50:2, col:21>
|     `-ImplicitCastExpr 0x55972d535290 <col:9, col:21> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x55972d535270 <col:9, col:21> 'int' '&'
|         |-ImplicitCastExpr 0x55972d535258 <col:9, col:17> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55972d535240 <col:9, col:17> 'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55972d535200 <col:9, col:17> 'const unsigned char' lvalue
|         |     |-CXXMemberCallExpr 0x55972d5351c0 <col:9, col:14> 'const unsigned char *'
|         |     | `-MemberExpr 0x55972d535190 <col:9> '<bound member function type>' ->data 0x55972d5335a0
|         |     |   `-CXXThisExpr 0x55972d535180 <col:9> 'const EtherAddress *' implicit this
|         |     `-IntegerLiteral 0x55972d5351e0 <col:16> 'int' 0
|         `-IntegerLiteral 0x55972d535220 <col:21> 'int' 1
|-CXXMethodDecl 0x55972d5331c8 <line:57:5, line:59:5> line:57:17 is_local 'bool () const' inline
| `-CompoundStmt 0x55972d535478 <col:34, line:59:5>
|   `-ReturnStmt 0x55972d535468 <line:58:2, col:21>
|     `-ImplicitCastExpr 0x55972d535450 <col:9, col:21> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x55972d535430 <col:9, col:21> 'int' '&'
|         |-ImplicitCastExpr 0x55972d535418 <col:9, col:17> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55972d535400 <col:9, col:17> 'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55972d5353c0 <col:9, col:17> 'const unsigned char' lvalue
|         |     |-CXXMemberCallExpr 0x55972d535380 <col:9, col:14> 'const unsigned char *'
|         |     | `-MemberExpr 0x55972d535350 <col:9> '<bound member function type>' ->data 0x55972d5335a0
|         |     |   `-CXXThisExpr 0x55972d535340 <col:9> 'const EtherAddress *' implicit this
|         |     `-IntegerLiteral 0x55972d5353a0 <col:16> 'int' 0
|         `-IntegerLiteral 0x55972d5353e0 <col:21> 'int' 2
|-CXXMethodDecl 0x55972d533288 <line:64:5, line:66:5> line:64:17 used is_broadcast 'bool () const' inline
| `-CompoundStmt 0x55972d535778 <col:38, line:66:5>
|   `-ReturnStmt 0x55972d535768 <line:65:2, col:43>
|     `-BinaryOperator 0x55972d535748 <col:9, col:43> 'bool' '=='
|       |-BinaryOperator 0x55972d535708 <col:9, col:38> 'int' '+'
|       | |-BinaryOperator 0x55972d535620 <col:9, col:27> 'int' '+'
|       | | |-ImplicitCastExpr 0x55972d5355d8 <col:9, col:16> 'int' <IntegralCast>
|       | | | `-ImplicitCastExpr 0x55972d5355c0 <col:9, col:16> 'uint16_t':'unsigned short' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x55972d535508 <col:9, col:16> 'const uint16_t':'const unsigned short' lvalue
|       | | |     |-ImplicitCastExpr 0x55972d5354f0 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       | | |     | `-MemberExpr 0x55972d5354a0 <col:9> 'uint16_t const[3]' lvalue ->_data 0x55972d533e98
|       | | |     |   `-CXXThisExpr 0x55972d535490 <col:9> 'const EtherAddress *' implicit this
|       | | |     `-IntegerLiteral 0x55972d5354d0 <col:15> 'int' 0
|       | | `-ImplicitCastExpr 0x55972d535608 <col:20, col:27> 'int' <IntegralCast>
|       | |   `-ImplicitCastExpr 0x55972d5355f0 <col:20, col:27> 'uint16_t':'unsigned short' <LValueToRValue>
|       | |     `-ArraySubscriptExpr 0x55972d5355a0 <col:20, col:27> 'const uint16_t':'const unsigned short' lvalue
|       | |       |-ImplicitCastExpr 0x55972d535588 <col:20> 'const uint16_t *' <ArrayToPointerDecay>
|       | |       | `-MemberExpr 0x55972d535538 <col:20> 'uint16_t const[3]' lvalue ->_data 0x55972d533e98
|       | |       |   `-CXXThisExpr 0x55972d535528 <col:20> 'const EtherAddress *' implicit this
|       | |       `-IntegerLiteral 0x55972d535568 <col:26> 'int' 1
|       | `-ImplicitCastExpr 0x55972d5356f0 <col:31, col:38> 'int' <IntegralCast>
|       |   `-ImplicitCastExpr 0x55972d5356d8 <col:31, col:38> 'uint16_t':'unsigned short' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x55972d5356b8 <col:31, col:38> 'const uint16_t':'const unsigned short' lvalue
|       |       |-ImplicitCastExpr 0x55972d5356a0 <col:31> 'const uint16_t *' <ArrayToPointerDecay>
|       |       | `-MemberExpr 0x55972d535650 <col:31> 'uint16_t const[3]' lvalue ->_data 0x55972d533e98
|       |       |   `-CXXThisExpr 0x55972d535640 <col:31> 'const EtherAddress *' implicit this
|       |       `-IntegerLiteral 0x55972d535680 <col:37> 'int' 2
|       `-IntegerLiteral 0x55972d535728 <col:43> 'int' 196605
|-CXXMethodDecl 0x55972d533408 <line:69:5, line:75:5> line:69:24 is_broadcast 'bool (const unsigned char *)' static inline
| |-ParmVarDecl 0x55972d533340 <col:37, col:58> col:58 used data 'const unsigned char *'
| `-CompoundStmt 0x55972d5358c8 <col:64, line:75:5>
|   `-ReturnStmt 0x55972d5358b8 <line:71:2, col:68>
|     `-CXXMemberCallExpr 0x55972d535898 <col:9, col:68> 'bool'
|       `-MemberExpr 0x55972d535868 <col:9, col:55> '<bound member function type>' ->is_broadcast 0x55972d533288
|         `-CXXReinterpretCastExpr 0x55972d5357d8 <col:9, col:52> 'const EtherAddress *' reinterpret_cast<const class EtherAddress *> <BitCast>
|           `-ImplicitCastExpr 0x55972d5357c0 <col:48> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|             `-DeclRefExpr 0x55972d535790 <col:48> 'const unsigned char *' lvalue ParmVar 0x55972d533340 'data' 'const unsigned char *'
|-CXXMethodDecl 0x55972d5334d8 <line:78:5, line:80:5> line:78:27 data 'unsigned char *()' inline
| `-CompoundStmt 0x55972d535990 <col:34, line:80:5>
|   `-ReturnStmt 0x55972d535980 <line:79:2, col:48>
|     `-CXXReinterpretCastExpr 0x55972d535950 <col:9, col:48> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
|       `-ImplicitCastExpr 0x55972d535938 <col:43> 'uint16_t *' <ArrayToPointerDecay> part_of_explicit_cast
|         `-MemberExpr 0x55972d5358f0 <col:43> 'uint16_t [3]' lvalue ->_data 0x55972d533e98
|           `-CXXThisExpr 0x55972d5358e0 <col:43> 'EtherAddress *' implicit this
|-CXXMethodDecl 0x55972d5335a0 <line:83:5, line:85:5> line:83:33 used data 'const unsigned char *() const' inline
| `-CompoundStmt 0x55972d535a58 <col:46, line:85:5>
|   `-ReturnStmt 0x55972d535a48 <line:84:2, col:54>
|     `-CXXReinterpretCastExpr 0x55972d535a18 <col:9, col:54> 'const unsigned char *' reinterpret_cast<const unsigned char *> <BitCast>
|       `-ImplicitCastExpr 0x55972d535a00 <col:49> 'const uint16_t *' <ArrayToPointerDecay> part_of_explicit_cast
|         `-MemberExpr 0x55972d5359b8 <col:49> 'uint16_t const[3]' lvalue ->_data 0x55972d533e98
|           `-CXXThisExpr 0x55972d5359a8 <col:49> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x55972d5336e8 <line:89:5, line:91:5> line:89:28 used sdata 'const uint16_t *() const' inline
| `-CompoundStmt 0x55972d535ad8 <col:42, line:91:5>
|   `-ReturnStmt 0x55972d535ac8 <line:90:2, col:9>
|     `-ImplicitCastExpr 0x55972d535ab0 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       `-MemberExpr 0x55972d535a80 <col:9> 'uint16_t const[3]' lvalue ->_data 0x55972d533e98
|         `-CXXThisExpr 0x55972d535a70 <col:9> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x55972d5337d8 <line:94:5, line:97:5> line:94:19 hashcode 'size_t () const' inline
| `-CompoundStmt 0x55972d535ee8 <col:36, line:97:5>
|   `-ReturnStmt 0x55972d535ed8 <line:95:2, line:96:31>
|     `-BinaryOperator 0x55972d535eb8 <line:95:9, line:96:31> 'unsigned long' '^'
|       |-ParenExpr 0x55972d535d38 <line:95:9, col:46> 'unsigned long'
|       | `-BinaryOperator 0x55972d535d18 <col:10, col:45> 'unsigned long' '|'
|       |   |-ImplicitCastExpr 0x55972d535d00 <col:10, col:17> 'unsigned long' <IntegralCast>
|       |   | `-ImplicitCastExpr 0x55972d535ce8 <col:10, col:17> 'uint16_t':'unsigned short' <LValueToRValue>
|       |   |   `-ArraySubscriptExpr 0x55972d535b68 <col:10, col:17> 'const uint16_t':'const unsigned short' lvalue
|       |   |     |-ImplicitCastExpr 0x55972d535b50 <col:10> 'const uint16_t *' <ArrayToPointerDecay>
|       |   |     | `-MemberExpr 0x55972d535b00 <col:10> 'uint16_t const[3]' lvalue ->_data 0x55972d533e98
|       |   |     |   `-CXXThisExpr 0x55972d535af0 <col:10> 'const EtherAddress *' implicit this
|       |   |     `-IntegerLiteral 0x55972d535b30 <col:16> 'int' 2
|       |   `-ParenExpr 0x55972d535cc8 <col:21, col:45> 'size_t':'unsigned long'
|       |     `-BinaryOperator 0x55972d535ca8 <col:22, col:43> 'size_t':'unsigned long' '<<'
|       |       |-CStyleCastExpr 0x55972d535c60 <col:22, col:38> 'size_t':'unsigned long' <NoOp>
|       |       | `-ImplicitCastExpr 0x55972d535c48 <col:31, col:38> 'size_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|       |       |   `-ImplicitCastExpr 0x55972d535c30 <col:31, col:38> 'uint16_t':'unsigned short' <LValueToRValue> part_of_explicit_cast
|       |       |     `-ArraySubscriptExpr 0x55972d535c00 <col:31, col:38> 'const uint16_t':'const unsigned short' lvalue
|       |       |       |-ImplicitCastExpr 0x55972d535be8 <col:31> 'const uint16_t *' <ArrayToPointerDecay>
|       |       |       | `-MemberExpr 0x55972d535b98 <col:31> 'uint16_t const[3]' lvalue ->_data 0x55972d533e98
|       |       |       |   `-CXXThisExpr 0x55972d535b88 <col:31> 'const EtherAddress *' implicit this
|       |       |       `-IntegerLiteral 0x55972d535bc8 <col:37> 'int' 1
|       |       `-IntegerLiteral 0x55972d535c88 <col:43> 'int' 16
|       `-ParenExpr 0x55972d535e98 <line:96:8, col:31> 'size_t':'unsigned long'
|         `-BinaryOperator 0x55972d535e78 <col:9, col:30> 'size_t':'unsigned long' '<<'
|           |-CStyleCastExpr 0x55972d535e30 <col:9, col:25> 'size_t':'unsigned long' <NoOp>
|           | `-ImplicitCastExpr 0x55972d535e18 <col:18, col:25> 'size_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           |   `-ImplicitCastExpr 0x55972d535e00 <col:18, col:25> 'uint16_t':'unsigned short' <LValueToRValue> part_of_explicit_cast
|           |     `-ArraySubscriptExpr 0x55972d535dd0 <col:18, col:25> 'const uint16_t':'const unsigned short' lvalue
|           |       |-ImplicitCastExpr 0x55972d535db8 <col:18> 'const uint16_t *' <ArrayToPointerDecay>
|           |       | `-MemberExpr 0x55972d535d68 <col:18> 'uint16_t const[3]' lvalue ->_data 0x55972d533e98
|           |       |   `-CXXThisExpr 0x55972d535d58 <col:18> 'const EtherAddress *' implicit this
|           |       `-IntegerLiteral 0x55972d535d98 <col:24> 'int' 0
|           `-IntegerLiteral 0x55972d535e58 <col:30> 'int' 9
|-CXXMethodDecl 0x55972d533898 <line:109:5, line:111:5> line:109:19 used unparse 'String () const' inline
| `-CompoundStmt 0x55972d535ff8 <col:35, line:111:5>
|   `-ReturnStmt 0x55972d535fe8 <line:110:2, col:22>
|     `-ExprWithCleanups 0x55972d535fd0 <col:9, col:22> 'String'
|       `-CXXConstructExpr 0x55972d535fa0 <col:9, col:22> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55972d535f88 <col:9, col:22> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55972d535f68 <col:9, col:22> 'String' (CXXTemporary 0x55972d535f68)
|             `-CXXMemberCallExpr 0x55972d535f40 <col:9, col:22> 'String'
|               `-MemberExpr 0x55972d535f10 <col:9> '<bound member function type>' ->unparse_dash 0x55972d533a18
|                 `-CXXThisExpr 0x55972d535f00 <col:9> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x55972d533958 <line:118:5, col:28> col:12 unparse_colon 'String () const'
|-CXXMethodDecl 0x55972d533a18 <line:126:5, col:27> col:12 used unparse_dash 'String () const'
|-CXXMethodDecl 0x55972d533ad8 <line:131:5, col:55> col:19 s 'String () const' inline
| `-DeprecatedAttr 0x55972d533b78 <col:44> "" ""
|-CXXConversionDecl 0x55972d533c18 <line:136:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x55972d533cc0 <col:51> "" ""
|-TypedefDecl 0x55972d533d78 <line:138:5, col:33> col:33 parameter_type 'const EtherAddress &'
| `-LValueReferenceType 0x55972d533d40 'const EtherAddress &'
|   `-QualType 0x55972d519c21 'const EtherAddress' const
|     `-RecordType 0x55972d519c20 'EtherAddress'
|       `-CXXRecord 0x55972d532628 'EtherAddress'
|-AccessSpecDecl 0x55972d533dd0 <line:140:2, col:9> col:2 private
|-FieldDecl 0x55972d533e98 <line:142:5, col:21> col:14 referenced _data 'uint16_t [3]'
|-CXXConstructorDecl 0x55972d533fe8 <line:144:5, line:146:5> line:144:5 used EtherAddress 'void (uint16_t)'
| |-ParmVarDecl 0x55972d533ef8 <col:18, col:27> col:27 used m 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55972d5362a0 <col:30, line:146:5>
|   `-BinaryOperator 0x55972d536280 <line:145:2, col:35> 'uint16_t':'unsigned short' lvalue '='
|     |-ArraySubscriptExpr 0x55972d536088 <col:2, col:9> 'uint16_t':'unsigned short' lvalue
|     | |-ImplicitCastExpr 0x55972d536070 <col:2> 'uint16_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55972d536020 <col:2> 'uint16_t [3]' lvalue ->_data 0x55972d533e98
|     | |   `-CXXThisExpr 0x55972d536010 <col:2> 'EtherAddress *' implicit this
|     | `-IntegerLiteral 0x55972d536050 <col:8> 'int' 0
|     `-ImplicitCastExpr 0x55972d536268 <col:13, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-BinaryOperator 0x55972d536248 <col:13, col:35> 'uint16_t':'unsigned short' lvalue '='
|         |-ArraySubscriptExpr 0x55972d536120 <col:13, col:20> 'uint16_t':'unsigned short' lvalue
|         | |-ImplicitCastExpr 0x55972d536108 <col:13> 'uint16_t *' <ArrayToPointerDecay>
|         | | `-MemberExpr 0x55972d5360b8 <col:13> 'uint16_t [3]' lvalue ->_data 0x55972d533e98
|         | |   `-CXXThisExpr 0x55972d5360a8 <col:13> 'EtherAddress *' implicit this
|         | `-IntegerLiteral 0x55972d5360e8 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x55972d536230 <col:24, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|           `-BinaryOperator 0x55972d536210 <col:24, col:35> 'uint16_t':'unsigned short' lvalue '='
|             |-ArraySubscriptExpr 0x55972d5361b8 <col:24, col:31> 'uint16_t':'unsigned short' lvalue
|             | |-ImplicitCastExpr 0x55972d5361a0 <col:24> 'uint16_t *' <ArrayToPointerDecay>
|             | | `-MemberExpr 0x55972d536150 <col:24> 'uint16_t [3]' lvalue ->_data 0x55972d533e98
|             | |   `-CXXThisExpr 0x55972d536140 <col:24> 'EtherAddress *' implicit this
|             | `-IntegerLiteral 0x55972d536180 <col:30> 'int' 2
|             `-ImplicitCastExpr 0x55972d5361f8 <col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|               `-DeclRefExpr 0x55972d5361d8 <col:35> 'uint16_t':'unsigned short' lvalue ParmVar 0x55972d533ef8 'm' 'uint16_t':'unsigned short'
|-CXXConstructorDecl 0x55972d534618 <line:9:7> col:7 implicit constexpr EtherAddress 'void (const EtherAddress &)' inline default trivial noexcept-unevaluated 0x55972d534618
| `-ParmVarDecl 0x55972d534728 <col:7> col:7 'const EtherAddress &'
|-CXXConstructorDecl 0x55972d5347c8 <col:7> col:7 implicit used constexpr EtherAddress 'void (EtherAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55972d5348d8 <col:7> col:7 used 'EtherAddress &&'
| |-CXXCtorInitializer Field 0x55972d533e98 '_data' 'uint16_t [3]'
| | `-ArrayInitLoopExpr 0x55972d534c60 <col:7> 'uint16_t [3]'
| |   |-OpaqueValueExpr 0x55972d534be8 <col:7> 'uint16_t [3]' xvalue
| |   | `-MemberExpr 0x55972d534ba0 <col:7> 'uint16_t [3]' xvalue ._data 0x55972d533e98
| |   |   `-CXXStaticCastExpr 0x55972d534b70 <col:7> 'EtherAddress' xvalue static_cast<class EtherAddress &&> <NoOp>
| |   |     `-DeclRefExpr 0x55972d534b40 <col:7> 'EtherAddress' lvalue ParmVar 0x55972d5348d8 '' 'EtherAddress &&'
| |   `-ImplicitCastExpr 0x55972d534c48 <col:7> 'uint16_t':'unsigned short' <LValueToRValue>
| |     `-ArraySubscriptExpr 0x55972d534c28 <col:7> 'uint16_t':'unsigned short' xvalue
| |       |-ImplicitCastExpr 0x55972d534c10 <col:7> 'uint16_t *' <ArrayToPointerDecay>
| |       | `-OpaqueValueExpr 0x55972d534be8 <col:7> 'uint16_t [3]' xvalue
| |       |   `-MemberExpr 0x55972d534ba0 <col:7> 'uint16_t [3]' xvalue ._data 0x55972d533e98
| |       |     `-CXXStaticCastExpr 0x55972d534b70 <col:7> 'EtherAddress' xvalue static_cast<class EtherAddress &&> <NoOp>
| |       |       `-DeclRefExpr 0x55972d534b40 <col:7> 'EtherAddress' lvalue ParmVar 0x55972d5348d8 '' 'EtherAddress &&'
| |       `-ArrayInitIndexExpr 0x55972d534c00 <<invalid sloc>> 'unsigned long'
| `-CompoundStmt 0x55972d534cb0 <col:7>
`-CXXDestructorDecl 0x55972d534990 <col:7> col:7 implicit referenced ~EtherAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.EtherAddress = type { [3 x i16] }
  NonVirtualBaseLLVMType:%class.EtherAddress = type { [3 x i16] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55972d499ac0 <../elements/ethernet/setetheraddress.hh:19:1, line:35:1> line:19:7 class SetEtherAddress definition
|-DefinitionData polymorphic
| |-DefaultConstructor exists non_trivial needs_implicit
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55972d499c18 <col:1, col:7> col:7 implicit class SetEtherAddress
|-AccessSpecDecl 0x55972d499ca8 <line:20:3, col:9> col:3 public
|-CXXMethodDecl 0x55972d499d20 <line:22:5, col:64> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x55972d51b378 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55972d49ae10 <col:36, col:64>
|   `-ReturnStmt 0x55972d49ae00 <col:38, col:45>
|     `-ImplicitCastExpr 0x55972d49ade8 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55972d49adc0 <col:45> 'const char [16]' lvalue "SetEtherAddress"
|-CXXMethodDecl 0x55972d499de8 <line:23:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x55972d51b440 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55972d49ae70 <col:36, col:56>
|   `-ReturnStmt 0x55972d49ae60 <col:38, col:45>
|     `-ImplicitCastExpr 0x55972d49ae48 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55972d49ae28 <col:45> 'const char []' lvalue Var 0x55972d51b6f0 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x55972d499eb0 <line:24:5, col:55> col:17 processing 'const char *() const'
| |-Overrides: [ 0x55972d51b808 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x55972d49aed0 <col:36, col:55>
|   `-ReturnStmt 0x55972d49aec0 <col:38, col:45>
|     `-ImplicitCastExpr 0x55972d49aea8 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55972d49ae88 <col:45> 'const char []' lvalue Var 0x55972d51b8c8 'AGNOSTIC' 'const char []'
|-CXXMethodDecl 0x55972d49a1b0 <line:26:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55972d51cc10 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55972d49a030 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x55972d49a0a8 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x55972d49a280 <line:27:5, col:54> col:10 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x55972d51f660 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x55972d49af08 <col:39, col:54>
|   `-ReturnStmt 0x55972d49aef8 <col:41, col:48>
|     `-CXXBoolLiteralExpr 0x55972d49aee8 <col:48> 'bool' true
|-CXXMethodDecl 0x55972d49a340 <line:28:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x55972d51cce0 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x55972d49a480 <line:30:5, col:35> col:13 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x55972d51a558 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x55972d49a3f0 <col:27, col:34> col:35 'Packet *'
|-AccessSpecDecl 0x55972d49a528 <line:32:3, col:10> col:3 private
|-FieldDecl 0x55972d49a560 <line:33:5, col:18> col:18 referenced _addr 'EtherAddress'
|-FieldDecl 0x55972d49a5c8 <line:34:5, col:9> col:9 referenced _anno 'int'
|-CXXConstructorDecl 0x55972d49a660 <line:19:7> col:7 implicit SetEtherAddress 'void (const SetEtherAddress &)' inline default_delete noexcept-unevaluated 0x55972d49a660
| `-ParmVarDecl 0x55972d49a778 <col:7> col:7 'const SetEtherAddress &'
|-CXXConstructorDecl 0x55972d49a818 <col:7> col:7 implicit SetEtherAddress 'void (SetEtherAddress &&)' inline default_delete noexcept-unevaluated 0x55972d49a818
| `-ParmVarDecl 0x55972d49a928 <col:7> col:7 'SetEtherAddress &&'
|-CXXMethodDecl 0x55972d49a9c8 <col:7> col:7 implicit operator= 'SetEtherAddress &(const SetEtherAddress &)' inline default_delete noexcept-unevaluated 0x55972d49a9c8
| `-ParmVarDecl 0x55972d49aad8 <col:7> col:7 'const SetEtherAddress &'
|-CXXMethodDecl 0x55972d49ab48 <col:7> col:7 implicit operator= 'SetEtherAddress &(SetEtherAddress &&)' inline default_delete noexcept-unevaluated 0x55972d49ab48
| `-ParmVarDecl 0x55972d49ac58 <col:7> col:7 'SetEtherAddress &&'
`-CXXDestructorDecl 0x55972d49ace0 <col:7> col:7 implicit ~SetEtherAddress 'void ()' inline default noexcept-unevaluated 0x55972d49ace0
  `-Overrides: [ 0x55972d519f18 Element::~Element 'void ()' ]

Layout: <CGRecordLayout
  LLVMType:%class.SetEtherAddress = type { %class.Element.base, %class.EtherAddress, i32 }
  NonVirtualBaseLLVMType:%class.SetEtherAddress = type { %class.Element.base, %class.EtherAddress, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55972d2edae0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55972d2edbf8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55972d2edc98 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55972d2edcf8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55972d2edd58 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55972d2ede08 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55972d2ee110 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55972d2ee228 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55972d2ee2d0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55972d2ee338 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55972d2ee3c8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55972d2f4460 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55972d2f4898 <col:12>
|-CXXConstructorDecl 0x55972d2f4568 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55972d2f4678 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55972d2ee2d0 'data' 'const char *'
| | `-ImplicitCastExpr 0x55972d2f6e20 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55972d2f6df0 <col:12> 'const char *const' lvalue .data 0x55972d2ee2d0
| |     `-DeclRefExpr 0x55972d2f6dd0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55972d2f4678 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55972d2ee338 'length' 'int'
| | `-ImplicitCastExpr 0x55972d2f6eb0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55972d2f6e80 <col:12> 'const int' lvalue .length 0x55972d2ee338
| |     `-DeclRefExpr 0x55972d2f6e60 <col:12> 'const String::rep_t' lvalue ParmVar 0x55972d2f4678 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55972d2ee3c8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55972d2f6f40 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55972d2f6f10 <col:12> 'String::memo_t *const' lvalue .memo 0x55972d2ee3c8
| |     `-DeclRefExpr 0x55972d2f6ef0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55972d2f4678 '' 'const String::rep_t &'
| `-CompoundStmt 0x55972d2f6f98 <col:12>
|-CXXConstructorDecl 0x55972d2f4718 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55972d2f4718
| `-ParmVarDecl 0x55972d2f4828 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55972d2f9d80 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55972d305798 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55972d3058a8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55972d305dc0 <col:12>
|   |-BinaryOperator 0x55972d305bd8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55972d305b90 <col:12> 'const char *' lvalue ->data 0x55972d2ee2d0
|   | | `-CXXThisExpr 0x55972d305b80 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55972d305bc0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55972d305b50 <col:12> 'const char *const' lvalue .data 0x55972d2ee2d0
|   |     `-DeclRefExpr 0x55972d305b30 <col:12> 'const String::rep_t' lvalue ParmVar 0x55972d3058a8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55972d305ca0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55972d305c58 <col:12> 'int' lvalue ->length 0x55972d2ee338
|   | | `-CXXThisExpr 0x55972d305c48 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55972d305c88 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55972d305c18 <col:12> 'const int' lvalue .length 0x55972d2ee338
|   |     `-DeclRefExpr 0x55972d305bf8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55972d3058a8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55972d305d68 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55972d305d20 <col:12> 'String::memo_t *' lvalue ->memo 0x55972d2ee3c8
|   | | `-CXXThisExpr 0x55972d305d10 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55972d305d50 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55972d305ce0 <col:12> 'String::memo_t *const' lvalue .memo 0x55972d2ee3c8
|   |     `-DeclRefExpr 0x55972d305cc0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55972d3058a8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55972d305db0 <col:12>
|     `-UnaryOperator 0x55972d305d98 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55972d305d88 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55972d305918 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55972d305918
  `-ParmVarDecl 0x55972d305a28 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55972d2e5050 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55972d2e5168 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55972d2e51f8 <col:16, col:22> col:16 public
|-TypedefDecl 0x55972d2e5238 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55972cfb8e00 'const char *'
|   `-QualType 0x55972cfb8351 'const char' const
|     `-BuiltinType 0x55972cfb8350 'char'
|-TypedefDecl 0x55972d2e52c0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55972d2e5290 'String::const_iterator' sugar
|   |-Typedef 0x55972d2e5238 'const_iterator'
|   `-PointerType 0x55972cfb8e00 'const char *'
|     `-QualType 0x55972cfb8351 'const char' const
|       `-BuiltinType 0x55972cfb8350 'char'
|-TypedefDecl 0x55972d2e5430 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55972d2e53a0 'int (String::*)() const'
|   |-RecordType 0x55972d2e50e0 'String'
|   | `-CXXRecord 0x55972d2e5050 'String'
|   `-ParenType 0x55972d2e5340 'int () const' sugar
|     `-FunctionProtoType 0x55972d2b8ed0 'int () const' const cdecl
|       `-BuiltinType 0x55972cfb83b0 'int'
|-TypedefDecl 0x55972d2e5498 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55972d10dab0 'int64_t' sugar
|   |-Typedef 0x55972d0212a0 'int64_t'
|   `-TypedefType 0x55972cffa510 '__int64_t' sugar
|     |-Typedef 0x55972cffa0e8 '__int64_t'
|     `-BuiltinType 0x55972cfb83d0 'long'
|-TypedefDecl 0x55972d2e5500 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55972d10d9d0 'uint64_t' sugar
|   |-Typedef 0x55972d021440 'uint64_t'
|   `-TypedefType 0x55972cffa5a0 '__uint64_t' sugar
|     |-Typedef 0x55972cffa158 '__uint64_t'
|     `-BuiltinType 0x55972cfb8470 'unsigned long'
|-TypedefDecl 0x55972d2e5590 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55972d2e5560 'String::intmax_t' sugar
|   |-Typedef 0x55972d2e5498 'intmax_t'
|   `-TypedefType 0x55972d10dab0 'int64_t' sugar
|     |-Typedef 0x55972d0212a0 'int64_t'
|     `-TypedefType 0x55972cffa510 '__int64_t' sugar
|       |-Typedef 0x55972cffa0e8 '__int64_t'
|       `-BuiltinType 0x55972cfb83d0 'long'
|-TypedefDecl 0x55972d2e5620 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55972d2e55f0 'String::uintmax_t' sugar
|   |-Typedef 0x55972d2e5500 'uintmax_t'
|   `-TypedefType 0x55972d10d9d0 'uint64_t' sugar
|     |-Typedef 0x55972d021440 'uint64_t'
|     `-TypedefType 0x55972cffa5a0 '__uint64_t' sugar
|       |-Typedef 0x55972cffa158 '__uint64_t'
|       `-BuiltinType 0x55972cfb8470 'unsigned long'
|-CXXConstructorDecl 0x55972d2e56e0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55972d2e5888 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55972d2e57c8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55972d2e5a38 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55972d2e5978 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55972d2e5b90 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55972d2e5b00 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55972d2e5da8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55972d2e5c58 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55972d2e5cd8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55972d2e5fc8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55972d2e5e78 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55972d2e5ef8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55972d2e61e8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55972d2e6098 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55972d2e6118 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55972d2e6408 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55972d2e62b8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55972d2e6338 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55972d2e6598 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55972d2e64d0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55972d2e6718 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55972d2e6658 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55972d2e68a8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55972d2e67e0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55972d2e6a00 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55972d2e6970 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55972d2e6b58 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55972d2e6ac8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55972d2e6cb0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55972d2e6c20 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55972d2e6e38 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55972d2e6d78 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55972d2e6fc8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55972d2e6f00 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55972d2e7158 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55972d2e7090 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55972d2e72e8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55972d2e7220 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55972d2e73e0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55972d2e7508 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55972d2e7688 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55972d2e75c0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55972d2e77d8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55972d2e7748 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55972d2e7890 <col:63> "" ""
|-CXXMethodDecl 0x55972d2e79d8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55972d2e7918 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55972d2e7be8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55972d2e7a98 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55972d2e7b18 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55972d2e7e08 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55972d2e7cb0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55972d2e7d30 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55972d2e80e8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55972d2e7ec8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55972d2e7f48 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55972d2f3f30 <col:55> 'int' 10
| `-ParmVarDecl 0x55972d2e7fc0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55972d2f3f50 <col:76> 'bool' true
|-CXXMethodDecl 0x55972d2e83c8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55972d2e81b0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55972d2e8230 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55972d2f3f60 <col:56> 'int' 10
| `-ParmVarDecl 0x55972d2e82a8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55972d2f3f80 <col:77> 'bool' true
|-CXXMethodDecl 0x55972d2e84d0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55972d2e8598 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55972d2e8660 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55972d2e8700 <col:20>
| `-OptimizeNoneAttr 0x55972d2e8758 <col:30>
|-CXXConversionDecl 0x55972d2e8848 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55972d2e8918 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55972d2e89d8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55972d2e8ac8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55972d2e8b88 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55972d2e8d08 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55972d2e8c40 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55972d2e8e58 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55972d2e8dc8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55972d2e8f48 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55972d2e9008 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55972d2e9258 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55972d2e90c0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55972d2e9140 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55972d2e94b8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55972d2e9320 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55972d2e93a0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55972d2e9588 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55972d2e9798 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55972d2e9640 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55972d2e96c0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55972d2e99b8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55972d2e9860 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55972d2e98e0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55972d2e9b48 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55972d2e9a80 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55972d2e9c38 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55972d2e9da8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55972d2e9ce8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55972d2e9fb8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55972d2e9e68 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55972d2e9ee8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55972d2ea1d0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55972d2ea078 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55972d2ea0f0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55972d2ea360 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55972d2ea290 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55972d2ea580 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55972d2ea420 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55972d2ea4a0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55972d2ea6d0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55972d2ea640 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55972d2ea8a8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55972d2ea790 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55972d2ea810 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55972d2ea9f8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55972d2ea968 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55972d2eac10 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55972d2eaab0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55972d2eab30 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55972d2f3f90 <col:39> 'int' 0
|-CXXMethodDecl 0x55972d2eae30 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55972d2eacd0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55972d2ead50 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55972d2f3fb0 <col:48> 'int' 0
|-CXXMethodDecl 0x55972d2eb010 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55972d2eaef0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55972d2eaf70 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55972d2f3fd0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55972d2eb0e0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55972d2eb1a0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55972d2eb260 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55972d2eb320 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55972d2eb3e0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55972d2eb588 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55972d2eb490 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55972d2eb708 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55972d2eb640 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55972d2eb8e0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55972d2eb7c8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55972d2eba58 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55972d2eb998 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55972d2ebba0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55972d2ebb10 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55972d2ebcf0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55972d2ebc60 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55972d2ebec8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55972d2ebdb0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55972d2ebe30 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55972d2ec0a8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55972d2ebf90 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55972d2ec010 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55972d2ec1f8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55972d2ec168 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55972d2ec408 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55972d2ec2b8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55972d2ec338 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55972d2ec568 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55972d2ec4d0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55972d2ec6c0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55972d2ec628 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55972d2ec768 <col:57> "" ""
|-CXXMethodDecl 0x55972d2ec878 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55972d2ec7e8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55972d2ec9c8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55972d2ec938 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55972d2ecb48 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55972d2eca80 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55972d2ecc10 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55972d2eccd0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55972d2ecd90 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55972d2ece30 <col:49> "" ""
|-CXXMethodDecl 0x55972d2ecec0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55972d2ecf80 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55972d2ed070 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55972d2ed138 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55972d2ed1f8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55972d2ed2b8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55972d2ed3b0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55972d2ed478 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55972d2ed540 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55972d2ed718 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55972d2ed5f8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55972d2ed678 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55972d2ed940 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55972d2ed7e0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55972d2ed860 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55972d2eda50 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55972d2edab8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55972d2edae0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55972d2edbf8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55972d2edc98 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55972d2edcf8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55972d2edd58 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55972d2ede08 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55972d2ede70 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55972d2ee0a8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55972d2ee0f8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55972d2ee088 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55972d2edf98 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55972d2edf40 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55972d2edf80 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55972d2edf60 <col:32> 'int' 8
|-CXXRecordDecl 0x55972d2ee110 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55972d2ee228 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55972d2ee2d0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55972d2ee338 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55972d2ee3c8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55972d2f4460 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55972d2f4898 <col:12>
| |-CXXConstructorDecl 0x55972d2f4568 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55972d2f4678 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55972d2ee2d0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55972d2f6e20 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55972d2f6df0 <col:12> 'const char *const' lvalue .data 0x55972d2ee2d0
| | |     `-DeclRefExpr 0x55972d2f6dd0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55972d2f4678 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55972d2ee338 'length' 'int'
| | | `-ImplicitCastExpr 0x55972d2f6eb0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55972d2f6e80 <col:12> 'const int' lvalue .length 0x55972d2ee338
| | |     `-DeclRefExpr 0x55972d2f6e60 <col:12> 'const String::rep_t' lvalue ParmVar 0x55972d2f4678 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55972d2ee3c8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55972d2f6f40 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55972d2f6f10 <col:12> 'String::memo_t *const' lvalue .memo 0x55972d2ee3c8
| | |     `-DeclRefExpr 0x55972d2f6ef0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55972d2f4678 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55972d2f6f98 <col:12>
| |-CXXConstructorDecl 0x55972d2f4718 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55972d2f4718
| | `-ParmVarDecl 0x55972d2f4828 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55972d2f9d80 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55972d305798 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55972d3058a8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55972d305dc0 <col:12>
| |   |-BinaryOperator 0x55972d305bd8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55972d305b90 <col:12> 'const char *' lvalue ->data 0x55972d2ee2d0
| |   | | `-CXXThisExpr 0x55972d305b80 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55972d305bc0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55972d305b50 <col:12> 'const char *const' lvalue .data 0x55972d2ee2d0
| |   |     `-DeclRefExpr 0x55972d305b30 <col:12> 'const String::rep_t' lvalue ParmVar 0x55972d3058a8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55972d305ca0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55972d305c58 <col:12> 'int' lvalue ->length 0x55972d2ee338
| |   | | `-CXXThisExpr 0x55972d305c48 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55972d305c88 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55972d305c18 <col:12> 'const int' lvalue .length 0x55972d2ee338
| |   |     `-DeclRefExpr 0x55972d305bf8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55972d3058a8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55972d305d68 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55972d305d20 <col:12> 'String::memo_t *' lvalue ->memo 0x55972d2ee3c8
| |   | | `-CXXThisExpr 0x55972d305d10 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55972d305d50 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55972d305ce0 <col:12> 'String::memo_t *const' lvalue .memo 0x55972d2ee3c8
| |   |     `-DeclRefExpr 0x55972d305cc0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55972d3058a8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55972d305db0 <col:12>
| |     `-UnaryOperator 0x55972d305d98 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55972d305d88 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55972d305918 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55972d305918
|   `-ParmVarDecl 0x55972d305a28 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55972d2ee440 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55972d2ee688 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55972d2ee4a8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55972d2ee528 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55972d2ee5a0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55972d2f4420 <col:79, line:261:5>
|   |-BinaryOperator 0x55972d2f4098 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55972d2f4030 <col:2, col:5> 'const char *' lvalue .data 0x55972d2ee2d0
|   | | `-MemberExpr 0x55972d2f4000 <col:2> 'String::rep_t' lvalue ->_r 0x55972d2ee440
|   | |   `-CXXThisExpr 0x55972d2f3ff0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55972d2f4080 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55972d2f4060 <col:12> 'const char *' lvalue ParmVar 0x55972d2ee4a8 'data' 'const char *'
|   |-BinaryOperator 0x55972d2f4160 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55972d2f40f8 <col:2, col:5> 'int' lvalue .length 0x55972d2ee338
|   | | `-MemberExpr 0x55972d2f40c8 <col:2> 'String::rep_t' lvalue ->_r 0x55972d2ee440
|   | |   `-CXXThisExpr 0x55972d2f40b8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55972d2f4148 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55972d2f4128 <col:14> 'int' lvalue ParmVar 0x55972d2ee528 'length' 'int'
|   `-IfStmt 0x55972d2f4408 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55972d2f4280 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55972d2f4268 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55972d2f4248 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55972d2f4228 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55972d2f41c0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55972d2ee3c8
|     |       | `-MemberExpr 0x55972d2f4190 <col:7> 'String::rep_t' lvalue ->_r 0x55972d2ee440
|     |       |   `-CXXThisExpr 0x55972d2f4180 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55972d2f4210 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55972d2f41f0 <col:17> 'String::memo_t *' lvalue ParmVar 0x55972d2ee5a0 'memo' 'String::memo_t *'
|     `-CallExpr 0x55972d2f43e0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55972d2f43c8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55972d2f42d0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55972d2dd0b8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55972d2f4338 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55972d2edc98
|         `-ImplicitCastExpr 0x55972d2f4320 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55972d2f4300 <col:27> 'String::memo_t *' lvalue ParmVar 0x55972d2ee5a0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55972d2ee938 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55972d2ee758 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55972d2ee7d8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55972d2ee850 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55972d2ee440 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55972d2f48a8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55972d2f4a38 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55972d2f49a0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55972d2f4910 <col:2> '<bound member function type>' ->assign_memo 0x55972d2ee688
|     | `-ImplicitCastExpr 0x55972d2f49d8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55972d2f4900 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55972d2f49f0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55972d2f4940 <col:14> 'const char *' lvalue ParmVar 0x55972d2ee758 'data' 'const char *'
|     |-ImplicitCastExpr 0x55972d2f4a08 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55972d2f4960 <col:20> 'int' lvalue ParmVar 0x55972d2ee7d8 'length' 'int'
|     `-ImplicitCastExpr 0x55972d2f4a20 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55972d2f4980 <col:28> 'String::memo_t *' lvalue ParmVar 0x55972d2ee850 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55972d2eeac8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55972d2eea08 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55972d2f4c90 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55972d2f4c10 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55972d2f4a60 <col:2> '<bound member function type>' ->assign_memo 0x55972d2ee688
|     | `-CXXThisExpr 0x55972d2f4a50 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55972d2f4c48 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55972d2f4ae0 <col:14, col:19> 'const char *' lvalue .data 0x55972d2ee2d0
|     |   `-MemberExpr 0x55972d2f4ab0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55972d2ee440
|     |     `-DeclRefExpr 0x55972d2f4a90 <col:14> 'const String' lvalue ParmVar 0x55972d2eea08 'x' 'const String &'
|     |-ImplicitCastExpr 0x55972d2f4c60 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55972d2f4b60 <col:25, col:30> 'int' lvalue .length 0x55972d2ee338
|     |   `-MemberExpr 0x55972d2f4b30 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55972d2ee440
|     |     `-DeclRefExpr 0x55972d2f4b10 <col:25> 'const String' lvalue ParmVar 0x55972d2eea08 'x' 'const String &'
|     `-ImplicitCastExpr 0x55972d2f4c78 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55972d2f4be0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55972d2ee3c8
|         `-MemberExpr 0x55972d2f4bb0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55972d2ee440
|           `-DeclRefExpr 0x55972d2f4b90 <col:38> 'const String' lvalue ParmVar 0x55972d2eea08 'x' 'const String &'
|-CXXMethodDecl 0x55972d2eeb90 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55972d2f5650 <col:31, line:278:5>
|   `-IfStmt 0x55972d2f5638 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55972d2f4d30 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55972d2f4d18 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55972d2f4ce8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55972d2ee3c8
|     |     `-MemberExpr 0x55972d2f4cb8 <col:6> 'String::rep_t' lvalue ->_r 0x55972d2ee440
|     |       `-CXXThisExpr 0x55972d2f4ca8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55972d2f5610 <col:15, line:277:2>
|       |-ParenExpr 0x55972d2f51e0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55972d2f51b0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55972d2f4e40 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55972d2f4e28 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55972d2f4e10 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55972d2f4dd0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55972d2edc98
|       |   |       `-ImplicitCastExpr 0x55972d2f4db8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55972d2f4d88 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55972d2ee3c8
|       |   |           `-MemberExpr 0x55972d2f4d58 <col:27> 'String::rep_t' lvalue ->_r 0x55972d2ee440
|       |   |             `-CXXThisExpr 0x55972d2f4d48 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55972d2f4ea0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55972d2f4e80 <col:54> 'int' 0
|       |   `-CallExpr 0x55972d2f5110 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55972d2f50f8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55972d2f5078 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55972d054320 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55972d2f5150 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55972d2f4f88 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55972d2f5168 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55972d2f4fb8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55972d2f5180 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55972d2f4ff0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55972d2f5198 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55972d2f5060 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55972d2f5048 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55972d2f5010 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55972d2f5530 <line:274:6, line:275:22>
|       | |-CallExpr 0x55972d2f53f0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55972d2f53d8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55972d2f5350 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55972d2de500 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55972d2f5320 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55972d2edc98
|       | |   `-ImplicitCastExpr 0x55972d2f5308 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55972d2f52d8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55972d2ee3c8
|       | |       `-MemberExpr 0x55972d2f52a8 <col:40> 'String::rep_t' lvalue ->_r 0x55972d2ee440
|       | |         `-CXXThisExpr 0x55972d2f5298 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55972d2f54f0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55972d2f54d8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55972d2f5418 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55972d2f3370 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55972d2f5518 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55972d2f5478 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55972d2ee3c8
|       |       `-MemberExpr 0x55972d2f5448 <col:15> 'String::rep_t' lvalue ->_r 0x55972d2ee440
|       |         `-CXXThisExpr 0x55972d2f5438 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55972d2f55f0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55972d2f5588 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55972d2ee3c8
|         | `-MemberExpr 0x55972d2f5558 <col:6> 'String::rep_t' lvalue ->_r 0x55972d2ee440
|         |   `-CXXThisExpr 0x55972d2f5548 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55972d2f55d8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55972d2f55b8 <col:16> 'int' 0
|-CXXMethodDecl 0x55972d2eee28 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55972d2eec48 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55972d2eecc8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55972d2eed40 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55972d2eef00 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55972d2ef150 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55972d2eefb8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55972d2ef038 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55972d2ef0b0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55972d2ef338 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55972d2ef220 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55972d2ef2a0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55972d2ef438 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55972d2f5728 <col:41, line:286:5>
|   `-ReturnStmt 0x55972d2f5718 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55972d2f56e8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55972d2f56b0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55972d2f5698 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55972d2f5678 <col:46> 'int' 1
|-CXXMethodDecl 0x55972d2ef6d8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55972d2ef4f0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55972d2ef570 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55972d2ef5f0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55972d2f3370 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55972d2ef7a0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55972d2f3440 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55972d2f3610 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55972d2f34f8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55972d2f3578 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55972d2f36d0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55972d2f3798 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55972d2f3898 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55972d2f3910 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55972d2f3988 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55972d2f39f0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55972d2f3af0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55972d2f3b40 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55972d2f3ad0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55972d2f3ab0 <col:22> 'int' 14
|-CXXMethodDecl 0x55972d2f3d58 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55972d2f3b70 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55972d2f3bf0 <col:38> col:41 'int'
| `-ParmVarDecl 0x55972d2f3c70 <col:43> col:46 'int'
|-FriendDecl 0x55972d2f3e60 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55972d2f3ef0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55972d574660 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55972d574838 prev 0x55972d574660 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55972d5748c8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55972d5748f0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55972cfb83b0 'int'
|-TypedefDecl 0x55972d576250 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55972d576200 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55972d5761e0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55972d574b08 'type'
|     `-SubstTemplateTypeParmType 0x55972d574ad0 'String' sugar
|       |-TemplateTypeParmType 0x55972d2a88f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55972d2a88a0 'T'
|       `-RecordType 0x55972d2e50e0 'String'
|         `-CXXRecord 0x55972d2e5050 'String'
|-TypedefDecl 0x55972d576308 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55972d5762d0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55972d5762b0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55972d576250 'type'
|     `-ElaboratedType 0x55972d576200 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55972d5761e0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55972d574b08 'type'
|         `-SubstTemplateTypeParmType 0x55972d574ad0 'String' sugar
|           |-TemplateTypeParmType 0x55972d2a88f0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55972d2a88a0 'T'
|           `-RecordType 0x55972d2e50e0 'String'
|             `-CXXRecord 0x55972d2e5050 'String'
|-CXXMethodDecl 0x55972d576488 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55972d576398 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55972d576578 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55972d576658 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55972d576658
|-CXXMethodDecl 0x55972d576928 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55972d576830 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55972d576b68 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55972d5769e0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55972d576a58 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55972d576d38 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55972d576c28 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55972d576ca0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55972d576e98 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55972d576f68 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55972d5771b8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55972d577028 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55972d5770a0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55972d577448 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55972d577288 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55972d577300 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55972d577608 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55972d577518 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55972d5777c8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55972d5776d0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55972d577880 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55972d577930 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55972d577b68 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55972d5779e0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55972d577a58 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55972d577e08 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55972d577d10 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55972d577ed0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55972d577f20 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55972d577f70 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55972d51c880 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55972d5730c8 prev 0x55972d51c880 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55972d5745d0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55972d574580 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55972d574560 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55972d574410 'type'
|     `-SubstTemplateTypeParmType 0x55972d5742a0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55972d27e6a0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55972d27e648 'F'
|       `-RecordType 0x55972d573f00 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55972d573e20 'typed_array_memory'
|-FieldDecl 0x55972d577fc0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55972d578010 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55972d578048 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55972d573160 'String' sugar
|   |-TemplateTypeParmType 0x55972d2b5c10 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55972d2b5bb8 'T'
|   `-RecordType 0x55972d2e50e0 'String'
|     `-CXXRecord 0x55972d2e5050 'String'
|-TypedefDecl 0x55972d5780d8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55972d5780a0 'String &'
|   `-SubstTemplateTypeParmType 0x55972d573160 'String' sugar
|     |-TemplateTypeParmType 0x55972d2b5c10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55972d2b5bb8 'T'
|     `-RecordType 0x55972d2e50e0 'String'
|       `-CXXRecord 0x55972d2e5050 'String'
|-TypedefDecl 0x55972d578168 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55972d578130 'const String &'
|   `-QualType 0x55972d573161 'const String' const
|     `-SubstTemplateTypeParmType 0x55972d573160 'String' sugar
|       |-TemplateTypeParmType 0x55972d2b5c10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55972d2b5bb8 'T'
|       `-RecordType 0x55972d2e50e0 'String'
|         `-CXXRecord 0x55972d2e5050 'String'
|-TypedefDecl 0x55972d5781f8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55972d5781c0 'String *'
|   `-SubstTemplateTypeParmType 0x55972d573160 'String' sugar
|     |-TemplateTypeParmType 0x55972d2b5c10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55972d2b5bb8 'T'
|     `-RecordType 0x55972d2e50e0 'String'
|       `-CXXRecord 0x55972d2e5050 'String'
|-TypedefDecl 0x55972d578288 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55972d578250 'const String *'
|   `-QualType 0x55972d573161 'const String' const
|     `-SubstTemplateTypeParmType 0x55972d573160 'String' sugar
|       |-TemplateTypeParmType 0x55972d2b5c10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55972d2b5bb8 'T'
|       `-RecordType 0x55972d2e50e0 'String'
|         `-CXXRecord 0x55972d2e5050 'String'
|-TypedefDecl 0x55972d578ee0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55972d578e90 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55972d578e70 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55972d578da8 'type'
|     `-LValueReferenceType 0x55972d578d70 'const String &'
|       `-QualType 0x55972d578b11 'const String' const
|         `-SubstTemplateTypeParmType 0x55972d578b10 'String' sugar
|           |-TemplateTypeParmType 0x55972d2885f0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55972d288598 'T'
|           `-RecordType 0x55972d2e50e0 'String'
|             `-CXXRecord 0x55972d2e5050 'String'
|-TypedefDecl 0x55972d578f48 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55972d578130 'const String &'
|   `-QualType 0x55972d573161 'const String' const
|     `-SubstTemplateTypeParmType 0x55972d573160 'String' sugar
|       |-TemplateTypeParmType 0x55972d2b5c10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55972d2b5bb8 'T'
|       `-RecordType 0x55972d2e50e0 'String'
|         `-CXXRecord 0x55972d2e5050 'String'
|-TypedefDecl 0x55972d578fa0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55972cfb83b0 'int'
|-TypedefDecl 0x55972d579008 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55972d5781c0 'String *'
|   `-SubstTemplateTypeParmType 0x55972d573160 'String' sugar
|     |-TemplateTypeParmType 0x55972d2b5c10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55972d2b5bb8 'T'
|     `-RecordType 0x55972d2e50e0 'String'
|       `-CXXRecord 0x55972d2e5050 'String'
|-TypedefDecl 0x55972d579070 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55972d578250 'const String *'
|   `-QualType 0x55972d573161 'const String' const
|     `-SubstTemplateTypeParmType 0x55972d573160 'String' sugar
|       |-TemplateTypeParmType 0x55972d2b5c10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55972d2b5bb8 'T'
|       `-RecordType 0x55972d2e50e0 'String'
|         `-CXXRecord 0x55972d2e5050 'String'
|-EnumDecl 0x55972d5790c8 <line:134:5> col:5
| `-EnumConstantDecl 0x55972d5791c0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55972d5791a0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55972d2b7298 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55972d2b7270 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55972d2b7250 <col:40> 'int' 1
|-CXXConstructorDecl 0x55972d579248 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55972d5794d8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55972d579300 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55972d5793a0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55972d579768 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55972d579650 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55972d579a28 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55972d579910 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55972d579d40 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55972d579c20 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55972d57a050 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55972d579f30 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55972d57a340 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55972d57a188 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55972d57a200 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55972d57a468 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55972d57a518 <col:20> Inherited
| `-OptimizeNoneAttr 0x55972d57a570 <col:30> Inherited
|-CXXMethodDecl 0x55972d57a5b8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55972d57a668 <col:20> Inherited
| `-OptimizeNoneAttr 0x55972d57a6c0 <col:30> Inherited
|-CXXMethodDecl 0x55972d57a788 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55972d57a838 <col:20> Inherited
| `-OptimizeNoneAttr 0x55972d57a890 <col:30> Inherited
|-CXXMethodDecl 0x55972d57a8d8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55972d57a988 <col:20> Inherited
| `-OptimizeNoneAttr 0x55972d57a9e0 <col:30> Inherited
|-CXXMethodDecl 0x55972d57aa28 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55972d57aad8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55972d57ab30 <col:30> Inherited
|-CXXMethodDecl 0x55972d57ab78 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55972d57ac28 <col:20> Inherited
| `-OptimizeNoneAttr 0x55972d57ac80 <col:30> Inherited
|-CXXMethodDecl 0x55972d57aca8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55972d57ad58 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55972d57ae08 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55972d57afc8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55972d57aeb8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55972d57af30 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55972d57b118 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55972d57b088 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55972d57b2c8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55972d57b1d0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55972d57b380 <col:20>
| `-OptimizeNoneAttr 0x55972d57b3d8 <col:30>
|-CXXMethodDecl 0x55972d57b4f8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55972d57b400 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55972d57b5b0 <col:20>
| `-OptimizeNoneAttr 0x55972d57b608 <col:30>
|-CXXMethodDecl 0x55972d57b6c0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55972d57b630 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55972d57b808 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55972d57b778 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55972d57b938 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55972d57ba38 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55972d57bb08 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55972d57bbd8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55972d57bd18 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55972d57bc88 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55972d57be60 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55972d57bdd0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55972d57bfa8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55972d57bf18 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55972d57c060 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55972d57c160 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55972d57c0d0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55972d57c218 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55972d57c2d8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55972d57c3d8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55972d57c558 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55972d57c498 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55972d57cd18 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55972d57c610 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55972d57cc78 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55972d57cb78 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55972d57cdf8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55972d57cf48 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55972d57ceb8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55972d57d000 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55972d57d248 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55972d57d0c0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55972d57d138 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55972d57d3d8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55972d57d318 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55972d57d5e8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55972d57d4a0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55972d57d518 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55972d57d6a8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55972d57d908 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55972d57d810 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55972d57d9d8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55972d57d9d8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55972d5f5148 prev 0x55972d588568 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55972d5f5240 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55972d5f52d0 <col:22, col:28> col:22 public
|-EnumDecl 0x55972d5f52f8 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55972d5f5418 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55972d5f53f8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55972d5f53e0 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55972d5f53c0 <col:14> 'int' 999
| |-EnumConstantDecl 0x55972d5f54c0 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55972d5f54a0 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55972d5f5488 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55972d5f5468 <col:14> 'int' 1
| |-EnumConstantDecl 0x55972d5f5550 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55972d5f5530 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55972d5f5510 <col:17> 'int' 0
| |-EnumConstantDecl 0x55972d5f55e0 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55972d5f55c0 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55972d5f55a0 <col:13> 'int' 1
| |-EnumConstantDecl 0x55972d5f5670 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55972d5f5650 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55972d5f5630 <col:16> 'int' 2
| |-EnumConstantDecl 0x55972d5f5700 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55972d5f56e0 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55972d5f56c0 <col:13> 'int' 3
| |-EnumConstantDecl 0x55972d5f5790 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55972d5f5770 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55972d5f5750 <col:15> 'int' 4
| |-EnumConstantDecl 0x55972d5f5820 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55972d5f5800 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55972d5f57e0 <col:14> 'int' 5
| |-EnumConstantDecl 0x55972d5f58b0 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55972d5f5890 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55972d5f5870 <col:12> 'int' 6
| `-EnumConstantDecl 0x55972d5f5940 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55972d5f5920 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55972d5f5900 <col:13> 'int' 7
|-VarDecl 0x55972d5f59b0 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55972d5f5a38 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55972d5f5ac0 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55972d5f5b48 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55972d5f5bd0 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55972d5f5c58 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55972d5f5ce0 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55972d5f5d68 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55972d5f5df0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55972d5f5e78 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55972d5f5f00 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55972d5f6000 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55972d5fb338 '_nerrors' 'int'
| | `-IntegerLiteral 0x55972d5fbac8 <line:128:13> 'int' 0
| `-CompoundStmt 0x55972d5fbb38 <col:16, line:129:5>
|-CXXDestructorDecl 0x55972d5f60f0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55972d5fbb48 <col:29, line:132:5>
|-CXXMethodDecl 0x55972d5f62a8 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55972d5f61e0 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55972d5f6370 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55972d5f6458 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55972d5fbba0 <col:44, line:161:5>
|   `-ReturnStmt 0x55972d5fbb90 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55972d5fbb78 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55972d5fbb58 <col:9> 'ErrorHandler *' lvalue Var 0x55972d5fb398 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55972d5f6598 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55972d5f6508 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55972d5f6660 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55972d5fbc00 <col:43, line:173:5>
|   `-ReturnStmt 0x55972d5fbbf0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55972d5fbbd8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55972d5fbbb8 <col:9> 'ErrorHandler *' lvalue Var 0x55972d5fb410 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55972d5f6718 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55972d5f6798 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55972d5f68a8 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55972d5f6818 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55972d5f69f8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55972d5f6968 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55972d5f6b50 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55972d5f6ab8 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55972d5f6ca8 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x55972d5f6c10 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55972d5f6e00 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55972d5f6d68 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55972d5f7010 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55972d5f6eb8 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55972d5f6f38 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55972d5f71e8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55972d5f70d0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55972d5f7150 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55972d5f7408 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55972d5f72a8 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55972d5f7328 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55972d5f75e8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55972d5f74c8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55972d5f7548 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55972d5f77c8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55972d5f76a8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55972d5f7728 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55972d5f7950 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55972d5f7888 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55972d5f7b20 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55972d5f7a08 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55972d5f7a80 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55972d5fbe58 <col:57, line:234:5>
|   `-ReturnStmt 0x55972d5fbe48 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55972d5fbe30 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55972d5fbdd8 <col:9, col:41> 'int'
|         |-MemberExpr 0x55972d5fbda8 <col:9> '<bound member function type>' ->xmessage 0x55972d5f7950
|         | `-CXXThisExpr 0x55972d5fbd98 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55972d5fbe18 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55972d5fbe00 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55972d5fbd78 <col:18, col:40> 'String' (CXXTemporary 0x55972d5fbd78)
|               `-CallExpr 0x55972d5fbd40 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55972d5fbd28 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55972d5fbca0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55972d5f9b18 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55972d5fbcc0 <col:31> 'const String' lvalue ParmVar 0x55972d5f7a80 'str' 'const String &'
|                 `-DeclRefExpr 0x55972d5fbce0 <col:36> 'const String' lvalue ParmVar 0x55972d5f7a08 'anno' 'const String &'
|-CXXMethodDecl 0x55972d5f7e00 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55972d5f7be0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55972d5f7c60 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55972d5f7cd8 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55972d5fc0e8 <col:68, line:243:5>
|   `-ReturnStmt 0x55972d5fc0d8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55972d5fc0c0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55972d5fc060 <col:9, col:41> 'int'
|         |-MemberExpr 0x55972d5fc030 <col:9> '<bound member function type>' ->xmessage 0x55972d5f7b20
|         | `-CXXThisExpr 0x55972d5fc020 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55972d5fbef8 <col:18> 'const String' lvalue ParmVar 0x55972d5f7be0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55972d5fc0a8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55972d5fc090 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55972d5fc000 <col:24, col:40> 'String' (CXXTemporary 0x55972d5fc000)
|               `-CXXMemberCallExpr 0x55972d5fbf98 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55972d5fbf28 <col:24> '<bound member function type>' ->vformat 0x55972d5f8fe0
|                 | `-CXXThisExpr 0x55972d5fbf18 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55972d5fbfc8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55972d5fbf58 <col:32> 'const char *' lvalue ParmVar 0x55972d5f7c60 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55972d5fbfe0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55972d5fbf78 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55972d5f7cd8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55972d5f80a0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55972d5f7ec8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55972d5f7f40 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55972d5f7fb8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55972d5fc428 <col:23, line:254:5>
|   `-ReturnStmt 0x55972d5fc418 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55972d5fc400 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55972d5fc3a0 <col:9, col:71> 'int'
|         |-MemberExpr 0x55972d5fc370 <col:9> '<bound member function type>' ->xmessage 0x55972d5f7b20
|         | `-CXXThisExpr 0x55972d5fc360 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55972d5fc3e8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55972d5fc3d0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55972d5fc320 <col:18, col:65> 'String' (CXXTemporary 0x55972d5fc320)
|         |     `-CallExpr 0x55972d5fc2b8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55972d5fc2a0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55972d5fc188 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55972d5f9b18 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55972d5fc1a8 <col:31> 'const String' lvalue ParmVar 0x55972d5f7f40 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55972d5fc300 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55972d5fc2e8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55972d5fc280 <col:37, col:64> 'String' (CXXTemporary 0x55972d5fc280)
|         |             `-CallExpr 0x55972d5fc250 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55972d5fc238 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55972d5fc1c8 <col:37> 'String (const String &)' lvalue CXXMethod 0x55972d5fa168 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55972d5fc1e8 <col:56> 'const String' lvalue ParmVar 0x55972d5f7ec8 'landmark' 'const String &'
|         `-DeclRefExpr 0x55972d5fc340 <col:68> 'const String' lvalue ParmVar 0x55972d5f7fb8 'str' 'const String &'
|-CXXMethodDecl 0x55972d5f8420 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55972d5f8168 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55972d5f81e0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55972d5f8260 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55972d5f82d8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55972d5fc6e0 <col:34, line:267:5>
|   `-ReturnStmt 0x55972d5fc6d0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55972d5fc6b8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55972d5fc650 <col:9, col:51> 'int'
|         |-MemberExpr 0x55972d5fc620 <col:9> '<bound member function type>' ->xmessage 0x55972d5f80a0
|         | `-CXXThisExpr 0x55972d5fc610 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55972d5fc4c8 <col:18> 'const String' lvalue ParmVar 0x55972d5f8168 'landmark' 'const String &'
|         |-DeclRefExpr 0x55972d5fc4e8 <col:28> 'const String' lvalue ParmVar 0x55972d5f81e0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55972d5fc6a0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55972d5fc688 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55972d5fc5f0 <col:34, col:50> 'String' (CXXTemporary 0x55972d5fc5f0)
|               `-CXXMemberCallExpr 0x55972d5fc588 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55972d5fc518 <col:34> '<bound member function type>' ->vformat 0x55972d5f8fe0
|                 | `-CXXThisExpr 0x55972d5fc508 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55972d5fc5b8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55972d5fc548 <col:42> 'const char *' lvalue ParmVar 0x55972d5f8260 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55972d5fc5d0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55972d5fc568 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55972d5f82d8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55972d5f8530 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55972d5fc760 <col:25, line:288:5>
|   `-ReturnStmt 0x55972d5fc750 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55972d5fc738 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55972d5fc708 <col:9> 'const int' lvalue ->_nerrors 0x55972d5fb338
|         `-CXXThisExpr 0x55972d5fc6f8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55972d5f8740 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55972d5f85e8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55972d5f8668 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55972d5f8a28 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55972d5f8808 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55972d5f8888 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55972d5f8900 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55972d5f8bc0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55972d5f8af8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55972d5f8e08 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55972d5f8c80 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55972d5f8cf8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55972d5fc9c0 <col:58, line:357:5>
|   `-ReturnStmt 0x55972d5fc9b0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55972d5fc998 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55972d5fc968 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55972d5fc950 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55972d5fc930 <col:9, col:29> 'String' (CXXTemporary 0x55972d5fc930)
|             `-CallExpr 0x55972d5fc8c0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55972d5fc8a8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55972d5fc828 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55972d5f8a28 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55972d5fc7c8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55972d5fc8f8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55972d5fc7e8 <col:21> 'const char *' lvalue ParmVar 0x55972d5f8c80 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55972d5fc910 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55972d5fc808 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55972d5f8cf8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55972d5f8fe0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55972d5f8ed0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55972d5f8f48 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55972d5f9138 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55972d5f90a8 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55972d5f9280 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55972d5f91f0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55972d5f9520 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55972d5f9338 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55972d5f93b8 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55972d5f9430 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55972d5f9680 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55972d5f95f0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55972d5fcad8 <col:37, line:441:5>
|   `-IfStmt 0x55972d5fcac0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55972d5fca48 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55972d5fca18 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55972d5fc9d8 <col:6> 'int' lvalue ParmVar 0x55972d5f95f0 'level' 'int'
|     | `-ImplicitCastExpr 0x55972d5fca30 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55972d5fc9f8 <col:15> 'ErrorHandler::Level' EnumConstant 0x55972d5f5700 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55972d5fcaa8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55972d5fca78 <col:8> 'int' lvalue ->_nerrors 0x55972d5fb338
|         `-CXXThisExpr 0x55972d5fca68 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55972d5f9748 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55972d5fcb70 <col:26, line:448:5>
|   `-BinaryOperator 0x55972d5fcb50 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55972d5fcb00 <col:2> 'int' lvalue ->_nerrors 0x55972d5fb338
|     | `-CXXThisExpr 0x55972d5fcaf0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55972d5fcb30 <col:13> 'int' 0
|-CXXMethodDecl 0x55972d5f9910 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55972d5f9800 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55972d5f9878 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55972d5f9b18 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55972d5f99d0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55972d5f9a48 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55972d5f9dc8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55972d5f9bd8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55972d5f9c58 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55972d5f9cd8 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55972d5f9e80 <col:59> 0 0
|-CXXMethodDecl 0x55972d5fa018 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55972d5f9ef8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55972d5f9f78 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55972d5fd1e0 <col:70, line:534:5>
|   |-DeclStmt 0x55972d5fcce0 <line:528:2, col:20>
|   | |-VarDecl 0x55972d5fcb98 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55972d5fcc00 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55972d5fcc38 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55972d5fcca0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55972d5fcdb0 <line:529:2, col:23>
|   | `-VarDecl 0x55972d5fcd10 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55972d5fcd98 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55972d5fcd78 <col:18> 'const char *' lvalue ParmVar 0x55972d5f9ef8 'begin' 'const char *'
|   |-DoStmt 0x55972d5fd178 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55972d5fd0a8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55972d5fd090 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55972d5fd070 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55972d5fcdc8 <col:6> 'const char *' lvalue Var 0x55972d5fcd10 'x' 'const char *'
|   | |     `-CallExpr 0x55972d5fcfc0 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55972d5fcfa8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55972d5fcf60 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55972d5fb810 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55972d5fd028 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55972d5fd010 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55972d5fce80 <col:20, col:27> 'String' (CXXTemporary 0x55972d5fce80)
|   | |       |     `-CXXTemporaryObjectExpr 0x55972d5fce48 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55972d5fd040 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55972d5fcea0 <col:30> 'const char *' lvalue Var 0x55972d5fcd10 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55972d5fd058 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55972d5fcec0 <col:33> 'const char *' lvalue ParmVar 0x55972d5f9f78 'end' 'const char *'
|   | |       |-UnaryOperator 0x55972d5fcf00 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55972d5fcee0 <col:39> 'String' lvalue Var 0x55972d5fcb98 'name' 'String'
|   | |       |-UnaryOperator 0x55972d5fcf38 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55972d5fcf18 <col:46> 'String' lvalue Var 0x55972d5fcc38 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55972d5fcf50 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55972d5fd160 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55972d5fd148 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55972d5fd128 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55972d5fd0f8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55972d2e8848
|   |         `-ImplicitCastExpr 0x55972d5fd0e0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55972d5fd0c0 <col:11> 'String' lvalue Var 0x55972d5fcb98 'name' 'String'
|   `-ReturnStmt 0x55972d5fd1d0 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55972d5fd1b8 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55972d5fd198 <col:9> 'const char *' lvalue Var 0x55972d5fcd10 'x' 'const char *'
|-CXXMethodDecl 0x55972d5fa168 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55972d5fa0d8 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55972d5fd7e8 <col:55, line:550:5>
|   `-IfStmt 0x55972d5fd7c0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55972d5fd420 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55972d5fd408 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55972d5fd3f0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55972d5fd3d0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55972d5fd3a0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55972d2e8848
|     | |       `-DeclRefExpr 0x55972d5fd240 <col:6> 'const String' lvalue ParmVar 0x55972d5fa0d8 'x' 'const String &'
|     | `-BinaryOperator 0x55972d5fd380 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55972d5fd350 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55972d5fd300 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55972d5fd2e8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55972d5fd2a0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55972d302080 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55972d5fd260 <col:11> 'const String' lvalue ParmVar 0x55972d5fa0d8 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55972d5fd280 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55972d5fd368 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55972d5fd338 <col:19> 'char' 123
|     |-ReturnStmt 0x55972d5fd490 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55972d5fd460 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55972d5fd440 <col:13> 'const String' lvalue ParmVar 0x55972d5fa0d8 'x' 'const String &'
|     `-IfStmt 0x55972d5fd798 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55972d5fd528 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55972d5fd510 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55972d5fd4f0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55972d5fd4c0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55972d2e8848
|       |       `-DeclRefExpr 0x55972d5fd4a0 <col:11> 'const String' lvalue ParmVar 0x55972d5fa0d8 'x' 'const String &'
|       |-ReturnStmt 0x55972d5fd6b0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55972d5fd698 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55972d5fd668 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55972d5fd650 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55972d5fd630 <col:13, col:29> 'String' (CXXTemporary 0x55972d5fd630)
|       |         `-CallExpr 0x55972d5fd5e0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55972d5fd5c8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55972d5fd540 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55972d5f9910 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55972d5fd610 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55972d5fd560 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55972d5fd580 <col:28> 'const String' lvalue ParmVar 0x55972d5fa0d8 'x' 'const String &'
|       `-ReturnStmt 0x55972d5fd788 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55972d5fd770 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55972d5fd740 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55972d5fd728 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55972d5fd708 <col:13, col:20> 'String' (CXXTemporary 0x55972d5fd708)
|                 `-CXXTemporaryObjectExpr 0x55972d5fd6d0 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55972d5fa330 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55972d5fa220 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55972d5fa298 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55972d5fbab8 <col:71> 'bool' false
|-CXXRecordDecl 0x55972d5fa3e0 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55972d5fa6d8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55972d5fa670 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55972d5fa610 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55972d5fa5d0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55972d2e50e0 'String'
|       | `-CXXRecord 0x55972d2e5050 'String'
|       |-BuiltinType 0x55972cfb83b0 'int'
|       `-DecayedType 0x55972d5895b0 '__va_list_tag *' sugar
|         |-TypedefType 0x55972d589580 'va_list' sugar
|         | |-Typedef 0x55972d1d6190 'va_list'
|         | `-TypedefType 0x55972d1d6140 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55972d10dd68 '__gnuc_va_list'
|         |   `-TypedefType 0x55972d10dcd0 '__builtin_va_list' sugar
|         |     |-Typedef 0x55972cff9c18 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55972cff9bc0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55972cfb9100 '__va_list_tag'
|         |         `-CXXRecord 0x55972cfb9068 '__va_list_tag'
|         `-PointerType 0x55972d1dba30 '__va_list_tag *'
|           `-RecordType 0x55972cfb9100 '__va_list_tag'
|             `-CXXRecord 0x55972cfb9068 '__va_list_tag'
|-EnumDecl 0x55972d5fa730 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55972d5fa830 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55972d5fad90 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d5fa810 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55972d5fa7f0 <col:16> 'int' 1
| |-EnumConstantDecl 0x55972d5fa8c0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55972d5fada8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d5fa8a0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55972d5fa880 <col:21> 'int' 2
| |-EnumConstantDecl 0x55972d5fa950 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55972d5fadc0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d5fa930 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55972d5fa910 <col:22> 'int' 4
| |-EnumConstantDecl 0x55972d5fa9e0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55972d5fadd8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d5fa9c0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55972d5fa9a0 <col:17> 'int' 8
| |-EnumConstantDecl 0x55972d5faa70 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55972d5fadf0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d5faa50 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55972d5faa30 <col:22> 'int' 16
| |-EnumConstantDecl 0x55972d5fab00 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55972d5fae08 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d5faae0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55972d5faac0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55972d5fab90 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55972d5fae20 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d5fab70 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55972d5fab50 <col:17> 'int' 64
| |-EnumConstantDecl 0x55972d5fac20 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55972d5fae38 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d5fac00 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55972d5fabe0 <col:14> 'int' 128
| |-EnumConstantDecl 0x55972d5facb0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55972d5fae50 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d5fac90 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55972d5fac70 <col:16> 'int' 256
| `-EnumConstantDecl 0x55972d5fad40 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55972d5fae68 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55972d5fad20 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55972d5fad00 <col:12> 'int' 1024
|-CXXMethodDecl 0x55972d5fb0c8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55972d5fae90 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55972d5faf80 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55972d5fb250 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55972d5fb188 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55972d5fb2f8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55972d5fb338 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55972d5fb398 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55972d5fb410 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55972d5fb810 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55972d5fb488 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55972d5fb508 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55972d5fb588 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55972d5fb600 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55972d5fb678 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55972d5fb6f0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55972d5fb938 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55972d5fb938
| `-ParmVarDecl 0x55972d5fba48 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55972d5fdb48 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55972d5fdb48
  `-ParmVarDecl 0x55972d5fdc58 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55972d5885f8 prev 0x55972d5379c8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55972d5886f0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55972d588780 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55972d5888b8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55972d5887b8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55972d589ce0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55972d589cc0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55972d589858 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55972d589d70 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55972d589d30 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55972d5887b8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55972d5898c0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55972d589df0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55972d589db0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55972d589920 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55972d589e30 <col:54> 'bool' false
| `-CompoundStmt 0x55972d589f38 <col:61, line:38:5>
|   `-BinaryOperator 0x55972d589f18 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55972d589eb0 <col:9> 'const Element *' lvalue ->_context 0x55972d5897f8
|     | `-CXXThisExpr 0x55972d589ea0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55972d589f00 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55972d589ee0 <col:20> 'int' 0
|-CXXConstructorDecl 0x55972d588ac8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55972d588978 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55972d5889f0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55972d589d18 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55972d589cf8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55972d5897f8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55972d589f90 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55972d589f50 <col:20> 'const Element *' lvalue ParmVar 0x55972d588978 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55972d589858 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55972d58a010 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55972d589fd0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55972d5889f0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55972d5898c0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55972d58a090 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55972d58a050 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55972d589920 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55972d58a0d0 <col:73> 'bool' false
| `-CompoundStmt 0x55972d58a148 <col:80, line:46:5>
|-CXXMethodDecl 0x55972d588bf8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55972d58a1c0 <col:36, line:51:5>
|   `-ReturnStmt 0x55972d58a1b0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55972d58a198 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55972d58a168 <col:16> 'const Element *const' lvalue ->_context 0x55972d5897f8
|         `-CXXThisExpr 0x55972d58a158 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55972d588ce8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55972d58a240 <col:32, line:57:5>
|   `-ReturnStmt 0x55972d58a230 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55972d58a218 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55972d58a1e8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55972d589858
|         `-CXXThisExpr 0x55972d58a1d8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55972d588da8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55972d588f30 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55972d588e60 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55972d589080 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55972d588ff0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55972d5891d0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55972d589140 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55972d5893d8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55972d589288 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55972d589300 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55972d589708 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55972d589498 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55972d589518 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55972d5895e0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55972d5897c0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55972d5897f8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55972d589858 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55972d5898c0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55972d589920 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55972d589970 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55972d589970
| `-ParmVarDecl 0x55972d589a88 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55972d589b28 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55972d589b28
| `-ParmVarDecl 0x55972d589c38 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55972d605e48 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55972d5b2950 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55972d5b2b28 prev 0x55972d5b2950 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55972d5b2bb8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55972d5b2be0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55972cfb83b0 'int'
|-TypedefDecl 0x55972d5b47b0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55972d5b4760 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55972d5b3090 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55972d5b2f90 'type'
|     `-TemplateSpecializationType 0x55972d5b2f20 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55972d5b2e00 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55972d5b2de0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55972d5b2dc0 <col:24> 'unsigned long' 4
|       `-RecordType 0x55972d5b2f00 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55972d5b2e20 'char_array'
|-TypedefDecl 0x55972d5b4868 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55972d5b4830 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55972d5b4810 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55972d5b47b0 'type'
|     `-ElaboratedType 0x55972d5b4760 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55972d5b3090 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55972d5b2f90 'type'
|         `-TemplateSpecializationType 0x55972d5b2f20 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55972d5b2e00 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55972d5b2de0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55972d5b2dc0 <col:24> 'unsigned long' 4
|           `-RecordType 0x55972d5b2f00 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55972d5b2e20 'char_array'
|-CXXMethodDecl 0x55972d5b49e8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55972d5b48f8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55972d5b4ad8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55972d5b4bb8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55972d5b4e88 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55972d5b4d90 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55972d5b50c8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55972d5b4f40 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55972d5b4fb8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55972d5b5298 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55972d5b5188 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55972d5b5200 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55972d5b53f8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55972d5b54c8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55972d5b5718 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55972d5b5588 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55972d5b5600 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55972d5b5978 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55972d5b57e8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55972d5b5860 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55972d5b5b38 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55972d5b5a48 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55972d5b5cf8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55972d5b5c00 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55972d5b5db0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55972d5b5e60 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55972d5b6098 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55972d5b5f10 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55972d5b5f88 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55972d5b6338 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55972d5b6240 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55972d5b6400 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55972d5b6450 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55972d5bc8b0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55972d5b1358 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55972d5b1568 prev 0x55972d5b1358 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55972d5b28c0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55972d5b2870 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55972d5b2850 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55972d5b2700 'type'
|     `-SubstTemplateTypeParmType 0x55972d5b2520 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55972d27df20 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55972d27dec8 'T'
|       `-RecordType 0x55972d5b2070 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55972d5b1f88 'sized_array_memory'
|-FieldDecl 0x55972d5bc900 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55972d5bc950 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55972d5bc988 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55972d5b1600 'int' sugar
|   |-TemplateTypeParmType 0x55972d2b5c10 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55972d2b5bb8 'T'
|   `-BuiltinType 0x55972cfb83b0 'int'
|-TypedefDecl 0x55972d5bca18 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55972d5bc9e0 'int &'
|   `-SubstTemplateTypeParmType 0x55972d5b1600 'int' sugar
|     |-TemplateTypeParmType 0x55972d2b5c10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55972d2b5bb8 'T'
|     `-BuiltinType 0x55972cfb83b0 'int'
|-TypedefDecl 0x55972d5bcad8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55972d5bcaa0 'const int &'
|   `-QualType 0x55972d5b1601 'const int' const
|     `-SubstTemplateTypeParmType 0x55972d5b1600 'int' sugar
|       |-TemplateTypeParmType 0x55972d2b5c10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55972d2b5bb8 'T'
|       `-BuiltinType 0x55972cfb83b0 'int'
|-TypedefDecl 0x55972d5bcb68 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55972d5bcb30 'int *'
|   `-SubstTemplateTypeParmType 0x55972d5b1600 'int' sugar
|     |-TemplateTypeParmType 0x55972d2b5c10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55972d2b5bb8 'T'
|     `-BuiltinType 0x55972cfb83b0 'int'
|-TypedefDecl 0x55972d5bcbf8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55972d5bcbc0 'const int *'
|   `-QualType 0x55972d5b1601 'const int' const
|     `-SubstTemplateTypeParmType 0x55972d5b1600 'int' sugar
|       |-TemplateTypeParmType 0x55972d2b5c10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55972d2b5bb8 'T'
|       `-BuiltinType 0x55972cfb83b0 'int'
|-TypedefDecl 0x55972d5bd7e0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55972d5bd790 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55972d5bd770 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55972d5bd700 'type'
|     `-SubstTemplateTypeParmType 0x55972d5bd4c0 'int' sugar
|       |-TemplateTypeParmType 0x55972d288d20 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55972d288cd0 'T'
|       `-BuiltinType 0x55972cfb83b0 'int'
|-TypedefDecl 0x55972d5bd848 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55972d5bcaa0 'const int &'
|   `-QualType 0x55972d5b1601 'const int' const
|     `-SubstTemplateTypeParmType 0x55972d5b1600 'int' sugar
|       |-TemplateTypeParmType 0x55972d2b5c10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55972d2b5bb8 'T'
|       `-BuiltinType 0x55972cfb83b0 'int'
|-TypedefDecl 0x55972d5bd8a0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55972cfb83b0 'int'
|-TypedefDecl 0x55972d5bd908 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55972d5bcb30 'int *'
|   `-SubstTemplateTypeParmType 0x55972d5b1600 'int' sugar
|     |-TemplateTypeParmType 0x55972d2b5c10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55972d2b5bb8 'T'
|     `-BuiltinType 0x55972cfb83b0 'int'
|-TypedefDecl 0x55972d5bd970 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55972d5bcbc0 'const int *'
|   `-QualType 0x55972d5b1601 'const int' const
|     `-SubstTemplateTypeParmType 0x55972d5b1600 'int' sugar
|       |-TemplateTypeParmType 0x55972d2b5c10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55972d2b5bb8 'T'
|       `-BuiltinType 0x55972cfb83b0 'int'
|-EnumDecl 0x55972d5bd9c8 <line:134:5> col:5
| `-EnumConstantDecl 0x55972d5bdac0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55972d5bdaa0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55972d2b7298 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55972d2b7270 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55972d2b7250 <col:40> 'int' 1
|-CXXConstructorDecl 0x55972d5bdb48 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55972d5bdd98 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55972d5bdc00 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55972d5bdca0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55972d5be058 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55972d5bdf40 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55972d5be318 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55972d5be200 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55972d5be660 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55972d5be540 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55972d5be970 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55972d5be850 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55972d5bec60 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55972d5beaa8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55972d5beb20 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55972d5bed88 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55972d5bee68 <col:20> Inherited
| `-OptimizeNoneAttr 0x55972d5beec0 <col:30> Inherited
|-CXXMethodDecl 0x55972d5bef08 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55972d5befb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55972d5bf010 <col:30> Inherited
|-CXXMethodDecl 0x55972d5bf0d8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55972d5bf188 <col:20> Inherited
| `-OptimizeNoneAttr 0x55972d5bf1e0 <col:30> Inherited
|-CXXMethodDecl 0x55972d5bf228 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55972d5bf2d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55972d5bf330 <col:30> Inherited
|-CXXMethodDecl 0x55972d5bf378 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55972d5bf428 <col:20> Inherited
| `-OptimizeNoneAttr 0x55972d5bf480 <col:30> Inherited
|-CXXMethodDecl 0x55972d5bf4c8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55972d5bf578 <col:20> Inherited
| `-OptimizeNoneAttr 0x55972d5bf5d0 <col:30> Inherited
|-CXXMethodDecl 0x55972d5bf5f8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55972d5bf6a8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55972d5bf758 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55972d5bf918 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55972d5bf808 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55972d5bf880 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55972d5bfa68 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55972d5bf9d8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55972d5bfc18 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55972d5bfb20 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55972d5bfcd0 <col:20>
| `-OptimizeNoneAttr 0x55972d5bfd28 <col:30>
|-CXXMethodDecl 0x55972d5bfe48 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55972d5bfd50 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55972d5bff00 <col:20>
| `-OptimizeNoneAttr 0x55972d5bff58 <col:30>
|-CXXMethodDecl 0x55972d5c0010 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55972d5bff80 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55972d5c0158 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55972d5c00c8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55972d5c0288 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55972d5c03b8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55972d5c0488 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55972d5c0558 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55972d5c0698 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55972d5c0608 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55972d5c07e0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55972d5c0750 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55972d5c0928 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55972d5c0898 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55972d5c09e0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55972d5c0ae0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55972d5c0a50 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55972d5c0b98 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55972d5c0c58 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55972d5c0d58 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55972d5c0ed8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55972d5c0e18 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55972d5c1698 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55972d5c0f90 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55972d5c15f8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55972d5c14f8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55972d5c1778 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55972d5c18c8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55972d5c1838 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55972d5c1980 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55972d5c1bc8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55972d5c1a40 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55972d5c1ab8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55972d5c1d88 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55972d5c1c98 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55972d5c1fd8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55972d5c1e50 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55972d5c1ec8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55972d5c2098 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55972d5c22f8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55972d5c2200 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55972d5c23c8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55972d5af4c8 prev 0x55972d58f130 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55972d5af5c0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55972d5af6b0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55972d5d5190 <col:16, line:828:9>
|-CXXDestructorDecl 0x55972d5af7a0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55972d5d51a0 <col:25, line:830:9>
|-CXXMethodDecl 0x55972d5af8a0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55972d5af950 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55972d5af9f8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55972d5af9f8
| `-ParmVarDecl 0x55972d5afb08 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55972d5b02c8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55972d5b02c8
  `-ParmVarDecl 0x55972d5b03d8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55972d58ef68 prev 0x55972d537a58 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55972d58f0a0 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55972d58f130 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55972d58f1e0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55972d58f2e8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55972d58f218 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55972d5c3988 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55972d5c3968 <col:31> 'int' 0
|-CXXConstructorDecl 0x55972d590848 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55972d5906c0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55972d590738 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55972d5c39c0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55972d5c39a0 <col:59> 'int' 0
|-CXXConstructorDecl 0x55972d590a20 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55972d590910 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55972d590988 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55972d5c39f8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55972d5c39d8 <col:55> 'int' 0
|-CXXConstructorDecl 0x55972d590dd8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55972d590bc0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55972d590c38 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55972d590cb0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55972d5c3a30 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55972d5c3a10 <col:31> 'int' 0
|-CXXConstructorDecl 0x55972d590f98 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55972d590ed8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55972d591090 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55972d591248 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55972d591180 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55972d591338 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55972d5c3de0 <col:24, line:291:5>
|   `-ReturnStmt 0x55972d5c3dd0 <line:290:9, col:79>
|     `-BinaryOperator 0x55972d5c3db0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55972d5c3c88 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55972d5c3be0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55972d5c3bc0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55972d5c3ab8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55972d5c3aa0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55972d5c3a88 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55972d5c3a58 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55972d5b12f0
|       | |   |       `-CXXThisExpr 0x55972d5c3a48 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55972d5c3ba8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55972d5c3b90 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55972d5c3b58 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55972d5c3b28 <col:28, col:35> '<bound member function type>' ->size 0x55972d57aca8
|       | |           `-ImplicitCastExpr 0x55972d5c3b78 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55972d5c3b10 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55972d5c3ae0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55972d5b12f0
|       | |                 `-CXXThisExpr 0x55972d5c3ad0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55972d5c3c70 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55972d5c3c58 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55972d5c3c40 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55972d5c3c10 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55972d5c2510
|       |         `-CXXThisExpr 0x55972d5c3c00 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55972d5c3d90 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55972d5c3d78 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55972d5c3d60 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55972d5c3d20 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55972d5c3d08 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55972d5c3cb8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55972d5c25c0
|         |     |   `-CXXThisExpr 0x55972d5c3ca8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55972d5c3ce8 <col:73> 'int' 0
|         `-IntegerLiteral 0x55972d5c3d40 <col:79> 'int' 0
|-CXXMethodDecl 0x55972d5913f8 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55972d5c3fb8 <col:32, line:296:5>
|   `-ReturnStmt 0x55972d5c3fa8 <line:295:9, col:49>
|     `-BinaryOperator 0x55972d5c3f88 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55972d5c3e68 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55972d5c3e50 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55972d5c3e38 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55972d5c3e08 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55972d5c2510
|       |       `-CXXThisExpr 0x55972d5c3df8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55972d5c3f68 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55972d5c3f50 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55972d5c3f38 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55972d5c3ef8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55972d5c3ee0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55972d5c3e90 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55972d5c25c0
|         |     |   `-CXXThisExpr 0x55972d5c3e80 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55972d5c3ec0 <col:43> 'int' 0
|         `-IntegerLiteral 0x55972d5c3f18 <col:49> 'int' 0
|-CXXMethodDecl 0x55972d5914e8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55972d5c41c8 <col:19, line:306:5>
|   |-IfStmt 0x55972d5c40e8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55972d5c4028 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55972d5c4010 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55972d5c3fe0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55972d5b12f0
|   | |     `-CXXThisExpr 0x55972d5c3fd0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55972d5c40c8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55972d5c4098 <col:13, col:20> '<bound member function type>' ->clear 0x55972d57d6a8
|   |     `-ImplicitCastExpr 0x55972d5c4080 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55972d5c4050 <col:13> 'Vector<String> *' lvalue ->_conf 0x55972d5b12f0
|   |         `-CXXThisExpr 0x55972d5c4040 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55972d5c4170 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55972d5c4140 <col:9, col:16> '<bound member function type>' .clear 0x55972d5c2098
|   |   `-MemberExpr 0x55972d5c4110 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55972d5c24b0
|   |     `-CXXThisExpr 0x55972d5c4100 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55972d5c41b8 <line:305:9, col:17>
|     `-UnaryOperator 0x55972d5c41a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55972d5c4190 <col:17> 'Args *' this
|-CXXMethodDecl 0x55972d591768 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55972d591670 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55972d5918e8 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55972d591820 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55972d591c68 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55972d591990 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55972d591bc8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55972d591a38 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55972d591ab0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55972d5c44f0 <col:67, line:327:5>
|     |-WhileStmt 0x55972d5c44a0 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55972d5c42b8 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55972d5c4230 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55972d5373f0 0x55972d4d77f8 0x55972d320dd8 0x55972d320ab0 0x55972d312290 0x55972d311f40 0x55972d311830 0x55972d2e41a0 0x55972d270660
|     | | |-DeclRefExpr 0x55972d5c41f0 <col:16> 'Iter' lvalue ParmVar 0x55972d591a38 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55972d5c4210 <col:25> 'Iter' lvalue ParmVar 0x55972d591ab0 'end' 'Iter'
|     | `-CompoundStmt 0x55972d5c4480 <col:30, line:325:9>
|     |   |-CallExpr 0x55972d5c4420 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55972d5c4300 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55972d5c43f0 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55972d5c4380 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55972d4dc978 0x55972d4dc598 0x55972d4dc1c8 0x55972d4dbde8 0x55972d4dba08 0x55972d4db638
|     |   |   `-DeclRefExpr 0x55972d5c4360 <col:24> 'Iter' lvalue ParmVar 0x55972d591a38 'begin' 'Iter'
|     |   `-UnaryOperator 0x55972d5c4468 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55972d5c4448 <col:15> 'Iter' lvalue ParmVar 0x55972d591a38 'begin' 'Iter'
|     `-ReturnStmt 0x55972d5c44e0 <line:326:9, col:17>
|       `-UnaryOperator 0x55972d5c44c8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55972d5c44b8 <col:17> 'Args *' this
|-CXXMethodDecl 0x55972d591d70 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55972d591ce0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55972d591eb8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55972d591e28 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55972d591f80 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55972d5c45d0 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55972d5c4570 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55972d5c4520 <col:9> '<bound member function type>' ->reset_from 0x55972d5c2938
|   | | `-CXXThisExpr 0x55972d5c4510 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55972d5c4550 <col:20> 'int' 0
|   `-ReturnStmt 0x55972d5c45c0 <line:352:9, col:17>
|     `-UnaryOperator 0x55972d5c45a8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55972d5c4598 <col:17> 'Args *' this
|-VarDecl 0x55972d592038 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55972d5920a0 <col:38> 'int' 1
|-VarDecl 0x55972d592130 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55972d592198 <col:39> 'int' 2
|-VarDecl 0x55972d592228 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55972d592290 <col:39> 'int' 4
|-VarDecl 0x55972d592320 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55972d592388 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55972d592708 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55972d592400 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55972d592668 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55972d5924b0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d592558 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55972d5c4728 <col:43, line:371:5>
|     `-ReturnStmt 0x55972d5c4718 <line:370:9, col:34>
|       `-CallExpr 0x55972d5c46e0 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55972d5c4600 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55972d5c4680 <col:21> 'const char *' lvalue ParmVar 0x55972d5924b0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55972d5c46a0 <col:30> 'int' 0
|         `-DeclRefExpr 0x55972d5c46c0 <col:33> 'T' lvalue ParmVar 0x55972d592558 'x' 'T &'
|-FunctionTemplateDecl 0x55972d592a38 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55972d592770 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55972d592998 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55972d592820 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d5928c8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55972d5c4878 <col:45, line:375:5>
|     `-ReturnStmt 0x55972d5c4868 <line:374:9, col:42>
|       `-CallExpr 0x55972d5c4830 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55972d5c4750 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55972d5c47d0 <col:21> 'const char *' lvalue ParmVar 0x55972d592820 'keyword' 'const char *'
|         |-DeclRefExpr 0x55972d5c47f0 <col:30> 'const int' lvalue Var 0x55972d592038 'mandatory' 'const int'
|         `-DeclRefExpr 0x55972d5c4810 <col:41> 'T' lvalue ParmVar 0x55972d5928c8 'x' 'T &'
|-FunctionTemplateDecl 0x55972d592d68 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55972d592aa0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55972d592cc8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55972d592b50 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d592bf8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55972d5c62f8 <col:45, line:379:5>
|     `-ReturnStmt 0x55972d5c62e8 <line:378:9, col:43>
|       `-CallExpr 0x55972d5c62b0 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55972d5c61d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55972d5c6250 <col:21> 'const char *' lvalue ParmVar 0x55972d592b50 'keyword' 'const char *'
|         |-DeclRefExpr 0x55972d5c6270 <col:30> 'const int' lvalue Var 0x55972d592130 'positional' 'const int'
|         `-DeclRefExpr 0x55972d5c6290 <col:42> 'T' lvalue ParmVar 0x55972d592bf8 'x' 'T &'
|-FunctionTemplateDecl 0x55972d593098 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55972d592dd0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55972d592ff8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55972d592e80 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55972d592f28 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x55972d5c64f8 <col:46, line:383:5>
| |   `-ReturnStmt 0x55972d5c64e8 <line:382:9, col:55>
| |     `-CallExpr 0x55972d5c64b0 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55972d5c6320 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55972d5c63a0 <col:21> 'const char *' lvalue ParmVar 0x55972d592e80 'keyword' 'const char *'
| |       |-BinaryOperator 0x55972d5c6470 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55972d5c6420 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55972d5c6400 <col:30> 'const int' lvalue Var 0x55972d592038 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55972d5c6458 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55972d5c6438 <col:42> 'const int' lvalue Var 0x55972d592130 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x55972d5c6490 <col:54> 'T' lvalue ParmVar 0x55972d592f28 'x' 'T &'
| `-CXXMethodDecl 0x55972d606358 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, EtherAddress &)'
|   |-TemplateArgument type 'EtherAddress'
|   |-ParmVarDecl 0x55972d606170 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x55972d606248 <col:40, col:43> col:43 x 'EtherAddress &'
|-FunctionTemplateDecl 0x55972d593498 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55972d593100 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55972d5933f8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55972d5931b0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d593230 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55972d5932d8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55972d5c6638 <col:54, line:388:5>
|     |-CallExpr 0x55972d5c65c0 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55972d5c6510 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55972d5c6550 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55972d5c6560 <col:30> 'const char *' lvalue ParmVar 0x55972d5931b0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55972d5c6580 <col:39> 'int' lvalue ParmVar 0x55972d593230 'flags' 'int'
|     | `-DeclRefExpr 0x55972d5c65a0 <col:46> 'T' lvalue ParmVar 0x55972d5932d8 'x' 'T &'
|     `-ReturnStmt 0x55972d5c6628 <line:387:9, col:17>
|       `-UnaryOperator 0x55972d5c6610 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55972d5c6600 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55972d593948 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55972d593508 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55972d593588 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55972d5938a8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55972d593648 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d5936e8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55972d593788 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55972d5c67a8 <col:74, line:403:5>
|     `-ReturnStmt 0x55972d5c6798 <line:402:9, col:56>
|       `-CallExpr 0x55972d5c6758 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55972d5c6668 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55972d5c66d8 <col:28> 'const char *' lvalue ParmVar 0x55972d593648 'keyword' 'const char *'
|         |-IntegerLiteral 0x55972d5c66f8 <col:37> 'int' 0
|         |-DeclRefExpr 0x55972d5c6718 <col:40> 'T' lvalue ParmVar 0x55972d5936e8 'x' 'T &'
|         `-DeclRefExpr 0x55972d5c6738 <col:43> 'const V' lvalue ParmVar 0x55972d593788 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55972d593db8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55972d5939b8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55972d593a38 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55972d593d18 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55972d593af8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d593b98 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55972d593c38 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55972d5c6910 <col:76, line:407:5>
|     `-ReturnStmt 0x55972d5c6900 <line:406:9, col:65>
|       `-CallExpr 0x55972d5c68c0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55972d5c67d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55972d5c6840 <col:28> 'const char *' lvalue ParmVar 0x55972d593af8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55972d5c6860 <col:37> 'const int' lvalue Var 0x55972d592130 'positional' 'const int'
|         |-DeclRefExpr 0x55972d5c6880 <col:49> 'T' lvalue ParmVar 0x55972d593b98 'x' 'T &'
|         `-DeclRefExpr 0x55972d5c68a0 <col:52> 'const V' lvalue ParmVar 0x55972d593c38 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55972d594308 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55972d593e28 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55972d593ea8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55972d594268 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55972d593f68 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d593fe8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55972d594088 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55972d594128 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55972d5c6a78 <col:85, line:412:5>
|     |-CallExpr 0x55972d5c69f8 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55972d5c6928 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55972d5c6968 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55972d5c6978 <col:37> 'const char *' lvalue ParmVar 0x55972d593f68 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55972d5c6998 <col:46> 'int' lvalue ParmVar 0x55972d593fe8 'flags' 'int'
|     | |-DeclRefExpr 0x55972d5c69b8 <col:53> 'T' lvalue ParmVar 0x55972d594088 'x' 'T &'
|     | `-DeclRefExpr 0x55972d5c69d8 <col:56> 'const V' lvalue ParmVar 0x55972d594128 'default_value' 'const V &'
|     `-ReturnStmt 0x55972d5c6a68 <line:411:9, col:17>
|       `-UnaryOperator 0x55972d5c6a50 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55972d5c6a40 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55972d594798 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55972d594380 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55972d5943f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55972d5946f8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55972d5944b8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d594530 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55972d5945d8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55972d5c6bf8 <col:53, line:425:5>
|     `-ReturnStmt 0x55972d5c6be8 <line:424:9, col:42>
|       `-CallExpr 0x55972d5c6ba8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55972d5c6aa8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55972d5c6b28 <col:21> 'const char *' lvalue ParmVar 0x55972d5944b8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55972d5c6b48 <col:30> 'int' 0
|         |-DeclRefExpr 0x55972d5c6b68 <col:33> 'P' lvalue ParmVar 0x55972d594530 'parser' 'P'
|         `-DeclRefExpr 0x55972d5c6b88 <col:41> 'T' lvalue ParmVar 0x55972d5945d8 'x' 'T &'
|-FunctionTemplateDecl 0x55972d594be8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55972d594808 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55972d594888 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55972d594b48 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55972d594948 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d5949c0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55972d594a68 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55972d5c6d70 <col:55, line:429:5>
|     `-ReturnStmt 0x55972d5c6d60 <line:428:9, col:50>
|       `-CallExpr 0x55972d5c6d20 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55972d5c6c20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55972d5c6ca0 <col:21> 'const char *' lvalue ParmVar 0x55972d594948 'keyword' 'const char *'
|         |-DeclRefExpr 0x55972d5c6cc0 <col:30> 'const int' lvalue Var 0x55972d592038 'mandatory' 'const int'
|         |-DeclRefExpr 0x55972d5c6ce0 <col:41> 'P' lvalue ParmVar 0x55972d5949c0 'parser' 'P'
|         `-DeclRefExpr 0x55972d5c6d00 <col:49> 'T' lvalue ParmVar 0x55972d594a68 'x' 'T &'
|-FunctionTemplateDecl 0x55972d595038 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55972d594c58 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55972d594cd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55972d594f98 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55972d594d98 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d594e10 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55972d594eb8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55972d5c6ee8 <col:55, line:433:5>
|     `-ReturnStmt 0x55972d5c6ed8 <line:432:9, col:51>
|       `-CallExpr 0x55972d5c6e98 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55972d5c6d98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55972d5c6e18 <col:21> 'const char *' lvalue ParmVar 0x55972d594d98 'keyword' 'const char *'
|         |-DeclRefExpr 0x55972d5c6e38 <col:30> 'const int' lvalue Var 0x55972d592130 'positional' 'const int'
|         |-DeclRefExpr 0x55972d5c6e58 <col:42> 'P' lvalue ParmVar 0x55972d594e10 'parser' 'P'
|         `-DeclRefExpr 0x55972d5c6e78 <col:50> 'T' lvalue ParmVar 0x55972d594eb8 'x' 'T &'
|-FunctionTemplateDecl 0x55972d595488 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55972d5950a8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55972d595128 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x55972d5953e8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x55972d5951e8 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55972d595260 <col:40, col:42> col:42 referenced parser 'P'
| | |-ParmVarDecl 0x55972d595308 <col:50, col:53> col:53 referenced x 'T &'
| | `-CompoundStmt 0x55972d5c7110 <col:56, line:437:5>
| |   `-ReturnStmt 0x55972d5c7100 <line:436:9, col:63>
| |     `-CallExpr 0x55972d5c70c0 <col:16, col:63> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55972d5c6f10 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55972d5c6f90 <col:21> 'const char *' lvalue ParmVar 0x55972d5951e8 'keyword' 'const char *'
| |       |-BinaryOperator 0x55972d5c7060 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55972d5c7010 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55972d5c6ff0 <col:30> 'const int' lvalue Var 0x55972d592038 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55972d5c7048 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55972d5c7028 <col:42> 'const int' lvalue Var 0x55972d592130 'positional' 'const int' non_odr_use_constant
| |       |-DeclRefExpr 0x55972d5c7080 <col:54> 'P' lvalue ParmVar 0x55972d595260 'parser' 'P'
| |       `-DeclRefExpr 0x55972d5c70a0 <col:62> 'T' lvalue ParmVar 0x55972d595308 'x' 'T &'
| `-CXXMethodDecl 0x55972d606e08 <line:435:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, AnnoArg, int &)'
|   |-TemplateArgument type 'AnnoArg'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55972d606b70 <col:19, col:31> col:31 keyword 'const char *'
|   |-ParmVarDecl 0x55972d606c18 <col:40, col:42> col:42 parser 'AnnoArg':'AnnoArg'
|   `-ParmVarDecl 0x55972d606ce8 <col:50, col:53> col:53 x 'int &'
|-FunctionTemplateDecl 0x55972d5959b8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55972d5954f8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55972d595578 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55972d595918 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55972d595638 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d5956b8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55972d595730 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55972d5957d8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55972d5c7278 <col:64, line:442:5>
|     |-CallExpr 0x55972d5c71f8 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55972d5c7128 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55972d5c7168 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55972d5c7178 <col:30> 'const char *' lvalue ParmVar 0x55972d595638 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55972d5c7198 <col:39> 'int' lvalue ParmVar 0x55972d5956b8 'flags' 'int'
|     | |-DeclRefExpr 0x55972d5c71b8 <col:46> 'P' lvalue ParmVar 0x55972d595730 'parser' 'P'
|     | `-DeclRefExpr 0x55972d5c71d8 <col:54> 'T' lvalue ParmVar 0x55972d5957d8 'x' 'T &'
|     `-ReturnStmt 0x55972d5c7268 <line:441:9, col:17>
|       `-UnaryOperator 0x55972d5c7250 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55972d5c7240 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55972d595fb8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55972d595a30 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55972d595aa8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55972d595b28 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55972d595f18 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55972d595bf0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d595c68 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55972d595d08 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55972d595dd8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55972d5c7410 <col:84, line:458:5>
|     `-ReturnStmt 0x55972d5c7400 <line:457:9, col:64>
|       `-CallExpr 0x55972d5c73b8 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55972d5c72a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55972d5c7318 <col:28> 'const char *' lvalue ParmVar 0x55972d595bf0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55972d5c7338 <col:37> 'int' 0
|         |-DeclRefExpr 0x55972d5c7358 <col:40> 'P' lvalue ParmVar 0x55972d595c68 'parser' 'P'
|         |-DeclRefExpr 0x55972d5c7378 <col:48> 'T' lvalue ParmVar 0x55972d595d08 'x' 'T &'
|         `-DeclRefExpr 0x55972d5c7398 <col:51> 'const V' lvalue ParmVar 0x55972d595dd8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55972d596538 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55972d596030 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55972d5960a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55972d596128 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55972d596498 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55972d5961f0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d596268 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55972d596308 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55972d5963a8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55972d5c75a0 <col:86, line:462:5>
|     `-ReturnStmt 0x55972d5c7590 <line:461:9, col:73>
|       `-CallExpr 0x55972d5c7548 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55972d5c7438 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55972d5c74a8 <col:28> 'const char *' lvalue ParmVar 0x55972d5961f0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55972d5c74c8 <col:37> 'const int' lvalue Var 0x55972d592130 'positional' 'const int'
|         |-DeclRefExpr 0x55972d5c74e8 <col:49> 'P' lvalue ParmVar 0x55972d596268 'parser' 'P'
|         |-DeclRefExpr 0x55972d5c7508 <col:57> 'T' lvalue ParmVar 0x55972d596308 'x' 'T &'
|         `-DeclRefExpr 0x55972d5c7528 <col:60> 'const V' lvalue ParmVar 0x55972d5963a8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55972d596b98 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55972d5965b0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55972d596628 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55972d5966a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55972d596af8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55972d596770 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d5967f0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55972d596868 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55972d596908 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55972d5969a8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55972d5c7730 <col:95, line:467:5>
|     |-CallExpr 0x55972d5c76a8 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55972d5c75b8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55972d5c75f8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55972d5c7608 <col:37> 'const char *' lvalue ParmVar 0x55972d596770 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55972d5c7628 <col:46> 'int' lvalue ParmVar 0x55972d5967f0 'flags' 'int'
|     | |-DeclRefExpr 0x55972d5c7648 <col:53> 'P' lvalue ParmVar 0x55972d596868 'parser' 'P'
|     | |-DeclRefExpr 0x55972d5c7668 <col:61> 'T' lvalue ParmVar 0x55972d596908 'x' 'T &'
|     | `-DeclRefExpr 0x55972d5c7688 <col:64> 'const V' lvalue ParmVar 0x55972d5969a8 'default_value' 'const V &'
|     `-ReturnStmt 0x55972d5c7720 <line:466:9, col:17>
|       `-UnaryOperator 0x55972d5c7708 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55972d5c76f8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55972d597178 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55972d596c18 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55972d596c98 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55972d596d18 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55972d5970d8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55972d596de0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d596e58 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55972d596ef8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55972d596f98 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55972d5c78d8 <col:63, line:481:5>
|     `-ReturnStmt 0x55972d5c78c8 <line:480:9, col:47>
|       `-CallExpr 0x55972d5c7880 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55972d5c7760 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55972d5c77e0 <col:21> 'const char *' lvalue ParmVar 0x55972d596de0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55972d5c7800 <col:30> 'int' 0
|         |-DeclRefExpr 0x55972d5c7820 <col:33> 'P' lvalue ParmVar 0x55972d596e58 'parser' 'P'
|         |-DeclRefExpr 0x55972d5c7840 <col:41> 'T1' lvalue ParmVar 0x55972d596ef8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55972d5c7860 <col:45> 'T2' lvalue ParmVar 0x55972d596f98 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55972d5976f8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55972d5971f0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55972d597268 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55972d5972e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55972d597658 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55972d5973b0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d597428 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55972d5974c8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55972d597568 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55972d5c7a78 <col:65, line:485:5>
|     `-ReturnStmt 0x55972d5c7a68 <line:484:9, col:55>
|       `-CallExpr 0x55972d5c7a20 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55972d5c7900 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55972d5c7980 <col:21> 'const char *' lvalue ParmVar 0x55972d5973b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55972d5c79a0 <col:30> 'const int' lvalue Var 0x55972d592038 'mandatory' 'const int'
|         |-DeclRefExpr 0x55972d5c79c0 <col:41> 'P' lvalue ParmVar 0x55972d597428 'parser' 'P'
|         |-DeclRefExpr 0x55972d5c79e0 <col:49> 'T1' lvalue ParmVar 0x55972d5974c8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55972d5c7a00 <col:53> 'T2' lvalue ParmVar 0x55972d597568 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55972d597c78 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55972d597770 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55972d5977e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55972d597868 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55972d597bd8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55972d597930 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d5979a8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55972d597a48 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55972d597ae8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55972d5c7c18 <col:65, line:489:5>
|     `-ReturnStmt 0x55972d5c7c08 <line:488:9, col:56>
|       `-CallExpr 0x55972d5c7bc0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55972d5c7aa0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55972d5c7b20 <col:21> 'const char *' lvalue ParmVar 0x55972d597930 'keyword' 'const char *'
|         |-DeclRefExpr 0x55972d5c7b40 <col:30> 'const int' lvalue Var 0x55972d592130 'positional' 'const int'
|         |-DeclRefExpr 0x55972d5c7b60 <col:42> 'P' lvalue ParmVar 0x55972d5979a8 'parser' 'P'
|         |-DeclRefExpr 0x55972d5c7b80 <col:50> 'T1' lvalue ParmVar 0x55972d597a48 'x1' 'T1 &'
|         `-DeclRefExpr 0x55972d5c7ba0 <col:54> 'T2' lvalue ParmVar 0x55972d597ae8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55972d5981f8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55972d597cf0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55972d597d68 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55972d597de8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55972d598158 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55972d597eb0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d597f28 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55972d597fc8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55972d598068 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55972d5c7e68 <col:66, line:493:5>
|     `-ReturnStmt 0x55972d5c7e58 <line:492:9, col:68>
|       `-CallExpr 0x55972d5c7e10 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55972d5c7c40 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55972d5c7cc0 <col:21> 'const char *' lvalue ParmVar 0x55972d597eb0 'keyword' 'const char *'
|         |-BinaryOperator 0x55972d5c7d90 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55972d5c7d40 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55972d5c7d20 <col:30> 'const int' lvalue Var 0x55972d592038 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55972d5c7d78 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55972d5c7d58 <col:42> 'const int' lvalue Var 0x55972d592130 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55972d5c7db0 <col:54> 'P' lvalue ParmVar 0x55972d597f28 'parser' 'P'
|         |-DeclRefExpr 0x55972d5c7dd0 <col:62> 'T1' lvalue ParmVar 0x55972d597fc8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55972d5c7df0 <col:66> 'T2' lvalue ParmVar 0x55972d598068 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55972d59ddd8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55972d598270 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55972d5982e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55972d598368 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55972d59dd38 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55972d598430 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d5984b0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55972d598528 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55972d59db40 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55972d59dbe8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55972d5c7ff8 <col:74, line:498:5>
|     |-CallExpr 0x55972d5c7f70 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55972d5c7e80 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55972d5c7ec0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55972d5c7ed0 <col:30> 'const char *' lvalue ParmVar 0x55972d598430 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55972d5c7ef0 <col:39> 'int' lvalue ParmVar 0x55972d5984b0 'flags' 'int'
|     | |-DeclRefExpr 0x55972d5c7f10 <col:46> 'P' lvalue ParmVar 0x55972d598528 'parser' 'P'
|     | |-DeclRefExpr 0x55972d5c7f30 <col:54> 'T1' lvalue ParmVar 0x55972d59db40 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55972d5c7f50 <col:58> 'T2' lvalue ParmVar 0x55972d59dbe8 'x2' 'T2 &'
|     `-ReturnStmt 0x55972d5c7fe8 <line:497:9, col:17>
|       `-UnaryOperator 0x55972d5c7fd0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55972d5c7fc0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55972d59e138 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55972d59de58 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55972d59e098 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55972d59df10 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d59df88 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55972d5c8140 <col:52, line:509:5>
|     `-ReturnStmt 0x55972d5c8130 <line:508:9, col:44>
|       `-CallExpr 0x55972d5c80f8 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55972d5c8028 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55972d5c8098 <col:26> 'const char *' lvalue ParmVar 0x55972d59df10 'keyword' 'const char *'
|         |-IntegerLiteral 0x55972d5c80b8 <col:35> 'int' 0
|         `-DeclRefExpr 0x55972d5c80d8 <col:38> 'P' lvalue ParmVar 0x55972d59df88 'parser' 'P'
|-FunctionTemplateDecl 0x55972d59e438 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55972d59e1a0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55972d59e398 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55972d59e250 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d59e2c8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55972d5c8280 <col:54, line:513:5>
|     `-ReturnStmt 0x55972d5c8270 <line:512:9, col:52>
|       `-CallExpr 0x55972d5c8238 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55972d5c8168 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55972d5c81d8 <col:26> 'const char *' lvalue ParmVar 0x55972d59e250 'keyword' 'const char *'
|         |-DeclRefExpr 0x55972d5c81f8 <col:35> 'const int' lvalue Var 0x55972d592038 'mandatory' 'const int'
|         `-DeclRefExpr 0x55972d5c8218 <col:46> 'P' lvalue ParmVar 0x55972d59e2c8 'parser' 'P'
|-FunctionTemplateDecl 0x55972d59e738 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55972d59e4a0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55972d59e698 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55972d59e550 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d59e5c8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55972d5c83c0 <col:54, line:517:5>
|     `-ReturnStmt 0x55972d5c83b0 <line:516:9, col:53>
|       `-CallExpr 0x55972d5c8378 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55972d5c82a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55972d5c8318 <col:26> 'const char *' lvalue ParmVar 0x55972d59e550 'keyword' 'const char *'
|         |-DeclRefExpr 0x55972d5c8338 <col:35> 'const int' lvalue Var 0x55972d592130 'positional' 'const int'
|         `-DeclRefExpr 0x55972d5c8358 <col:47> 'P' lvalue ParmVar 0x55972d59e5c8 'parser' 'P'
|-FunctionTemplateDecl 0x55972d59ea38 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55972d59e7a0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55972d59e998 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55972d59e850 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d59e8c8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55972d5c85b0 <col:55, line:521:5>
|     `-ReturnStmt 0x55972d5c85a0 <line:520:9, col:65>
|       `-CallExpr 0x55972d5c8568 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55972d5c83e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55972d5c8458 <col:26> 'const char *' lvalue ParmVar 0x55972d59e850 'keyword' 'const char *'
|         |-BinaryOperator 0x55972d5c8528 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55972d5c84d8 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55972d5c84b8 <col:35> 'const int' lvalue Var 0x55972d592038 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55972d5c8510 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55972d5c84f0 <col:47> 'const int' lvalue Var 0x55972d592130 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55972d5c8548 <col:59> 'P' lvalue ParmVar 0x55972d59e8c8 'parser' 'P'
|-FunctionTemplateDecl 0x55972d59ee08 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55972d59eaa0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55972d59ed68 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55972d59eb50 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d59ebd0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55972d59ec48 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55972d5c86f0 <col:63, line:526:5>
|     |-CallExpr 0x55972d5c8678 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55972d5c85c8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55972d5c8608 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55972d5c8618 <col:35> 'const char *' lvalue ParmVar 0x55972d59eb50 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55972d5c8638 <col:44> 'int' lvalue ParmVar 0x55972d59ebd0 'flags' 'int'
|     | `-DeclRefExpr 0x55972d5c8658 <col:51> 'P' lvalue ParmVar 0x55972d59ec48 'parser' 'P'
|     `-ReturnStmt 0x55972d5c86e0 <line:525:9, col:17>
|       `-UnaryOperator 0x55972d5c86c8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55972d5c86b8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55972d59f258 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55972d59ee78 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55972d59eef8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55972d59f1b8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55972d59efb8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d59f030 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55972d59f0d8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55972d5c8848 <col:58, line:541:5>
|     `-ReturnStmt 0x55972d5c8838 <line:540:9, col:39>
|       `-CallExpr 0x55972d5c8800 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55972d5c8720 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55972d5c87a0 <col:21> 'const char *' lvalue ParmVar 0x55972d59efb8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55972d5c87c0 <col:30> 'P' lvalue ParmVar 0x55972d59f030 'parser' 'P'
|         `-DeclRefExpr 0x55972d5c87e0 <col:38> 'T' lvalue ParmVar 0x55972d59f0d8 'x' 'T &'
|-FunctionTemplateDecl 0x55972d59f6a8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55972d59f2c8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55972d59f348 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55972d59f608 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55972d59f408 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d59f480 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55972d59f528 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55972d5c8980 <col:60, line:545:5>
|     `-ReturnStmt 0x55972d5c8970 <line:544:9, col:41>
|       `-CallExpr 0x55972d5c8938 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55972d5c8870 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55972d5c88d8 <col:23> 'const char *' lvalue ParmVar 0x55972d59f408 'keyword' 'const char *'
|         |-DeclRefExpr 0x55972d5c88f8 <col:32> 'P' lvalue ParmVar 0x55972d59f480 'parser' 'P'
|         `-DeclRefExpr 0x55972d5c8918 <col:40> 'T' lvalue ParmVar 0x55972d59f528 'x' 'T &'
|-FunctionTemplateDecl 0x55972d59faf8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55972d59f718 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55972d59f798 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55972d59fa58 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55972d59f858 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d59f8d0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55972d59f978 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55972d5c8ab8 <col:60, line:549:5>
|     `-ReturnStmt 0x55972d5c8aa8 <line:548:9, col:41>
|       `-CallExpr 0x55972d5c8a70 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55972d5c89a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55972d5c8a10 <col:23> 'const char *' lvalue ParmVar 0x55972d59f858 'keyword' 'const char *'
|         |-DeclRefExpr 0x55972d5c8a30 <col:32> 'P' lvalue ParmVar 0x55972d59f8d0 'parser' 'P'
|         `-DeclRefExpr 0x55972d5c8a50 <col:40> 'T' lvalue ParmVar 0x55972d59f978 'x' 'T &'
|-FunctionTemplateDecl 0x55972d59ff48 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55972d59fb68 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55972d59fbe8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55972d59fea8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55972d59fca8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d59fd20 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55972d59fdc8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55972d5c8bf0 <col:61, line:553:5>
|     `-ReturnStmt 0x55972d5c8be0 <line:552:9, col:42>
|       `-CallExpr 0x55972d5c8ba8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55972d5c8ae0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55972d5c8b48 <col:24> 'const char *' lvalue ParmVar 0x55972d59fca8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55972d5c8b68 <col:33> 'P' lvalue ParmVar 0x55972d59fd20 'parser' 'P'
|         `-DeclRefExpr 0x55972d5c8b88 <col:41> 'T' lvalue ParmVar 0x55972d59fdc8 'x' 'T &'
|-FunctionTemplateDecl 0x55972d5a0428 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55972d59ffb8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55972d5a0038 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55972d5a0388 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55972d5a00f8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d5a0178 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55972d5a01f0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55972d5a0298 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55972d5c8d68 <col:69, line:557:5>
|     `-ReturnStmt 0x55972d5c8d58 <line:556:9, col:46>
|       `-CallExpr 0x55972d5c8d18 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55972d5c8c18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55972d5c8c98 <col:21> 'const char *' lvalue ParmVar 0x55972d5a00f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55972d5c8cb8 <col:30> 'int' lvalue ParmVar 0x55972d5a0178 'flags' 'int'
|         |-DeclRefExpr 0x55972d5c8cd8 <col:37> 'P' lvalue ParmVar 0x55972d5a01f0 'parser' 'P'
|         `-DeclRefExpr 0x55972d5c8cf8 <col:45> 'T' lvalue ParmVar 0x55972d5a0298 'x' 'T &'
|-FunctionTemplateDecl 0x55972d5a0738 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55972d5a04a0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55972d5a0698 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55972d5a0550 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d5a05c8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55972d5c8ea8 <col:56, line:571:5>
|     `-ReturnStmt 0x55972d5c8e98 <line:570:9, col:48>
|       `-CallExpr 0x55972d5c8e60 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55972d5c8d90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55972d5c8e00 <col:30> 'const char *' lvalue ParmVar 0x55972d5a0550 'keyword' 'const char *'
|         |-IntegerLiteral 0x55972d5c8e20 <col:39> 'int' 0
|         `-DeclRefExpr 0x55972d5c8e40 <col:42> 'P' lvalue ParmVar 0x55972d5a05c8 'parser' 'P'
|-FunctionTemplateDecl 0x55972d5a0ac8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55972d5a07a0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55972d5a0a28 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55972d5a0850 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d5a08d0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55972d5a0948 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55972d5c9078 <col:67, line:576:5>
|     |-CallExpr 0x55972d5c9000 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55972d5c8ec0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55972d5c8f00 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55972d5c8f10 <col:39> 'const char *' lvalue ParmVar 0x55972d5a0850 'keyword' 'const char *'
|     | |-BinaryOperator 0x55972d5c8fc0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55972d5c8f70 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55972d5c8f30 <col:48> 'int' lvalue ParmVar 0x55972d5a08d0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55972d5c8fa8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55972d5c8f88 <col:56> 'const int' lvalue Var 0x55972d592320 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55972d5c8fe0 <col:68> 'P' lvalue ParmVar 0x55972d5a0948 'parser' 'P'
|     `-ReturnStmt 0x55972d5c9068 <line:575:9, col:17>
|       `-UnaryOperator 0x55972d5c9050 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55972d5c9040 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55972d5a0f18 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55972d5a0b38 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55972d5a0bb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55972d5a0e78 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55972d5a0c78 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d5a0cf0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55972d5a0d98 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55972d5c91e8 <col:62, line:592:5>
|     `-ReturnStmt 0x55972d5c91d8 <line:591:9, col:51>
|       `-CallExpr 0x55972d5c9198 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55972d5c90a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55972d5c9118 <col:30> 'const char *' lvalue ParmVar 0x55972d5a0c78 'keyword' 'const char *'
|         |-IntegerLiteral 0x55972d5c9138 <col:39> 'int' 0
|         |-DeclRefExpr 0x55972d5c9158 <col:42> 'P' lvalue ParmVar 0x55972d5a0cf0 'parser' 'P'
|         `-DeclRefExpr 0x55972d5c9178 <col:50> 'T' lvalue ParmVar 0x55972d5a0d98 'x' 'T &'
|-FunctionTemplateDecl 0x55972d5a13f8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55972d5a0f88 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55972d5a1008 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55972d5a1358 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55972d5a10c8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d5a1148 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55972d5a11c0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55972d5a1268 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55972d5c93e0 <col:73, line:597:5>
|     |-CallExpr 0x55972d5c9360 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55972d5c9200 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55972d5c9240 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55972d5c9250 <col:39> 'const char *' lvalue ParmVar 0x55972d5a10c8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55972d5c9300 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55972d5c92b0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55972d5c9270 <col:48> 'int' lvalue ParmVar 0x55972d5a1148 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55972d5c92e8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55972d5c92c8 <col:56> 'const int' lvalue Var 0x55972d592320 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55972d5c9320 <col:68> 'P' lvalue ParmVar 0x55972d5a11c0 'parser' 'P'
|     | `-DeclRefExpr 0x55972d5c9340 <col:76> 'T' lvalue ParmVar 0x55972d5a1268 'x' 'T &'
|     `-ReturnStmt 0x55972d5c93d0 <line:596:9, col:17>
|       `-UnaryOperator 0x55972d5c93b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55972d5c93a8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55972d5a19a8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55972d5a1470 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55972d5a14e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55972d5a1908 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55972d5a15a8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d5a1620 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55972d5a17e0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55972d5c9550 <col:65, line:614:5>
|     `-ReturnStmt 0x55972d5c9540 <line:613:9, col:46>
|       `-CallExpr 0x55972d5c9500 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55972d5c9410 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55972d5c9480 <col:25> 'const char *' lvalue ParmVar 0x55972d5a15a8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55972d5c94a0 <col:34> 'int' 0
|         |-DeclRefExpr 0x55972d5c94c0 <col:37> 'P' lvalue ParmVar 0x55972d5a1620 'parser' 'P'
|         `-DeclRefExpr 0x55972d5c94e0 <col:45> 'Vector<T>' lvalue ParmVar 0x55972d5a17e0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55972d5a1dd8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55972d5a1a18 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55972d5a1d38 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55972d5a1ad0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d5a1c20 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55972d5c9770 <col:55, line:618:5>
|     `-ReturnStmt 0x55972d5c9760 <line:617:9, col:55>
|       `-CallExpr 0x55972d5c9720 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55972d5c9578 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55972d5c95e8 <col:25> 'const char *' lvalue ParmVar 0x55972d5a1ad0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55972d5c9608 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55972d5c96e0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55972d5c9700 <col:54> 'Vector<T>' lvalue ParmVar 0x55972d5a1c20 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55972d5a23a8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55972d5a1e40 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55972d5a1eb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55972d5a2308 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55972d5a1f78 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d5a1ff8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55972d5a2070 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55972d5a21c0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55972d5c9968 <col:76, line:623:5>
|     |-CallExpr 0x55972d5c98e8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55972d5c9788 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55972d5c97c8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55972d5c97d8 <col:34> 'const char *' lvalue ParmVar 0x55972d5a1f78 'keyword' 'const char *'
|     | |-BinaryOperator 0x55972d5c9888 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55972d5c9838 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55972d5c97f8 <col:43> 'int' lvalue ParmVar 0x55972d5a1ff8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55972d5c9870 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55972d5c9850 <col:51> 'const int' lvalue Var 0x55972d592320 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55972d5c98a8 <col:63> 'P' lvalue ParmVar 0x55972d5a2070 'parser' 'P'
|     | `-DeclRefExpr 0x55972d5c98c8 <col:71> 'Vector<T>' lvalue ParmVar 0x55972d5a21c0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55972d5c9958 <line:622:9, col:17>
|       `-UnaryOperator 0x55972d5c9940 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55972d5c9930 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55972d5a28e8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55972d5a2420 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55972d5a2498 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55972d5a2848 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55972d5a2558 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d5a25d8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55972d5a2720 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55972d5c9bd0 <col:66, line:627:5>
|     `-ReturnStmt 0x55972d5c9bc0 <line:626:9, col:59>
|       `-CallExpr 0x55972d5c9b80 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55972d5c9998 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55972d5c9a08 <col:25> 'const char *' lvalue ParmVar 0x55972d5a2558 'keyword' 'const char *'
|         |-DeclRefExpr 0x55972d5c9a28 <col:34> 'int' lvalue ParmVar 0x55972d5a25d8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55972d5c9b40 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55972d5c9b60 <col:58> 'Vector<T>' lvalue ParmVar 0x55972d5a2720 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55972d5a2978 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55972d5c9c50 <col:25, line:633:5>
|   `-ReturnStmt 0x55972d5c9c40 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55972d5c9c28 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55972d5c9bf8 <col:16> 'const bool' lvalue ->_status 0x55972d5b1158
|         `-CXXThisExpr 0x55972d5c9be8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55972d5a2af8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55972d5a2a30 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55972d5c9d38 <col:27, line:639:5>
|   |-BinaryOperator 0x55972d5c9ce0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55972d5c9c68 <col:9> 'bool' lvalue ParmVar 0x55972d5a2a30 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55972d5c9cc8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55972d5c9c98 <col:13> 'bool' lvalue ->_status 0x55972d5b1158
|   |     `-CXXThisExpr 0x55972d5c9c88 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55972d5c9d28 <line:638:9, col:17>
|     `-UnaryOperator 0x55972d5c9d10 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55972d5c9d00 <col:17> 'Args *' this
|-CXXMethodDecl 0x55972d5a2c78 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55972d5a2bb8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55972d5c9e28 <col:39, line:644:5>
|   |-BinaryOperator 0x55972d5c9dd0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55972d5c9d58 <col:9> 'bool' lvalue ParmVar 0x55972d5a2bb8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55972d5c9db8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55972d5c9d88 <col:13> 'const bool' lvalue ->_status 0x55972d5b1158
|   |     `-CXXThisExpr 0x55972d5c9d78 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55972d5c9e18 <line:643:9, col:17>
|     `-UnaryOperator 0x55972d5c9e00 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55972d5c9df0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55972d5a2d40 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55972d5c9ed0 <col:30, line:651:5>
|   `-ReturnStmt 0x55972d5c9ec0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55972d5c9ea8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55972d5c9e78 <col:16> 'bool' lvalue ->_read_status 0x55972d589920
|         `-ImplicitCastExpr 0x55972d5c9e58 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55972d5c9e48 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55972d5a2e88 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55972d5a2df8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55972d5c9fd8 <col:32, line:658:5>
|   |-BinaryOperator 0x55972d5c9f80 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55972d5c9ee8 <col:9> 'bool' lvalue ParmVar 0x55972d5a2df8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55972d5c9f68 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55972d5c9f38 <col:13> 'bool' lvalue ->_read_status 0x55972d589920
|   |     `-ImplicitCastExpr 0x55972d5c9f18 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55972d5c9f08 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55972d5c9fc8 <line:657:9, col:17>
|     `-UnaryOperator 0x55972d5c9fb0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55972d5c9fa0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55972d5a2fd8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55972d5a2f48 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55972d5ca0e8 <col:44, line:663:5>
|   |-BinaryOperator 0x55972d5ca090 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55972d5c9ff8 <col:9> 'bool' lvalue ParmVar 0x55972d5a2f48 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55972d5ca078 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55972d5ca048 <col:13> 'bool' lvalue ->_read_status 0x55972d589920
|   |     `-ImplicitCastExpr 0x55972d5ca028 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55972d5ca018 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55972d5ca0d8 <line:662:9, col:17>
|     `-UnaryOperator 0x55972d5ca0c0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55972d5ca0b0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55972d5a30a0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55972d5a3168 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55972d5a3230 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55972d5a32f8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55972d5a3608 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55972d5a3398 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55972d5a3568 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55972d5a3478 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55972d5ca4a0 <col:19, line:706:5>
|     `-IfStmt 0x55972d5ca478 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55972d5ca1e8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55972d5ca3a8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55972d5ca378 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55972d5ca338 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55972d5ca240 <col:42> '<bound member function type>' ->simple_slot 0x55972d5c35f0
|       |     | `-CXXThisExpr 0x55972d5ca230 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55972d5ca2d8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55972d5ca290 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55972d325878
|       |     | `-DeclRefExpr 0x55972d5ca270 <col:55> 'T' lvalue ParmVar 0x55972d5a3478 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55972d5ca318 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55972d5ca468 <line:705:13, col:34>
|         `-CallExpr 0x55972d5ca440 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55972d5ca3c8 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55972d5ca420 <col:33> 'T' lvalue ParmVar 0x55972d5a3478 'x' 'T &'
|-FunctionTemplateDecl 0x55972d5a38d8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55972d5a3668 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55972d5a3838 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55972d5a3748 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55972d5ca880 <col:31, line:717:5>
|     |-DeclStmt 0x55972d5ca5e0 <line:713:9, col:23>
|     | `-VarDecl 0x55972d5ca4c8 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55972d5ca5b8 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55972d5ca540 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55972d5ca598 <col:21> 'T' lvalue ParmVar 0x55972d5a3748 'x' 'T &'
|     |-IfStmt 0x55972d5ca830 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55972d5ca6d8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55972d5ca810 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55972d5ca7b0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55972d5ca740 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55972d4dc978 0x55972d4dc598 0x55972d4dc1c8 0x55972d4dbde8 0x55972d4dba08 0x55972d4db638
|     |   | `-DeclRefExpr 0x55972d5ca720 <col:14> 'T *' lvalue Var 0x55972d5ca4c8 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55972d5ca7f0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55972d5ca868 <line:716:9, col:16>
|       `-DeclRefExpr 0x55972d5ca848 <col:16> 'T *' lvalue Var 0x55972d5ca4c8 's' 'T *'
|-FunctionTemplateDecl 0x55972d5a3ce8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55972d5a3938 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55972d5a39b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55972d5a3c48 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55972d5a3a98 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55972d5a3b38 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55972d5cab90 <col:37, line:726:5>
|     |-IfStmt 0x55972d5cab20 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55972d5cab40 <line:723:13, col:26>
|     | | `-VarDecl 0x55972d5ca8e8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55972d5ca9d8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55972d5ca960 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55972d5ca9b8 <col:25> 'T' lvalue ParmVar 0x55972d5a3a98 'x' 'T &'
|     | |-DeclRefExpr 0x55972d5caa00 <col:16> 'T *' lvalue Var 0x55972d5ca8e8 's' 'T *'
|     | `-BinaryOperator 0x55972d5cab00 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55972d5caab0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55972d5caa40 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55972d4dc978 0x55972d4dc598 0x55972d4dc1c8 0x55972d4dbde8 0x55972d4dba08 0x55972d4db638
|     |   | `-DeclRefExpr 0x55972d5caa20 <col:14> 'T *' lvalue Var 0x55972d5ca8e8 's' 'T *'
|     |   `-DeclRefExpr 0x55972d5caae0 <col:18> 'const V' lvalue ParmVar 0x55972d5a3b38 'value' 'const V &'
|     `-ReturnStmt 0x55972d5cab80 <line:725:9, col:17>
|       `-UnaryOperator 0x55972d5cab68 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55972d5cab58 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55972d5a40e8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55972d5a3d50 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55972d5a4048 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55972d5a3e00 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d5a3e80 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55972d5a3f28 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55972d5cb9b0 <col:65, line:737:5>
|     |-DeclStmt 0x55972d5cac28 <line:732:9, col:26>
|     | `-VarDecl 0x55972d5cabc0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55972d5cb978 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55972d5cb998 <line:733:13, col:58>
|       | `-VarDecl 0x55972d5cac50 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55972d5cae30 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55972d5cae00 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55972d5cade8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55972d5cadc8 <col:26, col:58> 'String' (CXXTemporary 0x55972d5cadc8)
|       |           `-CXXMemberCallExpr 0x55972d5cad58 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55972d5cacc8 <col:26> '<bound member function type>' ->find 0x55972d5c2c08
|       |             | `-CXXThisExpr 0x55972d5cacb8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55972d5cad90 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55972d5cacf8 <col:31> 'const char *' lvalue ParmVar 0x55972d5a3e00 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55972d5cada8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55972d5cad18 <col:40> 'int' lvalue ParmVar 0x55972d5a3e80 'flags' 'int'
|       |             `-DeclRefExpr 0x55972d5cad38 <col:47> 'Args::Slot *' lvalue Var 0x55972d5cabc0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55972d5caee8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55972d5caed0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55972d5caeb0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55972d5cae80 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55972d2e8848
|       |       `-ImplicitCastExpr 0x55972d5cae68 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55972d5cae48 <col:20> 'String' lvalue Var 0x55972d5cac50 'str' 'String'
|       `-CompoundStmt 0x55972d5cb958 <col:61, line:736:9>
|         |-DeclStmt 0x55972d5cb3a0 <line:734:13, col:76>
|         | `-VarDecl 0x55972d5caf38 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55972d5cb370 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55972d5cb2e0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55972d5cb328 <col:60> 'T' lvalue ParmVar 0x55972d5a3f28 'variable' 'T &'
|         |     `-UnaryOperator 0x55972d5cb358 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55972d5cb348 <col:71> 'Args *' this
|         `-CallExpr 0x55972d5cb928 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55972d5cb3c8 <col:13> '<bound member function type>' ->postparse 0x55972d5c2e18
|           | `-CXXThisExpr 0x55972d5cb3b8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55972d5cb8e8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55972d5cb3f8 <col:23> 'T *' lvalue Var 0x55972d5caf38 's' 'T *'
|           | `-CallExpr 0x55972d5cb8a8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55972d5cb680 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55972d5cb780 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55972d5cb7a0 <col:86> 'String' lvalue Var 0x55972d5cac50 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55972d5cb850 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55972d5cb7e0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55972d4dc978 0x55972d4dc598 0x55972d4dc1c8 0x55972d4dbde8 0x55972d4dba08 0x55972d4db638
|           |   | `-DeclRefExpr 0x55972d5cb7c0 <col:92> 'T *' lvalue Var 0x55972d5caf38 's' 'T *'
|           |   `-UnaryOperator 0x55972d5cb890 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55972d5cb880 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55972d5cb908 <col:103> 'Args::Slot *' lvalue Var 0x55972d5cabc0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55972d5a4638 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55972d5a4158 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55972d5a41d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55972d5a4598 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55972d5a4298 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d5a4318 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55972d5a43b8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55972d5a4458 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55972d5cc850 <col:88, line:745:5>
|     |-DeclStmt 0x55972d5cba48 <line:741:9, col:26>
|     | `-VarDecl 0x55972d5cb9e0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55972d5cbc68 <line:742:9, col:55>
|     | `-VarDecl 0x55972d5cba70 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55972d5cbc50 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55972d5cbc20 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55972d5cbc08 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55972d5cbbe8 <col:22, col:54> 'String' (CXXTemporary 0x55972d5cbbe8)
|     |           `-CXXMemberCallExpr 0x55972d5cbb78 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55972d5cbae8 <col:22> '<bound member function type>' ->find 0x55972d5c2c08
|     |             | `-CXXThisExpr 0x55972d5cbad8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55972d5cbbb0 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55972d5cbb18 <col:27> 'const char *' lvalue ParmVar 0x55972d5a4298 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55972d5cbbc8 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55972d5cbb38 <col:36> 'int' lvalue ParmVar 0x55972d5a4318 'flags' 'int'
|     |             `-DeclRefExpr 0x55972d5cbb58 <col:43> 'Args::Slot *' lvalue Var 0x55972d5cb9e0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55972d5cc040 <line:743:9, col:72>
|     | `-VarDecl 0x55972d5cbcb8 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55972d5cc010 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55972d5cbf80 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55972d5cbfc8 <col:56> 'T' lvalue ParmVar 0x55972d5a43b8 'variable' 'T &'
|     |     `-UnaryOperator 0x55972d5cbff8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55972d5cbfe8 <col:67> 'Args *' this
|     `-CallExpr 0x55972d5cc820 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55972d5cc068 <col:9> '<bound member function type>' ->postparse 0x55972d5c2e18
|       | `-CXXThisExpr 0x55972d5cc058 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55972d5cc7e0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55972d5cc098 <col:19> 'T *' lvalue Var 0x55972d5cbcb8 's' 'T *'
|       | `-ParenExpr 0x55972d5cc7c0 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55972d5cc790 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55972d5cc778 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55972d5cc760 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55972d5cc740 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55972d5cc710 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55972d2e8848
|       |     |       `-ImplicitCastExpr 0x55972d5cc6f8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55972d5cc0b8 <col:25> 'String' lvalue Var 0x55972d5cba70 'str' 'String'
|       |     |-CallExpr 0x55972d5cc568 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55972d5cc340 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55972d5cc440 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55972d5cc460 <col:89> 'String' lvalue Var 0x55972d5cba70 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55972d5cc510 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55972d5cc4a0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55972d4dc978 0x55972d4dc598 0x55972d4dc1c8 0x55972d4dbde8 0x55972d4dba08 0x55972d4db638
|       |     | | `-DeclRefExpr 0x55972d5cc480 <col:95> 'T *' lvalue Var 0x55972d5cbcb8 's' 'T *'
|       |     | `-UnaryOperator 0x55972d5cc550 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55972d5cc540 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55972d5cc6d8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55972d5cc6b8 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55972d5cc688 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55972d5cc638 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55972d5cc5c8 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55972d4dc978 0x55972d4dc598 0x55972d4dc1c8 0x55972d4dbde8 0x55972d4dba08 0x55972d4db638
|       |         | | `-DeclRefExpr 0x55972d5cc5a8 <col:109> 'T *' lvalue Var 0x55972d5cbcb8 's' 'T *'
|       |         | `-DeclRefExpr 0x55972d5cc668 <col:113> 'const V' lvalue ParmVar 0x55972d5a4458 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55972d5cc6a8 <col:120> 'bool' true
|       `-DeclRefExpr 0x55972d5cc800 <col:128> 'Args::Slot *' lvalue Var 0x55972d5cb9e0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55972d5a4b68 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55972d5a46b0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55972d5a4728 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55972d5a4ac8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55972d5a47e8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d5a4868 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55972d5a48e0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55972d5a4988 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55972d5cd448 <col:75, line:754:5>
|     |-DeclStmt 0x55972d5cc8f8 <line:749:9, col:26>
|     | `-VarDecl 0x55972d5cc890 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55972d5cd410 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55972d5cd430 <line:750:13, col:58>
|       | `-VarDecl 0x55972d5cc920 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55972d5ccb00 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55972d5ccad0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55972d5ccab8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55972d5cca98 <col:26, col:58> 'String' (CXXTemporary 0x55972d5cca98)
|       |           `-CXXMemberCallExpr 0x55972d5cca28 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55972d5cc998 <col:26> '<bound member function type>' ->find 0x55972d5c2c08
|       |             | `-CXXThisExpr 0x55972d5cc988 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55972d5cca60 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55972d5cc9c8 <col:31> 'const char *' lvalue ParmVar 0x55972d5a47e8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55972d5cca78 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55972d5cc9e8 <col:40> 'int' lvalue ParmVar 0x55972d5a4868 'flags' 'int'
|       |             `-DeclRefExpr 0x55972d5cca08 <col:47> 'Args::Slot *' lvalue Var 0x55972d5cc890 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55972d5ccbb8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55972d5ccba0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55972d5ccb80 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55972d5ccb50 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55972d2e8848
|       |       `-ImplicitCastExpr 0x55972d5ccb38 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55972d5ccb18 <col:20> 'String' lvalue Var 0x55972d5cc920 'str' 'String'
|       `-CompoundStmt 0x55972d5cd3f0 <col:61, line:753:9>
|         |-DeclStmt 0x55972d5ccf90 <line:751:13, col:63>
|         | `-VarDecl 0x55972d5ccc08 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55972d5ccf60 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55972d5cced0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55972d5ccf18 <col:47> 'T' lvalue ParmVar 0x55972d5a4988 'variable' 'T &'
|         |     `-UnaryOperator 0x55972d5ccf48 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55972d5ccf38 <col:58> 'Args *' this
|         `-CallExpr 0x55972d5cd3c0 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55972d5ccfb8 <col:13> '<bound member function type>' ->postparse 0x55972d5c2e18
|           | `-CXXThisExpr 0x55972d5ccfa8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55972d5cd380 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55972d5ccfe8 <col:23> 'T *' lvalue Var 0x55972d5ccc08 's' 'T *'
|           | `-CallExpr 0x55972d5cd340 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55972d5cd1d0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55972d5cd218 <col:56> 'P' lvalue ParmVar 0x55972d5a48e0 'parser' 'P'
|           |   |-DeclRefExpr 0x55972d5cd238 <col:64> 'String' lvalue Var 0x55972d5cc920 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55972d5cd2e8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55972d5cd278 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55972d4dc978 0x55972d4dc598 0x55972d4dc1c8 0x55972d4dbde8 0x55972d4dba08 0x55972d4db638
|           |   | `-DeclRefExpr 0x55972d5cd258 <col:70> 'T *' lvalue Var 0x55972d5ccc08 's' 'T *'
|           |   `-UnaryOperator 0x55972d5cd328 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55972d5cd318 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55972d5cd3a0 <col:81> 'Args::Slot *' lvalue Var 0x55972d5cc890 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55972d5a51c8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55972d5a4be0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55972d5a4c58 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55972d5a4cd8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55972d5a5128 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55972d5a4da0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d5a4e20 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55972d5a4e98 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55972d5a4f38 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55972d5a4fd8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55972d5d1560 <col:98, line:762:5>
|     |-DeclStmt 0x55972d5cd4e0 <line:758:9, col:26>
|     | `-VarDecl 0x55972d5cd478 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55972d5cd700 <line:759:9, col:55>
|     | `-VarDecl 0x55972d5cd508 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55972d5cd6e8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55972d5cd6b8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55972d5cd6a0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55972d5cd680 <col:22, col:54> 'String' (CXXTemporary 0x55972d5cd680)
|     |           `-CXXMemberCallExpr 0x55972d5cd610 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55972d5cd580 <col:22> '<bound member function type>' ->find 0x55972d5c2c08
|     |             | `-CXXThisExpr 0x55972d5cd570 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55972d5cd648 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55972d5cd5b0 <col:27> 'const char *' lvalue ParmVar 0x55972d5a4da0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55972d5cd660 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55972d5cd5d0 <col:36> 'int' lvalue ParmVar 0x55972d5a4e20 'flags' 'int'
|     |             `-DeclRefExpr 0x55972d5cd5f0 <col:43> 'Args::Slot *' lvalue Var 0x55972d5cd478 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55972d5cdb20 <line:760:9, col:59>
|     | `-VarDecl 0x55972d5cd758 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55972d5cdaf0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55972d5cda60 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55972d5cdaa8 <col:43> 'T' lvalue ParmVar 0x55972d5a4f38 'variable' 'T &'
|     |     `-UnaryOperator 0x55972d5cdad8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55972d5cdac8 <col:54> 'Args *' this
|     `-CallExpr 0x55972d5d1530 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55972d5cdb48 <col:9> '<bound member function type>' ->postparse 0x55972d5c2e18
|       | `-CXXThisExpr 0x55972d5cdb38 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55972d5ce168 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55972d5cdb78 <col:19> 'T *' lvalue Var 0x55972d5cd758 's' 'T *'
|       | `-ParenExpr 0x55972d5ce148 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55972d5ce118 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55972d5ce100 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55972d5ce0e8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55972d5ce0c8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55972d5ce098 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55972d2e8848
|       |     |       `-ImplicitCastExpr 0x55972d5ce080 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55972d5cdb98 <col:25> 'String' lvalue Var 0x55972d5cd508 'str' 'String'
|       |     |-CallExpr 0x55972d5cdef0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55972d5cdd80 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55972d5cddc8 <col:59> 'P' lvalue ParmVar 0x55972d5a4e98 'parser' 'P'
|       |     | |-DeclRefExpr 0x55972d5cdde8 <col:67> 'String' lvalue Var 0x55972d5cd508 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55972d5cde98 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55972d5cde28 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55972d4dc978 0x55972d4dc598 0x55972d4dc1c8 0x55972d4dbde8 0x55972d4dba08 0x55972d4db638
|       |     | | `-DeclRefExpr 0x55972d5cde08 <col:73> 'T *' lvalue Var 0x55972d5cd758 's' 'T *'
|       |     | `-UnaryOperator 0x55972d5cded8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55972d5cdec8 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55972d5ce060 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55972d5ce040 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55972d5ce010 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55972d5cdfc0 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55972d5cdf50 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55972d4dc978 0x55972d4dc598 0x55972d4dc1c8 0x55972d4dbde8 0x55972d4dba08 0x55972d4db638
|       |         | | `-DeclRefExpr 0x55972d5cdf30 <col:87> 'T *' lvalue Var 0x55972d5cd758 's' 'T *'
|       |         | `-DeclRefExpr 0x55972d5cdff0 <col:91> 'const V' lvalue ParmVar 0x55972d5a4fd8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55972d5ce030 <col:98> 'bool' true
|       `-DeclRefExpr 0x55972d5ce188 <col:106> 'Args::Slot *' lvalue Var 0x55972d5cd478 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55972d5a5838 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55972d5a5248 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55972d5a52c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55972d5a5348 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55972d5a5798 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55972d5a5410 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d5a5490 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55972d5a5508 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55972d5a55a8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55972d5a5648 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55972d5d2538 <col:60, line:773:5>
|     |-DeclStmt 0x55972d5d1608 <line:767:9, col:26>
|     | `-VarDecl 0x55972d5d15a0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55972d5d2500 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55972d5d2520 <line:768:13, col:58>
|       | `-VarDecl 0x55972d5d1630 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55972d5d1810 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55972d5d17e0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55972d5d17c8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55972d5d17a8 <col:26, col:58> 'String' (CXXTemporary 0x55972d5d17a8)
|       |           `-CXXMemberCallExpr 0x55972d5d1738 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55972d5d16a8 <col:26> '<bound member function type>' ->find 0x55972d5c2c08
|       |             | `-CXXThisExpr 0x55972d5d1698 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55972d5d1770 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55972d5d16d8 <col:31> 'const char *' lvalue ParmVar 0x55972d5a5410 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55972d5d1788 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55972d5d16f8 <col:40> 'int' lvalue ParmVar 0x55972d5a5490 'flags' 'int'
|       |             `-DeclRefExpr 0x55972d5d1718 <col:47> 'Args::Slot *' lvalue Var 0x55972d5d15a0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55972d5d18c8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55972d5d18b0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55972d5d1890 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55972d5d1860 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55972d2e8848
|       |       `-ImplicitCastExpr 0x55972d5d1848 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55972d5d1828 <col:20> 'String' lvalue Var 0x55972d5d1630 'str' 'String'
|       `-CompoundStmt 0x55972d5d24d8 <col:61, line:772:9>
|         |-DeclStmt 0x55972d5d1c00 <line:769:13, col:66>
|         | `-VarDecl 0x55972d5d1918 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55972d5d1bd0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55972d5d1b40 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55972d5d1b88 <col:49> 'T1' lvalue ParmVar 0x55972d5a55a8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55972d5d1bb8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55972d5d1ba8 <col:61> 'Args *' this
|         |-DeclStmt 0x55972d5d1f70 <line:770:13, col:66>
|         | `-VarDecl 0x55972d5d1c88 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55972d5d1f40 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55972d5d1eb0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55972d5d1ef8 <col:49> 'T2' lvalue ParmVar 0x55972d5a5648 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55972d5d1f28 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55972d5d1f18 <col:61> 'Args *' this
|         `-CallExpr 0x55972d5d24a8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55972d5d1f98 <col:13> '<bound member function type>' ->postparse 0x55972d5c2e18
|           | `-CXXThisExpr 0x55972d5d1f88 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55972d5d2468 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55972d5d2008 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55972d5d1fc8 <col:23> 'T1 *' lvalue Var 0x55972d5d1918 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55972d5d1fe8 <col:29> 'T2 *' lvalue Var 0x55972d5d1c88 's2' 'T2 *'
|           | `-CallExpr 0x55972d5d2420 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55972d5d21f0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55972d5d2238 <col:63> 'P' lvalue ParmVar 0x55972d5a5508 'parser' 'P'
|           |   |-DeclRefExpr 0x55972d5d2258 <col:71> 'String' lvalue Var 0x55972d5d1630 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55972d5d2308 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55972d5d2298 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55972d4dc978 0x55972d4dc598 0x55972d4dc1c8 0x55972d4dbde8 0x55972d4dba08 0x55972d4db638
|           |   | `-DeclRefExpr 0x55972d5d2278 <col:77> 'T1 *' lvalue Var 0x55972d5d1918 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55972d5d23c8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55972d5d2358 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55972d4dc978 0x55972d4dc598 0x55972d4dc1c8 0x55972d4dbde8 0x55972d4dba08 0x55972d4db638
|           |   | `-DeclRefExpr 0x55972d5d2338 <col:82> 'T2 *' lvalue Var 0x55972d5d1c88 's2' 'T2 *'
|           |   `-UnaryOperator 0x55972d5d2408 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55972d5d23f8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55972d5d2488 <col:94> 'Args::Slot *' lvalue Var 0x55972d5d15a0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55972d5ae5c8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55972d5a58b8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55972d5ae528 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55972d5a5970 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d5a59f0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55972d5a5a68 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55972d5d2a50 <col:67, line:780:5>
|     |-DeclStmt 0x55972d5d25d0 <line:777:9, col:26>
|     | `-VarDecl 0x55972d5d2568 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55972d5d2a18 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55972d5d2a38 <line:778:13, col:58>
|       | `-VarDecl 0x55972d5d25f8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55972d5d27d8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55972d5d27a8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55972d5d2790 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55972d5d2770 <col:26, col:58> 'String' (CXXTemporary 0x55972d5d2770)
|       |           `-CXXMemberCallExpr 0x55972d5d2700 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55972d5d2670 <col:26> '<bound member function type>' ->find 0x55972d5c2c08
|       |             | `-CXXThisExpr 0x55972d5d2660 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55972d5d2738 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55972d5d26a0 <col:31> 'const char *' lvalue ParmVar 0x55972d5a5970 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55972d5d2750 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55972d5d26c0 <col:40> 'int' lvalue ParmVar 0x55972d5a59f0 'flags' 'int'
|       |             `-DeclRefExpr 0x55972d5d26e0 <col:47> 'Args::Slot *' lvalue Var 0x55972d5d2568 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55972d5d2890 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55972d5d2878 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55972d5d2858 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55972d5d2828 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55972d2e8848
|       |       `-ImplicitCastExpr 0x55972d5d2810 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55972d5d27f0 <col:20> 'String' lvalue Var 0x55972d5d25f8 'str' 'String'
|       `-CallExpr 0x55972d5d29e8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55972d5d28b8 <col:13> '<bound member function type>' ->postparse 0x55972d5c2e18
|         | `-CXXThisExpr 0x55972d5d28a8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55972d5d2998 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55972d5d2908 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55972d5d28e8 <col:23> 'P' lvalue ParmVar 0x55972d5a5a68 'parser' 'P'
|         | |-DeclRefExpr 0x55972d5d2950 <col:36> 'String' lvalue Var 0x55972d5d25f8 'str' 'String'
|         | `-UnaryOperator 0x55972d5d2980 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55972d5d2970 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55972d5d29c8 <col:49> 'Args::Slot *' lvalue Var 0x55972d5d2568 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55972d5ae968 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55972d5ae638 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55972d5ae8c8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55972d5ae6f0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d5ae770 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55972d5ae7e8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55972d5d33c0 <col:71, line:792:5>
|     |-DeclStmt 0x55972d5d2ae8 <line:784:9, col:26>
|     | `-VarDecl 0x55972d5d2a80 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55972d5d2bb8 <line:785:9, col:29>
|     | `-VarDecl 0x55972d5d2b18 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55972d5d2ba0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55972d5d2b80 <col:28> 'int' 1
|     |-WhileStmt 0x55972d5d3270 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55972d5d3290 <line:786:16, col:61>
|     | | `-VarDecl 0x55972d5d2be0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55972d5d2dc0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55972d5d2d90 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55972d5d2d78 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55972d5d2d58 <col:29, col:61> 'String' (CXXTemporary 0x55972d5d2d58)
|     | |           `-CXXMemberCallExpr 0x55972d5d2ce8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55972d5d2c58 <col:29> '<bound member function type>' ->find 0x55972d5c2c08
|     | |             | `-CXXThisExpr 0x55972d5d2c48 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55972d5d2d20 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55972d5d2c88 <col:34> 'const char *' lvalue ParmVar 0x55972d5ae6f0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55972d5d2d38 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55972d5d2ca8 <col:43> 'int' lvalue ParmVar 0x55972d5ae770 'flags' 'int'
|     | |             `-DeclRefExpr 0x55972d5d2cc8 <col:50> 'Args::Slot *' lvalue Var 0x55972d5d2a80 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55972d5d2e78 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55972d5d2e60 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55972d5d2e40 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55972d5d2e10 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55972d2e8848
|     | |       `-ImplicitCastExpr 0x55972d5d2df8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55972d5d2dd8 <col:23> 'String' lvalue Var 0x55972d5d2be0 'str' 'String'
|     | `-CompoundStmt 0x55972d5d3248 <col:64, line:790:9>
|     |   |-CallExpr 0x55972d5d2fd0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55972d5d2ea0 <col:13> '<bound member function type>' ->postparse 0x55972d5c2e18
|     |   | | `-CXXThisExpr 0x55972d5d2e90 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55972d5d2f80 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55972d5d2ef0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55972d5d2ed0 <col:23> 'P' lvalue ParmVar 0x55972d5ae7e8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55972d5d2f38 <col:36> 'String' lvalue Var 0x55972d5d2be0 'str' 'String'
|     |   | | `-UnaryOperator 0x55972d5d2f68 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55972d5d2f58 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55972d5d2fb0 <col:49> 'Args::Slot *' lvalue Var 0x55972d5d2a80 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55972d5d3168 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55972d5d3000 <col:13> 'int' lvalue Var 0x55972d5d2b18 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55972d5d3150 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55972d5d3130 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55972d5d3098 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55972d5d3078 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55972d5d3060 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55972d5d3020 <col:28> 'int' lvalue Var 0x55972d5d2b18 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55972d5d3040 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55972d5d3118 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55972d5d30e8 <col:49> 'bool' lvalue ->_read_status 0x55972d589920
|     |   |         `-ImplicitCastExpr 0x55972d5d30c8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55972d5d30b8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55972d5d3218 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55972d5d3188 <col:13> 'int' lvalue ParmVar 0x55972d5ae770 'flags' 'int'
|     |     `-UnaryOperator 0x55972d5d3200 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55972d5d31e8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55972d5d31c8 <col:23> 'const int' lvalue Var 0x55972d592038 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55972d5d33a0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55972d5d32d8 <col:9> 'bool' lvalue ->_read_status 0x55972d589920
|       | `-ImplicitCastExpr 0x55972d5d32b8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55972d5d32a8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55972d5d3380 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55972d5d3360 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55972d5d3348 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55972d5d3308 <col:25> 'int' lvalue Var 0x55972d5d2b18 'read_status' 'int'
|           `-IntegerLiteral 0x55972d5d3328 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55972d5aee48 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55972d5ae9d8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55972d5aea58 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55972d5aeda8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55972d5aeb18 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d5aeb98 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55972d5aec10 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55972d5aecb8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55972d5d4350 <col:84, line:805:5>
|     |-DeclStmt 0x55972d5d3468 <line:796:9, col:26>
|     | `-VarDecl 0x55972d5d3400 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55972d5d3538 <line:797:9, col:29>
|     | `-VarDecl 0x55972d5d3498 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55972d5d3520 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55972d5d3500 <col:28> 'int' 1
|     |-DeclStmt 0x55972d5d3870 <line:798:9, col:71>
|     | `-VarDecl 0x55972d5d3588 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55972d5d3840 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55972d5d37b0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55972d5d37f8 <col:55> 'T' lvalue ParmVar 0x55972d5aecb8 'variable' 'T &'
|     |     `-UnaryOperator 0x55972d5d3828 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55972d5d3818 <col:66> 'Args *' this
|     |-WhileStmt 0x55972d5d4200 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55972d5d4220 <line:799:16, col:61>
|     | | `-VarDecl 0x55972d5d3898 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55972d5d3a78 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55972d5d3a48 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55972d5d3a30 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55972d5d3a10 <col:29, col:61> 'String' (CXXTemporary 0x55972d5d3a10)
|     | |           `-CXXMemberCallExpr 0x55972d5d39a0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55972d5d3910 <col:29> '<bound member function type>' ->find 0x55972d5c2c08
|     | |             | `-CXXThisExpr 0x55972d5d3900 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55972d5d39d8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55972d5d3940 <col:34> 'const char *' lvalue ParmVar 0x55972d5aeb18 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55972d5d39f0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55972d5d3960 <col:43> 'int' lvalue ParmVar 0x55972d5aeb98 'flags' 'int'
|     | |             `-DeclRefExpr 0x55972d5d3980 <col:50> 'Args::Slot *' lvalue Var 0x55972d5d3400 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55972d5d3b30 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55972d5d3b18 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55972d5d3af8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55972d5d3ac8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55972d2e8848
|     | |       `-ImplicitCastExpr 0x55972d5d3ab0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55972d5d3a90 <col:23> 'String' lvalue Var 0x55972d5d3898 'str' 'String'
|     | `-CompoundStmt 0x55972d5d41d8 <col:64, line:803:9>
|     |   |-CallExpr 0x55972d5d3f60 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55972d5d3b58 <col:13> '<bound member function type>' ->postparse 0x55972d5c2e18
|     |   | | `-CXXThisExpr 0x55972d5d3b48 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55972d5d3f20 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55972d5d3b88 <col:23> 'T *' lvalue Var 0x55972d5d3588 's' 'T *'
|     |   | | `-CallExpr 0x55972d5d3ee0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55972d5d3d70 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55972d5d3db8 <col:56> 'P' lvalue ParmVar 0x55972d5aec10 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55972d5d3dd8 <col:64> 'String' lvalue Var 0x55972d5d3898 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55972d5d3e88 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55972d5d3e18 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55972d4dc978 0x55972d4dc598 0x55972d4dc1c8 0x55972d4dbde8 0x55972d4dba08 0x55972d4db638
|     |   | |   | `-DeclRefExpr 0x55972d5d3df8 <col:70> 'T *' lvalue Var 0x55972d5d3588 's' 'T *'
|     |   | |   `-UnaryOperator 0x55972d5d3ec8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55972d5d3eb8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55972d5d3f40 <col:81> 'Args::Slot *' lvalue Var 0x55972d5d3400 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55972d5d40f8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55972d5d3f90 <col:13> 'int' lvalue Var 0x55972d5d3498 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55972d5d40e0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55972d5d40c0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55972d5d4028 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55972d5d4008 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55972d5d3ff0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55972d5d3fb0 <col:28> 'int' lvalue Var 0x55972d5d3498 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55972d5d3fd0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55972d5d40a8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55972d5d4078 <col:49> 'bool' lvalue ->_read_status 0x55972d589920
|     |   |         `-ImplicitCastExpr 0x55972d5d4058 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55972d5d4048 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55972d5d41a8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55972d5d4118 <col:13> 'int' lvalue ParmVar 0x55972d5aeb98 'flags' 'int'
|     |     `-UnaryOperator 0x55972d5d4190 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55972d5d4178 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55972d5d4158 <col:23> 'const int' lvalue Var 0x55972d592038 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55972d5d4330 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55972d5d4268 <col:9> 'bool' lvalue ->_read_status 0x55972d589920
|       | `-ImplicitCastExpr 0x55972d5d4248 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55972d5d4238 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55972d5d4310 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55972d5d42f0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55972d5d42d8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55972d5d4298 <col:25> 'int' lvalue Var 0x55972d5d3498 'read_status' 'int'
|           `-IntegerLiteral 0x55972d5d42b8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55972d5af428 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55972d5aeec0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55972d5aef38 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55972d5af388 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55972d5aeff8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55972d5af078 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55972d5af0f0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55972d5af240 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55972d5d5158 <col:87, line:821:5>
|     |-DeclStmt 0x55972d5d4400 <line:809:9, col:26>
|     | `-VarDecl 0x55972d5d4398 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55972d5d44d0 <line:810:9, col:29>
|     | `-VarDecl 0x55972d5d4430 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55972d5d44b8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55972d5d4498 <col:28> 'int' 1
|     |-DeclStmt 0x55972d5d4718 <line:811:9, col:38>
|     | `-VarDecl 0x55972d5d4600 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55972d5d46f0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55972d5d4678 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55972d5d46d0 <col:29> 'Vector<T>' lvalue ParmVar 0x55972d5af240 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55972d5d5008 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55972d5d5028 <line:812:16, col:61>
|     | | `-VarDecl 0x55972d5d4740 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55972d5d4920 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55972d5d48f0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55972d5d48d8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55972d5d48b8 <col:29, col:61> 'String' (CXXTemporary 0x55972d5d48b8)
|     | |           `-CXXMemberCallExpr 0x55972d5d4848 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55972d5d47b8 <col:29> '<bound member function type>' ->find 0x55972d5c2c08
|     | |             | `-CXXThisExpr 0x55972d5d47a8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55972d5d4880 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55972d5d47e8 <col:34> 'const char *' lvalue ParmVar 0x55972d5aeff8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55972d5d4898 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55972d5d4808 <col:43> 'int' lvalue ParmVar 0x55972d5af078 'flags' 'int'
|     | |             `-DeclRefExpr 0x55972d5d4828 <col:50> 'Args::Slot *' lvalue Var 0x55972d5d4398 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55972d5d49d8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55972d5d49c0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55972d5d49a0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55972d5d4970 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55972d2e8848
|     | |       `-ImplicitCastExpr 0x55972d5d4958 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55972d5d4938 <col:23> 'String' lvalue Var 0x55972d5d4740 'str' 'String'
|     | `-CompoundStmt 0x55972d5d4fd0 <col:64, line:819:9>
|     |   |-DeclStmt 0x55972d5d4a98 <line:813:13, col:23>
|     |   | `-VarDecl 0x55972d5d4a00 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55972d5d4a78 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55972d5d4c18 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55972d5d4ac0 <col:13> '<bound member function type>' ->postparse 0x55972d5c2e18
|     |   | | `-CXXThisExpr 0x55972d5d4ab0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55972d5d4bc0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55972d5d4b10 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55972d5d4af0 <col:23> 'P' lvalue ParmVar 0x55972d5af0f0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55972d5d4b58 <col:36> 'String' lvalue Var 0x55972d5d4740 'str' 'String'
|     |   | | |-DeclRefExpr 0x55972d5d4b78 <col:41> 'T' lvalue Var 0x55972d5d4a00 'sx' 'T'
|     |   | | `-UnaryOperator 0x55972d5d4ba8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55972d5d4b98 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55972d5d4bf8 <col:53> 'Args::Slot *' lvalue Var 0x55972d5d4398 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55972d5d4d70 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55972d5d4ca8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55972d5d4c78 <col:17> 'bool' lvalue ->_read_status 0x55972d589920
|     |   | |   `-ImplicitCastExpr 0x55972d5d4c58 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55972d5d4c48 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55972d5d4d48 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55972d5d4ce0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55972d5d4cc0 <col:17> 'Vector<T> *' lvalue Var 0x55972d5d4600 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55972d5d4d28 <col:30> 'T' lvalue Var 0x55972d5d4a00 'sx' 'T'
|     |   |-BinaryOperator 0x55972d5d4ef0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55972d5d4d88 <col:13> 'int' lvalue Var 0x55972d5d4430 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55972d5d4ed8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55972d5d4eb8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55972d5d4e20 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55972d5d4e00 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55972d5d4de8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55972d5d4da8 <col:28> 'int' lvalue Var 0x55972d5d4430 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55972d5d4dc8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55972d5d4ea0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55972d5d4e70 <col:49> 'bool' lvalue ->_read_status 0x55972d589920
|     |   |         `-ImplicitCastExpr 0x55972d5d4e50 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55972d5d4e40 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55972d5d4fa0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55972d5d4f10 <col:13> 'int' lvalue ParmVar 0x55972d5af078 'flags' 'int'
|     |     `-UnaryOperator 0x55972d5d4f88 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55972d5d4f70 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55972d5d4f50 <col:23> 'const int' lvalue Var 0x55972d592038 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55972d5d5138 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55972d5d5070 <col:9> 'bool' lvalue ->_read_status 0x55972d589920
|       | `-ImplicitCastExpr 0x55972d5d5050 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55972d5d5040 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55972d5d5118 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55972d5d50f8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55972d5d50e0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55972d5d50a0 <col:25> 'int' lvalue Var 0x55972d5d4430 'read_status' 'int'
|           `-IntegerLiteral 0x55972d5d50c0 <col:40> 'int' 1
|-AccessSpecDecl 0x55972d5af4a0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55972d5af4c8 prev 0x55972d58f130 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55972d5af5c0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55972d5af6b0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55972d5d5190 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55972d5af7a0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55972d5d51a0 <col:25, line:830:9>
| |-CXXMethodDecl 0x55972d5af8a0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55972d5af950 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55972d5af9f8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55972d5af9f8
| | `-ParmVarDecl 0x55972d5afb08 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55972d5b02c8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55972d5b02c8
|   `-ParmVarDecl 0x55972d5b03d8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55972d5afb78 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55972d5afcd8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55972d5afed0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55972d5afd80 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55972d5afdf8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55972d5d5380 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55972d5b0188 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55972d5d51f0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55972d5d51b0 <col:20> 'void *' lvalue ParmVar 0x55972d5afd80 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55972d5b01f0 '_slot' 'char *'
| | | `-CXXNewExpr 0x55972d5d5278 <col:32, col:45> 'char *' array Function 0x55972d10b4b8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55972d5d5260 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55972d5d5230 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55972d5afdf8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55972d5b0250 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55972d5d5340 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55972d5d5300 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55972d5afdf8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55972d5d5400 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55972d5affd0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55972d5af7a0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55972d5d5488 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55972d5d5468 <line:840:13, col:22> 'void' array Function 0x55972d10b818 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55972d5d5450 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55972d5d5420 <col:22> 'char *' lvalue ->_slot 0x55972d5b01f0
| |         `-CXXThisExpr 0x55972d5d5410 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55972d5b00d0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55972d5af8a0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55972d5d5678 <col:22, line:844:9>
| |   `-CallExpr 0x55972d5d55e0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55972d5d55c8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55972d5d55a8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55972d217298 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55972d5d5618 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55972d5d54f8 <col:20> 'void *' lvalue ->_ptr 0x55972d5b0188
| |     |   `-CXXThisExpr 0x55972d5d54e8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55972d5d5648 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55972d5d5630 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55972d5d5538 <col:26> 'char *' lvalue ->_slot 0x55972d5b01f0
| |     |     `-CXXThisExpr 0x55972d5d5528 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55972d5d5660 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55972d5d5578 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55972d5b0250
| |         `-CXXThisExpr 0x55972d5d5568 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55972d5b0188 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55972d5b01f0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55972d5b0250 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55972d5b0448 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55972d5b0448
| | `-ParmVarDecl 0x55972d5b0558 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55972d5b05f8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55972d5b05f8
|   `-ParmVarDecl 0x55972d5b0708 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55972d5b08a8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55972d5b0778 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55972d5b0818 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55972d5b0b40 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55972d5b0d38 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55972d5b0c08 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55972d5b0eb8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55972d5d56b0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55972d5d5690 <col:20> 'T *' lvalue ParmVar 0x55972d5b0c08 'ptr' 'T *'
|   | `-CompoundStmt 0x55972d5d5700 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55972d5b0e08 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55972d5af8a0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55972d5d58b0 <col:22, line:857:9>
|   |   `-CallExpr 0x55972d5d5880 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55972d5d5710 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55972d2cf9c8 0x55972d279cf8
|   |     |-CXXOperatorCallExpr 0x55972d5d5810 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55972d5d57a0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55972d4dc978 0x55972d4dc598 0x55972d4dc1c8 0x55972d4dbde8 0x55972d4dba08 0x55972d4db638
|   |     | `-MemberExpr 0x55972d5d5770 <col:29> 'T *' lvalue ->_ptr 0x55972d5b0eb8
|   |     |   `-CXXThisExpr 0x55972d5d5760 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55972d5d5850 <col:35> 'T' lvalue ->_slot 0x55972d5b0f18
|   |       `-CXXThisExpr 0x55972d5d5840 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55972d5b0eb8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55972d5b0f18 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55972d5b0f80 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55972d5b1080 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55972d5b10d0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55972d5b1060 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55972d5b1040 <col:31> 'int' 48
|-FieldDecl 0x55972d5b10f8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55972d5b1158 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55972d5b11b8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55972d5b12f0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55972d5c24b0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55972d5c2510 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55972d5c25c0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55972d5c27e8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55972d5c26f0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55972d5c2938 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55972d5c28a8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55972d5c2c08 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55972d5c29f8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55972d5c2a78 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55972d5c2b20 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55972d5c2e18 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55972d5c2cd0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55972d5c2d48 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55972d5c2ee8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55972d5c3038 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55972d5c2fa0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55972d5c33c8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55972d5c30f8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55972d5c3178 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55972d5c3220 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55972d5c32d8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55972d5c35f0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55972d5c34a0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55972d5c3518 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55972d5c3908 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55972d5c36a0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55972d5c3868 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55972d5c3778 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class AnnoArg
         0 |   int size
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55972d5ef240 <../dummy_inc/click/args.hh:1294:1, line:1301:1> line:1294:7 referenced class AnnoArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55972d5ef358 <col:1, col:7> col:7 implicit referenced class AnnoArg
|-AccessSpecDecl 0x55972d5ef3e8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55972d5ef4f8 <line:1295:5, line:1297:5> line:1295:5 used AnnoArg 'void (int)'
| |-ParmVarDecl 0x55972d5ef428 <col:13, col:17> col:17 used s 'int'
| |-CXXCtorInitializer Field 0x55972d5ef848 'size' 'int'
| | `-ImplicitCastExpr 0x55972d5ef910 <line:1296:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55972d5ef8d0 <col:16> 'int' lvalue ParmVar 0x55972d5ef428 's' 'int'
| `-CompoundStmt 0x55972d5ef958 <col:19, line:1297:5>
|-CXXMethodDecl 0x55972d5ef750 <line:1298:5, col:83> col:10 parse 'bool (const String &, int &, const ArgContext &)'
| |-ParmVarDecl 0x55972d5ef5b8 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x55972d5ef638 <col:35, col:40> col:40 result 'int &'
| `-ParmVarDecl 0x55972d5ef6b0 <col:48, col:73> col:66 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55972d5ef8b0 <col:73> 'const ArgContext' lvalue Var 0x55972d5d58d8 'blank_args' 'const ArgContext'
|-AccessSpecDecl 0x55972d5ef808 <line:1299:3, col:10> col:3 private
|-FieldDecl 0x55972d5ef848 <line:1300:5, col:9> col:9 referenced size 'int'
|-CXXConstructorDecl 0x55972d6065d8 <line:1294:7> col:7 implicit constexpr AnnoArg 'void (const AnnoArg &)' inline default trivial noexcept-unevaluated 0x55972d6065d8
| `-ParmVarDecl 0x55972d6066e8 <col:7> col:7 'const AnnoArg &'
|-CXXConstructorDecl 0x55972d606788 <col:7> col:7 implicit used constexpr AnnoArg 'void (AnnoArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55972d606898 <col:7> col:7 used 'AnnoArg &&'
| |-CXXCtorInitializer Field 0x55972d5ef848 'size' 'int'
| | `-ImplicitCastExpr 0x55972d6070b8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55972d607070 <col:7> 'int' xvalue .size 0x55972d5ef848
| |     `-CXXStaticCastExpr 0x55972d607040 <col:7> 'AnnoArg' xvalue static_cast<class AnnoArg &&> <NoOp>
| |       `-DeclRefExpr 0x55972d607010 <col:7> 'AnnoArg' lvalue ParmVar 0x55972d606898 '' 'AnnoArg &&'
| `-CompoundStmt 0x55972d607100 <col:7>
`-CXXDestructorDecl 0x55972d606938 <col:7> col:7 implicit referenced ~AnnoArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.AnnoArg = type { i32 }
  NonVirtualBaseLLVMType:%class.AnnoArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55972d2d86f0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55972d2d8808 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55972d2d8898 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55972d2d8968 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55972d2d8a50 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55972d2d8c68 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55972d2d8b10 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55972d2d8e18 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55972d2d8d20 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55972d2d8f60 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55972d2d8ed0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55972d2d90a8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55972d2d9018 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55972d2d91f0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55972d2d9160 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55972d2d92b8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55972d2d9400 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55972d2d9370 <col:28> col:31 'int'
|-CXXMethodDecl 0x55972d2d94c8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55972d2d9610 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55972d2d9580 <col:28> col:31 'int'
|-CXXMethodDecl 0x55972d2d9788 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55972d2d96c8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55972d2d98d0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55972d2d9840 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55972d2d9998 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55972d2d9b58 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55972d2d9a48 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55972d2d9ac0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55972d2d9da8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55972d2d9c18 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55972d2d9c90 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55972d2d9e58 <col:86> "" ""
|-CXXMethodDecl 0x55972d2da0c8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55972d2d9f38 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55972d2d9fb0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55972d2da278 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55972d2da188 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55972d2da428 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55972d2da330 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55972d2da6f8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55972d2da4e0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55972d2da558 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55972d2da5d0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55972d2da9d8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55972d2da7c0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55972d2da838 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55972d2da8b0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55972d2daa90 <col:115> "" ""
|-AccessSpecDecl 0x55972d2dab00 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55972d2dab38 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55972d2dc050 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55972d2dc050
| `-ParmVarDecl 0x55972d2dc158 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55972d2dc1f8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55972d2dc1f8
| `-ParmVarDecl 0x55972d2dc308 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55972d311938 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55972d503730 <col:7>
|-CXXConstructorDecl 0x55972d311a10 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55972d311a10
| `-ParmVarDecl 0x55972d311b28 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55972d311b98 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55972d311b98
| `-ParmVarDecl 0x55972d311ca8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55972d506130 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55972d4f22d8 prev 0x55972d4e74e0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55972d4f23d0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55972d4f24c0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55972d4f25e8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55972d4f2768 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55972d4f28e8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55972d4f2a68 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55972d503898 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55972d504108 <col:11>
|-CXXDestructorDecl 0x55972d503970 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55972d503aa8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55972d503aa8
| `-ParmVarDecl 0x55972d503bb8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55972d503c58 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55972d503c58
| `-ParmVarDecl 0x55972d503d68 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55972d506b28 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55972d506c38 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55972d506eb8 <col:11>
|   `-ReturnStmt 0x55972d506ea8 <col:11>
|     `-UnaryOperator 0x55972d506e90 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55972d506e80 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55972d506ca8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55972d506ca8
  `-ParmVarDecl 0x55972d506db8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55972d4f2ad0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55972d4f2be8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55972d4f2c88 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55972d4f2cf0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55972d4f2d58 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55972d4f2dc0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55972d4f2e20 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55972d4f2ee0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55972d4f2f40 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55972d4f2fa0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55972d5037a8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55972d4f2c88 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55972d504118 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55972d504170 <col:12>
|-CXXConstructorDecl 0x55972d503dd8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55972d503dd8
| `-ParmVarDecl 0x55972d503ee8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55972d503f88 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55972d503f88
| `-ParmVarDecl 0x55972d504098 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55972d506210 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55972d4e0bf0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55972d4e0d08 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55972d4e0d98 <col:16, col:22> col:16 public
|-EnumDecl 0x55972d4e0dc0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55972d4e0ec0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55972d4e0fa0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d4e0ea0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55972d4e0e80 <col:21> 'int' 28
| `-EnumConstantDecl 0x55972d4e0f50 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55972d4e0fb8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55972d4e0f30 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55972d4e0f10 <col:22> 'int' 64
|-CXXMethodDecl 0x55972d4e12f8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55972d4e0fe0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55972d4e1060 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55972d4e10d8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55972d4e1150 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55972d4e13b8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55972d4e15b8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55972d4e1430 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55972d4e14a8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55972d4e1668 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55972d4e17c8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55972d4e16d8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55972d4e1870 <col:72> warn_unused_result ""
|-TypedefDecl 0x55972d4e1bd0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55972d4e1b60 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55972d4e1b00 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55972d4e1ac0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55972cfb8310 'void'
|       |-PointerType 0x55972d260f90 'unsigned char *'
|       | `-BuiltinType 0x55972cfb8410 'unsigned char'
|       |-TypedefType 0x55972d05d560 'size_t' sugar
|       | |-Typedef 0x55972d028af0 'size_t'
|       | `-BuiltinType 0x55972cfb8470 'unsigned long'
|       `-PointerType 0x55972cfb8b10 'void *'
|         `-BuiltinType 0x55972cfb8310 'void'
|-CXXMethodDecl 0x55972d4e2048 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55972d4e1c40 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55972d4e1cb8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55972d4e1d50 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55972d4e1dd0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55972d4fc740 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55972d4fc728 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55972d4fc6f0 <col:58> 'int' 0
| |-ParmVarDecl 0x55972d4e1e50 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55972d4fc768 <col:76> 'int' 0
| |-ParmVarDecl 0x55972d4e1ed0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55972d4fc788 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55972d4e2118 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55972d4e2198 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55972d4e2258 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55972d4e22f8 <col:20>
| `-OptimizeNoneAttr 0x55972d4e2350 <col:30>
|-CXXMethodDecl 0x55972d4e23c8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55972d4e2468 <col:20>
| `-OptimizeNoneAttr 0x55972d4e24c0 <col:30>
|-CXXMethodDecl 0x55972d4e2538 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55972d4e25d8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55972d4e2688 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55972d4e2728 <col:20>
| |-OptimizeNoneAttr 0x55972d4e2780 <col:30>
| `-WarnUnusedResultAttr 0x55972d4e27a8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55972d4e2800 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55972d4e28a0 <col:20>
| `-OptimizeNoneAttr 0x55972d4e28f8 <col:30>
|-CXXMethodDecl 0x55972d4e2948 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55972d4e29e8 <col:20>
| `-OptimizeNoneAttr 0x55972d4e2a40 <col:30>
|-CXXMethodDecl 0x55972d4e2a88 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55972d4e2b28 <col:20>
| `-OptimizeNoneAttr 0x55972d4e2b80 <col:30>
|-CXXMethodDecl 0x55972d4e2bc8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55972d4e2c88 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55972d4e2d50 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55972d4e2e18 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55972d4e2ed8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55972d4e2ff8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55972d4fc850 <col:54, line:99:5>
|   `-ReturnStmt 0x55972d4fc840 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55972d4fc828 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55972d4fc7f8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55972d4f32d8
|         `-CXXThisExpr 0x55972d4fc7e8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55972d4e3198 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55972d4e30a8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55972d4fc900 <col:67, line:103:5>
|   `-BinaryOperator 0x55972d4fc8e0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55972d4fc878 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55972d4f32d8
|     | `-CXXThisExpr 0x55972d4fc868 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55972d4fc8c8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55972d4fc8a8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55972d4e30a8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55972d4e3290 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55972d4fc980 <col:33, line:107:5>
|   `-ReturnStmt 0x55972d4fc970 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55972d4fc958 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55972d4fc928 <col:16> 'void *' lvalue ->_destructor_argument 0x55972d4f3340
|         `-CXXThisExpr 0x55972d4fc918 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55972d4e3350 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55972d4fcfb0 <col:25, line:113:5>
|   |-ParenExpr 0x55972d4fccf8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55972d4fccc8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55972d4fca38 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55972d4fca10 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55972d4fc9d8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55972d4fc9a8 <col:24> '<bound member function type>' ->shared 0x55972d4e23c8
|   |   |       `-ImplicitCastExpr 0x55972d4fc9f8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55972d4fc998 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55972d4fca98 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55972d4fca78 <col:42> 'int' 0
|   |   `-CallExpr 0x55972d4fcc28 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55972d4fcc10 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55972d4fcbf0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55972d054320 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55972d4fcc68 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55972d4fcb08 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55972d4fcc80 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55972d4fcb30 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55972d4fcc98 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55972d4fcb68 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55972d4fccb0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55972d4fcbd8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55972d4fcbc0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55972d4fcb88 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55972d4fcef8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55972d4fcd28 <col:2> 'unsigned char *' lvalue ->_head 0x55972d4f30e0
|   | | `-CXXThisExpr 0x55972d4fcd18 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55972d4fcee0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55972d4fcec0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55972d4fcd68 <col:10> 'unsigned char *' lvalue ->_data 0x55972d4f3148
|   |     | `-CXXThisExpr 0x55972d4fcd58 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55972d4fcea8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55972d4fce88 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55972d4fcda8 <col:18> 'unsigned char *' lvalue ->_tail 0x55972d4f31b0
|   |         | `-CXXThisExpr 0x55972d4fcd98 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55972d4fce70 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55972d4fce50 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55972d4fcde8 <col:26> 'unsigned char *' lvalue ->_end 0x55972d4f3218
|   |             | `-CXXThisExpr 0x55972d4fcdd8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55972d4fce38 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55972d4fce18 <col:33> 'int' 0
|   `-BinaryOperator 0x55972d4fcf90 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55972d4fcf28 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55972d4f32d8
|     | `-CXXThisExpr 0x55972d4fcf18 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55972d4fcf78 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55972d4fcf58 <col:16> 'int' 0
|-CXXMethodDecl 0x55972d4e3490 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55972d4e3400 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55972d4e3538 <col:20>
| |-OptimizeNoneAttr 0x55972d4e3590 <col:30>
| `-WarnUnusedResultAttr 0x55972d4e35b8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55972d4e3688 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55972d4e35f8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55972d4e3730 <col:20>
| |-OptimizeNoneAttr 0x55972d4e3788 <col:30>
| `-WarnUnusedResultAttr 0x55972d4e37b0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55972d4e38e8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55972d4e37f0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55972d4e3990 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55972d4e3a90 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55972d4e3a00 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55972d4e3b38 <col:20>
| `-OptimizeNoneAttr 0x55972d4e3b90 <col:30>
|-CXXMethodDecl 0x55972d4e3c58 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55972d4e3bc8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55972d4e3d00 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55972d4e3e00 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55972d4e3d70 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55972d4e3ea8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55972d4e3fa8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55972d4e3f18 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55972d4e4050 <col:20>
| `-OptimizeNoneAttr 0x55972d4e40a8 <col:30>
|-CXXMethodDecl 0x55972d4e4238 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55972d4e40e8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55972d4e4160 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55972d4fc7a8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55972d4e42e8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55972d4e44e8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55972d4e4360 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55972d4e43d8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55972d4e46f8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55972d4e45a8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55972d4e4620 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55972d4e4908 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55972d4e47b8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55972d4e4838 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55972d4fc7b8 <col:39> 'int' 0
|-CXXMethodDecl 0x55972d4e49d8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55972d4e4aa0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55972d4e4b68 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55972d4e4c28 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55972d4e4cf0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55972d4e4e38 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55972d4e4da8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55972d4e5008 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55972d4e4ef8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55972d4e4f70 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55972d4e50d8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55972d4e5198 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55972d4e5238 <col:20>
| `-OptimizeNoneAttr 0x55972d4e5290 <col:30>
|-CXXMethodDecl 0x55972d4e52e0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55972d4e5380 <col:20>
| `-OptimizeNoneAttr 0x55972d4e53d8 <col:30>
|-CXXMethodDecl 0x55972d4e5428 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55972d4e54e8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55972d4e55b0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55972d4e5650 <col:20>
| `-OptimizeNoneAttr 0x55972d4e56a8 <col:30>
|-CXXMethodDecl 0x55972d4e57f8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55972d4e56e8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55972d4e5760 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55972d4e5948 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55972d4e58b8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55972d4e5a20 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55972d4e5ae0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55972d4e5b80 <col:20>
| `-OptimizeNoneAttr 0x55972d4e5bd8 <col:30>
|-CXXMethodDecl 0x55972d4e5c28 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55972d4e5cc8 <col:20>
| `-OptimizeNoneAttr 0x55972d4e5d20 <col:30>
|-CXXMethodDecl 0x55972d4e5d70 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55972d4e5e38 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55972d4e5ed8 <col:20>
| `-OptimizeNoneAttr 0x55972d4e5f30 <col:30>
|-CXXMethodDecl 0x55972d4e5f78 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55972d4e6098 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55972d4e6208 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55972d4e6148 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55972d4e62f8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55972d4e6398 <col:20>
| `-OptimizeNoneAttr 0x55972d4e63f0 <col:30>
|-CXXMethodDecl 0x55972d4e6440 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55972d4e6500 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55972d4e6738 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55972d4e65b0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55972d4e6628 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55972d4e67e8 <col:20>
| `-OptimizeNoneAttr 0x55972d4e6840 <col:30>
|-CXXMethodDecl 0x55972d4e68e8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55972d4e6988 <col:20>
| `-OptimizeNoneAttr 0x55972d4e69e0 <col:30>
|-CXXMethodDecl 0x55972d4e6a30 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55972d4e6ad0 <col:20>
| `-OptimizeNoneAttr 0x55972d4e6b28 <col:30>
|-CXXMethodDecl 0x55972d4e6b70 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55972d4e6c10 <col:20>
| `-OptimizeNoneAttr 0x55972d4e6c68 <col:30>
|-CXXMethodDecl 0x55972d4e6d68 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55972d4e6ca0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55972d4e6e10 <col:20>
| `-OptimizeNoneAttr 0x55972d4e6e68 <col:30>
|-CXXMethodDecl 0x55972d4e7028 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55972d4e6ea0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55972d4e6f18 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55972d4e70d8 <col:20>
| `-OptimizeNoneAttr 0x55972d4e7130 <col:30>
|-CXXMethodDecl 0x55972d4e71d8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55972d4e72f8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55972d4e7418 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55972d4e74b8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55972d4e74e0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55972d4e7608 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55972d4e76a8 <col:20>
| `-OptimizeNoneAttr 0x55972d4e7700 <col:30>
|-CXXMethodDecl 0x55972d4e77a8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55972d4e7848 <col:20>
| `-OptimizeNoneAttr 0x55972d4e78a0 <col:30>
|-AccessSpecDecl 0x55972d4e78c8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55972d4e78f0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55972d4e79f0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55972d4e7a40 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55972d4e79d0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55972d4e79b0 <col:14> 'int' 48
|-CXXMethodDecl 0x55972d4e7aa8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55972d4e7b48 <col:20>
| `-OptimizeNoneAttr 0x55972d4e7ba0 <col:30>
|-CXXMethodDecl 0x55972d4e7c18 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55972d4e7cb8 <col:20>
| `-OptimizeNoneAttr 0x55972d4e7d10 <col:30>
|-CXXMethodDecl 0x55972d4e7dd8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55972d4e7d48 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55972d4e7f78 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55972d4e8118 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55972d4e8028 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55972d4e81c0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55972d4e82c0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55972d4e8670 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d4e82a0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55972d4e8280 <col:9> 'int' 0
| |-EnumConstantDecl 0x55972d4e8350 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55972d4e8688 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d4e8330 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55972d4e8310 <col:14> 'int' 1
| |-EnumConstantDecl 0x55972d4e83e0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55972d4e86a0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d4e83c0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55972d4e83a0 <col:14> 'int' 2
| |-EnumConstantDecl 0x55972d4e8470 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55972d4e86b8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d4e8450 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55972d4e8430 <col:14> 'int' 3
| |-EnumConstantDecl 0x55972d4e8500 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55972d4e86d0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d4e84e0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55972d4e84c0 <col:13> 'int' 4
| |-EnumConstantDecl 0x55972d4e8590 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55972d4e86e8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d4e8570 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55972d4e8550 <col:13> 'int' 5
| `-EnumConstantDecl 0x55972d4e8620 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55972d4e8700 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55972d4e8600 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55972d4e85e0 <col:14> 'int' 6
|-CXXMethodDecl 0x55972d4e8768 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55972d4e8808 <col:20>
| `-OptimizeNoneAttr 0x55972d4e8860 <col:30>
|-CXXMethodDecl 0x55972d4e8958 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55972d4e8898 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55972d4e8a00 <col:20>
| `-OptimizeNoneAttr 0x55972d4e8a58 <col:30>
|-CXXMethodDecl 0x55972d4e8ac8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55972d4e8bf0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55972d4e8d68 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55972d4e8ca0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55972d4e8e30 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55972d4e8ef8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55972d4e9038 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55972d4e8fa8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55972d4e90e0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55972d4e91e0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55972d4e93e0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d4e91c0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55972d4e91a0 <col:23> 'int' 0
| |-EnumConstantDecl 0x55972d4e9270 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55972d4e93f8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d4e9250 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55972d4e9230 <col:45> 'int' 4
| |-EnumConstantDecl 0x55972d4e9300 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55972d4e9410 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d4e92e0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55972d4e92c0 <col:24> 'int' 0
| `-EnumConstantDecl 0x55972d4e9390 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55972d4e9428 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55972d4e9370 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55972d4e9350 <col:47> 'int' 16
|-CXXMethodDecl 0x55972d4e9488 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55972d4e95f8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55972d4e9538 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55972d4e96a0 <col:20>
| `-OptimizeNoneAttr 0x55972d4e96f8 <col:30>
|-CXXMethodDecl 0x55972d4e9748 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55972d4fd0d0 <col:18, col:36>
|   `-ReturnStmt 0x55972d4fd0c0 <col:20, col:33>
|     `-ImplicitCastExpr 0x55972d4fd0a8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55972d4fd088 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55972d4fd058 <col:27> '<bound member function type>' ->xanno 0x55972d4e77a8
|           `-CXXThisExpr 0x55972d4fd048 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55972d4e9840 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55972d4fd1e0 <col:30, col:48>
|   `-ReturnStmt 0x55972d4fd1d0 <col:32, col:45>
|     `-ImplicitCastExpr 0x55972d4fd1b8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55972d4fd198 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55972d4fd168 <col:39> '<bound member function type>' ->xanno 0x55972d4e7608
|           `-CXXThisExpr 0x55972d4fd158 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55972d4e9928 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55972d4fd378 <col:24, col:50>
|   `-ReturnStmt 0x55972d4fd368 <col:26, col:47>
|     `-UnaryOperator 0x55972d4fd350 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55972d4fd330 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55972d4fd318 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55972d4fd2c8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55972d4f25e8
|         |   `-CXXMemberCallExpr 0x55972d4fd2a8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55972d4fd278 <col:34> '<bound member function type>' ->xanno 0x55972d4e77a8
|         |       `-CXXThisExpr 0x55972d4fd268 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55972d4fd2f8 <col:46> 'int' 0
|-CXXMethodDecl 0x55972d4e9a30 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55972d4fd548 <col:36, col:62>
|   `-ReturnStmt 0x55972d4fd538 <col:38, col:59>
|     `-UnaryOperator 0x55972d4fd520 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55972d4fd500 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55972d4fd4e8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55972d4fd460 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55972d4f25e8
|         |   `-CXXMemberCallExpr 0x55972d4fd440 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55972d4fd410 <col:46> '<bound member function type>' ->xanno 0x55972d4e7608
|         |       `-CXXThisExpr 0x55972d4fd400 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55972d4fd490 <col:58> 'int' 0
|-CXXMethodDecl 0x55972d4e9b48 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55972d4fd6e0 <col:26, col:53>
|   `-ReturnStmt 0x55972d4fd6d0 <col:28, col:50>
|     `-UnaryOperator 0x55972d4fd6b8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55972d4fd698 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55972d4fd680 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55972d4fd630 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55972d4f28e8
|         |   `-CXXMemberCallExpr 0x55972d4fd610 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55972d4fd5e0 <col:36> '<bound member function type>' ->xanno 0x55972d4e77a8
|         |       `-CXXThisExpr 0x55972d4fd5d0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55972d4fd660 <col:49> 'int' 0
|-CXXMethodDecl 0x55972d4e9c68 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55972d4fd8b8 <col:38, col:65>
|   `-ReturnStmt 0x55972d4fd8a8 <col:40, col:62>
|     `-UnaryOperator 0x55972d4fd890 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55972d4fd870 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55972d4fd858 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55972d4fd7c8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55972d4f28e8
|         |   `-CXXMemberCallExpr 0x55972d4fd7a8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55972d4fd778 <col:48> '<bound member function type>' ->xanno 0x55972d4e7608
|         |       `-CXXThisExpr 0x55972d4fd768 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55972d4fd7f8 <col:61> 'int' 0
|-CXXMethodDecl 0x55972d4e9e18 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55972d4e9d20 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55972d4fdf88 <col:34, line:463:5>
|   |-ParenExpr 0x55972d4fddd0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55972d4fdda0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55972d4fda08 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55972d4fd9d8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55972d4fd928 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55972d4fd910 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55972d4fd8d0 <col:23> 'int' lvalue ParmVar 0x55972d4e9d20 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55972d4fd8f0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55972d4fd9b8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55972d4fd988 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55972d4fd948 <col:33> 'int' lvalue ParmVar 0x55972d4e9d20 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55972d4fd9a0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55972d4fd968 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55972d4e79f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55972d4fda68 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55972d4fda48 <col:56> 'int' 0
|   |   `-CallExpr 0x55972d4fdd00 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55972d4fdce8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55972d4fdcc8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55972d054320 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55972d4fdd40 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55972d4fdb58 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55972d4fdd58 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55972d4fdb88 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55972d4fdd70 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55972d4fdbc0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55972d4fdd88 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55972d4fdcb0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55972d4fdc98 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55972d4fdc58 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55972d4fdf78 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55972d4fdf60 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55972d4fdf40 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55972d4fdf10 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55972d4fdec0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55972d4f25e8
|         |   `-CXXMemberCallExpr 0x55972d4fdea0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55972d4fde70 <col:9> '<bound member function type>' ->xanno 0x55972d4e7608
|         |       `-CXXThisExpr 0x55972d4fde60 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55972d4fdf28 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55972d4fdef0 <col:21> 'int' lvalue ParmVar 0x55972d4e9d20 'i' 'int'
|-CXXMethodDecl 0x55972d4ea068 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55972d4e9ed8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55972d4e9f50 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55972d4fe618 <col:40, line:472:5>
|   |-ParenExpr 0x55972d4fe430 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55972d4fe400 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55972d4fe0e0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55972d4fe0b0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55972d4fe000 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55972d4fdfe8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55972d4fdfa8 <col:23> 'int' lvalue ParmVar 0x55972d4e9ed8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55972d4fdfc8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55972d4fe090 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55972d4fe060 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55972d4fe020 <col:33> 'int' lvalue ParmVar 0x55972d4e9ed8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55972d4fe078 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55972d4fe040 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55972d4e79f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55972d4fe140 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55972d4fe120 <col:56> 'int' 0
|   |   `-CallExpr 0x55972d4fe360 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55972d4fe348 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55972d4fe328 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55972d054320 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55972d4fe3a0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55972d4fe1b0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55972d4fe3b8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55972d4fe1e0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55972d4fe3d0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55972d4fe218 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55972d4fe3e8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55972d4fe310 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55972d4fe2f8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55972d4fe2b8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55972d4fe5f8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55972d4fe5a0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55972d4fe570 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55972d4fe520 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55972d4f25e8
|     | |   `-CXXMemberCallExpr 0x55972d4fe500 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55972d4fe4d0 <col:2> '<bound member function type>' ->xanno 0x55972d4e77a8
|     | |       `-CXXThisExpr 0x55972d4fe4c0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55972d4fe588 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55972d4fe550 <col:14> 'int' lvalue ParmVar 0x55972d4e9ed8 'i' 'int'
|     `-ImplicitCastExpr 0x55972d4fe5e0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55972d4fe5c0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55972d4e9f50 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55972d4ea228 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55972d4ea130 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55972d4fed98 <col:36, line:485:5>
|   |-ParenExpr 0x55972d4feb00 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55972d4fead0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55972d4fe7b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55972d4fe780 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55972d4fe690 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55972d4fe678 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55972d4fe638 <col:23> 'int' lvalue ParmVar 0x55972d4ea130 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55972d4fe658 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55972d4fe760 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55972d4fe748 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55972d4fe6b0 <col:33> 'int' lvalue ParmVar 0x55972d4ea130 'i' 'int'
|   |   |     `-BinaryOperator 0x55972d4fe728 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55972d4fe710 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55972d4fe6d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55972d4e79f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55972d4fe6f0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55972d4fe810 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55972d4fe7f0 <col:60> 'int' 0
|   |   `-CallExpr 0x55972d4fea30 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55972d4fea18 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55972d4fe9f8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55972d054320 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55972d4fea70 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55972d4fe880 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55972d4fea88 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55972d4fe8b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55972d4feaa0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55972d4fe8f0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55972d4feab8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55972d4fe9e0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55972d4fe9c8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55972d4fe988 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55972d4fed88 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55972d4fed70 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55972d4fed58 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55972d4fed28 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55972d4fecc8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55972d4fec98 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55972d4fec10 <col:61, col:70> 'char const[48]' lvalue ->c 0x55972d4f24c0
|             |   `-CXXMemberCallExpr 0x55972d4febf0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55972d4febc0 <col:61> '<bound member function type>' ->xanno 0x55972d4e7608
|             |       `-CXXThisExpr 0x55972d4febb0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55972d4fecb0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55972d4fec40 <col:74> 'int' lvalue ParmVar 0x55972d4ea130 'i' 'int'
|-CXXMethodDecl 0x55972d4ea478 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55972d4ea2e8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55972d4ea360 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55972d4ff4e8 <col:42, line:500:5>
|   |-ParenExpr 0x55972d4ff280 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55972d4ff250 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55972d4fef30 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55972d4fef00 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55972d4fee10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55972d4fedf8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55972d4fedb8 <col:23> 'int' lvalue ParmVar 0x55972d4ea2e8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55972d4fedd8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55972d4feee0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55972d4feec8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55972d4fee30 <col:33> 'int' lvalue ParmVar 0x55972d4ea2e8 'i' 'int'
|   |   |     `-BinaryOperator 0x55972d4feea8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55972d4fee90 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55972d4fee50 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55972d4e79f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55972d4fee70 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55972d4fef90 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55972d4fef70 <col:60> 'int' 0
|   |   `-CallExpr 0x55972d4ff1b0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55972d4ff198 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55972d4ff178 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55972d054320 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55972d4ff1f0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55972d4ff000 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55972d4ff208 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55972d4ff038 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55972d4ff220 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55972d4ff070 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55972d4ff238 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55972d4ff160 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55972d4ff148 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55972d4ff108 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55972d4ff4c8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55972d4ff478 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55972d4ff448 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55972d4ff3f0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55972d4ff3c0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55972d4ff370 <col:48, col:57> 'char [48]' lvalue ->c 0x55972d4f24c0
|     |     |   `-CXXMemberCallExpr 0x55972d4ff350 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55972d4ff320 <col:48> '<bound member function type>' ->xanno 0x55972d4e77a8
|     |     |       `-CXXThisExpr 0x55972d4ff310 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55972d4ff3d8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55972d4ff3a0 <col:61> 'int' lvalue ParmVar 0x55972d4ea2e8 'i' 'int'
|     `-ImplicitCastExpr 0x55972d4ff4b0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55972d4ff490 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55972d4ea360 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55972d4ea638 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55972d4ea540 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55972d4ffc48 <col:35, line:513:5>
|   |-ParenExpr 0x55972d4ff958 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55972d4ff928 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55972d4ff680 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55972d4ff650 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55972d4ff560 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55972d4ff548 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55972d4ff508 <col:23> 'int' lvalue ParmVar 0x55972d4ea540 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55972d4ff528 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55972d4ff630 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55972d4ff618 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55972d4ff580 <col:33> 'int' lvalue ParmVar 0x55972d4ea540 'i' 'int'
|   |   |     `-BinaryOperator 0x55972d4ff5f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55972d4ff5e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55972d4ff5a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55972d4e79f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55972d4ff5c0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55972d4ff6e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55972d4ff6c0 <col:60> 'int' 0
|   |   `-CallExpr 0x55972d4ff888 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55972d4ff870 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55972d4ff850 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55972d054320 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55972d4ff8c8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55972d4ff750 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55972d4ff8e0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55972d4ff788 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55972d4ff8f8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55972d4ff7c0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55972d4ff910 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55972d4ff838 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55972d4ff820 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55972d4ff7e0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55972d4ffc38 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55972d4ffc20 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55972d4ffc08 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55972d4ffbd8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55972d4ffb50 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55972d4ffb20 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55972d4ffad0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55972d4f24c0
|             |   `-CXXMemberCallExpr 0x55972d4ffab0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55972d4ffa80 <col:60> '<bound member function type>' ->xanno 0x55972d4e7608
|             |       `-CXXThisExpr 0x55972d4ffa70 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55972d4ffb38 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55972d4ffb00 <col:73> 'int' lvalue ParmVar 0x55972d4ea540 'i' 'int'
|-CXXMethodDecl 0x55972d4ea888 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55972d4ea6f8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55972d4ea770 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55972d500368 <col:41, line:528:5>
|   |-ParenExpr 0x55972d5000f0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55972d5000c0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55972d4ffde0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55972d4ffdb0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55972d4ffcc0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55972d4ffca8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55972d4ffc68 <col:23> 'int' lvalue ParmVar 0x55972d4ea6f8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55972d4ffc88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55972d4ffd90 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55972d4ffd78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55972d4ffce0 <col:33> 'int' lvalue ParmVar 0x55972d4ea6f8 'i' 'int'
|   |   |     `-BinaryOperator 0x55972d4ffd58 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55972d4ffd40 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55972d4ffd00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55972d4e79f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55972d4ffd20 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55972d4ffe40 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55972d4ffe20 <col:60> 'int' 0
|   |   `-CallExpr 0x55972d500020 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55972d500008 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55972d4fffe8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55972d054320 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55972d500060 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55972d4ffeb0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55972d500078 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55972d4ffee8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55972d500090 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55972d4fff20 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55972d5000a8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55972d4fffd0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55972d4fffb8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55972d4fff78 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55972d500348 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55972d5002f8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55972d5002c8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55972d500270 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55972d500230 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55972d5001e0 <col:47, col:56> 'char [48]' lvalue ->c 0x55972d4f24c0
|     |     |   `-CXXMemberCallExpr 0x55972d5001c0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55972d500190 <col:47> '<bound member function type>' ->xanno 0x55972d4e77a8
|     |     |       `-CXXThisExpr 0x55972d500180 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55972d500248 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55972d500210 <col:60> 'int' lvalue ParmVar 0x55972d4ea6f8 'i' 'int'
|     `-ImplicitCastExpr 0x55972d500330 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55972d500310 <col:65> 'int16_t':'short' lvalue ParmVar 0x55972d4ea770 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55972d4eaa48 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55972d4ea950 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55972d500a38 <col:36, line:541:5>
|   |-ParenExpr 0x55972d5007d8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55972d5007a8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55972d500500 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55972d5004d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55972d5003e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55972d5003c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55972d500388 <col:23> 'int' lvalue ParmVar 0x55972d4ea950 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55972d5003a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55972d5004b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55972d500498 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55972d500400 <col:33> 'int' lvalue ParmVar 0x55972d4ea950 'i' 'int'
|   |   |     `-BinaryOperator 0x55972d500478 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55972d500460 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55972d500420 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55972d4e79f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55972d500440 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55972d500560 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55972d500540 <col:60> 'int' 0
|   |   `-CallExpr 0x55972d500708 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55972d5006f0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55972d5006d0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55972d054320 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55972d500748 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55972d5005d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55972d500760 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55972d500608 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55972d500778 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55972d500640 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55972d500790 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55972d5006b8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55972d5006a0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55972d500660 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55972d500a28 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55972d500a10 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55972d5009f8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55972d5009c8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55972d500970 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55972d500940 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55972d5008f0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55972d4f24c0
|             |   `-CXXMemberCallExpr 0x55972d5008d0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55972d5008a0 <col:61> '<bound member function type>' ->xanno 0x55972d4e7608
|             |       `-CXXThisExpr 0x55972d500890 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55972d500958 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55972d500920 <col:74> 'int' lvalue ParmVar 0x55972d4ea950 'i' 'int'
|-CXXMethodDecl 0x55972d4eac18 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55972d4eab08 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55972d4eab80 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55972d4eacc8 <col:20>
| `-OptimizeNoneAttr 0x55972d4ead20 <col:30>
|-CXXMethodDecl 0x55972d4eae58 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55972d4ead60 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55972d501108 <col:35, line:562:5>
|   |-ParenExpr 0x55972d500ea8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55972d500e78 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55972d500bd0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55972d500ba0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55972d500ab0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55972d500a98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55972d500a58 <col:23> 'int' lvalue ParmVar 0x55972d4ead60 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55972d500a78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55972d500b80 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55972d500b68 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55972d500ad0 <col:33> 'int' lvalue ParmVar 0x55972d4ead60 'i' 'int'
|   |   |     `-BinaryOperator 0x55972d500b48 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55972d500b30 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55972d500af0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55972d4e79f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55972d500b10 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55972d500c30 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55972d500c10 <col:60> 'int' 0
|   |   `-CallExpr 0x55972d500dd8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55972d500dc0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55972d500da0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55972d054320 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55972d500e18 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55972d500ca0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55972d500e30 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55972d500cd8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55972d500e48 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55972d500d10 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55972d500e60 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55972d500d88 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55972d500d70 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55972d500d30 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55972d5010f8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55972d5010e0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55972d5010c8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55972d501098 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55972d501040 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55972d501010 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55972d500fc0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55972d4f24c0
|             |   `-CXXMemberCallExpr 0x55972d500fa0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55972d500f70 <col:60> '<bound member function type>' ->xanno 0x55972d4e7608
|             |       `-CXXThisExpr 0x55972d500f60 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55972d501028 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55972d500ff0 <col:73> 'int' lvalue ParmVar 0x55972d4ead60 'i' 'int'
|-CXXMethodDecl 0x55972d4eb068 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55972d4eaf18 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55972d4eaf90 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55972d5017e8 <col:41, line:577:5>
|   |-ParenExpr 0x55972d501578 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55972d501548 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55972d5012a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55972d501270 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55972d501180 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55972d501168 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55972d501128 <col:23> 'int' lvalue ParmVar 0x55972d4eaf18 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55972d501148 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55972d501250 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55972d501238 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55972d5011a0 <col:33> 'int' lvalue ParmVar 0x55972d4eaf18 'i' 'int'
|   |   |     `-BinaryOperator 0x55972d501218 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55972d501200 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55972d5011c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55972d4e79f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55972d5011e0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55972d501300 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55972d5012e0 <col:60> 'int' 0
|   |   `-CallExpr 0x55972d5014a8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55972d501490 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55972d501470 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55972d054320 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55972d5014e8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55972d501370 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55972d501500 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55972d5013a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55972d501518 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55972d5013e0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55972d501530 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55972d501458 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55972d501440 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55972d501400 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55972d5017c8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55972d501778 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55972d501748 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55972d5016e8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55972d5016b8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55972d501668 <col:47, col:56> 'char [48]' lvalue ->c 0x55972d4f24c0
|     |     |   `-CXXMemberCallExpr 0x55972d501648 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55972d501618 <col:47> '<bound member function type>' ->xanno 0x55972d4e77a8
|     |     |       `-CXXThisExpr 0x55972d501608 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55972d5016d0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55972d501698 <col:60> 'int' lvalue ParmVar 0x55972d4eaf18 'i' 'int'
|     `-ImplicitCastExpr 0x55972d5017b0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55972d501790 <col:65> 'int32_t':'int' lvalue ParmVar 0x55972d4eaf90 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55972d4eb228 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55972d4eb130 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55972d501f18 <col:36, line:591:5>
|   |-ParenExpr 0x55972d501c58 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55972d501c28 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55972d501980 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55972d501950 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55972d501860 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55972d501848 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55972d501808 <col:23> 'int' lvalue ParmVar 0x55972d4eb130 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55972d501828 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55972d501930 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55972d501918 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55972d501880 <col:33> 'int' lvalue ParmVar 0x55972d4eb130 'i' 'int'
|   |   |     `-BinaryOperator 0x55972d5018f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55972d5018e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55972d5018a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55972d4e79f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55972d5018c0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55972d5019e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55972d5019c0 <col:60> 'int' 0
|   |   `-CallExpr 0x55972d501b88 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55972d501b70 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55972d501b50 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55972d054320 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55972d501bc8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55972d501a50 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55972d501be0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55972d501a88 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55972d501bf8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55972d501ac0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55972d501c10 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55972d501b38 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55972d501b20 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55972d501ae0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55972d501f08 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55972d501ef0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55972d501ed8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55972d501ea8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55972d501e20 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55972d501df0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55972d501da0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55972d4f24c0
|             |   `-CXXMemberCallExpr 0x55972d501d80 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55972d501d50 <col:61> '<bound member function type>' ->xanno 0x55972d4e7608
|             |       `-CXXThisExpr 0x55972d501d40 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55972d501e08 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55972d501dd0 <col:74> 'int' lvalue ParmVar 0x55972d4eb130 'i' 'int'
|-CXXMethodDecl 0x55972d4eb478 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55972d4eb2e8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55972d4eb360 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55972d5025f8 <col:42, line:606:5>
|   |-ParenExpr 0x55972d502388 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55972d502358 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55972d5020b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55972d502080 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55972d501f90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55972d501f78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55972d501f38 <col:23> 'int' lvalue ParmVar 0x55972d4eb2e8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55972d501f58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55972d502060 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55972d502048 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55972d501fb0 <col:33> 'int' lvalue ParmVar 0x55972d4eb2e8 'i' 'int'
|   |   |     `-BinaryOperator 0x55972d502028 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55972d502010 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55972d501fd0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55972d4e79f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55972d501ff0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55972d502110 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55972d5020f0 <col:60> 'int' 0
|   |   `-CallExpr 0x55972d5022b8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55972d5022a0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55972d502280 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55972d054320 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55972d5022f8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55972d502180 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55972d502310 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55972d5021b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55972d502328 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55972d5021f0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55972d502340 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55972d502268 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55972d502250 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55972d502210 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55972d5025d8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55972d502588 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55972d502558 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55972d5024f8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55972d5024c8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55972d502478 <col:48, col:57> 'char [48]' lvalue ->c 0x55972d4f24c0
|     |     |   `-CXXMemberCallExpr 0x55972d502458 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55972d502428 <col:48> '<bound member function type>' ->xanno 0x55972d4e77a8
|     |     |       `-CXXThisExpr 0x55972d502418 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55972d5024e0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55972d5024a8 <col:61> 'int' lvalue ParmVar 0x55972d4eb2e8 'i' 'int'
|     `-ImplicitCastExpr 0x55972d5025c0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55972d5025a0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55972d4eb360 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55972d4eb610 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55972d4eb540 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55972d502e68 <col:33, line:620:5>
|   |-ParenExpr 0x55972d502be0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55972d502bb0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55972d502800 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55972d5027d0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55972d502670 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55972d502658 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55972d502618 <col:23> 'int' lvalue ParmVar 0x55972d4eb540 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55972d502638 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55972d5027b0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55972d502798 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55972d502690 <col:33> 'int' lvalue ParmVar 0x55972d4eb540 'i' 'int'
|   |   |     `-BinaryOperator 0x55972d502778 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55972d502760 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55972d5026b0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55972d4e79f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55972d502738 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55972d502720 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55972d5026e8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55972d502860 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55972d502840 <col:79> 'int' 0
|   |   `-CallExpr 0x55972d502b10 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55972d502af8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55972d502ad8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55972d054320 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55972d502b50 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55972d502948 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55972d502b68 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55972d502990 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55972d502b80 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55972d5029c8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55972d502b98 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55972d502ac0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55972d502aa8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55972d502a68 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55972d502e58 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55972d502e40 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55972d502e28 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55972d502df8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55972d502d70 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55972d502d40 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55972d502cf0 <col:67, col:76> 'char const[48]' lvalue ->c 0x55972d4f24c0
|             |   `-CXXMemberCallExpr 0x55972d502cd0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55972d502ca0 <col:67> '<bound member function type>' ->xanno 0x55972d4e7608
|             |       `-CXXThisExpr 0x55972d502c90 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55972d502d58 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55972d502d20 <col:80> 'int' lvalue ParmVar 0x55972d4eb540 'i' 'int'
|-CXXMethodDecl 0x55972d4eb828 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55972d4eb6d0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55972d4eb750 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55972d503690 <col:45, line:635:5>
|   |-ParenExpr 0x55972d5033d8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55972d5033a8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55972d503070 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55972d503040 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55972d502ee0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55972d502ec8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55972d502e88 <col:23> 'int' lvalue ParmVar 0x55972d4eb6d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55972d502ea8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55972d503020 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55972d503008 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55972d502f00 <col:33> 'int' lvalue ParmVar 0x55972d4eb6d0 'i' 'int'
|   |   |     `-BinaryOperator 0x55972d502fe8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55972d502fd0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55972d502f20 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55972d4e79f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55972d502fa8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55972d502f90 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55972d502f58 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55972d5030d0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55972d5030b0 <col:79> 'int' 0
|   |   `-CallExpr 0x55972d503308 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55972d5032f0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55972d5032d0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55972d054320 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55972d503348 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55972d503140 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55972d503360 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55972d503188 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55972d503378 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55972d5031c0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55972d503390 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55972d5032b8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55972d5032a0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55972d503258 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55972d503670 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55972d5035d8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55972d5035a8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55972d503548 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55972d503518 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55972d5034c8 <col:54, col:63> 'char [48]' lvalue ->c 0x55972d4f24c0
|     |     |   `-CXXMemberCallExpr 0x55972d5034a8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55972d503478 <col:54> '<bound member function type>' ->xanno 0x55972d4e77a8
|     |     |       `-CXXThisExpr 0x55972d503468 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55972d503530 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55972d5034f8 <col:67> 'int' lvalue ParmVar 0x55972d4eb6d0 'i' 'int'
|     `-CXXConstCastExpr 0x55972d503640 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55972d503628 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55972d5035f0 <col:91> 'const void *' lvalue ParmVar 0x55972d4eb750 'x' 'const void *'
|-CXXMethodDecl 0x55972d4eb8f8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55972d503718 <col:34, line:640:5>
|   `-ReturnStmt 0x55972d503708 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55972d5036f0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55972d5036c0 <col:16> 'Packet *' lvalue ->_data_packet 0x55972d4f3078
|         `-CXXThisExpr 0x55972d5036b0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55972d4eba38 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55972d4eb9a8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55972d4fc7d8 <col:46> 'bool' true
|-CXXMethodDecl 0x55972d4ebbb8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55972d4ebaf0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55972d4ebc60 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55972d4ec410 <line:660:22> "" ""
| |-EnumConstantDecl 0x55972d4ebd60 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55972d4ec480 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d4ebd40 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55972d4ebd20 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55972d4e0ec0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55972d4ebdf0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55972d4ec498 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d4ebdd0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55972d4ebdb0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55972d4e0f50 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55972d4ebe80 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55972d4ec4b0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d4ebe60 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55972d4ebe40 <col:21> 'int' 0
| |-EnumConstantDecl 0x55972d4ebf10 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55972d4ec4c8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d4ebef0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55972d4ebed0 <col:19> 'int' 16
| |-EnumConstantDecl 0x55972d4ebfa0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55972d4ec4e0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d4ebf80 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55972d4ebf60 <col:21> 'int' 16
| |-EnumConstantDecl 0x55972d4ec030 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55972d4ec4f8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d4ec010 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55972d4ebff0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55972d4ec0c0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55972d4ec510 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d4ec0a0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55972d4ec080 <col:19> 'int' EnumConstant 0x55972d4ebf10 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55972d4ec150 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55972d4ec528 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d4ec130 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55972d4ec110 <col:19> 'int' EnumConstant 0x55972d4ec030 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55972d4ec220 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55972d4ec540 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d4ec200 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55972d4ec1e0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55972d4ec1a0 <col:23> 'int' EnumConstant 0x55972d4ec150 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55972d4ec1c0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55972d4ec2f0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55972d4ec558 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55972d4ec2d0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55972d4ec2b0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55972d4ec270 <col:23> 'int' EnumConstant 0x55972d4ec150 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55972d4ec290 <col:40> 'int' 4
| `-EnumConstantDecl 0x55972d4ec3c0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55972d4ec570 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55972d4ec3a0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55972d4ec380 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55972d4ec340 <col:23> 'int' EnumConstant 0x55972d4ec150 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55972d4ec360 <col:40> 'int' 8
|-CXXMethodDecl 0x55972d4ec5b0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55972d4ec650 <col:68> "" ""
|-CXXMethodDecl 0x55972d4ec6e8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55972d4ec788 <col:45> "" ""
|-CXXMethodDecl 0x55972d4ec820 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55972d4ec8c0 <col:57> "" ""
|-CXXMethodDecl 0x55972d4ec958 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55972d4ec9f8 <col:45> "" ""
|-CXXMethodDecl 0x55972d4eca90 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55972d4ecb30 <col:57> "" ""
|-CXXMethodDecl 0x55972d4ecbc0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55972d4ecc60 <col:51> "" ""
|-CXXMethodDecl 0x55972d4eccf0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55972d4ecd90 <col:63> "" ""
|-CXXMethodDecl 0x55972d4ece20 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55972d4ecec0 <col:53> "" ""
|-CXXMethodDecl 0x55972d4ecf50 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55972d4ecff0 <col:65> "" ""
|-CXXMethodDecl 0x55972d4ed108 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55972d4ed078 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55972d4ed1b0 <col:61> "" ""
|-CXXMethodDecl 0x55972d4ed348 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55972d4ed238 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55972d4ed2b0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55972d4ed3f8 <col:67> "" ""
|-CXXMethodDecl 0x55972d4ed510 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55972d4ed480 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55972d4ed5b8 <col:63> "" ""
|-CXXMethodDecl 0x55972d4ed750 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55972d4ed640 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55972d4ed6b8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55972d4ed800 <col:69> "" ""
|-CXXMethodDecl 0x55972d4ed918 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55972d4ed888 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55972d4ed9c0 <col:63> "" ""
|-CXXMethodDecl 0x55972d4f0098 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55972d4eff88 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55972d4f0000 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55972d4f0148 <col:69> "" ""
|-CXXMethodDecl 0x55972d4f0260 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55972d4f01d0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55972d4f0308 <col:62> "" ""
|-CXXMethodDecl 0x55972d4f04a0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55972d4f0390 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55972d4f0408 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55972d4f0550 <col:68> "" ""
|-CXXMethodDecl 0x55972d4f0668 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55972d4f05d8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55972d4f0710 <col:63> "" ""
|-CXXMethodDecl 0x55972d4f08a8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55972d4f0798 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55972d4f0810 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55972d4f0958 <col:69> "" ""
|-CXXMethodDecl 0x55972d4f09e8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55972d4f0a88 <col:64> "" ""
|-CXXMethodDecl 0x55972d4f0b18 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55972d4f0bb8 <col:52> "" ""
|-CXXMethodDecl 0x55972d4f0c48 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55972d4f0ce8 <col:67> "" ""
|-CXXMethodDecl 0x55972d4f0d78 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55972d4f0e18 <col:55> "" ""
|-CXXMethodDecl 0x55972d4f0f30 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55972d4f0ea0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55972d4f0fd8 <col:58> "" ""
|-CXXMethodDecl 0x55972d4f1170 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55972d4f1060 <col:33> col:36 'int'
| |-ParmVarDecl 0x55972d4f10d8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55972d4f1220 <col:62> "" ""
|-CXXMethodDecl 0x55972d4f1338 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55972d4f12a8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55972d4f13e0 <col:58> "" ""
|-CXXMethodDecl 0x55972d4f1578 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55972d4f1468 <col:33> col:36 'int'
| |-ParmVarDecl 0x55972d4f14e0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55972d4f1628 <col:62> "" ""
|-CXXMethodDecl 0x55972d4f1740 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55972d4f16b0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55972d4f17e8 <col:60> "" ""
|-CXXMethodDecl 0x55972d4f1980 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55972d4f1870 <col:34> col:37 'int'
| |-ParmVarDecl 0x55972d4f18e8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55972d4f1a30 <col:64> "" ""
|-CXXMethodDecl 0x55972d4f1b48 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55972d4f1ab8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55972d4f1bf0 <col:58> "" ""
|-CXXMethodDecl 0x55972d4f1d88 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55972d4f1c78 <col:33> col:36 'int'
| |-ParmVarDecl 0x55972d4f1cf0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55972d4f1e38 <col:62> "" ""
|-CXXMethodDecl 0x55972d4f1f50 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55972d4f1ec0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55972d4f1ff8 <col:59> "" ""
|-CXXMethodDecl 0x55972d4f2190 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55972d4f2080 <col:33> col:36 'int'
| |-ParmVarDecl 0x55972d4f20f8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55972d4f2240 <col:63> "" ""
|-AccessSpecDecl 0x55972d4f22b0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55972d4f22d8 prev 0x55972d4e74e0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55972d4f23d0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55972d4f24c0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55972d4f25e8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55972d4f2768 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55972d4f28e8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55972d4f2a68 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55972d503898 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55972d504108 <col:11>
| |-CXXDestructorDecl 0x55972d503970 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55972d503aa8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55972d503aa8
| | `-ParmVarDecl 0x55972d503bb8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55972d503c58 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55972d503c58
| | `-ParmVarDecl 0x55972d503d68 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55972d506b28 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55972d506c38 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55972d506eb8 <col:11>
| |   `-ReturnStmt 0x55972d506ea8 <col:11>
| |     `-UnaryOperator 0x55972d506e90 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55972d506e80 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55972d506ca8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55972d506ca8
|   `-ParmVarDecl 0x55972d506db8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55972d4f2ad0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55972d4f2be8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55972d4f2c88 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55972d4f2cf0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55972d4f2d58 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55972d4f2dc0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55972d4f2e20 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55972d4f2ee0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55972d4f2f40 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55972d4f2fa0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55972d5037a8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55972d4f2c88 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55972d504118 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55972d504170 <col:12>
| |-CXXConstructorDecl 0x55972d503dd8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55972d503dd8
| | `-ParmVarDecl 0x55972d503ee8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55972d503f88 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55972d503f88
| | `-ParmVarDecl 0x55972d504098 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55972d506210 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55972d4f3018 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55972d4f3078 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55972d4f30e0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55972d4f3148 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55972d4f31b0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55972d4f3218 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55972d4f3278 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55972d4f32d8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55972d4f3340 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55972d4f33c8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55972d4f3018 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55972d503740 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55972d4f3278 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55972d504180 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55972d5041e0 <col:21, line:755:5>
|-CXXConstructorDecl 0x55972d4f3568 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55972d4f34a8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55972d4f3660 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55972d4f3848 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55972d4f3750 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55972d4f3b18 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55972d4f3900 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55972d4f3978 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55972d4f39f0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55972d4f3d38 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55972d4f3be8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55972d4f3c60 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55972d4fc318 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55972d4f3df8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55972d4f3e70 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55972d4f3ee8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55972d4fc470 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55972d4fc3e0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55972d4fc5b8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55972d4fc528 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55972d4fc6b0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class EtherAddressArg
         0 |   int flags_
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class EtherAddress>
         0 |   class EtherAddressArg (base)
         0 |     int flags_
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55972d537b88 <../dummy_inc/click/etheraddress.hh:205:1, line:224:1> line:205:7 referenced class EtherAddressArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55972d537ca8 <col:1, col:7> col:7 implicit referenced class EtherAddressArg
|-AccessSpecDecl 0x55972d537d38 <col:25, col:31> col:25 public
|-TypedefDecl 0x55972d537d70 <line:206:5, col:18> col:18 referenced enable_direct_parse 'void'
| `-BuiltinType 0x55972cfb8310 'void'
|-CXXConstructorDecl 0x55972d537eb8 <line:207:5, col:53> col:5 used EtherAddressArg 'void (int)'
| |-ParmVarDecl 0x55972d537de0 <col:21, col:33> col:25 used flags 'int' cinit
| | `-IntegerLiteral 0x55972d539140 <col:33> 'int' 0
| |-CXXCtorInitializer Field 0x55972d538a70 'flags_' 'int'
| | `-ImplicitCastExpr 0x55972d5391e0 <col:45> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55972d5391a0 <col:45> 'int' lvalue ParmVar 0x55972d537de0 'flags' 'int'
| `-CompoundStmt 0x55972d539228 <col:52, col:53>
|-CXXMethodDecl 0x55972d538178 <line:208:5, line:210:5> line:208:17 used parse 'bool (const String &, EtherAddress &, const ArgContext &)' inline
| |-ParmVarDecl 0x55972d537f78 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55972d538018 <col:42, col:56> col:56 used value 'EtherAddress &'
| |-ParmVarDecl 0x55972d538090 <col:63, col:88> col:81 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55972d539160 <col:88> 'const ArgContext' lvalue Var 0x55972d537b20 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55972d498eb8 <col:100, line:210:5>
|   `-ReturnStmt 0x55972d498ea8 <line:209:9, col:46>
|     `-CallExpr 0x55972d498e50 <col:16, col:46> 'bool'
|       |-ImplicitCastExpr 0x55972d498e38 <col:16> 'bool (*)(const String &, EtherAddress &, const ArgContext &, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55972d498df0 <col:16> 'bool (const String &, EtherAddress &, const ArgContext &, int)' lvalue CXXMethod 0x55972d538d38 'parse' 'bool (const String &, EtherAddress &, const ArgContext &, int)'
|       |-DeclRefExpr 0x55972d5392a0 <col:22> 'const String' lvalue ParmVar 0x55972d537f78 'str' 'const String &'
|       |-DeclRefExpr 0x55972d5392c0 <col:27> 'EtherAddress' lvalue ParmVar 0x55972d538018 'value' 'EtherAddress &'
|       |-DeclRefExpr 0x55972d5392e0 <col:34> 'const ArgContext' lvalue ParmVar 0x55972d538090 'args' 'const ArgContext &'
|       `-ImplicitCastExpr 0x55972d498e90 <col:40> 'int' <LValueToRValue>
|         `-MemberExpr 0x55972d539310 <col:40> 'int' lvalue ->flags_ 0x55972d538a70
|           `-CXXThisExpr 0x55972d539300 <col:40> 'EtherAddressArg *' implicit this
|-CXXMethodDecl 0x55972d538418 <line:211:5, line:213:5> line:211:17 parse 'bool (const String &, unsigned char *, const ArgContext &)' inline
| |-ParmVarDecl 0x55972d538240 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55972d5382c0 <col:42, col:57> col:57 used value 'unsigned char *'
| |-ParmVarDecl 0x55972d538338 <col:64, col:89> col:82 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55972d539180 <col:89> 'const ArgContext' lvalue Var 0x55972d537b20 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55972d499090 <col:101, line:213:5>
|   `-ReturnStmt 0x55972d499080 <line:212:2, col:66>
|     `-CXXMemberCallExpr 0x55972d499048 <col:9, col:66> 'bool'
|       |-MemberExpr 0x55972d499018 <col:9> '<bound member function type>' ->parse 0x55972d538178
|       | `-CXXThisExpr 0x55972d499008 <col:9> 'EtherAddressArg *' implicit this
|       |-DeclRefExpr 0x55972d498f38 <col:15> 'const String' lvalue ParmVar 0x55972d538240 'str' 'const String &'
|       |-UnaryOperator 0x55972d498fd0 <col:20, col:59> 'EtherAddress' lvalue prefix '*' cannot overflow
|       | `-CXXReinterpretCastExpr 0x55972d498fa0 <col:21, col:59> 'EtherAddress *' reinterpret_cast<class EtherAddress *> <BitCast>
|       |   `-ImplicitCastExpr 0x55972d498f88 <col:54> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|       |     `-DeclRefExpr 0x55972d498f58 <col:54> 'unsigned char *' lvalue ParmVar 0x55972d5382c0 'value' 'unsigned char *'
|       `-DeclRefExpr 0x55972d498fe8 <col:62> 'const ArgContext' lvalue ParmVar 0x55972d538338 'args' 'const ArgContext &'
|-CXXMethodDecl 0x55972d5386d8 <line:214:5, line:216:5> line:214:17 used direct_parse 'bool (const String &, EtherAddress &, Args &)' inline
| |-ParmVarDecl 0x55972d5384e0 <col:30, col:44> col:44 used str 'const String &'
| |-ParmVarDecl 0x55972d538558 <col:49, col:63> col:63 used value 'EtherAddress &'
| |-ParmVarDecl 0x55972d5385f8 <col:70, col:76> col:76 used args 'Args &'
| `-CompoundStmt 0x55972d499278 <col:82, line:216:5>
|   `-ReturnStmt 0x55972d499268 <line:215:9, col:53>
|     `-CallExpr 0x55972d499210 <col:16, col:53> 'bool'
|       |-ImplicitCastExpr 0x55972d4991f8 <col:16> 'bool (*)(const String &, EtherAddress &, Args &, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55972d4991b0 <col:16> 'bool (const String &, EtherAddress &, Args &, int)' lvalue CXXMethod 0x55972d539068 'direct_parse' 'bool (const String &, EtherAddress &, Args &, int)'
|       |-DeclRefExpr 0x55972d499110 <col:29> 'const String' lvalue ParmVar 0x55972d5384e0 'str' 'const String &'
|       |-DeclRefExpr 0x55972d499130 <col:34> 'EtherAddress' lvalue ParmVar 0x55972d538558 'value' 'EtherAddress &'
|       |-DeclRefExpr 0x55972d499150 <col:41> 'Args' lvalue ParmVar 0x55972d5385f8 'args' 'Args &'
|       `-ImplicitCastExpr 0x55972d499250 <col:47> 'int' <LValueToRValue>
|         `-MemberExpr 0x55972d499180 <col:47> 'int' lvalue ->flags_ 0x55972d538a70
|           `-CXXThisExpr 0x55972d499170 <col:47> 'EtherAddressArg *' implicit this
|-CXXMethodDecl 0x55972d538978 <line:217:5, line:219:5> line:217:17 direct_parse 'bool (const String &, unsigned char *, Args &)' inline
| |-ParmVarDecl 0x55972d5387a0 <col:30, col:44> col:44 used str 'const String &'
| |-ParmVarDecl 0x55972d538820 <col:49, col:64> col:64 used value 'unsigned char *'
| |-ParmVarDecl 0x55972d538898 <col:71, col:77> col:77 used args 'Args &'
| `-CompoundStmt 0x55972d499450 <col:83, line:219:5>
|   `-ReturnStmt 0x55972d499440 <line:218:2, col:73>
|     `-CXXMemberCallExpr 0x55972d499408 <col:9, col:73> 'bool'
|       |-MemberExpr 0x55972d4993d8 <col:9> '<bound member function type>' ->direct_parse 0x55972d5386d8
|       | `-CXXThisExpr 0x55972d4993c8 <col:9> 'EtherAddressArg *' implicit this
|       |-DeclRefExpr 0x55972d4992f8 <col:22> 'const String' lvalue ParmVar 0x55972d5387a0 'str' 'const String &'
|       |-UnaryOperator 0x55972d499390 <col:27, col:66> 'EtherAddress' lvalue prefix '*' cannot overflow
|       | `-CXXReinterpretCastExpr 0x55972d499360 <col:28, col:66> 'EtherAddress *' reinterpret_cast<class EtherAddress *> <BitCast>
|       |   `-ImplicitCastExpr 0x55972d499348 <col:61> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|       |     `-DeclRefExpr 0x55972d499318 <col:61> 'unsigned char *' lvalue ParmVar 0x55972d538820 'value' 'unsigned char *'
|       `-DeclRefExpr 0x55972d4993a8 <col:69> 'Args' lvalue ParmVar 0x55972d538898 'args' 'Args &'
|-AccessSpecDecl 0x55972d538a30 <line:220:3, col:10> col:3 private
|-FieldDecl 0x55972d538a70 <line:221:5, col:9> col:9 referenced flags_ 'int'
|-CXXMethodDecl 0x55972d538d38 <line:222:5, col:96> col:17 used parse 'bool (const String &, EtherAddress &, const ArgContext &, int)' static
| |-ParmVarDecl 0x55972d538ad0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55972d538b48 <col:42, col:56> col:56 value 'EtherAddress &'
| |-ParmVarDecl 0x55972d538bc0 <col:63, col:81> col:81 args 'const ArgContext &'
| `-ParmVarDecl 0x55972d538c40 <col:87, col:91> col:91 flags 'int'
|-CXXMethodDecl 0x55972d539068 <line:223:5, col:91> col:17 used direct_parse 'bool (const String &, EtherAddress &, Args &, int)' static
| |-ParmVarDecl 0x55972d538e08 <col:30, col:44> col:44 str 'const String &'
| |-ParmVarDecl 0x55972d538e80 <col:49, col:63> col:63 value 'EtherAddress &'
| |-ParmVarDecl 0x55972d538ef8 <col:70, col:76> col:76 args 'Args &'
| `-ParmVarDecl 0x55972d538f78 <col:82, col:86> col:86 flags 'int'
|-CXXDestructorDecl 0x55972d6392a0 <line:205:7> col:7 implicit ~EtherAddressArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55972d6393d8 <col:7> col:7 implicit constexpr EtherAddressArg 'void (const EtherAddressArg &)' inline default trivial noexcept-unevaluated 0x55972d6393d8
| `-ParmVarDecl 0x55972d6394e8 <col:7> col:7 'const EtherAddressArg &'
`-CXXConstructorDecl 0x55972d639588 <col:7> col:7 implicit used constexpr EtherAddressArg 'void (EtherAddressArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55972d639698 <col:7> col:7 used 'EtherAddressArg &&'
  |-CXXCtorInitializer Field 0x55972d538a70 'flags_' 'int'
  | `-ImplicitCastExpr 0x55972d63a478 <col:7> 'int' <LValueToRValue>
  |   `-MemberExpr 0x55972d63a430 <col:7> 'int' xvalue .flags_ 0x55972d538a70
  |     `-CXXStaticCastExpr 0x55972d63a400 <col:7> 'EtherAddressArg' xvalue static_cast<class EtherAddressArg &&> <NoOp>
  |       `-DeclRefExpr 0x55972d63a3d0 <col:7> 'EtherAddressArg' lvalue ParmVar 0x55972d639698 '' 'EtherAddressArg &&'
  `-CompoundStmt 0x55972d63a4c0 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.EtherAddressArg = type { i32 }
  NonVirtualBaseLLVMType:%class.EtherAddressArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55972d499490 <../dummy_inc/click/etheraddress.hh:226:1, col:70> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'EtherAddressArg'
|-TemplateArgument type 'EtherAddress'
|-CXXRecordDecl 0x55972d4996e8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55972d6391c8 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'EtherAddressArg'
| | `-CXXConstructExpr 0x55972d639aa0 <col:19> 'EtherAddressArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55972d639a80 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55972d639b10 <col:19>
|-CXXConstructorDecl 0x55972d639708 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<EtherAddress> &)' inline default trivial noexcept-unevaluated 0x55972d639708
| `-ParmVarDecl 0x55972d639818 <col:19> col:19 'const DefaultArg<EtherAddress> &'
|-CXXConstructorDecl 0x55972d6398b8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<EtherAddress> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55972d6399c8 <col:19> col:19 used 'DefaultArg<EtherAddress> &&'
| |-CXXCtorInitializer 'EtherAddressArg'
| | `-CXXConstructExpr 0x55972d63a4d0 <col:19> 'EtherAddressArg' 'void (EtherAddressArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55972d63a3b0 <col:19> 'EtherAddressArg' xvalue <UncheckedDerivedToBase (EtherAddressArg)>
| |     `-CXXStaticCastExpr 0x55972d63a380 <col:19> 'DefaultArg<EtherAddress>' xvalue static_cast<struct DefaultArg<class EtherAddress> &&> <NoOp>
| |       `-DeclRefExpr 0x55972d63a350 <col:19> 'DefaultArg<EtherAddress>' lvalue ParmVar 0x55972d6399c8 '' 'DefaultArg<EtherAddress> &&'
| `-CompoundStmt 0x55972d63a540 <col:19>
`-CXXDestructorDecl 0x55972d639b50 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.EtherAddressArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.EtherAddressArg }
  IsZeroInitializable:1
  BitFields:[
]>
