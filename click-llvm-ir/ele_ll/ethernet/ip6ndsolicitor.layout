
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:18:2)
         0 |   uint32_t ip6_un1_flow
         4 |   uint16_t ip6_un1_plen
         6 |   uint8_t ip6_un1_nxt
         7 |   uint8_t ip6_un1_hlim
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:30:2)
     0:0-3 |   unsigned int ip6_un3_fc
     0:4-7 |   unsigned int ip6_un3_v
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:17:5)
         0 |   struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:18:2) ip6_un1
         0 |     uint32_t ip6_un1_flow
         4 |     uint16_t ip6_un1_plen
         6 |     uint8_t ip6_un1_nxt
         7 |     uint8_t ip6_un1_hlim
         0 |   uint8_t ip6_un2_vfc
         0 |   struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:30:2) ip6_un3
     0:0-3 |     unsigned int ip6_un3_fc
     0:4-7 |     unsigned int ip6_un3_v
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | struct StringAccum::rep_t
         0 |   unsigned char * s
         8 |   int len
        12 |   int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607cb2d41e8 prev 0x5607cb2cb988 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5607cb2d42e0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x5607cb2d4370 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x5607cb2d43e8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x5607cb2d44a8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x5607cb2d4570 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x5607cb2d46e8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x5607cb2d4620 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x5607cb2d4790 <col:24>
| `-OptimizeNoneAttr 0x5607cb2d47e8 <col:34>
|-CXXMethodDecl 0x5607cb2d4830 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x5607cb2d4ae8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x5607cb2d48e0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5607cb2d4958 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x5607cb2d49d8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x5607cb2d4ba0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x5607cb2d4bd8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x5607cb2d4c40 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x5607cb2d4cc8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x5607cb2d4fe8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x5607cb2d4d80 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5607cb2d4df8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x5607cb2d4e70 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x5607cb2d4ef0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x5607cb2d5100 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x5607cb2dca78 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5607cb2dca78
| `-ParmVarDecl 0x5607cb2dcb88 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x5607cb2dcc28 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5607cb2dcc28
| `-ParmVarDecl 0x5607cb2dcd38 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x5607cb424970 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607cb2c7200 prev 0x5607cb2c6f80 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5607cb2c72f8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x5607cb2c7388 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5607cb2c73e8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x5607cb2c74d8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x5607cb2c75d8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x5607cb2c77a8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x5607cb2c7658 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x5607cb2c76d0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x5607cb2c7938 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5607cb2c7870 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x5607cb2c79e0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x5607cb2c7b18 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x5607cb2c7a50 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x5607cb2c7cb8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x5607cb2c7bf8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x5607cb2c7e58 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x5607cb2c7d98 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x5607cb2c7f00 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x5607cb2c8000 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x5607cb2c80e0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb2c7fe0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x5607cb2c7fc0 <col:26> 'int' 1
| `-EnumConstantDecl 0x5607cb2c8090 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x5607cb2c80f8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5607cb2c8070 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x5607cb2c8050 <col:44> 'int' 2
|-CXXMethodDecl 0x5607cb2c8240 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x5607cb2c8128 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5607cb2c81a8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x5607cb2c8398 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x5607cb2c8308 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x5607cb2c85d8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x5607cb2c8458 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x5607cb2c84d0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x5607cb2c8688 <col:20>
| `-OptimizeNoneAttr 0x5607cb2c86e0 <col:30>
|-CXXMethodDecl 0x5607cb2c87e8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x5607cb2c8720 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x5607cb2c8890 <col:20>
| `-OptimizeNoneAttr 0x5607cb2c88e8 <col:30>
|-CXXMethodDecl 0x5607cb2c8938 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x5607cb2c8a00 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x5607cb2c8b18 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x5607cb2c8ba0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x5607cb2c8c28 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x5607cb2c8cb0 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x5607cb2c8d38 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x5607cb2c8dc8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x5607cb2c8e88 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x5607cb2c8f10 <line:63:5, col:28> col:23 used PUSH 'const char []' static
|-VarDecl 0x5607cb2c8f98 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x5607cb2c9020 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x5607cb2c90a8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x5607cb2c9130 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x5607cb2c91c0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x5607cb2c9280 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x5607cb2c9310 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x5607cb2c9460 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x5607cb2c93c8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x5607cb2c95f0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x5607cb2c9520 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x5607cb2c98a0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x5607cb2c96a8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x5607cb2c9728 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x5607cb2c97a8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x5607cb2c9958 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x5607cb2c9a60 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5607cb2c9cf0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb2c9a40 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x5607cb2c9a20 <col:33> 'int' 0
| |-EnumConstantDecl 0x5607cb2c9af0 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5607cb2c9d08 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb2c9ad0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x5607cb2c9ab0 <col:32> 'int' 20
| |-EnumConstantDecl 0x5607cb2c9b80 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5607cb2c9d20 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb2c9b60 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x5607cb2c9b40 <col:38> 'int' 90
| |-EnumConstantDecl 0x5607cb2c9c10 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5607cb2c9d38 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb2c9bf0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x5607cb2c9bd0 <col:35> 'int' 100
| `-EnumConstantDecl 0x5607cb2c9ca0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x5607cb2c9d50 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5607cb2c9c80 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x5607cb2c9c60 <col:32> 'int' 2000
|-CXXMethodDecl 0x5607cb2c9d90 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x5607cb2ca1d0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5607cb2ca040 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x5607cb2ca0b8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5607cb2ca2a0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x5607cb2ca420 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x5607cb2ca350 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5607cb2ca628 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5607cb2ca4d8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x5607cb2ca550 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5607cb2ca728 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x5607cb2ca7c8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x5607cb2ca890 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x5607cb2ca920 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x5607cb2cab50 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb2ca900 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x5607cb2ca8e0 <col:36> 'int' EnumConstant 0x5607cb2ca890 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x5607cb2ca970 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5607cb2ca9c0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5607cb2caa10 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5607cb2caa60 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5607cb2caab0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x5607cb2cab00 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x5607cb2cac38 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x5607cb2cab78 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5607cb2cad00 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x5607cb2cadc0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x5607cb2cae80 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5607cb2caf40 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5607cb2cb058 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5607cb2cb120 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x5607cb2cb2a0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x5607cb2cb1d0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x5607cb2cb3c8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5607cb2cb5c8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x5607cb2cb478 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x5607cb2cb4f8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x5607cb2d8f18 <col:54, line:127:5>
|   |-ParenExpr 0x5607cb2d8dc8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x5607cb2d8d98 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x5607cb2d8a88 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5607cb2d8a60 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x5607cb2d8a48 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x5607cb2d8a30 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x5607cb2d8a00 <col:31> 'Router *' lvalue ->_router 0x5607cb2d68e0
|   |   |         `-CXXThisExpr 0x5607cb2d89f0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5607cb2d8ae8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5607cb2d8ac8 <col:48> 'int' 0
|   |   `-CallExpr 0x5607cb2d8cf8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x5607cb2d8ce0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5607cb2d8cc0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5607cae018e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5607cb2d8d38 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5607cb2d8b58 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x5607cb2d8d50 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5607cb2d8b78 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x5607cb2d8d68 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5607cb2d8bb0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x5607cb2d8d80 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5607cb2d8ca8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5607cb2d8c90 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5607cb2d8c48 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x5607cb2d8e60 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x5607cb2d8df8 <col:9> 'Router *' lvalue ->_router 0x5607cb2d68e0
|   | | `-CXXThisExpr 0x5607cb2d8de8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x5607cb2d8e48 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5607cb2d8e28 <col:19> 'Router *' lvalue ParmVar 0x5607cb2cb478 'r' 'Router *'
|   `-BinaryOperator 0x5607cb2d8ef8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x5607cb2d8e90 <col:9> 'int' lvalue ->_eindex 0x5607cb2d6948
|     | `-CXXThisExpr 0x5607cb2d8e80 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x5607cb2d8ee0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5607cb2d8ec0 <col:19> 'int' lvalue ParmVar 0x5607cb2cb4f8 'eindex' 'int'
|-CXXMethodDecl 0x5607cb2cb750 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x5607cb2cb688 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x5607cb2cb820 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x5607cb2cb8e8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x5607cb2cb988 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x5607cb2cbbd8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x5607cb2cba50 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x5607cb2cbad0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x5607cb2cbc88 <col:20>
| `-OptimizeNoneAttr 0x5607cb2cbce0 <col:30>
|-CXXMethodDecl 0x5607cb2cbde8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5607cb2cbd20 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x5607cb2cbe90 <col:20>
| `-OptimizeNoneAttr 0x5607cb2cbee8 <col:30>
|-CXXMethodDecl 0x5607cb2cbfb8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5607cb2cbf28 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x5607cb2cc060 <col:20>
| `-OptimizeNoneAttr 0x5607cb2cc0b8 <col:30>
|-CXXMethodDecl 0x5607cb2cc248 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x5607cb2cc0f0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5607cb2cc170 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x5607cb2cc3d8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5607cb2cc310 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5607cb2cc528 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5607cb2cc498 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5607cb2cc678 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5607cb2cc5e8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5607cb2cc7c8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5607cb2cc738 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5607cb2cca88 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x5607cb2cc880 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x5607cb2cc900 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x5607cb2cc9a8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x5607cb2ccb60 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x5607cb2ccc20 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x5607cb2ccef0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5607cb2ccda0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x5607cb2cce18 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x5607cb2cd018 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x5607cb2cd1f0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x5607cb2cd0d0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5607cb2cd150 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x5607cb2cd3d8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x5607cb2cd2b8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x5607cb2cd338 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x5607cb2cd748 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5607cb2cd498 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5607cb2cd510 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5607cb2cd590 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5607cb2d8500 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5607cb2d84e0 <col:106> 'int' 0
| `-ParmVarDecl 0x5607cb2cd608 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5607cb2d8538 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5607cb2d8518 <col:126> 'int' 0
|-CXXMethodDecl 0x5607cb2cdae8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5607cb2cd818 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5607cb2cd8b0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5607cb2cd930 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x5607cb2cd9a8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5607cb2d8570 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5607cb2d8550 <col:114> 'int' 0
|-CXXMethodDecl 0x5607cb2cde78 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5607cb2cdbc0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x5607cb2cdc38 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5607cb2cdcb8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x5607cb2d8588 <col:96> 'int' 0
| `-ParmVarDecl 0x5607cb2cdd30 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5607cb2d85c8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5607cb2d85a8 <col:116> 'int' 0
|-CXXMethodDecl 0x5607cb2ce1f8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5607cb2cdf48 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5607cb2cdfc0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5607cb2ce040 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5607cb2d8600 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5607cb2d85e0 <col:109> 'int' 0
| `-ParmVarDecl 0x5607cb2ce0b8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5607cb2d8638 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5607cb2d8618 <col:129> 'int' 0
|-CXXMethodDecl 0x5607cb2ce578 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5607cb2ce2c8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5607cb2ce340 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5607cb2ce3c0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x5607cb2ce438 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5607cb2d8670 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5607cb2d8650 <col:117> 'int' 0
|-CXXMethodDecl 0x5607cb2ce908 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5607cb2ce650 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5607cb2ce6c8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5607cb2ce748 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x5607cb2d8688 <col:99> 'int' 0
| `-ParmVarDecl 0x5607cb2ce7c0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5607cb2d86c8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5607cb2d86a8 <col:119> 'int' 0
|-CXXMethodDecl 0x5607cb2ced28 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x5607cb2ce9d8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5607cb2cea58 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5607cb2cead0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5607cb2ceb50 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5607cb2d8700 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5607cb2d86e0 <col:108> 'int' 0
| `-ParmVarDecl 0x5607cb2cebd0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x5607cb2d8738 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x5607cb2d8718 <col:141> 'int' 0
|-CXXMethodDecl 0x5607cb2cf148 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5607cb2cee00 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5607cb2cee80 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5607cb2ceef8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5607cb2cef78 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x5607cb2ceff8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5607cb2d8750 <col:121> 'int' 0
|-CXXMethodDecl 0x5607cb2cf578 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5607cb2cf228 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x5607cb2cf2a8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x5607cb2cf320 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5607cb2cf3a0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x5607cb2d8770 <col:98> 'int' 0
| `-ParmVarDecl 0x5607cb2cf420 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5607cb2d8790 <col:123> 'int' 0
|-CXXMethodDecl 0x5607cb2cf840 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x5607cb2cf650 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5607cb2cf6d0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x5607cb2cf750 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x5607cb2d87b0 <col:80> 'int' 0
|-EnumDecl 0x5607cb2cf8f8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x5607cb2cfa00 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5607cb2cfc90 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb2cf9e0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x5607cb2cf9c0 <col:42> 'int' 1
| |-EnumConstantDecl 0x5607cb2cfa90 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5607cb2cfca8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb2cfa70 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x5607cb2cfa50 <col:40> 'int' 2
| |-EnumConstantDecl 0x5607cb2cfb20 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5607cb2cfcc0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb2cfb00 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x5607cb2cfae0 <col:44> 'int' 4
| |-EnumConstantDecl 0x5607cb2cfbb0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5607cb2cfcd8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb2cfb90 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x5607cb2cfb70 <col:36> 'int' 7
| `-EnumConstantDecl 0x5607cb2cfc40 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x5607cb2cfcf0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5607cb2cfc20 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x5607cb2cfc00 <col:34> 'int' 6
|-CXXMethodDecl 0x5607cb2cffa8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x5607cb2cfd18 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x5607cb2cfdb8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5607cb2cfe38 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x5607cb2cfeb0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x5607cb2d8868 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5607cb2d8850 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x5607cb2d8838 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5607cb2d8818 <col:98, col:105> 'String' (CXXTemporary 0x5607cb2d8818)
|           `-CXXTemporaryObjectExpr 0x5607cb2d87e0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5607cb2d0248 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5607cb2d0078 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5607cb2d00f0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5607cb2d0168 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5607cb2d8918 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5607cb2d8900 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5607cb2d88e8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5607cb2d88c8 <col:94, col:101> 'String' (CXXTemporary 0x5607cb2d88c8)
| |         `-CXXTemporaryObjectExpr 0x5607cb2d8890 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x5607cb2d9100 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5607cb2d9078 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5607cb2d9048 <col:9> '<bound member function type>' ->add_task_handlers 0x5607cb2cffa8
|     | `-CXXThisExpr 0x5607cb2d9038 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5607cb2d90b8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5607cb2d8fb8 <col:27> 'Task *' lvalue ParmVar 0x5607cb2d0078 'task' 'Task *'
|     |-ImplicitCastExpr 0x5607cb2d90d0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x5607cb2d8fd8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x5607cb2d00f0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x5607cb2d90e8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5607cb2d8ff8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5607cb2cfc40 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5607cb2d9018 <col:62> 'const String' lvalue ParmVar 0x5607cb2d0168 'prefix' 'const String &'
|-CXXMethodDecl 0x5607cb2d0458 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x5607cb2d0310 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5607cb2d0388 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5607cb2d89c8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5607cb2d89b0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5607cb2d8998 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5607cb2d8978 <col:70, col:77> 'String' (CXXTemporary 0x5607cb2d8978)
| |         `-CXXTemporaryObjectExpr 0x5607cb2d8940 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x5607cb2d92d8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5607cb2d9250 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x5607cb2d9220 <col:9> '<bound member function type>' ->add_task_handlers 0x5607cb2cffa8
|     | `-CXXThisExpr 0x5607cb2d9210 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5607cb2d9290 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5607cb2d9190 <col:27> 'Task *' lvalue ParmVar 0x5607cb2d0310 'task' 'Task *'
|     |-ImplicitCastExpr 0x5607cb2d92a8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x5607cb2d91b0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x5607cb2d92c0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5607cb2d91d0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5607cb2cfc40 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5607cb2d91f0 <col:57> 'const String' lvalue ParmVar 0x5607cb2d0388 'prefix' 'const String &'
|-CXXMethodDecl 0x5607cb2d0738 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x5607cb2d0520 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5607cb2d05a0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5607cb2d0618 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x5607cb2d09e8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x5607cb2d0808 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5607cb2d0888 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5607cb2d0908 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x5607cb2d0cd8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5607cb2d0ab8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5607cb2d0b38 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5607cb2d0bb0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x5607cb2d0f88 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x5607cb2d0da8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5607cb2d0e28 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5607cb2d0ea8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x5607cb2d1238 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x5607cb2d1058 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5607cb2d10d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5607cb2d1158 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x5607cb2d14e8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x5607cb2d1308 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5607cb2d1388 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5607cb2d1400 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x5607cb2d1798 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x5607cb2d15b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5607cb2d1638 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5607cb2d16b8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x5607cb2d1aa8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x5607cb2d18c0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5607cb2d1940 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5607cb2d19c0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x5607cb2d1d88 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x5607cb2d1b78 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5607cb2d1bf8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5607cb2d1ca0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x5607cb2d2068 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x5607cb2d1e58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5607cb2d1ed8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5607cb2d1f80 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x5607cb2d22d0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5607cb2d2138 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5607cb2d21b8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5607cb2d2230 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x5607cb2d2578 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x5607cb2d23a0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5607cb2d2420 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5607cb2d2498 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x5607cb2d2828 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x5607cb2d2648 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5607cb2d26c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5607cb2d2748 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x5607cb2d2ad8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x5607cb2d28f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5607cb2d2978 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5607cb2d29f0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x5607cb2d2d88 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x5607cb2d2ba8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5607cb2d2c28 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5607cb2d2ca0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x5607cb2d3058 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x5607cb2d2e58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5607cb2d2ed8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5607cb2d2f78 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x5607cb2d3388 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x5607cb2d3128 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5607cb2d31a8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x5607cb2d3220 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x5607cb2d3298 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5607cb2d89e0 <col:93> 'bool' false
|-CXXMethodDecl 0x5607cb2d3570 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5607cb2d3458 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x5607cb2d34d8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x5607cb2d3748 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5607cb2d3630 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x5607cb2d36b0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x5607cb2d3a28 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5607cb2d3808 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x5607cb2d3880 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x5607cb2d3900 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x5607cb2d3978 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x5607cb2d3d18 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5607cb2d3af8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x5607cb2d3b70 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x5607cb2d3bf0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x5607cb2d3c68 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x5607cb2d3f50 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x5607cb2d3df0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x5607cb2d3e70 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x5607cb2d4138 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x5607cb2d4018 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x5607cb2d4098 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x5607cb2d41e8 prev 0x5607cb2cb988 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5607cb2d42e0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x5607cb2d4370 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x5607cb2d43e8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x5607cb2d44a8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x5607cb2d4570 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x5607cb2d46e8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x5607cb2d4620 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x5607cb2d4790 <col:24>
| | `-OptimizeNoneAttr 0x5607cb2d47e8 <col:34>
| |-CXXMethodDecl 0x5607cb2d4830 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x5607cb2d4ae8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x5607cb2d48e0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5607cb2d4958 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x5607cb2d49d8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x5607cb2d4ba0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x5607cb2d4bd8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x5607cb2d4c40 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x5607cb2d4cc8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x5607cb2d4fe8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x5607cb2d4d80 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5607cb2d4df8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x5607cb2d4e70 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x5607cb2d4ef0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x5607cb2d5100 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x5607cb2dca78 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5607cb2dca78
| | `-ParmVarDecl 0x5607cb2dcb88 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x5607cb2dcc28 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5607cb2dcc28
| | `-ParmVarDecl 0x5607cb2dcd38 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x5607cb424970 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5607cb2d5178 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x5607cb2d5218 <col:38> "" ""
|-CXXMethodDecl 0x5607cb2d52a8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x5607cb2d5348 <col:44> "" ""
|-AccessSpecDecl 0x5607cb2d53b8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x5607cb2d53e0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x5607cb2d54e0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x5607cb2d5530 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5607cb2d54c0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x5607cb2d54a0 <col:27> 'int' 4
|-FieldDecl 0x5607cb2d55e8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x5607cb2d5798 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x5607cb2d5850 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x5607cb2d68e0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x5607cb2d6948 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x5607cb2d6a98 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x5607cb2d69d8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x5607cb2d6c48 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x5607cb2d6b58 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x5607cb2d6e28 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x5607cb2d6d08 <col:20> col:23 'int'
| `-ParmVarDecl 0x5607cb2d6d88 <col:25> col:28 'int'
|-CXXMethodDecl 0x5607cb2d70d0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x5607cb2d6ef0 <col:23> col:26 'int'
| |-ParmVarDecl 0x5607cb2d6f70 <col:28> col:31 'int'
| `-ParmVarDecl 0x5607cb2d6fe8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x5607cb2d7188 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x5607cb2d7250 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x5607cb2d72a0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x5607cb2d72f0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x5607cb2d74d0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x5607cb2d7380 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x5607cb2d73f8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5607cb2d7778 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x5607cb2d7598 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x5607cb2d7618 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x5607cb2d7690 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x5607cb2d7998 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x5607cb2d7848 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x5607cb2d78c8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x5607cb2d7cd0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x5607cb2d7a58 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x5607cb2d7ad8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x5607cb2d7b50 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x5607cb2d7bd0 <col:57> col:60 'int'
|-CXXMethodDecl 0x5607cb2d7eb8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5607cb2d7da0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5607cb2d7e20 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x5607cb2d8008 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x5607cb2d7f78 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x5607cb2d8388 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x5607cb2d80c8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x5607cb2d8148 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x5607cb2d81c0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5607cb2d8240 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x5607cb2d84a0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class EtherAddress
         0 |   uint16_t [3] _data
           | [sizeof=6, dsize=6, align=1,
           |  nvsize=6, nvalign=1]

*** Dumping AST Record Layout
         0 | class IP6Address
         0 |   struct in6_addr _addr
         0 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |       uint8_t [16] __u6_addr8
         0 |       uint16_t [8] __u6_addr16
         0 |       uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5)
         0 |   TimerCallback callback
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timer
         0 |   int _schedpos1
         8 |   class Timestamp _expiry_s
         8 |     union Timestamp::rep_t _t
         8 |       int64_t x
        16 |   union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
        16 |     TimerCallback callback
        24 |   void * _thunk
        32 |   class Element * _owner
        40 |   class RouterThread * _thread
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | class IP6NDSolicitor
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   int _arp_queries
       112 |   int _pkts_killed
       120 |   struct IP6NDSolicitor::NDEntry *[256] _map
      2168 |   class EtherAddress _my_en
      2168 |     uint16_t [3] _data
      2176 |   class IP6Address _my_ip6
      2176 |     struct in6_addr _addr
      2176 |       union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
      2176 |         uint8_t [16] __u6_addr8
      2176 |         uint16_t [8] __u6_addr16
      2176 |         uint32_t [4] __u6_addr32
      2192 |   class Timer _expire_timer
      2192 |     int _schedpos1
      2200 |     class Timestamp _expiry_s
      2200 |       union Timestamp::rep_t _t
      2200 |         int64_t x
      2208 |     union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
      2208 |       TimerCallback callback
      2216 |     void * _thunk
      2224 |     class Element * _owner
      2232 |     class RouterThread * _thread
           | [sizeof=2240, dsize=2240, align=8,
           |  nvsize=2240, nvalign=8]

*** Dumping AST Record Layout
         0 | struct IP6NDSolicitor::NDEntry
         0 |   class IP6Address ip6
         0 |     struct in6_addr _addr
         0 |       union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |         uint8_t [16] __u6_addr8
         0 |         uint16_t [8] __u6_addr16
         0 |         uint32_t [4] __u6_addr32
        16 |   class EtherAddress en
        16 |     uint16_t [3] _data
        24 |   click_jiffies_t last_response_jiffies
    28:0-0 |   unsigned int ok
    28:1-1 |   unsigned int polling
        32 |   class Packet * p
        40 |   struct NDEntry * next
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607cb006148 </usr/include/netinet/in.h:214:5, line:219:7> line:214:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x5607cb006368 <line:216:2, col:23> col:10 referenced __u6_addr8 'uint8_t [16]'
|-FieldDecl 0x5607cb006498 <line:217:2, col:24> col:11 __u6_addr16 'uint16_t [8]'
|-FieldDecl 0x5607cb0065c8 <line:218:2, col:24> col:11 __u6_addr32 'uint32_t [4]'
|-CXXConstructorDecl 0x5607cb24c508 <line:214:5> col:5 implicit used  'void () noexcept' inline default trivial
| `-CompoundStmt 0x5607cb24cd18 <col:5>
|-CXXDestructorDecl 0x5607cb24c5e0 <col:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5607cb24c6e8 <col:5> col:5 implicit used constexpr  'void (const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| |-ParmVarDecl 0x5607cb24c7f8 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| `-CompoundStmt 0x5607cb3001a0 <col:5>
|-CXXConstructorDecl 0x5607cb24c898 <col:5> col:5 implicit used constexpr  'void (in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5607cb24c9a8 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'
| `-CompoundStmt 0x5607cb3095d8 <col:5>
|-CXXMethodDecl 0x5607cb24d448 <col:5> col:5 implicit used constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| |-ParmVarDecl 0x5607cb24d558 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| `-CompoundStmt 0x5607cb30d3e0 <col:5>
|   `-ReturnStmt 0x5607cb30d3d0 <col:5>
|     `-UnaryOperator 0x5607cb30d3b8 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5607cb30d3a8 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) *' this
`-CXXMethodDecl 0x5607cb24d5c8 <col:5> col:5 implicit constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&)' inline default trivial noexcept-unevaluated 0x5607cb24d5c8
  `-ParmVarDecl 0x5607cb24d6d8 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { [4 x i32] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607cafa48e0 </usr/include/netinet/in.h:212:1, line:225:3> line:212:8 struct in6_addr definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5607cb0060b8 <col:1, col:8> col:8 implicit struct in6_addr
|-CXXRecordDecl 0x5607cb006148 <line:214:5, line:219:7> line:214:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x5607cb006368 <line:216:2, col:23> col:10 referenced __u6_addr8 'uint8_t [16]'
| |-FieldDecl 0x5607cb006498 <line:217:2, col:24> col:11 __u6_addr16 'uint16_t [8]'
| |-FieldDecl 0x5607cb0065c8 <line:218:2, col:24> col:11 __u6_addr32 'uint32_t [4]'
| |-CXXConstructorDecl 0x5607cb24c508 <line:214:5> col:5 implicit used  'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5607cb24cd18 <col:5>
| |-CXXDestructorDecl 0x5607cb24c5e0 <col:5> col:5 implicit ~ 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5607cb24c6e8 <col:5> col:5 implicit used constexpr  'void (const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5607cb24c7f8 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| | `-CompoundStmt 0x5607cb3001a0 <col:5>
| |-CXXConstructorDecl 0x5607cb24c898 <col:5> col:5 implicit used constexpr  'void (in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x5607cb24c9a8 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'
| | `-CompoundStmt 0x5607cb3095d8 <col:5>
| |-CXXMethodDecl 0x5607cb24d448 <col:5> col:5 implicit used constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5607cb24d558 <col:5> col:5 'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &'
| | `-CompoundStmt 0x5607cb30d3e0 <col:5>
| |   `-ReturnStmt 0x5607cb30d3d0 <col:5>
| |     `-UnaryOperator 0x5607cb30d3b8 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5607cb30d3a8 <col:5> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) *' this
| `-CXXMethodDecl 0x5607cb24d5c8 <col:5> col:5 implicit constexpr operator= 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &(in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&)' inline default trivial noexcept-unevaluated 0x5607cb24d5c8
|   `-ParmVarDecl 0x5607cb24d6d8 <col:5> col:5 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&'
|-FieldDecl 0x5607cb006688 <col:5, line:219:9> col:9 referenced __in6_u 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
|-CXXConstructorDecl 0x5607cb24c418 <line:212:8> col:8 implicit used in6_addr 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5607cb006688 '__in6_u' 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
| | `-CXXConstructExpr 0x5607cb24cd28 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' 'void () noexcept'
| `-CompoundStmt 0x5607cb24cd80 <col:8>
|-CXXConstructorDecl 0x5607cb24ca18 <col:8> col:8 implicit used constexpr in6_addr 'void (const in6_addr &) noexcept' inline default trivial
| |-ParmVarDecl 0x5607cb24caf8 <col:8> col:8 used 'const in6_addr &'
| |-CXXCtorInitializer Field 0x5607cb006688 '__in6_u' 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
| | `-CXXConstructExpr 0x5607cb3001b0 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' 'void (const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &) noexcept'
| |   `-MemberExpr 0x5607cb300170 <col:8> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x5607cb006688
| |     `-DeclRefExpr 0x5607cb300150 <col:8> 'const in6_addr' lvalue ParmVar 0x5607cb24caf8 '' 'const in6_addr &'
| `-CompoundStmt 0x5607cb300210 <col:8>
|-CXXConstructorDecl 0x5607cb24cb98 <col:8> col:8 implicit used constexpr in6_addr 'void (in6_addr &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5607cb24cca8 <col:8> col:8 used 'in6_addr &&'
| |-CXXCtorInitializer Field 0x5607cb006688 '__in6_u' 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)'
| | `-CXXConstructExpr 0x5607cb3095e8 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' 'void (in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5) &&) noexcept'
| |   `-MemberExpr 0x5607cb3095a8 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' xvalue .__in6_u 0x5607cb006688
| |     `-CXXStaticCastExpr 0x5607cb309578 <col:8> 'in6_addr' xvalue static_cast<struct in6_addr &&> <NoOp>
| |       `-DeclRefExpr 0x5607cb309548 <col:8> 'in6_addr' lvalue ParmVar 0x5607cb24cca8 '' 'in6_addr &&'
| `-CompoundStmt 0x5607cb309648 <col:8>
|-CXXMethodDecl 0x5607cb24d748 <col:8> col:8 implicit used constexpr operator= 'in6_addr &(const in6_addr &) noexcept' inline default trivial
| |-ParmVarDecl 0x5607cb24d858 <col:8> col:8 used 'const in6_addr &'
| `-CompoundStmt 0x5607cb30d458 <col:8>
|   |-CXXMemberCallExpr 0x5607cb30d3f8 <col:8> 'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue
|   | |-MemberExpr 0x5607cb30d338 <col:8> '<bound member function type>' .operator= 0x5607cb24d448
|   | | `-MemberExpr 0x5607cb30d248 <col:8> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue ->__in6_u 0x5607cb006688
|   | |   `-CXXThisExpr 0x5607cb30d238 <col:8> 'in6_addr *' this
|   | `-MemberExpr 0x5607cb30d308 <col:8> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x5607cb006688
|   |   `-DeclRefExpr 0x5607cb30d2e8 <col:8> 'const in6_addr' lvalue ParmVar 0x5607cb24d858 '' 'const in6_addr &'
|   `-ReturnStmt 0x5607cb30d448 <col:8>
|     `-UnaryOperator 0x5607cb30d430 <col:8> 'in6_addr' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5607cb30d420 <col:8> 'in6_addr *' this
|-CXXMethodDecl 0x5607cb24d8c8 <col:8> col:8 implicit constexpr operator= 'in6_addr &(in6_addr &&)' inline default trivial noexcept-unevaluated 0x5607cb24d8c8
| `-ParmVarDecl 0x5607cb24d9d8 <col:8> col:8 'in6_addr &&'
`-CXXDestructorDecl 0x5607cb24dd78 <col:8> col:8 implicit ~in6_addr 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.in6_addr = type { %union.anon }
  NonVirtualBaseLLVMType:%struct.in6_addr = type { %union.anon }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607cb248d00 prev 0x5607cb28e050 <../dummy_inc/click/ip6address.hh:14:1, line:175:1> line:14:7 referenced class IP6Address definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5607cb248df8 <col:1, col:7> col:7 implicit referenced class IP6Address
|-AccessSpecDecl 0x5607cb248e88 <col:20, col:26> col:20 public
|-TypedefDecl 0x5607cb248ec0 <line:16:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x5607caebaae0 'uninitialized_type'
|   `-CXXRecord 0x5607caebaa48 'uninitialized_type'
|-CXXConstructorDecl 0x5607cb248f80 <line:19:5, line:21:5> line:19:12 used IP6Address 'void ()' inline
| |-CXXCtorInitializer Field 0x5607cb24c398 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x5607cb24cd90 <col:12> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x5607cb24cfb0 <col:25, line:21:5>
|   `-CallExpr 0x5607cb24cf60 <line:20:2, col:33> 'void *'
|     |-ImplicitCastExpr 0x5607cb24cf48 <col:2> 'void *(*)(void *, int, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5607cb24cf28 <col:2> 'void *(void *, int, size_t) throw()' lvalue Function 0x5607cafc5b98 'memset' 'void *(void *, int, size_t) throw()'
|     |-ImplicitCastExpr 0x5607cb24cf98 <col:9, col:10> 'void *' <BitCast>
|     | `-UnaryOperator 0x5607cb24ce70 <col:9, col:10> 'struct in6_addr *' prefix '&' cannot overflow
|     |   `-MemberExpr 0x5607cb24ce40 <col:10> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x5607cb24c398
|     |     `-CXXThisExpr 0x5607cb24ce30 <col:10> 'IP6Address *' implicit this
|     |-IntegerLiteral 0x5607cb24ce88 <col:17> 'int' 0
|     `-UnaryExprOrTypeTraitExpr 0x5607cb24cf08 <col:20, col:32> 'unsigned long' sizeof
|       `-ParenExpr 0x5607cb24cee8 <col:26, col:32> 'struct in6_addr':'in6_addr' lvalue
|         `-MemberExpr 0x5607cb24ceb8 <col:27> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x5607cb24c398 non_odr_use_unevaluated
|           `-CXXThisExpr 0x5607cb24cea8 <col:27> 'IP6Address *' implicit this
|-CXXConstructorDecl 0x5607cb2490d0 <line:24:5, line:26:5> line:24:21 IP6Address 'void (const unsigned char *)' inline
| |-ParmVarDecl 0x5607cb249040 <col:32, col:53> col:53 used x 'const unsigned char *'
| |-CXXCtorInitializer Field 0x5607cb24c398 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x5607cb24cfc8 <col:21> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x5607cb24d218 <col:56, line:26:5>
|   `-CallExpr 0x5607cb24d198 <line:25:2, col:33> 'void *'
|     |-ImplicitCastExpr 0x5607cb24d180 <col:2> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5607cb24d160 <col:2> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x5607cafc4858 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
|     |-ImplicitCastExpr 0x5607cb24d1d0 <col:9, col:10> 'void *' <BitCast>
|     | `-UnaryOperator 0x5607cb24d0a8 <col:9, col:10> 'struct in6_addr *' prefix '&' cannot overflow
|     |   `-MemberExpr 0x5607cb24d078 <col:10> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x5607cb24c398
|     |     `-CXXThisExpr 0x5607cb24d068 <col:10> 'IP6Address *' implicit this
|     |-ImplicitCastExpr 0x5607cb24d200 <col:17> 'const void *' <BitCast>
|     | `-ImplicitCastExpr 0x5607cb24d1e8 <col:17> 'const unsigned char *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5607cb24d0c0 <col:17> 'const unsigned char *' lvalue ParmVar 0x5607cb249040 'x' 'const unsigned char *'
|     `-UnaryExprOrTypeTraitExpr 0x5607cb24d140 <col:20, col:32> 'unsigned long' sizeof
|       `-ParenExpr 0x5607cb24d120 <col:26, col:32> 'struct in6_addr':'in6_addr' lvalue
|         `-MemberExpr 0x5607cb24d0f0 <col:27> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x5607cb24c398 non_odr_use_unevaluated
|           `-CXXThisExpr 0x5607cb24d0e0 <col:27> 'IP6Address *' implicit this
|-CXXConstructorDecl 0x5607cb249220 <line:31:5, line:33:5> line:31:21 IP6Address 'void (IPAddress)' inline
| |-ParmVarDecl 0x5607cb249190 <col:32, col:42> col:42 used x 'IPAddress'
| |-CXXCtorInitializer Field 0x5607cb24c398 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x5607cb24d230 <col:21> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x5607cb300090 <col:45, line:33:5>
|   `-ExprWithCleanups 0x5607cb300078 <line:32:2, col:10> 'IP6Address' lvalue
|     `-CXXOperatorCallExpr 0x5607cb300040 <col:2, col:10> 'IP6Address' lvalue
|       |-ImplicitCastExpr 0x5607cb300028 <col:8> 'IP6Address &(*)(const struct in_addr &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5607cb2fffa8 <col:8> 'IP6Address &(const struct in_addr &)' lvalue CXXMethod 0x5607cb24bd38 'operator=' 'IP6Address &(const struct in_addr &)'
|       |-UnaryOperator 0x5607cb24d298 <col:2, col:3> 'IP6Address' lvalue prefix '*' cannot overflow
|       | `-CXXThisExpr 0x5607cb24d288 <col:3> 'IP6Address *' this
|       `-MaterializeTemporaryExpr 0x5607cb2fff90 <col:10> 'const struct in_addr':'const in_addr' lvalue
|         `-ImplicitCastExpr 0x5607cb2fff78 <col:10> 'const struct in_addr':'const in_addr' <NoOp>
|           `-ImplicitCastExpr 0x5607cb2fff60 <col:10> 'struct in_addr':'in_addr' <UserDefinedConversion>
|             `-CXXMemberCallExpr 0x5607cb2fff40 <col:10> 'struct in_addr':'in_addr'
|               `-MemberExpr 0x5607cb2fff10 <col:10> '<bound member function type>' .operator in_addr 0x5607cb0c98c0
|                 `-ImplicitCastExpr 0x5607cb2ffef8 <col:10> 'const IPAddress' lvalue <NoOp>
|                   `-DeclRefExpr 0x5607cb24d2b0 <col:10> 'IPAddress' lvalue ParmVar 0x5607cb249190 'x' 'IPAddress'
|-CXXConstructorDecl 0x5607cb249370 <line:36:5, col:40> col:14 IP6Address 'void (const String &)'
| `-ParmVarDecl 0x5607cb2492e0 <col:25, col:39> col:39 x 'const String &'
|-CXXConstructorDecl 0x5607cb249598 <line:39:5, line:41:5> line:39:21 IP6Address 'void (const struct in6_addr &)' inline
| |-ParmVarDecl 0x5607cb2494a0 <col:32, col:55> col:55 used x 'const struct in6_addr &'
| |-CXXCtorInitializer Field 0x5607cb24c398 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x5607cb300220 <line:40:4, col:11> 'struct in6_addr':'in6_addr' 'void (const in6_addr &) noexcept'
| |   `-DeclRefExpr 0x5607cb3000a8 <col:10> 'const struct in6_addr':'const in6_addr' lvalue ParmVar 0x5607cb2494a0 'x' 'const struct in6_addr &'
| `-CompoundStmt 0x5607cb300280 <col:13, line:41:5>
|-CXXConstructorDecl 0x5607cb249768 <line:44:5, line:46:5> line:44:21 IP6Address 'void (const struct in_addr &)' inline
| |-ParmVarDecl 0x5607cb2496a0 <col:32, col:54> col:54 used x 'const struct in_addr &'
| |-CXXCtorInitializer Field 0x5607cb24c398 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x5607cb300290 <col:21> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x5607cb3003a0 <col:57, line:46:5>
|   `-CXXOperatorCallExpr 0x5607cb300368 <line:45:2, col:10> 'IP6Address' lvalue
|     |-ImplicitCastExpr 0x5607cb300350 <col:8> 'IP6Address &(*)(const struct in_addr &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5607cb300330 <col:8> 'IP6Address &(const struct in_addr &)' lvalue CXXMethod 0x5607cb24bd38 'operator=' 'IP6Address &(const struct in_addr &)'
|     |-UnaryOperator 0x5607cb3002f8 <col:2, col:3> 'IP6Address' lvalue prefix '*' cannot overflow
|     | `-CXXThisExpr 0x5607cb3002e8 <col:3> 'IP6Address *' this
|     `-DeclRefExpr 0x5607cb300310 <col:10> 'const struct in_addr':'const in_addr' lvalue ParmVar 0x5607cb2496a0 'x' 'const struct in_addr &'
|-CXXConstructorDecl 0x5607cb2498b8 <line:49:5, line:51:5> line:49:12 used IP6Address 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x5607cb249828 <col:23, col:49> col:49 used unused 'const uninitialized_type &'
| |-CXXCtorInitializer Field 0x5607cb24c398 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x5607cb3003b8 <col:12> 'struct in6_addr':'in6_addr' 'void () noexcept'
| `-CompoundStmt 0x5607cb300468 <col:57, line:51:5>
|   `-CStyleCastExpr 0x5607cb300440 <line:50:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x5607cb300410 <col:9> 'const uninitialized_type' lvalue ParmVar 0x5607cb249828 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x5607cb249a48 <line:62:5, col:49> col:23 make_prefix 'IP6Address (int)' static
| `-ParmVarDecl 0x5607cb249980 <col:35, col:39> col:39 prefix_len 'int'
|-CXXMethodDecl 0x5607cb249b98 <line:69:5, col:58> col:23 make_inverted_prefix 'IP6Address (int)' static
| `-ParmVarDecl 0x5607cb249b08 <col:44, col:48> col:48 prefix_len 'int'
|-TypedefDecl 0x5607cb249d48 <line:71:5, col:61> col:36 referenced unspecified_bool_type 'uint32_t (IP6Address::*)() const'
| `-MemberPointerType 0x5607cb249cc0 'uint32_t (IP6Address::*)() const'
|   |-RecordType 0x5607cb28e0e0 'IP6Address'
|   | `-CXXRecord 0x5607cb248d00 'IP6Address'
|   `-ParenType 0x5607cb249c60 'uint32_t () const' sugar
|     `-FunctionProtoType 0x5607cb085ee0 'uint32_t () const' const cdecl
|       `-TypedefType 0x5607caebadd0 'uint32_t' sugar
|         |-Typedef 0x5607cadcc3d8 'uint32_t'
|         `-TypedefType 0x5607cada5480 '__uint32_t' sugar
|           |-Typedef 0x5607cada5078 '__uint32_t'
|           `-BuiltinType 0x5607cad63450 'unsigned int'
|-CXXConversionDecl 0x5607cb249e88 <line:72:5, col:45> col:12 operator unsigned int (IP6Address::*)() const 'IP6Address::unspecified_bool_type () const' inline
|-CXXConversionDecl 0x5607cb24a010 <line:74:5, col:62> col:5 operator const in6_addr & 'const struct in6_addr &() const'
| `-CompoundStmt 0x5607cb3004d0 <col:46, col:62>
|   `-ReturnStmt 0x5607cb3004c0 <col:48, col:55>
|     `-MemberExpr 0x5607cb300490 <col:55> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x5607cb24c398
|       `-CXXThisExpr 0x5607cb300480 <col:55> 'const IP6Address *' implicit this
|-CXXConversionDecl 0x5607cb24a200 <line:75:5, col:50> col:5 operator in6_addr & 'struct in6_addr &()'
| `-CompoundStmt 0x5607cb300538 <col:34, col:50>
|   `-ReturnStmt 0x5607cb300528 <col:36, col:43>
|     `-MemberExpr 0x5607cb3004f8 <col:43> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x5607cb24c398
|       `-CXXThisExpr 0x5607cb3004e8 <col:43> 'IP6Address *' implicit this
|-CXXMethodDecl 0x5607cb24a300 <line:76:5, col:61> col:28 in6_addr 'const struct in6_addr &() const'
| `-CompoundStmt 0x5607cb3005a0 <col:45, col:61>
|   `-ReturnStmt 0x5607cb300590 <col:47, col:54>
|     `-MemberExpr 0x5607cb300560 <col:54> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x5607cb24c398
|       `-CXXThisExpr 0x5607cb300550 <col:54> 'const IP6Address *' implicit this
|-CXXMethodDecl 0x5607cb24a3d8 <line:77:5, col:49> col:22 in6_addr 'struct in6_addr &()'
| `-CompoundStmt 0x5607cb300608 <col:33, col:49>
|   `-ReturnStmt 0x5607cb3005f8 <col:35, col:42>
|     `-MemberExpr 0x5607cb3005c8 <col:42> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x5607cb24c398
|       `-CXXThisExpr 0x5607cb3005b8 <col:42> 'IP6Address *' implicit this
|-CXXMethodDecl 0x5607cb24a4a0 <line:79:5, col:66> col:20 data 'unsigned char *()'
| `-CompoundStmt 0x5607cb300740 <col:27, col:66>
|   `-ReturnStmt 0x5607cb300730 <col:29, col:63>
|     `-UnaryOperator 0x5607cb300718 <col:36, col:63> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5607cb3006f8 <col:37, col:63> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x5607cb3006e0 <col:37, col:51> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5607cb300690 <col:37, col:51> 'uint8_t [16]' lvalue .__u6_addr8 0x5607cb006368
|         |   `-MemberExpr 0x5607cb300660 <col:37, col:43> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x5607cb006688
|         |     `-MemberExpr 0x5607cb300630 <col:37> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x5607cb24c398
|         |       `-CXXThisExpr 0x5607cb300620 <col:37> 'IP6Address *' implicit this
|         `-IntegerLiteral 0x5607cb3006c0 <col:62> 'int' 0
|-CXXMethodDecl 0x5607cb24a568 <line:80:5, col:78> col:26 used data 'const unsigned char *() const'
| `-CompoundStmt 0x5607cb3008b8 <col:39, col:78>
|   `-ReturnStmt 0x5607cb3008a8 <col:41, col:75>
|     `-UnaryOperator 0x5607cb300890 <col:48, col:75> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5607cb300870 <col:49, col:75> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5607cb300858 <col:49, col:63> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5607cb3007c8 <col:49, col:63> 'uint8_t const[16]' lvalue .__u6_addr8 0x5607cb006368
|         |   `-MemberExpr 0x5607cb300798 <col:49, col:55> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x5607cb006688
|         |     `-MemberExpr 0x5607cb300768 <col:49> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x5607cb24c398
|         |       `-CXXThisExpr 0x5607cb300758 <col:49> 'const IP6Address *' implicit this
|         `-IntegerLiteral 0x5607cb3007f8 <col:74> 'int' 0
|-CXXMethodDecl 0x5607cb24a688 <line:81:5, col:75> col:15 used data16 'uint16_t *()'
| `-CompoundStmt 0x5607cb300a28 <col:24, col:75>
|   `-ReturnStmt 0x5607cb300a18 <col:26, col:72>
|     `-CStyleCastExpr 0x5607cb3009f0 <col:33, col:72> 'uint16_t *' <BitCast>
|       `-UnaryOperator 0x5607cb3009c8 <col:45, col:72> 'uint8_t *' prefix '&' cannot overflow
|         `-ArraySubscriptExpr 0x5607cb3009a8 <col:46, col:72> 'uint8_t':'unsigned char' lvalue
|           |-ImplicitCastExpr 0x5607cb300990 <col:46, col:60> 'uint8_t *' <ArrayToPointerDecay>
|           | `-MemberExpr 0x5607cb300940 <col:46, col:60> 'uint8_t [16]' lvalue .__u6_addr8 0x5607cb006368
|           |   `-MemberExpr 0x5607cb300910 <col:46, col:52> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x5607cb006688
|           |     `-MemberExpr 0x5607cb3008e0 <col:46> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x5607cb24c398
|           |       `-CXXThisExpr 0x5607cb3008d0 <col:46> 'IP6Address *' implicit this
|           `-IntegerLiteral 0x5607cb300970 <col:71> 'int' 0
|-CXXMethodDecl 0x5607cb24a748 <line:82:5, col:87> col:21 data16 'const uint16_t *() const'
| `-CompoundStmt 0x5607cb300bb0 <col:36, col:87>
|   `-ReturnStmt 0x5607cb300ba0 <col:38, col:84>
|     `-ImplicitCastExpr 0x5607cb300b88 <col:45, col:84> 'const uint16_t *' <NoOp>
|       `-CStyleCastExpr 0x5607cb300b60 <col:45, col:84> 'uint16_t *' <BitCast>
|         `-UnaryOperator 0x5607cb300b38 <col:57, col:84> 'const uint8_t *' prefix '&' cannot overflow
|           `-ArraySubscriptExpr 0x5607cb300b18 <col:58, col:84> 'const uint8_t':'const unsigned char' lvalue
|             |-ImplicitCastExpr 0x5607cb300b00 <col:58, col:72> 'const uint8_t *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5607cb300ab0 <col:58, col:72> 'uint8_t const[16]' lvalue .__u6_addr8 0x5607cb006368
|             |   `-MemberExpr 0x5607cb300a80 <col:58, col:64> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x5607cb006688
|             |     `-MemberExpr 0x5607cb300a50 <col:58> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x5607cb24c398
|             |       `-CXXThisExpr 0x5607cb300a40 <col:58> 'const IP6Address *' implicit this
|             `-IntegerLiteral 0x5607cb300ae0 <col:83> 'int' 0
|-CXXMethodDecl 0x5607cb24a808 <line:83:5, col:75> col:15 used data32 'uint32_t *()'
| `-CompoundStmt 0x5607cb300d20 <col:24, col:75>
|   `-ReturnStmt 0x5607cb300d10 <col:26, col:72>
|     `-CStyleCastExpr 0x5607cb300ce8 <col:33, col:72> 'uint32_t *' <BitCast>
|       `-UnaryOperator 0x5607cb300cc0 <col:45, col:72> 'uint8_t *' prefix '&' cannot overflow
|         `-ArraySubscriptExpr 0x5607cb300ca0 <col:46, col:72> 'uint8_t':'unsigned char' lvalue
|           |-ImplicitCastExpr 0x5607cb300c88 <col:46, col:60> 'uint8_t *' <ArrayToPointerDecay>
|           | `-MemberExpr 0x5607cb300c38 <col:46, col:60> 'uint8_t [16]' lvalue .__u6_addr8 0x5607cb006368
|           |   `-MemberExpr 0x5607cb300c08 <col:46, col:52> 'union (anonymous union at /usr/include/netinet/in.h:214:5)':'in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x5607cb006688
|           |     `-MemberExpr 0x5607cb300bd8 <col:46> 'struct in6_addr':'in6_addr' lvalue ->_addr 0x5607cb24c398
|           |       `-CXXThisExpr 0x5607cb300bc8 <col:46> 'IP6Address *' implicit this
|           `-IntegerLiteral 0x5607cb300c68 <col:71> 'int' 0
|-CXXMethodDecl 0x5607cb24a8c8 <line:84:5, col:87> col:21 used data32 'const uint32_t *() const'
| `-CompoundStmt 0x5607cb300ea8 <col:36, col:87>
|   `-ReturnStmt 0x5607cb300e98 <col:38, col:84>
|     `-ImplicitCastExpr 0x5607cb300e80 <col:45, col:84> 'const uint32_t *' <NoOp>
|       `-CStyleCastExpr 0x5607cb300e58 <col:45, col:84> 'uint32_t *' <BitCast>
|         `-UnaryOperator 0x5607cb300e30 <col:57, col:84> 'const uint8_t *' prefix '&' cannot overflow
|           `-ArraySubscriptExpr 0x5607cb300e10 <col:58, col:84> 'const uint8_t':'const unsigned char' lvalue
|             |-ImplicitCastExpr 0x5607cb300df8 <col:58, col:72> 'const uint8_t *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5607cb300da8 <col:58, col:72> 'uint8_t const[16]' lvalue .__u6_addr8 0x5607cb006368
|             |   `-MemberExpr 0x5607cb300d78 <col:58, col:64> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x5607cb006688
|             |     `-MemberExpr 0x5607cb300d48 <col:58> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x5607cb24c398
|             |       `-CXXThisExpr 0x5607cb300d38 <col:58> 'const IP6Address *' implicit this
|             `-IntegerLiteral 0x5607cb300dd8 <col:83> 'int' 0
|-CXXMethodDecl 0x5607cb24a988 <line:86:5, col:32> col:21 used hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5607cb24aa50 <line:88:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x5607cb24ac78 <line:89:5, col:80> col:17 matches_prefix 'bool (const IP6Address &, const IP6Address &) const' inline
| |-ParmVarDecl 0x5607cb24ab28 <col:32, col:50> col:50 addr 'const IP6Address &'
| `-ParmVarDecl 0x5607cb24aba0 <col:56, col:74> col:74 mask 'const IP6Address &'
|-CXXMethodDecl 0x5607cb24adf8 <line:90:5, col:54> col:17 mask_as_specific 'bool (const IP6Address &) const' inline
| `-ParmVarDecl 0x5607cb24ad38 <col:34, col:51> col:52 'const IP6Address &'
|-CXXMethodDecl 0x5607cb24aec0 <line:97:5, line:99:5> line:97:10 has_ether_address 'bool () const'
| `-CompoundStmt 0x5607cb3011c0 <col:36, line:99:5>
|   `-ReturnStmt 0x5607cb3011b0 <line:98:2, col:81>
|     `-BinaryOperator 0x5607cb301190 <col:9, col:81> 'bool' '&&'
|       |-BinaryOperator 0x5607cb301008 <col:9, col:41> 'bool' '=='
|       | |-ImplicitCastExpr 0x5607cb300ff0 <col:9, col:36> 'int' <IntegralCast>
|       | | `-ImplicitCastExpr 0x5607cb300fd8 <col:9, col:36> 'uint8_t':'unsigned char' <LValueToRValue>
|       | |   `-ArraySubscriptExpr 0x5607cb300f98 <col:9, col:36> 'const uint8_t':'const unsigned char' lvalue
|       | |     |-ImplicitCastExpr 0x5607cb300f80 <col:9, col:23> 'const uint8_t *' <ArrayToPointerDecay>
|       | |     | `-MemberExpr 0x5607cb300f30 <col:9, col:23> 'uint8_t const[16]' lvalue .__u6_addr8 0x5607cb006368
|       | |     |   `-MemberExpr 0x5607cb300f00 <col:9, col:15> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x5607cb006688
|       | |     |     `-MemberExpr 0x5607cb300ed0 <col:9> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x5607cb24c398
|       | |     |       `-CXXThisExpr 0x5607cb300ec0 <col:9> 'const IP6Address *' implicit this
|       | |     `-IntegerLiteral 0x5607cb300f60 <col:34> 'int' 11
|       | `-IntegerLiteral 0x5607cb300fb8 <col:41> 'int' 255
|       `-BinaryOperator 0x5607cb301170 <col:49, col:81> 'bool' '=='
|         |-ImplicitCastExpr 0x5607cb301158 <col:49, col:76> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5607cb301140 <col:49, col:76> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5607cb301100 <col:49, col:76> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5607cb3010e8 <col:49, col:63> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5607cb301098 <col:49, col:63> 'uint8_t const[16]' lvalue .__u6_addr8 0x5607cb006368
|         |     |   `-MemberExpr 0x5607cb301068 <col:49, col:55> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x5607cb006688
|         |     |     `-MemberExpr 0x5607cb301038 <col:49> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x5607cb24c398
|         |     |       `-CXXThisExpr 0x5607cb301028 <col:49> 'const IP6Address *' implicit this
|         |     `-IntegerLiteral 0x5607cb3010c8 <col:74> 'int' 12
|         `-IntegerLiteral 0x5607cb301120 <col:81> 'int' 254
|-CXXMethodDecl 0x5607cb24b038 <line:104:5, col:41> col:10 ether_address 'bool (EtherAddress &) const'
| `-ParmVarDecl 0x5607cb24af70 <col:24, col:38> col:38 x 'EtherAddress &'
|-CXXMethodDecl 0x5607cb24b100 <line:111:5, line:114:5> line:111:17 is_ip4_compatible 'bool () const' inline
| `-CompoundStmt 0x5607cb3016a8 <col:43, line:114:5>
|   `-ReturnStmt 0x5607cb301698 <line:112:2, line:113:24>
|     `-BinaryOperator 0x5607cb301678 <line:112:9, line:113:24> 'bool' '&&'
|       |-BinaryOperator 0x5607cb3014d8 <line:112:9, col:44> 'bool' '&&'
|       | |-BinaryOperator 0x5607cb301338 <col:9, col:24> 'bool' '=='
|       | | |-ImplicitCastExpr 0x5607cb301308 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|       | | | `-ArraySubscriptExpr 0x5607cb3012c8 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|       | | |   |-CXXMemberCallExpr 0x5607cb301288 <col:9, col:16> 'const uint32_t *'
|       | | |   | `-MemberExpr 0x5607cb301258 <col:9> '<bound member function type>' ->data32 0x5607cb24a8c8
|       | | |   |   `-CXXThisExpr 0x5607cb301248 <col:9> 'const IP6Address *' implicit this
|       | | |   `-IntegerLiteral 0x5607cb3012a8 <col:18> 'int' 0
|       | | `-ImplicitCastExpr 0x5607cb301320 <col:24> 'unsigned int' <IntegralCast>
|       | |   `-IntegerLiteral 0x5607cb3012e8 <col:24> 'int' 0
|       | `-BinaryOperator 0x5607cb3014b8 <col:29, col:44> 'bool' '=='
|       |   |-ImplicitCastExpr 0x5607cb301488 <col:29, col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-ArraySubscriptExpr 0x5607cb301448 <col:29, col:39> 'const uint32_t':'const unsigned int' lvalue
|       |   |   |-CXXMemberCallExpr 0x5607cb301408 <col:29, col:36> 'const uint32_t *'
|       |   |   | `-MemberExpr 0x5607cb3013d8 <col:29> '<bound member function type>' ->data32 0x5607cb24a8c8
|       |   |   |   `-CXXThisExpr 0x5607cb3013c8 <col:29> 'const IP6Address *' implicit this
|       |   |   `-IntegerLiteral 0x5607cb301428 <col:38> 'int' 1
|       |   `-ImplicitCastExpr 0x5607cb3014a0 <col:44> 'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5607cb301468 <col:44> 'int' 0
|       `-BinaryOperator 0x5607cb301658 <line:113:9, col:24> 'bool' '=='
|         |-ImplicitCastExpr 0x5607cb301628 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-ArraySubscriptExpr 0x5607cb3015e8 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|         |   |-CXXMemberCallExpr 0x5607cb3015a8 <col:9, col:16> 'const uint32_t *'
|         |   | `-MemberExpr 0x5607cb301578 <col:9> '<bound member function type>' ->data32 0x5607cb24a8c8
|         |   |   `-CXXThisExpr 0x5607cb301568 <col:9> 'const IP6Address *' implicit this
|         |   `-IntegerLiteral 0x5607cb3015c8 <col:18> 'int' 2
|         `-ImplicitCastExpr 0x5607cb301640 <col:24> 'unsigned int' <IntegralCast>
|           `-IntegerLiteral 0x5607cb301608 <col:24> 'int' 0
|-CXXMethodDecl 0x5607cb24b1c0 <line:120:5, line:123:5> line:120:17 is_ip4_mapped 'bool () const' inline
| `-CompoundStmt 0x5607cb301c20 <col:39, line:123:5>
|   `-ReturnStmt 0x5607cb301c10 <line:121:2, line:122:41>
|     `-BinaryOperator 0x5607cb301bf0 <line:121:9, line:122:41> 'bool' '&&'
|       |-BinaryOperator 0x5607cb3019c0 <line:121:9, col:44> 'bool' '&&'
|       | |-BinaryOperator 0x5607cb301820 <col:9, col:24> 'bool' '=='
|       | | |-ImplicitCastExpr 0x5607cb3017f0 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|       | | | `-ArraySubscriptExpr 0x5607cb3017b0 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|       | | |   |-CXXMemberCallExpr 0x5607cb301770 <col:9, col:16> 'const uint32_t *'
|       | | |   | `-MemberExpr 0x5607cb301740 <col:9> '<bound member function type>' ->data32 0x5607cb24a8c8
|       | | |   |   `-CXXThisExpr 0x5607cb301730 <col:9> 'const IP6Address *' implicit this
|       | | |   `-IntegerLiteral 0x5607cb301790 <col:18> 'int' 0
|       | | `-ImplicitCastExpr 0x5607cb301808 <col:24> 'unsigned int' <IntegralCast>
|       | |   `-IntegerLiteral 0x5607cb3017d0 <col:24> 'int' 0
|       | `-BinaryOperator 0x5607cb3019a0 <col:29, col:44> 'bool' '=='
|       |   |-ImplicitCastExpr 0x5607cb301970 <col:29, col:39> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-ArraySubscriptExpr 0x5607cb301930 <col:29, col:39> 'const uint32_t':'const unsigned int' lvalue
|       |   |   |-CXXMemberCallExpr 0x5607cb3018f0 <col:29, col:36> 'const uint32_t *'
|       |   |   | `-MemberExpr 0x5607cb3018c0 <col:29> '<bound member function type>' ->data32 0x5607cb24a8c8
|       |   |   |   `-CXXThisExpr 0x5607cb3018b0 <col:29> 'const IP6Address *' implicit this
|       |   |   `-IntegerLiteral 0x5607cb301910 <col:38> 'int' 1
|       |   `-ImplicitCastExpr 0x5607cb301988 <col:44> 'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5607cb301950 <col:44> 'int' 0
|       `-BinaryOperator 0x5607cb301bd0 <line:122:9, col:41> 'bool' '=='
|         |-ImplicitCastExpr 0x5607cb301bb8 <col:9, col:19> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-ArraySubscriptExpr 0x5607cb301ad0 <col:9, col:19> 'const uint32_t':'const unsigned int' lvalue
|         |   |-CXXMemberCallExpr 0x5607cb301a90 <col:9, col:16> 'const uint32_t *'
|         |   | `-MemberExpr 0x5607cb301a60 <col:9> '<bound member function type>' ->data32 0x5607cb24a8c8
|         |   |   `-CXXThisExpr 0x5607cb301a50 <col:9> 'const IP6Address *' implicit this
|         |   `-IntegerLiteral 0x5607cb301ab0 <col:18> 'int' 2
|         `-CallExpr 0x5607cb301b90 <col:24, col:41> 'uint32_t':'unsigned int'
|           |-ImplicitCastExpr 0x5607cb301b78 <col:24> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x5607cb301b58 <col:24> 'uint32_t (uint32_t) throw()' lvalue Function 0x5607cb00a4f8 'htonl' 'uint32_t (uint32_t) throw()'
|           `-IntegerLiteral 0x5607cb301b38 <col:30> 'unsigned int' 65535
|-CXXMethodDecl 0x5607cb24b280 <line:129:5, line:131:5> line:129:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x5607cb301db0 <col:38, line:131:5>
|   `-ReturnStmt 0x5607cb301da0 <line:130:9, col:47>
|     `-BinaryOperator 0x5607cb301d80 <col:16, col:47> 'bool' '=='
|       |-ImplicitCastExpr 0x5607cb301d68 <col:16, col:42> 'int' <IntegralCast>
|       | `-ImplicitCastExpr 0x5607cb301d50 <col:16, col:42> 'uint8_t':'unsigned char' <LValueToRValue>
|       |   `-ArraySubscriptExpr 0x5607cb301d10 <col:16, col:42> 'const uint8_t':'const unsigned char' lvalue
|       |     |-ImplicitCastExpr 0x5607cb301cf8 <col:16, col:30> 'const uint8_t *' <ArrayToPointerDecay>
|       |     | `-MemberExpr 0x5607cb301ca8 <col:16, col:30> 'uint8_t const[16]' lvalue .__u6_addr8 0x5607cb006368
|       |     |   `-MemberExpr 0x5607cb301c78 <col:16, col:22> 'const union (anonymous union at /usr/include/netinet/in.h:214:5)':'const in6_addr::(anonymous union at /usr/include/netinet/in.h:214:5)' lvalue .__in6_u 0x5607cb006688
|       |     |     `-MemberExpr 0x5607cb301c48 <col:16> 'const struct in6_addr':'const in6_addr' lvalue ->_addr 0x5607cb24c398
|       |     |       `-CXXThisExpr 0x5607cb301c38 <col:16> 'const IP6Address *' implicit this
|       |     `-IntegerLiteral 0x5607cb301cd8 <col:41> 'int' 0
|       `-IntegerLiteral 0x5607cb301d30 <col:47> 'int' 255
|-CXXMethodDecl 0x5607cb24b340 <line:137:5, line:139:5> line:137:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x5607cb302188 <col:39, line:139:5>
|   `-ReturnStmt 0x5607cb302178 <line:138:9, col:67>
|     `-BinaryOperator 0x5607cb302158 <col:16, col:67> 'bool' '&&'
|       |-BinaryOperator 0x5607cb301fb8 <col:16, col:47> 'bool' '=='
|       | |-ImplicitCastExpr 0x5607cb301fa0 <col:16, col:26> 'uint32_t':'unsigned int' <LValueToRValue>
|       | | `-ArraySubscriptExpr 0x5607cb301eb8 <col:16, col:26> 'const uint32_t':'const unsigned int' lvalue
|       | |   |-CXXMemberCallExpr 0x5607cb301e78 <col:16, col:23> 'const uint32_t *'
|       | |   | `-MemberExpr 0x5607cb301e48 <col:16> '<bound member function type>' ->data32 0x5607cb24a8c8
|       | |   |   `-CXXThisExpr 0x5607cb301e38 <col:16> 'const IP6Address *' implicit this
|       | |   `-IntegerLiteral 0x5607cb301e98 <col:25> 'int' 0
|       | `-CallExpr 0x5607cb301f78 <col:31, col:47> 'uint32_t':'unsigned int'
|       |   |-ImplicitCastExpr 0x5607cb301f60 <col:31> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5607cb301f40 <col:31> 'uint32_t (uint32_t) throw()' lvalue Function 0x5607cb00a4f8 'htonl' 'uint32_t (uint32_t) throw()'
|       |   `-IntegerLiteral 0x5607cb301f20 <col:37> 'unsigned int' 4269801472
|       `-BinaryOperator 0x5607cb302138 <col:52, col:67> 'bool' '=='
|         |-ImplicitCastExpr 0x5607cb302108 <col:52, col:62> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-ArraySubscriptExpr 0x5607cb3020c8 <col:52, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |   |-CXXMemberCallExpr 0x5607cb302088 <col:52, col:59> 'const uint32_t *'
|         |   | `-MemberExpr 0x5607cb302058 <col:52> '<bound member function type>' ->data32 0x5607cb24a8c8
|         |   |   `-CXXThisExpr 0x5607cb302048 <col:52> 'const IP6Address *' implicit this
|         |   `-IntegerLiteral 0x5607cb3020a8 <col:61> 'int' 1
|         `-ImplicitCastExpr 0x5607cb302120 <col:67> 'unsigned int' <IntegralCast>
|           `-IntegerLiteral 0x5607cb3020e8 <col:67> 'int' 0
|-CXXMethodDecl 0x5607cb24b400 <line:145:5, col:29> col:15 ip4_address 'IPAddress () const'
|-CXXMethodDecl 0x5607cb24b5a8 <line:154:5, col:53> col:24 operator&= 'IP6Address &(const IP6Address &)' inline
| `-ParmVarDecl 0x5607cb24b4b0 <col:35, col:52> col:53 'const IP6Address &'
|-CXXMethodDecl 0x5607cb24b768 <line:155:5, col:58> col:24 operator&= 'IP6Address &(const struct in6_addr &)' inline
| `-ParmVarDecl 0x5607cb24b678 <col:35, col:57> col:58 'const struct in6_addr &'
|-CXXMethodDecl 0x5607cb24b8b0 <line:156:5, col:53> col:24 operator|= 'IP6Address &(const IP6Address &)' inline
| `-ParmVarDecl 0x5607cb24b820 <col:35, col:52> col:53 'const IP6Address &'
|-CXXMethodDecl 0x5607cb24ba10 <line:157:5, col:58> col:24 operator|= 'IP6Address &(const struct in6_addr &)' inline
| `-ParmVarDecl 0x5607cb24b980 <col:35, col:57> col:58 'const struct in6_addr &'
|-CXXMethodDecl 0x5607cb24bb70 <line:159:5, col:57> col:24 operator= 'IP6Address &(const struct in6_addr &)' inline
| `-ParmVarDecl 0x5607cb24bae0 <col:34, col:56> col:57 'const struct in6_addr &'
|-CXXMethodDecl 0x5607cb24bd38 <line:160:5, col:56> col:24 used operator= 'IP6Address &(const struct in_addr &)' inline
| `-ParmVarDecl 0x5607cb24bc40 <col:34, col:55> col:56 'const struct in_addr &'
|-CXXMethodDecl 0x5607cb24beb8 <line:162:5, col:35> col:10 used unparse 'void (StringAccum &) const'
| `-ParmVarDecl 0x5607cb24bdf0 <col:18, col:31> col:31 sa 'StringAccum &'
|-CXXMethodDecl 0x5607cb24bf80 <line:163:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x5607cb24c040 <line:164:5, col:31> col:12 unparse_expanded 'String () const'
|-CXXMethodDecl 0x5607cb24c100 <line:166:5, col:42> col:12 s 'String () const'
| `-CompoundStmt 0x5607cb302308 <col:22, col:42>
|   `-ReturnStmt 0x5607cb3022f8 <col:24, col:39>
|     `-ExprWithCleanups 0x5607cb3022e0 <col:31, col:39> 'String'
|       `-CXXConstructExpr 0x5607cb3022b0 <col:31, col:39> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5607cb302298 <col:31, col:39> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5607cb302278 <col:31, col:39> 'String' (CXXTemporary 0x5607cb302278)
|             `-CXXMemberCallExpr 0x5607cb302250 <col:31, col:39> 'String'
|               `-MemberExpr 0x5607cb302220 <col:31> '<bound member function type>' ->unparse 0x5607cb24bf80
|                 `-CXXThisExpr 0x5607cb302210 <col:31> 'const IP6Address *' implicit this
|-CXXConversionDecl 0x5607cb24c1d0 <line:167:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x5607cb24c278 <col:51> "" ""
|-TypedefDecl 0x5607cb24c2f8 <line:169:5, col:31> col:31 parameter_type 'const IP6Address &'
| `-LValueReferenceType 0x5607cb24aaf0 'const IP6Address &'
|   `-QualType 0x5607cb28e0e1 'const IP6Address' const
|     `-RecordType 0x5607cb28e0e0 'IP6Address'
|       `-CXXRecord 0x5607cb248d00 'IP6Address'
|-AccessSpecDecl 0x5607cb24c350 <line:171:3, col:10> col:3 private
|-FieldDecl 0x5607cb24c398 <line:173:5, col:21> col:21 referenced _addr 'struct in6_addr':'in6_addr'
|-CXXMethodDecl 0x5607cb24d2d0 <line:14:7> col:7 implicit operator= 'IP6Address &(const IP6Address &)' inline default trivial noexcept-unevaluated 0x5607cb24d2d0
| `-ParmVarDecl 0x5607cb24d3a8 <col:7> col:7 'const IP6Address &'
|-CXXMethodDecl 0x5607cb24da78 <col:7> col:7 implicit operator= 'IP6Address &(IP6Address &&)' inline default trivial noexcept-unevaluated 0x5607cb24da78
| `-ParmVarDecl 0x5607cb24db88 <col:7> col:7 'IP6Address &&'
|-CXXConstructorDecl 0x5607cb24dbf8 <col:7> col:7 implicit constexpr IP6Address 'void (const IP6Address &)' inline default trivial noexcept-unevaluated 0x5607cb24dbf8
| `-ParmVarDecl 0x5607cb24dd08 <col:7> col:7 'const IP6Address &'
|-CXXConstructorDecl 0x5607cb24de60 <col:7> col:7 implicit used constexpr IP6Address 'void (IP6Address &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5607cb24df78 <col:7> col:7 used 'IP6Address &&'
| |-CXXCtorInitializer Field 0x5607cb24c398 '_addr' 'struct in6_addr':'in6_addr'
| | `-CXXConstructExpr 0x5607cb309658 <col:7> 'struct in6_addr':'in6_addr' 'void (in6_addr &&) noexcept'
| |   `-MemberExpr 0x5607cb309500 <col:7> 'struct in6_addr':'in6_addr' xvalue ._addr 0x5607cb24c398
| |     `-CXXStaticCastExpr 0x5607cb3094d0 <col:7> 'IP6Address' xvalue static_cast<class IP6Address &&> <NoOp>
| |       `-DeclRefExpr 0x5607cb3094a0 <col:7> 'IP6Address' lvalue ParmVar 0x5607cb24df78 '' 'IP6Address &&'
| `-CompoundStmt 0x5607cb3096b8 <col:7>
`-CXXDestructorDecl 0x5607cb309308 <col:7> col:7 implicit referenced ~IP6Address 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IP6Address = type { %struct.in6_addr }
  NonVirtualBaseLLVMType:%class.IP6Address = type { %struct.in6_addr }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607cb2dfbe8 prev 0x5607cb2c7150 <../dummy_inc/click/etheraddress.hh:9:1, line:148:1> line:9:7 referenced class EtherAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-PackedAttr 0x5607cb2e1658 <line:148:18>
|-CXXRecordDecl 0x5607cb2dfce0 <line:9:1, col:7> col:7 implicit referenced class EtherAddress
|-AccessSpecDecl 0x5607cb2dfd70 <col:22, col:28> col:22 public
|-TypedefDecl 0x5607cb2dfda8 <line:11:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x5607caebaae0 'uninitialized_type'
|   `-CXXRecord 0x5607caebaa48 'uninitialized_type'
|-CXXConstructorDecl 0x5607cb2dfe38 <line:14:5, line:16:5> line:14:12 used EtherAddress 'void ()' inline
| `-CompoundStmt 0x5607cb2e1958 <col:27, line:16:5>
|   `-BinaryOperator 0x5607cb2e1938 <line:15:2, col:35> 'uint16_t':'unsigned short' lvalue '='
|     |-ArraySubscriptExpr 0x5607cb2e1740 <col:2, col:9> 'uint16_t':'unsigned short' lvalue
|     | |-ImplicitCastExpr 0x5607cb2e1728 <col:2> 'uint16_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5607cb2e16d8 <col:2> 'uint16_t [3]' lvalue ->_data 0x5607cb2e1458
|     | |   `-CXXThisExpr 0x5607cb2e16c8 <col:2> 'EtherAddress *' implicit this
|     | `-IntegerLiteral 0x5607cb2e1708 <col:8> 'int' 0
|     `-ImplicitCastExpr 0x5607cb2e1920 <col:13, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-BinaryOperator 0x5607cb2e1900 <col:13, col:35> 'uint16_t':'unsigned short' lvalue '='
|         |-ArraySubscriptExpr 0x5607cb2e17d8 <col:13, col:20> 'uint16_t':'unsigned short' lvalue
|         | |-ImplicitCastExpr 0x5607cb2e17c0 <col:13> 'uint16_t *' <ArrayToPointerDecay>
|         | | `-MemberExpr 0x5607cb2e1770 <col:13> 'uint16_t [3]' lvalue ->_data 0x5607cb2e1458
|         | |   `-CXXThisExpr 0x5607cb2e1760 <col:13> 'EtherAddress *' implicit this
|         | `-IntegerLiteral 0x5607cb2e17a0 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x5607cb2e18e8 <col:24, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|           `-BinaryOperator 0x5607cb2e18c8 <col:24, col:35> 'uint16_t':'unsigned short' lvalue '='
|             |-ArraySubscriptExpr 0x5607cb2e1870 <col:24, col:31> 'uint16_t':'unsigned short' lvalue
|             | |-ImplicitCastExpr 0x5607cb2e1858 <col:24> 'uint16_t *' <ArrayToPointerDecay>
|             | | `-MemberExpr 0x5607cb2e1808 <col:24> 'uint16_t [3]' lvalue ->_data 0x5607cb2e1458
|             | |   `-CXXThisExpr 0x5607cb2e17f8 <col:24> 'EtherAddress *' implicit this
|             | `-IntegerLiteral 0x5607cb2e1838 <col:30> 'int' 2
|             `-ImplicitCastExpr 0x5607cb2e18b0 <col:35> 'uint16_t':'unsigned short' <IntegralCast>
|               `-IntegerLiteral 0x5607cb2e1890 <col:35> 'int' 0
|-CXXConstructorDecl 0x5607cb2dff88 <line:22:5, line:24:5> line:22:21 EtherAddress 'void (const unsigned char *)' inline
| |-ParmVarDecl 0x5607cb2dfef8 <col:34, col:55> col:55 used data 'const unsigned char *'
| `-CompoundStmt 0x5607cb2e1b20 <col:61, line:24:5>
|   `-CallExpr 0x5607cb2e1a70 <line:23:2, col:23> 'void *'
|     |-ImplicitCastExpr 0x5607cb2e1a58 <col:2> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5607cb2e1a38 <col:2> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x5607cafc4858 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
|     |-ImplicitCastExpr 0x5607cb2e1ac0 <col:9> 'void *' <BitCast>
|     | `-ImplicitCastExpr 0x5607cb2e1aa8 <col:9> 'uint16_t *' <ArrayToPointerDecay>
|     |   `-MemberExpr 0x5607cb2e19c8 <col:9> 'uint16_t [3]' lvalue ->_data 0x5607cb2e1458
|     |     `-CXXThisExpr 0x5607cb2e19b8 <col:9> 'EtherAddress *' implicit this
|     |-ImplicitCastExpr 0x5607cb2e1af0 <col:16> 'const void *' <BitCast>
|     | `-ImplicitCastExpr 0x5607cb2e1ad8 <col:16> 'const unsigned char *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5607cb2e19f8 <col:16> 'const unsigned char *' lvalue ParmVar 0x5607cb2dfef8 'data' 'const unsigned char *'
|     `-ImplicitCastExpr 0x5607cb2e1b08 <col:22> 'size_t':'unsigned long' <IntegralCast>
|       `-IntegerLiteral 0x5607cb2e1a18 <col:22> 'int' 6
|-CXXConstructorDecl 0x5607cb2e00d8 <line:27:5, line:29:5> line:27:12 EtherAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x5607cb2e0048 <col:25, col:51> col:51 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x5607cb2e1b90 <col:59, line:29:5>
|   `-CStyleCastExpr 0x5607cb2e1b68 <line:28:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x5607cb2e1b38 <col:9> 'const uninitialized_type' lvalue ParmVar 0x5607cb2e0048 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x5607cb2e01d8 <line:32:5, line:34:5> line:32:25 used make_broadcast 'EtherAddress ()' static
| `-CompoundStmt 0x5607cb2e22d8 <col:42, line:34:5>
|   `-ReturnStmt 0x5607cb2e22c8 <line:33:2, col:28>
|     `-ExprWithCleanups 0x5607cb2e22b0 <col:9, col:28> 'EtherAddress'
|       `-CXXConstructExpr 0x5607cb2e2280 <col:9, col:28> 'EtherAddress' 'void (EtherAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5607cb2e20b8 <col:9, col:28> 'EtherAddress' xvalue
|           `-CXXFunctionalCastExpr 0x5607cb2e2030 <col:9, col:28> 'EtherAddress' functional cast to class EtherAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x5607cb2e1f20 <col:9, col:28> 'EtherAddress' 'void (uint16_t)'
|               `-ImplicitCastExpr 0x5607cb2e1f08 <col:22> 'uint16_t':'unsigned short' <IntegralCast>
|                 `-IntegerLiteral 0x5607cb2e1bb8 <col:22> 'int' 65535
|-CXXMethodDecl 0x5607cb2e0298 <line:36:5, col:70> col:32 broadcast 'EtherAddress ()' static inline
| `-DeprecatedAttr 0x5607cb2e0338 <col:59> "" ""
|-TypedefDecl 0x5607cb2e04b8 <line:39:5, col:59> col:34 referenced unspecified_bool_type 'bool (EtherAddress::*)() const'
| `-MemberPointerType 0x5607cb2e0430 'bool (EtherAddress::*)() const'
|   |-RecordType 0x5607cb2c71e0 'EtherAddress'
|   | `-CXXRecord 0x5607cb2dfbe8 'EtherAddress'
|   `-ParenType 0x5607cb2e03d0 'bool () const' sugar
|     `-FunctionProtoType 0x5607cae0d860 'bool () const' const cdecl
|       `-BuiltinType 0x5607cad63330 'bool'
|-CXXConversionDecl 0x5607cb2e05f8 <line:41:5, line:43:5> line:41:12 operator bool (EtherAddress::*)() const 'EtherAddress::unspecified_bool_type () const' inline
| `-CompoundStmt 0x5607cb2e26b8 <col:51, line:43:5>
|   `-ReturnStmt 0x5607cb2e26a8 <line:42:2, col:70>
|     `-ConditionalOperator 0x5607cb2e2678 <col:9, col:70> 'bool (EtherAddress::*)() const'
|       |-BinaryOperator 0x5607cb2e25a0 <col:9, col:40> 'bool' '||'
|       | |-BinaryOperator 0x5607cb2e24b8 <col:9, col:28> 'bool' '||'
|       | | |-ImplicitCastExpr 0x5607cb2e2470 <col:9, col:16> 'bool' <IntegralToBoolean>
|       | | | `-ImplicitCastExpr 0x5607cb2e2458 <col:9, col:16> 'uint16_t':'unsigned short' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x5607cb2e23a0 <col:9, col:16> 'const uint16_t':'const unsigned short' lvalue
|       | | |     |-ImplicitCastExpr 0x5607cb2e2388 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       | | |     | `-MemberExpr 0x5607cb2e2300 <col:9> 'uint16_t const[3]' lvalue ->_data 0x5607cb2e1458
|       | | |     |   `-CXXThisExpr 0x5607cb2e22f0 <col:9> 'const EtherAddress *' implicit this
|       | | |     `-IntegerLiteral 0x5607cb2e2330 <col:15> 'int' 0
|       | | `-ImplicitCastExpr 0x5607cb2e24a0 <col:21, col:28> 'bool' <IntegralToBoolean>
|       | |   `-ImplicitCastExpr 0x5607cb2e2488 <col:21, col:28> 'uint16_t':'unsigned short' <LValueToRValue>
|       | |     `-ArraySubscriptExpr 0x5607cb2e2438 <col:21, col:28> 'const uint16_t':'const unsigned short' lvalue
|       | |       |-ImplicitCastExpr 0x5607cb2e2420 <col:21> 'const uint16_t *' <ArrayToPointerDecay>
|       | |       | `-MemberExpr 0x5607cb2e23d0 <col:21> 'uint16_t const[3]' lvalue ->_data 0x5607cb2e1458
|       | |       |   `-CXXThisExpr 0x5607cb2e23c0 <col:21> 'const EtherAddress *' implicit this
|       | |       `-IntegerLiteral 0x5607cb2e2400 <col:27> 'int' 1
|       | `-ImplicitCastExpr 0x5607cb2e2588 <col:33, col:40> 'bool' <IntegralToBoolean>
|       |   `-ImplicitCastExpr 0x5607cb2e2570 <col:33, col:40> 'uint16_t':'unsigned short' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x5607cb2e2550 <col:33, col:40> 'const uint16_t':'const unsigned short' lvalue
|       |       |-ImplicitCastExpr 0x5607cb2e2538 <col:33> 'const uint16_t *' <ArrayToPointerDecay>
|       |       | `-MemberExpr 0x5607cb2e24e8 <col:33> 'uint16_t const[3]' lvalue ->_data 0x5607cb2e1458
|       |       |   `-CXXThisExpr 0x5607cb2e24d8 <col:33> 'const EtherAddress *' implicit this
|       |       `-IntegerLiteral 0x5607cb2e2518 <col:39> 'int' 2
|       |-UnaryOperator 0x5607cb2e2628 <col:44, col:59> 'bool (EtherAddress::*)() const' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x5607cb2e25f8 <col:45, col:59> 'bool () const' CXXMethod 0x5607cb2e06c8 'is_group' 'bool () const'
|       `-ImplicitCastExpr 0x5607cb2e2660 <col:70> 'bool (EtherAddress::*)() const' <NullToMemberPointer>
|         `-IntegerLiteral 0x5607cb2e2640 <col:70> 'int' 0
|-CXXMethodDecl 0x5607cb2e06c8 <line:49:5, line:51:5> line:49:17 used is_group 'bool () const' inline
| `-CompoundStmt 0x5607cb2e2878 <col:34, line:51:5>
|   `-ReturnStmt 0x5607cb2e2868 <line:50:2, col:21>
|     `-ImplicitCastExpr 0x5607cb2e2850 <col:9, col:21> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x5607cb2e2830 <col:9, col:21> 'int' '&'
|         |-ImplicitCastExpr 0x5607cb2e2818 <col:9, col:17> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5607cb2e2800 <col:9, col:17> 'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5607cb2e27c0 <col:9, col:17> 'const unsigned char' lvalue
|         |     |-CXXMemberCallExpr 0x5607cb2e2780 <col:9, col:14> 'const unsigned char *'
|         |     | `-MemberExpr 0x5607cb2e2750 <col:9> '<bound member function type>' ->data 0x5607cb2e0b60
|         |     |   `-CXXThisExpr 0x5607cb2e2740 <col:9> 'const EtherAddress *' implicit this
|         |     `-IntegerLiteral 0x5607cb2e27a0 <col:16> 'int' 0
|         `-IntegerLiteral 0x5607cb2e27e0 <col:21> 'int' 1
|-CXXMethodDecl 0x5607cb2e0788 <line:57:5, line:59:5> line:57:17 is_local 'bool () const' inline
| `-CompoundStmt 0x5607cb2e2a38 <col:34, line:59:5>
|   `-ReturnStmt 0x5607cb2e2a28 <line:58:2, col:21>
|     `-ImplicitCastExpr 0x5607cb2e2a10 <col:9, col:21> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x5607cb2e29f0 <col:9, col:21> 'int' '&'
|         |-ImplicitCastExpr 0x5607cb2e29d8 <col:9, col:17> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5607cb2e29c0 <col:9, col:17> 'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5607cb2e2980 <col:9, col:17> 'const unsigned char' lvalue
|         |     |-CXXMemberCallExpr 0x5607cb2e2940 <col:9, col:14> 'const unsigned char *'
|         |     | `-MemberExpr 0x5607cb2e2910 <col:9> '<bound member function type>' ->data 0x5607cb2e0b60
|         |     |   `-CXXThisExpr 0x5607cb2e2900 <col:9> 'const EtherAddress *' implicit this
|         |     `-IntegerLiteral 0x5607cb2e2960 <col:16> 'int' 0
|         `-IntegerLiteral 0x5607cb2e29a0 <col:21> 'int' 2
|-CXXMethodDecl 0x5607cb2e0848 <line:64:5, line:66:5> line:64:17 used is_broadcast 'bool () const' inline
| `-CompoundStmt 0x5607cb2e2d38 <col:38, line:66:5>
|   `-ReturnStmt 0x5607cb2e2d28 <line:65:2, col:43>
|     `-BinaryOperator 0x5607cb2e2d08 <col:9, col:43> 'bool' '=='
|       |-BinaryOperator 0x5607cb2e2cc8 <col:9, col:38> 'int' '+'
|       | |-BinaryOperator 0x5607cb2e2be0 <col:9, col:27> 'int' '+'
|       | | |-ImplicitCastExpr 0x5607cb2e2b98 <col:9, col:16> 'int' <IntegralCast>
|       | | | `-ImplicitCastExpr 0x5607cb2e2b80 <col:9, col:16> 'uint16_t':'unsigned short' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x5607cb2e2ac8 <col:9, col:16> 'const uint16_t':'const unsigned short' lvalue
|       | | |     |-ImplicitCastExpr 0x5607cb2e2ab0 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       | | |     | `-MemberExpr 0x5607cb2e2a60 <col:9> 'uint16_t const[3]' lvalue ->_data 0x5607cb2e1458
|       | | |     |   `-CXXThisExpr 0x5607cb2e2a50 <col:9> 'const EtherAddress *' implicit this
|       | | |     `-IntegerLiteral 0x5607cb2e2a90 <col:15> 'int' 0
|       | | `-ImplicitCastExpr 0x5607cb2e2bc8 <col:20, col:27> 'int' <IntegralCast>
|       | |   `-ImplicitCastExpr 0x5607cb2e2bb0 <col:20, col:27> 'uint16_t':'unsigned short' <LValueToRValue>
|       | |     `-ArraySubscriptExpr 0x5607cb2e2b60 <col:20, col:27> 'const uint16_t':'const unsigned short' lvalue
|       | |       |-ImplicitCastExpr 0x5607cb2e2b48 <col:20> 'const uint16_t *' <ArrayToPointerDecay>
|       | |       | `-MemberExpr 0x5607cb2e2af8 <col:20> 'uint16_t const[3]' lvalue ->_data 0x5607cb2e1458
|       | |       |   `-CXXThisExpr 0x5607cb2e2ae8 <col:20> 'const EtherAddress *' implicit this
|       | |       `-IntegerLiteral 0x5607cb2e2b28 <col:26> 'int' 1
|       | `-ImplicitCastExpr 0x5607cb2e2cb0 <col:31, col:38> 'int' <IntegralCast>
|       |   `-ImplicitCastExpr 0x5607cb2e2c98 <col:31, col:38> 'uint16_t':'unsigned short' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x5607cb2e2c78 <col:31, col:38> 'const uint16_t':'const unsigned short' lvalue
|       |       |-ImplicitCastExpr 0x5607cb2e2c60 <col:31> 'const uint16_t *' <ArrayToPointerDecay>
|       |       | `-MemberExpr 0x5607cb2e2c10 <col:31> 'uint16_t const[3]' lvalue ->_data 0x5607cb2e1458
|       |       |   `-CXXThisExpr 0x5607cb2e2c00 <col:31> 'const EtherAddress *' implicit this
|       |       `-IntegerLiteral 0x5607cb2e2c40 <col:37> 'int' 2
|       `-IntegerLiteral 0x5607cb2e2ce8 <col:43> 'int' 196605
|-CXXMethodDecl 0x5607cb2e09c8 <line:69:5, line:75:5> line:69:24 is_broadcast 'bool (const unsigned char *)' static inline
| |-ParmVarDecl 0x5607cb2e0900 <col:37, col:58> col:58 used data 'const unsigned char *'
| `-CompoundStmt 0x5607cb2e2e88 <col:64, line:75:5>
|   `-ReturnStmt 0x5607cb2e2e78 <line:71:2, col:68>
|     `-CXXMemberCallExpr 0x5607cb2e2e58 <col:9, col:68> 'bool'
|       `-MemberExpr 0x5607cb2e2e28 <col:9, col:55> '<bound member function type>' ->is_broadcast 0x5607cb2e0848
|         `-CXXReinterpretCastExpr 0x5607cb2e2d98 <col:9, col:52> 'const EtherAddress *' reinterpret_cast<const class EtherAddress *> <BitCast>
|           `-ImplicitCastExpr 0x5607cb2e2d80 <col:48> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|             `-DeclRefExpr 0x5607cb2e2d50 <col:48> 'const unsigned char *' lvalue ParmVar 0x5607cb2e0900 'data' 'const unsigned char *'
|-CXXMethodDecl 0x5607cb2e0a98 <line:78:5, line:80:5> line:78:27 data 'unsigned char *()' inline
| `-CompoundStmt 0x5607cb2e2f50 <col:34, line:80:5>
|   `-ReturnStmt 0x5607cb2e2f40 <line:79:2, col:48>
|     `-CXXReinterpretCastExpr 0x5607cb2e2f10 <col:9, col:48> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
|       `-ImplicitCastExpr 0x5607cb2e2ef8 <col:43> 'uint16_t *' <ArrayToPointerDecay> part_of_explicit_cast
|         `-MemberExpr 0x5607cb2e2eb0 <col:43> 'uint16_t [3]' lvalue ->_data 0x5607cb2e1458
|           `-CXXThisExpr 0x5607cb2e2ea0 <col:43> 'EtherAddress *' implicit this
|-CXXMethodDecl 0x5607cb2e0b60 <line:83:5, line:85:5> line:83:33 used data 'const unsigned char *() const' inline
| `-CompoundStmt 0x5607cb2e3018 <col:46, line:85:5>
|   `-ReturnStmt 0x5607cb2e3008 <line:84:2, col:54>
|     `-CXXReinterpretCastExpr 0x5607cb2e2fd8 <col:9, col:54> 'const unsigned char *' reinterpret_cast<const unsigned char *> <BitCast>
|       `-ImplicitCastExpr 0x5607cb2e2fc0 <col:49> 'const uint16_t *' <ArrayToPointerDecay> part_of_explicit_cast
|         `-MemberExpr 0x5607cb2e2f78 <col:49> 'uint16_t const[3]' lvalue ->_data 0x5607cb2e1458
|           `-CXXThisExpr 0x5607cb2e2f68 <col:49> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x5607cb2e0ca8 <line:89:5, line:91:5> line:89:28 used sdata 'const uint16_t *() const' inline
| `-CompoundStmt 0x5607cb2e3098 <col:42, line:91:5>
|   `-ReturnStmt 0x5607cb2e3088 <line:90:2, col:9>
|     `-ImplicitCastExpr 0x5607cb2e3070 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       `-MemberExpr 0x5607cb2e3040 <col:9> 'uint16_t const[3]' lvalue ->_data 0x5607cb2e1458
|         `-CXXThisExpr 0x5607cb2e3030 <col:9> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x5607cb2e0d98 <line:94:5, line:97:5> line:94:19 hashcode 'size_t () const' inline
| `-CompoundStmt 0x5607cb2e34a8 <col:36, line:97:5>
|   `-ReturnStmt 0x5607cb2e3498 <line:95:2, line:96:31>
|     `-BinaryOperator 0x5607cb2e3478 <line:95:9, line:96:31> 'unsigned long' '^'
|       |-ParenExpr 0x5607cb2e32f8 <line:95:9, col:46> 'unsigned long'
|       | `-BinaryOperator 0x5607cb2e32d8 <col:10, col:45> 'unsigned long' '|'
|       |   |-ImplicitCastExpr 0x5607cb2e32c0 <col:10, col:17> 'unsigned long' <IntegralCast>
|       |   | `-ImplicitCastExpr 0x5607cb2e32a8 <col:10, col:17> 'uint16_t':'unsigned short' <LValueToRValue>
|       |   |   `-ArraySubscriptExpr 0x5607cb2e3128 <col:10, col:17> 'const uint16_t':'const unsigned short' lvalue
|       |   |     |-ImplicitCastExpr 0x5607cb2e3110 <col:10> 'const uint16_t *' <ArrayToPointerDecay>
|       |   |     | `-MemberExpr 0x5607cb2e30c0 <col:10> 'uint16_t const[3]' lvalue ->_data 0x5607cb2e1458
|       |   |     |   `-CXXThisExpr 0x5607cb2e30b0 <col:10> 'const EtherAddress *' implicit this
|       |   |     `-IntegerLiteral 0x5607cb2e30f0 <col:16> 'int' 2
|       |   `-ParenExpr 0x5607cb2e3288 <col:21, col:45> 'size_t':'unsigned long'
|       |     `-BinaryOperator 0x5607cb2e3268 <col:22, col:43> 'size_t':'unsigned long' '<<'
|       |       |-CStyleCastExpr 0x5607cb2e3220 <col:22, col:38> 'size_t':'unsigned long' <NoOp>
|       |       | `-ImplicitCastExpr 0x5607cb2e3208 <col:31, col:38> 'size_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|       |       |   `-ImplicitCastExpr 0x5607cb2e31f0 <col:31, col:38> 'uint16_t':'unsigned short' <LValueToRValue> part_of_explicit_cast
|       |       |     `-ArraySubscriptExpr 0x5607cb2e31c0 <col:31, col:38> 'const uint16_t':'const unsigned short' lvalue
|       |       |       |-ImplicitCastExpr 0x5607cb2e31a8 <col:31> 'const uint16_t *' <ArrayToPointerDecay>
|       |       |       | `-MemberExpr 0x5607cb2e3158 <col:31> 'uint16_t const[3]' lvalue ->_data 0x5607cb2e1458
|       |       |       |   `-CXXThisExpr 0x5607cb2e3148 <col:31> 'const EtherAddress *' implicit this
|       |       |       `-IntegerLiteral 0x5607cb2e3188 <col:37> 'int' 1
|       |       `-IntegerLiteral 0x5607cb2e3248 <col:43> 'int' 16
|       `-ParenExpr 0x5607cb2e3458 <line:96:8, col:31> 'size_t':'unsigned long'
|         `-BinaryOperator 0x5607cb2e3438 <col:9, col:30> 'size_t':'unsigned long' '<<'
|           |-CStyleCastExpr 0x5607cb2e33f0 <col:9, col:25> 'size_t':'unsigned long' <NoOp>
|           | `-ImplicitCastExpr 0x5607cb2e33d8 <col:18, col:25> 'size_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           |   `-ImplicitCastExpr 0x5607cb2e33c0 <col:18, col:25> 'uint16_t':'unsigned short' <LValueToRValue> part_of_explicit_cast
|           |     `-ArraySubscriptExpr 0x5607cb2e3390 <col:18, col:25> 'const uint16_t':'const unsigned short' lvalue
|           |       |-ImplicitCastExpr 0x5607cb2e3378 <col:18> 'const uint16_t *' <ArrayToPointerDecay>
|           |       | `-MemberExpr 0x5607cb2e3328 <col:18> 'uint16_t const[3]' lvalue ->_data 0x5607cb2e1458
|           |       |   `-CXXThisExpr 0x5607cb2e3318 <col:18> 'const EtherAddress *' implicit this
|           |       `-IntegerLiteral 0x5607cb2e3358 <col:24> 'int' 0
|           `-IntegerLiteral 0x5607cb2e3418 <col:30> 'int' 9
|-CXXMethodDecl 0x5607cb2e0e58 <line:109:5, line:111:5> line:109:19 used unparse 'String () const' inline
| `-CompoundStmt 0x5607cb2e35b8 <col:35, line:111:5>
|   `-ReturnStmt 0x5607cb2e35a8 <line:110:2, col:22>
|     `-ExprWithCleanups 0x5607cb2e3590 <col:9, col:22> 'String'
|       `-CXXConstructExpr 0x5607cb2e3560 <col:9, col:22> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5607cb2e3548 <col:9, col:22> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5607cb2e3528 <col:9, col:22> 'String' (CXXTemporary 0x5607cb2e3528)
|             `-CXXMemberCallExpr 0x5607cb2e3500 <col:9, col:22> 'String'
|               `-MemberExpr 0x5607cb2e34d0 <col:9> '<bound member function type>' ->unparse_dash 0x5607cb2e0fd8
|                 `-CXXThisExpr 0x5607cb2e34c0 <col:9> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x5607cb2e0f18 <line:118:5, col:28> col:12 unparse_colon 'String () const'
|-CXXMethodDecl 0x5607cb2e0fd8 <line:126:5, col:27> col:12 used unparse_dash 'String () const'
|-CXXMethodDecl 0x5607cb2e1098 <line:131:5, col:55> col:19 s 'String () const' inline
| `-DeprecatedAttr 0x5607cb2e1138 <col:44> "" ""
|-CXXConversionDecl 0x5607cb2e11d8 <line:136:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x5607cb2e1280 <col:51> "" ""
|-TypedefDecl 0x5607cb2e1338 <line:138:5, col:33> col:33 parameter_type 'const EtherAddress &'
| `-LValueReferenceType 0x5607cb2e1300 'const EtherAddress &'
|   `-QualType 0x5607cb2c71e1 'const EtherAddress' const
|     `-RecordType 0x5607cb2c71e0 'EtherAddress'
|       `-CXXRecord 0x5607cb2dfbe8 'EtherAddress'
|-AccessSpecDecl 0x5607cb2e1390 <line:140:2, col:9> col:2 private
|-FieldDecl 0x5607cb2e1458 <line:142:5, col:21> col:14 referenced _data 'uint16_t [3]'
|-CXXConstructorDecl 0x5607cb2e15a8 <line:144:5, line:146:5> line:144:5 used EtherAddress 'void (uint16_t)'
| |-ParmVarDecl 0x5607cb2e14b8 <col:18, col:27> col:27 used m 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5607cb2e3860 <col:30, line:146:5>
|   `-BinaryOperator 0x5607cb2e3840 <line:145:2, col:35> 'uint16_t':'unsigned short' lvalue '='
|     |-ArraySubscriptExpr 0x5607cb2e3648 <col:2, col:9> 'uint16_t':'unsigned short' lvalue
|     | |-ImplicitCastExpr 0x5607cb2e3630 <col:2> 'uint16_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5607cb2e35e0 <col:2> 'uint16_t [3]' lvalue ->_data 0x5607cb2e1458
|     | |   `-CXXThisExpr 0x5607cb2e35d0 <col:2> 'EtherAddress *' implicit this
|     | `-IntegerLiteral 0x5607cb2e3610 <col:8> 'int' 0
|     `-ImplicitCastExpr 0x5607cb2e3828 <col:13, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-BinaryOperator 0x5607cb2e3808 <col:13, col:35> 'uint16_t':'unsigned short' lvalue '='
|         |-ArraySubscriptExpr 0x5607cb2e36e0 <col:13, col:20> 'uint16_t':'unsigned short' lvalue
|         | |-ImplicitCastExpr 0x5607cb2e36c8 <col:13> 'uint16_t *' <ArrayToPointerDecay>
|         | | `-MemberExpr 0x5607cb2e3678 <col:13> 'uint16_t [3]' lvalue ->_data 0x5607cb2e1458
|         | |   `-CXXThisExpr 0x5607cb2e3668 <col:13> 'EtherAddress *' implicit this
|         | `-IntegerLiteral 0x5607cb2e36a8 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x5607cb2e37f0 <col:24, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|           `-BinaryOperator 0x5607cb2e37d0 <col:24, col:35> 'uint16_t':'unsigned short' lvalue '='
|             |-ArraySubscriptExpr 0x5607cb2e3778 <col:24, col:31> 'uint16_t':'unsigned short' lvalue
|             | |-ImplicitCastExpr 0x5607cb2e3760 <col:24> 'uint16_t *' <ArrayToPointerDecay>
|             | | `-MemberExpr 0x5607cb2e3710 <col:24> 'uint16_t [3]' lvalue ->_data 0x5607cb2e1458
|             | |   `-CXXThisExpr 0x5607cb2e3700 <col:24> 'EtherAddress *' implicit this
|             | `-IntegerLiteral 0x5607cb2e3740 <col:30> 'int' 2
|             `-ImplicitCastExpr 0x5607cb2e37b8 <col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|               `-DeclRefExpr 0x5607cb2e3798 <col:35> 'uint16_t':'unsigned short' lvalue ParmVar 0x5607cb2e14b8 'm' 'uint16_t':'unsigned short'
|-CXXConstructorDecl 0x5607cb2e1bd8 <line:9:7> col:7 implicit constexpr EtherAddress 'void (const EtherAddress &)' inline default trivial noexcept-unevaluated 0x5607cb2e1bd8
| `-ParmVarDecl 0x5607cb2e1ce8 <col:7> col:7 'const EtherAddress &'
|-CXXConstructorDecl 0x5607cb2e1d88 <col:7> col:7 implicit used constexpr EtherAddress 'void (EtherAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5607cb2e1e98 <col:7> col:7 used 'EtherAddress &&'
| |-CXXCtorInitializer Field 0x5607cb2e1458 '_data' 'uint16_t [3]'
| | `-ArrayInitLoopExpr 0x5607cb2e2220 <col:7> 'uint16_t [3]'
| |   |-OpaqueValueExpr 0x5607cb2e21a8 <col:7> 'uint16_t [3]' xvalue
| |   | `-MemberExpr 0x5607cb2e2160 <col:7> 'uint16_t [3]' xvalue ._data 0x5607cb2e1458
| |   |   `-CXXStaticCastExpr 0x5607cb2e2130 <col:7> 'EtherAddress' xvalue static_cast<class EtherAddress &&> <NoOp>
| |   |     `-DeclRefExpr 0x5607cb2e2100 <col:7> 'EtherAddress' lvalue ParmVar 0x5607cb2e1e98 '' 'EtherAddress &&'
| |   `-ImplicitCastExpr 0x5607cb2e2208 <col:7> 'uint16_t':'unsigned short' <LValueToRValue>
| |     `-ArraySubscriptExpr 0x5607cb2e21e8 <col:7> 'uint16_t':'unsigned short' xvalue
| |       |-ImplicitCastExpr 0x5607cb2e21d0 <col:7> 'uint16_t *' <ArrayToPointerDecay>
| |       | `-OpaqueValueExpr 0x5607cb2e21a8 <col:7> 'uint16_t [3]' xvalue
| |       |   `-MemberExpr 0x5607cb2e2160 <col:7> 'uint16_t [3]' xvalue ._data 0x5607cb2e1458
| |       |     `-CXXStaticCastExpr 0x5607cb2e2130 <col:7> 'EtherAddress' xvalue static_cast<class EtherAddress &&> <NoOp>
| |       |       `-DeclRefExpr 0x5607cb2e2100 <col:7> 'EtherAddress' lvalue ParmVar 0x5607cb2e1e98 '' 'EtherAddress &&'
| |       `-ArrayInitIndexExpr 0x5607cb2e21c0 <<invalid sloc>> 'unsigned long'
| `-CompoundStmt 0x5607cb2e2270 <col:7>
`-CXXDestructorDecl 0x5607cb2e1f50 <col:7> col:7 implicit referenced ~EtherAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.EtherAddress = type { [3 x i16] }
  NonVirtualBaseLLVMType:%class.EtherAddress = type { [3 x i16] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607cb085cb0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5607cb085dc8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x5607cb085e58 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x5607cb085f28 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x5607cb086010 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x5607cb086228 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5607cb0860d0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5607cb0863d8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5607cb0862e0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5607cb086520 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5607cb086490 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5607cb086668 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5607cb0865d8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5607cb0867b0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5607cb086720 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5607cb086878 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x5607cb0869c0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x5607cb086930 <col:28> col:31 'int'
|-CXXMethodDecl 0x5607cb086a88 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x5607cb086bd0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x5607cb086b40 <col:28> col:31 'int'
|-CXXMethodDecl 0x5607cb086d48 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5607cb086c88 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5607cb086e90 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5607cb086e00 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5607cb086f58 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x5607cb087118 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5607cb087008 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5607cb087080 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5607cb087368 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5607cb0871d8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5607cb087250 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5607cb087418 <col:86> "" ""
|-CXXMethodDecl 0x5607cb087688 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x5607cb0874f8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x5607cb087570 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5607cb087838 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5607cb087748 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5607cb0879e8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5607cb0878f0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5607cb087cb8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5607cb087aa0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5607cb087b18 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5607cb087b90 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5607cb087f98 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5607cb087d80 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5607cb087df8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5607cb087e70 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5607cb088050 <col:115> "" ""
|-AccessSpecDecl 0x5607cb0880c0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x5607cb0880f8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5607cb089610 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5607cb089610
| `-ParmVarDecl 0x5607cb089718 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x5607cb0897b8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5607cb0897b8
| `-ParmVarDecl 0x5607cb0898c8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x5607cb0beef8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5607cb2b0cf0 <col:7>
|-CXXConstructorDecl 0x5607cb0befd0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5607cb0befd0
| `-ParmVarDecl 0x5607cb0bf0e8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x5607cb0bf158 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5607cb0bf158
| `-ParmVarDecl 0x5607cb0bf268 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x5607cb2b36f0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607cb29f898 prev 0x5607cb294aa0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5607cb29f990 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5607cb29fa80 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5607cb29fba8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5607cb29fd28 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5607cb29fea8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5607cb2a0028 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x5607cb2b0e58 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5607cb2b16c8 <col:11>
|-CXXDestructorDecl 0x5607cb2b0f30 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5607cb2b1068 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5607cb2b1068
| `-ParmVarDecl 0x5607cb2b1178 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x5607cb2b1218 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5607cb2b1218
| `-ParmVarDecl 0x5607cb2b1328 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x5607cb2b40e8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x5607cb2b41f8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5607cb2b4478 <col:11>
|   `-ReturnStmt 0x5607cb2b4468 <col:11>
|     `-UnaryOperator 0x5607cb2b4450 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5607cb2b4440 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x5607cb2b4268 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5607cb2b4268
  `-ParmVarDecl 0x5607cb2b4378 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607cb2a0090 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5607cb2a01a8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5607cb2a0248 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5607cb2a02b0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5607cb2a0318 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5607cb2a0380 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5607cb2a03e0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5607cb2a04a0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5607cb2a0500 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5607cb2a0560 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x5607cb2b0d68 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5607cb2a0248 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x5607cb2b16d8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x5607cb2b1730 <col:12>
|-CXXConstructorDecl 0x5607cb2b1398 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5607cb2b1398
| `-ParmVarDecl 0x5607cb2b14a8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x5607cb2b1548 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5607cb2b1548
| `-ParmVarDecl 0x5607cb2b1658 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x5607cb2b37d0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607cb28e1b0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5607cb28e2c8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5607cb28e358 <col:16, col:22> col:16 public
|-EnumDecl 0x5607cb28e380 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5607cb28e480 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5607cb28e560 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb28e460 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5607cb28e440 <col:21> 'int' 28
| `-EnumConstantDecl 0x5607cb28e510 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5607cb28e578 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5607cb28e4f0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5607cb28e4d0 <col:22> 'int' 64
|-CXXMethodDecl 0x5607cb28e8b8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5607cb28e5a0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5607cb28e620 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5607cb28e698 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5607cb28e710 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5607cb28e978 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5607cb28eb78 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5607cb28e9f0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5607cb28ea68 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5607cb28ec28 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5607cb28ed88 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5607cb28ec98 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5607cb28ee30 <col:72> warn_unused_result ""
|-TypedefDecl 0x5607cb28f190 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5607cb28f120 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5607cb28f0c0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5607cb28f080 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x5607cad63310 'void'
|       |-PointerType 0x5607cb00e550 'unsigned char *'
|       | `-BuiltinType 0x5607cad63410 'unsigned char'
|       |-TypedefType 0x5607cae0ab20 'size_t' sugar
|       | |-Typedef 0x5607cadd3af0 'size_t'
|       | `-BuiltinType 0x5607cad63470 'unsigned long'
|       `-PointerType 0x5607cad63b10 'void *'
|         `-BuiltinType 0x5607cad63310 'void'
|-CXXMethodDecl 0x5607cb28f608 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5607cb28f200 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5607cb28f278 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5607cb28f310 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5607cb28f390 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5607cb2a9d00 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x5607cb2a9ce8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x5607cb2a9cb0 <col:58> 'int' 0
| |-ParmVarDecl 0x5607cb28f410 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5607cb2a9d28 <col:76> 'int' 0
| |-ParmVarDecl 0x5607cb28f490 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x5607cb2a9d48 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5607cb28f6d8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5607cb28f758 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5607cb28f818 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5607cb28f8b8 <col:20>
| `-OptimizeNoneAttr 0x5607cb28f910 <col:30>
|-CXXMethodDecl 0x5607cb28f988 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5607cb28fa28 <col:20>
| `-OptimizeNoneAttr 0x5607cb28fa80 <col:30>
|-CXXMethodDecl 0x5607cb28faf8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5607cb28fb98 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5607cb28fc48 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5607cb28fce8 <col:20>
| |-OptimizeNoneAttr 0x5607cb28fd40 <col:30>
| `-WarnUnusedResultAttr 0x5607cb28fd68 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5607cb28fdc0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5607cb28fe60 <col:20>
| `-OptimizeNoneAttr 0x5607cb28feb8 <col:30>
|-CXXMethodDecl 0x5607cb28ff08 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5607cb28ffa8 <col:20>
| `-OptimizeNoneAttr 0x5607cb290000 <col:30>
|-CXXMethodDecl 0x5607cb290048 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x5607cb2900e8 <col:20>
| `-OptimizeNoneAttr 0x5607cb290140 <col:30>
|-CXXMethodDecl 0x5607cb290188 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5607cb290248 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5607cb290310 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5607cb2903d8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5607cb290498 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5607cb2905b8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5607cb2a9e10 <col:54, line:99:5>
|   `-ReturnStmt 0x5607cb2a9e00 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x5607cb2a9de8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x5607cb2a9db8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5607cb2a0898
|         `-CXXThisExpr 0x5607cb2a9da8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5607cb290758 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5607cb290668 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x5607cb2a9ec0 <col:67, line:103:5>
|   `-BinaryOperator 0x5607cb2a9ea0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5607cb2a9e38 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5607cb2a0898
|     | `-CXXThisExpr 0x5607cb2a9e28 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5607cb2a9e88 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x5607cb2a9e68 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5607cb290668 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5607cb290850 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5607cb2a9f40 <col:33, line:107:5>
|   `-ReturnStmt 0x5607cb2a9f30 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5607cb2a9f18 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5607cb2a9ee8 <col:16> 'void *' lvalue ->_destructor_argument 0x5607cb2a0900
|         `-CXXThisExpr 0x5607cb2a9ed8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5607cb290910 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5607cb2aa570 <col:25, line:113:5>
|   |-ParenExpr 0x5607cb2aa2b8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5607cb2aa288 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x5607cb2a9ff8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5607cb2a9fd0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x5607cb2a9f98 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x5607cb2a9f68 <col:24> '<bound member function type>' ->shared 0x5607cb28f988
|   |   |       `-ImplicitCastExpr 0x5607cb2a9fb8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x5607cb2a9f58 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5607cb2aa058 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5607cb2aa038 <col:42> 'int' 0
|   |   `-CallExpr 0x5607cb2aa1e8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x5607cb2aa1d0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5607cb2aa1b0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5607cae018e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5607cb2aa228 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5607cb2aa0c8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5607cb2aa240 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5607cb2aa0f0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5607cb2aa258 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5607cb2aa128 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5607cb2aa270 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5607cb2aa198 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5607cb2aa180 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5607cb2aa148 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x5607cb2aa4b8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x5607cb2aa2e8 <col:2> 'unsigned char *' lvalue ->_head 0x5607cb2a06a0
|   | | `-CXXThisExpr 0x5607cb2aa2d8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x5607cb2aa4a0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5607cb2aa480 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x5607cb2aa328 <col:10> 'unsigned char *' lvalue ->_data 0x5607cb2a0708
|   |     | `-CXXThisExpr 0x5607cb2aa318 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x5607cb2aa468 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x5607cb2aa448 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x5607cb2aa368 <col:18> 'unsigned char *' lvalue ->_tail 0x5607cb2a0770
|   |         | `-CXXThisExpr 0x5607cb2aa358 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x5607cb2aa430 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x5607cb2aa410 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x5607cb2aa3a8 <col:26> 'unsigned char *' lvalue ->_end 0x5607cb2a07d8
|   |             | `-CXXThisExpr 0x5607cb2aa398 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x5607cb2aa3f8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x5607cb2aa3d8 <col:33> 'int' 0
|   `-BinaryOperator 0x5607cb2aa550 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5607cb2aa4e8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5607cb2a0898
|     | `-CXXThisExpr 0x5607cb2aa4d8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5607cb2aa538 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x5607cb2aa518 <col:16> 'int' 0
|-CXXMethodDecl 0x5607cb290a50 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5607cb2909c0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5607cb290af8 <col:20>
| |-OptimizeNoneAttr 0x5607cb290b50 <col:30>
| `-WarnUnusedResultAttr 0x5607cb290b78 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5607cb290c48 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5607cb290bb8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5607cb290cf0 <col:20>
| |-OptimizeNoneAttr 0x5607cb290d48 <col:30>
| `-WarnUnusedResultAttr 0x5607cb290d70 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5607cb290ea8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5607cb290db0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5607cb290f50 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5607cb291050 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5607cb290fc0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5607cb2910f8 <col:20>
| `-OptimizeNoneAttr 0x5607cb291150 <col:30>
|-CXXMethodDecl 0x5607cb291218 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5607cb291188 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5607cb2912c0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5607cb2913c0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5607cb291330 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5607cb291468 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5607cb291568 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x5607cb2914d8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5607cb291610 <col:20>
| `-OptimizeNoneAttr 0x5607cb291668 <col:30>
|-CXXMethodDecl 0x5607cb2917f8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5607cb2916a8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5607cb291720 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5607cb2a9d68 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5607cb2918a8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5607cb291aa8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5607cb291920 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5607cb291998 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5607cb291cb8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5607cb291b68 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5607cb291be0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5607cb291ec8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5607cb291d78 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5607cb291df8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x5607cb2a9d78 <col:39> 'int' 0
|-CXXMethodDecl 0x5607cb291f98 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5607cb292060 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5607cb292128 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5607cb2921e8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5607cb2922b0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5607cb2923f8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5607cb292368 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5607cb2925c8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5607cb2924b8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5607cb292530 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5607cb292698 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5607cb292758 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x5607cb2927f8 <col:20>
| `-OptimizeNoneAttr 0x5607cb292850 <col:30>
|-CXXMethodDecl 0x5607cb2928a0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5607cb292940 <col:20>
| `-OptimizeNoneAttr 0x5607cb292998 <col:30>
|-CXXMethodDecl 0x5607cb2929e8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5607cb292aa8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5607cb292b70 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x5607cb292c10 <col:20>
| `-OptimizeNoneAttr 0x5607cb292c68 <col:30>
|-CXXMethodDecl 0x5607cb292db8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5607cb292ca8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5607cb292d20 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5607cb292f08 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5607cb292e78 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5607cb292fe0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5607cb2930a0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x5607cb293140 <col:20>
| `-OptimizeNoneAttr 0x5607cb293198 <col:30>
|-CXXMethodDecl 0x5607cb2931e8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5607cb293288 <col:20>
| `-OptimizeNoneAttr 0x5607cb2932e0 <col:30>
|-CXXMethodDecl 0x5607cb293330 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5607cb2933f8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x5607cb293498 <col:20>
| `-OptimizeNoneAttr 0x5607cb2934f0 <col:30>
|-CXXMethodDecl 0x5607cb293538 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5607cb293658 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5607cb2937c8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5607cb293708 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5607cb2938b8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5607cb293958 <col:20>
| `-OptimizeNoneAttr 0x5607cb2939b0 <col:30>
|-CXXMethodDecl 0x5607cb293a00 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5607cb293ac0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5607cb293cf8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5607cb293b70 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5607cb293be8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5607cb293da8 <col:20>
| `-OptimizeNoneAttr 0x5607cb293e00 <col:30>
|-CXXMethodDecl 0x5607cb293ea8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5607cb293f48 <col:20>
| `-OptimizeNoneAttr 0x5607cb293fa0 <col:30>
|-CXXMethodDecl 0x5607cb293ff0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5607cb294090 <col:20>
| `-OptimizeNoneAttr 0x5607cb2940e8 <col:30>
|-CXXMethodDecl 0x5607cb294130 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5607cb2941d0 <col:20>
| `-OptimizeNoneAttr 0x5607cb294228 <col:30>
|-CXXMethodDecl 0x5607cb294328 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5607cb294260 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5607cb2943d0 <col:20>
| `-OptimizeNoneAttr 0x5607cb294428 <col:30>
|-CXXMethodDecl 0x5607cb2945e8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5607cb294460 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5607cb2944d8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5607cb294698 <col:20>
| `-OptimizeNoneAttr 0x5607cb2946f0 <col:30>
|-CXXMethodDecl 0x5607cb294798 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5607cb2948b8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5607cb2949d8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5607cb294a78 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5607cb294aa0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5607cb294bc8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5607cb294c68 <col:20>
| `-OptimizeNoneAttr 0x5607cb294cc0 <col:30>
|-CXXMethodDecl 0x5607cb294d68 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5607cb294e08 <col:20>
| `-OptimizeNoneAttr 0x5607cb294e60 <col:30>
|-AccessSpecDecl 0x5607cb294e88 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5607cb294eb0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5607cb294fb0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5607cb295000 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5607cb294f90 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5607cb294f70 <col:14> 'int' 48
|-CXXMethodDecl 0x5607cb295068 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5607cb295108 <col:20>
| `-OptimizeNoneAttr 0x5607cb295160 <col:30>
|-CXXMethodDecl 0x5607cb2951d8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5607cb295278 <col:20>
| `-OptimizeNoneAttr 0x5607cb2952d0 <col:30>
|-CXXMethodDecl 0x5607cb295398 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5607cb295308 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5607cb295538 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5607cb2956d8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5607cb2955e8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5607cb295780 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5607cb295880 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5607cb295c30 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb295860 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5607cb295840 <col:9> 'int' 0
| |-EnumConstantDecl 0x5607cb295910 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5607cb295c48 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb2958f0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5607cb2958d0 <col:14> 'int' 1
| |-EnumConstantDecl 0x5607cb2959a0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5607cb295c60 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb295980 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5607cb295960 <col:14> 'int' 2
| |-EnumConstantDecl 0x5607cb295a30 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5607cb295c78 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb295a10 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5607cb2959f0 <col:14> 'int' 3
| |-EnumConstantDecl 0x5607cb295ac0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5607cb295c90 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb295aa0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5607cb295a80 <col:13> 'int' 4
| |-EnumConstantDecl 0x5607cb295b50 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5607cb295ca8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb295b30 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5607cb295b10 <col:13> 'int' 5
| `-EnumConstantDecl 0x5607cb295be0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5607cb295cc0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5607cb295bc0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5607cb295ba0 <col:14> 'int' 6
|-CXXMethodDecl 0x5607cb295d28 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5607cb295dc8 <col:20>
| `-OptimizeNoneAttr 0x5607cb295e20 <col:30>
|-CXXMethodDecl 0x5607cb295f18 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5607cb295e58 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5607cb295fc0 <col:20>
| `-OptimizeNoneAttr 0x5607cb296018 <col:30>
|-CXXMethodDecl 0x5607cb296088 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5607cb2961b0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5607cb296328 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5607cb296260 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5607cb2963f0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5607cb2964b8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5607cb2965f8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5607cb296568 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5607cb2966a0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5607cb2967a0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5607cb2969a0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb296780 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5607cb296760 <col:23> 'int' 0
| |-EnumConstantDecl 0x5607cb296830 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5607cb2969b8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb296810 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5607cb2967f0 <col:45> 'int' 4
| |-EnumConstantDecl 0x5607cb2968c0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5607cb2969d0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb2968a0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5607cb296880 <col:24> 'int' 0
| `-EnumConstantDecl 0x5607cb296950 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5607cb2969e8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5607cb296930 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5607cb296910 <col:47> 'int' 16
|-CXXMethodDecl 0x5607cb296a48 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5607cb296bb8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5607cb296af8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5607cb296c60 <col:20>
| `-OptimizeNoneAttr 0x5607cb296cb8 <col:30>
|-CXXMethodDecl 0x5607cb296d08 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x5607cb2aa690 <col:18, col:36>
|   `-ReturnStmt 0x5607cb2aa680 <col:20, col:33>
|     `-ImplicitCastExpr 0x5607cb2aa668 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x5607cb2aa648 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x5607cb2aa618 <col:27> '<bound member function type>' ->xanno 0x5607cb294d68
|           `-CXXThisExpr 0x5607cb2aa608 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5607cb296e00 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x5607cb2aa7a0 <col:30, col:48>
|   `-ReturnStmt 0x5607cb2aa790 <col:32, col:45>
|     `-ImplicitCastExpr 0x5607cb2aa778 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x5607cb2aa758 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x5607cb2aa728 <col:39> '<bound member function type>' ->xanno 0x5607cb294bc8
|           `-CXXThisExpr 0x5607cb2aa718 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5607cb296ee8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x5607cb2aa938 <col:24, col:50>
|   `-ReturnStmt 0x5607cb2aa928 <col:26, col:47>
|     `-UnaryOperator 0x5607cb2aa910 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5607cb2aa8f0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x5607cb2aa8d8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5607cb2aa888 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5607cb29fba8
|         |   `-CXXMemberCallExpr 0x5607cb2aa868 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x5607cb2aa838 <col:34> '<bound member function type>' ->xanno 0x5607cb294d68
|         |       `-CXXThisExpr 0x5607cb2aa828 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x5607cb2aa8b8 <col:46> 'int' 0
|-CXXMethodDecl 0x5607cb296ff0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x5607cb2aab08 <col:36, col:62>
|   `-ReturnStmt 0x5607cb2aaaf8 <col:38, col:59>
|     `-UnaryOperator 0x5607cb2aaae0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5607cb2aaac0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5607cb2aaaa8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5607cb2aaa20 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5607cb29fba8
|         |   `-CXXMemberCallExpr 0x5607cb2aaa00 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5607cb2aa9d0 <col:46> '<bound member function type>' ->xanno 0x5607cb294bc8
|         |       `-CXXThisExpr 0x5607cb2aa9c0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5607cb2aaa50 <col:58> 'int' 0
|-CXXMethodDecl 0x5607cb297108 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x5607cb2aaca0 <col:26, col:53>
|   `-ReturnStmt 0x5607cb2aac90 <col:28, col:50>
|     `-UnaryOperator 0x5607cb2aac78 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5607cb2aac58 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x5607cb2aac40 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5607cb2aabf0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5607cb29fea8
|         |   `-CXXMemberCallExpr 0x5607cb2aabd0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x5607cb2aaba0 <col:36> '<bound member function type>' ->xanno 0x5607cb294d68
|         |       `-CXXThisExpr 0x5607cb2aab90 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5607cb2aac20 <col:49> 'int' 0
|-CXXMethodDecl 0x5607cb297228 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x5607cb2aae78 <col:38, col:65>
|   `-ReturnStmt 0x5607cb2aae68 <col:40, col:62>
|     `-UnaryOperator 0x5607cb2aae50 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5607cb2aae30 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5607cb2aae18 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5607cb2aad88 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5607cb29fea8
|         |   `-CXXMemberCallExpr 0x5607cb2aad68 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5607cb2aad38 <col:48> '<bound member function type>' ->xanno 0x5607cb294bc8
|         |       `-CXXThisExpr 0x5607cb2aad28 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5607cb2aadb8 <col:61> 'int' 0
|-CXXMethodDecl 0x5607cb2973d8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5607cb2972e0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x5607cb2ab548 <col:34, line:463:5>
|   |-ParenExpr 0x5607cb2ab390 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x5607cb2ab360 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5607cb2aafc8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5607cb2aaf98 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5607cb2aaee8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5607cb2aaed0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5607cb2aae90 <col:23> 'int' lvalue ParmVar 0x5607cb2972e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5607cb2aaeb0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5607cb2aaf78 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5607cb2aaf48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5607cb2aaf08 <col:33> 'int' lvalue ParmVar 0x5607cb2972e0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5607cb2aaf60 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5607cb2aaf28 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5607cb294fb0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5607cb2ab028 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5607cb2ab008 <col:56> 'int' 0
|   |   `-CallExpr 0x5607cb2ab2c0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5607cb2ab2a8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5607cb2ab288 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5607cae018e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5607cb2ab300 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5607cb2ab118 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5607cb2ab318 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5607cb2ab148 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5607cb2ab330 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5607cb2ab180 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x5607cb2ab348 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5607cb2ab270 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5607cb2ab258 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5607cb2ab218 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x5607cb2ab538 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x5607cb2ab520 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x5607cb2ab500 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5607cb2ab4d0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5607cb2ab480 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5607cb29fba8
|         |   `-CXXMemberCallExpr 0x5607cb2ab460 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5607cb2ab430 <col:9> '<bound member function type>' ->xanno 0x5607cb294bc8
|         |       `-CXXThisExpr 0x5607cb2ab420 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x5607cb2ab4e8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5607cb2ab4b0 <col:21> 'int' lvalue ParmVar 0x5607cb2972e0 'i' 'int'
|-CXXMethodDecl 0x5607cb297628 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5607cb297498 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5607cb297510 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x5607cb2abbd8 <col:40, line:472:5>
|   |-ParenExpr 0x5607cb2ab9f0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x5607cb2ab9c0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5607cb2ab6a0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5607cb2ab670 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5607cb2ab5c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5607cb2ab5a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5607cb2ab568 <col:23> 'int' lvalue ParmVar 0x5607cb297498 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5607cb2ab588 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5607cb2ab650 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5607cb2ab620 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5607cb2ab5e0 <col:33> 'int' lvalue ParmVar 0x5607cb297498 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5607cb2ab638 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5607cb2ab600 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5607cb294fb0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5607cb2ab700 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5607cb2ab6e0 <col:56> 'int' 0
|   |   `-CallExpr 0x5607cb2ab920 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5607cb2ab908 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5607cb2ab8e8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5607cae018e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5607cb2ab960 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5607cb2ab770 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5607cb2ab978 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5607cb2ab7a0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5607cb2ab990 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5607cb2ab7d8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x5607cb2ab9a8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5607cb2ab8d0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5607cb2ab8b8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5607cb2ab878 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x5607cb2abbb8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x5607cb2abb60 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x5607cb2abb30 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5607cb2abae0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5607cb29fba8
|     | |   `-CXXMemberCallExpr 0x5607cb2abac0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x5607cb2aba90 <col:2> '<bound member function type>' ->xanno 0x5607cb294d68
|     | |       `-CXXThisExpr 0x5607cb2aba80 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x5607cb2abb48 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5607cb2abb10 <col:14> 'int' lvalue ParmVar 0x5607cb297498 'i' 'int'
|     `-ImplicitCastExpr 0x5607cb2abba0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x5607cb2abb80 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5607cb297510 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5607cb2977e8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5607cb2976f0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5607cb2ac358 <col:36, line:485:5>
|   |-ParenExpr 0x5607cb2ac0c0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x5607cb2ac090 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5607cb2abd70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5607cb2abd40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5607cb2abc50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5607cb2abc38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5607cb2abbf8 <col:23> 'int' lvalue ParmVar 0x5607cb2976f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5607cb2abc18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5607cb2abd20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5607cb2abd08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5607cb2abc70 <col:33> 'int' lvalue ParmVar 0x5607cb2976f0 'i' 'int'
|   |   |     `-BinaryOperator 0x5607cb2abce8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5607cb2abcd0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5607cb2abc90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5607cb294fb0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5607cb2abcb0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5607cb2abdd0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5607cb2abdb0 <col:60> 'int' 0
|   |   `-CallExpr 0x5607cb2abff0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5607cb2abfd8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5607cb2abfb8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5607cae018e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5607cb2ac030 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5607cb2abe40 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5607cb2ac048 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5607cb2abe78 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5607cb2ac060 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5607cb2abeb0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x5607cb2ac078 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5607cb2abfa0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5607cb2abf88 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5607cb2abf48 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x5607cb2ac348 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x5607cb2ac330 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x5607cb2ac318 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5607cb2ac2e8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x5607cb2ac288 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5607cb2ac258 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5607cb2ac1d0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5607cb29fa80
|             |   `-CXXMemberCallExpr 0x5607cb2ac1b0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5607cb2ac180 <col:61> '<bound member function type>' ->xanno 0x5607cb294bc8
|             |       `-CXXThisExpr 0x5607cb2ac170 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5607cb2ac270 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5607cb2ac200 <col:74> 'int' lvalue ParmVar 0x5607cb2976f0 'i' 'int'
|-CXXMethodDecl 0x5607cb297a38 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5607cb2978a8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5607cb297920 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5607cb2acaa8 <col:42, line:500:5>
|   |-ParenExpr 0x5607cb2ac840 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x5607cb2ac810 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5607cb2ac4f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5607cb2ac4c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5607cb2ac3d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5607cb2ac3b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5607cb2ac378 <col:23> 'int' lvalue ParmVar 0x5607cb2978a8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5607cb2ac398 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5607cb2ac4a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5607cb2ac488 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5607cb2ac3f0 <col:33> 'int' lvalue ParmVar 0x5607cb2978a8 'i' 'int'
|   |   |     `-BinaryOperator 0x5607cb2ac468 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5607cb2ac450 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5607cb2ac410 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5607cb294fb0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5607cb2ac430 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5607cb2ac550 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5607cb2ac530 <col:60> 'int' 0
|   |   `-CallExpr 0x5607cb2ac770 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5607cb2ac758 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5607cb2ac738 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5607cae018e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5607cb2ac7b0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5607cb2ac5c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5607cb2ac7c8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5607cb2ac5f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5607cb2ac7e0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5607cb2ac630 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x5607cb2ac7f8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5607cb2ac720 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5607cb2ac708 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5607cb2ac6c8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x5607cb2aca88 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x5607cb2aca38 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5607cb2aca08 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x5607cb2ac9b0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5607cb2ac980 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5607cb2ac930 <col:48, col:57> 'char [48]' lvalue ->c 0x5607cb29fa80
|     |     |   `-CXXMemberCallExpr 0x5607cb2ac910 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5607cb2ac8e0 <col:48> '<bound member function type>' ->xanno 0x5607cb294d68
|     |     |       `-CXXThisExpr 0x5607cb2ac8d0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5607cb2ac998 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5607cb2ac960 <col:61> 'int' lvalue ParmVar 0x5607cb2978a8 'i' 'int'
|     `-ImplicitCastExpr 0x5607cb2aca70 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5607cb2aca50 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5607cb297920 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5607cb297bf8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5607cb297b00 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5607cb2ad208 <col:35, line:513:5>
|   |-ParenExpr 0x5607cb2acf18 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x5607cb2acee8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5607cb2acc40 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5607cb2acc10 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5607cb2acb20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5607cb2acb08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5607cb2acac8 <col:23> 'int' lvalue ParmVar 0x5607cb297b00 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5607cb2acae8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5607cb2acbf0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5607cb2acbd8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5607cb2acb40 <col:33> 'int' lvalue ParmVar 0x5607cb297b00 'i' 'int'
|   |   |     `-BinaryOperator 0x5607cb2acbb8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5607cb2acba0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5607cb2acb60 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5607cb294fb0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5607cb2acb80 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5607cb2acca0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5607cb2acc80 <col:60> 'int' 0
|   |   `-CallExpr 0x5607cb2ace48 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5607cb2ace30 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5607cb2ace10 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5607cae018e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5607cb2ace88 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5607cb2acd10 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5607cb2acea0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5607cb2acd48 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5607cb2aceb8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5607cb2acd80 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x5607cb2aced0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5607cb2acdf8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5607cb2acde0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5607cb2acda0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x5607cb2ad1f8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x5607cb2ad1e0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x5607cb2ad1c8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5607cb2ad198 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x5607cb2ad110 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5607cb2ad0e0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5607cb2ad090 <col:60, col:69> 'char const[48]' lvalue ->c 0x5607cb29fa80
|             |   `-CXXMemberCallExpr 0x5607cb2ad070 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5607cb2ad040 <col:60> '<bound member function type>' ->xanno 0x5607cb294bc8
|             |       `-CXXThisExpr 0x5607cb2ad030 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5607cb2ad0f8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5607cb2ad0c0 <col:73> 'int' lvalue ParmVar 0x5607cb297b00 'i' 'int'
|-CXXMethodDecl 0x5607cb297e48 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5607cb297cb8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5607cb297d30 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x5607cb2ad928 <col:41, line:528:5>
|   |-ParenExpr 0x5607cb2ad6b0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x5607cb2ad680 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5607cb2ad3a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5607cb2ad370 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5607cb2ad280 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5607cb2ad268 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5607cb2ad228 <col:23> 'int' lvalue ParmVar 0x5607cb297cb8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5607cb2ad248 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5607cb2ad350 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5607cb2ad338 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5607cb2ad2a0 <col:33> 'int' lvalue ParmVar 0x5607cb297cb8 'i' 'int'
|   |   |     `-BinaryOperator 0x5607cb2ad318 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5607cb2ad300 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5607cb2ad2c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5607cb294fb0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5607cb2ad2e0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5607cb2ad400 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5607cb2ad3e0 <col:60> 'int' 0
|   |   `-CallExpr 0x5607cb2ad5e0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5607cb2ad5c8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5607cb2ad5a8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5607cae018e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5607cb2ad620 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5607cb2ad470 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5607cb2ad638 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5607cb2ad4a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5607cb2ad650 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5607cb2ad4e0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x5607cb2ad668 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5607cb2ad590 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5607cb2ad578 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5607cb2ad538 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x5607cb2ad908 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x5607cb2ad8b8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5607cb2ad888 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x5607cb2ad830 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5607cb2ad7f0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5607cb2ad7a0 <col:47, col:56> 'char [48]' lvalue ->c 0x5607cb29fa80
|     |     |   `-CXXMemberCallExpr 0x5607cb2ad780 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5607cb2ad750 <col:47> '<bound member function type>' ->xanno 0x5607cb294d68
|     |     |       `-CXXThisExpr 0x5607cb2ad740 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5607cb2ad808 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5607cb2ad7d0 <col:60> 'int' lvalue ParmVar 0x5607cb297cb8 'i' 'int'
|     `-ImplicitCastExpr 0x5607cb2ad8f0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x5607cb2ad8d0 <col:65> 'int16_t':'short' lvalue ParmVar 0x5607cb297d30 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5607cb298008 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5607cb297f10 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5607cb2adff8 <col:36, line:541:5>
|   |-ParenExpr 0x5607cb2add98 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x5607cb2add68 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5607cb2adac0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5607cb2ada90 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5607cb2ad9a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5607cb2ad988 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5607cb2ad948 <col:23> 'int' lvalue ParmVar 0x5607cb297f10 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5607cb2ad968 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5607cb2ada70 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5607cb2ada58 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5607cb2ad9c0 <col:33> 'int' lvalue ParmVar 0x5607cb297f10 'i' 'int'
|   |   |     `-BinaryOperator 0x5607cb2ada38 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5607cb2ada20 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5607cb2ad9e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5607cb294fb0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5607cb2ada00 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5607cb2adb20 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5607cb2adb00 <col:60> 'int' 0
|   |   `-CallExpr 0x5607cb2adcc8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5607cb2adcb0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5607cb2adc90 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5607cae018e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5607cb2add08 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5607cb2adb90 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5607cb2add20 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5607cb2adbc8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5607cb2add38 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5607cb2adc00 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x5607cb2add50 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5607cb2adc78 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5607cb2adc60 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5607cb2adc20 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x5607cb2adfe8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x5607cb2adfd0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5607cb2adfb8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5607cb2adf88 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x5607cb2adf30 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5607cb2adf00 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5607cb2adeb0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5607cb29fa80
|             |   `-CXXMemberCallExpr 0x5607cb2ade90 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5607cb2ade60 <col:61> '<bound member function type>' ->xanno 0x5607cb294bc8
|             |       `-CXXThisExpr 0x5607cb2ade50 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5607cb2adf18 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5607cb2adee0 <col:74> 'int' lvalue ParmVar 0x5607cb297f10 'i' 'int'
|-CXXMethodDecl 0x5607cb2981d8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5607cb2980c8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5607cb298140 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5607cb298288 <col:20>
| `-OptimizeNoneAttr 0x5607cb2982e0 <col:30>
|-CXXMethodDecl 0x5607cb298418 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5607cb298320 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5607cb2ae6c8 <col:35, line:562:5>
|   |-ParenExpr 0x5607cb2ae468 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x5607cb2ae438 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5607cb2ae190 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5607cb2ae160 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5607cb2ae070 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5607cb2ae058 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5607cb2ae018 <col:23> 'int' lvalue ParmVar 0x5607cb298320 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5607cb2ae038 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5607cb2ae140 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5607cb2ae128 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5607cb2ae090 <col:33> 'int' lvalue ParmVar 0x5607cb298320 'i' 'int'
|   |   |     `-BinaryOperator 0x5607cb2ae108 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5607cb2ae0f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5607cb2ae0b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5607cb294fb0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5607cb2ae0d0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5607cb2ae1f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5607cb2ae1d0 <col:60> 'int' 0
|   |   `-CallExpr 0x5607cb2ae398 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5607cb2ae380 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5607cb2ae360 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5607cae018e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5607cb2ae3d8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5607cb2ae260 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5607cb2ae3f0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5607cb2ae298 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5607cb2ae408 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5607cb2ae2d0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x5607cb2ae420 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5607cb2ae348 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5607cb2ae330 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5607cb2ae2f0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x5607cb2ae6b8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x5607cb2ae6a0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x5607cb2ae688 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5607cb2ae658 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x5607cb2ae600 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5607cb2ae5d0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5607cb2ae580 <col:60, col:69> 'char const[48]' lvalue ->c 0x5607cb29fa80
|             |   `-CXXMemberCallExpr 0x5607cb2ae560 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5607cb2ae530 <col:60> '<bound member function type>' ->xanno 0x5607cb294bc8
|             |       `-CXXThisExpr 0x5607cb2ae520 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5607cb2ae5e8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5607cb2ae5b0 <col:73> 'int' lvalue ParmVar 0x5607cb298320 'i' 'int'
|-CXXMethodDecl 0x5607cb298628 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5607cb2984d8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5607cb298550 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x5607cb2aeda8 <col:41, line:577:5>
|   |-ParenExpr 0x5607cb2aeb38 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x5607cb2aeb08 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5607cb2ae860 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5607cb2ae830 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5607cb2ae740 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5607cb2ae728 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5607cb2ae6e8 <col:23> 'int' lvalue ParmVar 0x5607cb2984d8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5607cb2ae708 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5607cb2ae810 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5607cb2ae7f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5607cb2ae760 <col:33> 'int' lvalue ParmVar 0x5607cb2984d8 'i' 'int'
|   |   |     `-BinaryOperator 0x5607cb2ae7d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5607cb2ae7c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5607cb2ae780 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5607cb294fb0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5607cb2ae7a0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5607cb2ae8c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5607cb2ae8a0 <col:60> 'int' 0
|   |   `-CallExpr 0x5607cb2aea68 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5607cb2aea50 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5607cb2aea30 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5607cae018e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5607cb2aeaa8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5607cb2ae930 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5607cb2aeac0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5607cb2ae968 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5607cb2aead8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5607cb2ae9a0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x5607cb2aeaf0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5607cb2aea18 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5607cb2aea00 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5607cb2ae9c0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x5607cb2aed88 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x5607cb2aed38 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5607cb2aed08 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x5607cb2aeca8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5607cb2aec78 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5607cb2aec28 <col:47, col:56> 'char [48]' lvalue ->c 0x5607cb29fa80
|     |     |   `-CXXMemberCallExpr 0x5607cb2aec08 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5607cb2aebd8 <col:47> '<bound member function type>' ->xanno 0x5607cb294d68
|     |     |       `-CXXThisExpr 0x5607cb2aebc8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5607cb2aec90 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5607cb2aec58 <col:60> 'int' lvalue ParmVar 0x5607cb2984d8 'i' 'int'
|     `-ImplicitCastExpr 0x5607cb2aed70 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5607cb2aed50 <col:65> 'int32_t':'int' lvalue ParmVar 0x5607cb298550 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5607cb2987e8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5607cb2986f0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5607cb2af4d8 <col:36, line:591:5>
|   |-ParenExpr 0x5607cb2af218 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x5607cb2af1e8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5607cb2aef40 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5607cb2aef10 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5607cb2aee20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5607cb2aee08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5607cb2aedc8 <col:23> 'int' lvalue ParmVar 0x5607cb2986f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5607cb2aede8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5607cb2aeef0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5607cb2aeed8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5607cb2aee40 <col:33> 'int' lvalue ParmVar 0x5607cb2986f0 'i' 'int'
|   |   |     `-BinaryOperator 0x5607cb2aeeb8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5607cb2aeea0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5607cb2aee60 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5607cb294fb0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5607cb2aee80 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5607cb2aefa0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5607cb2aef80 <col:60> 'int' 0
|   |   `-CallExpr 0x5607cb2af148 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5607cb2af130 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5607cb2af110 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5607cae018e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5607cb2af188 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5607cb2af010 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5607cb2af1a0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5607cb2af048 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5607cb2af1b8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5607cb2af080 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x5607cb2af1d0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5607cb2af0f8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5607cb2af0e0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5607cb2af0a0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x5607cb2af4c8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x5607cb2af4b0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x5607cb2af498 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5607cb2af468 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x5607cb2af3e0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5607cb2af3b0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5607cb2af360 <col:61, col:70> 'char const[48]' lvalue ->c 0x5607cb29fa80
|             |   `-CXXMemberCallExpr 0x5607cb2af340 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5607cb2af310 <col:61> '<bound member function type>' ->xanno 0x5607cb294bc8
|             |       `-CXXThisExpr 0x5607cb2af300 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5607cb2af3c8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5607cb2af390 <col:74> 'int' lvalue ParmVar 0x5607cb2986f0 'i' 'int'
|-CXXMethodDecl 0x5607cb298a38 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5607cb2988a8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5607cb298920 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x5607cb2afbb8 <col:42, line:606:5>
|   |-ParenExpr 0x5607cb2af948 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x5607cb2af918 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5607cb2af670 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5607cb2af640 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5607cb2af550 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5607cb2af538 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5607cb2af4f8 <col:23> 'int' lvalue ParmVar 0x5607cb2988a8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5607cb2af518 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5607cb2af620 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5607cb2af608 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5607cb2af570 <col:33> 'int' lvalue ParmVar 0x5607cb2988a8 'i' 'int'
|   |   |     `-BinaryOperator 0x5607cb2af5e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5607cb2af5d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5607cb2af590 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5607cb294fb0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5607cb2af5b0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5607cb2af6d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5607cb2af6b0 <col:60> 'int' 0
|   |   `-CallExpr 0x5607cb2af878 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5607cb2af860 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5607cb2af840 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5607cae018e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5607cb2af8b8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5607cb2af740 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5607cb2af8d0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5607cb2af778 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5607cb2af8e8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5607cb2af7b0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x5607cb2af900 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5607cb2af828 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5607cb2af810 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5607cb2af7d0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x5607cb2afb98 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x5607cb2afb48 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5607cb2afb18 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x5607cb2afab8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5607cb2afa88 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5607cb2afa38 <col:48, col:57> 'char [48]' lvalue ->c 0x5607cb29fa80
|     |     |   `-CXXMemberCallExpr 0x5607cb2afa18 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5607cb2af9e8 <col:48> '<bound member function type>' ->xanno 0x5607cb294d68
|     |     |       `-CXXThisExpr 0x5607cb2af9d8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5607cb2afaa0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5607cb2afa68 <col:61> 'int' lvalue ParmVar 0x5607cb2988a8 'i' 'int'
|     `-ImplicitCastExpr 0x5607cb2afb80 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5607cb2afb60 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5607cb298920 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5607cb298bd0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5607cb298b00 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x5607cb2b0428 <col:33, line:620:5>
|   |-ParenExpr 0x5607cb2b01a0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x5607cb2b0170 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5607cb2afdc0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5607cb2afd90 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5607cb2afc30 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5607cb2afc18 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5607cb2afbd8 <col:23> 'int' lvalue ParmVar 0x5607cb298b00 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5607cb2afbf8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5607cb2afd70 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5607cb2afd58 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5607cb2afc50 <col:33> 'int' lvalue ParmVar 0x5607cb298b00 'i' 'int'
|   |   |     `-BinaryOperator 0x5607cb2afd38 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5607cb2afd20 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5607cb2afc70 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5607cb294fb0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5607cb2afcf8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5607cb2afce0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5607cb2afca8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5607cb2afe20 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5607cb2afe00 <col:79> 'int' 0
|   |   `-CallExpr 0x5607cb2b00d0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5607cb2b00b8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5607cb2b0098 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5607cae018e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5607cb2b0110 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5607cb2aff08 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5607cb2b0128 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5607cb2aff50 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5607cb2b0140 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5607cb2aff88 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x5607cb2b0158 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5607cb2b0080 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5607cb2b0068 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5607cb2b0028 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x5607cb2b0418 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x5607cb2b0400 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x5607cb2b03e8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5607cb2b03b8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x5607cb2b0330 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x5607cb2b0300 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5607cb2b02b0 <col:67, col:76> 'char const[48]' lvalue ->c 0x5607cb29fa80
|             |   `-CXXMemberCallExpr 0x5607cb2b0290 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5607cb2b0260 <col:67> '<bound member function type>' ->xanno 0x5607cb294bc8
|             |       `-CXXThisExpr 0x5607cb2b0250 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5607cb2b0318 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5607cb2b02e0 <col:80> 'int' lvalue ParmVar 0x5607cb298b00 'i' 'int'
|-CXXMethodDecl 0x5607cb298de8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5607cb298c90 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5607cb298d10 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x5607cb2b0c50 <col:45, line:635:5>
|   |-ParenExpr 0x5607cb2b0998 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x5607cb2b0968 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5607cb2b0630 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5607cb2b0600 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5607cb2b04a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5607cb2b0488 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5607cb2b0448 <col:23> 'int' lvalue ParmVar 0x5607cb298c90 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5607cb2b0468 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5607cb2b05e0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5607cb2b05c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5607cb2b04c0 <col:33> 'int' lvalue ParmVar 0x5607cb298c90 'i' 'int'
|   |   |     `-BinaryOperator 0x5607cb2b05a8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5607cb2b0590 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5607cb2b04e0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5607cb294fb0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5607cb2b0568 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5607cb2b0550 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5607cb2b0518 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5607cb2b0690 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5607cb2b0670 <col:79> 'int' 0
|   |   `-CallExpr 0x5607cb2b08c8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5607cb2b08b0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5607cb2b0890 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5607cae018e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5607cb2b0908 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5607cb2b0700 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5607cb2b0920 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5607cb2b0748 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5607cb2b0938 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5607cb2b0780 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x5607cb2b0950 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5607cb2b0878 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5607cb2b0860 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5607cb2b0818 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x5607cb2b0c30 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x5607cb2b0b98 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5607cb2b0b68 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x5607cb2b0b08 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5607cb2b0ad8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5607cb2b0a88 <col:54, col:63> 'char [48]' lvalue ->c 0x5607cb29fa80
|     |     |   `-CXXMemberCallExpr 0x5607cb2b0a68 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5607cb2b0a38 <col:54> '<bound member function type>' ->xanno 0x5607cb294d68
|     |     |       `-CXXThisExpr 0x5607cb2b0a28 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5607cb2b0af0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5607cb2b0ab8 <col:67> 'int' lvalue ParmVar 0x5607cb298c90 'i' 'int'
|     `-CXXConstCastExpr 0x5607cb2b0c00 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x5607cb2b0be8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5607cb2b0bb0 <col:91> 'const void *' lvalue ParmVar 0x5607cb298d10 'x' 'const void *'
|-CXXMethodDecl 0x5607cb298eb8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x5607cb2b0cd8 <col:34, line:640:5>
|   `-ReturnStmt 0x5607cb2b0cc8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x5607cb2b0cb0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x5607cb2b0c80 <col:16> 'Packet *' lvalue ->_data_packet 0x5607cb2a0638
|         `-CXXThisExpr 0x5607cb2b0c70 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5607cb298ff8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5607cb298f68 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5607cb2a9d98 <col:46> 'bool' true
|-CXXMethodDecl 0x5607cb299178 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5607cb2990b0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5607cb299220 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5607cb2999d0 <line:660:22> "" ""
| |-EnumConstantDecl 0x5607cb299320 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5607cb299a40 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb299300 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5607cb2992e0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5607cb28e480 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5607cb2993b0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5607cb299a58 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb299390 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5607cb299370 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5607cb28e510 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5607cb299440 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5607cb299a70 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb299420 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5607cb299400 <col:21> 'int' 0
| |-EnumConstantDecl 0x5607cb2994d0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5607cb299a88 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb2994b0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5607cb299490 <col:19> 'int' 16
| |-EnumConstantDecl 0x5607cb299560 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5607cb299aa0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb299540 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5607cb299520 <col:21> 'int' 16
| |-EnumConstantDecl 0x5607cb2995f0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5607cb299ab8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb2995d0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5607cb2995b0 <col:19> 'int' 32
| |-EnumConstantDecl 0x5607cb299680 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5607cb299ad0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb299660 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5607cb299640 <col:19> 'int' EnumConstant 0x5607cb2994d0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5607cb299710 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5607cb299ae8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb2996f0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5607cb2996d0 <col:19> 'int' EnumConstant 0x5607cb2995f0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5607cb2997e0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5607cb299b00 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb2997c0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5607cb2997a0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5607cb299760 <col:23> 'int' EnumConstant 0x5607cb299710 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5607cb299780 <col:40> 'int' 2
| |-EnumConstantDecl 0x5607cb2998b0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5607cb299b18 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb299890 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5607cb299870 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5607cb299830 <col:23> 'int' EnumConstant 0x5607cb299710 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5607cb299850 <col:40> 'int' 4
| `-EnumConstantDecl 0x5607cb299980 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5607cb299b30 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5607cb299960 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5607cb299940 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5607cb299900 <col:23> 'int' EnumConstant 0x5607cb299710 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5607cb299920 <col:40> 'int' 8
|-CXXMethodDecl 0x5607cb299b70 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5607cb299c10 <col:68> "" ""
|-CXXMethodDecl 0x5607cb299ca8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5607cb299d48 <col:45> "" ""
|-CXXMethodDecl 0x5607cb299de0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5607cb299e80 <col:57> "" ""
|-CXXMethodDecl 0x5607cb299f18 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5607cb299fb8 <col:45> "" ""
|-CXXMethodDecl 0x5607cb29a050 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5607cb29a0f0 <col:57> "" ""
|-CXXMethodDecl 0x5607cb29a180 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5607cb29a220 <col:51> "" ""
|-CXXMethodDecl 0x5607cb29a2b0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5607cb29a350 <col:63> "" ""
|-CXXMethodDecl 0x5607cb29a3e0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5607cb29a480 <col:53> "" ""
|-CXXMethodDecl 0x5607cb29a510 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5607cb29a5b0 <col:65> "" ""
|-CXXMethodDecl 0x5607cb29a6c8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5607cb29a638 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5607cb29a770 <col:61> "" ""
|-CXXMethodDecl 0x5607cb29a908 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5607cb29a7f8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5607cb29a870 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5607cb29a9b8 <col:67> "" ""
|-CXXMethodDecl 0x5607cb29aad0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5607cb29aa40 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5607cb29ab78 <col:63> "" ""
|-CXXMethodDecl 0x5607cb29ad10 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5607cb29ac00 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5607cb29ac78 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5607cb29adc0 <col:69> "" ""
|-CXXMethodDecl 0x5607cb29aed8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5607cb29ae48 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5607cb29af80 <col:63> "" ""
|-CXXMethodDecl 0x5607cb29d658 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5607cb29d548 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5607cb29d5c0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5607cb29d708 <col:69> "" ""
|-CXXMethodDecl 0x5607cb29d820 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5607cb29d790 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5607cb29d8c8 <col:62> "" ""
|-CXXMethodDecl 0x5607cb29da60 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5607cb29d950 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5607cb29d9c8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5607cb29db10 <col:68> "" ""
|-CXXMethodDecl 0x5607cb29dc28 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5607cb29db98 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5607cb29dcd0 <col:63> "" ""
|-CXXMethodDecl 0x5607cb29de68 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5607cb29dd58 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5607cb29ddd0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5607cb29df18 <col:69> "" ""
|-CXXMethodDecl 0x5607cb29dfa8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5607cb29e048 <col:64> "" ""
|-CXXMethodDecl 0x5607cb29e0d8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5607cb29e178 <col:52> "" ""
|-CXXMethodDecl 0x5607cb29e208 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5607cb29e2a8 <col:67> "" ""
|-CXXMethodDecl 0x5607cb29e338 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5607cb29e3d8 <col:55> "" ""
|-CXXMethodDecl 0x5607cb29e4f0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5607cb29e460 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5607cb29e598 <col:58> "" ""
|-CXXMethodDecl 0x5607cb29e730 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5607cb29e620 <col:33> col:36 'int'
| |-ParmVarDecl 0x5607cb29e698 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5607cb29e7e0 <col:62> "" ""
|-CXXMethodDecl 0x5607cb29e8f8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5607cb29e868 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5607cb29e9a0 <col:58> "" ""
|-CXXMethodDecl 0x5607cb29eb38 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5607cb29ea28 <col:33> col:36 'int'
| |-ParmVarDecl 0x5607cb29eaa0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5607cb29ebe8 <col:62> "" ""
|-CXXMethodDecl 0x5607cb29ed00 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5607cb29ec70 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5607cb29eda8 <col:60> "" ""
|-CXXMethodDecl 0x5607cb29ef40 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5607cb29ee30 <col:34> col:37 'int'
| |-ParmVarDecl 0x5607cb29eea8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5607cb29eff0 <col:64> "" ""
|-CXXMethodDecl 0x5607cb29f108 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5607cb29f078 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5607cb29f1b0 <col:58> "" ""
|-CXXMethodDecl 0x5607cb29f348 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5607cb29f238 <col:33> col:36 'int'
| |-ParmVarDecl 0x5607cb29f2b0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5607cb29f3f8 <col:62> "" ""
|-CXXMethodDecl 0x5607cb29f510 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5607cb29f480 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5607cb29f5b8 <col:59> "" ""
|-CXXMethodDecl 0x5607cb29f750 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5607cb29f640 <col:33> col:36 'int'
| |-ParmVarDecl 0x5607cb29f6b8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5607cb29f800 <col:63> "" ""
|-AccessSpecDecl 0x5607cb29f870 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5607cb29f898 prev 0x5607cb294aa0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5607cb29f990 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5607cb29fa80 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5607cb29fba8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5607cb29fd28 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5607cb29fea8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5607cb2a0028 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x5607cb2b0e58 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5607cb2b16c8 <col:11>
| |-CXXDestructorDecl 0x5607cb2b0f30 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5607cb2b1068 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5607cb2b1068
| | `-ParmVarDecl 0x5607cb2b1178 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x5607cb2b1218 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5607cb2b1218
| | `-ParmVarDecl 0x5607cb2b1328 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x5607cb2b40e8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5607cb2b41f8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5607cb2b4478 <col:11>
| |   `-ReturnStmt 0x5607cb2b4468 <col:11>
| |     `-UnaryOperator 0x5607cb2b4450 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5607cb2b4440 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x5607cb2b4268 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5607cb2b4268
|   `-ParmVarDecl 0x5607cb2b4378 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5607cb2a0090 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5607cb2a01a8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5607cb2a0248 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5607cb2a02b0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5607cb2a0318 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5607cb2a0380 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5607cb2a03e0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5607cb2a04a0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5607cb2a0500 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5607cb2a0560 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x5607cb2b0d68 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5607cb2a0248 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x5607cb2b16d8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x5607cb2b1730 <col:12>
| |-CXXConstructorDecl 0x5607cb2b1398 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5607cb2b1398
| | `-ParmVarDecl 0x5607cb2b14a8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x5607cb2b1548 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5607cb2b1548
| | `-ParmVarDecl 0x5607cb2b1658 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x5607cb2b37d0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5607cb2a05d8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5607cb2a0638 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5607cb2a06a0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5607cb2a0708 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5607cb2a0770 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5607cb2a07d8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5607cb2a0838 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5607cb2a0898 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5607cb2a0900 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5607cb2a0988 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5607cb2a05d8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x5607cb2b0d00 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5607cb2a0838 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x5607cb2b1740 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x5607cb2b17a0 <col:21, line:755:5>
|-CXXConstructorDecl 0x5607cb2a0b28 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5607cb2a0a68 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5607cb2a0c20 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5607cb2a0e08 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5607cb2a0d10 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5607cb2a10d8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5607cb2a0ec0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5607cb2a0f38 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5607cb2a0fb0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5607cb2a12f8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5607cb2a11a8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5607cb2a1220 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x5607cb2a98d8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5607cb2a13b8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5607cb2a1430 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5607cb2a14a8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x5607cb2a9a30 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5607cb2a99a0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5607cb2a9b78 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5607cb2a9ae8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x5607cb2a9c70 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607cb321d48 <../elements/ethernet/ip6ndsolicitor.hh:75:4, line:83:3> line:75:11 referenced struct NDEntry definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable
| |-DefaultConstructor exists non_trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5607cb321e68 <col:4, col:11> col:11 implicit struct NDEntry
|-FieldDecl 0x5607cb321f08 <line:76:5, col:16> col:16 ip6 'IP6Address'
|-FieldDecl 0x5607cb321f68 <line:77:5, col:18> col:18 en 'EtherAddress'
|-FieldDecl 0x5607cb321fc8 <line:78:5, col:21> col:21 last_response_jiffies 'click_jiffies_t':'unsigned int'
|-FieldDecl 0x5607cb322070 <line:79:5, col:18> col:14 ok 'unsigned int'
| `-ConstantExpr 0x5607cb322050 <col:18> 'int' Int: 1
|   `-IntegerLiteral 0x5607cb322018 <col:18> 'int' 1
|-FieldDecl 0x5607cb322118 <line:80:5, col:23> col:14 polling 'unsigned int'
| `-ConstantExpr 0x5607cb3220f8 <col:23> 'int' Int: 1
|   `-IntegerLiteral 0x5607cb3220c0 <col:23> 'int' 1
|-FieldDecl 0x5607cb32ceb0 <line:81:5, col:13> col:13 p 'Packet *'
`-FieldDecl 0x5607cb32cfb0 <line:82:5, col:21> col:21 next 'struct NDEntry *'

Layout: <CGRecordLayout
  LLVMType:%"struct.IP6NDSolicitor::NDEntry" = type { %class.IP6Address, %class.EtherAddress, i32, i8, %class.Packet*, %"struct.IP6NDSolicitor::NDEntry"* }
  NonVirtualBaseLLVMType:%"struct.IP6NDSolicitor::NDEntry" = type { %class.IP6Address, %class.EtherAddress, i32, i8, %class.Packet*, %"struct.IP6NDSolicitor::NDEntry"* }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:1 IsSigned:0 StorageSize:8 StorageOffset:28>
    <CGBitFieldInfo Offset:1 Size:1 IsSigned:0 StorageSize:8 StorageOffset:28>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607cb25fb30 prev 0x5607cb256970 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5607cb25fc28 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x5607cb25fcc8 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x5607cb266a90 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5607cb266e78 <col:11>
|-CXXConstructorDecl 0x5607cb266b70 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5607cb266c58 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5607cb2675c0 <col:11>
|-CXXConstructorDecl 0x5607cb266cf8 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5607cb266e08 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x5607cb268e18 <col:11>
|-CXXDestructorDecl 0x5607cb268128 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5607caf6ecd8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5607caf6ede8 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5607caf6f6b0 <col:11>
|   `-ReturnStmt 0x5607caf6f6a0 <col:11>
|     `-UnaryOperator 0x5607caf6f688 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5607caf6f678 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x5607caf6ee58 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5607caf6ef68 <col:11> col:11 'Timestamp::rep_t &&'
  `-CompoundStmt 0x5607cb31ed70 <col:11>
    `-ReturnStmt 0x5607cb31ed60 <col:11>
      `-UnaryOperator 0x5607cb31ed48 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x5607cb31ed38 <col:11> 'Timestamp::rep_t *' this

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607cb255b28 prev 0x5607cb255838 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5607cb255c20 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x5607cb255cb0 <col:19, col:25> col:19 public
|-TypedefDecl 0x5607cb255ce8 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x5607caebaeb0 'int32_t' sugar
|   |-Typedef 0x5607cadcc238 'int32_t'
|   `-TypedefType 0x5607cada53f0 '__int32_t' sugar
|     |-Typedef 0x5607cada5008 '__int32_t'
|     `-BuiltinType 0x5607cad633b0 'int'
|-TypedefDecl 0x5607cb255d50 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x5607caebb070 'int64_t' sugar
|   |-Typedef 0x5607cadcc2a0 'int64_t'
|   `-TypedefType 0x5607cada5510 '__int64_t' sugar
|     |-Typedef 0x5607cada50e8 '__int64_t'
|     `-BuiltinType 0x5607cad633d0 'long'
|-EnumDecl 0x5607cb255da8 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x5607cb255f20 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x5607cb255f00 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x5607cb255ed8 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x5607cb255ec0 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x5607cb255e90 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x5607cb256018 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x5607cb255ff8 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x5607cb255fd0 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x5607cb255fb8 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x5607cb255f90 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x5607cb255f70 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x5607cb256068 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x5607cb256170 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5607cb2566c0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb256150 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x5607cb256130 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x5607cb256200 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5607cb2566d8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb2561e0 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x5607cb2561c0 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x5607cb256290 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5607cb2566f0 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb256270 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x5607cb256250 <col:25> 'int' 1000
| |-EnumConstantDecl 0x5607cb256320 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5607cb256708 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb256300 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x5607cb2562e0 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x5607cb2563b0 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5607cb256720 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb256390 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x5607cb256370 <col:25> 'int' 1000
| |-EnumConstantDecl 0x5607cb256440 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5607cb256738 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb256420 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x5607cb256400 <col:24> 'int' 1000
| |-EnumConstantDecl 0x5607cb2564d0 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5607cb256750 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb2564b0 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x5607cb256490 <col:26> 'int' EnumConstant 0x5607cb256170 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x5607cb2565a0 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5607cb256768 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb256580 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x5607cb256560 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x5607cb256520 <col:27> 'int' EnumConstant 0x5607cb2564d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x5607cb256540 <col:44> 'int' EnumConstant 0x5607cb256440 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x5607cb256670 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x5607cb256780 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5607cb256650 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x5607cb256630 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x5607cb2565f0 <col:27> 'int' EnumConstant 0x5607cb2564d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x5607cb256610 <col:44> 'int' EnumConstant 0x5607cb256320 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x5607cb256798 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x5607cb2568a0 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x5607cb2568f0 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5607cb256880 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x5607cb256860 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5607cb2564d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x5607cb256918 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x5607caebaae0 'uninitialized_type'
|   `-CXXRecord 0x5607caebaa48 'uninitialized_type'
|-CXXRecordDecl 0x5607cb256970 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x5607cb256a80 <line:174:5, line:176:5> line:174:12 used Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x5607cb260c78 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5607cb266e88 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5607cb266fa8 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x5607cb266f60 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x5607cb266ef0 <col:9> '<bound member function type>' ->assign 0x5607cb25b6c8
|     | `-CXXThisExpr 0x5607cb266ee0 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x5607cb266f20 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x5607cb266f90 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5607cb266f40 <col:19> 'int' 0
|-CXXConstructorDecl 0x5607cb256cc8 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x5607cb256b40 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x5607cb256bb8 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5607cb2627c0 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5607cb2627a0 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x5607cb260c78 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5607cb266fc0 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5607cb267110 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x5607cb267098 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x5607cb267028 <col:9> '<bound member function type>' ->assign 0x5607cb25b6c8
|     | `-CXXThisExpr 0x5607cb267018 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5607cb2670e0 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5607cb2670c8 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x5607cb267058 <col:16> 'long' lvalue ParmVar 0x5607cb256b40 'sec' 'long'
|     `-ImplicitCastExpr 0x5607cb2670f8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5607cb267078 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5607cb256bb8 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5607cb256f28 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5607cb256d98 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x5607cb256e10 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5607cb2627f8 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5607cb2627d8 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x5607cb260c78 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5607cb267128 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5607cb267260 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x5607cb267200 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x5607cb267190 <col:9> '<bound member function type>' ->assign 0x5607cb25b6c8
|     | `-CXXThisExpr 0x5607cb267180 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5607cb267230 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5607cb2671c0 <col:16> 'int' lvalue ParmVar 0x5607cb256d98 'sec' 'int'
|     `-ImplicitCastExpr 0x5607cb267248 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5607cb2671e0 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5607cb256e10 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5607cb257188 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x5607cb256ff8 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x5607cb257070 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5607cb262830 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5607cb262810 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x5607cb260c78 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5607cb267278 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5607cb2673c8 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x5607cb267350 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x5607cb2672e0 <col:9> '<bound member function type>' ->assign 0x5607cb25b6c8
|     | `-CXXThisExpr 0x5607cb2672d0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5607cb267398 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5607cb267380 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x5607cb267310 <col:16> 'unsigned long' lvalue ParmVar 0x5607cb256ff8 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x5607cb2673b0 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5607cb267330 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5607cb257070 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5607cb258320 <line:199:5, line:201:5> line:199:21 used Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x5607cb257258 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x5607cb2572d0 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5607cb262868 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5607cb262848 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x5607cb260c78 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5607cb2673e0 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5607cb267530 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x5607cb2674b8 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x5607cb267448 <col:9> '<bound member function type>' ->assign 0x5607cb25b6c8
|     | `-CXXThisExpr 0x5607cb267438 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5607cb267500 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5607cb2674e8 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5607cb267478 <col:16> 'unsigned int' lvalue ParmVar 0x5607cb257258 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x5607cb267518 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5607cb267498 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5607cb2572d0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5607cb258480 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x5607cb2583f0 <col:31> col:37 'double'
|-CXXConstructorDecl 0x5607cb258618 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x5607cb258558 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x5607cb258848 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x5607cb258750 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x5607cb2589f8 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x5607cb258938 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x5607cb260c78 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5607cb2675d0 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x5607cb267548 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x5607cb258938 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5607cb267630 <col:19, line:214:5>
|-CXXConstructorDecl 0x5607cb258bc8 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x5607cb258b08 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x5607cb260c78 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5607cb267640 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5607cb2676f0 <col:53, line:219:5>
|   `-CStyleCastExpr 0x5607cb2676c8 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x5607cb267698 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x5607cb258b08 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x5607cb258db8 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x5607cb258d30 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x5607cb2558d0 'Timestamp'
|   | `-CXXRecord 0x5607cb255b28 'Timestamp'
|   `-ParenType 0x5607cb258cd0 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x5607cb258ca0 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x5607cb255e70 'Timestamp::seconds_type' sugar
|         |-Typedef 0x5607cb255ce8 'seconds_type'
|         `-TypedefType 0x5607caebaeb0 'int32_t' sugar
|           |-Typedef 0x5607cadcc238 'int32_t'
|           `-TypedefType 0x5607cada53f0 '__int32_t' sugar
|             |-Typedef 0x5607cada5008 '__int32_t'
|             `-BuiltinType 0x5607cad633b0 'int'
|-CXXConversionDecl 0x5607cb258ef8 <line:222:5, col:45> col:12 used operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5607cb258fc8 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x5607cb2677f8 <col:37, line:231:5>
|   `-ReturnStmt 0x5607cb2677e8 <line:227:9, col:23>
|     `-BinaryOperator 0x5607cb2677c8 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x5607cb267798 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5607cb267748 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x5607cb25fcc8
|       |   `-MemberExpr 0x5607cb267718 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x5607cb260c78
|       |     `-CXXThisExpr 0x5607cb267708 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5607cb2677b0 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x5607cb267778 <col:23> 'int' 0
|-CXXMethodDecl 0x5607cb259088 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x5607cb259148 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x5607cb259208 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x5607cb2592c8 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x5607cb259388 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x5607cb2594f8 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x5607cb259438 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x5607cb259640 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x5607cb2595b0 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5607cb259708 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5607cb2597a8 <col:54> "" ""
|-CXXMethodDecl 0x5607cb259838 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5607cb2598d8 <col:54> "" ""
|-CXXMethodDecl 0x5607cb259968 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5607cb259a08 <col:54> "" ""
|-CXXMethodDecl 0x5607cb259b08 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x5607cb259bd8 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x5607cb259d08 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x5607cb259e00 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x5607cb259f38 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5607cb267a10 <col:39, line:271:5>
|   `-ReturnStmt 0x5607cb267a00 <line:267:9, col:61>
|     `-CallExpr 0x5607cb2679a0 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x5607cb267988 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5607cb267810 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5607cb260fa8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x5607cb2679d0 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5607cb267870 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x5607cb25fcc8
|       |   `-MemberExpr 0x5607cb267840 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x5607cb260c78
|       |     `-CXXThisExpr 0x5607cb267830 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5607cb2679e8 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x5607cb267910 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x5607cb2678e0 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x5607cb2678a0 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5607cb2564d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x5607cb2678f8 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x5607cb2678c0 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5607cb256440 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5607cb259ff8 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5607cb267bd0 <col:39, line:279:5>
|   `-ReturnStmt 0x5607cb267bc0 <line:275:9, col:61>
|     `-CallExpr 0x5607cb267b60 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x5607cb267b48 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5607cb267a28 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5607cb260fa8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x5607cb267b90 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5607cb267a88 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x5607cb25fcc8
|       |   `-MemberExpr 0x5607cb267a58 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x5607cb260c78
|       |     `-CXXThisExpr 0x5607cb267a48 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5607cb267ba8 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x5607cb267b28 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x5607cb267af8 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x5607cb267ab8 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5607cb2564d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x5607cb267b10 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x5607cb267ad8 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5607cb256320 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5607cb25a0b8 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5607cb267d68 <col:39, line:287:5>
|   `-ReturnStmt 0x5607cb267d58 <line:283:9, col:53>
|     `-BinaryOperator 0x5607cb267d38 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x5607cb267d08 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5607cb267c28 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x5607cb25fcc8
|       |   `-MemberExpr 0x5607cb267bf8 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x5607cb260c78
|       |     `-CXXThisExpr 0x5607cb267be8 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5607cb267d20 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x5607cb267ce8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5607cb267cc8 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x5607cb267c98 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5607cb267c58 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5607cb256170 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5607cb267cb0 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5607cb267c78 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5607cb2564d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5607cb25a1a8 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5607cb269000 <col:40, line:293:5>
|   |-DeclStmt 0x5607cb267eb0 <line:291:9, col:48>
|   | `-VarDecl 0x5607cb267d90 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x5607cb267e90 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x5607cb267e38 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x5607cb267e08 <col:22> '<bound member function type>' ->subsec 0x5607cb259148
|   |     |   `-CXXThisExpr 0x5607cb267df8 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x5607cb267e78 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x5607cb267e58 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5607cb2565a0 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5607cb268ff0 <line:292:9, col:70>
|     `-ExprWithCleanups 0x5607cb268fd8 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x5607cb268fa8 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5607cb268f90 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x5607cb268f70 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x5607cb268f40 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x5607cb268cd8 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x5607cb268cc0 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x5607cb267ec8 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x5607cb267d90 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x5607cb268ee0 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x5607cb268ec8 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x5607cb268e98 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x5607cb268cf0 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x5607cb268c60 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x5607cb268c48 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x5607cb268bf8 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5607cb255a78 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x5607cb268b98 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x5607cb267ef8 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x5607cb267ee8 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x5607cb268be0 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x5607cb268bc8 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x5607cb2683b8 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x5607cb267f20 <col:39> 'int' 0
|               |               `-BinaryOperator 0x5607cb267fb0 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x5607cb267f80 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x5607cb267f40 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5607cb2565a0 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x5607cb267f98 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x5607cb267f60 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x5607cb267d90 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x5607cb268f10 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x5607cb268ca8 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x5607cb268c98 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x5607cb25a268 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5607cb269558 <col:40, line:302:5>
|   |-DeclStmt 0x5607cb269150 <line:297:9, col:48>
|   | `-VarDecl 0x5607cb269030 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x5607cb269130 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x5607cb2690d8 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x5607cb2690a8 <col:22> '<bound member function type>' ->subsec 0x5607cb259148
|   |     |   `-CXXThisExpr 0x5607cb269098 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x5607cb269118 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x5607cb2690f8 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5607cb256670 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5607cb269548 <line:298:9, col:70>
|     `-ExprWithCleanups 0x5607cb269530 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x5607cb269500 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5607cb2694e8 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x5607cb2694c8 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x5607cb269498 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x5607cb2693c0 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x5607cb2693a8 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x5607cb269168 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x5607cb269030 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x5607cb269438 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x5607cb269420 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x5607cb2693f0 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x5607cb2693d8 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x5607cb269348 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x5607cb269330 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x5607cb269310 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5607cb255a78 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x5607cb2692b0 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x5607cb269198 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x5607cb269188 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x5607cb2692f8 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x5607cb2692e0 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x5607cb269270 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x5607cb2691c0 <col:39> 'int' 0
|               |               `-BinaryOperator 0x5607cb269250 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x5607cb269220 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x5607cb2691e0 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5607cb256670 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x5607cb269238 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x5607cb269200 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x5607cb269030 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x5607cb269468 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x5607cb269390 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x5607cb269380 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x5607cb25a328 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5607cb2695e0 <col:40, line:306:5>
|   `-ReturnStmt 0x5607cb2695d0 <line:305:9, col:17>
|     `-CXXConstructExpr 0x5607cb2695a0 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x5607cb269588 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5607cb269578 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x5607cb25a4c8 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x5607cb25a3d8 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x5607cb25a698 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x5607cb25a5a0 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x5607cb25a788 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x5607cb25a8f8 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x5607cb25a838 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x5607cb269728 <col:56, line:320:5>
|   `-ReturnStmt 0x5607cb269718 <line:319:9, col:32>
|     `-ExprWithCleanups 0x5607cb269700 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x5607cb2696d0 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5607cb2696b8 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5607cb269678 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5607cb269648 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5607cb269608 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5607cb25a838 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x5607cb269660 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5607cb269628 <col:31> 'int' 0
|-CXXMethodDecl 0x5607cb25ab38 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5607cb25a9b0 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5607cb25aa28 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5607cb2698f8 <col:72, line:326:5>
|   `-ReturnStmt 0x5607cb2698e8 <line:325:9, col:51>
|     `-ExprWithCleanups 0x5607cb2698d0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5607cb2698a0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5607cb269888 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5607cb269848 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5607cb269830 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5607cb269750 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5607cb25a9b0 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5607cb2697f0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5607cb2697d8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5607cb269770 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5607cb25f420 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5607cb269818 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5607cb269790 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5607cb25aa28 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5607cb25ace8 <line:328:5, line:337:5> line:328:29 used make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5607cb25abf8 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5607cb269fc0 <col:56, line:337:5>
|   |-DeclStmt 0x5607cb269bf8 <line:329:9, col:51>
|   | `-VarDecl 0x5607cb269920 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5607cb269be0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5607cb269bb0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5607cb269b98 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5607cb269b80 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5607cb269b50 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5607cb269b38 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5607cb269b20 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5607cb269a10 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5607cb269db0 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5607cb269c60 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5607cb25fcc8
|   | | `-MemberExpr 0x5607cb269c30 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5607cb260c78
|   | |   `-DeclRefExpr 0x5607cb269c10 <col:9> 'Timestamp' lvalue Var 0x5607cb269920 't' 'Timestamp'
|   | `-BinaryOperator 0x5607cb269d90 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x5607cb269d60 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5607cb269c90 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x5607cb25abf8 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5607cb269d78 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x5607cb269d40 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x5607cb269d20 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x5607cb269cf0 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x5607cb269cb0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5607cb2564d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x5607cb269d08 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x5607cb269cd0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5607cb256440 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5607cb269fa8 <line:336:9, col:16>
|     `-CXXConstructExpr 0x5607cb269f78 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5607cb269f60 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5607cb269f40 <col:16> 'Timestamp' lvalue Var 0x5607cb269920 't' 'Timestamp'
|-CXXMethodDecl 0x5607cb25aeb0 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5607cb25ada0 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5607cb25ae18 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5607cb26a178 <col:72, line:343:5>
|   `-ReturnStmt 0x5607cb26a168 <line:342:9, col:51>
|     `-ExprWithCleanups 0x5607cb26a150 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5607cb26a120 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5607cb26a108 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5607cb26a0c8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5607cb26a0b0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5607cb269ff8 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5607cb25ada0 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5607cb26a070 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5607cb26a058 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5607cb26a018 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5607cb25f568 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5607cb26a098 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5607cb26a038 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5607cb25ae18 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5607cb25b000 <line:345:5, line:354:5> line:345:29 used make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5607cb25af70 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5607cb26a5c0 <col:56, line:354:5>
|   |-DeclStmt 0x5607cb26a368 <line:346:9, col:51>
|   | `-VarDecl 0x5607cb26a1a0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5607cb26a350 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5607cb26a320 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5607cb26a308 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5607cb26a2f0 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5607cb26a2c0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5607cb26a2a8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5607cb26a290 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5607cb26a260 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5607cb26a520 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5607cb26a3d0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5607cb25fcc8
|   | | `-MemberExpr 0x5607cb26a3a0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5607cb260c78
|   | |   `-DeclRefExpr 0x5607cb26a380 <col:9> 'Timestamp' lvalue Var 0x5607cb26a1a0 't' 'Timestamp'
|   | `-BinaryOperator 0x5607cb26a500 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x5607cb26a4d0 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5607cb26a400 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x5607cb25af70 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5607cb26a4e8 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x5607cb26a4b0 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x5607cb26a490 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x5607cb26a460 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x5607cb26a420 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5607cb2564d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x5607cb26a478 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x5607cb26a440 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5607cb256320 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5607cb26a5a8 <line:353:9, col:16>
|     `-CXXConstructExpr 0x5607cb26a578 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5607cb26a560 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5607cb26a540 <col:16> 'Timestamp' lvalue Var 0x5607cb26a1a0 't' 'Timestamp'
|-CXXMethodDecl 0x5607cb25b1c8 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5607cb25b0b8 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5607cb25b130 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5607cb26a778 <col:72, line:360:5>
|   `-ReturnStmt 0x5607cb26a768 <line:359:9, col:51>
|     `-ExprWithCleanups 0x5607cb26a750 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5607cb26a720 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5607cb26a708 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5607cb26a6c8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5607cb26a6b0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5607cb26a5f8 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5607cb25b0b8 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5607cb26a670 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5607cb26a658 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5607cb26a618 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5607cb25f6b0 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5607cb26a698 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5607cb26a638 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5607cb25b130 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5607cb25b318 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5607cb25b288 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5607cb2770e8 <col:56, line:371:5>
|   |-DeclStmt 0x5607cb26a968 <line:363:9, col:51>
|   | `-VarDecl 0x5607cb26a7a0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5607cb26a950 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5607cb26a920 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5607cb26a908 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5607cb26a8f0 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5607cb26a8c0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5607cb26a8a8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5607cb26a890 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5607cb26a860 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5607cb277048 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5607cb26a9d0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5607cb25fcc8
|   | | `-MemberExpr 0x5607cb26a9a0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5607cb260c78
|   | |   `-DeclRefExpr 0x5607cb26a980 <col:9> 'Timestamp' lvalue Var 0x5607cb26a7a0 't' 'Timestamp'
|   | `-CallExpr 0x5607cb276fe8 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x5607cb276fd0 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5607cb26aa00 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5607cb260fa8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x5607cb277018 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5607cb26aa20 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x5607cb25b288 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5607cb277030 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x5607cb276fb0 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x5607cb276f80 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x5607cb26aa40 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5607cb256170 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x5607cb276f98 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x5607cb26aa60 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5607cb2564d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5607cb2770d0 <line:370:9, col:16>
|     `-CXXConstructExpr 0x5607cb2770a0 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5607cb277088 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5607cb277068 <col:16> 'Timestamp' lvalue Var 0x5607cb26a7a0 't' 'Timestamp'
|-CXXMethodDecl 0x5607cb25b408 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x5607cb277228 <col:39, line:377:5>
|   `-ReturnStmt 0x5607cb277218 <line:376:9, col:30>
|     `-ExprWithCleanups 0x5607cb277200 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x5607cb2771d0 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5607cb2771b8 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5607cb277178 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x5607cb277120 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x5607cb277160 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5607cb277140 <col:29> 'int' 1
|-CXXMethodDecl 0x5607cb25b4c8 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x5607cb277308 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x5607cb2772c0 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x5607cb277250 <col:9> '<bound member function type>' ->assign 0x5607cb25b6c8
|     | `-CXXThisExpr 0x5607cb277240 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x5607cb277280 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x5607cb2772f0 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5607cb2772a0 <col:19> 'int' 0
|-CXXMethodDecl 0x5607cb25b6c8 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5607cb25b578 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5607cb25b5f0 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5607cb2628a0 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5607cb262880 <col:60> 'int' 0
| `-CompoundStmt 0x5607cb277500 <col:63, line:395:5>
|   `-BinaryOperator 0x5607cb2774e0 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x5607cb277360 <col:9, col:12> 'int64_t':'long' lvalue .x 0x5607cb25fcc8
|     | `-MemberExpr 0x5607cb277330 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x5607cb260c78
|     |   `-CXXThisExpr 0x5607cb277320 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x5607cb2774c0 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x5607cb277450 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x5607cb2773f0 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x5607cb2773d8 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x5607cb2773c0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x5607cb277390 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5607cb25b578 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x5607cb277438 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x5607cb277418 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5607cb2564d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x5607cb2774a8 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x5607cb277490 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x5607cb277470 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x5607cb25b5f0 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5607cb25b898 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5607cb25b788 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5607cb25b800 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5607cb277658 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x5607cb277610 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x5607cb277528 <col:9> '<bound member function type>' ->assign 0x5607cb25b6c8
|     | `-CXXThisExpr 0x5607cb277518 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5607cb277640 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5607cb277558 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5607cb25b788 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x5607cb2775d0 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5607cb2775b8 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5607cb277578 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5607cb25f568 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x5607cb2775f8 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5607cb277598 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x5607cb25b800 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5607cb25ba68 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5607cb25b958 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5607cb25b9d0 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5607cb2777b0 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x5607cb277768 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x5607cb277680 <col:9> '<bound member function type>' ->assign 0x5607cb25b6c8
|     | `-CXXThisExpr 0x5607cb277670 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5607cb277798 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5607cb2776b0 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5607cb25b958 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x5607cb277728 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5607cb277710 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5607cb2776d0 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5607cb25f6b0 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x5607cb277750 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5607cb2776f0 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x5607cb25b9d0 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5607cb25bc38 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5607cb25bb28 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5607cb25bba0 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5607cb2628d8 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5607cb2628b8 <col:57> 'int' 0
| `-DeprecatedAttr 0x5607cb25bce8 <col:75> "" ""
|-CXXMethodDecl 0x5607cb25be78 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5607cb25bd68 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5607cb25bde0 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5607cb25bf28 <col:74> "" ""
|-CXXMethodDecl 0x5607cb25c0b8 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5607cb25bfa8 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5607cb25c020 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5607cb25c168 <col:74> "" ""
|-CXXMethodDecl 0x5607cb25c1f8 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x5607cb25c298 <col:42> "" ""
|-CXXMethodDecl 0x5607cb25ead0 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x5607cb25e9b0 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5607cb25ea30 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x5607cb25eba0 <line:432:5, col:33> col:29 now 'Timestamp ()' static inline
|-CXXMethodDecl 0x5607cb25ec60 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x5607cb25ed00 <col:20>
| `-OptimizeNoneAttr 0x5607cb25ed58 <col:30>
|-CXXMethodDecl 0x5607cb25eda0 <line:446:5, col:36> col:29 used recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x5607cb25ee60 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x5607cb25ef20 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x5607cb25efe0 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x5607cb25f0a0 <line:481:5, col:43> col:29 used recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x5607cb25f160 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x5607cb25f220 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x5607cb25f2e0 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x5607cb25f420 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5607cb25f390 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5607cb2778f8 <col:58, line:512:5>
|   `-ReturnStmt 0x5607cb2778e8 <line:511:9, col:53>
|     `-BinaryOperator 0x5607cb2778c8 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5607cb277898 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5607cb2777c8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5607cb25f390 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5607cb2778b0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5607cb277878 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5607cb277858 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5607cb277828 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5607cb2777e8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5607cb2564d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5607cb277840 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5607cb277808 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5607cb256440 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5607cb25f568 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5607cb25f4d8 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5607cb277a40 <col:58, line:516:5>
|   `-ReturnStmt 0x5607cb277a30 <line:515:9, col:53>
|     `-BinaryOperator 0x5607cb277a10 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5607cb2779e0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5607cb277910 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5607cb25f4d8 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5607cb2779f8 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5607cb2779c0 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5607cb2779a0 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5607cb277970 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5607cb277930 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5607cb2564d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5607cb277988 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5607cb277950 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5607cb256320 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5607cb25f6b0 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5607cb25f620 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5607cb277b88 <col:58, line:520:5>
|   `-ReturnStmt 0x5607cb277b78 <line:519:9, col:53>
|     `-BinaryOperator 0x5607cb277b58 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5607cb277b28 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5607cb277a58 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5607cb25f620 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5607cb277b40 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5607cb277b08 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5607cb277ae8 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x5607cb277ab8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5607cb277a78 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5607cb256170 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5607cb277ad0 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5607cb277a98 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5607cb2564d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5607cb25f7f8 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5607cb25f768 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5607cb277cd0 <col:60, line:524:5>
|   `-ReturnStmt 0x5607cb277cc0 <line:523:9, col:55>
|     `-BinaryOperator 0x5607cb277ca0 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5607cb277c70 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5607cb277ba0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5607cb25f768 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5607cb277c88 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5607cb277c50 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5607cb277c30 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x5607cb277c00 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5607cb277bc0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5607cb2564d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5607cb277c18 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5607cb277be0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5607cb256440 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5607cb25f940 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5607cb25f8b0 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5607cb277e18 <col:60, line:528:5>
|   `-ReturnStmt 0x5607cb277e08 <line:527:9, col:55>
|     `-BinaryOperator 0x5607cb277de8 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5607cb277db8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5607cb277ce8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5607cb25f8b0 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5607cb277dd0 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5607cb277d98 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5607cb277d78 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x5607cb277d48 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5607cb277d08 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5607cb2564d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5607cb277d60 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5607cb277d28 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5607cb256320 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5607cb25fa88 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5607cb25f9f8 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5607cb277f60 <col:60, line:532:5>
|   `-ReturnStmt 0x5607cb277f50 <line:531:9, col:55>
|     `-BinaryOperator 0x5607cb277f30 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5607cb277f00 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5607cb277e30 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5607cb25f9f8 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5607cb277f18 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5607cb277ee0 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5607cb277ec0 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5607cb277e90 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5607cb277e50 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5607cb256170 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5607cb277ea8 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5607cb277e70 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5607cb2564d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x5607cb25fb30 prev 0x5607cb256970 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5607cb25fc28 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x5607cb25fcc8 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x5607cb266a90 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5607cb266e78 <col:11>
| |-CXXConstructorDecl 0x5607cb266b70 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5607cb266c58 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x5607cb2675c0 <col:11>
| |-CXXConstructorDecl 0x5607cb266cf8 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x5607cb266e08 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x5607cb268e18 <col:11>
| |-CXXDestructorDecl 0x5607cb268128 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5607caf6ecd8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5607caf6ede8 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x5607caf6f6b0 <col:11>
| |   `-ReturnStmt 0x5607caf6f6a0 <col:11>
| |     `-UnaryOperator 0x5607caf6f688 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5607caf6f678 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x5607caf6ee58 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x5607caf6ef68 <col:11> col:11 'Timestamp::rep_t &&'
|   `-CompoundStmt 0x5607cb31ed70 <col:11>
|     `-ReturnStmt 0x5607cb31ed60 <col:11>
|       `-UnaryOperator 0x5607cb31ed48 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5607cb31ed38 <col:11> 'Timestamp::rep_t *' this
|-EnumDecl 0x5607cb25fd30 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x5607cb25fe30 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5607cb260030 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb25fe10 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5607cb25fdf0 <col:21> 'int' 0
| |-EnumConstantDecl 0x5607cb25fec0 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5607cb260048 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb25fea0 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x5607cb25fe80 <col:23> 'int' 1
| |-EnumConstantDecl 0x5607cb25ff50 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5607cb260060 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb25ff30 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x5607cb25ff10 <col:23> 'int' 2
| `-EnumConstantDecl 0x5607cb25ffe0 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x5607cb260078 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5607cb25ffc0 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x5607cb25ffa0 <col:27> 'int' 3
|-CXXMethodDecl 0x5607cb2600b8 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x5607cb260180 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x5607cb260388 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x5607cb260230 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x5607cb2602b0 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x5607cb2628f0 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x5607cb260598 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x5607cb260448 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x5607cb2604c0 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x5607cb260668 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x5607cb260728 <line:635:5, col:37> col:24 used warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x5607cb260898 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x5607cb2607d8 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x5607cb260960 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x5607cb260a20 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x5607cb260ae0 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x5607cb260ba0 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x5607cb260c40 <line:670:3, col:10> col:3 private
|-FieldDecl 0x5607cb260c78 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x5607cb260ce8 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x5607cb277f78 <col:27, line:684:5>
|-CXXMethodDecl 0x5607cb260da8 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x5607cb277f88 <col:27, line:696:5>
|-CXXMethodDecl 0x5607cb260fa8 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x5607cb260e58 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x5607cb260ed0 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5607cb278110 <col:66, line:700:5>
|   `-ReturnStmt 0x5607cb278100 <line:699:9, col:31>
|     `-CallExpr 0x5607cb2780a0 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x5607cb278088 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5607cb278038 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x5607cb0e3358 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x5607cb2780d0 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x5607cb277ff8 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x5607cb260e58 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x5607cb2780e8 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5607cb278018 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x5607cb260ed0 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5607cb261318 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x5607cb261068 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x5607cb2610e0 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x5607cb261158 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x5607cb2611d0 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5607cb278460 <col:64, line:707:5>
|   |-DeclStmt 0x5607cb2781a0 <line:704:9, col:24>
|   | `-VarDecl 0x5607cb278138 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x5607cb2783b0 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x5607cb2781b8 <col:9> 'int32_t':'int' lvalue ParmVar 0x5607cb2610e0 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x5607cb278398 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x5607cb278330 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x5607cb278318 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5607cb278298 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x5607cb0e8628 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x5607cb278368 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5607cb278238 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x5607cb261158 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x5607cb278380 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5607cb278258 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x5607cb2611d0 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x5607cb278278 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x5607cb278138 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x5607cb278440 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x5607cb2783d0 <col:9> 'int32_t':'int' lvalue ParmVar 0x5607cb261068 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x5607cb278428 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x5607cb278410 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x5607cb2783f0 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x5607cb278138 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x5607cb2615b8 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x5607cb2613e8 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x5607cb261460 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x5607cb2614d8 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x5607cb261858 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x5607cb261680 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x5607cb2616f8 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x5607cb261770 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x5607cb2619e8 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x5607cb261920 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x5607cb261be8 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x5607cb261aa0 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x5607cb261b18 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x5607cb261eb8 <line:717:5, col:73> col:24
| `-FunctionDecl 0x5607cb261df8 parent 0x5607cad632b8 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5607cb261ca8 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x5607cb261d20 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x5607cb2620d8 <line:718:5, col:72> col:24
| `-FunctionDecl 0x5607cb262018 parent 0x5607cad632b8 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5607cb261f08 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x5607cb261f80 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x5607cb2622a0 <line:719:5, col:57> col:29
| `-FunctionDecl 0x5607cb2621e8 parent 0x5607cad632b8 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x5607cb262128 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x5607cb262528 <line:720:5, col:73> col:30
| `-FunctionDecl 0x5607cb262468 parent 0x5607cad632b8 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5607cb262318 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x5607cb262390 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x5607cb262748 <line:721:5, col:73> col:30
| `-FunctionDecl 0x5607cb262688 parent 0x5607cad632b8 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5607cb262578 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x5607cb2625f0 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x5607cb267fd0 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x5607cb2680b8 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x5607cb260c78 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5607cb268b28 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x5607cb268ae0 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x5607cb260c78
| |     `-DeclRefExpr 0x5607cb268ac0 <col:7> 'const Timestamp' lvalue ParmVar 0x5607cb2680b8 '' 'const Timestamp &'
| `-CompoundStmt 0x5607cb268b88 <col:7>
|-CXXConstructorDecl 0x5607cb268238 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5607cb268348 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x5607cb260c78 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5607cb268e28 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x5607cb268dd0 <col:7> 'Timestamp::rep_t' xvalue ._t 0x5607cb260c78
| |     `-CXXStaticCastExpr 0x5607cb268da0 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x5607cb268d70 <col:7> 'Timestamp' lvalue ParmVar 0x5607cb268348 '' 'Timestamp &&'
| `-CompoundStmt 0x5607cb268e88 <col:7>
|-CXXDestructorDecl 0x5607cb2683f8 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5607caf6eb28 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x5607caf6ec38 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x5607caf6f728 <col:7>
|   |-CXXMemberCallExpr 0x5607caf6f6c8 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x5607caf6f608 <col:7> '<bound member function type>' .operator= 0x5607caf6ecd8
|   | | `-MemberExpr 0x5607caf6f518 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x5607cb260c78
|   | |   `-CXXThisExpr 0x5607caf6f508 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x5607caf6f5d8 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x5607cb260c78
|   |   `-DeclRefExpr 0x5607caf6f5b8 <col:7> 'const Timestamp' lvalue ParmVar 0x5607caf6ec38 '' 'const Timestamp &'
|   `-ReturnStmt 0x5607caf6f718 <col:7>
|     `-UnaryOperator 0x5607caf6f700 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5607caf6f6f0 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x5607caf6efd8 <col:7> col:7 implicit used operator= 'Timestamp &(Timestamp &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5607caf6f0e8 <col:7> col:7 used 'Timestamp &&'
  `-CompoundStmt 0x5607cb31ede8 <col:7>
    |-CXXMemberCallExpr 0x5607cb31ed88 <col:7> 'Timestamp::rep_t' lvalue
    | |-MemberExpr 0x5607cb31ecf0 <col:7> '<bound member function type>' .operator= 0x5607caf6ee58
    | | `-MemberExpr 0x5607cb31ebc0 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x5607cb260c78
    | |   `-CXXThisExpr 0x5607cb31ebb0 <col:7> 'Timestamp *' this
    | `-MemberExpr 0x5607cb31ecc0 <col:7> 'Timestamp::rep_t' xvalue ._t 0x5607cb260c78
    |   `-CXXStaticCastExpr 0x5607cb31ec90 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
    |     `-DeclRefExpr 0x5607cb31ec60 <col:7> 'Timestamp' lvalue ParmVar 0x5607caf6f0e8 '' 'Timestamp &&'
    `-ReturnStmt 0x5607cb31edd8 <col:7>
      `-UnaryOperator 0x5607cb31edc0 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x5607cb31edb0 <col:7> 'Timestamp *' this

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607cb31bdc8 <../dummy_inc/click/timer.hh:343:5, line:345:5> line:343:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x5607cb31bef8 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
`-CXXDestructorDecl 0x5607cb31c9e8 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%union.anon.0 = type { void (%class.Timer*, i8*)* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607cb3162e8 prev 0x5607cb2c6e20 <../dummy_inc/click/timer.hh:14:1, line:358:1> line:14:7 referenced class Timer definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5607cb3163e0 <col:1, col:7> col:7 implicit referenced class Timer
|-AccessSpecDecl 0x5607cb316470 <col:15, col:21> col:15 public
|-CXXConstructorDecl 0x5607cb3164d0 <line:22:5, col:11> col:5 Timer 'void ()'
|-CXXRecordDecl 0x5607cb316578 <line:24:5, line:25:5> line:24:12 referenced struct do_nothing_t definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| `-CXXRecordDecl 0x5607cb316698 <col:5, col:12> col:12 implicit struct do_nothing_t
|-CXXConstructorDecl 0x5607cb316838 <line:32:5, col:37> col:5 Timer 'void (const Timer::do_nothing_t &)'
| `-ParmVarDecl 0x5607cb316778 <col:11, col:31> col:31 unused 'const Timer::do_nothing_t &'
|-CXXConstructorDecl 0x5607cb316a88 <line:38:5, col:43> col:5 used Timer 'void (TimerCallback, void *)'
| |-ParmVarDecl 0x5607cb3168f8 <col:11, col:25> col:25 f 'TimerCallback':'void (*)(Timer *, void *)'
| `-ParmVarDecl 0x5607cb316978 <col:28, col:34> col:34 user_data 'void *'
|-CXXConstructorDecl 0x5607cb316c18 <line:43:5, col:27> col:5 Timer 'void (Element *)'
| `-ParmVarDecl 0x5607cb316b50 <col:11, col:20> col:20 element 'Element *'
|-CXXConstructorDecl 0x5607cb316d98 <line:47:5, col:21> col:5 Timer 'void (Task *)'
| `-ParmVarDecl 0x5607cb316cd8 <col:11, col:17> col:17 task 'Task *'
|-CXXConstructorDecl 0x5607cb316f48 <line:52:5, col:25> col:5 Timer 'void (const Timer &)'
| `-ParmVarDecl 0x5607cb316e88 <col:11, col:24> col:24 x 'const Timer &'
|-CXXDestructorDecl 0x5607cb317040 <line:55:5, line:58:5> line:55:12 used ~Timer 'void () noexcept' inline
| `-CompoundStmt 0x5607cb31cbc0 <col:21, line:58:5>
|   `-IfStmt 0x5607cb31cba8 <line:56:2, line:57:17>
|     |-CXXMemberCallExpr 0x5607cb31cb10 <line:56:6, col:16> 'bool'
|     | `-MemberExpr 0x5607cb31cae0 <col:6> '<bound member function type>' ->scheduled 0x5607cb317898
|     |   `-ImplicitCastExpr 0x5607cb31cb30 <col:6> 'const Timer *' <NoOp>
|     |     `-CXXThisExpr 0x5607cb31cad0 <col:6> 'Timer *' implicit this
|     `-CXXMemberCallExpr 0x5607cb31cb88 <line:57:6, col:17> 'void'
|       `-MemberExpr 0x5607cb31cb58 <col:6> '<bound member function type>' ->unschedule 0x5607cb31b270
|         `-CXXThisExpr 0x5607cb31cb48 <col:6> 'Timer *' implicit this
|-CXXMethodDecl 0x5607cb317140 <line:62:5, line:65:5> line:62:17 used assign 'void ()' inline
| `-CompoundStmt 0x5607cb31cd60 <col:26, line:65:5>
|   |-BinaryOperator 0x5607cb31cc80 <line:63:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5607cb31cc18 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5607cb31bef8
|   | | `-MemberExpr 0x5607cb31cbe8 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5607cb31bfb8
|   | |   `-CXXThisExpr 0x5607cb31cbd8 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5607cb31cc68 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5607cb31cc48 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5607cb31c418 'do_nothing_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5607cb31cd40 <line:64:2, col:20> 'void *' lvalue '='
|     |-MemberExpr 0x5607cb31ccb0 <col:2> 'void *' lvalue ->_thunk 0x5607cb31c038
|     | `-CXXThisExpr 0x5607cb31cca0 <col:2> 'Timer *' implicit this
|     `-CStyleCastExpr 0x5607cb31cd18 <col:11, col:20> 'void *' <IntegralToPointer>
|       `-IntegerLiteral 0x5607cb31cce0 <col:20> 'int' 1
|-CXXMethodDecl 0x5607cb317280 <line:68:5, line:71:5> line:68:17 assign 'void (const Timer::do_nothing_t &)' inline
| |-ParmVarDecl 0x5607cb3171f0 <col:24, col:44> col:44 used unused 'const Timer::do_nothing_t &'
| `-CompoundStmt 0x5607cb31cec0 <col:52, line:71:5>
|   |-CStyleCastExpr 0x5607cb31cdb0 <line:69:2, col:9> 'void' <ToVoid>
|   | `-DeclRefExpr 0x5607cb31cd80 <col:9> 'const Timer::do_nothing_t' lvalue ParmVar 0x5607cb3171f0 'unused' 'const Timer::do_nothing_t &'
|   `-CXXMemberCallExpr 0x5607cb31cea0 <line:70:2, col:9> 'void'
|     `-MemberExpr 0x5607cb31ce70 <col:2> '<bound member function type>' ->assign 0x5607cb317140
|       `-CXXThisExpr 0x5607cb31ce60 <col:2> 'Timer *' implicit this
|-CXXMethodDecl 0x5607cb317450 <line:76:5, line:79:5> line:76:17 assign 'void (TimerCallback, void *)' inline
| |-ParmVarDecl 0x5607cb317338 <col:24, col:38> col:38 used f 'TimerCallback':'void (*)(Timer *, void *)'
| |-ParmVarDecl 0x5607cb3173b8 <col:41, col:47> col:47 used user_data 'void *'
| `-CompoundStmt 0x5607cb31d040 <col:58, line:79:5>
|   |-BinaryOperator 0x5607cb31cf88 <line:77:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5607cb31cf20 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5607cb31bef8
|   | | `-MemberExpr 0x5607cb31cef0 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5607cb31bfb8
|   | |   `-CXXThisExpr 0x5607cb31cee0 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5607cb31cf70 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' <LValueToRValue>
|   |   `-DeclRefExpr 0x5607cb31cf50 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue ParmVar 0x5607cb317338 'f' 'TimerCallback':'void (*)(Timer *, void *)'
|   `-BinaryOperator 0x5607cb31d020 <line:78:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5607cb31cfb8 <col:2> 'void *' lvalue ->_thunk 0x5607cb31c038
|     | `-CXXThisExpr 0x5607cb31cfa8 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5607cb31d008 <col:11> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x5607cb31cfe8 <col:11> 'void *' lvalue ParmVar 0x5607cb3173b8 'user_data' 'void *'
|-CXXMethodDecl 0x5607cb3175a0 <line:84:5, line:87:5> line:84:10 assign 'void (Element *)'
| |-ParmVarDecl 0x5607cb317510 <col:17, col:26> col:26 used element 'Element *'
| `-CompoundStmt 0x5607cb31d1d8 <col:35, line:87:5>
|   |-BinaryOperator 0x5607cb31d108 <line:85:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5607cb31d0a0 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5607cb31bef8
|   | | `-MemberExpr 0x5607cb31d070 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5607cb31bfb8
|   | |   `-CXXThisExpr 0x5607cb31d060 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5607cb31d0f0 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5607cb31d0d0 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5607cb31c5f0 'element_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5607cb31d1b8 <line:86:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5607cb31d138 <col:2> 'void *' lvalue ->_thunk 0x5607cb31c038
|     | `-CXXThisExpr 0x5607cb31d128 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5607cb31d1a0 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x5607cb31d188 <col:11> 'Element *' <LValueToRValue>
|         `-DeclRefExpr 0x5607cb31d168 <col:11> 'Element *' lvalue ParmVar 0x5607cb317510 'element' 'Element *'
|-CXXMethodDecl 0x5607cb3176e8 <line:91:5, line:94:5> line:91:10 assign 'void (Task *)'
| |-ParmVarDecl 0x5607cb317658 <col:17, col:23> col:23 used task 'Task *'
| `-CompoundStmt 0x5607cb31d370 <col:29, line:94:5>
|   |-BinaryOperator 0x5607cb31d2a0 <line:92:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5607cb31d238 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5607cb31bef8
|   | | `-MemberExpr 0x5607cb31d208 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5607cb31bfb8
|   | |   `-CXXThisExpr 0x5607cb31d1f8 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5607cb31d288 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5607cb31d268 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5607cb31c7c8 'task_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5607cb31d350 <line:93:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5607cb31d2d0 <col:2> 'void *' lvalue ->_thunk 0x5607cb31c038
|     | `-CXXThisExpr 0x5607cb31d2c0 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5607cb31d338 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x5607cb31d320 <col:11> 'Task *' <LValueToRValue>
|         `-DeclRefExpr 0x5607cb31d300 <col:11> 'Task *' lvalue ParmVar 0x5607cb317658 'task' 'Task *'
|-CXXMethodDecl 0x5607cb3177d8 <line:98:5, line:100:5> line:98:17 initialized 'bool () const' inline
| `-CompoundStmt 0x5607cb31d450 <col:37, line:100:5>
|   `-ReturnStmt 0x5607cb31d440 <line:99:2, col:19>
|     `-BinaryOperator 0x5607cb31d420 <col:9, col:19> 'bool' '!='
|       |-ImplicitCastExpr 0x5607cb31d3f0 <col:9> 'Element *' <LValueToRValue>
|       | `-MemberExpr 0x5607cb31d3a0 <col:9> 'Element *const' lvalue ->_owner 0x5607cb31c098
|       |   `-CXXThisExpr 0x5607cb31d390 <col:9> 'const Timer *' implicit this
|       `-ImplicitCastExpr 0x5607cb31d408 <col:19> 'Element *' <NullToPointer>
|         `-IntegerLiteral 0x5607cb31d3d0 <col:19> 'int' 0
|-CXXMethodDecl 0x5607cb317898 <line:103:5, line:105:5> line:103:17 used scheduled 'bool () const' inline
| `-CompoundStmt 0x5607cb31d510 <col:35, line:105:5>
|   `-ReturnStmt 0x5607cb31d500 <line:104:2, col:23>
|     `-BinaryOperator 0x5607cb31d4e0 <col:9, col:23> 'bool' '!='
|       |-ImplicitCastExpr 0x5607cb31d4c8 <col:9> 'int' <LValueToRValue>
|       | `-MemberExpr 0x5607cb31d478 <col:9> 'const int' lvalue ->_schedpos1 0x5607cb31bd18
|       |   `-CXXThisExpr 0x5607cb31d468 <col:9> 'const Timer *' implicit this
|       `-IntegerLiteral 0x5607cb31d4a8 <col:23> 'int' 0
|-CXXMethodDecl 0x5607cb317958 <line:116:5, line:118:5> line:116:29 expiry_steady 'const Timestamp &() const' inline
| `-CompoundStmt 0x5607cb31d578 <col:51, line:118:5>
|   `-ReturnStmt 0x5607cb31d568 <line:117:2, col:9>
|     `-MemberExpr 0x5607cb31d538 <col:9> 'const Timestamp' lvalue ->_expiry_s 0x5607cb31bd78
|       `-CXXThisExpr 0x5607cb31d528 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5607cb317a18 <line:131:5, line:136:5> line:131:22 expiry 'Timestamp () const' inline
| `-CompoundStmt 0x5607cb31dad0 <col:37, line:136:5>
|   `-IfStmt 0x5607cb31daa8 <line:132:2, line:135:13> has_else
|     |-ImplicitCastExpr 0x5607cb31d638 <line:132:6> 'bool' <MemberPointerToBoolean>
|     | `-ImplicitCastExpr 0x5607cb31d620 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const' <UserDefinedConversion>
|     |   `-CXXMemberCallExpr 0x5607cb31d600 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const'
|     |     `-MemberExpr 0x5607cb31d5d0 <col:6> '<bound member function type>' .operator int (Timestamp::*)() const 0x5607cb258ef8
|     |       `-MemberExpr 0x5607cb31d5a0 <col:6> 'const Timestamp' lvalue ->_expiry_s 0x5607cb31bd78
|     |         `-CXXThisExpr 0x5607cb31d590 <col:6> 'const Timer *' implicit this
|     |-ReturnStmt 0x5607cb31da18 <line:133:6, col:72>
|     | `-ExprWithCleanups 0x5607cb31da00 <col:13, col:72> 'Timestamp'
|     |   `-CXXConstructExpr 0x5607cb31d9d0 <col:13, col:72> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |     `-MaterializeTemporaryExpr 0x5607cb31d9b8 <col:13, col:72> 'Timestamp' xvalue
|     |       `-CXXOperatorCallExpr 0x5607cb31d980 <col:13, col:72> 'Timestamp'
|     |         |-ImplicitCastExpr 0x5607cb31d968 <col:45> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         | `-DeclRefExpr 0x5607cb31d948 <col:45> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5607cb2876d0 'operator-' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |-CXXConstructExpr 0x5607cb31d8e8 <col:13, col:43> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |         | `-MaterializeTemporaryExpr 0x5607cb31d8d0 <col:13, col:43> 'Timestamp' xvalue
|     |         |   `-CXXOperatorCallExpr 0x5607cb31d7f8 <col:13, col:43> 'Timestamp'
|     |         |     |-ImplicitCastExpr 0x5607cb31d7e0 <col:23> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         |     | `-DeclRefExpr 0x5607cb31d7c0 <col:23> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5607cb287390 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |     |-CXXConstructExpr 0x5607cb31d760 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|     |         |     | `-MemberExpr 0x5607cb31d660 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x5607cb31bd78
|     |         |     |   `-CXXThisExpr 0x5607cb31d650 <col:13> 'const Timer *' implicit this
|     |         |     `-MaterializeTemporaryExpr 0x5607cb31d7a8 <col:25, col:43> 'const Timestamp' lvalue
|     |         |       `-ImplicitCastExpr 0x5607cb31d790 <col:25, col:43> 'const Timestamp' <NoOp>
|     |         |         `-CallExpr 0x5607cb31d740 <col:25, col:43> 'Timestamp'
|     |         |           `-ImplicitCastExpr 0x5607cb31d728 <col:25, col:36> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |         |             `-DeclRefExpr 0x5607cb31d6c8 <col:25, col:36> 'Timestamp ()' lvalue CXXMethod 0x5607cb27a9f0 'recent' 'Timestamp ()'
|     |         `-MaterializeTemporaryExpr 0x5607cb31d930 <col:47, col:72> 'const Timestamp' lvalue
|     |           `-ImplicitCastExpr 0x5607cb31d918 <col:47, col:72> 'const Timestamp' <NoOp>
|     |             `-CallExpr 0x5607cb31d8b0 <col:47, col:72> 'Timestamp'
|     |               `-ImplicitCastExpr 0x5607cb31d898 <col:47, col:58> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |                 `-DeclRefExpr 0x5607cb31d868 <col:47, col:58> 'Timestamp ()' lvalue CXXMethod 0x5607cb0d5f40 'recent_steady' 'Timestamp ()'
|     `-ReturnStmt 0x5607cb31da98 <line:135:6, col:13>
|       `-CXXConstructExpr 0x5607cb31da68 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|         `-MemberExpr 0x5607cb31da38 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x5607cb31bd78
|           `-CXXThisExpr 0x5607cb31da28 <col:13> 'const Timer *' implicit this
|-CXXMethodDecl 0x5607cb317ad8 <line:139:5, line:141:5> line:139:20 router 'Router *() const' inline
| `-CompoundStmt 0x5607cb31dbb8 <col:35, line:141:5>
|   `-ReturnStmt 0x5607cb31dba8 <line:140:2, col:24>
|     `-CXXMemberCallExpr 0x5607cb31db70 <col:9, col:24> 'Router *'
|       `-MemberExpr 0x5607cb31db40 <col:9, col:17> '<bound member function type>' ->router 0x5607cb2d9580
|         `-ImplicitCastExpr 0x5607cb31db90 <col:9> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x5607cb31db28 <col:9> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x5607cb31daf8 <col:9> 'Element *const' lvalue ->_owner 0x5607cb31c098
|               `-CXXThisExpr 0x5607cb31dae8 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5607cb317b98 <line:144:5, line:146:5> line:144:21 element 'Element *() const' inline
| `-CompoundStmt 0x5607cb31dc38 <col:37, line:146:5>
|   `-ReturnStmt 0x5607cb31dc28 <line:145:2, col:9>
|     `-ImplicitCastExpr 0x5607cb31dc10 <col:9> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x5607cb31dbe0 <col:9> 'Element *const' lvalue ->_owner 0x5607cb31c098
|         `-CXXThisExpr 0x5607cb31dbd0 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5607cb317c58 <line:149:5, line:151:5> line:149:26 thread 'RouterThread *() const' inline
| `-CompoundStmt 0x5607cb31dcb8 <col:41, line:151:5>
|   `-ReturnStmt 0x5607cb31dca8 <line:150:2, col:9>
|     `-ImplicitCastExpr 0x5607cb31dc90 <col:9> 'RouterThread *' <LValueToRValue>
|       `-MemberExpr 0x5607cb31dc60 <col:9> 'RouterThread *const' lvalue ->_thread 0x5607cb31c0f8
|         `-CXXThisExpr 0x5607cb31dc50 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5607cb317d20 <line:154:5, col:26> col:9 home_thread_id 'int () const'
|-CXXMethodDecl 0x5607cb31a298 <line:171:5, col:55> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x5607cb317dd0 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x5607cb31a1c0 <col:37, col:50> col:42 quiet 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5607cb31c9d8 <col:50> 'bool' false
|-CXXMethodDecl 0x5607cb31a418 <line:181:5, col:35> col:10 initialize 'void (Router *)'
| `-ParmVarDecl 0x5607cb31a358 <col:21, col:29> col:29 router 'Router *'
|-CXXMethodDecl 0x5607cb31a560 <line:191:5, col:57> col:10 used schedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x5607cb31a4d0 <col:29, col:46> col:46 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x5607cb31a6a8 <line:197:5, col:59> col:10 reschedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x5607cb31a618 <col:31, col:48> col:48 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x5607cb31a7f0 <line:210:5, col:50> col:17 used schedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5607cb31a760 <col:29, col:46> col:46 when 'const Timestamp &'
|-CXXMethodDecl 0x5607cb31a938 <line:216:5, col:52> col:17 reschedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5607cb31a8a8 <col:31, col:48> col:48 when 'const Timestamp &'
|-CXXMethodDecl 0x5607cb31aa00 <line:221:5, line:223:5> line:221:17 schedule_now 'void ()' inline
| `-CompoundStmt 0x5607cb31de20 <col:32, line:223:5>
|   `-ExprWithCleanups 0x5607cb31de08 <line:222:2, col:47> 'void'
|     `-CXXMemberCallExpr 0x5607cb31ddb0 <col:2, col:47> 'void'
|       |-MemberExpr 0x5607cb31dce0 <col:2> '<bound member function type>' ->schedule_at_steady 0x5607cb31a560
|       | `-CXXThisExpr 0x5607cb31dcd0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5607cb31ddf0 <col:21, col:46> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5607cb31ddd8 <col:21, col:46> 'const Timestamp' <NoOp>
|           `-CallExpr 0x5607cb31dd90 <col:21, col:46> 'Timestamp'
|             `-ImplicitCastExpr 0x5607cb31dd78 <col:21, col:32> 'Timestamp (*)()' <FunctionToPointerDecay>
|               `-DeclRefExpr 0x5607cb31dd48 <col:21, col:32> 'Timestamp ()' lvalue CXXMethod 0x5607cb0d5f40 'recent_steady' 'Timestamp ()'
|-CXXMethodDecl 0x5607cb31ab40 <line:233:5, col:47> col:10 used schedule_after 'void (const Timestamp &)'
| `-ParmVarDecl 0x5607cb31aab0 <col:25, col:42> col:42 delta 'const Timestamp &'
|-CXXMethodDecl 0x5607cb31ac88 <line:239:5, line:241:5> line:239:17 used schedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5607cb31abf8 <col:36, col:45> col:45 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5607cb31dfa8 <col:56, line:241:5>
|   `-ExprWithCleanups 0x5607cb31df90 <line:240:2, col:40> 'void'
|     `-CXXMemberCallExpr 0x5607cb31df38 <col:2, col:40> 'void'
|       |-MemberExpr 0x5607cb31de48 <col:2> '<bound member function type>' ->schedule_after 0x5607cb31ab40
|       | `-CXXThisExpr 0x5607cb31de38 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5607cb31df78 <col:17, col:39> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5607cb31df60 <col:17, col:39> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x5607cb31def8 <col:17, col:39> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-ImplicitCastExpr 0x5607cb31dec8 <col:27> 'uint32_t':'unsigned int' <LValueToRValue>
|             | `-DeclRefExpr 0x5607cb31de88 <col:27> 'uint32_t':'unsigned int' lvalue ParmVar 0x5607cb31abf8 'delta_sec' 'uint32_t':'unsigned int'
|             `-ImplicitCastExpr 0x5607cb31dee0 <col:38> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5607cb31dea8 <col:38> 'int' 0
|-CXXMethodDecl 0x5607cb31add0 <line:247:5, line:249:5> line:247:17 used schedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5607cb31ad40 <col:37, col:46> col:46 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5607cb31e218 <col:58, line:249:5>
|   `-ExprWithCleanups 0x5607cb31e200 <line:248:2, col:49> 'void'
|     `-CXXMemberCallExpr 0x5607cb31e1a8 <col:2, col:49> 'void'
|       |-MemberExpr 0x5607cb31dfd0 <col:2> '<bound member function type>' ->schedule_after 0x5607cb31ab40
|       | `-CXXThisExpr 0x5607cb31dfc0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5607cb31e1e8 <col:17, col:48> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5607cb31e1d0 <col:17, col:48> 'const Timestamp' <NoOp>
|           `-CallExpr 0x5607cb31e150 <col:17, col:48> 'Timestamp'
|             |-ImplicitCastExpr 0x5607cb31e138 <col:17, col:28> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5607cb31e0a8 <col:17, col:28> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5607cb25ace8 'make_msec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x5607cb31e190 <col:38> 'Timestamp::value_type':'long' <IntegralCast>
|               `-ImplicitCastExpr 0x5607cb31e178 <col:38> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5607cb31e088 <col:38> 'uint32_t':'unsigned int' lvalue ParmVar 0x5607cb31ad40 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5607cb31af18 <line:259:5, line:261:5> line:259:17 reschedule_after 'void (const Timestamp &)' inline
| |-ParmVarDecl 0x5607cb31ae88 <col:34, col:51> col:51 used delta 'const Timestamp &'
| `-CompoundStmt 0x5607cb31e3f8 <col:58, line:261:5>
|   `-ExprWithCleanups 0x5607cb31e3e0 <line:260:2, col:38> 'void'
|     `-CXXMemberCallExpr 0x5607cb31e388 <col:2, col:38> 'void'
|       |-MemberExpr 0x5607cb31e240 <col:2> '<bound member function type>' ->schedule_at_steady 0x5607cb31a560
|       | `-CXXThisExpr 0x5607cb31e230 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5607cb31e3c8 <col:21, col:33> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5607cb31e3b0 <col:21, col:33> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x5607cb31e350 <col:21, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x5607cb31e338 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5607cb31e318 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5607cb287390 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x5607cb31e2e8 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x5607cb31e2d0 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x5607cb31e280 <col:21> 'Timestamp' lvalue ->_expiry_s 0x5607cb31bd78
|             |     `-CXXThisExpr 0x5607cb31e270 <col:21> 'Timer *' implicit this
|             `-DeclRefExpr 0x5607cb31e2b0 <col:33> 'const Timestamp' lvalue ParmVar 0x5607cb31ae88 'delta' 'const Timestamp &'
|-CXXMethodDecl 0x5607cb31b060 <line:268:5, line:270:5> line:268:17 used reschedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5607cb31afd0 <col:38, col:47> col:47 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5607cb31e6d0 <col:58, line:270:5>
|   `-ExprWithCleanups 0x5607cb31e6b8 <line:269:2, col:79> 'void'
|     `-CXXMemberCallExpr 0x5607cb31e660 <col:2, col:79> 'void'
|       |-MemberExpr 0x5607cb31e420 <col:2> '<bound member function type>' ->schedule_at_steady 0x5607cb31a560
|       | `-CXXThisExpr 0x5607cb31e410 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5607cb31e6a0 <col:21, col:78> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5607cb31e688 <col:21, col:78> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x5607cb31e620 <col:21, col:78> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-BinaryOperator 0x5607cb31e558 <col:31, col:49> 'unsigned int' '+'
|             | |-ImplicitCastExpr 0x5607cb31e540 <col:31, col:45> 'unsigned int' <IntegralCast>
|             | | `-CXXMemberCallExpr 0x5607cb31e4d0 <col:31, col:45> 'Timestamp::seconds_type':'int'
|             | |   `-MemberExpr 0x5607cb31e4a0 <col:31, col:41> '<bound member function type>' .sec 0x5607cb0d7a38
|             | |     `-ImplicitCastExpr 0x5607cb31e4f0 <col:31> 'const Timestamp' lvalue <NoOp>
|             | |       `-MemberExpr 0x5607cb31e470 <col:31> 'Timestamp' lvalue ->_expiry_s 0x5607cb31bd78
|             | |         `-CXXThisExpr 0x5607cb31e460 <col:31> 'Timer *' implicit this
|             | `-ImplicitCastExpr 0x5607cb31e528 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|             |   `-DeclRefExpr 0x5607cb31e508 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x5607cb31afd0 'delta_sec' 'uint32_t':'unsigned int'
|             `-CXXMemberCallExpr 0x5607cb31e5e8 <col:60, col:77> 'uint32_t':'unsigned int'
|               `-MemberExpr 0x5607cb31e5b8 <col:60, col:70> '<bound member function type>' .subsec 0x5607cb0d8130
|                 `-ImplicitCastExpr 0x5607cb31e608 <col:60> 'const Timestamp' lvalue <NoOp>
|                   `-MemberExpr 0x5607cb31e588 <col:60> 'Timestamp' lvalue ->_expiry_s 0x5607cb31bd78
|                     `-CXXThisExpr 0x5607cb31e578 <col:60> 'Timer *' implicit this
|-CXXMethodDecl 0x5607cb31b1a8 <line:277:5, line:279:5> line:277:17 used reschedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5607cb31b118 <col:39, col:48> col:48 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5607cb31ea08 <col:60, line:279:5>
|   `-ExprWithCleanups 0x5607cb31e9f0 <line:278:2, col:65> 'void'
|     `-CXXMemberCallExpr 0x5607cb31e998 <col:2, col:65> 'void'
|       |-MemberExpr 0x5607cb31e6f8 <col:2> '<bound member function type>' ->schedule_at_steady 0x5607cb31a560
|       | `-CXXThisExpr 0x5607cb31e6e8 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5607cb31e9d8 <col:21, col:64> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5607cb31e9c0 <col:21, col:64> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x5607cb31e960 <col:21, col:64> 'Timestamp'
|             |-ImplicitCastExpr 0x5607cb31e948 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5607cb31e928 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5607cb287390 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x5607cb31e8c8 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x5607cb31e8b0 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x5607cb31e738 <col:21> 'Timestamp' lvalue ->_expiry_s 0x5607cb31bd78
|             |     `-CXXThisExpr 0x5607cb31e728 <col:21> 'Timer *' implicit this
|             `-MaterializeTemporaryExpr 0x5607cb31e910 <col:33, col:64> 'const Timestamp' lvalue
|               `-ImplicitCastExpr 0x5607cb31e8f8 <col:33, col:64> 'const Timestamp' <NoOp>
|                 `-CallExpr 0x5607cb31e858 <col:33, col:64> 'Timestamp'
|                   |-ImplicitCastExpr 0x5607cb31e840 <col:33, col:44> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|                   | `-DeclRefExpr 0x5607cb31e810 <col:33, col:44> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5607cb25ace8 'make_msec' 'Timestamp (Timestamp::value_type)'
|                   `-ImplicitCastExpr 0x5607cb31e898 <col:54> 'Timestamp::value_type':'long' <IntegralCast>
|                     `-ImplicitCastExpr 0x5607cb31e880 <col:54> 'uint32_t':'unsigned int' <LValueToRValue>
|                       `-DeclRefExpr 0x5607cb31e7f0 <col:54> 'uint32_t':'unsigned int' lvalue ParmVar 0x5607cb31b118 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5607cb31b270 <line:285:5, col:21> col:10 used unschedule 'void ()'
|-CXXMethodDecl 0x5607cb31b330 <line:288:5, line:291:5> line:288:17 clear 'void ()' inline
| `-CompoundStmt 0x5607cb31eed0 <col:25, line:291:5>
|   |-CXXMemberCallExpr 0x5607cb31ea60 <line:289:2, col:13> 'void'
|   | `-MemberExpr 0x5607cb31ea30 <col:2> '<bound member function type>' ->unschedule 0x5607cb31b270
|   |   `-CXXThisExpr 0x5607cb31ea20 <col:2> 'Timer *' implicit this
|   `-ExprWithCleanups 0x5607cb31eeb8 <line:290:2, col:24> 'Timestamp' lvalue
|     `-CXXOperatorCallExpr 0x5607cb31ee80 <col:2, col:24> 'Timestamp' lvalue
|       |-ImplicitCastExpr 0x5607cb31ee68 <col:12> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5607cb31eb18 <col:12> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x5607caf6efd8 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|       |-MemberExpr 0x5607cb31ea90 <col:2> 'Timestamp' lvalue ->_expiry_s 0x5607cb31bd78
|       | `-CXXThisExpr 0x5607cb31ea80 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5607cb31eb00 <col:14, col:24> 'Timestamp' xvalue
|         `-CXXTemporaryObjectExpr 0x5607cb31ead0 <col:14, col:24> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x5607cb31b3f0 <line:304:5, line:310:5> line:304:29 adjustment 'Timestamp ()' static inline
| `-CompoundStmt 0x5607cb31f228 <col:42, line:310:5>
|   |-IfStmt 0x5607cb31f070 <line:306:2, line:307:23>
|   | |-CallExpr 0x5607cb31efa0 <line:306:6, col:30> 'bool'
|   | | `-ImplicitCastExpr 0x5607cb31ef88 <col:6, col:17> 'bool (*)()' <FunctionToPointerDecay>
|   | |   `-DeclRefExpr 0x5607cb31ef28 <col:6, col:17> 'bool ()' lvalue CXXMethod 0x5607cb278e60 'warp_jumping' 'bool ()'
|   | `-ReturnStmt 0x5607cb31f060 <line:307:6, col:23>
|   |   `-ExprWithCleanups 0x5607cb31f048 <col:13, col:23> 'Timestamp'
|   |     `-CXXConstructExpr 0x5607cb31f018 <col:13, col:23> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5607cb31f000 <col:13, col:23> 'Timestamp' xvalue
|   |         `-CXXTemporaryObjectExpr 0x5607cb31efd0 <col:13, col:23> 'Timestamp' 'void ()'
|   `-ReturnStmt 0x5607cb31f218 <line:309:2, col:33>
|     `-ExprWithCleanups 0x5607cb31f200 <col:9, col:33> 'Timestamp'
|       `-CXXConstructExpr 0x5607cb31f1d0 <col:9, col:33> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5607cb31f1b8 <col:9, col:33> 'Timestamp' xvalue
|           `-CallExpr 0x5607cb31f178 <col:9, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x5607cb31f160 <col:9, col:20> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5607cb31f130 <col:9, col:20> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5607cb25b000 'make_usec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x5607cb31f1a0 <col:30> 'Timestamp::value_type':'long' <IntegralCast>
|               `-IntegerLiteral 0x5607cb31f110 <col:30> 'int' 500
|-CXXMethodDecl 0x5607cb31b530 <line:317:5, col:80> col:17 schedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x5607cb31b4a0 <col:34, col:43> col:43 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5607cb31b5d8 <col:69> "" ""
|-CXXMethodDecl 0x5607cb31b6e8 <line:323:5, col:81> col:17 schedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x5607cb31b658 <col:35, col:44> col:44 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5607cb31b790 <col:70> "" ""
|-CXXMethodDecl 0x5607cb31b8a0 <line:329:5, col:82> col:17 reschedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x5607cb31b810 <col:36, col:45> col:45 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5607cb31b948 <col:71> "" ""
|-CXXMethodDecl 0x5607cb31ba58 <line:335:5, col:83> col:17 reschedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x5607cb31b9c8 <col:37, col:46> col:46 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5607cb31bb00 <col:72> "" ""
|-EnumDecl 0x5607cb31bb70 <line:337:5, col:27> col:5
| `-EnumConstantDecl 0x5607cb31bc70 <col:12, col:25> col:12 behind_sec 'Timer::(anonymous enum at ../dummy_inc/click/timer.hh:337:5)'
|   `-ImplicitCastExpr 0x5607cb31bcc0 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5607cb31bc50 <col:25> 'int' Int: 1
|       `-IntegerLiteral 0x5607cb31bc30 <col:25> 'int' 1
|-AccessSpecDecl 0x5607cb31bcd8 <line:339:3, col:10> col:3 private
|-FieldDecl 0x5607cb31bd18 <line:341:5, col:9> col:9 referenced _schedpos1 'int'
|-FieldDecl 0x5607cb31bd78 <line:342:5, col:15> col:15 referenced _expiry_s 'Timestamp'
|-CXXRecordDecl 0x5607cb31bdc8 <line:343:5, line:345:5> line:343:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x5607cb31bef8 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
| `-CXXDestructorDecl 0x5607cb31c9e8 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-FieldDecl 0x5607cb31bfb8 <col:5, line:345:7> col:7 referenced _hook 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)'
|-FieldDecl 0x5607cb31c038 <line:346:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x5607cb31c098 <line:347:5, col:14> col:14 referenced _owner 'Element *'
|-FieldDecl 0x5607cb31c0f8 <line:348:5, col:19> col:19 referenced _thread 'RouterThread *'
|-CXXMethodDecl 0x5607cb31c248 <line:350:5, col:36> col:12 operator= 'Timer &(const Timer &)'
| `-ParmVarDecl 0x5607cb31c158 <col:22, col:35> col:35 x 'const Timer &'
|-CXXMethodDecl 0x5607cb31c418 <line:352:5, col:58> col:17 used do_nothing_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5607cb31c300 <col:33, col:40> col:40 t 'Timer *'
| `-ParmVarDecl 0x5607cb31c380 <col:43, col:49> col:49 user_data 'void *'
|-CXXMethodDecl 0x5607cb31c5f0 <line:353:5, col:55> col:17 used element_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5607cb31c4d8 <col:30, col:37> col:37 t 'Timer *'
| `-ParmVarDecl 0x5607cb31c558 <col:40, col:46> col:46 user_data 'void *'
|-CXXMethodDecl 0x5607cb31c7c8 <line:354:5, col:52> col:17 used task_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5607cb31c6b0 <col:27, col:34> col:34 t 'Timer *'
| `-ParmVarDecl 0x5607cb31c730 <col:37, col:43> col:43 user_data 'void *'
`-FriendDecl 0x5607cb31c998 <line:356:5, col:18> col:12 'class TimerSet':'TimerSet'

Layout: <CGRecordLayout
  LLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon.0, i8*, %class.Element*, %class.RouterThread* }
  NonVirtualBaseLLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon.0, i8*, %class.Element*, %class.RouterThread* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607cb320540 <../elements/ethernet/ip6ndsolicitor.hh:50:1, line:106:1> line:50:7 class IP6NDSolicitor definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x5607cb320698 <col:1, col:7> col:7 implicit referenced class IP6NDSolicitor
|-AccessSpecDecl 0x5607cb320728 <line:51:2, col:8> col:2 public
|-CXXConstructorDecl 0x5607cb3207b0 <line:53:3, col:18> col:3 IP6NDSolicitor 'void ()'
|-CXXDestructorDecl 0x5607cb3208a0 <line:54:3, col:19> col:3 ~IP6NDSolicitor 'void ()' noexcept-unevaluated 0x5607cb3208a0
| `-Overrides: [ 0x5607cb2c74d8 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x5607cb3209d0 <line:56:3, col:61> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x5607cb2c8938 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x5607cb32e2b8 <col:34, col:61>
|   `-ReturnStmt 0x5607cb32e2a8 <col:36, col:43>
|     `-ImplicitCastExpr 0x5607cb32e290 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5607cb32e268 <col:43> 'const char [15]' lvalue "IP6NDSolicitor"
|-CXXMethodDecl 0x5607cb320a98 <line:57:3, col:52> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x5607cb2c8a00 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x5607cb32e318 <col:34, col:52>
|   `-ReturnStmt 0x5607cb32e308 <col:36, col:43>
|     `-ImplicitCastExpr 0x5607cb32e2f0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5607cb32e2d0 <col:43> 'const char [6]' lvalue "2/1-2"
|-CXXMethodDecl 0x5607cb320b60 <line:58:3, col:49> col:15 processing 'const char *() const'
| |-Overrides: [ 0x5607cb2c8dc8 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x5607cb32e378 <col:34, col:49>
|   `-ReturnStmt 0x5607cb32e368 <col:36, col:43>
|     `-ImplicitCastExpr 0x5607cb32e350 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5607cb32e330 <col:43> 'const char []' lvalue Var 0x5607cb2c8f10 'PUSH' 'const char []'
|-CXXMethodDecl 0x5607cb320c28 <line:59:3, col:50> col:15 flow_code 'const char *() const'
| |-Overrides: [ 0x5607cb2c91c0 Element::flow_code 'const char *() const' ]
| `-CompoundStmt 0x5607cb32e450 <col:33, col:50>
|   `-ReturnStmt 0x5607cb32e440 <col:35, col:42>
|     `-ImplicitCastExpr 0x5607cb32e428 <col:42> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5607cb32e408 <col:42> 'const char [5]' lvalue "xy/x"
|-CXXMethodDecl 0x5607cb320ce8 <line:61:3, col:21> col:8 add_handlers 'void ()'
| `-Overrides: [ 0x5607cb2ca2a0 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x5607cb320fc0 <line:63:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5607cb2ca1d0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5607cb320e70 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x5607cb320ee8 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x5607cb321118 <line:64:3, col:32> col:7 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x5607cb2ca420 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x5607cb321080 <col:18, col:31> col:32 'ErrorHandler *'
|-CXXMethodDecl 0x5607cb321260 <line:65:3, col:28> col:8 cleanup 'void (Element::CleanupStage)'
| |-Overrides: [ 0x5607cb2cac38 Element::cleanup 'void (Element::CleanupStage)' ]
| `-ParmVarDecl 0x5607cb3211d0 <col:16> col:28 'Element::CleanupStage'
|-CXXMethodDecl 0x5607cb321428 <line:66:3, col:44> col:8 take_state 'void (Element *, ErrorHandler *)'
| |-Overrides: [ 0x5607cb2ca628 Element::take_state 'void (Element *, ErrorHandler *)' ]
| |-ParmVarDecl 0x5607cb321318 <col:19, col:27> col:28 'Element *'
| `-ParmVarDecl 0x5607cb321390 <col:30, col:43> col:44 'ErrorHandler *'
|-CXXMethodDecl 0x5607cb321600 <line:68:3, col:31> col:8 push 'void (int, Packet *)'
| |-Overrides: [ 0x5607cb2c77a8 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x5607cb3214f0 <col:13, col:17> col:17 port 'int'
| `-ParmVarDecl 0x5607cb321568 <col:23, col:30> col:31 'Packet *'
|-CXXMethodDecl 0x5607cb321a88 <line:70:3, line:71:65> line:70:11 make_query 'Packet *(unsigned char *, unsigned char *, unsigned char *)'
| |-ParmVarDecl 0x5607cb321750 <col:22, col:42> col:36 tpa 'unsigned char *':'unsigned char *'
| |-ParmVarDecl 0x5607cb321890 <line:71:22, col:41> col:36 sha 'unsigned char *':'unsigned char *'
| `-ParmVarDecl 0x5607cb321960 <col:44, col:64> col:58 spa 'unsigned char *':'unsigned char *'
|-CXXMethodDecl 0x5607cb321c98 <line:73:3, col:39> col:8 insert 'void (IP6Address, EtherAddress)'
| |-ParmVarDecl 0x5607cb321b50 <col:15> col:25 'IP6Address'
| `-ParmVarDecl 0x5607cb321bc8 <col:27> col:39 'EtherAddress'
|-CXXRecordDecl 0x5607cb321d48 <line:75:4, line:83:3> line:75:11 referenced struct NDEntry definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable
| | |-DefaultConstructor exists non_trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5607cb321e68 <col:4, col:11> col:11 implicit struct NDEntry
| |-FieldDecl 0x5607cb321f08 <line:76:5, col:16> col:16 ip6 'IP6Address'
| |-FieldDecl 0x5607cb321f68 <line:77:5, col:18> col:18 en 'EtherAddress'
| |-FieldDecl 0x5607cb321fc8 <line:78:5, col:21> col:21 last_response_jiffies 'click_jiffies_t':'unsigned int'
| |-FieldDecl 0x5607cb322070 <line:79:5, col:18> col:14 ok 'unsigned int'
| | `-ConstantExpr 0x5607cb322050 <col:18> 'int' Int: 1
| |   `-IntegerLiteral 0x5607cb322018 <col:18> 'int' 1
| |-FieldDecl 0x5607cb322118 <line:80:5, col:23> col:14 polling 'unsigned int'
| | `-ConstantExpr 0x5607cb3220f8 <col:23> 'int' Int: 1
| |   `-IntegerLiteral 0x5607cb3220c0 <col:23> 'int' 1
| |-FieldDecl 0x5607cb32ceb0 <line:81:5, col:13> col:13 p 'Packet *'
| `-FieldDecl 0x5607cb32cfb0 <line:82:5, col:21> col:21 next 'struct NDEntry *'
|-FieldDecl 0x5607cb32d030 <line:86:3, col:7> col:7 _arp_queries 'int'
|-FieldDecl 0x5607cb32d098 <line:87:3, col:7> col:7 _pkts_killed 'int'
|-AccessSpecDecl 0x5607cb32d0e8 <line:89:2, col:9> col:2 private
|-EnumDecl 0x5607cb32d110 <line:91:3, col:21> col:3
| `-EnumConstantDecl 0x5607cb32d210 <col:10, col:17> col:10 referenced NMAP 'IP6NDSolicitor::(anonymous enum at ../elements/ethernet/ip6ndsolicitor.hh:91:3)'
|   `-ImplicitCastExpr 0x5607cb32d260 <col:17> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5607cb32d1f0 <col:17> 'int' Int: 256
|       `-IntegerLiteral 0x5607cb32d1d0 <col:17> 'int' 256
|-FieldDecl 0x5607cb32d318 <line:92:3, col:21> col:12 referenced _map 'IP6NDSolicitor::NDEntry *[256]'
|-FieldDecl 0x5607cb32d378 <line:93:3, col:16> col:16 _my_en 'EtherAddress'
|-FieldDecl 0x5607cb32d3d8 <line:94:3, col:14> col:14 _my_ip6 'IP6Address'
|-FieldDecl 0x5607cb32d438 <line:95:3, col:9> col:9 _expire_timer 'Timer'
|-CXXMethodDecl 0x5607cb32d678 <line:97:3, col:48> col:8 send_query_for 'void (const u_char *)'
| `-ParmVarDecl 0x5607cb32d5b0 <col:23, col:47> col:36 want_ip6 'const u_char *':'const u_char *'
|-CXXMethodDecl 0x5607cb32d7c0 <line:99:3, col:27> col:8 handle_ip6 'void (Packet *)'
| `-ParmVarDecl 0x5607cb32d730 <col:19, col:26> col:27 'Packet *'
|-CXXMethodDecl 0x5607cb32d908 <line:100:3, col:32> col:8 handle_response 'void (Packet *)'
| `-ParmVarDecl 0x5607cb32d878 <col:24, col:31> col:32 'Packet *'
|-EnumDecl 0x5607cb32d9b0 <line:102:3, col:40> col:3
| `-EnumConstantDecl 0x5607cb32daf0 <col:10, col:35> col:10 EXPIRE_TIMEOUT_MS 'IP6NDSolicitor::(anonymous enum at ../elements/ethernet/ip6ndsolicitor.hh:102:3)'
|   `-ImplicitCastExpr 0x5607cb32db40 <col:30, col:35> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5607cb32dad0 <col:30, col:35> 'int' Int: 15000
|       `-BinaryOperator 0x5607cb32dab0 <col:30, col:35> 'int' '*'
|         |-IntegerLiteral 0x5607cb32da70 <col:30> 'int' 15
|         `-IntegerLiteral 0x5607cb32da90 <col:35> 'int' 1000
|-CXXMethodDecl 0x5607cb32dc80 <line:103:3, col:42> col:15 used expire_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5607cb32db68 <col:27, col:33> col:34 'Timer *'
| `-ParmVarDecl 0x5607cb32dbe8 <col:36, col:41> col:42 'void *'
|-CXXMethodDecl 0x5607cb32de58 <line:104:3, col:45> col:17 read_table 'String (Element *, void *)' static
| |-ParmVarDecl 0x5607cb32dd40 <col:28, col:36> col:37 'Element *'
| `-ParmVarDecl 0x5607cb32ddc0 <col:39, col:44> col:45 'void *'
|-CXXConstructorDecl 0x5607cb32df38 <line:50:7> col:7 implicit IP6NDSolicitor 'void (const IP6NDSolicitor &)' inline default_delete noexcept-unevaluated 0x5607cb32df38
| `-ParmVarDecl 0x5607cb32e048 <col:7> col:7 'const IP6NDSolicitor &'
`-CXXMethodDecl 0x5607cb32e0e8 <col:7> col:7 implicit operator= 'IP6NDSolicitor &(const IP6NDSolicitor &)' inline default_delete noexcept-unevaluated 0x5607cb32e0e8
  `-ParmVarDecl 0x5607cb32e1f8 <col:7> col:7 'const IP6NDSolicitor &'

Layout: <CGRecordLayout
  LLVMType:%class.IP6NDSolicitor = type { %class.Element.base, i32, i32, [256 x %"struct.IP6NDSolicitor::NDEntry"*], %class.EtherAddress, %class.IP6Address, %class.Timer }
  NonVirtualBaseLLVMType:%class.IP6NDSolicitor = type { %class.Element.base, i32, i32, [256 x %"struct.IP6NDSolicitor::NDEntry"*], %class.EtherAddress, %class.IP6Address, %class.Timer }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607cb09b0a0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5607cb09b1b8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x5607cb09b258 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x5607cb09b2b8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x5607cb09b318 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x5607cb09b3c8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607cb09b6d0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5607cb09b7e8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x5607cb09b890 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x5607cb09b8f8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x5607cb09b988 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x5607cb0a1a20 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5607cb0a1e58 <col:12>
|-CXXConstructorDecl 0x5607cb0a1b28 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5607cb0a1c38 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5607cb09b890 'data' 'const char *'
| | `-ImplicitCastExpr 0x5607cb0a43e0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5607cb0a43b0 <col:12> 'const char *const' lvalue .data 0x5607cb09b890
| |     `-DeclRefExpr 0x5607cb0a4390 <col:12> 'const String::rep_t' lvalue ParmVar 0x5607cb0a1c38 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5607cb09b8f8 'length' 'int'
| | `-ImplicitCastExpr 0x5607cb0a4470 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5607cb0a4440 <col:12> 'const int' lvalue .length 0x5607cb09b8f8
| |     `-DeclRefExpr 0x5607cb0a4420 <col:12> 'const String::rep_t' lvalue ParmVar 0x5607cb0a1c38 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5607cb09b988 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x5607cb0a4500 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5607cb0a44d0 <col:12> 'String::memo_t *const' lvalue .memo 0x5607cb09b988
| |     `-DeclRefExpr 0x5607cb0a44b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5607cb0a1c38 '' 'const String::rep_t &'
| `-CompoundStmt 0x5607cb0a4558 <col:12>
|-CXXConstructorDecl 0x5607cb0a1cd8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5607cb0a1cd8
| `-ParmVarDecl 0x5607cb0a1de8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x5607cb0a7340 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5607cb0b2d58 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5607cb0b2e68 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x5607cb0b3380 <col:12>
|   |-BinaryOperator 0x5607cb0b3198 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5607cb0b3150 <col:12> 'const char *' lvalue ->data 0x5607cb09b890
|   | | `-CXXThisExpr 0x5607cb0b3140 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5607cb0b3180 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x5607cb0b3110 <col:12> 'const char *const' lvalue .data 0x5607cb09b890
|   |     `-DeclRefExpr 0x5607cb0b30f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5607cb0b2e68 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5607cb0b3260 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x5607cb0b3218 <col:12> 'int' lvalue ->length 0x5607cb09b8f8
|   | | `-CXXThisExpr 0x5607cb0b3208 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5607cb0b3248 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x5607cb0b31d8 <col:12> 'const int' lvalue .length 0x5607cb09b8f8
|   |     `-DeclRefExpr 0x5607cb0b31b8 <col:12> 'const String::rep_t' lvalue ParmVar 0x5607cb0b2e68 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5607cb0b3328 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x5607cb0b32e0 <col:12> 'String::memo_t *' lvalue ->memo 0x5607cb09b988
|   | | `-CXXThisExpr 0x5607cb0b32d0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5607cb0b3310 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x5607cb0b32a0 <col:12> 'String::memo_t *const' lvalue .memo 0x5607cb09b988
|   |     `-DeclRefExpr 0x5607cb0b3280 <col:12> 'const String::rep_t' lvalue ParmVar 0x5607cb0b2e68 '' 'const String::rep_t &'
|   `-ReturnStmt 0x5607cb0b3370 <col:12>
|     `-UnaryOperator 0x5607cb0b3358 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5607cb0b3348 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x5607cb0b2ed8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5607cb0b2ed8
  `-ParmVarDecl 0x5607cb0b2fe8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607cb092610 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5607cb092728 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x5607cb0927b8 <col:16, col:22> col:16 public
|-TypedefDecl 0x5607cb0927f8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x5607cad63e00 'const char *'
|   `-QualType 0x5607cad63351 'const char' const
|     `-BuiltinType 0x5607cad63350 'char'
|-TypedefDecl 0x5607cb092880 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x5607cb092850 'String::const_iterator' sugar
|   |-Typedef 0x5607cb0927f8 'const_iterator'
|   `-PointerType 0x5607cad63e00 'const char *'
|     `-QualType 0x5607cad63351 'const char' const
|       `-BuiltinType 0x5607cad63350 'char'
|-TypedefDecl 0x5607cb0929f0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x5607cb092960 'int (String::*)() const'
|   |-RecordType 0x5607cb0926a0 'String'
|   | `-CXXRecord 0x5607cb092610 'String'
|   `-ParenType 0x5607cb092900 'int () const' sugar
|     `-FunctionProtoType 0x5607cb066490 'int () const' const cdecl
|       `-BuiltinType 0x5607cad633b0 'int'
|-TypedefDecl 0x5607cb092a58 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x5607caebb070 'int64_t' sugar
|   |-Typedef 0x5607cadcc2a0 'int64_t'
|   `-TypedefType 0x5607cada5510 '__int64_t' sugar
|     |-Typedef 0x5607cada50e8 '__int64_t'
|     `-BuiltinType 0x5607cad633d0 'long'
|-TypedefDecl 0x5607cb092ac0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x5607caebaf90 'uint64_t' sugar
|   |-Typedef 0x5607cadcc440 'uint64_t'
|   `-TypedefType 0x5607cada55a0 '__uint64_t' sugar
|     |-Typedef 0x5607cada5158 '__uint64_t'
|     `-BuiltinType 0x5607cad63470 'unsigned long'
|-TypedefDecl 0x5607cb092b50 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x5607cb092b20 'String::intmax_t' sugar
|   |-Typedef 0x5607cb092a58 'intmax_t'
|   `-TypedefType 0x5607caebb070 'int64_t' sugar
|     |-Typedef 0x5607cadcc2a0 'int64_t'
|     `-TypedefType 0x5607cada5510 '__int64_t' sugar
|       |-Typedef 0x5607cada50e8 '__int64_t'
|       `-BuiltinType 0x5607cad633d0 'long'
|-TypedefDecl 0x5607cb092be0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x5607cb092bb0 'String::uintmax_t' sugar
|   |-Typedef 0x5607cb092ac0 'uintmax_t'
|   `-TypedefType 0x5607caebaf90 'uint64_t' sugar
|     |-Typedef 0x5607cadcc440 'uint64_t'
|     `-TypedefType 0x5607cada55a0 '__uint64_t' sugar
|       |-Typedef 0x5607cada5158 '__uint64_t'
|       `-BuiltinType 0x5607cad63470 'unsigned long'
|-CXXConstructorDecl 0x5607cb092ca0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x5607cb092e48 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x5607cb092d88 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x5607cb092ff8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x5607cb092f38 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x5607cb093150 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x5607cb0930c0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x5607cb093368 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x5607cb093218 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x5607cb093298 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x5607cb093588 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5607cb093438 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5607cb0934b8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x5607cb0937a8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5607cb093658 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x5607cb0936d8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x5607cb0939c8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5607cb093878 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x5607cb0938f8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x5607cb093b58 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x5607cb093a90 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x5607cb093cd8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x5607cb093c18 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x5607cb093e68 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5607cb093da0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x5607cb093fc0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x5607cb093f30 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x5607cb094118 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x5607cb094088 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x5607cb094270 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x5607cb0941e0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x5607cb0943f8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x5607cb094338 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x5607cb094588 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x5607cb0944c0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x5607cb094718 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x5607cb094650 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x5607cb0948a8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x5607cb0947e0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x5607cb0949a0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x5607cb094ac8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x5607cb094c48 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x5607cb094b80 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x5607cb094d98 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x5607cb094d08 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x5607cb094e50 <col:63> "" ""
|-CXXMethodDecl 0x5607cb094f98 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x5607cb094ed8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x5607cb0951a8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x5607cb095058 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x5607cb0950d8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x5607cb0953c8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x5607cb095270 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x5607cb0952f0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x5607cb0956a8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x5607cb095488 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5607cb095508 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x5607cb0a14f0 <col:55> 'int' 10
| `-ParmVarDecl 0x5607cb095580 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5607cb0a1510 <col:76> 'bool' true
|-CXXMethodDecl 0x5607cb095988 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x5607cb095770 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5607cb0957f0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5607cb0a1520 <col:56> 'int' 10
| `-ParmVarDecl 0x5607cb095868 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5607cb0a1540 <col:77> 'bool' true
|-CXXMethodDecl 0x5607cb095a90 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5607cb095b58 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5607cb095c20 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x5607cb095cc0 <col:20>
| `-OptimizeNoneAttr 0x5607cb095d18 <col:30>
|-CXXConversionDecl 0x5607cb095e08 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5607cb095ed8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5607cb095f98 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5607cb096088 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5607cb096148 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5607cb0962c8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5607cb096200 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5607cb096418 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x5607cb096388 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x5607cb096508 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5607cb0965c8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5607cb096818 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x5607cb096680 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x5607cb096700 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x5607cb096a78 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x5607cb0968e0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x5607cb096960 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x5607cb096b48 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5607cb096d58 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x5607cb096c00 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x5607cb096c80 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x5607cb096f78 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x5607cb096e20 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x5607cb096ea0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x5607cb097108 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x5607cb097040 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x5607cb0971f8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x5607cb097368 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x5607cb0972a8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5607cb097578 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x5607cb097428 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5607cb0974a8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5607cb097790 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x5607cb097638 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x5607cb0976b0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x5607cb097920 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x5607cb097850 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5607cb097b40 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x5607cb0979e0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x5607cb097a60 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5607cb097c90 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x5607cb097c00 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x5607cb097e68 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x5607cb097d50 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5607cb097dd0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5607cb097fb8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x5607cb097f28 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x5607cb0981d0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x5607cb098070 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x5607cb0980f0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x5607cb0a1550 <col:39> 'int' 0
|-CXXMethodDecl 0x5607cb0983f0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x5607cb098290 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x5607cb098310 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x5607cb0a1570 <col:48> 'int' 0
|-CXXMethodDecl 0x5607cb0985d0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x5607cb0984b0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x5607cb098530 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x5607cb0a1590 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x5607cb0986a0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x5607cb098760 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x5607cb098820 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x5607cb0988e0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x5607cb0989a0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x5607cb098b48 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x5607cb098a50 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x5607cb098cc8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x5607cb098c00 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x5607cb098ea0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x5607cb098d88 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x5607cb099018 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x5607cb098f58 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x5607cb099160 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x5607cb0990d0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5607cb0992b0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5607cb099220 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5607cb099488 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5607cb099370 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5607cb0993f0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5607cb099668 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5607cb099550 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5607cb0995d0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5607cb0997b8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x5607cb099728 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5607cb0999c8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5607cb099878 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5607cb0998f8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5607cb099b28 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x5607cb099a90 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5607cb099c80 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x5607cb099be8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x5607cb099d28 <col:57> "" ""
|-CXXMethodDecl 0x5607cb099e38 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x5607cb099da8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x5607cb099f88 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x5607cb099ef8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x5607cb09a108 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x5607cb09a040 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x5607cb09a1d0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x5607cb09a290 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x5607cb09a350 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x5607cb09a3f0 <col:49> "" ""
|-CXXMethodDecl 0x5607cb09a480 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x5607cb09a540 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x5607cb09a630 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x5607cb09a6f8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x5607cb09a7b8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x5607cb09a878 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5607cb09a970 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x5607cb09aa38 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x5607cb09ab00 <line:174:5, col:42> col:31 used empty_data 'const char *()' static inline
|-CXXMethodDecl 0x5607cb09acd8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x5607cb09abb8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x5607cb09ac38 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x5607cb09af00 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x5607cb09ada0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x5607cb09ae20 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x5607cb09b010 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x5607cb09b078 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x5607cb09b0a0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5607cb09b1b8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x5607cb09b258 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x5607cb09b2b8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x5607cb09b318 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x5607cb09b3c8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x5607cb09b430 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x5607cb09b668 <line:201:2, col:32> col:2 referenced MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x5607cb09b6b8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5607cb09b648 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x5607cb09b558 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x5607cb09b500 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x5607cb09b540 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x5607cb09b520 <col:32> 'int' 8
|-CXXRecordDecl 0x5607cb09b6d0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5607cb09b7e8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x5607cb09b890 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x5607cb09b8f8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x5607cb09b988 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x5607cb0a1a20 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5607cb0a1e58 <col:12>
| |-CXXConstructorDecl 0x5607cb0a1b28 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5607cb0a1c38 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5607cb09b890 'data' 'const char *'
| | | `-ImplicitCastExpr 0x5607cb0a43e0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x5607cb0a43b0 <col:12> 'const char *const' lvalue .data 0x5607cb09b890
| | |     `-DeclRefExpr 0x5607cb0a4390 <col:12> 'const String::rep_t' lvalue ParmVar 0x5607cb0a1c38 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5607cb09b8f8 'length' 'int'
| | | `-ImplicitCastExpr 0x5607cb0a4470 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5607cb0a4440 <col:12> 'const int' lvalue .length 0x5607cb09b8f8
| | |     `-DeclRefExpr 0x5607cb0a4420 <col:12> 'const String::rep_t' lvalue ParmVar 0x5607cb0a1c38 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5607cb09b988 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x5607cb0a4500 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5607cb0a44d0 <col:12> 'String::memo_t *const' lvalue .memo 0x5607cb09b988
| | |     `-DeclRefExpr 0x5607cb0a44b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5607cb0a1c38 '' 'const String::rep_t &'
| | `-CompoundStmt 0x5607cb0a4558 <col:12>
| |-CXXConstructorDecl 0x5607cb0a1cd8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5607cb0a1cd8
| | `-ParmVarDecl 0x5607cb0a1de8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x5607cb0a7340 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5607cb0b2d58 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5607cb0b2e68 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x5607cb0b3380 <col:12>
| |   |-BinaryOperator 0x5607cb0b3198 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x5607cb0b3150 <col:12> 'const char *' lvalue ->data 0x5607cb09b890
| |   | | `-CXXThisExpr 0x5607cb0b3140 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5607cb0b3180 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x5607cb0b3110 <col:12> 'const char *const' lvalue .data 0x5607cb09b890
| |   |     `-DeclRefExpr 0x5607cb0b30f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5607cb0b2e68 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5607cb0b3260 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x5607cb0b3218 <col:12> 'int' lvalue ->length 0x5607cb09b8f8
| |   | | `-CXXThisExpr 0x5607cb0b3208 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5607cb0b3248 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x5607cb0b31d8 <col:12> 'const int' lvalue .length 0x5607cb09b8f8
| |   |     `-DeclRefExpr 0x5607cb0b31b8 <col:12> 'const String::rep_t' lvalue ParmVar 0x5607cb0b2e68 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5607cb0b3328 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x5607cb0b32e0 <col:12> 'String::memo_t *' lvalue ->memo 0x5607cb09b988
| |   | | `-CXXThisExpr 0x5607cb0b32d0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5607cb0b3310 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x5607cb0b32a0 <col:12> 'String::memo_t *const' lvalue .memo 0x5607cb09b988
| |   |     `-DeclRefExpr 0x5607cb0b3280 <col:12> 'const String::rep_t' lvalue ParmVar 0x5607cb0b2e68 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x5607cb0b3370 <col:12>
| |     `-UnaryOperator 0x5607cb0b3358 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5607cb0b3348 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x5607cb0b2ed8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5607cb0b2ed8
|   `-ParmVarDecl 0x5607cb0b2fe8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x5607cb09ba00 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x5607cb09bc48 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x5607cb09ba68 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x5607cb09bae8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x5607cb09bb60 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5607cb0a19e0 <col:79, line:261:5>
|   |-BinaryOperator 0x5607cb0a1658 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5607cb0a15f0 <col:2, col:5> 'const char *' lvalue .data 0x5607cb09b890
|   | | `-MemberExpr 0x5607cb0a15c0 <col:2> 'String::rep_t' lvalue ->_r 0x5607cb09ba00
|   | |   `-CXXThisExpr 0x5607cb0a15b0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5607cb0a1640 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5607cb0a1620 <col:12> 'const char *' lvalue ParmVar 0x5607cb09ba68 'data' 'const char *'
|   |-BinaryOperator 0x5607cb0a1720 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x5607cb0a16b8 <col:2, col:5> 'int' lvalue .length 0x5607cb09b8f8
|   | | `-MemberExpr 0x5607cb0a1688 <col:2> 'String::rep_t' lvalue ->_r 0x5607cb09ba00
|   | |   `-CXXThisExpr 0x5607cb0a1678 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5607cb0a1708 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5607cb0a16e8 <col:14> 'int' lvalue ParmVar 0x5607cb09bae8 'length' 'int'
|   `-IfStmt 0x5607cb0a19c8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x5607cb0a1840 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5607cb0a1828 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5607cb0a1808 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5607cb0a17e8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x5607cb0a1780 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x5607cb09b988
|     |       | `-MemberExpr 0x5607cb0a1750 <col:7> 'String::rep_t' lvalue ->_r 0x5607cb09ba00
|     |       |   `-CXXThisExpr 0x5607cb0a1740 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5607cb0a17d0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5607cb0a17b0 <col:17> 'String::memo_t *' lvalue ParmVar 0x5607cb09bb60 'memo' 'String::memo_t *'
|     `-CallExpr 0x5607cb0a19a0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x5607cb0a1988 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5607cb0a1890 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x5607cb08a678 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x5607cb0a18f8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5607cb09b258
|         `-ImplicitCastExpr 0x5607cb0a18e0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5607cb0a18c0 <col:27> 'String::memo_t *' lvalue ParmVar 0x5607cb09bb60 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x5607cb09bef8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x5607cb09bd18 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x5607cb09bd98 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x5607cb09be10 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x5607cb09ba00 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x5607cb0a1e68 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5607cb0a1ff8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x5607cb0a1f60 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x5607cb0a1ed0 <col:2> '<bound member function type>' ->assign_memo 0x5607cb09bc48
|     | `-ImplicitCastExpr 0x5607cb0a1f98 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x5607cb0a1ec0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x5607cb0a1fb0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5607cb0a1f00 <col:14> 'const char *' lvalue ParmVar 0x5607cb09bd18 'data' 'const char *'
|     |-ImplicitCastExpr 0x5607cb0a1fc8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5607cb0a1f20 <col:20> 'int' lvalue ParmVar 0x5607cb09bd98 'length' 'int'
|     `-ImplicitCastExpr 0x5607cb0a1fe0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5607cb0a1f40 <col:28> 'String::memo_t *' lvalue ParmVar 0x5607cb09be10 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x5607cb09c088 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x5607cb09bfc8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x5607cb0a2250 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x5607cb0a21d0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x5607cb0a2020 <col:2> '<bound member function type>' ->assign_memo 0x5607cb09bc48
|     | `-CXXThisExpr 0x5607cb0a2010 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x5607cb0a2208 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x5607cb0a20a0 <col:14, col:19> 'const char *' lvalue .data 0x5607cb09b890
|     |   `-MemberExpr 0x5607cb0a2070 <col:14, col:16> 'String::rep_t' lvalue ._r 0x5607cb09ba00
|     |     `-DeclRefExpr 0x5607cb0a2050 <col:14> 'const String' lvalue ParmVar 0x5607cb09bfc8 'x' 'const String &'
|     |-ImplicitCastExpr 0x5607cb0a2220 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x5607cb0a2120 <col:25, col:30> 'int' lvalue .length 0x5607cb09b8f8
|     |   `-MemberExpr 0x5607cb0a20f0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x5607cb09ba00
|     |     `-DeclRefExpr 0x5607cb0a20d0 <col:25> 'const String' lvalue ParmVar 0x5607cb09bfc8 'x' 'const String &'
|     `-ImplicitCastExpr 0x5607cb0a2238 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x5607cb0a21a0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x5607cb09b988
|         `-MemberExpr 0x5607cb0a2170 <col:38, col:40> 'String::rep_t' lvalue ._r 0x5607cb09ba00
|           `-DeclRefExpr 0x5607cb0a2150 <col:38> 'const String' lvalue ParmVar 0x5607cb09bfc8 'x' 'const String &'
|-CXXMethodDecl 0x5607cb09c150 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x5607cb0a2c10 <col:31, line:278:5>
|   `-IfStmt 0x5607cb0a2bf8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x5607cb0a22f0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5607cb0a22d8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x5607cb0a22a8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5607cb09b988
|     |     `-MemberExpr 0x5607cb0a2278 <col:6> 'String::rep_t' lvalue ->_r 0x5607cb09ba00
|     |       `-CXXThisExpr 0x5607cb0a2268 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x5607cb0a2bd0 <col:15, line:277:2>
|       |-ParenExpr 0x5607cb0a27a0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x5607cb0a2770 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x5607cb0a2400 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x5607cb0a23e8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x5607cb0a23d0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x5607cb0a2390 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5607cb09b258
|       |   |       `-ImplicitCastExpr 0x5607cb0a2378 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x5607cb0a2348 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x5607cb09b988
|       |   |           `-MemberExpr 0x5607cb0a2318 <col:27> 'String::rep_t' lvalue ->_r 0x5607cb09ba00
|       |   |             `-CXXThisExpr 0x5607cb0a2308 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x5607cb0a2460 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x5607cb0a2440 <col:54> 'int' 0
|       |   `-CallExpr 0x5607cb0a26d0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x5607cb0a26b8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5607cb0a2638 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5607cae018e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x5607cb0a2710 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5607cb0a2548 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x5607cb0a2728 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5607cb0a2578 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x5607cb0a2740 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5607cb0a25b0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x5607cb0a2758 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x5607cb0a2620 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x5607cb0a2608 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5607cb0a25d0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x5607cb0a2af0 <line:274:6, line:275:22>
|       | |-CallExpr 0x5607cb0a29b0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x5607cb0a2998 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5607cb0a2910 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x5607cb08bac0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5607cb0a28e0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5607cb09b258
|       | |   `-ImplicitCastExpr 0x5607cb0a28c8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x5607cb0a2898 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x5607cb09b988
|       | |       `-MemberExpr 0x5607cb0a2868 <col:40> 'String::rep_t' lvalue ->_r 0x5607cb09ba00
|       | |         `-CXXThisExpr 0x5607cb0a2858 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x5607cb0a2ab0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x5607cb0a2a98 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5607cb0a29d8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x5607cb0a0930 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x5607cb0a2ad8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x5607cb0a2a38 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x5607cb09b988
|       |       `-MemberExpr 0x5607cb0a2a08 <col:15> 'String::rep_t' lvalue ->_r 0x5607cb09ba00
|       |         `-CXXThisExpr 0x5607cb0a29f8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x5607cb0a2bb0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x5607cb0a2b48 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5607cb09b988
|         | `-MemberExpr 0x5607cb0a2b18 <col:6> 'String::rep_t' lvalue ->_r 0x5607cb09ba00
|         |   `-CXXThisExpr 0x5607cb0a2b08 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x5607cb0a2b98 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x5607cb0a2b78 <col:16> 'int' 0
|-CXXMethodDecl 0x5607cb09c3e8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x5607cb09c208 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5607cb09c288 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5607cb09c300 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x5607cb09c4c0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5607cb09c710 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x5607cb09c578 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5607cb09c5f8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5607cb09c670 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x5607cb09c8f8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x5607cb09c7e0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x5607cb09c860 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x5607cb09c9f8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x5607cb0a2ce8 <col:41, line:286:5>
|   `-ReturnStmt 0x5607cb0a2cd8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x5607cb0a2ca8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x5607cb0a2c70 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x5607cb0a2c58 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x5607cb0a2c38 <col:46> 'int' 1
|-CXXMethodDecl 0x5607cb09cc98 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x5607cb09cab0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x5607cb09cb30 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x5607cb09cbb0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x5607cb0a0930 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x5607cb09cd60 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x5607cb0a0a00 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x5607cb0a0bd0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x5607cb0a0ab8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5607cb0a0b38 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x5607cb0a0c90 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x5607cb0a0d58 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x5607cb0a0e58 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x5607cb0a0ed0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x5607cb0a0f48 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x5607cb0a0fb0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x5607cb0a10b0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x5607cb0a1100 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5607cb0a1090 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x5607cb0a1070 <col:22> 'int' 14
|-CXXMethodDecl 0x5607cb0a1318 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x5607cb0a1130 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x5607cb0a11b0 <col:38> col:41 'int'
| `-ParmVarDecl 0x5607cb0a1230 <col:43> col:46 'int'
|-FriendDecl 0x5607cb0a1420 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x5607cb0a14b0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5607cb35bbb0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x5607cb35bd88 prev 0x5607cb35bbb0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5607cb35be18 <col:46, col:52> col:46 public
|-TypedefDecl 0x5607cb35be40 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5607cad633b0 'int'
|-TypedefDecl 0x5607cb35d7c0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x5607cb35d770 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x5607cb35d750 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x5607cb35c058 'type'
|     `-SubstTemplateTypeParmType 0x5607cb35c020 'String' sugar
|       |-TemplateTypeParmType 0x5607cb055eb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5607cb055e60 'T'
|       `-RecordType 0x5607cb0926a0 'String'
|         `-CXXRecord 0x5607cb092610 'String'
|-TypedefDecl 0x5607cb35d878 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x5607cb35d840 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x5607cb35d820 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5607cb35d7c0 'type'
|     `-ElaboratedType 0x5607cb35d770 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x5607cb35d750 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x5607cb35c058 'type'
|         `-SubstTemplateTypeParmType 0x5607cb35c020 'String' sugar
|           |-TemplateTypeParmType 0x5607cb055eb0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5607cb055e60 'T'
|           `-RecordType 0x5607cb0926a0 'String'
|             `-CXXRecord 0x5607cb092610 'String'
|-CXXMethodDecl 0x5607cb35d9f8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x5607cb35d908 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x5607cb35dae8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5607cb35dbc8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5607cb35dbc8
|-CXXMethodDecl 0x5607cb35de98 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5607cb35dda0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x5607cb35e0d8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5607cb35df50 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5607cb35dfc8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5607cb35e2a8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5607cb35e198 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5607cb35e210 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5607cb35e408 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5607cb35e4d8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5607cb35e728 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5607cb35e598 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5607cb35e610 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5607cb35e988 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x5607cb35e7f8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5607cb35e870 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5607cb35eb48 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5607cb35ea58 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5607cb35ed08 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5607cb35ec10 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5607cb35edc0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5607cb35ee70 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5607cb35f0a8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5607cb35ef20 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5607cb35ef98 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5607cb35f348 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5607cb35f250 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x5607cb35f410 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x5607cb35f460 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5607cb35f4b0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5607cb2c9e40 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5607cb35a618 prev 0x5607cb2c9e40 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5607cb35bb20 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x5607cb35bad0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x5607cb35bab0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5607cb35b960 'type'
|     `-SubstTemplateTypeParmType 0x5607cb35b7f0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x5607cb02bc60 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x5607cb02bc08 'F'
|       `-RecordType 0x5607cb35b450 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x5607cb35b370 'typed_array_memory'
|-FieldDecl 0x5607cb35f500 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x5607cb35f550 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5607cb35f588 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x5607cb35a6b0 'String' sugar
|   |-TemplateTypeParmType 0x5607cb0631d0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5607cb063178 'T'
|   `-RecordType 0x5607cb0926a0 'String'
|     `-CXXRecord 0x5607cb092610 'String'
|-TypedefDecl 0x5607cb35f618 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x5607cb35f5e0 'String &'
|   `-SubstTemplateTypeParmType 0x5607cb35a6b0 'String' sugar
|     |-TemplateTypeParmType 0x5607cb0631d0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5607cb063178 'T'
|     `-RecordType 0x5607cb0926a0 'String'
|       `-CXXRecord 0x5607cb092610 'String'
|-TypedefDecl 0x5607cb35f6a8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x5607cb35f670 'const String &'
|   `-QualType 0x5607cb35a6b1 'const String' const
|     `-SubstTemplateTypeParmType 0x5607cb35a6b0 'String' sugar
|       |-TemplateTypeParmType 0x5607cb0631d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5607cb063178 'T'
|       `-RecordType 0x5607cb0926a0 'String'
|         `-CXXRecord 0x5607cb092610 'String'
|-TypedefDecl 0x5607cb35f738 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x5607cb35f700 'String *'
|   `-SubstTemplateTypeParmType 0x5607cb35a6b0 'String' sugar
|     |-TemplateTypeParmType 0x5607cb0631d0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5607cb063178 'T'
|     `-RecordType 0x5607cb0926a0 'String'
|       `-CXXRecord 0x5607cb092610 'String'
|-TypedefDecl 0x5607cb35f7c8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x5607cb35f790 'const String *'
|   `-QualType 0x5607cb35a6b1 'const String' const
|     `-SubstTemplateTypeParmType 0x5607cb35a6b0 'String' sugar
|       |-TemplateTypeParmType 0x5607cb0631d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5607cb063178 'T'
|       `-RecordType 0x5607cb0926a0 'String'
|         `-CXXRecord 0x5607cb092610 'String'
|-TypedefDecl 0x5607cb360420 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x5607cb3603d0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x5607cb3603b0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x5607cb3602e8 'type'
|     `-LValueReferenceType 0x5607cb3602b0 'const String &'
|       `-QualType 0x5607cb360051 'const String' const
|         `-SubstTemplateTypeParmType 0x5607cb360050 'String' sugar
|           |-TemplateTypeParmType 0x5607cb035bb0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5607cb035b58 'T'
|           `-RecordType 0x5607cb0926a0 'String'
|             `-CXXRecord 0x5607cb092610 'String'
|-TypedefDecl 0x5607cb360488 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x5607cb35f670 'const String &'
|   `-QualType 0x5607cb35a6b1 'const String' const
|     `-SubstTemplateTypeParmType 0x5607cb35a6b0 'String' sugar
|       |-TemplateTypeParmType 0x5607cb0631d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5607cb063178 'T'
|       `-RecordType 0x5607cb0926a0 'String'
|         `-CXXRecord 0x5607cb092610 'String'
|-TypedefDecl 0x5607cb3604e0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5607cad633b0 'int'
|-TypedefDecl 0x5607cb360548 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x5607cb35f700 'String *'
|   `-SubstTemplateTypeParmType 0x5607cb35a6b0 'String' sugar
|     |-TemplateTypeParmType 0x5607cb0631d0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5607cb063178 'T'
|     `-RecordType 0x5607cb0926a0 'String'
|       `-CXXRecord 0x5607cb092610 'String'
|-TypedefDecl 0x5607cb3605b0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x5607cb35f790 'const String *'
|   `-QualType 0x5607cb35a6b1 'const String' const
|     `-SubstTemplateTypeParmType 0x5607cb35a6b0 'String' sugar
|       |-TemplateTypeParmType 0x5607cb0631d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5607cb063178 'T'
|       `-RecordType 0x5607cb0926a0 'String'
|         `-CXXRecord 0x5607cb092610 'String'
|-EnumDecl 0x5607cb360608 <line:134:5> col:5
| `-EnumConstantDecl 0x5607cb360700 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5607cb3606e0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5607cb064858 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5607cb064830 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5607cb064810 <col:40> 'int' 1
|-CXXConstructorDecl 0x5607cb360788 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5607cb360a18 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5607cb360840 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5607cb3608e0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x5607cb360ca8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x5607cb360b90 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x5607cb360f68 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x5607cb360e50 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x5607cb361280 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x5607cb361160 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x5607cb361590 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x5607cb361470 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x5607cb361880 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5607cb3616c8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5607cb361740 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5607cb3619a8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5607cb361a58 <col:20> Inherited
| `-OptimizeNoneAttr 0x5607cb361ab0 <col:30> Inherited
|-CXXMethodDecl 0x5607cb361af8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5607cb361ba8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5607cb361c00 <col:30> Inherited
|-CXXMethodDecl 0x5607cb361cc8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5607cb361d78 <col:20> Inherited
| `-OptimizeNoneAttr 0x5607cb361dd0 <col:30> Inherited
|-CXXMethodDecl 0x5607cb361e18 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5607cb361ec8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5607cb361f20 <col:30> Inherited
|-CXXMethodDecl 0x5607cb361f68 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5607cb362018 <col:20> Inherited
| `-OptimizeNoneAttr 0x5607cb362070 <col:30> Inherited
|-CXXMethodDecl 0x5607cb3620b8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5607cb362168 <col:20> Inherited
| `-OptimizeNoneAttr 0x5607cb3621c0 <col:30> Inherited
|-CXXMethodDecl 0x5607cb3621e8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5607cb362298 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5607cb362348 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5607cb362508 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5607cb3623f8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5607cb362470 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5607cb362658 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5607cb3625c8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5607cb362808 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x5607cb362710 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5607cb3628c0 <col:20>
| `-OptimizeNoneAttr 0x5607cb362918 <col:30>
|-CXXMethodDecl 0x5607cb362a38 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x5607cb362940 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5607cb362af0 <col:20>
| `-OptimizeNoneAttr 0x5607cb362b48 <col:30>
|-CXXMethodDecl 0x5607cb362c00 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5607cb362b70 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5607cb362d48 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5607cb362cb8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5607cb362e78 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x5607cb362f78 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x5607cb363048 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x5607cb363118 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x5607cb363258 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5607cb3631c8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5607cb3633a0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5607cb363310 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5607cb3634e8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x5607cb363458 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5607cb3635a0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5607cb3636a0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5607cb363610 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5607cb363758 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5607cb363818 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x5607cb363918 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x5607cb363a98 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5607cb3639d8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x5607cb364258 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5607cb363b50 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x5607cb3641b8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x5607cb3640b8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x5607cb364338 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5607cb364488 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5607cb3643f8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5607cb364540 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5607cb364788 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5607cb364600 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5607cb364678 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5607cb364918 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x5607cb364858 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5607cb364b28 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x5607cb3649e0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5607cb364a58 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5607cb364be8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5607cb364e48 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x5607cb364d50 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x5607cb364f28 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5607cb364f28

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607cb413d30 prev 0x5607cb36faa8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5607cb413e28 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x5607cb413eb8 <col:22, col:28> col:22 public
|-EnumDecl 0x5607cb413ee0 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x5607cb413ff8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x5607cb413fd8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x5607cb413fc0 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5607cb413fa0 <col:14> 'int' 999
| |-EnumConstantDecl 0x5607cb4140a0 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x5607cb414080 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x5607cb414068 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5607cb414048 <col:14> 'int' 1
| |-EnumConstantDecl 0x5607cb414130 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x5607cb414110 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x5607cb4140f0 <col:17> 'int' 0
| |-EnumConstantDecl 0x5607cb4141c0 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x5607cb4141a0 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x5607cb414180 <col:13> 'int' 1
| |-EnumConstantDecl 0x5607cb414250 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x5607cb414230 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x5607cb414210 <col:16> 'int' 2
| |-EnumConstantDecl 0x5607cb4142e0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x5607cb4142c0 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x5607cb4142a0 <col:13> 'int' 3
| |-EnumConstantDecl 0x5607cb414370 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x5607cb414350 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x5607cb414330 <col:15> 'int' 4
| |-EnumConstantDecl 0x5607cb414400 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x5607cb4143e0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x5607cb4143c0 <col:14> 'int' 5
| |-EnumConstantDecl 0x5607cb414490 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x5607cb414470 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x5607cb414450 <col:12> 'int' 6
| `-EnumConstantDecl 0x5607cb414520 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x5607cb414500 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x5607cb4144e0 <col:13> 'int' 7
|-VarDecl 0x5607cb414590 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x5607cb414618 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x5607cb4146a0 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x5607cb414728 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x5607cb4147b0 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x5607cb414838 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x5607cb4148c0 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x5607cb414948 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x5607cb4149d0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x5607cb414a58 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x5607cb414ae0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x5607cb414be0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x5607cb419ef8 '_nerrors' 'int'
| | `-IntegerLiteral 0x5607cb41a688 <line:128:13> 'int' 0
| `-CompoundStmt 0x5607cb41a6f8 <col:16, line:129:5>
|-CXXDestructorDecl 0x5607cb414cd0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x5607cb41a708 <col:29, line:132:5>
|-CXXMethodDecl 0x5607cb414e88 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x5607cb414dc0 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5607cb414f50 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5607cb415038 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5607cb41a760 <col:44, line:161:5>
|   `-ReturnStmt 0x5607cb41a750 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x5607cb41a738 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5607cb41a718 <col:9> 'ErrorHandler *' lvalue Var 0x5607cb419f58 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x5607cb415178 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x5607cb4150e8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5607cb415240 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5607cb41a7c0 <col:43, line:173:5>
|   `-ReturnStmt 0x5607cb41a7b0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x5607cb41a798 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5607cb41a778 <col:9> 'ErrorHandler *' lvalue Var 0x5607cb419fd0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x5607cb4152f8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x5607cb415378 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x5607cb415488 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x5607cb4153f8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5607cb4155d8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x5607cb415548 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5607cb415730 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x5607cb415698 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x5607cb415888 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x5607cb4157f0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5607cb4159e0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x5607cb415948 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5607cb415bf0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5607cb415a98 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x5607cb415b18 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x5607cb415dc8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5607cb415cb0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x5607cb415d30 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x5607cb415fe8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5607cb415e88 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x5607cb415f08 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x5607cb4161c8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5607cb4160a8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5607cb416128 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5607cb4163a8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5607cb416288 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5607cb416308 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5607cb416530 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x5607cb416468 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x5607cb416700 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x5607cb4165e8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5607cb416660 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x5607cb41aa18 <col:57, line:234:5>
|   `-ReturnStmt 0x5607cb41aa08 <line:233:2, col:41>
|     `-ExprWithCleanups 0x5607cb41a9f0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5607cb41a998 <col:9, col:41> 'int'
|         |-MemberExpr 0x5607cb41a968 <col:9> '<bound member function type>' ->xmessage 0x5607cb416530
|         | `-CXXThisExpr 0x5607cb41a958 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x5607cb41a9d8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5607cb41a9c0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5607cb41a938 <col:18, col:40> 'String' (CXXTemporary 0x5607cb41a938)
|               `-CallExpr 0x5607cb41a900 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x5607cb41a8e8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x5607cb41a860 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5607cb418728 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x5607cb41a880 <col:31> 'const String' lvalue ParmVar 0x5607cb416660 'str' 'const String &'
|                 `-DeclRefExpr 0x5607cb41a8a0 <col:36> 'const String' lvalue ParmVar 0x5607cb4165e8 'anno' 'const String &'
|-CXXMethodDecl 0x5607cb4169e0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5607cb4167c0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5607cb416840 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x5607cb4168b8 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5607cb41aca8 <col:68, line:243:5>
|   `-ReturnStmt 0x5607cb41ac98 <line:242:2, col:41>
|     `-ExprWithCleanups 0x5607cb41ac80 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5607cb41ac20 <col:9, col:41> 'int'
|         |-MemberExpr 0x5607cb41abf0 <col:9> '<bound member function type>' ->xmessage 0x5607cb416700
|         | `-CXXThisExpr 0x5607cb41abe0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5607cb41aab8 <col:18> 'const String' lvalue ParmVar 0x5607cb4167c0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5607cb41ac68 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5607cb41ac50 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5607cb41abc0 <col:24, col:40> 'String' (CXXTemporary 0x5607cb41abc0)
|               `-CXXMemberCallExpr 0x5607cb41ab58 <col:24, col:40> 'String'
|                 |-MemberExpr 0x5607cb41aae8 <col:24> '<bound member function type>' ->vformat 0x5607cb417bf0
|                 | `-CXXThisExpr 0x5607cb41aad8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5607cb41ab88 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5607cb41ab18 <col:32> 'const char *' lvalue ParmVar 0x5607cb416840 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5607cb41aba0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5607cb41ab38 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5607cb4168b8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5607cb416c80 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x5607cb416aa8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5607cb416b20 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5607cb416b98 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x5607cb41afe8 <col:23, line:254:5>
|   `-ReturnStmt 0x5607cb41afd8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x5607cb41afc0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x5607cb41af60 <col:9, col:71> 'int'
|         |-MemberExpr 0x5607cb41af30 <col:9> '<bound member function type>' ->xmessage 0x5607cb416700
|         | `-CXXThisExpr 0x5607cb41af20 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x5607cb41afa8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x5607cb41af90 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x5607cb41aee0 <col:18, col:65> 'String' (CXXTemporary 0x5607cb41aee0)
|         |     `-CallExpr 0x5607cb41ae78 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x5607cb41ae60 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x5607cb41ad48 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5607cb418728 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x5607cb41ad68 <col:31> 'const String' lvalue ParmVar 0x5607cb416b20 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x5607cb41aec0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x5607cb41aea8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x5607cb41ae40 <col:37, col:64> 'String' (CXXTemporary 0x5607cb41ae40)
|         |             `-CallExpr 0x5607cb41ae10 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x5607cb41adf8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x5607cb41ad88 <col:37> 'String (const String &)' lvalue CXXMethod 0x5607cb418d78 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x5607cb41ada8 <col:56> 'const String' lvalue ParmVar 0x5607cb416aa8 'landmark' 'const String &'
|         `-DeclRefExpr 0x5607cb41af00 <col:68> 'const String' lvalue ParmVar 0x5607cb416b98 'str' 'const String &'
|-CXXMethodDecl 0x5607cb417000 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5607cb416d48 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5607cb416dc0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5607cb416e40 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x5607cb416eb8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5607cb41b2a0 <col:34, line:267:5>
|   `-ReturnStmt 0x5607cb41b290 <line:266:2, col:51>
|     `-ExprWithCleanups 0x5607cb41b278 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x5607cb41b210 <col:9, col:51> 'int'
|         |-MemberExpr 0x5607cb41b1e0 <col:9> '<bound member function type>' ->xmessage 0x5607cb416c80
|         | `-CXXThisExpr 0x5607cb41b1d0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5607cb41b088 <col:18> 'const String' lvalue ParmVar 0x5607cb416d48 'landmark' 'const String &'
|         |-DeclRefExpr 0x5607cb41b0a8 <col:28> 'const String' lvalue ParmVar 0x5607cb416dc0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5607cb41b260 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x5607cb41b248 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5607cb41b1b0 <col:34, col:50> 'String' (CXXTemporary 0x5607cb41b1b0)
|               `-CXXMemberCallExpr 0x5607cb41b148 <col:34, col:50> 'String'
|                 |-MemberExpr 0x5607cb41b0d8 <col:34> '<bound member function type>' ->vformat 0x5607cb417bf0
|                 | `-CXXThisExpr 0x5607cb41b0c8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5607cb41b178 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5607cb41b108 <col:42> 'const char *' lvalue ParmVar 0x5607cb416e40 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5607cb41b190 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5607cb41b128 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5607cb416eb8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5607cb417110 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x5607cb41b320 <col:25, line:288:5>
|   `-ReturnStmt 0x5607cb41b310 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x5607cb41b2f8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x5607cb41b2c8 <col:9> 'const int' lvalue ->_nerrors 0x5607cb419ef8
|         `-CXXThisExpr 0x5607cb41b2b8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x5607cb417320 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x5607cb4171c8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x5607cb417248 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x5607cb417608 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5607cb4173e8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x5607cb417468 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x5607cb4174e0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5607cb4177d0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x5607cb4176d8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x5607cb417a18 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5607cb417890 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x5607cb417908 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5607cb41b580 <col:58, line:357:5>
|   `-ReturnStmt 0x5607cb41b570 <line:356:2, col:29>
|     `-ExprWithCleanups 0x5607cb41b558 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x5607cb41b528 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5607cb41b510 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5607cb41b4f0 <col:9, col:29> 'String' (CXXTemporary 0x5607cb41b4f0)
|             `-CallExpr 0x5607cb41b480 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x5607cb41b468 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5607cb41b3e8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x5607cb417608 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x5607cb41b388 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x5607cb41b4b8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x5607cb41b3a8 <col:21> 'const char *' lvalue ParmVar 0x5607cb417890 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x5607cb41b4d0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x5607cb41b3c8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5607cb417908 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5607cb417bf0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x5607cb417ae0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x5607cb417b58 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5607cb417d48 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x5607cb417cb8 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x5607cb417e90 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x5607cb417e00 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x5607cb418130 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x5607cb417f48 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x5607cb417fc8 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x5607cb418040 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x5607cb418290 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x5607cb418200 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x5607cb41b698 <col:37, line:441:5>
|   `-IfStmt 0x5607cb41b680 <line:439:2, line:440:8>
|     |-BinaryOperator 0x5607cb41b608 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x5607cb41b5d8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x5607cb41b598 <col:6> 'int' lvalue ParmVar 0x5607cb418200 'level' 'int'
|     | `-ImplicitCastExpr 0x5607cb41b5f0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x5607cb41b5b8 <col:15> 'ErrorHandler::Level' EnumConstant 0x5607cb4142e0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x5607cb41b668 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x5607cb41b638 <col:8> 'int' lvalue ->_nerrors 0x5607cb419ef8
|         `-CXXThisExpr 0x5607cb41b628 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x5607cb418358 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x5607cb41b730 <col:26, line:448:5>
|   `-BinaryOperator 0x5607cb41b710 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x5607cb41b6c0 <col:2> 'int' lvalue ->_nerrors 0x5607cb419ef8
|     | `-CXXThisExpr 0x5607cb41b6b0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x5607cb41b6f0 <col:13> 'int' 0
|-CXXMethodDecl 0x5607cb418520 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x5607cb418410 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5607cb418488 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x5607cb418728 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x5607cb4185e0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x5607cb418658 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x5607cb4189d8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x5607cb4187e8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x5607cb418868 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x5607cb4188e8 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x5607cb418a90 <col:59> 0 0
|-CXXMethodDecl 0x5607cb418c28 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x5607cb418b08 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x5607cb418b88 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x5607cb41bda0 <col:70, line:534:5>
|   |-DeclStmt 0x5607cb41b8a0 <line:528:2, col:20>
|   | |-VarDecl 0x5607cb41b758 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x5607cb41b7c0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x5607cb41b7f8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x5607cb41b860 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x5607cb41b970 <line:529:2, col:23>
|   | `-VarDecl 0x5607cb41b8d0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x5607cb41b958 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5607cb41b938 <col:18> 'const char *' lvalue ParmVar 0x5607cb418b08 'begin' 'const char *'
|   |-DoStmt 0x5607cb41bd38 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x5607cb41bc68 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x5607cb41bc50 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x5607cb41bc30 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x5607cb41b988 <col:6> 'const char *' lvalue Var 0x5607cb41b8d0 'x' 'const char *'
|   | |     `-CallExpr 0x5607cb41bb80 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x5607cb41bb68 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5607cb41bb20 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x5607cb41a3d0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x5607cb41bbe8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x5607cb41bbd0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x5607cb41ba40 <col:20, col:27> 'String' (CXXTemporary 0x5607cb41ba40)
|   | |       |     `-CXXTemporaryObjectExpr 0x5607cb41ba08 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x5607cb41bc00 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5607cb41ba60 <col:30> 'const char *' lvalue Var 0x5607cb41b8d0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x5607cb41bc18 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5607cb41ba80 <col:33> 'const char *' lvalue ParmVar 0x5607cb418b88 'end' 'const char *'
|   | |       |-UnaryOperator 0x5607cb41bac0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5607cb41baa0 <col:39> 'String' lvalue Var 0x5607cb41b758 'name' 'String'
|   | |       |-UnaryOperator 0x5607cb41baf8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5607cb41bad8 <col:46> 'String' lvalue Var 0x5607cb41b7f8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x5607cb41bb10 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x5607cb41bd20 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x5607cb41bd08 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x5607cb41bce8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x5607cb41bcb8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5607cb095e08
|   |         `-ImplicitCastExpr 0x5607cb41bca0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x5607cb41bc80 <col:11> 'String' lvalue Var 0x5607cb41b758 'name' 'String'
|   `-ReturnStmt 0x5607cb41bd90 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x5607cb41bd78 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x5607cb41bd58 <col:9> 'const char *' lvalue Var 0x5607cb41b8d0 'x' 'const char *'
|-CXXMethodDecl 0x5607cb418d78 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x5607cb418ce8 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x5607cb41c3a8 <col:55, line:550:5>
|   `-IfStmt 0x5607cb41c380 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x5607cb41bfe0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x5607cb41bfc8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5607cb41bfb0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5607cb41bf90 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5607cb41bf60 <col:6> '<bound member function type>' .operator int (String::*)() const 0x5607cb095e08
|     | |       `-DeclRefExpr 0x5607cb41be00 <col:6> 'const String' lvalue ParmVar 0x5607cb418ce8 'x' 'const String &'
|     | `-BinaryOperator 0x5607cb41bf40 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x5607cb41bf10 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x5607cb41bec0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x5607cb41bea8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5607cb41be60 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x5607cb0af640 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x5607cb41be20 <col:11> 'const String' lvalue ParmVar 0x5607cb418ce8 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x5607cb41be40 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x5607cb41bf28 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x5607cb41bef8 <col:19> 'char' 123
|     |-ReturnStmt 0x5607cb41c050 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x5607cb41c020 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x5607cb41c000 <col:13> 'const String' lvalue ParmVar 0x5607cb418ce8 'x' 'const String &'
|     `-IfStmt 0x5607cb41c358 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x5607cb41c0e8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5607cb41c0d0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5607cb41c0b0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5607cb41c080 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5607cb095e08
|       |       `-DeclRefExpr 0x5607cb41c060 <col:11> 'const String' lvalue ParmVar 0x5607cb418ce8 'x' 'const String &'
|       |-ReturnStmt 0x5607cb41c270 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x5607cb41c258 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x5607cb41c228 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x5607cb41c210 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x5607cb41c1f0 <col:13, col:29> 'String' (CXXTemporary 0x5607cb41c1f0)
|       |         `-CallExpr 0x5607cb41c1a0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x5607cb41c188 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x5607cb41c100 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x5607cb418520 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x5607cb41c1d0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x5607cb41c120 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x5607cb41c140 <col:28> 'const String' lvalue ParmVar 0x5607cb418ce8 'x' 'const String &'
|       `-ReturnStmt 0x5607cb41c348 <line:549:6, col:20>
|         `-ExprWithCleanups 0x5607cb41c330 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x5607cb41c300 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x5607cb41c2e8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x5607cb41c2c8 <col:13, col:20> 'String' (CXXTemporary 0x5607cb41c2c8)
|                 `-CXXTemporaryObjectExpr 0x5607cb41c290 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x5607cb418f40 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x5607cb418e30 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x5607cb418ea8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5607cb41a678 <col:71> 'bool' false
|-CXXRecordDecl 0x5607cb418ff0 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x5607cb4192e8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x5607cb419280 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x5607cb419220 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x5607cb4191e0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x5607cb0926a0 'String'
|       | `-CXXRecord 0x5607cb092610 'String'
|       |-BuiltinType 0x5607cad633b0 'int'
|       `-DecayedType 0x5607cb370af0 '__va_list_tag *' sugar
|         |-TypedefType 0x5607cb370ac0 'va_list' sugar
|         | |-Typedef 0x5607caf83750 'va_list'
|         | `-TypedefType 0x5607caf83700 '__gnuc_va_list' sugar
|         |   |-Typedef 0x5607caebb328 '__gnuc_va_list'
|         |   `-TypedefType 0x5607caebb290 '__builtin_va_list' sugar
|         |     |-Typedef 0x5607cada4c18 '__builtin_va_list'
|         |     `-ConstantArrayType 0x5607cada4bc0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x5607cad64100 '__va_list_tag'
|         |         `-CXXRecord 0x5607cad64068 '__va_list_tag'
|         `-PointerType 0x5607caf88ff0 '__va_list_tag *'
|           `-RecordType 0x5607cad64100 '__va_list_tag'
|             `-CXXRecord 0x5607cad64068 '__va_list_tag'
|-EnumDecl 0x5607cb419340 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x5607cb419440 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5607cb4199a0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb419420 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x5607cb419400 <col:16> 'int' 1
| |-EnumConstantDecl 0x5607cb4194d0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5607cb4199b8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb4194b0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x5607cb419490 <col:21> 'int' 2
| |-EnumConstantDecl 0x5607cb419560 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5607cb4199d0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb419540 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x5607cb419520 <col:22> 'int' 4
| |-EnumConstantDecl 0x5607cb4195f0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5607cb4199e8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb4195d0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x5607cb4195b0 <col:17> 'int' 8
| |-EnumConstantDecl 0x5607cb419680 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5607cb419a00 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb419660 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x5607cb419640 <col:22> 'int' 16
| |-EnumConstantDecl 0x5607cb419710 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5607cb419a18 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb4196f0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5607cb4196d0 <col:19> 'int' 32
| |-EnumConstantDecl 0x5607cb4197a0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5607cb419a30 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb419780 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x5607cb419760 <col:17> 'int' 64
| |-EnumConstantDecl 0x5607cb419830 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5607cb419a48 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb419810 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x5607cb4197f0 <col:14> 'int' 128
| |-EnumConstantDecl 0x5607cb4198c0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5607cb419a60 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5607cb4198a0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x5607cb419880 <col:16> 'int' 256
| `-EnumConstantDecl 0x5607cb419950 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x5607cb419a78 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5607cb419930 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x5607cb419910 <col:12> 'int' 1024
|-CXXMethodDecl 0x5607cb419c88 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x5607cb419aa0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x5607cb419b40 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x5607cb419e10 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x5607cb419d48 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x5607cb419eb8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x5607cb419ef8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x5607cb419f58 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x5607cb419fd0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x5607cb41a3d0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x5607cb41a048 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x5607cb41a0c8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x5607cb41a148 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x5607cb41a1c0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x5607cb41a238 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x5607cb41a2b0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x5607cb41a4f8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x5607cb41a4f8
| `-ParmVarDecl 0x5607cb41a608 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x5607cb41c708 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x5607cb41c708
  `-ParmVarDecl 0x5607cb41c818 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607cb36fb38 prev 0x5607cb2e4f88 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5607cb36fc30 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x5607cb36fcc0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x5607cb36fdf8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x5607cb36fcf8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5607cb371220 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5607cb371200 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5607cb370d98 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5607cb3712b0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5607cb371270 <col:17> 'ErrorHandler *' lvalue ParmVar 0x5607cb36fcf8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5607cb370e00 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5607cb371330 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5607cb3712f0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5607cb370e60 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5607cb371370 <col:54> 'bool' false
| `-CompoundStmt 0x5607cb371478 <col:61, line:38:5>
|   `-BinaryOperator 0x5607cb371458 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x5607cb3713f0 <col:9> 'const Element *' lvalue ->_context 0x5607cb370d38
|     | `-CXXThisExpr 0x5607cb3713e0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x5607cb371440 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x5607cb371420 <col:20> 'int' 0
|-CXXConstructorDecl 0x5607cb370008 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5607cb36feb8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x5607cb36ff30 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5607cb371258 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5607cb371238 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x5607cb370d38 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x5607cb3714d0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x5607cb371490 <col:20> 'const Element *' lvalue ParmVar 0x5607cb36feb8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x5607cb370d98 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5607cb371550 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5607cb371510 <col:36> 'ErrorHandler *' lvalue ParmVar 0x5607cb36ff30 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5607cb370e00 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5607cb3715d0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5607cb371590 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x5607cb370e60 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5607cb371610 <col:73> 'bool' false
| `-CompoundStmt 0x5607cb371688 <col:80, line:46:5>
|-CXXMethodDecl 0x5607cb370138 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x5607cb371700 <col:36, line:51:5>
|   `-ReturnStmt 0x5607cb3716f0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x5607cb3716d8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x5607cb3716a8 <col:16> 'const Element *const' lvalue ->_context 0x5607cb370d38
|         `-CXXThisExpr 0x5607cb371698 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5607cb370228 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x5607cb371780 <col:32, line:57:5>
|   `-ReturnStmt 0x5607cb371770 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x5607cb371758 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x5607cb371728 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x5607cb370d98
|         `-CXXThisExpr 0x5607cb371718 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5607cb3702e8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x5607cb370470 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x5607cb3703a0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5607cb3705c0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x5607cb370530 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5607cb370710 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x5607cb370680 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5607cb370918 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x5607cb3707c8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x5607cb370840 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x5607cb370c48 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x5607cb3709d8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x5607cb370a58 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x5607cb370b20 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x5607cb370d00 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x5607cb370d38 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x5607cb370d98 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x5607cb370e00 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x5607cb370e60 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x5607cb370eb0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x5607cb370eb0
| `-ParmVarDecl 0x5607cb370fc8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x5607cb371068 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x5607cb371068
| `-ParmVarDecl 0x5607cb371178 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x5607cb425e58 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5607cb3942b0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x5607cb394488 prev 0x5607cb3942b0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5607cb394518 <col:46, col:52> col:46 public
|-TypedefDecl 0x5607cb394540 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5607cad633b0 'int'
|-TypedefDecl 0x5607cb396110 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x5607cb3960c0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x5607cb3949f0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x5607cb3948f0 'type'
|     `-TemplateSpecializationType 0x5607cb394880 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5607cb394760 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x5607cb394740 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5607cb394720 <col:24> 'unsigned long' 4
|       `-RecordType 0x5607cb394860 'char_array<4>'
|         `-ClassTemplateSpecialization 0x5607cb394780 'char_array'
|-TypedefDecl 0x5607cb3961c8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x5607cb396190 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x5607cb396170 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x5607cb396110 'type'
|     `-ElaboratedType 0x5607cb3960c0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x5607cb3949f0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x5607cb3948f0 'type'
|         `-TemplateSpecializationType 0x5607cb394880 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5607cb394760 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x5607cb394740 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5607cb394720 <col:24> 'unsigned long' 4
|           `-RecordType 0x5607cb394860 'char_array<4>'
|             `-ClassTemplateSpecialization 0x5607cb394780 'char_array'
|-CXXMethodDecl 0x5607cb396348 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x5607cb396258 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x5607cb3a0070 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5607cb3a0150 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x5607cb3a0418 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5607cb3a0320 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x5607cb3a0658 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5607cb3a04d0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5607cb3a0548 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5607cb3a0828 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5607cb3a0718 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5607cb3a0790 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5607cb3a0988 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5607cb3a0a58 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5607cb3a0ca8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5607cb3a0b18 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5607cb3a0b90 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5607cb3a0f08 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x5607cb3a0d78 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5607cb3a0df0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5607cb3a10c8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5607cb3a0fd8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5607cb3a1288 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5607cb3a1190 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5607cb3a1340 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5607cb3a13f0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5607cb3a1628 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5607cb3a14a0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5607cb3a1518 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5607cb3a18c8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5607cb3a17d0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x5607cb3a1990 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x5607cb3a19e0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5607cb3a1a30 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.2 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.2 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5607cb392cb8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5607cb392ec8 prev 0x5607cb392cb8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5607cb394220 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x5607cb3941d0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x5607cb3941b0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x5607cb394060 'type'
|     `-SubstTemplateTypeParmType 0x5607cb393e80 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x5607cb02b4e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5607cb02b488 'T'
|       `-RecordType 0x5607cb3939d0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x5607cb3938e8 'sized_array_memory'
|-FieldDecl 0x5607cb3a1a80 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x5607cb3a1ad0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5607cb3a1b08 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x5607cb392f60 'int' sugar
|   |-TemplateTypeParmType 0x5607cb0631d0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5607cb063178 'T'
|   `-BuiltinType 0x5607cad633b0 'int'
|-TypedefDecl 0x5607cb3a1b98 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x5607cb3a1b60 'int &'
|   `-SubstTemplateTypeParmType 0x5607cb392f60 'int' sugar
|     |-TemplateTypeParmType 0x5607cb0631d0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5607cb063178 'T'
|     `-BuiltinType 0x5607cad633b0 'int'
|-TypedefDecl 0x5607cb3a1c58 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x5607cb3a1c20 'const int &'
|   `-QualType 0x5607cb392f61 'const int' const
|     `-SubstTemplateTypeParmType 0x5607cb392f60 'int' sugar
|       |-TemplateTypeParmType 0x5607cb0631d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5607cb063178 'T'
|       `-BuiltinType 0x5607cad633b0 'int'
|-TypedefDecl 0x5607cb3a1ce8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x5607cb3a1cb0 'int *'
|   `-SubstTemplateTypeParmType 0x5607cb392f60 'int' sugar
|     |-TemplateTypeParmType 0x5607cb0631d0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5607cb063178 'T'
|     `-BuiltinType 0x5607cad633b0 'int'
|-TypedefDecl 0x5607cb3a1d78 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x5607cb3a1d40 'const int *'
|   `-QualType 0x5607cb392f61 'const int' const
|     `-SubstTemplateTypeParmType 0x5607cb392f60 'int' sugar
|       |-TemplateTypeParmType 0x5607cb0631d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5607cb063178 'T'
|       `-BuiltinType 0x5607cad633b0 'int'
|-TypedefDecl 0x5607cb3a2960 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x5607cb3a2910 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x5607cb3a28f0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x5607cb3a2880 'type'
|     `-SubstTemplateTypeParmType 0x5607cb3a2640 'int' sugar
|       |-TemplateTypeParmType 0x5607cb0362e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5607cb036290 'T'
|       `-BuiltinType 0x5607cad633b0 'int'
|-TypedefDecl 0x5607cb3a29c8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x5607cb3a1c20 'const int &'
|   `-QualType 0x5607cb392f61 'const int' const
|     `-SubstTemplateTypeParmType 0x5607cb392f60 'int' sugar
|       |-TemplateTypeParmType 0x5607cb0631d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5607cb063178 'T'
|       `-BuiltinType 0x5607cad633b0 'int'
|-TypedefDecl 0x5607cb3a2a20 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5607cad633b0 'int'
|-TypedefDecl 0x5607cb3a2a88 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x5607cb3a1cb0 'int *'
|   `-SubstTemplateTypeParmType 0x5607cb392f60 'int' sugar
|     |-TemplateTypeParmType 0x5607cb0631d0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5607cb063178 'T'
|     `-BuiltinType 0x5607cad633b0 'int'
|-TypedefDecl 0x5607cb3a2af0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x5607cb3a1d40 'const int *'
|   `-QualType 0x5607cb392f61 'const int' const
|     `-SubstTemplateTypeParmType 0x5607cb392f60 'int' sugar
|       |-TemplateTypeParmType 0x5607cb0631d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5607cb063178 'T'
|       `-BuiltinType 0x5607cad633b0 'int'
|-EnumDecl 0x5607cb3a2b48 <line:134:5> col:5
| `-EnumConstantDecl 0x5607cb3a2c40 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5607cb3a2c20 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5607cb064858 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5607cb064830 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5607cb064810 <col:40> 'int' 1
|-CXXConstructorDecl 0x5607cb3a2cc8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5607cb3a2f18 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5607cb3a2d80 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5607cb3a2e20 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x5607cb3a31d8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x5607cb3a30c0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x5607cb3a3498 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x5607cb3a3380 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x5607cb3a37e0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x5607cb3a36c0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x5607cb3a3af0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x5607cb3a39d0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x5607cb3a3de0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5607cb3a3c28 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5607cb3a3ca0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5607cb3a3f08 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5607cb3a3fe8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5607cb3a4040 <col:30> Inherited
|-CXXMethodDecl 0x5607cb3a4088 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5607cb3a4138 <col:20> Inherited
| `-OptimizeNoneAttr 0x5607cb3a4190 <col:30> Inherited
|-CXXMethodDecl 0x5607cb3a4258 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5607cb3a4308 <col:20> Inherited
| `-OptimizeNoneAttr 0x5607cb3a4360 <col:30> Inherited
|-CXXMethodDecl 0x5607cb3a43a8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5607cb3a4458 <col:20> Inherited
| `-OptimizeNoneAttr 0x5607cb3a44b0 <col:30> Inherited
|-CXXMethodDecl 0x5607cb3a44f8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5607cb3a45a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5607cb3a4600 <col:30> Inherited
|-CXXMethodDecl 0x5607cb3a4648 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5607cb3a46f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5607cb3a4750 <col:30> Inherited
|-CXXMethodDecl 0x5607cb3a4778 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5607cb3a4828 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5607cb3a48d8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5607cb3a4a98 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5607cb3a4988 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5607cb3a4a00 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5607cb3a4be8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5607cb3a4b58 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5607cb3a4d98 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x5607cb3a4ca0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5607cb3a4e50 <col:20>
| `-OptimizeNoneAttr 0x5607cb3a4ea8 <col:30>
|-CXXMethodDecl 0x5607cb3a4fc8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x5607cb3a4ed0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5607cb3a5080 <col:20>
| `-OptimizeNoneAttr 0x5607cb3a50d8 <col:30>
|-CXXMethodDecl 0x5607cb3a5190 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5607cb3a5100 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5607cb3a52d8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5607cb3a5248 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5607cb3a5408 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x5607cb3a5538 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x5607cb3a5608 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x5607cb3a56d8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x5607cb3a5818 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5607cb3a5788 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5607cb3a5960 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5607cb3a58d0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5607cb3a5aa8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x5607cb3a5a18 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5607cb3a5b60 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5607cb3a5c60 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5607cb3a5bd0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5607cb3a5d18 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5607cb3a5dd8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x5607cb3a5ed8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x5607cb3a6058 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5607cb3a5f98 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x5607cb3a6818 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5607cb3a6110 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x5607cb3a6778 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x5607cb3a6678 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x5607cb3a68f8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5607cb3a6a48 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5607cb3a69b8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5607cb3a6b00 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5607cb3a6d48 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5607cb3a6bc0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5607cb3a6c38 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5607cb3a6f08 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x5607cb3a6e18 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5607cb3a7158 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x5607cb3a6fd0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5607cb3a7048 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5607cb3a7218 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5607cb3a7478 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x5607cb3a7380 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x5607cb3a7548 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.1 = type { %class.vector_memory.2 }
  NonVirtualBaseLLVMType:%class.Vector.1 = type { %class.vector_memory.2 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607cb390e28 prev 0x5607cb3766c0 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5607cb390f20 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x5607cb391010 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x5607cb3b91c0 <col:16, line:828:9>
|-CXXDestructorDecl 0x5607cb391100 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x5607cb3b91d0 <col:25, line:830:9>
|-CXXMethodDecl 0x5607cb391200 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x5607cb3912b0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x5607cb391358 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5607cb391358
| `-ParmVarDecl 0x5607cb391468 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x5607cb391c28 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5607cb391c28
  `-ParmVarDecl 0x5607cb391d38 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607cb3764f8 prev 0x5607cb2e5018 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x5607cb376630 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x5607cb3766c0 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x5607cb376770 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x5607cb376878 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x5607cb3767a8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5607cb3a9c78 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5607cb3a9c58 <col:31> 'int' 0
|-CXXConstructorDecl 0x5607cb376b98 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x5607cb376a10 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x5607cb376a88 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5607cb3a9cb0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5607cb3a9c90 <col:59> 'int' 0
|-CXXConstructorDecl 0x5607cb376d70 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5607cb376c60 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x5607cb376cd8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5607cb3a9ce8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5607cb3a9cc8 <col:55> 'int' 0
|-CXXConstructorDecl 0x5607cb377128 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5607cb376f10 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x5607cb376f88 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x5607cb377000 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5607cb3a9d20 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5607cb3a9d00 <col:31> 'int' 0
|-CXXConstructorDecl 0x5607cb3772e8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x5607cb377228 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x5607cb3773e0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x5607cb377598 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x5607cb3774d0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x5607cb377688 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x5607cb3aa0d0 <col:24, line:291:5>
|   `-ReturnStmt 0x5607cb3aa0c0 <line:290:9, col:79>
|     `-BinaryOperator 0x5607cb3aa0a0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x5607cb3a9f78 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x5607cb3a9ed0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x5607cb3a9eb0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x5607cb3a9da8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x5607cb3a9d90 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x5607cb3a9d78 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x5607cb3a9d48 <col:18> 'Vector<String> *const' lvalue ->_conf 0x5607cb392c50
|       | |   |       `-CXXThisExpr 0x5607cb3a9d38 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x5607cb3a9e98 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x5607cb3a9e80 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x5607cb3a9e48 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x5607cb3a9e18 <col:28, col:35> '<bound member function type>' ->size 0x5607cb3621e8
|       | |           `-ImplicitCastExpr 0x5607cb3a9e68 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x5607cb3a9e00 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x5607cb3a9dd0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x5607cb392c50
|       | |                 `-CXXThisExpr 0x5607cb3a9dc0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x5607cb3a9f60 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x5607cb3a9f48 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x5607cb3a9f30 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x5607cb3a9f00 <col:47> 'Args::Slot *const' lvalue ->_slots 0x5607cb3a7690
|       |         `-CXXThisExpr 0x5607cb3a9ef0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x5607cb3aa080 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x5607cb3aa068 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5607cb3aa050 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5607cb3aa010 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5607cb3a9ff8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5607cb3a9fa8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5607cb3a7740
|         |     |   `-CXXThisExpr 0x5607cb3a9f98 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5607cb3a9fd8 <col:73> 'int' 0
|         `-IntegerLiteral 0x5607cb3aa030 <col:79> 'int' 0
|-CXXMethodDecl 0x5607cb377748 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x5607cb3aa2a8 <col:32, line:296:5>
|   `-ReturnStmt 0x5607cb3aa298 <line:295:9, col:49>
|     `-BinaryOperator 0x5607cb3aa278 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x5607cb3aa158 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x5607cb3aa140 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x5607cb3aa128 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x5607cb3aa0f8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x5607cb3a7690
|       |       `-CXXThisExpr 0x5607cb3aa0e8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x5607cb3aa258 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x5607cb3aa240 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5607cb3aa228 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5607cb3aa1e8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5607cb3aa1d0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5607cb3aa180 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5607cb3a7740
|         |     |   `-CXXThisExpr 0x5607cb3aa170 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5607cb3aa1b0 <col:43> 'int' 0
|         `-IntegerLiteral 0x5607cb3aa208 <col:49> 'int' 0
|-CXXMethodDecl 0x5607cb377838 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x5607cb3aa4b8 <col:19, line:306:5>
|   |-IfStmt 0x5607cb3aa3d8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x5607cb3aa318 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x5607cb3aa300 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x5607cb3aa2d0 <col:13> 'Vector<String> *' lvalue ->_conf 0x5607cb392c50
|   | |     `-CXXThisExpr 0x5607cb3aa2c0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x5607cb3aa3b8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x5607cb3aa388 <col:13, col:20> '<bound member function type>' ->clear 0x5607cb364be8
|   |     `-ImplicitCastExpr 0x5607cb3aa370 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x5607cb3aa340 <col:13> 'Vector<String> *' lvalue ->_conf 0x5607cb392c50
|   |         `-CXXThisExpr 0x5607cb3aa330 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x5607cb3aa460 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x5607cb3aa430 <col:9, col:16> '<bound member function type>' .clear 0x5607cb3a7218
|   |   `-MemberExpr 0x5607cb3aa400 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x5607cb3a7630
|   |     `-CXXThisExpr 0x5607cb3aa3f0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x5607cb3aa4a8 <line:305:9, col:17>
|     `-UnaryOperator 0x5607cb3aa490 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5607cb3aa480 <col:17> 'Args *' this
|-CXXMethodDecl 0x5607cb377ab8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x5607cb3779c0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x5607cb377c38 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x5607cb377b70 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x5607cb377fb8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x5607cb377ce0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x5607cb377f18 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x5607cb377d88 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x5607cb377e00 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x5607cb3aa7e8 <col:67, line:327:5>
|     |-WhileStmt 0x5607cb3aa798 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x5607cb3aa5b0 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x5607cb3aa520 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5607cb3038d8 0x5607cb2e49b0 0x5607cb284db8 0x5607cb0ce398 0x5607cb0ce070 0x5607cb0bf850 0x5607cb0bf500 0x5607cb0bedf0 0x5607cb091760 0x5607cb01dc20
|     | | |-DeclRefExpr 0x5607cb3aa4e0 <col:16> 'Iter' lvalue ParmVar 0x5607cb377d88 'begin' 'Iter'
|     | | `-DeclRefExpr 0x5607cb3aa500 <col:25> 'Iter' lvalue ParmVar 0x5607cb377e00 'end' 'Iter'
|     | `-CompoundStmt 0x5607cb3aa778 <col:30, line:325:9>
|     |   |-CallExpr 0x5607cb3aa718 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x5607cb3aa5f8 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x5607cb3aa6e8 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x5607cb3aa678 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5607cb289f38 0x5607cb289b58 0x5607cb289788 0x5607cb2893a8 0x5607cb288fc8 0x5607cb288bf8
|     |   |   `-DeclRefExpr 0x5607cb3aa658 <col:24> 'Iter' lvalue ParmVar 0x5607cb377d88 'begin' 'Iter'
|     |   `-UnaryOperator 0x5607cb3aa760 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x5607cb3aa740 <col:15> 'Iter' lvalue ParmVar 0x5607cb377d88 'begin' 'Iter'
|     `-ReturnStmt 0x5607cb3aa7d8 <line:326:9, col:17>
|       `-UnaryOperator 0x5607cb3aa7c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5607cb3aa7b0 <col:17> 'Args *' this
|-CXXMethodDecl 0x5607cb3780c0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x5607cb378030 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x5607cb378208 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x5607cb378178 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x5607cb3782d0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x5607cb3aa8c8 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x5607cb3aa868 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x5607cb3aa818 <col:9> '<bound member function type>' ->reset_from 0x5607cb3a7ab8
|   | | `-CXXThisExpr 0x5607cb3aa808 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x5607cb3aa848 <col:20> 'int' 0
|   `-ReturnStmt 0x5607cb3aa8b8 <line:352:9, col:17>
|     `-UnaryOperator 0x5607cb3aa8a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5607cb3aa890 <col:17> 'Args *' this
|-VarDecl 0x5607cb378388 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x5607cb3783f0 <col:38> 'int' 1
|-VarDecl 0x5607cb378480 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x5607cb3784e8 <col:39> 'int' 2
|-VarDecl 0x5607cb378578 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x5607cb3785e0 <col:39> 'int' 4
|-VarDecl 0x5607cb378670 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x5607cb3786d8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x5607cb378a58 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x5607cb378750 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5607cb3789b8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5607cb378800 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb3788a8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x5607cb3aaa20 <col:43, line:371:5>
|     `-ReturnStmt 0x5607cb3aaa10 <line:370:9, col:34>
|       `-CallExpr 0x5607cb3aa9d8 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5607cb3aa8f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5607cb3aa978 <col:21> 'const char *' lvalue ParmVar 0x5607cb378800 'keyword' 'const char *'
|         |-IntegerLiteral 0x5607cb3aa998 <col:30> 'int' 0
|         `-DeclRefExpr 0x5607cb3aa9b8 <col:33> 'T' lvalue ParmVar 0x5607cb3788a8 'x' 'T &'
|-FunctionTemplateDecl 0x5607cb378d88 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x5607cb378ac0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5607cb378ce8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5607cb378b70 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb378c18 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5607cb3aab70 <col:45, line:375:5>
|     `-ReturnStmt 0x5607cb3aab60 <line:374:9, col:42>
|       `-CallExpr 0x5607cb3aab28 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5607cb3aaa48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5607cb3aaac8 <col:21> 'const char *' lvalue ParmVar 0x5607cb378b70 'keyword' 'const char *'
|         |-DeclRefExpr 0x5607cb3aaae8 <col:30> 'const int' lvalue Var 0x5607cb378388 'mandatory' 'const int'
|         `-DeclRefExpr 0x5607cb3aab08 <col:41> 'T' lvalue ParmVar 0x5607cb378c18 'x' 'T &'
|-FunctionTemplateDecl 0x5607cb3790b8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x5607cb378df0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5607cb379018 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5607cb378ea0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb378f48 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5607cb3aacc0 <col:45, line:379:5>
|     `-ReturnStmt 0x5607cb3aacb0 <line:378:9, col:43>
|       `-CallExpr 0x5607cb3aac78 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5607cb3aab98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5607cb3aac18 <col:21> 'const char *' lvalue ParmVar 0x5607cb378ea0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5607cb3aac38 <col:30> 'const int' lvalue Var 0x5607cb378480 'positional' 'const int'
|         `-DeclRefExpr 0x5607cb3aac58 <col:42> 'T' lvalue ParmVar 0x5607cb378f48 'x' 'T &'
|-FunctionTemplateDecl 0x5607cb3793e8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x5607cb379120 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x5607cb379348 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x5607cb3791d0 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5607cb379278 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x5607cb3aaec0 <col:46, line:383:5>
| |   `-ReturnStmt 0x5607cb3aaeb0 <line:382:9, col:55>
| |     `-CallExpr 0x5607cb3aae78 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5607cb3aace8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5607cb3aad68 <col:21> 'const char *' lvalue ParmVar 0x5607cb3791d0 'keyword' 'const char *'
| |       |-BinaryOperator 0x5607cb3aae38 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x5607cb3aade8 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x5607cb3aadc8 <col:30> 'const int' lvalue Var 0x5607cb378388 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x5607cb3aae20 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5607cb3aae00 <col:42> 'const int' lvalue Var 0x5607cb378480 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x5607cb3aae58 <col:54> 'T' lvalue ParmVar 0x5607cb379278 'x' 'T &'
| |-CXXMethodDecl 0x5607cb4262e8 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, IP6Address &)'
| | |-TemplateArgument type 'IP6Address'
| | |-ParmVarDecl 0x5607cb426100 <col:19, col:31> col:31 keyword 'const char *'
| | `-ParmVarDecl 0x5607cb4261d8 <col:40, col:43> col:43 x 'IP6Address &'
| `-CXXMethodDecl 0x5607cb426768 <col:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, EtherAddress &)'
|   |-TemplateArgument type 'EtherAddress'
|   |-ParmVarDecl 0x5607cb426580 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x5607cb426658 <col:40, col:43> col:43 x 'EtherAddress &'
|-FunctionTemplateDecl 0x5607cb3797e8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x5607cb379450 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5607cb379748 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x5607cb379500 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb379580 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5607cb379628 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x5607cb3ab000 <col:54, line:388:5>
|     |-CallExpr 0x5607cb3aaf88 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5607cb3aaed8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5607cb3aaf18 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5607cb3aaf28 <col:30> 'const char *' lvalue ParmVar 0x5607cb379500 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5607cb3aaf48 <col:39> 'int' lvalue ParmVar 0x5607cb379580 'flags' 'int'
|     | `-DeclRefExpr 0x5607cb3aaf68 <col:46> 'T' lvalue ParmVar 0x5607cb379628 'x' 'T &'
|     `-ReturnStmt 0x5607cb3aaff0 <line:387:9, col:17>
|       `-UnaryOperator 0x5607cb3aafd8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5607cb3aafc8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5607cb379c98 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x5607cb379858 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5607cb3798d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5607cb379bf8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5607cb379998 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb379a38 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x5607cb379ad8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x5607cb3ab170 <col:74, line:403:5>
|     `-ReturnStmt 0x5607cb3ab160 <line:402:9, col:56>
|       `-CallExpr 0x5607cb3ab120 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5607cb3ab030 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5607cb3ab0a0 <col:28> 'const char *' lvalue ParmVar 0x5607cb379998 'keyword' 'const char *'
|         |-IntegerLiteral 0x5607cb3ab0c0 <col:37> 'int' 0
|         |-DeclRefExpr 0x5607cb3ab0e0 <col:40> 'T' lvalue ParmVar 0x5607cb379a38 'x' 'T &'
|         `-DeclRefExpr 0x5607cb3ab100 <col:43> 'const V' lvalue ParmVar 0x5607cb379ad8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5607cb37a108 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5607cb379d08 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5607cb379d88 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5607cb37a068 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5607cb379e48 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb379ee8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x5607cb379f88 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x5607cb3ab2d8 <col:76, line:407:5>
|     `-ReturnStmt 0x5607cb3ab2c8 <line:406:9, col:65>
|       `-CallExpr 0x5607cb3ab288 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5607cb3ab198 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5607cb3ab208 <col:28> 'const char *' lvalue ParmVar 0x5607cb379e48 'keyword' 'const char *'
|         |-DeclRefExpr 0x5607cb3ab228 <col:37> 'const int' lvalue Var 0x5607cb378480 'positional' 'const int'
|         |-DeclRefExpr 0x5607cb3ab248 <col:49> 'T' lvalue ParmVar 0x5607cb379ee8 'x' 'T &'
|         `-DeclRefExpr 0x5607cb3ab268 <col:52> 'const V' lvalue ParmVar 0x5607cb379f88 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5607cb37a658 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x5607cb37a178 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5607cb37a1f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5607cb37a5b8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5607cb37a2b8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb37a338 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5607cb37a3d8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x5607cb37a478 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x5607cb3ab440 <col:85, line:412:5>
|     |-CallExpr 0x5607cb3ab3c0 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5607cb3ab2f0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5607cb3ab330 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5607cb3ab340 <col:37> 'const char *' lvalue ParmVar 0x5607cb37a2b8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5607cb3ab360 <col:46> 'int' lvalue ParmVar 0x5607cb37a338 'flags' 'int'
|     | |-DeclRefExpr 0x5607cb3ab380 <col:53> 'T' lvalue ParmVar 0x5607cb37a3d8 'x' 'T &'
|     | `-DeclRefExpr 0x5607cb3ab3a0 <col:56> 'const V' lvalue ParmVar 0x5607cb37a478 'default_value' 'const V &'
|     `-ReturnStmt 0x5607cb3ab430 <line:411:9, col:17>
|       `-UnaryOperator 0x5607cb3ab418 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5607cb3ab408 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5607cb37aae8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x5607cb37a6d0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5607cb37a748 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5607cb37aa48 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5607cb37a808 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb37a880 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5607cb37a928 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x5607cb3ab5c0 <col:53, line:425:5>
|     `-ReturnStmt 0x5607cb3ab5b0 <line:424:9, col:42>
|       `-CallExpr 0x5607cb3ab570 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5607cb3ab470 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5607cb3ab4f0 <col:21> 'const char *' lvalue ParmVar 0x5607cb37a808 'keyword' 'const char *'
|         |-IntegerLiteral 0x5607cb3ab510 <col:30> 'int' 0
|         |-DeclRefExpr 0x5607cb3ab530 <col:33> 'P' lvalue ParmVar 0x5607cb37a880 'parser' 'P'
|         `-DeclRefExpr 0x5607cb3ab550 <col:41> 'T' lvalue ParmVar 0x5607cb37a928 'x' 'T &'
|-FunctionTemplateDecl 0x5607cb37af38 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x5607cb37ab58 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5607cb37abd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5607cb37ae98 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5607cb37ac98 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb37ad10 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5607cb37adb8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5607cb3ab738 <col:55, line:429:5>
|     `-ReturnStmt 0x5607cb3ab728 <line:428:9, col:50>
|       `-CallExpr 0x5607cb3ab6e8 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5607cb3ab5e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5607cb3ab668 <col:21> 'const char *' lvalue ParmVar 0x5607cb37ac98 'keyword' 'const char *'
|         |-DeclRefExpr 0x5607cb3ab688 <col:30> 'const int' lvalue Var 0x5607cb378388 'mandatory' 'const int'
|         |-DeclRefExpr 0x5607cb3ab6a8 <col:41> 'P' lvalue ParmVar 0x5607cb37ad10 'parser' 'P'
|         `-DeclRefExpr 0x5607cb3ab6c8 <col:49> 'T' lvalue ParmVar 0x5607cb37adb8 'x' 'T &'
|-FunctionTemplateDecl 0x5607cb37b388 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x5607cb37afa8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5607cb37b028 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5607cb37b2e8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5607cb37b0e8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb37b160 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5607cb37b208 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5607cb3ab8b0 <col:55, line:433:5>
|     `-ReturnStmt 0x5607cb3ab8a0 <line:432:9, col:51>
|       `-CallExpr 0x5607cb3ab860 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5607cb3ab760 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5607cb3ab7e0 <col:21> 'const char *' lvalue ParmVar 0x5607cb37b0e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5607cb3ab800 <col:30> 'const int' lvalue Var 0x5607cb378480 'positional' 'const int'
|         |-DeclRefExpr 0x5607cb3ab820 <col:42> 'P' lvalue ParmVar 0x5607cb37b160 'parser' 'P'
|         `-DeclRefExpr 0x5607cb3ab840 <col:50> 'T' lvalue ParmVar 0x5607cb37b208 'x' 'T &'
|-FunctionTemplateDecl 0x5607cb37b7d8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x5607cb37b3f8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5607cb37b478 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5607cb37b738 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5607cb37b538 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb37b5b0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5607cb37b658 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x5607cb3abad8 <col:56, line:437:5>
|     `-ReturnStmt 0x5607cb3abac8 <line:436:9, col:63>
|       `-CallExpr 0x5607cb3aba88 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5607cb3ab8d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5607cb3ab958 <col:21> 'const char *' lvalue ParmVar 0x5607cb37b538 'keyword' 'const char *'
|         |-BinaryOperator 0x5607cb3aba28 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5607cb3ab9d8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5607cb3ab9b8 <col:30> 'const int' lvalue Var 0x5607cb378388 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5607cb3aba10 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5607cb3ab9f0 <col:42> 'const int' lvalue Var 0x5607cb378480 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5607cb3aba48 <col:54> 'P' lvalue ParmVar 0x5607cb37b5b0 'parser' 'P'
|         `-DeclRefExpr 0x5607cb3aba68 <col:62> 'T' lvalue ParmVar 0x5607cb37b658 'x' 'T &'
|-FunctionTemplateDecl 0x5607cb37bd08 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x5607cb37b848 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5607cb37b8c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5607cb37bc68 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5607cb37b988 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb37ba08 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5607cb37ba80 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5607cb37bb28 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x5607cb3abc40 <col:64, line:442:5>
|     |-CallExpr 0x5607cb3abbc0 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5607cb3abaf0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5607cb3abb30 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5607cb3abb40 <col:30> 'const char *' lvalue ParmVar 0x5607cb37b988 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5607cb3abb60 <col:39> 'int' lvalue ParmVar 0x5607cb37ba08 'flags' 'int'
|     | |-DeclRefExpr 0x5607cb3abb80 <col:46> 'P' lvalue ParmVar 0x5607cb37ba80 'parser' 'P'
|     | `-DeclRefExpr 0x5607cb3abba0 <col:54> 'T' lvalue ParmVar 0x5607cb37bb28 'x' 'T &'
|     `-ReturnStmt 0x5607cb3abc30 <line:441:9, col:17>
|       `-UnaryOperator 0x5607cb3abc18 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5607cb3abc08 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5607cb37c308 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x5607cb37bd80 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5607cb37bdf8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5607cb37be78 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5607cb37c268 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5607cb37bf40 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb37bfb8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5607cb37c058 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x5607cb37c128 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x5607cb3abdd8 <col:84, line:458:5>
|     `-ReturnStmt 0x5607cb3abdc8 <line:457:9, col:64>
|       `-CallExpr 0x5607cb3abd80 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5607cb3abc70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5607cb3abce0 <col:28> 'const char *' lvalue ParmVar 0x5607cb37bf40 'keyword' 'const char *'
|         |-IntegerLiteral 0x5607cb3abd00 <col:37> 'int' 0
|         |-DeclRefExpr 0x5607cb3abd20 <col:40> 'P' lvalue ParmVar 0x5607cb37bfb8 'parser' 'P'
|         |-DeclRefExpr 0x5607cb3abd40 <col:48> 'T' lvalue ParmVar 0x5607cb37c058 'x' 'T &'
|         `-DeclRefExpr 0x5607cb3abd60 <col:51> 'const V' lvalue ParmVar 0x5607cb37c128 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5607cb37c888 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5607cb37c380 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5607cb37c3f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5607cb37c478 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5607cb37c7e8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5607cb37c540 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb37c5b8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5607cb37c658 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x5607cb37c6f8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x5607cb3abf68 <col:86, line:462:5>
|     `-ReturnStmt 0x5607cb3abf58 <line:461:9, col:73>
|       `-CallExpr 0x5607cb3abf10 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5607cb3abe00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5607cb3abe70 <col:28> 'const char *' lvalue ParmVar 0x5607cb37c540 'keyword' 'const char *'
|         |-DeclRefExpr 0x5607cb3abe90 <col:37> 'const int' lvalue Var 0x5607cb378480 'positional' 'const int'
|         |-DeclRefExpr 0x5607cb3abeb0 <col:49> 'P' lvalue ParmVar 0x5607cb37c5b8 'parser' 'P'
|         |-DeclRefExpr 0x5607cb3abed0 <col:57> 'T' lvalue ParmVar 0x5607cb37c658 'x' 'T &'
|         `-DeclRefExpr 0x5607cb3abef0 <col:60> 'const V' lvalue ParmVar 0x5607cb37c6f8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5607cb380440 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x5607cb37c900 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5607cb37c978 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5607cb37c9f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5607cb37ce48 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5607cb37cac0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb37cb40 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5607cb37cbb8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x5607cb37cc58 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x5607cb37ccf8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x5607cb3ac0f8 <col:95, line:467:5>
|     |-CallExpr 0x5607cb3ac070 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5607cb3abf80 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5607cb3abfc0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5607cb3abfd0 <col:37> 'const char *' lvalue ParmVar 0x5607cb37cac0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5607cb3abff0 <col:46> 'int' lvalue ParmVar 0x5607cb37cb40 'flags' 'int'
|     | |-DeclRefExpr 0x5607cb3ac010 <col:53> 'P' lvalue ParmVar 0x5607cb37cbb8 'parser' 'P'
|     | |-DeclRefExpr 0x5607cb3ac030 <col:61> 'T' lvalue ParmVar 0x5607cb37cc58 'x' 'T &'
|     | `-DeclRefExpr 0x5607cb3ac050 <col:64> 'const V' lvalue ParmVar 0x5607cb37ccf8 'default_value' 'const V &'
|     `-ReturnStmt 0x5607cb3ac0e8 <line:466:9, col:17>
|       `-UnaryOperator 0x5607cb3ac0d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5607cb3ac0c0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5607cb380a18 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x5607cb3804c0 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5607cb380538 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5607cb3805b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5607cb380978 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5607cb380680 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb3806f8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5607cb380798 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5607cb380838 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x5607cb3ac2a0 <col:63, line:481:5>
|     `-ReturnStmt 0x5607cb3ac290 <line:480:9, col:47>
|       `-CallExpr 0x5607cb3ac248 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5607cb3ac128 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5607cb3ac1a8 <col:21> 'const char *' lvalue ParmVar 0x5607cb380680 'keyword' 'const char *'
|         |-IntegerLiteral 0x5607cb3ac1c8 <col:30> 'int' 0
|         |-DeclRefExpr 0x5607cb3ac1e8 <col:33> 'P' lvalue ParmVar 0x5607cb3806f8 'parser' 'P'
|         |-DeclRefExpr 0x5607cb3ac208 <col:41> 'T1' lvalue ParmVar 0x5607cb380798 'x1' 'T1 &'
|         `-DeclRefExpr 0x5607cb3ac228 <col:45> 'T2' lvalue ParmVar 0x5607cb380838 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5607cb380f98 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x5607cb380a90 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5607cb380b08 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5607cb380b88 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5607cb380ef8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5607cb380c50 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb380cc8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5607cb380d68 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5607cb380e08 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5607cb3ac440 <col:65, line:485:5>
|     `-ReturnStmt 0x5607cb3ac430 <line:484:9, col:55>
|       `-CallExpr 0x5607cb3ac3e8 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5607cb3ac2c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5607cb3ac348 <col:21> 'const char *' lvalue ParmVar 0x5607cb380c50 'keyword' 'const char *'
|         |-DeclRefExpr 0x5607cb3ac368 <col:30> 'const int' lvalue Var 0x5607cb378388 'mandatory' 'const int'
|         |-DeclRefExpr 0x5607cb3ac388 <col:41> 'P' lvalue ParmVar 0x5607cb380cc8 'parser' 'P'
|         |-DeclRefExpr 0x5607cb3ac3a8 <col:49> 'T1' lvalue ParmVar 0x5607cb380d68 'x1' 'T1 &'
|         `-DeclRefExpr 0x5607cb3ac3c8 <col:53> 'T2' lvalue ParmVar 0x5607cb380e08 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5607cb381518 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x5607cb381010 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5607cb381088 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5607cb381108 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5607cb381478 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5607cb3811d0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb381248 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5607cb3812e8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5607cb381388 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5607cb3ac5e0 <col:65, line:489:5>
|     `-ReturnStmt 0x5607cb3ac5d0 <line:488:9, col:56>
|       `-CallExpr 0x5607cb3ac588 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5607cb3ac468 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5607cb3ac4e8 <col:21> 'const char *' lvalue ParmVar 0x5607cb3811d0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5607cb3ac508 <col:30> 'const int' lvalue Var 0x5607cb378480 'positional' 'const int'
|         |-DeclRefExpr 0x5607cb3ac528 <col:42> 'P' lvalue ParmVar 0x5607cb381248 'parser' 'P'
|         |-DeclRefExpr 0x5607cb3ac548 <col:50> 'T1' lvalue ParmVar 0x5607cb3812e8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5607cb3ac568 <col:54> 'T2' lvalue ParmVar 0x5607cb381388 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5607cb381a98 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x5607cb381590 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5607cb381608 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5607cb381688 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5607cb3819f8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5607cb381750 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb3817c8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5607cb381868 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5607cb381908 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x5607cb3ac830 <col:66, line:493:5>
|     `-ReturnStmt 0x5607cb3ac820 <line:492:9, col:68>
|       `-CallExpr 0x5607cb3ac7d8 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5607cb3ac608 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5607cb3ac688 <col:21> 'const char *' lvalue ParmVar 0x5607cb381750 'keyword' 'const char *'
|         |-BinaryOperator 0x5607cb3ac758 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5607cb3ac708 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5607cb3ac6e8 <col:30> 'const int' lvalue Var 0x5607cb378388 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5607cb3ac740 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5607cb3ac720 <col:42> 'const int' lvalue Var 0x5607cb378480 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5607cb3ac778 <col:54> 'P' lvalue ParmVar 0x5607cb3817c8 'parser' 'P'
|         |-DeclRefExpr 0x5607cb3ac798 <col:62> 'T1' lvalue ParmVar 0x5607cb381868 'x1' 'T1 &'
|         `-DeclRefExpr 0x5607cb3ac7b8 <col:66> 'T2' lvalue ParmVar 0x5607cb381908 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5607cb3820f8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x5607cb381b10 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5607cb381b88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5607cb381c08 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5607cb382058 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5607cb381cd0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb381d50 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5607cb381dc8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5607cb381e68 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5607cb381f08 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x5607cb3ac9c0 <col:74, line:498:5>
|     |-CallExpr 0x5607cb3ac938 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5607cb3ac848 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5607cb3ac888 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5607cb3ac898 <col:30> 'const char *' lvalue ParmVar 0x5607cb381cd0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5607cb3ac8b8 <col:39> 'int' lvalue ParmVar 0x5607cb381d50 'flags' 'int'
|     | |-DeclRefExpr 0x5607cb3ac8d8 <col:46> 'P' lvalue ParmVar 0x5607cb381dc8 'parser' 'P'
|     | |-DeclRefExpr 0x5607cb3ac8f8 <col:54> 'T1' lvalue ParmVar 0x5607cb381e68 'x1' 'T1 &'
|     | `-DeclRefExpr 0x5607cb3ac918 <col:58> 'T2' lvalue ParmVar 0x5607cb381f08 'x2' 'T2 &'
|     `-ReturnStmt 0x5607cb3ac9b0 <line:497:9, col:17>
|       `-UnaryOperator 0x5607cb3ac998 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5607cb3ac988 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5607cb382458 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x5607cb382178 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5607cb3823b8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5607cb382230 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb3822a8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x5607cb3acb08 <col:52, line:509:5>
|     `-ReturnStmt 0x5607cb3acaf8 <line:508:9, col:44>
|       `-CallExpr 0x5607cb3acac0 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5607cb3ac9f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5607cb3aca60 <col:26> 'const char *' lvalue ParmVar 0x5607cb382230 'keyword' 'const char *'
|         |-IntegerLiteral 0x5607cb3aca80 <col:35> 'int' 0
|         `-DeclRefExpr 0x5607cb3acaa0 <col:38> 'P' lvalue ParmVar 0x5607cb3822a8 'parser' 'P'
|-FunctionTemplateDecl 0x5607cb382758 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x5607cb3824c0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5607cb3826b8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5607cb382570 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb3825e8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5607cb3acc48 <col:54, line:513:5>
|     `-ReturnStmt 0x5607cb3acc38 <line:512:9, col:52>
|       `-CallExpr 0x5607cb3acc00 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5607cb3acb30 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5607cb3acba0 <col:26> 'const char *' lvalue ParmVar 0x5607cb382570 'keyword' 'const char *'
|         |-DeclRefExpr 0x5607cb3acbc0 <col:35> 'const int' lvalue Var 0x5607cb378388 'mandatory' 'const int'
|         `-DeclRefExpr 0x5607cb3acbe0 <col:46> 'P' lvalue ParmVar 0x5607cb3825e8 'parser' 'P'
|-FunctionTemplateDecl 0x5607cb382a58 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x5607cb3827c0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5607cb3829b8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5607cb382870 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb3828e8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5607cb3acd88 <col:54, line:517:5>
|     `-ReturnStmt 0x5607cb3acd78 <line:516:9, col:53>
|       `-CallExpr 0x5607cb3acd40 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5607cb3acc70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5607cb3acce0 <col:26> 'const char *' lvalue ParmVar 0x5607cb382870 'keyword' 'const char *'
|         |-DeclRefExpr 0x5607cb3acd00 <col:35> 'const int' lvalue Var 0x5607cb378480 'positional' 'const int'
|         `-DeclRefExpr 0x5607cb3acd20 <col:47> 'P' lvalue ParmVar 0x5607cb3828e8 'parser' 'P'
|-FunctionTemplateDecl 0x5607cb382d58 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x5607cb382ac0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5607cb382cb8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5607cb382b70 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb382be8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x5607cb3acf78 <col:55, line:521:5>
|     `-ReturnStmt 0x5607cb3acf68 <line:520:9, col:65>
|       `-CallExpr 0x5607cb3acf30 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5607cb3acdb0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5607cb3ace20 <col:26> 'const char *' lvalue ParmVar 0x5607cb382b70 'keyword' 'const char *'
|         |-BinaryOperator 0x5607cb3acef0 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x5607cb3acea0 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5607cb3ace80 <col:35> 'const int' lvalue Var 0x5607cb378388 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5607cb3aced8 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5607cb3aceb8 <col:47> 'const int' lvalue Var 0x5607cb378480 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5607cb3acf10 <col:59> 'P' lvalue ParmVar 0x5607cb382be8 'parser' 'P'
|-FunctionTemplateDecl 0x5607cb383128 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x5607cb382dc0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5607cb383088 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5607cb382e70 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb382ef0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5607cb382f68 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x5607cb3ad0b8 <col:63, line:526:5>
|     |-CallExpr 0x5607cb3ad040 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5607cb3acf90 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x5607cb3acfd0 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x5607cb3acfe0 <col:35> 'const char *' lvalue ParmVar 0x5607cb382e70 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5607cb3ad000 <col:44> 'int' lvalue ParmVar 0x5607cb382ef0 'flags' 'int'
|     | `-DeclRefExpr 0x5607cb3ad020 <col:51> 'P' lvalue ParmVar 0x5607cb382f68 'parser' 'P'
|     `-ReturnStmt 0x5607cb3ad0a8 <line:525:9, col:17>
|       `-UnaryOperator 0x5607cb3ad090 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5607cb3ad080 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5607cb383578 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x5607cb383198 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5607cb383218 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5607cb3834d8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5607cb3832d8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb383350 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x5607cb3833f8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x5607cb3ad210 <col:58, line:541:5>
|     `-ReturnStmt 0x5607cb3ad200 <line:540:9, col:39>
|       `-CallExpr 0x5607cb3ad1c8 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5607cb3ad0e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5607cb3ad168 <col:21> 'const char *' lvalue ParmVar 0x5607cb3832d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5607cb3ad188 <col:30> 'P' lvalue ParmVar 0x5607cb383350 'parser' 'P'
|         `-DeclRefExpr 0x5607cb3ad1a8 <col:38> 'T' lvalue ParmVar 0x5607cb3833f8 'x' 'T &'
|-FunctionTemplateDecl 0x5607cb3839c8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x5607cb3835e8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5607cb383668 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5607cb383928 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5607cb383728 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb3837a0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5607cb383848 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5607cb3ad348 <col:60, line:545:5>
|     `-ReturnStmt 0x5607cb3ad338 <line:544:9, col:41>
|       `-CallExpr 0x5607cb3ad300 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5607cb3ad238 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5607cb3ad2a0 <col:23> 'const char *' lvalue ParmVar 0x5607cb383728 'keyword' 'const char *'
|         |-DeclRefExpr 0x5607cb3ad2c0 <col:32> 'P' lvalue ParmVar 0x5607cb3837a0 'parser' 'P'
|         `-DeclRefExpr 0x5607cb3ad2e0 <col:40> 'T' lvalue ParmVar 0x5607cb383848 'x' 'T &'
|-FunctionTemplateDecl 0x5607cb383e18 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x5607cb383a38 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5607cb383ab8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5607cb383d78 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5607cb383b78 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb383bf0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5607cb383c98 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5607cb3ad480 <col:60, line:549:5>
|     `-ReturnStmt 0x5607cb3ad470 <line:548:9, col:41>
|       `-CallExpr 0x5607cb3ad438 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5607cb3ad370 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5607cb3ad3d8 <col:23> 'const char *' lvalue ParmVar 0x5607cb383b78 'keyword' 'const char *'
|         |-DeclRefExpr 0x5607cb3ad3f8 <col:32> 'P' lvalue ParmVar 0x5607cb383bf0 'parser' 'P'
|         `-DeclRefExpr 0x5607cb3ad418 <col:40> 'T' lvalue ParmVar 0x5607cb383c98 'x' 'T &'
|-FunctionTemplateDecl 0x5607cb384268 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x5607cb383e88 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5607cb383f08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5607cb3841c8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5607cb383fc8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb384040 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x5607cb3840e8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x5607cb3ad5b8 <col:61, line:553:5>
|     `-ReturnStmt 0x5607cb3ad5a8 <line:552:9, col:42>
|       `-CallExpr 0x5607cb3ad570 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5607cb3ad4a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5607cb3ad510 <col:24> 'const char *' lvalue ParmVar 0x5607cb383fc8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5607cb3ad530 <col:33> 'P' lvalue ParmVar 0x5607cb384040 'parser' 'P'
|         `-DeclRefExpr 0x5607cb3ad550 <col:41> 'T' lvalue ParmVar 0x5607cb3840e8 'x' 'T &'
|-FunctionTemplateDecl 0x5607cb384748 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x5607cb3842d8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5607cb384358 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5607cb3846a8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5607cb384418 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb384498 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5607cb384510 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x5607cb3845b8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x5607cb3ad730 <col:69, line:557:5>
|     `-ReturnStmt 0x5607cb3ad720 <line:556:9, col:46>
|       `-CallExpr 0x5607cb3ad6e0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5607cb3ad5e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5607cb3ad660 <col:21> 'const char *' lvalue ParmVar 0x5607cb384418 'keyword' 'const char *'
|         |-DeclRefExpr 0x5607cb3ad680 <col:30> 'int' lvalue ParmVar 0x5607cb384498 'flags' 'int'
|         |-DeclRefExpr 0x5607cb3ad6a0 <col:37> 'P' lvalue ParmVar 0x5607cb384510 'parser' 'P'
|         `-DeclRefExpr 0x5607cb3ad6c0 <col:45> 'T' lvalue ParmVar 0x5607cb3845b8 'x' 'T &'
|-FunctionTemplateDecl 0x5607cb384a58 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x5607cb3847c0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5607cb3849b8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5607cb384870 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb3848e8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x5607cb3ad870 <col:56, line:571:5>
|     `-ReturnStmt 0x5607cb3ad860 <line:570:9, col:48>
|       `-CallExpr 0x5607cb3ad828 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5607cb3ad758 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5607cb3ad7c8 <col:30> 'const char *' lvalue ParmVar 0x5607cb384870 'keyword' 'const char *'
|         |-IntegerLiteral 0x5607cb3ad7e8 <col:39> 'int' 0
|         `-DeclRefExpr 0x5607cb3ad808 <col:42> 'P' lvalue ParmVar 0x5607cb3848e8 'parser' 'P'
|-FunctionTemplateDecl 0x5607cb384de8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x5607cb384ac0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5607cb384d48 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5607cb384b70 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb384bf0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5607cb384c68 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5607cb3ada40 <col:67, line:576:5>
|     |-CallExpr 0x5607cb3ad9c8 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5607cb3ad888 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5607cb3ad8c8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5607cb3ad8d8 <col:39> 'const char *' lvalue ParmVar 0x5607cb384b70 'keyword' 'const char *'
|     | |-BinaryOperator 0x5607cb3ad988 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5607cb3ad938 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5607cb3ad8f8 <col:48> 'int' lvalue ParmVar 0x5607cb384bf0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5607cb3ad970 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5607cb3ad950 <col:56> 'const int' lvalue Var 0x5607cb378670 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x5607cb3ad9a8 <col:68> 'P' lvalue ParmVar 0x5607cb384c68 'parser' 'P'
|     `-ReturnStmt 0x5607cb3ada30 <line:575:9, col:17>
|       `-UnaryOperator 0x5607cb3ada18 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5607cb3ada08 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5607cb385238 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x5607cb384e58 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5607cb384ed8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5607cb385198 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5607cb384f98 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb385010 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5607cb3850b8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x5607cb3adbb0 <col:62, line:592:5>
|     `-ReturnStmt 0x5607cb3adba0 <line:591:9, col:51>
|       `-CallExpr 0x5607cb3adb60 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5607cb3ada70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5607cb3adae0 <col:30> 'const char *' lvalue ParmVar 0x5607cb384f98 'keyword' 'const char *'
|         |-IntegerLiteral 0x5607cb3adb00 <col:39> 'int' 0
|         |-DeclRefExpr 0x5607cb3adb20 <col:42> 'P' lvalue ParmVar 0x5607cb385010 'parser' 'P'
|         `-DeclRefExpr 0x5607cb3adb40 <col:50> 'T' lvalue ParmVar 0x5607cb3850b8 'x' 'T &'
|-FunctionTemplateDecl 0x5607cb385718 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x5607cb3852a8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5607cb385328 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5607cb385678 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5607cb3853e8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb385468 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5607cb3854e0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x5607cb385588 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x5607cb3adda8 <col:73, line:597:5>
|     |-CallExpr 0x5607cb3add28 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5607cb3adbc8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5607cb3adc08 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5607cb3adc18 <col:39> 'const char *' lvalue ParmVar 0x5607cb3853e8 'keyword' 'const char *'
|     | |-BinaryOperator 0x5607cb3adcc8 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5607cb3adc78 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5607cb3adc38 <col:48> 'int' lvalue ParmVar 0x5607cb385468 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5607cb3adcb0 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5607cb3adc90 <col:56> 'const int' lvalue Var 0x5607cb378670 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5607cb3adce8 <col:68> 'P' lvalue ParmVar 0x5607cb3854e0 'parser' 'P'
|     | `-DeclRefExpr 0x5607cb3add08 <col:76> 'T' lvalue ParmVar 0x5607cb385588 'x' 'T &'
|     `-ReturnStmt 0x5607cb3add98 <line:596:9, col:17>
|       `-UnaryOperator 0x5607cb3add80 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5607cb3add70 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5607cb385cc8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x5607cb385790 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5607cb385808 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5607cb385c28 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x5607cb3858c8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb385940 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x5607cb385b00 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5607cb3adf18 <col:65, line:614:5>
|     `-ReturnStmt 0x5607cb3adf08 <line:613:9, col:46>
|       `-CallExpr 0x5607cb3adec8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5607cb3addd8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5607cb3ade48 <col:25> 'const char *' lvalue ParmVar 0x5607cb3858c8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5607cb3ade68 <col:34> 'int' 0
|         |-DeclRefExpr 0x5607cb3ade88 <col:37> 'P' lvalue ParmVar 0x5607cb385940 'parser' 'P'
|         `-DeclRefExpr 0x5607cb3adea8 <col:45> 'Vector<T>' lvalue ParmVar 0x5607cb385b00 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5607cb3860f8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x5607cb385d38 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5607cb386058 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x5607cb385df0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb385f40 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5607cb3ae130 <col:55, line:618:5>
|     `-ReturnStmt 0x5607cb3ae120 <line:617:9, col:55>
|       `-CallExpr 0x5607cb3ae0e0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5607cb3adf40 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5607cb3adfb0 <col:25> 'const char *' lvalue ParmVar 0x5607cb385df0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5607cb3adfd0 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x5607cb3ae0a0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5607cb3ae0c0 <col:54> 'Vector<T>' lvalue ParmVar 0x5607cb385f40 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5607cb3866c8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x5607cb386160 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5607cb3861d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5607cb386628 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5607cb386298 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb386318 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5607cb386390 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5607cb3864e0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5607cb3ae328 <col:76, line:623:5>
|     |-CallExpr 0x5607cb3ae2a8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5607cb3ae148 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x5607cb3ae188 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x5607cb3ae198 <col:34> 'const char *' lvalue ParmVar 0x5607cb386298 'keyword' 'const char *'
|     | |-BinaryOperator 0x5607cb3ae248 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x5607cb3ae1f8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5607cb3ae1b8 <col:43> 'int' lvalue ParmVar 0x5607cb386318 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5607cb3ae230 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5607cb3ae210 <col:51> 'const int' lvalue Var 0x5607cb378670 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5607cb3ae268 <col:63> 'P' lvalue ParmVar 0x5607cb386390 'parser' 'P'
|     | `-DeclRefExpr 0x5607cb3ae288 <col:71> 'Vector<T>' lvalue ParmVar 0x5607cb3864e0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x5607cb3ae318 <line:622:9, col:17>
|       `-UnaryOperator 0x5607cb3ae300 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5607cb3ae2f0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5607cb386c08 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x5607cb386740 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5607cb3867b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5607cb386b68 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x5607cb386878 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb3868f8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5607cb386a40 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5607cb3ae590 <col:66, line:627:5>
|     `-ReturnStmt 0x5607cb3ae580 <line:626:9, col:59>
|       `-CallExpr 0x5607cb3ae540 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5607cb3ae358 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5607cb3ae3c8 <col:25> 'const char *' lvalue ParmVar 0x5607cb386878 'keyword' 'const char *'
|         |-DeclRefExpr 0x5607cb3ae3e8 <col:34> 'int' lvalue ParmVar 0x5607cb3868f8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x5607cb3ae500 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5607cb3ae520 <col:58> 'Vector<T>' lvalue ParmVar 0x5607cb386a40 'x' 'Vector<T> &'
|-CXXMethodDecl 0x5607cb386c98 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x5607cb3ae610 <col:25, line:633:5>
|   `-ReturnStmt 0x5607cb3ae600 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x5607cb3ae5e8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5607cb3ae5b8 <col:16> 'const bool' lvalue ->_status 0x5607cb392ab8
|         `-CXXThisExpr 0x5607cb3ae5a8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5607cb386e18 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x5607cb386d50 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x5607cb3ae6f8 <col:27, line:639:5>
|   |-BinaryOperator 0x5607cb3ae6a0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5607cb3ae628 <col:9> 'bool' lvalue ParmVar 0x5607cb386d50 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5607cb3ae688 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5607cb3ae658 <col:13> 'bool' lvalue ->_status 0x5607cb392ab8
|   |     `-CXXThisExpr 0x5607cb3ae648 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5607cb3ae6e8 <line:638:9, col:17>
|     `-UnaryOperator 0x5607cb3ae6d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5607cb3ae6c0 <col:17> 'Args *' this
|-CXXMethodDecl 0x5607cb386f98 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5607cb386ed8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x5607cb3ae7e8 <col:39, line:644:5>
|   |-BinaryOperator 0x5607cb3ae790 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5607cb3ae718 <col:9> 'bool' lvalue ParmVar 0x5607cb386ed8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5607cb3ae778 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5607cb3ae748 <col:13> 'const bool' lvalue ->_status 0x5607cb392ab8
|   |     `-CXXThisExpr 0x5607cb3ae738 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5607cb3ae7d8 <line:643:9, col:17>
|     `-UnaryOperator 0x5607cb3ae7c0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5607cb3ae7b0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5607cb387060 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x5607cb3ae890 <col:30, line:651:5>
|   `-ReturnStmt 0x5607cb3ae880 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x5607cb3ae868 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5607cb3ae838 <col:16> 'bool' lvalue ->_read_status 0x5607cb370e60
|         `-ImplicitCastExpr 0x5607cb3ae818 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x5607cb3ae808 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5607cb3871a8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x5607cb387118 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x5607cb3ae998 <col:32, line:658:5>
|   |-BinaryOperator 0x5607cb3ae940 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5607cb3ae8a8 <col:9> 'bool' lvalue ParmVar 0x5607cb387118 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5607cb3ae928 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5607cb3ae8f8 <col:13> 'bool' lvalue ->_read_status 0x5607cb370e60
|   |     `-ImplicitCastExpr 0x5607cb3ae8d8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5607cb3ae8c8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5607cb3ae988 <line:657:9, col:17>
|     `-UnaryOperator 0x5607cb3ae970 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5607cb3ae960 <col:17> 'Args *' this
|-CXXMethodDecl 0x5607cb3872f8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5607cb387268 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x5607cb3aeaa8 <col:44, line:663:5>
|   |-BinaryOperator 0x5607cb3aea50 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5607cb3ae9b8 <col:9> 'bool' lvalue ParmVar 0x5607cb387268 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5607cb3aea38 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5607cb3aea08 <col:13> 'bool' lvalue ->_read_status 0x5607cb370e60
|   |     `-ImplicitCastExpr 0x5607cb3ae9e8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5607cb3ae9d8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5607cb3aea98 <line:662:9, col:17>
|     `-UnaryOperator 0x5607cb3aea80 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5607cb3aea70 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5607cb3873c0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x5607cb387488 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x5607cb387550 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x5607cb387618 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x5607cb387928 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x5607cb3876b8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5607cb387888 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x5607cb387798 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x5607cb3aee70 <col:19, line:706:5>
|     `-IfStmt 0x5607cb3aee48 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x5607cb3aeba8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x5607cb3aed78 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x5607cb3aed48 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x5607cb3aed08 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x5607cb3aec00 <col:42> '<bound member function type>' ->simple_slot 0x5607cb3a98e0
|       |     | `-CXXThisExpr 0x5607cb3aebf0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x5607cb3aeca8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x5607cb3aec50 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x5607cb30a3b8 0x5607cb308dc8 0x5607cb0d2e38
|       |     | `-DeclRefExpr 0x5607cb3aec30 <col:55> 'T' lvalue ParmVar 0x5607cb387798 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x5607cb3aece8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x5607cb3aee38 <line:705:13, col:34>
|         `-CallExpr 0x5607cb3aee10 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x5607cb3aed98 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x5607cb3aedf0 <col:33> 'T' lvalue ParmVar 0x5607cb387798 'x' 'T &'
|-FunctionTemplateDecl 0x5607cb387bf8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x5607cb387988 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5607cb387b58 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x5607cb387a68 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x5607cb3af250 <col:31, line:717:5>
|     |-DeclStmt 0x5607cb3aefb0 <line:713:9, col:23>
|     | `-VarDecl 0x5607cb3aee98 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x5607cb3aef88 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5607cb3aef10 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5607cb3aef68 <col:21> 'T' lvalue ParmVar 0x5607cb387a68 'x' 'T &'
|     |-IfStmt 0x5607cb3af200 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x5607cb3af0a8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x5607cb3af1e0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5607cb3af180 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5607cb3af110 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5607cb289f38 0x5607cb289b58 0x5607cb289788 0x5607cb2893a8 0x5607cb288fc8 0x5607cb288bf8
|     |   | `-DeclRefExpr 0x5607cb3af0f0 <col:14> 'T *' lvalue Var 0x5607cb3aee98 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x5607cb3af1c0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x5607cb3af238 <line:716:9, col:16>
|       `-DeclRefExpr 0x5607cb3af218 <col:16> 'T *' lvalue Var 0x5607cb3aee98 's' 'T *'
|-FunctionTemplateDecl 0x5607cb388008 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x5607cb387c58 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5607cb387cd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5607cb387f68 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x5607cb387db8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x5607cb387e58 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x5607cb3af560 <col:37, line:726:5>
|     |-IfStmt 0x5607cb3af4f0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x5607cb3af510 <line:723:13, col:26>
|     | | `-VarDecl 0x5607cb3af2b8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x5607cb3af3a8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x5607cb3af330 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x5607cb3af388 <col:25> 'T' lvalue ParmVar 0x5607cb387db8 'x' 'T &'
|     | |-DeclRefExpr 0x5607cb3af3d0 <col:16> 'T *' lvalue Var 0x5607cb3af2b8 's' 'T *'
|     | `-BinaryOperator 0x5607cb3af4d0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5607cb3af480 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5607cb3af410 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5607cb289f38 0x5607cb289b58 0x5607cb289788 0x5607cb2893a8 0x5607cb288fc8 0x5607cb288bf8
|     |   | `-DeclRefExpr 0x5607cb3af3f0 <col:14> 'T *' lvalue Var 0x5607cb3af2b8 's' 'T *'
|     |   `-DeclRefExpr 0x5607cb3af4b0 <col:18> 'const V' lvalue ParmVar 0x5607cb387e58 'value' 'const V &'
|     `-ReturnStmt 0x5607cb3af550 <line:725:9, col:17>
|       `-UnaryOperator 0x5607cb3af538 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5607cb3af528 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5607cb38e3f0 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x5607cb388070 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5607cb388368 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x5607cb388120 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb3881a0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5607cb388248 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x5607cb3b0380 <col:65, line:737:5>
|     |-DeclStmt 0x5607cb3af5f8 <line:732:9, col:26>
|     | `-VarDecl 0x5607cb3af590 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5607cb3b0348 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x5607cb3b0368 <line:733:13, col:58>
|       | `-VarDecl 0x5607cb3af620 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5607cb3af800 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5607cb3af7d0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5607cb3af7b8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5607cb3af798 <col:26, col:58> 'String' (CXXTemporary 0x5607cb3af798)
|       |           `-CXXMemberCallExpr 0x5607cb3af728 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5607cb3af698 <col:26> '<bound member function type>' ->find 0x5607cb3a7d88
|       |             | `-CXXThisExpr 0x5607cb3af688 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5607cb3af760 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5607cb3af6c8 <col:31> 'const char *' lvalue ParmVar 0x5607cb388120 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5607cb3af778 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5607cb3af6e8 <col:40> 'int' lvalue ParmVar 0x5607cb3881a0 'flags' 'int'
|       |             `-DeclRefExpr 0x5607cb3af708 <col:47> 'Args::Slot *' lvalue Var 0x5607cb3af590 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5607cb3af8b8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5607cb3af8a0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5607cb3af880 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5607cb3af850 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5607cb095e08
|       |       `-ImplicitCastExpr 0x5607cb3af838 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5607cb3af818 <col:20> 'String' lvalue Var 0x5607cb3af620 'str' 'String'
|       `-CompoundStmt 0x5607cb3b0328 <col:61, line:736:9>
|         |-DeclStmt 0x5607cb3afd70 <line:734:13, col:76>
|         | `-VarDecl 0x5607cb3af908 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5607cb3afd40 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5607cb3afcb0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5607cb3afcf8 <col:60> 'T' lvalue ParmVar 0x5607cb388248 'variable' 'T &'
|         |     `-UnaryOperator 0x5607cb3afd28 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5607cb3afd18 <col:71> 'Args *' this
|         `-CallExpr 0x5607cb3b02f8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x5607cb3afd98 <col:13> '<bound member function type>' ->postparse 0x5607cb3a9100
|           | `-CXXThisExpr 0x5607cb3afd88 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5607cb3b02b8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5607cb3afdc8 <col:23> 'T *' lvalue Var 0x5607cb3af908 's' 'T *'
|           | `-CallExpr 0x5607cb3b0278 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5607cb3b0050 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x5607cb3b0150 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x5607cb3b0170 <col:86> 'String' lvalue Var 0x5607cb3af620 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5607cb3b0220 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5607cb3b01b0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5607cb289f38 0x5607cb289b58 0x5607cb289788 0x5607cb2893a8 0x5607cb288fc8 0x5607cb288bf8
|           |   | `-DeclRefExpr 0x5607cb3b0190 <col:92> 'T *' lvalue Var 0x5607cb3af908 's' 'T *'
|           |   `-UnaryOperator 0x5607cb3b0260 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5607cb3b0250 <col:96> 'Args *' this
|           `-DeclRefExpr 0x5607cb3b02d8 <col:103> 'Args::Slot *' lvalue Var 0x5607cb3af590 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5607cb38e938 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5607cb38e460 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5607cb38e4d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5607cb38e898 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5607cb38e598 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb38e618 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5607cb38e6b8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x5607cb38e758 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x5607cb3b3c00 <col:88, line:745:5>
|     |-DeclStmt 0x5607cb3b0418 <line:741:9, col:26>
|     | `-VarDecl 0x5607cb3b03b0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5607cb3b0638 <line:742:9, col:55>
|     | `-VarDecl 0x5607cb3b0440 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5607cb3b0620 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5607cb3b05f0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5607cb3b05d8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5607cb3b05b8 <col:22, col:54> 'String' (CXXTemporary 0x5607cb3b05b8)
|     |           `-CXXMemberCallExpr 0x5607cb3b0548 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5607cb3b04b8 <col:22> '<bound member function type>' ->find 0x5607cb3a7d88
|     |             | `-CXXThisExpr 0x5607cb3b04a8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5607cb3b0580 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5607cb3b04e8 <col:27> 'const char *' lvalue ParmVar 0x5607cb38e598 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5607cb3b0598 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5607cb3b0508 <col:36> 'int' lvalue ParmVar 0x5607cb38e618 'flags' 'int'
|     |             `-DeclRefExpr 0x5607cb3b0528 <col:43> 'Args::Slot *' lvalue Var 0x5607cb3b03b0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5607cb3b0a10 <line:743:9, col:72>
|     | `-VarDecl 0x5607cb3b0688 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5607cb3b09e0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5607cb3b0950 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5607cb3b0998 <col:56> 'T' lvalue ParmVar 0x5607cb38e6b8 'variable' 'T &'
|     |     `-UnaryOperator 0x5607cb3b09c8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5607cb3b09b8 <col:67> 'Args *' this
|     `-CallExpr 0x5607cb3b3bd0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x5607cb3b0a38 <col:9> '<bound member function type>' ->postparse 0x5607cb3a9100
|       | `-CXXThisExpr 0x5607cb3b0a28 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5607cb3b3b90 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5607cb3b0a68 <col:19> 'T *' lvalue Var 0x5607cb3b0688 's' 'T *'
|       | `-ParenExpr 0x5607cb3b3b70 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x5607cb3b3b40 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5607cb3b3b28 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5607cb3b3b10 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5607cb3b3af0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5607cb3b3ac0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5607cb095e08
|       |     |       `-ImplicitCastExpr 0x5607cb3b10c8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5607cb3b0a88 <col:25> 'String' lvalue Var 0x5607cb3b0440 'str' 'String'
|       |     |-CallExpr 0x5607cb3b0f38 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5607cb3b0d10 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x5607cb3b0e10 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x5607cb3b0e30 <col:89> 'String' lvalue Var 0x5607cb3b0440 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5607cb3b0ee0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5607cb3b0e70 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5607cb289f38 0x5607cb289b58 0x5607cb289788 0x5607cb2893a8 0x5607cb288fc8 0x5607cb288bf8
|       |     | | `-DeclRefExpr 0x5607cb3b0e50 <col:95> 'T *' lvalue Var 0x5607cb3b0688 's' 'T *'
|       |     | `-UnaryOperator 0x5607cb3b0f20 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5607cb3b0f10 <col:99> 'Args *' this
|       |     `-ParenExpr 0x5607cb3b10a8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x5607cb3b1088 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x5607cb3b1058 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5607cb3b1008 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5607cb3b0f98 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5607cb289f38 0x5607cb289b58 0x5607cb289788 0x5607cb2893a8 0x5607cb288fc8 0x5607cb288bf8
|       |         | | `-DeclRefExpr 0x5607cb3b0f78 <col:109> 'T *' lvalue Var 0x5607cb3b0688 's' 'T *'
|       |         | `-DeclRefExpr 0x5607cb3b1038 <col:113> 'const V' lvalue ParmVar 0x5607cb38e758 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5607cb3b1078 <col:120> 'bool' true
|       `-DeclRefExpr 0x5607cb3b3bb0 <col:128> 'Args::Slot *' lvalue Var 0x5607cb3b03b0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5607cb38ee68 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x5607cb38e9b0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5607cb38ea28 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5607cb38edc8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5607cb38eae8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb38eb68 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5607cb38ebe0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5607cb38ec88 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x5607cb3b47f8 <col:75, line:754:5>
|     |-DeclStmt 0x5607cb3b3ca8 <line:749:9, col:26>
|     | `-VarDecl 0x5607cb3b3c40 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5607cb3b47c0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x5607cb3b47e0 <line:750:13, col:58>
|       | `-VarDecl 0x5607cb3b3cd0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5607cb3b3eb0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5607cb3b3e80 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5607cb3b3e68 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5607cb3b3e48 <col:26, col:58> 'String' (CXXTemporary 0x5607cb3b3e48)
|       |           `-CXXMemberCallExpr 0x5607cb3b3dd8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5607cb3b3d48 <col:26> '<bound member function type>' ->find 0x5607cb3a7d88
|       |             | `-CXXThisExpr 0x5607cb3b3d38 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5607cb3b3e10 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5607cb3b3d78 <col:31> 'const char *' lvalue ParmVar 0x5607cb38eae8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5607cb3b3e28 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5607cb3b3d98 <col:40> 'int' lvalue ParmVar 0x5607cb38eb68 'flags' 'int'
|       |             `-DeclRefExpr 0x5607cb3b3db8 <col:47> 'Args::Slot *' lvalue Var 0x5607cb3b3c40 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5607cb3b3f68 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5607cb3b3f50 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5607cb3b3f30 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5607cb3b3f00 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5607cb095e08
|       |       `-ImplicitCastExpr 0x5607cb3b3ee8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5607cb3b3ec8 <col:20> 'String' lvalue Var 0x5607cb3b3cd0 'str' 'String'
|       `-CompoundStmt 0x5607cb3b47a0 <col:61, line:753:9>
|         |-DeclStmt 0x5607cb3b4340 <line:751:13, col:63>
|         | `-VarDecl 0x5607cb3b3fb8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5607cb3b4310 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5607cb3b4280 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5607cb3b42c8 <col:47> 'T' lvalue ParmVar 0x5607cb38ec88 'variable' 'T &'
|         |     `-UnaryOperator 0x5607cb3b42f8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5607cb3b42e8 <col:58> 'Args *' this
|         `-CallExpr 0x5607cb3b4770 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x5607cb3b4368 <col:13> '<bound member function type>' ->postparse 0x5607cb3a9100
|           | `-CXXThisExpr 0x5607cb3b4358 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5607cb3b4730 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5607cb3b4398 <col:23> 'T *' lvalue Var 0x5607cb3b3fb8 's' 'T *'
|           | `-CallExpr 0x5607cb3b46f0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5607cb3b4580 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5607cb3b45c8 <col:56> 'P' lvalue ParmVar 0x5607cb38ebe0 'parser' 'P'
|           |   |-DeclRefExpr 0x5607cb3b45e8 <col:64> 'String' lvalue Var 0x5607cb3b3cd0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5607cb3b4698 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5607cb3b4628 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5607cb289f38 0x5607cb289b58 0x5607cb289788 0x5607cb2893a8 0x5607cb288fc8 0x5607cb288bf8
|           |   | `-DeclRefExpr 0x5607cb3b4608 <col:70> 'T *' lvalue Var 0x5607cb3b3fb8 's' 'T *'
|           |   `-UnaryOperator 0x5607cb3b46d8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5607cb3b46c8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x5607cb3b4750 <col:81> 'Args::Slot *' lvalue Var 0x5607cb3b3c40 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5607cb38f4c8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5607cb38eee0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5607cb38ef58 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x5607cb38efd8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5607cb38f428 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5607cb38f0a0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb38f120 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5607cb38f198 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x5607cb38f238 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x5607cb38f2d8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x5607cb3b5588 <col:98, line:762:5>
|     |-DeclStmt 0x5607cb3b4890 <line:758:9, col:26>
|     | `-VarDecl 0x5607cb3b4828 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5607cb3b4ab0 <line:759:9, col:55>
|     | `-VarDecl 0x5607cb3b48b8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5607cb3b4a98 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5607cb3b4a68 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5607cb3b4a50 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5607cb3b4a30 <col:22, col:54> 'String' (CXXTemporary 0x5607cb3b4a30)
|     |           `-CXXMemberCallExpr 0x5607cb3b49c0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5607cb3b4930 <col:22> '<bound member function type>' ->find 0x5607cb3a7d88
|     |             | `-CXXThisExpr 0x5607cb3b4920 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5607cb3b49f8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5607cb3b4960 <col:27> 'const char *' lvalue ParmVar 0x5607cb38f0a0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5607cb3b4a10 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5607cb3b4980 <col:36> 'int' lvalue ParmVar 0x5607cb38f120 'flags' 'int'
|     |             `-DeclRefExpr 0x5607cb3b49a0 <col:43> 'Args::Slot *' lvalue Var 0x5607cb3b4828 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5607cb3b4ed0 <line:760:9, col:59>
|     | `-VarDecl 0x5607cb3b4b08 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5607cb3b4ea0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5607cb3b4e10 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5607cb3b4e58 <col:43> 'T' lvalue ParmVar 0x5607cb38f238 'variable' 'T &'
|     |     `-UnaryOperator 0x5607cb3b4e88 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5607cb3b4e78 <col:54> 'Args *' this
|     `-CallExpr 0x5607cb3b5558 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x5607cb3b4ef8 <col:9> '<bound member function type>' ->postparse 0x5607cb3a9100
|       | `-CXXThisExpr 0x5607cb3b4ee8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5607cb3b5518 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5607cb3b4f28 <col:19> 'T *' lvalue Var 0x5607cb3b4b08 's' 'T *'
|       | `-ParenExpr 0x5607cb3b54f8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x5607cb3b54c8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5607cb3b54b0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5607cb3b5498 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5607cb3b5478 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5607cb3b5448 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5607cb095e08
|       |     |       `-ImplicitCastExpr 0x5607cb3b5430 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5607cb3b4f48 <col:25> 'String' lvalue Var 0x5607cb3b48b8 'str' 'String'
|       |     |-CallExpr 0x5607cb3b52a0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5607cb3b5130 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x5607cb3b5178 <col:59> 'P' lvalue ParmVar 0x5607cb38f198 'parser' 'P'
|       |     | |-DeclRefExpr 0x5607cb3b5198 <col:67> 'String' lvalue Var 0x5607cb3b48b8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5607cb3b5248 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5607cb3b51d8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5607cb289f38 0x5607cb289b58 0x5607cb289788 0x5607cb2893a8 0x5607cb288fc8 0x5607cb288bf8
|       |     | | `-DeclRefExpr 0x5607cb3b51b8 <col:73> 'T *' lvalue Var 0x5607cb3b4b08 's' 'T *'
|       |     | `-UnaryOperator 0x5607cb3b5288 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5607cb3b5278 <col:77> 'Args *' this
|       |     `-ParenExpr 0x5607cb3b5410 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x5607cb3b53f0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x5607cb3b53c0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5607cb3b5370 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5607cb3b5300 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5607cb289f38 0x5607cb289b58 0x5607cb289788 0x5607cb2893a8 0x5607cb288fc8 0x5607cb288bf8
|       |         | | `-DeclRefExpr 0x5607cb3b52e0 <col:87> 'T *' lvalue Var 0x5607cb3b4b08 's' 'T *'
|       |         | `-DeclRefExpr 0x5607cb3b53a0 <col:91> 'const V' lvalue ParmVar 0x5607cb38f2d8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5607cb3b53e0 <col:98> 'bool' true
|       `-DeclRefExpr 0x5607cb3b5538 <col:106> 'Args::Slot *' lvalue Var 0x5607cb3b4828 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5607cb38fb38 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x5607cb38f548 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5607cb38f5c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5607cb38f648 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5607cb38fa98 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5607cb38f710 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb38f790 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5607cb38f808 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x5607cb38f8a8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x5607cb38f948 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x5607cb3b6568 <col:60, line:773:5>
|     |-DeclStmt 0x5607cb3b5630 <line:767:9, col:26>
|     | `-VarDecl 0x5607cb3b55c8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5607cb3b6530 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x5607cb3b6550 <line:768:13, col:58>
|       | `-VarDecl 0x5607cb3b5658 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5607cb3b5838 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5607cb3b5808 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5607cb3b57f0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5607cb3b57d0 <col:26, col:58> 'String' (CXXTemporary 0x5607cb3b57d0)
|       |           `-CXXMemberCallExpr 0x5607cb3b5760 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5607cb3b56d0 <col:26> '<bound member function type>' ->find 0x5607cb3a7d88
|       |             | `-CXXThisExpr 0x5607cb3b56c0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5607cb3b5798 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5607cb3b5700 <col:31> 'const char *' lvalue ParmVar 0x5607cb38f710 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5607cb3b57b0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5607cb3b5720 <col:40> 'int' lvalue ParmVar 0x5607cb38f790 'flags' 'int'
|       |             `-DeclRefExpr 0x5607cb3b5740 <col:47> 'Args::Slot *' lvalue Var 0x5607cb3b55c8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5607cb3b58f0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5607cb3b58d8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5607cb3b58b8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5607cb3b5888 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5607cb095e08
|       |       `-ImplicitCastExpr 0x5607cb3b5870 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5607cb3b5850 <col:20> 'String' lvalue Var 0x5607cb3b5658 'str' 'String'
|       `-CompoundStmt 0x5607cb3b6508 <col:61, line:772:9>
|         |-DeclStmt 0x5607cb3b5c30 <line:769:13, col:66>
|         | `-VarDecl 0x5607cb3b5948 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x5607cb3b5c00 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5607cb3b5b70 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5607cb3b5bb8 <col:49> 'T1' lvalue ParmVar 0x5607cb38f8a8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x5607cb3b5be8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5607cb3b5bd8 <col:61> 'Args *' this
|         |-DeclStmt 0x5607cb3b5fa0 <line:770:13, col:66>
|         | `-VarDecl 0x5607cb3b5cb8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x5607cb3b5f70 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5607cb3b5ee0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5607cb3b5f28 <col:49> 'T2' lvalue ParmVar 0x5607cb38f948 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x5607cb3b5f58 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5607cb3b5f48 <col:61> 'Args *' this
|         `-CallExpr 0x5607cb3b64d8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x5607cb3b5fc8 <col:13> '<bound member function type>' ->postparse 0x5607cb3a9100
|           | `-CXXThisExpr 0x5607cb3b5fb8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5607cb3b6498 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x5607cb3b6038 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x5607cb3b5ff8 <col:23> 'T1 *' lvalue Var 0x5607cb3b5948 's1' 'T1 *'
|           | | `-DeclRefExpr 0x5607cb3b6018 <col:29> 'T2 *' lvalue Var 0x5607cb3b5cb8 's2' 'T2 *'
|           | `-CallExpr 0x5607cb3b6450 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5607cb3b6220 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5607cb3b6268 <col:63> 'P' lvalue ParmVar 0x5607cb38f808 'parser' 'P'
|           |   |-DeclRefExpr 0x5607cb3b6288 <col:71> 'String' lvalue Var 0x5607cb3b5658 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5607cb3b6338 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5607cb3b62c8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5607cb289f38 0x5607cb289b58 0x5607cb289788 0x5607cb2893a8 0x5607cb288fc8 0x5607cb288bf8
|           |   | `-DeclRefExpr 0x5607cb3b62a8 <col:77> 'T1 *' lvalue Var 0x5607cb3b5948 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x5607cb3b63f8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5607cb3b6388 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5607cb289f38 0x5607cb289b58 0x5607cb289788 0x5607cb2893a8 0x5607cb288fc8 0x5607cb288bf8
|           |   | `-DeclRefExpr 0x5607cb3b6368 <col:82> 'T2 *' lvalue Var 0x5607cb3b5cb8 's2' 'T2 *'
|           |   `-UnaryOperator 0x5607cb3b6438 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5607cb3b6428 <col:87> 'Args *' this
|           `-DeclRefExpr 0x5607cb3b64b8 <col:94> 'Args::Slot *' lvalue Var 0x5607cb3b55c8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5607cb38ff28 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x5607cb38fbb8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5607cb38fe88 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5607cb38fc70 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb38fcf0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5607cb38fd68 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5607cb3b6a80 <col:67, line:780:5>
|     |-DeclStmt 0x5607cb3b6600 <line:777:9, col:26>
|     | `-VarDecl 0x5607cb3b6598 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5607cb3b6a48 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x5607cb3b6a68 <line:778:13, col:58>
|       | `-VarDecl 0x5607cb3b6628 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5607cb3b6808 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5607cb3b67d8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5607cb3b67c0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5607cb3b67a0 <col:26, col:58> 'String' (CXXTemporary 0x5607cb3b67a0)
|       |           `-CXXMemberCallExpr 0x5607cb3b6730 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5607cb3b66a0 <col:26> '<bound member function type>' ->find 0x5607cb3a7d88
|       |             | `-CXXThisExpr 0x5607cb3b6690 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5607cb3b6768 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5607cb3b66d0 <col:31> 'const char *' lvalue ParmVar 0x5607cb38fc70 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5607cb3b6780 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5607cb3b66f0 <col:40> 'int' lvalue ParmVar 0x5607cb38fcf0 'flags' 'int'
|       |             `-DeclRefExpr 0x5607cb3b6710 <col:47> 'Args::Slot *' lvalue Var 0x5607cb3b6598 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5607cb3b68c0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5607cb3b68a8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5607cb3b6888 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5607cb3b6858 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5607cb095e08
|       |       `-ImplicitCastExpr 0x5607cb3b6840 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5607cb3b6820 <col:20> 'String' lvalue Var 0x5607cb3b6628 'str' 'String'
|       `-CallExpr 0x5607cb3b6a18 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x5607cb3b68e8 <col:13> '<bound member function type>' ->postparse 0x5607cb3a9100
|         | `-CXXThisExpr 0x5607cb3b68d8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x5607cb3b69c8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x5607cb3b6938 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x5607cb3b6918 <col:23> 'P' lvalue ParmVar 0x5607cb38fd68 'parser' 'P'
|         | |-DeclRefExpr 0x5607cb3b6980 <col:36> 'String' lvalue Var 0x5607cb3b6628 'str' 'String'
|         | `-UnaryOperator 0x5607cb3b69b0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x5607cb3b69a0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x5607cb3b69f8 <col:49> 'Args::Slot *' lvalue Var 0x5607cb3b6598 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5607cb3902c8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5607cb38ff98 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5607cb390228 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5607cb390050 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb3900d0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5607cb390148 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x5607cb3b73f0 <col:71, line:792:5>
|     |-DeclStmt 0x5607cb3b6b18 <line:784:9, col:26>
|     | `-VarDecl 0x5607cb3b6ab0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5607cb3b6be8 <line:785:9, col:29>
|     | `-VarDecl 0x5607cb3b6b48 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5607cb3b6bd0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5607cb3b6bb0 <col:28> 'int' 1
|     |-WhileStmt 0x5607cb3b72a0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x5607cb3b72c0 <line:786:16, col:61>
|     | | `-VarDecl 0x5607cb3b6c10 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5607cb3b6df0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5607cb3b6dc0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5607cb3b6da8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5607cb3b6d88 <col:29, col:61> 'String' (CXXTemporary 0x5607cb3b6d88)
|     | |           `-CXXMemberCallExpr 0x5607cb3b6d18 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5607cb3b6c88 <col:29> '<bound member function type>' ->find 0x5607cb3a7d88
|     | |             | `-CXXThisExpr 0x5607cb3b6c78 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5607cb3b6d50 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5607cb3b6cb8 <col:34> 'const char *' lvalue ParmVar 0x5607cb390050 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5607cb3b6d68 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5607cb3b6cd8 <col:43> 'int' lvalue ParmVar 0x5607cb3900d0 'flags' 'int'
|     | |             `-DeclRefExpr 0x5607cb3b6cf8 <col:50> 'Args::Slot *' lvalue Var 0x5607cb3b6ab0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5607cb3b6ea8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5607cb3b6e90 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5607cb3b6e70 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5607cb3b6e40 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5607cb095e08
|     | |       `-ImplicitCastExpr 0x5607cb3b6e28 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5607cb3b6e08 <col:23> 'String' lvalue Var 0x5607cb3b6c10 'str' 'String'
|     | `-CompoundStmt 0x5607cb3b7278 <col:64, line:790:9>
|     |   |-CallExpr 0x5607cb3b7000 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x5607cb3b6ed0 <col:13> '<bound member function type>' ->postparse 0x5607cb3a9100
|     |   | | `-CXXThisExpr 0x5607cb3b6ec0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5607cb3b6fb0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5607cb3b6f20 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5607cb3b6f00 <col:23> 'P' lvalue ParmVar 0x5607cb390148 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5607cb3b6f68 <col:36> 'String' lvalue Var 0x5607cb3b6c10 'str' 'String'
|     |   | | `-UnaryOperator 0x5607cb3b6f98 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5607cb3b6f88 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x5607cb3b6fe0 <col:49> 'Args::Slot *' lvalue Var 0x5607cb3b6ab0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5607cb3b7198 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5607cb3b7030 <col:13> 'int' lvalue Var 0x5607cb3b6b48 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5607cb3b7180 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5607cb3b7160 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5607cb3b70c8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5607cb3b70a8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5607cb3b7090 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5607cb3b7050 <col:28> 'int' lvalue Var 0x5607cb3b6b48 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5607cb3b7070 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5607cb3b7148 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5607cb3b7118 <col:49> 'bool' lvalue ->_read_status 0x5607cb370e60
|     |   |         `-ImplicitCastExpr 0x5607cb3b70f8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5607cb3b70e8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5607cb3b7248 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5607cb3b71b8 <col:13> 'int' lvalue ParmVar 0x5607cb3900d0 'flags' 'int'
|     |     `-UnaryOperator 0x5607cb3b7230 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5607cb3b7218 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5607cb3b71f8 <col:23> 'const int' lvalue Var 0x5607cb378388 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5607cb3b73d0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5607cb3b7308 <col:9> 'bool' lvalue ->_read_status 0x5607cb370e60
|       | `-ImplicitCastExpr 0x5607cb3b72e8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5607cb3b72d8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5607cb3b73b0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5607cb3b7390 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5607cb3b7378 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5607cb3b7338 <col:25> 'int' lvalue Var 0x5607cb3b6b48 'read_status' 'int'
|           `-IntegerLiteral 0x5607cb3b7358 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5607cb3907a8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5607cb390338 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5607cb3903b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5607cb390708 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5607cb390478 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb3904f8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5607cb390570 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x5607cb390618 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x5607cb3b8380 <col:84, line:805:5>
|     |-DeclStmt 0x5607cb3b7498 <line:796:9, col:26>
|     | `-VarDecl 0x5607cb3b7430 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5607cb3b7568 <line:797:9, col:29>
|     | `-VarDecl 0x5607cb3b74c8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5607cb3b7550 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5607cb3b7530 <col:28> 'int' 1
|     |-DeclStmt 0x5607cb3b78a0 <line:798:9, col:71>
|     | `-VarDecl 0x5607cb3b75b8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5607cb3b7870 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5607cb3b77e0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x5607cb3b7828 <col:55> 'T' lvalue ParmVar 0x5607cb390618 'variable' 'T &'
|     |     `-UnaryOperator 0x5607cb3b7858 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5607cb3b7848 <col:66> 'Args *' this
|     |-WhileStmt 0x5607cb3b8230 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x5607cb3b8250 <line:799:16, col:61>
|     | | `-VarDecl 0x5607cb3b78c8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5607cb3b7aa8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5607cb3b7a78 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5607cb3b7a60 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5607cb3b7a40 <col:29, col:61> 'String' (CXXTemporary 0x5607cb3b7a40)
|     | |           `-CXXMemberCallExpr 0x5607cb3b79d0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5607cb3b7940 <col:29> '<bound member function type>' ->find 0x5607cb3a7d88
|     | |             | `-CXXThisExpr 0x5607cb3b7930 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5607cb3b7a08 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5607cb3b7970 <col:34> 'const char *' lvalue ParmVar 0x5607cb390478 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5607cb3b7a20 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5607cb3b7990 <col:43> 'int' lvalue ParmVar 0x5607cb3904f8 'flags' 'int'
|     | |             `-DeclRefExpr 0x5607cb3b79b0 <col:50> 'Args::Slot *' lvalue Var 0x5607cb3b7430 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5607cb3b7b60 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5607cb3b7b48 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5607cb3b7b28 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5607cb3b7af8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5607cb095e08
|     | |       `-ImplicitCastExpr 0x5607cb3b7ae0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5607cb3b7ac0 <col:23> 'String' lvalue Var 0x5607cb3b78c8 'str' 'String'
|     | `-CompoundStmt 0x5607cb3b8208 <col:64, line:803:9>
|     |   |-CallExpr 0x5607cb3b7f90 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x5607cb3b7b88 <col:13> '<bound member function type>' ->postparse 0x5607cb3a9100
|     |   | | `-CXXThisExpr 0x5607cb3b7b78 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x5607cb3b7f50 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x5607cb3b7bb8 <col:23> 'T *' lvalue Var 0x5607cb3b75b8 's' 'T *'
|     |   | | `-CallExpr 0x5607cb3b7f10 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x5607cb3b7da0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x5607cb3b7de8 <col:56> 'P' lvalue ParmVar 0x5607cb390570 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x5607cb3b7e08 <col:64> 'String' lvalue Var 0x5607cb3b78c8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x5607cb3b7eb8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x5607cb3b7e48 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5607cb289f38 0x5607cb289b58 0x5607cb289788 0x5607cb2893a8 0x5607cb288fc8 0x5607cb288bf8
|     |   | |   | `-DeclRefExpr 0x5607cb3b7e28 <col:70> 'T *' lvalue Var 0x5607cb3b75b8 's' 'T *'
|     |   | |   `-UnaryOperator 0x5607cb3b7ef8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x5607cb3b7ee8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x5607cb3b7f70 <col:81> 'Args::Slot *' lvalue Var 0x5607cb3b7430 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5607cb3b8128 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5607cb3b7fc0 <col:13> 'int' lvalue Var 0x5607cb3b74c8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5607cb3b8110 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5607cb3b80f0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5607cb3b8058 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5607cb3b8038 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5607cb3b8020 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5607cb3b7fe0 <col:28> 'int' lvalue Var 0x5607cb3b74c8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5607cb3b8000 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5607cb3b80d8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5607cb3b80a8 <col:49> 'bool' lvalue ->_read_status 0x5607cb370e60
|     |   |         `-ImplicitCastExpr 0x5607cb3b8088 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5607cb3b8078 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5607cb3b81d8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5607cb3b8148 <col:13> 'int' lvalue ParmVar 0x5607cb3904f8 'flags' 'int'
|     |     `-UnaryOperator 0x5607cb3b81c0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5607cb3b81a8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5607cb3b8188 <col:23> 'const int' lvalue Var 0x5607cb378388 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5607cb3b8360 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5607cb3b8298 <col:9> 'bool' lvalue ->_read_status 0x5607cb370e60
|       | `-ImplicitCastExpr 0x5607cb3b8278 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5607cb3b8268 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5607cb3b8340 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5607cb3b8320 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5607cb3b8308 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5607cb3b82c8 <col:25> 'int' lvalue Var 0x5607cb3b74c8 'read_status' 'int'
|           `-IntegerLiteral 0x5607cb3b82e8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5607cb390d88 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x5607cb390820 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5607cb390898 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5607cb390ce8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5607cb390958 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5607cb3909d8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x5607cb390a50 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x5607cb390ba0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x5607cb3b9188 <col:87, line:821:5>
|     |-DeclStmt 0x5607cb3b8430 <line:809:9, col:26>
|     | `-VarDecl 0x5607cb3b83c8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5607cb3b8500 <line:810:9, col:29>
|     | `-VarDecl 0x5607cb3b8460 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5607cb3b84e8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5607cb3b84c8 <col:28> 'int' 1
|     |-DeclStmt 0x5607cb3b8748 <line:811:9, col:38>
|     | `-VarDecl 0x5607cb3b8630 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x5607cb3b8720 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5607cb3b86a8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5607cb3b8700 <col:29> 'Vector<T>' lvalue ParmVar 0x5607cb390ba0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x5607cb3b9038 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x5607cb3b9058 <line:812:16, col:61>
|     | | `-VarDecl 0x5607cb3b8770 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5607cb3b8950 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5607cb3b8920 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5607cb3b8908 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5607cb3b88e8 <col:29, col:61> 'String' (CXXTemporary 0x5607cb3b88e8)
|     | |           `-CXXMemberCallExpr 0x5607cb3b8878 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5607cb3b87e8 <col:29> '<bound member function type>' ->find 0x5607cb3a7d88
|     | |             | `-CXXThisExpr 0x5607cb3b87d8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5607cb3b88b0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5607cb3b8818 <col:34> 'const char *' lvalue ParmVar 0x5607cb390958 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5607cb3b88c8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5607cb3b8838 <col:43> 'int' lvalue ParmVar 0x5607cb3909d8 'flags' 'int'
|     | |             `-DeclRefExpr 0x5607cb3b8858 <col:50> 'Args::Slot *' lvalue Var 0x5607cb3b83c8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5607cb3b8a08 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5607cb3b89f0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5607cb3b89d0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5607cb3b89a0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5607cb095e08
|     | |       `-ImplicitCastExpr 0x5607cb3b8988 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5607cb3b8968 <col:23> 'String' lvalue Var 0x5607cb3b8770 'str' 'String'
|     | `-CompoundStmt 0x5607cb3b9000 <col:64, line:819:9>
|     |   |-DeclStmt 0x5607cb3b8ac8 <line:813:13, col:23>
|     |   | `-VarDecl 0x5607cb3b8a30 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x5607cb3b8aa8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x5607cb3b8c48 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x5607cb3b8af0 <col:13> '<bound member function type>' ->postparse 0x5607cb3a9100
|     |   | | `-CXXThisExpr 0x5607cb3b8ae0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5607cb3b8bf0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5607cb3b8b40 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5607cb3b8b20 <col:23> 'P' lvalue ParmVar 0x5607cb390a50 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5607cb3b8b88 <col:36> 'String' lvalue Var 0x5607cb3b8770 'str' 'String'
|     |   | | |-DeclRefExpr 0x5607cb3b8ba8 <col:41> 'T' lvalue Var 0x5607cb3b8a30 'sx' 'T'
|     |   | | `-UnaryOperator 0x5607cb3b8bd8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5607cb3b8bc8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x5607cb3b8c28 <col:53> 'Args::Slot *' lvalue Var 0x5607cb3b83c8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x5607cb3b8da0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x5607cb3b8cd8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x5607cb3b8ca8 <col:17> 'bool' lvalue ->_read_status 0x5607cb370e60
|     |   | |   `-ImplicitCastExpr 0x5607cb3b8c88 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x5607cb3b8c78 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x5607cb3b8d78 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x5607cb3b8d10 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x5607cb3b8cf0 <col:17> 'Vector<T> *' lvalue Var 0x5607cb3b8630 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x5607cb3b8d58 <col:30> 'T' lvalue Var 0x5607cb3b8a30 'sx' 'T'
|     |   |-BinaryOperator 0x5607cb3b8f20 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5607cb3b8db8 <col:13> 'int' lvalue Var 0x5607cb3b8460 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5607cb3b8f08 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5607cb3b8ee8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5607cb3b8e50 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5607cb3b8e30 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5607cb3b8e18 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5607cb3b8dd8 <col:28> 'int' lvalue Var 0x5607cb3b8460 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5607cb3b8df8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5607cb3b8ed0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5607cb3b8ea0 <col:49> 'bool' lvalue ->_read_status 0x5607cb370e60
|     |   |         `-ImplicitCastExpr 0x5607cb3b8e80 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5607cb3b8e70 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5607cb3b8fd0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5607cb3b8f40 <col:13> 'int' lvalue ParmVar 0x5607cb3909d8 'flags' 'int'
|     |     `-UnaryOperator 0x5607cb3b8fb8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5607cb3b8fa0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5607cb3b8f80 <col:23> 'const int' lvalue Var 0x5607cb378388 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5607cb3b9168 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5607cb3b90a0 <col:9> 'bool' lvalue ->_read_status 0x5607cb370e60
|       | `-ImplicitCastExpr 0x5607cb3b9080 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5607cb3b9070 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5607cb3b9148 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5607cb3b9128 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5607cb3b9110 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5607cb3b90d0 <col:25> 'int' lvalue Var 0x5607cb3b8460 'read_status' 'int'
|           `-IntegerLiteral 0x5607cb3b90f0 <col:40> 'int' 1
|-AccessSpecDecl 0x5607cb390e00 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x5607cb390e28 prev 0x5607cb3766c0 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x5607cb390f20 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x5607cb391010 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x5607cb3b91c0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x5607cb391100 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x5607cb3b91d0 <col:25, line:830:9>
| |-CXXMethodDecl 0x5607cb391200 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x5607cb3912b0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x5607cb391358 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5607cb391358
| | `-ParmVarDecl 0x5607cb391468 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x5607cb391c28 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5607cb391c28
|   `-ParmVarDecl 0x5607cb391d38 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x5607cb3914d8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x5607cb391638 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x5607cb391830 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x5607cb3916e0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x5607cb391758 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x5607cb3b93b0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x5607cb391ae8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x5607cb3b9220 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5607cb3b91e0 <col:20> 'void *' lvalue ParmVar 0x5607cb3916e0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x5607cb391b50 '_slot' 'char *'
| | | `-CXXNewExpr 0x5607cb3b92a8 <col:32, col:45> 'char *' array Function 0x5607caeb8a78 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x5607cb3b9290 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x5607cb3b9260 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x5607cb391758 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x5607cb391bb0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x5607cb3b9370 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5607cb3b9330 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x5607cb391758 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x5607cb3b9430 <col:61, line:838:9>
| |-CXXDestructorDecl 0x5607cb391930 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x5607cb391100 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x5607cb3b94b8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x5607cb3b9498 <line:840:13, col:22> 'void' array Function 0x5607caeb8dd8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x5607cb3b9480 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x5607cb3b9450 <col:22> 'char *' lvalue ->_slot 0x5607cb391b50
| |         `-CXXThisExpr 0x5607cb3b9440 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x5607cb391a30 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x5607cb391200 Slot::store 'void ()' ]
| | `-CompoundStmt 0x5607cb3b96a8 <col:22, line:844:9>
| |   `-CallExpr 0x5607cb3b9610 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x5607cb3b95f8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5607cb3b95d8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x5607cafc4858 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x5607cb3b9648 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x5607cb3b9528 <col:20> 'void *' lvalue ->_ptr 0x5607cb391ae8
| |     |   `-CXXThisExpr 0x5607cb3b9518 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x5607cb3b9678 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x5607cb3b9660 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x5607cb3b9568 <col:26> 'char *' lvalue ->_slot 0x5607cb391b50
| |     |     `-CXXThisExpr 0x5607cb3b9558 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x5607cb3b9690 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x5607cb3b95a8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x5607cb391bb0
| |         `-CXXThisExpr 0x5607cb3b9598 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x5607cb391ae8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x5607cb391b50 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x5607cb391bb0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x5607cb391da8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5607cb391da8
| | `-ParmVarDecl 0x5607cb391eb8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x5607cb391f58 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5607cb391f58
|   `-ParmVarDecl 0x5607cb392068 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x5607cb392208 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x5607cb3920d8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x5607cb392178 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x5607cb3924a0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x5607cb392698 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x5607cb392568 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x5607cb392818 '_ptr' 'T *'
|   | | `-ParenListExpr 0x5607cb3b96e0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x5607cb3b96c0 <col:20> 'T *' lvalue ParmVar 0x5607cb392568 'ptr' 'T *'
|   | `-CompoundStmt 0x5607cb3b9730 <col:25, line:854:9>
|   |-CXXMethodDecl 0x5607cb392768 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x5607cb391200 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x5607cb3b98e0 <col:22, line:857:9>
|   |   `-CallExpr 0x5607cb3b98b0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x5607cb3b9740 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x5607cb07cf88 0x5607cb0272b8
|   |     |-CXXOperatorCallExpr 0x5607cb3b9840 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x5607cb3b97d0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5607cb289f38 0x5607cb289b58 0x5607cb289788 0x5607cb2893a8 0x5607cb288fc8 0x5607cb288bf8
|   |     | `-MemberExpr 0x5607cb3b97a0 <col:29> 'T *' lvalue ->_ptr 0x5607cb392818
|   |     |   `-CXXThisExpr 0x5607cb3b9790 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x5607cb3b9880 <col:35> 'T' lvalue ->_slot 0x5607cb392878
|   |       `-CXXThisExpr 0x5607cb3b9870 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x5607cb392818 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x5607cb392878 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x5607cb3928e0 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x5607cb3929e0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x5607cb392a30 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5607cb3929c0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x5607cb3929a0 <col:31> 'int' 48
|-FieldDecl 0x5607cb392a58 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x5607cb392ab8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x5607cb392b18 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x5607cb392c50 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x5607cb3a7630 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5607cb3a7690 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x5607cb3a7740 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x5607cb3a7968 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x5607cb3a7870 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x5607cb3a7ab8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x5607cb3a7a28 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x5607cb3a7d88 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x5607cb3a7b78 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x5607cb3a7bf8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x5607cb3a7ca0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x5607cb3a9100 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x5607cb3a7e50 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x5607cb3a7ec8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x5607cb3a91d0 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x5607cb3a9320 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x5607cb3a9288 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x5607cb3a96b8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x5607cb3a93e0 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x5607cb3a9460 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x5607cb3a9510 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x5607cb3a95c8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x5607cb3a98e0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x5607cb3a9790 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x5607cb3a9808 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x5607cb3a9bf8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x5607cb3a9990 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x5607cb3a9b58 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x5607cb3a9a68 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.1, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.1, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ether
         0 |   uint8_t [6] ether_dhost
         6 |   uint8_t [6] ether_shost
        12 |   uint16_t ether_type
           | [sizeof=14, dsize=14, align=1,
           |  nvsize=14, nvalign=1]

*** Dumping AST Record Layout
         0 | struct click_ip6
         0 |   union click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:17:5) ip6_ctlun
         0 |     struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:18:2) ip6_un1
         0 |       uint32_t ip6_un1_flow
         4 |       uint16_t ip6_un1_plen
         6 |       uint8_t ip6_un1_nxt
         7 |       uint8_t ip6_un1_hlim
         0 |     uint8_t ip6_un2_vfc
         0 |     struct click_ip6::(anonymous at ../dummy_inc/clicknet/ip6.h:30:2) ip6_un3
     0:0-3 |       unsigned int ip6_un3_fc
     0:4-7 |       unsigned int ip6_un3_v
         8 |   struct in6_addr ip6_src
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   struct in6_addr ip6_dst
        24 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
        24 |       uint8_t [16] __u6_addr8
        24 |       uint16_t [8] __u6_addr16
        24 |       uint32_t [4] __u6_addr32
           | [sizeof=40, dsize=40, align=4,
           |  nvsize=40, nvalign=4]

*** Dumping AST Record Layout
         0 | struct click_nd_sol
         0 |   uint8_t type
         1 |   uint8_t code
         2 |   uint16_t checksum
         4 |   uint32_t reserved
         8 |   uint8_t [16] nd_tpa
        24 |   uint8_t option_type
        25 |   uint8_t option_length
        26 |   uint8_t [6] nd_sha
           | [sizeof=32, dsize=32, align=4,
           |  nvsize=32, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607cb32e468 prev 0x5607cb28dc50 <../dummy_inc/clicknet/ether.h:17:1, line:21:1> line:17:8 referenced struct click_ether definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-PackedAttr 0x5607cb32e7e8 <line:21:18>
|-CXXRecordDecl 0x5607cb32e560 <line:17:1, col:8> col:8 implicit struct click_ether
|-FieldDecl 0x5607cb32e688 <line:18:5, col:26> col:13 referenced ether_dhost 'uint8_t [6]'
|-FieldDecl 0x5607cb32e738 <line:19:5, col:26> col:13 referenced ether_shost 'uint8_t [6]'
`-FieldDecl 0x5607cb32e798 <line:20:5, col:14> col:14 referenced ether_type 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ether = type { [6 x i8], [6 x i8], i16 }
  NonVirtualBaseLLVMType:%struct.click_ether = type { [6 x i8], [6 x i8], i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607cb247398 <../dummy_inc/clicknet/ip6.h:18:2, line:27:2> line:18:2 struct definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-FieldDecl 0x5607cb2474c8 <line:19:6, col:15> col:15 referenced ip6_un1_flow 'uint32_t':'unsigned int'
|-FieldDecl 0x5607cb247528 <line:24:6, col:15> col:15 referenced ip6_un1_plen 'uint16_t':'unsigned short'
|-FieldDecl 0x5607cb247588 <line:25:6, col:14> col:14 referenced ip6_un1_nxt 'uint8_t':'unsigned char'
`-FieldDecl 0x5607cb2475e8 <line:26:6, col:14> col:14 referenced ip6_un1_hlim 'uint8_t':'unsigned char'

Layout: <CGRecordLayout
  LLVMType:%struct.anon = type { i32, i16, i8, i8 }
  NonVirtualBaseLLVMType:%struct.anon = type { i32, i16, i8, i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607cb247770 <../dummy_inc/clicknet/ip6.h:30:2, line:38:2> line:30:2 struct definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-FieldDecl 0x5607cb2478e0 <line:35:6, col:28> col:15 ip6_un3_fc 'unsigned int'
| `-ConstantExpr 0x5607cb2478c0 <col:28> 'int' Int: 4
|   `-IntegerLiteral 0x5607cb247888 <col:28> 'int' 4
`-FieldDecl 0x5607cb247988 <line:36:6, col:27> col:15 referenced ip6_un3_v 'unsigned int'
  `-ConstantExpr 0x5607cb247968 <col:27> 'int' Int: 4
    `-IntegerLiteral 0x5607cb247930 <col:27> 'int' 4

Layout: <CGRecordLayout
  LLVMType:%struct.anon.4 = type { i8, [3 x i8] }
  NonVirtualBaseLLVMType:%struct.anon.4 = type { i8, [3 x i8] }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
    <CGBitFieldInfo Offset:4 Size:4 IsSigned:0 StorageSize:8 StorageOffset:0>
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607cb247278 <../dummy_inc/clicknet/ip6.h:17:5, line:39:5> line:17:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5607cb247398 <line:18:2, line:27:2> line:18:2 struct definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FieldDecl 0x5607cb2474c8 <line:19:6, col:15> col:15 referenced ip6_un1_flow 'uint32_t':'unsigned int'
| |-FieldDecl 0x5607cb247528 <line:24:6, col:15> col:15 referenced ip6_un1_plen 'uint16_t':'unsigned short'
| |-FieldDecl 0x5607cb247588 <line:25:6, col:14> col:14 referenced ip6_un1_nxt 'uint8_t':'unsigned char'
| `-FieldDecl 0x5607cb2475e8 <line:26:6, col:14> col:14 referenced ip6_un1_hlim 'uint8_t':'unsigned char'
|-FieldDecl 0x5607cb2476a8 <line:18:2, line:27:4> col:4 referenced ip6_un1 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)'
|-FieldDecl 0x5607cb247720 <line:28:2, col:10> col:10 ip6_un2_vfc 'uint8_t':'unsigned char'
|-CXXRecordDecl 0x5607cb247770 <line:30:2, line:38:2> line:30:2 struct definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FieldDecl 0x5607cb2478e0 <line:35:6, col:28> col:15 ip6_un3_fc 'unsigned int'
| | `-ConstantExpr 0x5607cb2478c0 <col:28> 'int' Int: 4
| |   `-IntegerLiteral 0x5607cb247888 <col:28> 'int' 4
| `-FieldDecl 0x5607cb247988 <line:36:6, col:27> col:15 referenced ip6_un3_v 'unsigned int'
|   `-ConstantExpr 0x5607cb247968 <col:27> 'int' Int: 4
|     `-IntegerLiteral 0x5607cb247930 <col:27> 'int' 4
`-FieldDecl 0x5607cb247a48 <line:30:2, line:38:4> col:4 referenced ip6_un3 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)'

Layout: <CGRecordLayout
  LLVMType:%union.anon.3 = type { %struct.anon }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607cb2470f0 prev 0x5607cb28de40 <../dummy_inc/clicknet/ip6.h:16:1, line:42:1> line:16:8 referenced struct click_ip6 definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5607cb2471e8 <col:1, col:8> col:8 implicit struct click_ip6
|-CXXRecordDecl 0x5607cb247278 <line:17:5, line:39:5> line:17:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5607cb247398 <line:18:2, line:27:2> line:18:2 struct definition
| | |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | | |-DefaultConstructor exists trivial needs_implicit
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-FieldDecl 0x5607cb2474c8 <line:19:6, col:15> col:15 referenced ip6_un1_flow 'uint32_t':'unsigned int'
| | |-FieldDecl 0x5607cb247528 <line:24:6, col:15> col:15 referenced ip6_un1_plen 'uint16_t':'unsigned short'
| | |-FieldDecl 0x5607cb247588 <line:25:6, col:14> col:14 referenced ip6_un1_nxt 'uint8_t':'unsigned char'
| | `-FieldDecl 0x5607cb2475e8 <line:26:6, col:14> col:14 referenced ip6_un1_hlim 'uint8_t':'unsigned char'
| |-FieldDecl 0x5607cb2476a8 <line:18:2, line:27:4> col:4 referenced ip6_un1 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:18:2)'
| |-FieldDecl 0x5607cb247720 <line:28:2, col:10> col:10 ip6_un2_vfc 'uint8_t':'unsigned char'
| |-CXXRecordDecl 0x5607cb247770 <line:30:2, line:38:2> line:30:2 struct definition
| | |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | | |-DefaultConstructor exists trivial needs_implicit
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-FieldDecl 0x5607cb2478e0 <line:35:6, col:28> col:15 ip6_un3_fc 'unsigned int'
| | | `-ConstantExpr 0x5607cb2478c0 <col:28> 'int' Int: 4
| | |   `-IntegerLiteral 0x5607cb247888 <col:28> 'int' 4
| | `-FieldDecl 0x5607cb247988 <line:36:6, col:27> col:15 referenced ip6_un3_v 'unsigned int'
| |   `-ConstantExpr 0x5607cb247968 <col:27> 'int' Int: 4
| |     `-IntegerLiteral 0x5607cb247930 <col:27> 'int' 4
| `-FieldDecl 0x5607cb247a48 <line:30:2, line:38:4> col:4 referenced ip6_un3 'struct (anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)':'click_ip6::(anonymous struct at ../dummy_inc/clicknet/ip6.h:30:2)'
|-FieldDecl 0x5607cb247bf8 <line:17:5, line:39:7> col:7 referenced ip6_ctlun 'union (anonymous union at ../dummy_inc/clicknet/ip6.h:17:5)':'click_ip6::(anonymous union at ../dummy_inc/clicknet/ip6.h:17:5)'
|-FieldDecl 0x5607cb247c80 <line:40:5, col:21> col:21 referenced ip6_src 'struct in6_addr':'in6_addr'
`-FieldDecl 0x5607cb247cf0 <line:41:5, col:21> col:21 referenced ip6_dst 'struct in6_addr':'in6_addr'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ip6 = type { %union.anon.3, %struct.in6_addr, %struct.in6_addr }
  NonVirtualBaseLLVMType:%struct.click_ip6 = type { %union.anon.3, %struct.in6_addr, %struct.in6_addr }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607cb32f9b0 <../dummy_inc/clicknet/ether.h:89:1, line:98:1> line:89:8 referenced struct click_nd_sol definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5607cb32fac8 <col:1, col:8> col:8 implicit struct click_nd_sol
|-FieldDecl 0x5607cb32fb68 <line:90:5, col:13> col:13 referenced type 'uint8_t':'unsigned char'
|-FieldDecl 0x5607cb32fbc8 <line:91:5, col:13> col:13 referenced code 'uint8_t':'unsigned char'
|-FieldDecl 0x5607cb32fc28 <line:92:5, col:14> col:14 referenced checksum 'uint16_t':'unsigned short'
|-FieldDecl 0x5607cb32fc88 <line:93:5, col:14> col:14 referenced reserved 'uint32_t':'unsigned int'
|-FieldDecl 0x5607cb32fd38 <line:94:5, col:22> col:13 referenced nd_tpa 'uint8_t [16]'
|-FieldDecl 0x5607cb32fd98 <line:95:5, col:13> col:13 referenced option_type 'uint8_t':'unsigned char'
|-FieldDecl 0x5607cb32fdf8 <line:96:5, col:13> col:13 referenced option_length 'uint8_t':'unsigned char'
`-FieldDecl 0x5607cb32fea8 <line:97:5, col:21> col:13 referenced nd_sha 'uint8_t [6]'

Layout: <CGRecordLayout
  LLVMType:%struct.click_nd_sol = type { i8, i8, i16, i32, [16 x i8], i8, i8, [6 x i8] }
  NonVirtualBaseLLVMType:%struct.click_nd_sol = type { i8, i8, i16, i32, [16 x i8], i8, i8, [6 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607cb2b1840 prev 0x5607cb28e100 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x5607cb2b1978 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x5607cb2b1a08 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x5607cb2b1ab0 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x5607cb2b1b50 <col:20>
| `-OptimizeNoneAttr 0x5607cb2b1ba8 <col:30>
|-CXXMethodDecl 0x5607cb2b1bf8 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x5607cb2b1c98 <col:20>
| `-OptimizeNoneAttr 0x5607cb2b1cf0 <col:30>
|-CXXMethodDecl 0x5607cb2b1d40 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5607cb2b1e08 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5607cb2b1ed0 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5607cb2b1fe8 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x5607cb2b20b0 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x5607cb2b2150 <col:20>
| `-OptimizeNoneAttr 0x5607cb2b21a8 <col:30>
|-CXXMethodDecl 0x5607cb2b2218 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x5607cb2b22b8 <col:20>
| `-OptimizeNoneAttr 0x5607cb2b2310 <col:30>
|-CXXMethodDecl 0x5607cb2b23b8 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x5607cb2b2458 <col:20>
| `-OptimizeNoneAttr 0x5607cb2b24b0 <col:30>
|-CXXMethodDecl 0x5607cb2b2500 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5607cb2b2618 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x5607cb2b2738 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x5607cb2b2858 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x5607cb2b2920 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x5607cb2b29c0 <col:62> "" ""
|-AccessSpecDecl 0x5607cb2b2a30 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x5607cb2b2a90 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x5607cb2b3688 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x5607cb2b38b0 <col:29, col:31>
|-CXXMethodDecl 0x5607cb2b2b58 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x5607cb2b2c98 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x5607cb2b2c08 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x5607cb2b2d90 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x5607cb2b38c0 <col:23, col:25>
|-CXXMethodDecl 0x5607cb2b2f48 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x5607cb2b2e80 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x5607cb2b3218 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5607cb2b3000 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5607cb2b3078 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5607cb2b30f0 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5607cb2b33a8 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x5607cb2b32e0 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x5607cb2b34a0 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x5607cb2b3508 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x5607cb2b3508
  `-ParmVarDecl 0x5607cb2b3618 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_nd_adv
         0 |   uint8_t type
         1 |   uint8_t code
         2 |   uint16_t checksum
         4 |   uint8_t flags
         5 |   uint8_t [3] reserved
         8 |   uint8_t [16] nd_tpa
        24 |   uint8_t option_type
        25 |   uint8_t option_length
        26 |   uint8_t [6] nd_tha
           | [sizeof=32, dsize=32, align=2,
           |  nvsize=32, nvalign=2]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607cb32ff10 <../dummy_inc/clicknet/ether.h:101:1, line:114:1> line:101:8 referenced struct click_nd_adv definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5607cb330028 <col:1, col:8> col:8 implicit struct click_nd_adv
|-FieldDecl 0x5607cb3300c8 <line:102:5, col:13> col:13 referenced type 'uint8_t':'unsigned char'
|-FieldDecl 0x5607cb330128 <line:103:5, col:13> col:13 code 'uint8_t':'unsigned char'
|-FieldDecl 0x5607cb330188 <line:104:5, col:14> col:14 checksum 'uint16_t':'unsigned short'
|-FieldDecl 0x5607cb3301e8 <line:105:5, col:13> col:13 flags 'uint8_t':'unsigned char'
|-FieldDecl 0x5607cb330318 <line:109:5, col:23> col:13 reserved 'uint8_t [3]'
|-FieldDecl 0x5607cb3303c8 <line:110:5, col:22> col:13 referenced nd_tpa 'uint8_t [16]'
|-FieldDecl 0x5607cb330428 <line:111:5, col:13> col:13 option_type 'uint8_t':'unsigned char'
|-FieldDecl 0x5607cb330488 <line:112:5, col:13> col:13 option_length 'uint8_t':'unsigned char'
`-FieldDecl 0x5607cb330538 <line:113:5, col:21> col:13 referenced nd_tha 'uint8_t [6]'

Layout: <CGRecordLayout
  LLVMType:%struct.click_nd_adv = type { i8, i8, i16, i8, [3 x i8], [16 x i8], i8, i8, [6 x i8] }
  NonVirtualBaseLLVMType:%struct.click_nd_adv = type { i8, i8, i16, i8, [3 x i8], [16 x i8], i8, i8, [6 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class StringAccum
         0 |   struct StringAccum::rep_t r_
         0 |     unsigned char * s
         8 |     int len
        12 |     int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607cb3ddd30 <../dummy_inc/click/straccum.hh:112:5, line:122:5> line:112:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5607cb3dde48 <col:5, col:12> col:12 implicit referenced struct rep_t
|-FieldDecl 0x5607cb3ddef0 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
|-FieldDecl 0x5607cb3ddf58 <line:114:2, col:6> col:6 referenced len 'int'
|-FieldDecl 0x5607cb3ddfc0 <line:115:2, col:6> col:6 referenced cap 'int'
|-CXXConstructorDecl 0x5607cb3de070 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| |-CXXCtorInitializer Field 0x5607cb3ddef0 's' 'unsigned char *'
| | `-CXXReinterpretCastExpr 0x5607cb3deef0 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| |   `-CXXConstCastExpr 0x5607cb3deea8 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| |     `-CallExpr 0x5607cb3dee70 <col:63, col:82> 'const char *'
| |       `-ImplicitCastExpr 0x5607cb3dee58 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| |         `-DeclRefExpr 0x5607cb3dee00 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x5607cb0b88f0 'empty_data' 'const char *()'
| |-CXXCtorInitializer Field 0x5607cb3ddf58 'len' 'int'
| | `-IntegerLiteral 0x5607cb3def68 <line:118:12> 'int' 0
| |-CXXCtorInitializer Field 0x5607cb3ddfc0 'cap' 'int'
| | `-IntegerLiteral 0x5607cb3defd0 <col:20> 'int' 0
| `-CompoundStmt 0x5607cb3df050 <col:23, line:119:2>
|-CXXConstructorDecl 0x5607cb3de1e8 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| |-ParmVarDecl 0x5607cb3de128 <col:17> col:35 'uninitialized_type'
| `-CompoundStmt 0x5607cb3df060 <col:37, line:121:2>
|-CXXConstructorDecl 0x5607cb3e1278 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5607cb3e1388 <col:12> col:12 used 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x5607cb3ddef0 's' 'unsigned char *'
| | `-ImplicitCastExpr 0x5607cb3e2d40 <col:12> 'unsigned char *' <LValueToRValue>
| |   `-MemberExpr 0x5607cb3e2d10 <col:12> 'unsigned char *const' lvalue .s 0x5607cb3ddef0
| |     `-DeclRefExpr 0x5607cb3e2cf0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5607cb3e1388 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x5607cb3ddf58 'len' 'int'
| | `-ImplicitCastExpr 0x5607cb3e2dd0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5607cb3e2da0 <col:12> 'const int' lvalue .len 0x5607cb3ddf58
| |     `-DeclRefExpr 0x5607cb3e2d80 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5607cb3e1388 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x5607cb3ddfc0 'cap' 'int'
| | `-ImplicitCastExpr 0x5607cb3e2e60 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5607cb3e2e30 <col:12> 'const int' lvalue .cap 0x5607cb3ddfc0
| |     `-DeclRefExpr 0x5607cb3e2e10 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5607cb3e1388 '' 'const StringAccum::rep_t &'
| `-CompoundStmt 0x5607cb3e2eb8 <col:12>
|-CXXConstructorDecl 0x5607cb3e1428 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x5607cb3e1428
| `-ParmVarDecl 0x5607cb3e1538 <col:12> col:12 'StringAccum::rep_t &&'
`-CXXDestructorDecl 0x5607cb3e3170 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  NonVirtualBaseLLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607cb3d9458 prev 0x5607cb330bf0 <../dummy_inc/click/straccum.hh:28:1, line:137:1> line:28:7 referenced class StringAccum definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5607cb3d9550 <col:1, col:7> col:7 implicit referenced class StringAccum
|-AccessSpecDecl 0x5607cb3d95e0 <col:21, col:27> col:21 public
|-TypedefDecl 0x5607cb3d9620 <line:30:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x5607cad63e00 'const char *'
|   `-QualType 0x5607cad63351 'const char' const
|     `-BuiltinType 0x5607cad63350 'char'
|-TypedefDecl 0x5607cb3d9690 <line:31:5, col:19> col:19 referenced iterator 'char *'
| `-PointerType 0x5607cad63fd0 'char *'
|   `-BuiltinType 0x5607cad63350 'char'
|-TypedefDecl 0x5607cb3d97d0 <line:33:5, col:57> col:32 referenced unspecified_bool_type 'int (StringAccum::*)() const'
| `-MemberPointerType 0x5607cb3d9740 'int (StringAccum::*)() const'
|   |-RecordType 0x5607cb0231b0 'StringAccum'
|   | `-CXXRecord 0x5607cb3d9458 'StringAccum'
|   `-ParenType 0x5607cb092900 'int () const' sugar
|     `-FunctionProtoType 0x5607cb066490 'int () const' const cdecl
|       `-BuiltinType 0x5607cad633b0 'int'
|-CXXConstructorDecl 0x5607cb3d9890 <line:35:5, col:24> col:12 used StringAccum 'void ()' inline
|-CXXConstructorDecl 0x5607cb3d99e0 <line:36:5, col:45> col:21 StringAccum 'void (int)' inline
| `-ParmVarDecl 0x5607cb3d9950 <col:33, col:37> col:37 capacity 'int'
|-CXXConstructorDecl 0x5607cb3d9b30 <line:37:5, col:41> col:12 StringAccum 'void (const String &)' inline
| `-ParmVarDecl 0x5607cb3d9aa0 <col:24, col:38> col:38 str 'const String &'
|-CXXConstructorDecl 0x5607cb3d9cd8 <line:38:5, col:44> col:12 StringAccum 'void (const StringAccum &)' inline
| `-ParmVarDecl 0x5607cb3d9c18 <col:24, col:43> col:43 x 'const StringAccum &'
|-CXXConstructorDecl 0x5607cb3d9e88 <line:40:5, col:39> col:12 StringAccum 'void (StringAccum &&)' inline
| `-ParmVarDecl 0x5607cb3d9dc8 <col:24, col:38> col:38 x 'StringAccum &&'
|-CXXDestructorDecl 0x5607cb3d9f80 <line:42:5, col:25> col:12 used ~StringAccum 'void () noexcept' inline
|-CXXMethodDecl 0x5607cb3da138 <line:44:5, col:55> col:25 operator= 'StringAccum &(const StringAccum &)' inline
| `-ParmVarDecl 0x5607cb3da070 <col:35, col:54> col:54 x 'const StringAccum &'
|-CXXMethodDecl 0x5607cb3da2b8 <line:46:5, col:50> col:25 operator= 'StringAccum &(StringAccum &&)' inline
| `-ParmVarDecl 0x5607cb3da1f0 <col:35, col:49> col:49 x 'StringAccum &&'
|-CXXMethodDecl 0x5607cb3da3b0 <line:49:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5607cb3da478 <line:50:5, col:23> col:18 data 'char *()' inline
|-CXXMethodDecl 0x5607cb3da540 <line:51:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5607cb3da608 <line:52:5, col:27> col:16 used capacity 'int () const' inline
|-CXXMethodDecl 0x5607cb3da6d0 <line:54:5, col:23> col:17 c_str 'const char *()'
|-CXXConversionDecl 0x5607cb3da838 <line:56:5, col:45> col:12 operator int (StringAccum::*)() const 'StringAccum::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5607cb3da908 <line:57:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5607cb3da9c8 <line:58:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5607cb3daad8 <line:60:5, col:35> col:27 used begin 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x5607cb3dabe8 <line:61:5, col:27> col:21 begin 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x5607cb3daca8 <line:62:5, col:33> col:27 used end 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x5607cb3dad68 <line:63:5, col:25> col:21 end 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x5607cb3daeb0 <line:65:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5607cb3dae20 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5607cb3db040 <line:66:5, col:34> col:18 operator[] 'char &(int)' inline
| `-ParmVarDecl 0x5607cb3daf70 <col:29, col:33> col:33 i 'int'
|-CXXMethodDecl 0x5607cb3db108 <line:67:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5607cb3db200 <line:68:5, col:24> col:18 front 'char &()' inline
|-CXXMethodDecl 0x5607cb3db2c0 <line:69:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5607cb3db388 <line:70:5, col:23> col:18 back 'char &()' inline
|-CXXMethodDecl 0x5607cb3db448 <line:72:5, col:33> col:17 used out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5607cb3db508 <line:73:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5607cb3db5c8 <line:75:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5607cb3db718 <line:76:5, col:31> col:18 reserve 'char *(int)' inline
| `-ParmVarDecl 0x5607cb3db680 <col:26, col:30> col:30 n 'int'
|-CXXMethodDecl 0x5607cb3db868 <line:77:5, col:35> col:17 set_length 'void (int)' inline
| `-ParmVarDecl 0x5607cb3db7d8 <col:28, col:32> col:32 len 'int'
|-CXXMethodDecl 0x5607cb3db9c0 <line:78:5, col:23> col:9 resize 'int (int)'
| `-ParmVarDecl 0x5607cb3db928 <col:16, col:20> col:20 len 'int'
|-CXXMethodDecl 0x5607cb3dbb10 <line:79:5, col:40> col:17 used adjust_length 'void (int)' inline
| `-ParmVarDecl 0x5607cb3dba80 <col:31, col:35> col:35 delta 'int'
|-CXXMethodDecl 0x5607cb3dbd30 <line:80:5, col:54> col:18 extend 'char *(int, int)' inline
| |-ParmVarDecl 0x5607cb3dbbd0 <col:25, col:29> col:29 nadjust 'int'
| `-ParmVarDecl 0x5607cb3dbc50 <col:38, col:53> col:42 nreserve 'int' cinit
|   `-IntegerLiteral 0x5607cb3ded28 <col:53> 'int' 0
|-CXXMethodDecl 0x5607cb3dbe88 <line:82:5, col:35> col:17 pop_back 'void (int)' inline
| `-ParmVarDecl 0x5607cb3dbdf8 <col:26, col:34> col:30 n 'int' cinit
|   `-IntegerLiteral 0x5607cb3ded48 <col:34> 'int' 1
|-CXXMethodDecl 0x5607cb3dbfd0 <line:84:5, col:30> col:17 used append 'void (char)' inline
| `-ParmVarDecl 0x5607cb3dbf40 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5607cb3dc120 <line:85:5, col:39> col:17 used append 'void (unsigned char)' inline
| `-ParmVarDecl 0x5607cb3dc090 <col:24, col:38> col:38 c 'unsigned char'
|-CXXMethodDecl 0x5607cb3dc270 <line:86:5, col:35> col:17 append_utf8 'bool (int)' inline
| `-ParmVarDecl 0x5607cb3dc1e0 <col:29, col:33> col:33 ch 'int'
|-CXXMethodDecl 0x5607cb3dc3c0 <line:87:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5607cb3dc330 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5607cb3dc598 <line:88:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5607cb3dc480 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5607cb3dc500 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5607cb3dc778 <line:89:5, col:55> col:17 used append 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5607cb3dc660 <col:24, col:45> col:45 s 'const unsigned char *'
| `-ParmVarDecl 0x5607cb3dc6e0 <col:48, col:52> col:52 len 'int'
|-CXXMethodDecl 0x5607cb3dc958 <line:90:5, col:59> col:17 used append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5607cb3dc840 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5607cb3dc8c0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5607cb3dcb38 <line:91:5, col:77> col:17 append 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5607cb3dca20 <col:24, col:45> col:45 first 'const unsigned char *'
| `-ParmVarDecl 0x5607cb3dcaa0 <col:52, col:73> col:73 last 'const unsigned char *'
|-CXXMethodDecl 0x5607cb3dcd18 <line:92:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5607cb3dcc00 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5607cb3dcc80 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5607cb3dd078 <line:93:5, col:81> col:10 used append_numeric 'void (String::intmax_t, int, bool)'
| |-ParmVarDecl 0x5607cb3dce60 <col:25, col:42> col:42 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5607cb3dcee0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5607cb3ded68 <col:56> 'int' 10
| `-ParmVarDecl 0x5607cb3dcf58 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5607cb3ded88 <col:77> 'bool' true
|-CXXMethodDecl 0x5607cb3dd3d8 <line:94:5, col:82> col:10 used append_numeric 'void (String::uintmax_t, int, bool)'
| |-ParmVarDecl 0x5607cb3dd1c0 <col:25, col:43> col:43 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5607cb3dd240 <col:46, col:57> col:50 base 'int' cinit
| | `-IntegerLiteral 0x5607cb3ded98 <col:57> 'int' 10
| `-ParmVarDecl 0x5607cb3dd2b8 <col:61, col:78> col:66 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5607cb3dedb8 <col:78> 'bool' true
|-CXXMethodDecl 0x5607cb3dd600 <line:96:5, col:57> col:18 snprintf 'StringAccum &(int, const char *, ...)'
| |-ParmVarDecl 0x5607cb3dd4a8 <col:27, col:31> col:31 n 'int'
| `-ParmVarDecl 0x5607cb3dd528 <col:34, col:46> col:46 format 'const char *'
|-CXXMethodDecl 0x5607cb3dd770 <line:98:5, col:24> col:12 used take_string 'String ()'
|-CXXMethodDecl 0x5607cb3dd8e8 <line:100:5, col:29> col:10 used swap 'void (StringAccum &)'
| `-ParmVarDecl 0x5607cb3dd820 <col:15, col:28> col:28 x 'StringAccum &'
|-CXXMethodDecl 0x5607cb3dda38 <line:104:5, col:62> col:17 forward 'void (int)' inline
| |-ParmVarDecl 0x5607cb3dd9a8 <col:25, col:29> col:29 delta 'int'
| `-DeprecatedAttr 0x5607cb3ddae0 <col:51> "" ""
|-AccessSpecDecl 0x5607cb3ddb50 <line:106:3, col:10> col:3 private
|-EnumDecl 0x5607cb3ddb78 <line:108:5, line:110:5> line:108:5
| `-EnumConstantDecl 0x5607cb3ddcc8 <line:109:2, col:23> col:2 referenced MEMO_SPACE 'StringAccum::(anonymous enum at ../dummy_inc/click/straccum.hh:108:5)'
|   `-ImplicitCastExpr 0x5607cb3ddd18 <col:15, col:23> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5607cb3ddca8 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' Int: 12
|       `-DeclRefExpr 0x5607cb3ddc78 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' EnumConstant 0x5607cb09b668 'MEMO_SPACE' 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|-CXXRecordDecl 0x5607cb3ddd30 <line:112:5, line:122:5> line:112:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5607cb3dde48 <col:5, col:12> col:12 implicit referenced struct rep_t
| |-FieldDecl 0x5607cb3ddef0 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
| |-FieldDecl 0x5607cb3ddf58 <line:114:2, col:6> col:6 referenced len 'int'
| |-FieldDecl 0x5607cb3ddfc0 <line:115:2, col:6> col:6 referenced cap 'int'
| |-CXXConstructorDecl 0x5607cb3de070 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| | |-CXXCtorInitializer Field 0x5607cb3ddef0 's' 'unsigned char *'
| | | `-CXXReinterpretCastExpr 0x5607cb3deef0 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| | |   `-CXXConstCastExpr 0x5607cb3deea8 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| | |     `-CallExpr 0x5607cb3dee70 <col:63, col:82> 'const char *'
| | |       `-ImplicitCastExpr 0x5607cb3dee58 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| | |         `-DeclRefExpr 0x5607cb3dee00 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x5607cb0b88f0 'empty_data' 'const char *()'
| | |-CXXCtorInitializer Field 0x5607cb3ddf58 'len' 'int'
| | | `-IntegerLiteral 0x5607cb3def68 <line:118:12> 'int' 0
| | |-CXXCtorInitializer Field 0x5607cb3ddfc0 'cap' 'int'
| | | `-IntegerLiteral 0x5607cb3defd0 <col:20> 'int' 0
| | `-CompoundStmt 0x5607cb3df050 <col:23, line:119:2>
| |-CXXConstructorDecl 0x5607cb3de1e8 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| | |-ParmVarDecl 0x5607cb3de128 <col:17> col:35 'uninitialized_type'
| | `-CompoundStmt 0x5607cb3df060 <col:37, line:121:2>
| |-CXXConstructorDecl 0x5607cb3e1278 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5607cb3e1388 <col:12> col:12 used 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x5607cb3ddef0 's' 'unsigned char *'
| | | `-ImplicitCastExpr 0x5607cb3e2d40 <col:12> 'unsigned char *' <LValueToRValue>
| | |   `-MemberExpr 0x5607cb3e2d10 <col:12> 'unsigned char *const' lvalue .s 0x5607cb3ddef0
| | |     `-DeclRefExpr 0x5607cb3e2cf0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5607cb3e1388 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x5607cb3ddf58 'len' 'int'
| | | `-ImplicitCastExpr 0x5607cb3e2dd0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5607cb3e2da0 <col:12> 'const int' lvalue .len 0x5607cb3ddf58
| | |     `-DeclRefExpr 0x5607cb3e2d80 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5607cb3e1388 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x5607cb3ddfc0 'cap' 'int'
| | | `-ImplicitCastExpr 0x5607cb3e2e60 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5607cb3e2e30 <col:12> 'const int' lvalue .cap 0x5607cb3ddfc0
| | |     `-DeclRefExpr 0x5607cb3e2e10 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5607cb3e1388 '' 'const StringAccum::rep_t &'
| | `-CompoundStmt 0x5607cb3e2eb8 <col:12>
| |-CXXConstructorDecl 0x5607cb3e1428 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x5607cb3e1428
| | `-ParmVarDecl 0x5607cb3e1538 <col:12> col:12 'StringAccum::rep_t &&'
| `-CXXDestructorDecl 0x5607cb3e3170 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-FieldDecl 0x5607cb3de2c0 <line:124:5, col:11> col:11 referenced r_ 'StringAccum::rep_t'
|-CXXMethodDecl 0x5607cb3de3c0 <line:126:5, col:19> col:11 used grow 'char *(int)'
| `-ParmVarDecl 0x5607cb3de328 <col:16> col:19 'int'
|-CXXMethodDecl 0x5607cb3de5a0 <line:127:5, col:48> col:11 used hard_extend 'char *(int, int)'
| |-ParmVarDecl 0x5607cb3de480 <col:23, col:27> col:27 nadjust 'int'
| `-ParmVarDecl 0x5607cb3de500 <col:36, col:40> col:40 nreserve 'int'
|-CXXMethodDecl 0x5607cb3de780 <line:128:5, col:44> col:10 used hard_append 'void (const char *, int)'
| |-ParmVarDecl 0x5607cb3de668 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5607cb3de6e8 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5607cb3de8d8 <line:129:5, col:43> col:10 used hard_append_cstr 'void (const char *)'
| `-ParmVarDecl 0x5607cb3de848 <col:27, col:39> col:39 cstr 'const char *'
|-CXXMethodDecl 0x5607cb3dea28 <line:130:5, col:33> col:10 used append_utf8_hard 'bool (int)'
| `-ParmVarDecl 0x5607cb3de998 <col:27, col:31> col:31 ch 'int'
`-FriendDecl 0x5607cb3dece8 <line:132:5, col:70> col:25
  `-FunctionDecl 0x5607cb3dec28 parent 0x5607cad632b8 <col:5, col:70> col:25 operator<< 'StringAccum &(StringAccum &, const String &)'
    |-ParmVarDecl 0x5607cb3deae0 <col:36, col:49> col:49 sa 'StringAccum &'
    `-ParmVarDecl 0x5607cb3deb58 <col:53, col:67> col:67 str 'const String &'

Layout: <CGRecordLayout
  LLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  NonVirtualBaseLLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class IP6Address>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class IP6Address * _ptr
        24 |   class IP6Address _slot
        24 |     struct in6_addr _addr
        24 |       union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
        24 |         uint8_t [16] __u6_addr8
        24 |         uint16_t [8] __u6_addr16
        24 |         uint32_t [4] __u6_addr32
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct uninitialized_type (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607caebaa48 <../dummy_inc/click/config.h:317:1, line:318:1> line:317:8 referenced struct uninitialized_type definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5607caebab68 <col:1, col:8> col:8 implicit struct uninitialized_type
|-CXXConstructorDecl 0x5607cb0cc9e0 <col:8> col:8 implicit referenced constexpr uninitialized_type 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5607cb0ccac0 <col:8> col:8 implicit constexpr uninitialized_type 'void (const uninitialized_type &)' inline default trivial noexcept-unevaluated 0x5607cb0ccac0
| `-ParmVarDecl 0x5607cb0ccba8 <col:8> col:8 'const uninitialized_type &'
|-CXXConstructorDecl 0x5607cb0ccc48 <col:8> col:8 implicit constexpr uninitialized_type 'void (uninitialized_type &&)' inline default trivial noexcept-unevaluated 0x5607cb0ccc48
| `-ParmVarDecl 0x5607cb0ccd58 <col:8> col:8 'uninitialized_type &&'
`-CXXDestructorDecl 0x5607cb269a40 <col:8> col:8 implicit referenced ~uninitialized_type 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.uninitialized_type = type { i8 }
  NonVirtualBaseLLVMType:%struct.uninitialized_type = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct IP6AddressArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class IP6Address> (empty)
         0 |   struct IP6AddressArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607cb30edc8 <../dummy_inc/click/ip6address.hh:373:1, line:383:1> line:373:8 referenced struct IP6AddressArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5607cb30eee8 <col:1, col:8> col:8 implicit struct IP6AddressArg
|-CXXMethodDecl 0x5607cb30f190 <line:374:5, line:375:43> line:374:24 basic_parse 'const char *(const String &, IP6Address &, const ArgContext &)' static
| |-ParmVarDecl 0x5607cb30ef88 <col:36, col:50> col:50 str 'const String &'
| |-ParmVarDecl 0x5607cb30f000 <col:55, col:67> col:67 result 'IP6Address &'
| `-ParmVarDecl 0x5607cb30f078 <line:375:8, col:33> col:26 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5607cb30f7e8 <col:33> 'const ArgContext' lvalue Var 0x5607cb2e50e0 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x5607cb30f428 <line:376:5, line:377:44> line:376:17 used parse 'bool (const String &, IP6Address &, const ArgContext &)' static
| |-ParmVarDecl 0x5607cb30f258 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x5607cb30f2d0 <col:42, col:54> col:54 result 'IP6Address &'
| `-ParmVarDecl 0x5607cb30f348 <line:377:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5607cb30f808 <col:34> 'const ArgContext' lvalue Var 0x5607cb2e50e0 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x5607cb30f718 <line:378:5, line:381:5> line:378:17 parse 'bool (const String &, struct in6_addr &, const ArgContext &)' static
| |-ParmVarDecl 0x5607cb30f4f0 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x5607cb30f580 <col:42, col:59> col:59 used result 'struct in6_addr &'
| |-ParmVarDecl 0x5607cb30f5f8 <line:379:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5607cb30f828 <col:34> 'const ArgContext' lvalue Var 0x5607cb2e50e0 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5607cb30f9e8 <col:46, line:381:5>
|   `-ReturnStmt 0x5607cb30f9d8 <line:380:9, col:71>
|     `-CallExpr 0x5607cb30f9a0 <col:16, col:71> 'bool'
|       |-ImplicitCastExpr 0x5607cb30f988 <col:16> 'bool (*)(const String &, IP6Address &, const ArgContext &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5607cb30f938 <col:16> 'bool (const String &, IP6Address &, const ArgContext &)' lvalue CXXMethod 0x5607cb30f428 'parse' 'bool (const String &, IP6Address &, const ArgContext &)'
|       |-DeclRefExpr 0x5607cb30f898 <col:22> 'const String' lvalue ParmVar 0x5607cb30f4f0 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x5607cb30f8e8 <col:27, col:64> 'IP6Address' lvalue reinterpret_cast<class IP6Address &> <LValueBitCast>
|       | `-DeclRefExpr 0x5607cb30f8b8 <col:58> 'struct in6_addr':'in6_addr' lvalue ParmVar 0x5607cb30f580 'result' 'struct in6_addr &'
|       `-DeclRefExpr 0x5607cb30f918 <col:67> 'const ArgContext' lvalue ParmVar 0x5607cb30f5f8 'args' 'const ArgContext &'
|-CXXConstructorDecl 0x5607cb4bf0a8 <line:373:8> col:8 implicit constexpr IP6AddressArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x5607cb4bf180 <col:8> col:8 implicit ~IP6AddressArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5607cb4bf2b8 <col:8> col:8 implicit constexpr IP6AddressArg 'void (const IP6AddressArg &)' inline default trivial noexcept-unevaluated 0x5607cb4bf2b8
| `-ParmVarDecl 0x5607cb4bf3c8 <col:8> col:8 'const IP6AddressArg &'
`-CXXConstructorDecl 0x5607cb4bf468 <col:8> col:8 implicit used constexpr IP6AddressArg 'void (IP6AddressArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5607cb4bf578 <col:8> col:8 'IP6AddressArg &&'
  `-CompoundStmt 0x5607cb4c01d0 <col:8>

Layout: <CGRecordLayout
  LLVMType:%struct.IP6AddressArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.IP6AddressArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5607cb310b90 <../dummy_inc/click/ip6address.hh:403:1, col:66> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IP6AddressArg'
|-TemplateArgument type 'IP6Address'
|-CXXRecordDecl 0x5607cb310de8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5607cb4befb8 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5607cb4bf5e8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<IP6Address> &)' inline default trivial noexcept-unevaluated 0x5607cb4bf5e8
| `-ParmVarDecl 0x5607cb4bf6f8 <col:19> col:19 'const DefaultArg<IP6Address> &'
|-CXXConstructorDecl 0x5607cb4bf798 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<IP6Address> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5607cb4bf8a8 <col:19> col:19 used 'DefaultArg<IP6Address> &&'
| |-CXXCtorInitializer 'IP6AddressArg'
| | `-CXXConstructExpr 0x5607cb4c01e0 <col:19> 'IP6AddressArg' 'void (IP6AddressArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5607cb4c01b0 <col:19> 'IP6AddressArg' xvalue <UncheckedDerivedToBase (IP6AddressArg)>
| |     `-CXXStaticCastExpr 0x5607cb4c0180 <col:19> 'DefaultArg<IP6Address>' xvalue static_cast<struct DefaultArg<class IP6Address> &&> <NoOp>
| |       `-DeclRefExpr 0x5607cb4c0150 <col:19> 'DefaultArg<IP6Address>' lvalue ParmVar 0x5607cb4bf8a8 '' 'DefaultArg<IP6Address> &&'
| `-CompoundStmt 0x5607cb4c0250 <col:19>
`-CXXDestructorDecl 0x5607cb4bf948 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class EtherAddressArg
         0 |   int flags_
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class EtherAddress>
         0 |   class EtherAddressArg (base)
         0 |     int flags_
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5607cb2e5148 <../dummy_inc/click/etheraddress.hh:205:1, line:224:1> line:205:7 referenced class EtherAddressArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5607cb2e5268 <col:1, col:7> col:7 implicit referenced class EtherAddressArg
|-AccessSpecDecl 0x5607cb2e52f8 <col:25, col:31> col:25 public
|-TypedefDecl 0x5607cb2e5330 <line:206:5, col:18> col:18 referenced enable_direct_parse 'void'
| `-BuiltinType 0x5607cad63310 'void'
|-CXXConstructorDecl 0x5607cb2e5478 <line:207:5, col:53> col:5 used EtherAddressArg 'void (int)'
| |-ParmVarDecl 0x5607cb2e53a0 <col:21, col:33> col:25 used flags 'int' cinit
| | `-IntegerLiteral 0x5607cb2e6700 <col:33> 'int' 0
| |-CXXCtorInitializer Field 0x5607cb2e6030 'flags_' 'int'
| | `-ImplicitCastExpr 0x5607cb2e67a0 <col:45> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5607cb2e6760 <col:45> 'int' lvalue ParmVar 0x5607cb2e53a0 'flags' 'int'
| `-CompoundStmt 0x5607cb2e67e8 <col:52, col:53>
|-CXXMethodDecl 0x5607cb2e5738 <line:208:5, line:210:5> line:208:17 used parse 'bool (const String &, EtherAddress &, const ArgContext &)' inline
| |-ParmVarDecl 0x5607cb2e5538 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x5607cb2e55d8 <col:42, col:56> col:56 used value 'EtherAddress &'
| |-ParmVarDecl 0x5607cb2e5650 <col:63, col:88> col:81 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5607cb2e6720 <col:88> 'const ArgContext' lvalue Var 0x5607cb2e50e0 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5607cb246478 <col:100, line:210:5>
|   `-ReturnStmt 0x5607cb246468 <line:209:9, col:46>
|     `-CallExpr 0x5607cb246410 <col:16, col:46> 'bool'
|       |-ImplicitCastExpr 0x5607cb2463f8 <col:16> 'bool (*)(const String &, EtherAddress &, const ArgContext &, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5607cb2463b0 <col:16> 'bool (const String &, EtherAddress &, const ArgContext &, int)' lvalue CXXMethod 0x5607cb2e62f8 'parse' 'bool (const String &, EtherAddress &, const ArgContext &, int)'
|       |-DeclRefExpr 0x5607cb2e6860 <col:22> 'const String' lvalue ParmVar 0x5607cb2e5538 'str' 'const String &'
|       |-DeclRefExpr 0x5607cb2e6880 <col:27> 'EtherAddress' lvalue ParmVar 0x5607cb2e55d8 'value' 'EtherAddress &'
|       |-DeclRefExpr 0x5607cb2e68a0 <col:34> 'const ArgContext' lvalue ParmVar 0x5607cb2e5650 'args' 'const ArgContext &'
|       `-ImplicitCastExpr 0x5607cb246450 <col:40> 'int' <LValueToRValue>
|         `-MemberExpr 0x5607cb2e68d0 <col:40> 'int' lvalue ->flags_ 0x5607cb2e6030
|           `-CXXThisExpr 0x5607cb2e68c0 <col:40> 'EtherAddressArg *' implicit this
|-CXXMethodDecl 0x5607cb2e59d8 <line:211:5, line:213:5> line:211:17 parse 'bool (const String &, unsigned char *, const ArgContext &)' inline
| |-ParmVarDecl 0x5607cb2e5800 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x5607cb2e5880 <col:42, col:57> col:57 used value 'unsigned char *'
| |-ParmVarDecl 0x5607cb2e58f8 <col:64, col:89> col:82 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5607cb2e6740 <col:89> 'const ArgContext' lvalue Var 0x5607cb2e50e0 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5607cb246650 <col:101, line:213:5>
|   `-ReturnStmt 0x5607cb246640 <line:212:2, col:66>
|     `-CXXMemberCallExpr 0x5607cb246608 <col:9, col:66> 'bool'
|       |-MemberExpr 0x5607cb2465d8 <col:9> '<bound member function type>' ->parse 0x5607cb2e5738
|       | `-CXXThisExpr 0x5607cb2465c8 <col:9> 'EtherAddressArg *' implicit this
|       |-DeclRefExpr 0x5607cb2464f8 <col:15> 'const String' lvalue ParmVar 0x5607cb2e5800 'str' 'const String &'
|       |-UnaryOperator 0x5607cb246590 <col:20, col:59> 'EtherAddress' lvalue prefix '*' cannot overflow
|       | `-CXXReinterpretCastExpr 0x5607cb246560 <col:21, col:59> 'EtherAddress *' reinterpret_cast<class EtherAddress *> <BitCast>
|       |   `-ImplicitCastExpr 0x5607cb246548 <col:54> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|       |     `-DeclRefExpr 0x5607cb246518 <col:54> 'unsigned char *' lvalue ParmVar 0x5607cb2e5880 'value' 'unsigned char *'
|       `-DeclRefExpr 0x5607cb2465a8 <col:62> 'const ArgContext' lvalue ParmVar 0x5607cb2e58f8 'args' 'const ArgContext &'
|-CXXMethodDecl 0x5607cb2e5c98 <line:214:5, line:216:5> line:214:17 used direct_parse 'bool (const String &, EtherAddress &, Args &)' inline
| |-ParmVarDecl 0x5607cb2e5aa0 <col:30, col:44> col:44 used str 'const String &'
| |-ParmVarDecl 0x5607cb2e5b18 <col:49, col:63> col:63 used value 'EtherAddress &'
| |-ParmVarDecl 0x5607cb2e5bb8 <col:70, col:76> col:76 used args 'Args &'
| `-CompoundStmt 0x5607cb246838 <col:82, line:216:5>
|   `-ReturnStmt 0x5607cb246828 <line:215:9, col:53>
|     `-CallExpr 0x5607cb2467d0 <col:16, col:53> 'bool'
|       |-ImplicitCastExpr 0x5607cb2467b8 <col:16> 'bool (*)(const String &, EtherAddress &, Args &, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5607cb246770 <col:16> 'bool (const String &, EtherAddress &, Args &, int)' lvalue CXXMethod 0x5607cb2e6628 'direct_parse' 'bool (const String &, EtherAddress &, Args &, int)'
|       |-DeclRefExpr 0x5607cb2466d0 <col:29> 'const String' lvalue ParmVar 0x5607cb2e5aa0 'str' 'const String &'
|       |-DeclRefExpr 0x5607cb2466f0 <col:34> 'EtherAddress' lvalue ParmVar 0x5607cb2e5b18 'value' 'EtherAddress &'
|       |-DeclRefExpr 0x5607cb246710 <col:41> 'Args' lvalue ParmVar 0x5607cb2e5bb8 'args' 'Args &'
|       `-ImplicitCastExpr 0x5607cb246810 <col:47> 'int' <LValueToRValue>
|         `-MemberExpr 0x5607cb246740 <col:47> 'int' lvalue ->flags_ 0x5607cb2e6030
|           `-CXXThisExpr 0x5607cb246730 <col:47> 'EtherAddressArg *' implicit this
|-CXXMethodDecl 0x5607cb2e5f38 <line:217:5, line:219:5> line:217:17 direct_parse 'bool (const String &, unsigned char *, Args &)' inline
| |-ParmVarDecl 0x5607cb2e5d60 <col:30, col:44> col:44 used str 'const String &'
| |-ParmVarDecl 0x5607cb2e5de0 <col:49, col:64> col:64 used value 'unsigned char *'
| |-ParmVarDecl 0x5607cb2e5e58 <col:71, col:77> col:77 used args 'Args &'
| `-CompoundStmt 0x5607cb246a10 <col:83, line:219:5>
|   `-ReturnStmt 0x5607cb246a00 <line:218:2, col:73>
|     `-CXXMemberCallExpr 0x5607cb2469c8 <col:9, col:73> 'bool'
|       |-MemberExpr 0x5607cb246998 <col:9> '<bound member function type>' ->direct_parse 0x5607cb2e5c98
|       | `-CXXThisExpr 0x5607cb246988 <col:9> 'EtherAddressArg *' implicit this
|       |-DeclRefExpr 0x5607cb2468b8 <col:22> 'const String' lvalue ParmVar 0x5607cb2e5d60 'str' 'const String &'
|       |-UnaryOperator 0x5607cb246950 <col:27, col:66> 'EtherAddress' lvalue prefix '*' cannot overflow
|       | `-CXXReinterpretCastExpr 0x5607cb246920 <col:28, col:66> 'EtherAddress *' reinterpret_cast<class EtherAddress *> <BitCast>
|       |   `-ImplicitCastExpr 0x5607cb246908 <col:61> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|       |     `-DeclRefExpr 0x5607cb2468d8 <col:61> 'unsigned char *' lvalue ParmVar 0x5607cb2e5de0 'value' 'unsigned char *'
|       `-DeclRefExpr 0x5607cb246968 <col:69> 'Args' lvalue ParmVar 0x5607cb2e5e58 'args' 'Args &'
|-AccessSpecDecl 0x5607cb2e5ff0 <line:220:3, col:10> col:3 private
|-FieldDecl 0x5607cb2e6030 <line:221:5, col:9> col:9 referenced flags_ 'int'
|-CXXMethodDecl 0x5607cb2e62f8 <line:222:5, col:96> col:17 used parse 'bool (const String &, EtherAddress &, const ArgContext &, int)' static
| |-ParmVarDecl 0x5607cb2e6090 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x5607cb2e6108 <col:42, col:56> col:56 value 'EtherAddress &'
| |-ParmVarDecl 0x5607cb2e6180 <col:63, col:81> col:81 args 'const ArgContext &'
| `-ParmVarDecl 0x5607cb2e6200 <col:87, col:91> col:91 flags 'int'
|-CXXMethodDecl 0x5607cb2e6628 <line:223:5, col:91> col:17 used direct_parse 'bool (const String &, EtherAddress &, Args &, int)' static
| |-ParmVarDecl 0x5607cb2e63c8 <col:30, col:44> col:44 str 'const String &'
| |-ParmVarDecl 0x5607cb2e6440 <col:49, col:63> col:63 value 'EtherAddress &'
| |-ParmVarDecl 0x5607cb2e64b8 <col:70, col:76> col:76 args 'Args &'
| `-ParmVarDecl 0x5607cb2e6538 <col:82, col:86> col:86 flags 'int'
|-CXXDestructorDecl 0x5607cb4c7e90 <line:205:7> col:7 implicit ~EtherAddressArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5607cb4c7fc8 <col:7> col:7 implicit constexpr EtherAddressArg 'void (const EtherAddressArg &)' inline default trivial noexcept-unevaluated 0x5607cb4c7fc8
| `-ParmVarDecl 0x5607cb4c80d8 <col:7> col:7 'const EtherAddressArg &'
`-CXXConstructorDecl 0x5607cb4c8178 <col:7> col:7 implicit used constexpr EtherAddressArg 'void (EtherAddressArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5607cb4c8288 <col:7> col:7 used 'EtherAddressArg &&'
  |-CXXCtorInitializer Field 0x5607cb2e6030 'flags_' 'int'
  | `-ImplicitCastExpr 0x5607cb4c9068 <col:7> 'int' <LValueToRValue>
  |   `-MemberExpr 0x5607cb4c9020 <col:7> 'int' xvalue .flags_ 0x5607cb2e6030
  |     `-CXXStaticCastExpr 0x5607cb4c8ff0 <col:7> 'EtherAddressArg' xvalue static_cast<class EtherAddressArg &&> <NoOp>
  |       `-DeclRefExpr 0x5607cb4c8fc0 <col:7> 'EtherAddressArg' lvalue ParmVar 0x5607cb4c8288 '' 'EtherAddressArg &&'
  `-CompoundStmt 0x5607cb4c90b0 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.EtherAddressArg = type { i32 }
  NonVirtualBaseLLVMType:%class.EtherAddressArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5607cb246a50 <../dummy_inc/click/etheraddress.hh:226:1, col:70> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'EtherAddressArg'
|-TemplateArgument type 'EtherAddress'
|-CXXRecordDecl 0x5607cb246ca8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5607cb4c7db8 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'EtherAddressArg'
| | `-CXXConstructExpr 0x5607cb4c8690 <col:19> 'EtherAddressArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x5607cb4c8670 <<invalid sloc>> 'int'
| `-CompoundStmt 0x5607cb4c8700 <col:19>
|-CXXConstructorDecl 0x5607cb4c82f8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<EtherAddress> &)' inline default trivial noexcept-unevaluated 0x5607cb4c82f8
| `-ParmVarDecl 0x5607cb4c8408 <col:19> col:19 'const DefaultArg<EtherAddress> &'
|-CXXConstructorDecl 0x5607cb4c84a8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<EtherAddress> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5607cb4c85b8 <col:19> col:19 used 'DefaultArg<EtherAddress> &&'
| |-CXXCtorInitializer 'EtherAddressArg'
| | `-CXXConstructExpr 0x5607cb4c90c0 <col:19> 'EtherAddressArg' 'void (EtherAddressArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5607cb4c8fa0 <col:19> 'EtherAddressArg' xvalue <UncheckedDerivedToBase (EtherAddressArg)>
| |     `-CXXStaticCastExpr 0x5607cb4c8f70 <col:19> 'DefaultArg<EtherAddress>' xvalue static_cast<struct DefaultArg<class EtherAddress> &&> <NoOp>
| |       `-DeclRefExpr 0x5607cb4c8f40 <col:19> 'DefaultArg<EtherAddress>' lvalue ParmVar 0x5607cb4c85b8 '' 'DefaultArg<EtherAddress> &&'
| `-CompoundStmt 0x5607cb4c9130 <col:19>
`-CXXDestructorDecl 0x5607cb4c8740 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.5 = type { %class.EtherAddressArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg.5 = type { %class.EtherAddressArg }
  IsZeroInitializable:1
  BitFields:[
]>
