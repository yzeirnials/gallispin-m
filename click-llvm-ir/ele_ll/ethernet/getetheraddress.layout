
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55709cf7c928 prev 0x55709cf740c8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55709cf7ca20 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55709cf7cab0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55709cf7cb28 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55709cf7cbe8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55709cf7ccb0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55709cf7ce28 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55709cf7cd60 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55709cf7ced0 <col:24>
| `-OptimizeNoneAttr 0x55709cf7cf28 <col:34>
|-CXXMethodDecl 0x55709cf7cf70 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55709cf7d228 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55709cf7d020 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55709cf7d098 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55709cf7d118 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55709cf7d2e0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55709cf7d318 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55709cf7d380 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55709cf7d408 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55709cf7d728 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55709cf7d4c0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55709cf7d538 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55709cf7d5b0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55709cf7d630 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55709cf7d840 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55709cf851b8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55709cf851b8
| `-ParmVarDecl 0x55709cf852c8 <col:11> col:11 'const Element::Port &'
`-CXXConstructorDecl 0x55709cf85368 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55709cf85368
  `-ParmVarDecl 0x55709cf85478 <col:11> col:11 'Element::Port &&'

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55709cf6f940 prev 0x55709cf6f6c0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55709cf6fa38 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55709cf6fac8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55709cf6fb28 <line:31:5, col:13> col:5 Element 'void ()'
|-CXXDestructorDecl 0x55709cf6fc18 <line:32:5, col:22> col:13 ~Element 'void ()' virtual noexcept-unevaluated 0x55709cf6fc18
|-VarDecl 0x55709cf6fd18 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55709cf6fee8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55709cf6fd98 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55709cf6fe10 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55709cf70078 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55709cf6ffb0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55709cf70120 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55709cf70258 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55709cf70190 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55709cf703f8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55709cf70338 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55709cf70598 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55709cf704d8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55709cf70640 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55709cf70740 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55709cf70820 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709cf70720 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55709cf70700 <col:26> 'int' 1
| `-EnumConstantDecl 0x55709cf707d0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55709cf70838 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55709cf707b0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55709cf70790 <col:44> 'int' 2
|-CXXMethodDecl 0x55709cf70980 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55709cf70868 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55709cf708e8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55709cf70ad8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55709cf70a48 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55709cf70d18 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55709cf70b98 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55709cf70c10 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55709cf70dc8 <col:20>
| `-OptimizeNoneAttr 0x55709cf70e20 <col:30>
|-CXXMethodDecl 0x55709cf70f28 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55709cf70e60 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55709cf70fd0 <col:20>
| `-OptimizeNoneAttr 0x55709cf71028 <col:30>
|-CXXMethodDecl 0x55709cf71078 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55709cf71140 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55709cf71258 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55709cf712e0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55709cf71368 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55709cf713f0 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x55709cf71478 <line:59:5, col:35> col:23 used PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55709cf71508 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55709cf715c8 <line:62:5, col:32> col:23 used AGNOSTIC 'const char []' static
|-VarDecl 0x55709cf71650 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55709cf716d8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55709cf71760 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55709cf717e8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55709cf71870 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55709cf71900 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55709cf719c0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55709cf71a50 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55709cf71ba0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55709cf71b08 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55709cf71d30 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55709cf71c60 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55709cf71fe0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55709cf71de8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55709cf71e68 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55709cf71ee8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55709cf72098 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55709cf721a0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55709cf72430 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709cf72180 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55709cf72160 <col:33> 'int' 0
| |-EnumConstantDecl 0x55709cf72230 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55709cf72448 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709cf72210 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55709cf721f0 <col:32> 'int' 20
| |-EnumConstantDecl 0x55709cf722c0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55709cf72460 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709cf722a0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55709cf72280 <col:38> 'int' 90
| |-EnumConstantDecl 0x55709cf72350 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55709cf72478 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709cf72330 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55709cf72310 <col:35> 'int' 100
| `-EnumConstantDecl 0x55709cf723e0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55709cf72490 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55709cf723c0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55709cf723a0 <col:32> 'int' 2000
|-CXXMethodDecl 0x55709cf724d0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55709cf72910 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55709cf72780 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55709cf727f8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55709cf729e0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55709cf72b60 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55709cf72a90 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55709cf72d68 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55709cf72c18 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55709cf72c90 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55709cf72e68 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55709cf72f08 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55709cf72fd0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55709cf73060 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55709cf73290 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709cf73040 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55709cf73020 <col:36> 'int' EnumConstant 0x55709cf72fd0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55709cf730b0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55709cf73100 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55709cf73150 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55709cf731a0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55709cf731f0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55709cf73240 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55709cf73378 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55709cf732b8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55709cf73440 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55709cf73500 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55709cf735c0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55709cf73680 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55709cf73798 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55709cf73860 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55709cf739e0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55709cf73910 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55709cf73b08 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55709cf73d08 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55709cf73bb8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55709cf73c38 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55709cf81658 <col:54, line:127:5>
|   |-ParenExpr 0x55709cf81508 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55709cf814d8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55709cf811c8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55709cf811a0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55709cf81188 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55709cf81170 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55709cf81140 <col:31> 'Router *' lvalue ->_router 0x55709cf7f020
|   |   |         `-CXXThisExpr 0x55709cf81130 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55709cf81228 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55709cf81208 <col:48> 'int' 0
|   |   `-CallExpr 0x55709cf81438 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55709cf81420 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55709cf81400 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55709caaa020 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55709cf81478 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55709cf81298 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55709cf81490 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55709cf812b8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55709cf814a8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55709cf812f0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55709cf814c0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55709cf813e8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55709cf813d0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55709cf81388 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55709cf815a0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55709cf81538 <col:9> 'Router *' lvalue ->_router 0x55709cf7f020
|   | | `-CXXThisExpr 0x55709cf81528 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55709cf81588 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55709cf81568 <col:19> 'Router *' lvalue ParmVar 0x55709cf73bb8 'r' 'Router *'
|   `-BinaryOperator 0x55709cf81638 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55709cf815d0 <col:9> 'int' lvalue ->_eindex 0x55709cf7f088
|     | `-CXXThisExpr 0x55709cf815c0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55709cf81620 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55709cf81600 <col:19> 'int' lvalue ParmVar 0x55709cf73c38 'eindex' 'int'
|-CXXMethodDecl 0x55709cf73e90 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55709cf73dc8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55709cf73f60 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55709cf74028 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55709cf740c8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55709cf74318 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55709cf74190 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55709cf74210 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55709cf743c8 <col:20>
| `-OptimizeNoneAttr 0x55709cf74420 <col:30>
|-CXXMethodDecl 0x55709cf74528 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55709cf74460 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55709cf745d0 <col:20>
| `-OptimizeNoneAttr 0x55709cf74628 <col:30>
|-CXXMethodDecl 0x55709cf746f8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55709cf74668 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55709cf747a0 <col:20>
| `-OptimizeNoneAttr 0x55709cf747f8 <col:30>
|-CXXMethodDecl 0x55709cf74988 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55709cf74830 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55709cf748b0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55709cf74b18 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55709cf74a50 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55709cf74c68 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55709cf74bd8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55709cf74db8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55709cf74d28 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55709cf74f08 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55709cf74e78 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55709cf751c8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55709cf74fc0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55709cf75040 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55709cf750e8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55709cf752a0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55709cf75360 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55709cf75630 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55709cf754e0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55709cf75558 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55709cf75758 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55709cf75930 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55709cf75810 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55709cf75890 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55709cf75b18 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55709cf759f8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55709cf75a78 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55709cf75e88 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55709cf75bd8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55709cf75c50 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55709cf75cd0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55709cf80c40 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55709cf80c20 <col:106> 'int' 0
| `-ParmVarDecl 0x55709cf75d48 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55709cf80c78 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55709cf80c58 <col:126> 'int' 0
|-CXXMethodDecl 0x55709cf76228 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55709cf75f58 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55709cf75ff0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55709cf76070 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55709cf760e8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55709cf80cb0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55709cf80c90 <col:114> 'int' 0
|-CXXMethodDecl 0x55709cf765b8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55709cf76300 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55709cf76378 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55709cf763f8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55709cf80cc8 <col:96> 'int' 0
| `-ParmVarDecl 0x55709cf76470 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55709cf80d08 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55709cf80ce8 <col:116> 'int' 0
|-CXXMethodDecl 0x55709cf76938 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55709cf76688 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55709cf76700 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55709cf76780 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55709cf80d40 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55709cf80d20 <col:109> 'int' 0
| `-ParmVarDecl 0x55709cf767f8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55709cf80d78 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55709cf80d58 <col:129> 'int' 0
|-CXXMethodDecl 0x55709cf76cb8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55709cf76a08 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55709cf76a80 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55709cf76b00 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55709cf76b78 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55709cf80db0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55709cf80d90 <col:117> 'int' 0
|-CXXMethodDecl 0x55709cf77048 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55709cf76d90 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55709cf76e08 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55709cf76e88 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55709cf80dc8 <col:99> 'int' 0
| `-ParmVarDecl 0x55709cf76f00 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55709cf80e08 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55709cf80de8 <col:119> 'int' 0
|-CXXMethodDecl 0x55709cf77468 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55709cf77118 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55709cf77198 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55709cf77210 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55709cf77290 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55709cf80e40 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55709cf80e20 <col:108> 'int' 0
| `-ParmVarDecl 0x55709cf77310 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55709cf80e78 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55709cf80e58 <col:141> 'int' 0
|-CXXMethodDecl 0x55709cf77888 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55709cf77540 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55709cf775c0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55709cf77638 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55709cf776b8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55709cf77738 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55709cf80e90 <col:121> 'int' 0
|-CXXMethodDecl 0x55709cf77cb8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55709cf77968 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55709cf779e8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55709cf77a60 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55709cf77ae0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55709cf80eb0 <col:98> 'int' 0
| `-ParmVarDecl 0x55709cf77b60 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55709cf80ed0 <col:123> 'int' 0
|-CXXMethodDecl 0x55709cf77f80 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55709cf77d90 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55709cf77e10 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55709cf77e90 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55709cf80ef0 <col:80> 'int' 0
|-EnumDecl 0x55709cf78038 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55709cf78140 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55709cf783d0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709cf78120 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55709cf78100 <col:42> 'int' 1
| |-EnumConstantDecl 0x55709cf781d0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55709cf783e8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709cf781b0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55709cf78190 <col:40> 'int' 2
| |-EnumConstantDecl 0x55709cf78260 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55709cf78400 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709cf78240 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55709cf78220 <col:44> 'int' 4
| |-EnumConstantDecl 0x55709cf782f0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55709cf78418 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709cf782d0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55709cf782b0 <col:36> 'int' 7
| `-EnumConstantDecl 0x55709cf78380 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55709cf78430 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55709cf78360 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55709cf78340 <col:34> 'int' 6
|-CXXMethodDecl 0x55709cf786e8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55709cf78458 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55709cf784f8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55709cf78578 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55709cf785f0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55709cf80fa8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55709cf80f90 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55709cf80f78 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55709cf80f58 <col:98, col:105> 'String' (CXXTemporary 0x55709cf80f58)
|           `-CXXTemporaryObjectExpr 0x55709cf80f20 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55709cf78988 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55709cf787b8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55709cf78830 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55709cf788a8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55709cf81058 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55709cf81040 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55709cf81028 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55709cf81008 <col:94, col:101> 'String' (CXXTemporary 0x55709cf81008)
| |         `-CXXTemporaryObjectExpr 0x55709cf80fd0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55709cf81840 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55709cf817b8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55709cf81788 <col:9> '<bound member function type>' ->add_task_handlers 0x55709cf786e8
|     | `-CXXThisExpr 0x55709cf81778 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55709cf817f8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55709cf816f8 <col:27> 'Task *' lvalue ParmVar 0x55709cf787b8 'task' 'Task *'
|     |-ImplicitCastExpr 0x55709cf81810 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55709cf81718 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55709cf78830 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55709cf81828 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55709cf81738 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55709cf78380 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55709cf81758 <col:62> 'const String' lvalue ParmVar 0x55709cf788a8 'prefix' 'const String &'
|-CXXMethodDecl 0x55709cf78b98 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55709cf78a50 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55709cf78ac8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55709cf81108 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55709cf810f0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55709cf810d8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55709cf810b8 <col:70, col:77> 'String' (CXXTemporary 0x55709cf810b8)
| |         `-CXXTemporaryObjectExpr 0x55709cf81080 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55709cf81a18 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55709cf81990 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55709cf81960 <col:9> '<bound member function type>' ->add_task_handlers 0x55709cf786e8
|     | `-CXXThisExpr 0x55709cf81950 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55709cf819d0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55709cf818d0 <col:27> 'Task *' lvalue ParmVar 0x55709cf78a50 'task' 'Task *'
|     |-ImplicitCastExpr 0x55709cf819e8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55709cf818f0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55709cf81a00 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55709cf81910 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55709cf78380 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55709cf81930 <col:57> 'const String' lvalue ParmVar 0x55709cf78ac8 'prefix' 'const String &'
|-CXXMethodDecl 0x55709cf78e78 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55709cf78c60 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55709cf78ce0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55709cf78d58 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55709cf79128 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55709cf78f48 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55709cf78fc8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55709cf79048 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55709cf79418 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55709cf791f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55709cf79278 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55709cf792f0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55709cf796c8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55709cf794e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55709cf79568 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55709cf795e8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55709cf79978 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55709cf79798 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55709cf79818 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55709cf79898 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55709cf79c28 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55709cf79a48 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55709cf79ac8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55709cf79b40 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55709cf79ed8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55709cf79cf8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55709cf79d78 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55709cf79df8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55709cf7a1e8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55709cf7a000 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55709cf7a080 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55709cf7a100 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55709cf7a4c8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55709cf7a2b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55709cf7a338 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55709cf7a3e0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55709cf7a7a8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55709cf7a598 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55709cf7a618 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55709cf7a6c0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55709cf7aa10 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55709cf7a878 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55709cf7a8f8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55709cf7a970 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55709cf7acb8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55709cf7aae0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55709cf7ab60 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55709cf7abd8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55709cf7af68 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55709cf7ad88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55709cf7ae08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55709cf7ae88 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55709cf7b218 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55709cf7b038 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55709cf7b0b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55709cf7b130 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55709cf7b4c8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55709cf7b2e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55709cf7b368 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55709cf7b3e0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55709cf7b798 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55709cf7b598 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55709cf7b618 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55709cf7b6b8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55709cf7bac8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55709cf7b868 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55709cf7b8e8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55709cf7b960 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55709cf7b9d8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55709cf81120 <col:93> 'bool' false
|-CXXMethodDecl 0x55709cf7bcb0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55709cf7bb98 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55709cf7bc18 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55709cf7be88 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55709cf7bd70 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55709cf7bdf0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55709cf7c168 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55709cf7bf48 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55709cf7bfc0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55709cf7c040 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55709cf7c0b8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55709cf7c458 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55709cf7c238 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55709cf7c2b0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55709cf7c330 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55709cf7c3a8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55709cf7c690 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55709cf7c530 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55709cf7c5b0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55709cf7c878 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55709cf7c758 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55709cf7c7d8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55709cf7c928 prev 0x55709cf740c8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55709cf7ca20 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55709cf7cab0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55709cf7cb28 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55709cf7cbe8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55709cf7ccb0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55709cf7ce28 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55709cf7cd60 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55709cf7ced0 <col:24>
| | `-OptimizeNoneAttr 0x55709cf7cf28 <col:34>
| |-CXXMethodDecl 0x55709cf7cf70 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55709cf7d228 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55709cf7d020 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55709cf7d098 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55709cf7d118 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55709cf7d2e0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55709cf7d318 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55709cf7d380 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55709cf7d408 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55709cf7d728 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55709cf7d4c0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55709cf7d538 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55709cf7d5b0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55709cf7d630 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55709cf7d840 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55709cf851b8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55709cf851b8
| | `-ParmVarDecl 0x55709cf852c8 <col:11> col:11 'const Element::Port &'
| `-CXXConstructorDecl 0x55709cf85368 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55709cf85368
|   `-ParmVarDecl 0x55709cf85478 <col:11> col:11 'Element::Port &&'
|-CXXMethodDecl 0x55709cf7d8b8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55709cf7d958 <col:38> "" ""
|-CXXMethodDecl 0x55709cf7d9e8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55709cf7da88 <col:44> "" ""
|-AccessSpecDecl 0x55709cf7daf8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55709cf7db20 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55709cf7dc20 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55709cf7dc70 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55709cf7dc00 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55709cf7dbe0 <col:27> 'int' 4
|-FieldDecl 0x55709cf7dd28 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55709cf7ded8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55709cf7df90 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55709cf7f020 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55709cf7f088 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55709cf7f1d8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55709cf7f118 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55709cf7f388 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55709cf7f298 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55709cf7f568 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55709cf7f448 <col:20> col:23 'int'
| `-ParmVarDecl 0x55709cf7f4c8 <col:25> col:28 'int'
|-CXXMethodDecl 0x55709cf7f810 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55709cf7f630 <col:23> col:26 'int'
| |-ParmVarDecl 0x55709cf7f6b0 <col:28> col:31 'int'
| `-ParmVarDecl 0x55709cf7f728 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55709cf7f8c8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55709cf7f990 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55709cf7f9e0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55709cf7fa30 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55709cf7fc10 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55709cf7fac0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55709cf7fb38 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55709cf7feb8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55709cf7fcd8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55709cf7fd58 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55709cf7fdd0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55709cf800d8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55709cf7ff88 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55709cf80008 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55709cf80410 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55709cf80198 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55709cf80218 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55709cf80290 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55709cf80310 <col:57> col:60 'int'
|-CXXMethodDecl 0x55709cf805f8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55709cf804e0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55709cf80560 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55709cf80748 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55709cf806b8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55709cf80ac8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55709cf80808 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55709cf80888 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55709cf80900 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55709cf80980 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55709cf80be0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class GetEtherAddress
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   uint32_t _offset
       112 |   int _anno
           | [sizeof=120, dsize=116, align=8,
           |  nvsize=116, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55709cf88328 <../elements/ethernet/getetheraddress.hh:29:1, line:46:1> line:29:7 class GetEtherAddress definition
|-DefinitionData polymorphic
| |-DefaultConstructor exists non_trivial needs_implicit
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55709cf88488 <col:1, col:7> col:7 implicit class GetEtherAddress
|-AccessSpecDecl 0x55709cf88518 <line:31:3, col:9> col:3 public
|-CXXMethodDecl 0x55709cf88590 <line:33:5, col:64> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x55709cf71078 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55709cf895c0 <col:36, col:64>
|   `-ReturnStmt 0x55709cf895b0 <col:38, col:45>
|     `-ImplicitCastExpr 0x55709cf89598 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55709cf89570 <col:45> 'const char [16]' lvalue "GetEtherAddress"
|-CXXMethodDecl 0x55709cf88658 <line:34:5, col:58> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x55709cf71140 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55709cf89620 <col:36, col:58>
|   `-ReturnStmt 0x55709cf89610 <col:38, col:45>
|     `-ImplicitCastExpr 0x55709cf895f8 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55709cf895d8 <col:45> 'const char []' lvalue Var 0x55709cf71478 'PORTS_1_1X2' 'const char []'
|-CXXMethodDecl 0x55709cf88720 <line:35:5, col:55> col:17 processing 'const char *() const'
| |-Overrides: [ 0x55709cf71508 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x55709cf89680 <col:36, col:55>
|   `-ReturnStmt 0x55709cf89670 <col:38, col:45>
|     `-ImplicitCastExpr 0x55709cf89658 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55709cf89638 <col:45> 'const char []' lvalue Var 0x55709cf715c8 'AGNOSTIC' 'const char []'
|-CXXMethodDecl 0x55709cf88a20 <line:37:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55709cf72910 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55709cf888a0 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x55709cf88918 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x55709cf88af0 <line:38:5, col:54> col:10 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x55709cf75360 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x55709cf896b8 <col:39, col:54>
|   `-ReturnStmt 0x55709cf896a8 <col:41, col:48>
|     `-CXXBoolLiteralExpr 0x55709cf89698 <col:48> 'bool' true
|-CXXMethodDecl 0x55709cf88c30 <line:40:5, col:35> col:13 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x55709cf70258 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x55709cf88ba0 <col:27, col:34> col:35 'Packet *'
|-AccessSpecDecl 0x55709cf88cd8 <line:42:3, col:10> col:3 private
|-FieldDecl 0x55709cf88d10 <line:43:5, col:14> col:14 referenced _offset 'uint32_t':'unsigned int'
|-FieldDecl 0x55709cf88d78 <line:44:5, col:9> col:9 referenced _anno 'int'
|-CXXConstructorDecl 0x55709cf88e10 <line:29:7> col:7 implicit GetEtherAddress 'void (const GetEtherAddress &)' inline default_delete noexcept-unevaluated 0x55709cf88e10
| `-ParmVarDecl 0x55709cf88f28 <col:7> col:7 'const GetEtherAddress &'
|-CXXConstructorDecl 0x55709cf88fc8 <col:7> col:7 implicit GetEtherAddress 'void (GetEtherAddress &&)' inline default_delete noexcept-unevaluated 0x55709cf88fc8
| `-ParmVarDecl 0x55709cf890d8 <col:7> col:7 'GetEtherAddress &&'
|-CXXMethodDecl 0x55709cf89178 <col:7> col:7 implicit operator= 'GetEtherAddress &(const GetEtherAddress &)' inline default_delete noexcept-unevaluated 0x55709cf89178
| `-ParmVarDecl 0x55709cf89288 <col:7> col:7 'const GetEtherAddress &'
|-CXXMethodDecl 0x55709cf892f8 <col:7> col:7 implicit operator= 'GetEtherAddress &(GetEtherAddress &&)' inline default_delete noexcept-unevaluated 0x55709cf892f8
| `-ParmVarDecl 0x55709cf89408 <col:7> col:7 'GetEtherAddress &&'
`-CXXDestructorDecl 0x55709cf89490 <col:7> col:7 implicit ~GetEtherAddress 'void ()' inline default noexcept-unevaluated 0x55709cf89490
  `-Overrides: [ 0x55709cf6fc18 Element::~Element 'void ()' ]

Layout: <CGRecordLayout
  LLVMType:%class.GetEtherAddress = type { %class.Element.base, i32, i32, [4 x i8] }
  NonVirtualBaseLLVMType:%class.GetEtherAddress.base = type { %class.Element.base, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55709cd437e0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55709cd438f8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55709cd43998 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55709cd439f8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55709cd43a58 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55709cd43b08 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55709cd43e10 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55709cd43f28 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55709cd43fd0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55709cd44038 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55709cd440c8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55709cd4a160 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55709cd4a598 <col:12>
|-CXXConstructorDecl 0x55709cd4a268 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55709cd4a378 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55709cd43fd0 'data' 'const char *'
| | `-ImplicitCastExpr 0x55709cd4cb20 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55709cd4caf0 <col:12> 'const char *const' lvalue .data 0x55709cd43fd0
| |     `-DeclRefExpr 0x55709cd4cad0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55709cd4a378 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55709cd44038 'length' 'int'
| | `-ImplicitCastExpr 0x55709cd4cbb0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55709cd4cb80 <col:12> 'const int' lvalue .length 0x55709cd44038
| |     `-DeclRefExpr 0x55709cd4cb60 <col:12> 'const String::rep_t' lvalue ParmVar 0x55709cd4a378 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55709cd440c8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55709cd4cc40 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55709cd4cc10 <col:12> 'String::memo_t *const' lvalue .memo 0x55709cd440c8
| |     `-DeclRefExpr 0x55709cd4cbf0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55709cd4a378 '' 'const String::rep_t &'
| `-CompoundStmt 0x55709cd4cc98 <col:12>
|-CXXConstructorDecl 0x55709cd4a418 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55709cd4a418
| `-ParmVarDecl 0x55709cd4a528 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55709cd4fa80 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55709cd5b498 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55709cd5b5a8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55709cd5bac0 <col:12>
|   |-BinaryOperator 0x55709cd5b8d8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55709cd5b890 <col:12> 'const char *' lvalue ->data 0x55709cd43fd0
|   | | `-CXXThisExpr 0x55709cd5b880 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55709cd5b8c0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55709cd5b850 <col:12> 'const char *const' lvalue .data 0x55709cd43fd0
|   |     `-DeclRefExpr 0x55709cd5b830 <col:12> 'const String::rep_t' lvalue ParmVar 0x55709cd5b5a8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55709cd5b9a0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55709cd5b958 <col:12> 'int' lvalue ->length 0x55709cd44038
|   | | `-CXXThisExpr 0x55709cd5b948 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55709cd5b988 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55709cd5b918 <col:12> 'const int' lvalue .length 0x55709cd44038
|   |     `-DeclRefExpr 0x55709cd5b8f8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55709cd5b5a8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55709cd5ba68 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55709cd5ba20 <col:12> 'String::memo_t *' lvalue ->memo 0x55709cd440c8
|   | | `-CXXThisExpr 0x55709cd5ba10 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55709cd5ba50 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55709cd5b9e0 <col:12> 'String::memo_t *const' lvalue .memo 0x55709cd440c8
|   |     `-DeclRefExpr 0x55709cd5b9c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55709cd5b5a8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55709cd5bab0 <col:12>
|     `-UnaryOperator 0x55709cd5ba98 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55709cd5ba88 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55709cd5b618 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55709cd5b618
  `-ParmVarDecl 0x55709cd5b728 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55709cd3ad50 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55709cd3ae68 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55709cd3aef8 <col:16, col:22> col:16 public
|-TypedefDecl 0x55709cd3af38 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55709ca0ee00 'const char *'
|   `-QualType 0x55709ca0e351 'const char' const
|     `-BuiltinType 0x55709ca0e350 'char'
|-TypedefDecl 0x55709cd3afc0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55709cd3af90 'String::const_iterator' sugar
|   |-Typedef 0x55709cd3af38 'const_iterator'
|   `-PointerType 0x55709ca0ee00 'const char *'
|     `-QualType 0x55709ca0e351 'const char' const
|       `-BuiltinType 0x55709ca0e350 'char'
|-TypedefDecl 0x55709cd3b130 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55709cd3b0a0 'int (String::*)() const'
|   |-RecordType 0x55709cd3ade0 'String'
|   | `-CXXRecord 0x55709cd3ad50 'String'
|   `-ParenType 0x55709cd3b040 'int () const' sugar
|     `-FunctionProtoType 0x55709cd0ebd0 'int () const' const cdecl
|       `-BuiltinType 0x55709ca0e3b0 'int'
|-TypedefDecl 0x55709cd3b198 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55709cb637b0 'int64_t' sugar
|   |-Typedef 0x55709ca772a0 'int64_t'
|   `-TypedefType 0x55709ca50510 '__int64_t' sugar
|     |-Typedef 0x55709ca500e8 '__int64_t'
|     `-BuiltinType 0x55709ca0e3d0 'long'
|-TypedefDecl 0x55709cd3b200 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55709cb636d0 'uint64_t' sugar
|   |-Typedef 0x55709ca77440 'uint64_t'
|   `-TypedefType 0x55709ca505a0 '__uint64_t' sugar
|     |-Typedef 0x55709ca50158 '__uint64_t'
|     `-BuiltinType 0x55709ca0e470 'unsigned long'
|-TypedefDecl 0x55709cd3b290 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55709cd3b260 'String::intmax_t' sugar
|   |-Typedef 0x55709cd3b198 'intmax_t'
|   `-TypedefType 0x55709cb637b0 'int64_t' sugar
|     |-Typedef 0x55709ca772a0 'int64_t'
|     `-TypedefType 0x55709ca50510 '__int64_t' sugar
|       |-Typedef 0x55709ca500e8 '__int64_t'
|       `-BuiltinType 0x55709ca0e3d0 'long'
|-TypedefDecl 0x55709cd3b320 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55709cd3b2f0 'String::uintmax_t' sugar
|   |-Typedef 0x55709cd3b200 'uintmax_t'
|   `-TypedefType 0x55709cb636d0 'uint64_t' sugar
|     |-Typedef 0x55709ca77440 'uint64_t'
|     `-TypedefType 0x55709ca505a0 '__uint64_t' sugar
|       |-Typedef 0x55709ca50158 '__uint64_t'
|       `-BuiltinType 0x55709ca0e470 'unsigned long'
|-CXXConstructorDecl 0x55709cd3b3e0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55709cd3b588 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55709cd3b4c8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55709cd3b738 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55709cd3b678 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55709cd3b890 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55709cd3b800 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55709cd3baa8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55709cd3b958 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55709cd3b9d8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55709cd3bcc8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55709cd3bb78 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55709cd3bbf8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55709cd3bee8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55709cd3bd98 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55709cd3be18 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55709cd3c108 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55709cd3bfb8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55709cd3c038 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55709cd3c298 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55709cd3c1d0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55709cd3c418 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55709cd3c358 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55709cd3c5a8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55709cd3c4e0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55709cd3c700 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55709cd3c670 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55709cd3c858 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55709cd3c7c8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55709cd3c9b0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55709cd3c920 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55709cd3cb38 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55709cd3ca78 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55709cd3ccc8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55709cd3cc00 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55709cd3ce58 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55709cd3cd90 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55709cd3cfe8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55709cd3cf20 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55709cd3d0e0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55709cd3d208 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55709cd3d388 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55709cd3d2c0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55709cd3d4d8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55709cd3d448 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55709cd3d590 <col:63> "" ""
|-CXXMethodDecl 0x55709cd3d6d8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55709cd3d618 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55709cd3d8e8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55709cd3d798 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55709cd3d818 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55709cd3db08 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55709cd3d9b0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55709cd3da30 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55709cd3dde8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55709cd3dbc8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55709cd3dc48 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55709cd49c30 <col:55> 'int' 10
| `-ParmVarDecl 0x55709cd3dcc0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55709cd49c50 <col:76> 'bool' true
|-CXXMethodDecl 0x55709cd3e0c8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55709cd3deb0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55709cd3df30 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55709cd49c60 <col:56> 'int' 10
| `-ParmVarDecl 0x55709cd3dfa8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55709cd49c80 <col:77> 'bool' true
|-CXXMethodDecl 0x55709cd3e1d0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55709cd3e298 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55709cd3e360 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55709cd3e400 <col:20>
| `-OptimizeNoneAttr 0x55709cd3e458 <col:30>
|-CXXConversionDecl 0x55709cd3e548 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55709cd3e618 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55709cd3e6d8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55709cd3e7c8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55709cd3e888 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55709cd3ea08 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55709cd3e940 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55709cd3eb58 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55709cd3eac8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55709cd3ec48 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55709cd3ed08 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55709cd3ef58 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55709cd3edc0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55709cd3ee40 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55709cd3f1b8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55709cd3f020 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55709cd3f0a0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55709cd3f288 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55709cd3f498 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55709cd3f340 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55709cd3f3c0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55709cd3f6b8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55709cd3f560 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55709cd3f5e0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55709cd3f848 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55709cd3f780 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55709cd3f938 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55709cd3faa8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55709cd3f9e8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55709cd3fcb8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55709cd3fb68 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55709cd3fbe8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55709cd3fed0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55709cd3fd78 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55709cd3fdf0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55709cd40060 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55709cd3ff90 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55709cd40280 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55709cd40120 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55709cd401a0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55709cd403d0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55709cd40340 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55709cd405a8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55709cd40490 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55709cd40510 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55709cd406f8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55709cd40668 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55709cd40910 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55709cd407b0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55709cd40830 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55709cd49c90 <col:39> 'int' 0
|-CXXMethodDecl 0x55709cd40b30 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55709cd409d0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55709cd40a50 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55709cd49cb0 <col:48> 'int' 0
|-CXXMethodDecl 0x55709cd40d10 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55709cd40bf0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55709cd40c70 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55709cd49cd0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55709cd40de0 <line:129:5, col:20> col:12 used lower 'String () const'
|-CXXMethodDecl 0x55709cd40ea0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55709cd40f60 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55709cd41020 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55709cd410e0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55709cd41288 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55709cd41190 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55709cd41408 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55709cd41340 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55709cd415e0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55709cd414c8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55709cd41758 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55709cd41698 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55709cd418a0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55709cd41810 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55709cd419f0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55709cd41960 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55709cd41bc8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55709cd41ab0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55709cd41b30 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55709cd41da8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55709cd41c90 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55709cd41d10 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55709cd41ef8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55709cd41e68 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55709cd42108 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55709cd41fb8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55709cd42038 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55709cd42268 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55709cd421d0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55709cd423c0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55709cd42328 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55709cd42468 <col:57> "" ""
|-CXXMethodDecl 0x55709cd42578 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55709cd424e8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55709cd426c8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55709cd42638 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55709cd42848 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55709cd42780 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55709cd42910 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55709cd429d0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55709cd42a90 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55709cd42b30 <col:49> "" ""
|-CXXMethodDecl 0x55709cd42bc0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55709cd42c80 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55709cd42d70 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55709cd42e38 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55709cd42ef8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55709cd42fb8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55709cd430b0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55709cd43178 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55709cd43240 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55709cd43418 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55709cd432f8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55709cd43378 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55709cd43640 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55709cd434e0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55709cd43560 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55709cd43750 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55709cd437b8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55709cd437e0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55709cd438f8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55709cd43998 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55709cd439f8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55709cd43a58 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55709cd43b08 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55709cd43b70 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55709cd43da8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55709cd43df8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55709cd43d88 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55709cd43c98 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55709cd43c40 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55709cd43c80 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55709cd43c60 <col:32> 'int' 8
|-CXXRecordDecl 0x55709cd43e10 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55709cd43f28 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55709cd43fd0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55709cd44038 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55709cd440c8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55709cd4a160 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55709cd4a598 <col:12>
| |-CXXConstructorDecl 0x55709cd4a268 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55709cd4a378 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55709cd43fd0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55709cd4cb20 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55709cd4caf0 <col:12> 'const char *const' lvalue .data 0x55709cd43fd0
| | |     `-DeclRefExpr 0x55709cd4cad0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55709cd4a378 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55709cd44038 'length' 'int'
| | | `-ImplicitCastExpr 0x55709cd4cbb0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55709cd4cb80 <col:12> 'const int' lvalue .length 0x55709cd44038
| | |     `-DeclRefExpr 0x55709cd4cb60 <col:12> 'const String::rep_t' lvalue ParmVar 0x55709cd4a378 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55709cd440c8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55709cd4cc40 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55709cd4cc10 <col:12> 'String::memo_t *const' lvalue .memo 0x55709cd440c8
| | |     `-DeclRefExpr 0x55709cd4cbf0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55709cd4a378 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55709cd4cc98 <col:12>
| |-CXXConstructorDecl 0x55709cd4a418 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55709cd4a418
| | `-ParmVarDecl 0x55709cd4a528 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55709cd4fa80 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55709cd5b498 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55709cd5b5a8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55709cd5bac0 <col:12>
| |   |-BinaryOperator 0x55709cd5b8d8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55709cd5b890 <col:12> 'const char *' lvalue ->data 0x55709cd43fd0
| |   | | `-CXXThisExpr 0x55709cd5b880 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55709cd5b8c0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55709cd5b850 <col:12> 'const char *const' lvalue .data 0x55709cd43fd0
| |   |     `-DeclRefExpr 0x55709cd5b830 <col:12> 'const String::rep_t' lvalue ParmVar 0x55709cd5b5a8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55709cd5b9a0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55709cd5b958 <col:12> 'int' lvalue ->length 0x55709cd44038
| |   | | `-CXXThisExpr 0x55709cd5b948 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55709cd5b988 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55709cd5b918 <col:12> 'const int' lvalue .length 0x55709cd44038
| |   |     `-DeclRefExpr 0x55709cd5b8f8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55709cd5b5a8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55709cd5ba68 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55709cd5ba20 <col:12> 'String::memo_t *' lvalue ->memo 0x55709cd440c8
| |   | | `-CXXThisExpr 0x55709cd5ba10 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55709cd5ba50 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55709cd5b9e0 <col:12> 'String::memo_t *const' lvalue .memo 0x55709cd440c8
| |   |     `-DeclRefExpr 0x55709cd5b9c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55709cd5b5a8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55709cd5bab0 <col:12>
| |     `-UnaryOperator 0x55709cd5ba98 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55709cd5ba88 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55709cd5b618 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55709cd5b618
|   `-ParmVarDecl 0x55709cd5b728 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55709cd44140 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55709cd44388 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55709cd441a8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55709cd44228 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55709cd442a0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55709cd4a120 <col:79, line:261:5>
|   |-BinaryOperator 0x55709cd49d98 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55709cd49d30 <col:2, col:5> 'const char *' lvalue .data 0x55709cd43fd0
|   | | `-MemberExpr 0x55709cd49d00 <col:2> 'String::rep_t' lvalue ->_r 0x55709cd44140
|   | |   `-CXXThisExpr 0x55709cd49cf0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55709cd49d80 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55709cd49d60 <col:12> 'const char *' lvalue ParmVar 0x55709cd441a8 'data' 'const char *'
|   |-BinaryOperator 0x55709cd49e60 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55709cd49df8 <col:2, col:5> 'int' lvalue .length 0x55709cd44038
|   | | `-MemberExpr 0x55709cd49dc8 <col:2> 'String::rep_t' lvalue ->_r 0x55709cd44140
|   | |   `-CXXThisExpr 0x55709cd49db8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55709cd49e48 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55709cd49e28 <col:14> 'int' lvalue ParmVar 0x55709cd44228 'length' 'int'
|   `-IfStmt 0x55709cd4a108 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55709cd49f80 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55709cd49f68 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55709cd49f48 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55709cd49f28 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55709cd49ec0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55709cd440c8
|     |       | `-MemberExpr 0x55709cd49e90 <col:7> 'String::rep_t' lvalue ->_r 0x55709cd44140
|     |       |   `-CXXThisExpr 0x55709cd49e80 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55709cd49f10 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55709cd49ef0 <col:17> 'String::memo_t *' lvalue ParmVar 0x55709cd442a0 'memo' 'String::memo_t *'
|     `-CallExpr 0x55709cd4a0e0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55709cd4a0c8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55709cd49fd0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55709cd32db8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55709cd4a038 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55709cd43998
|         `-ImplicitCastExpr 0x55709cd4a020 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55709cd4a000 <col:27> 'String::memo_t *' lvalue ParmVar 0x55709cd442a0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55709cd44638 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55709cd44458 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55709cd444d8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55709cd44550 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55709cd44140 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55709cd4a5a8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55709cd4a738 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55709cd4a6a0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55709cd4a610 <col:2> '<bound member function type>' ->assign_memo 0x55709cd44388
|     | `-ImplicitCastExpr 0x55709cd4a6d8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55709cd4a600 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55709cd4a6f0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55709cd4a640 <col:14> 'const char *' lvalue ParmVar 0x55709cd44458 'data' 'const char *'
|     |-ImplicitCastExpr 0x55709cd4a708 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55709cd4a660 <col:20> 'int' lvalue ParmVar 0x55709cd444d8 'length' 'int'
|     `-ImplicitCastExpr 0x55709cd4a720 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55709cd4a680 <col:28> 'String::memo_t *' lvalue ParmVar 0x55709cd44550 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55709cd447c8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55709cd44708 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55709cd4a990 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55709cd4a910 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55709cd4a760 <col:2> '<bound member function type>' ->assign_memo 0x55709cd44388
|     | `-CXXThisExpr 0x55709cd4a750 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55709cd4a948 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55709cd4a7e0 <col:14, col:19> 'const char *' lvalue .data 0x55709cd43fd0
|     |   `-MemberExpr 0x55709cd4a7b0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55709cd44140
|     |     `-DeclRefExpr 0x55709cd4a790 <col:14> 'const String' lvalue ParmVar 0x55709cd44708 'x' 'const String &'
|     |-ImplicitCastExpr 0x55709cd4a960 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55709cd4a860 <col:25, col:30> 'int' lvalue .length 0x55709cd44038
|     |   `-MemberExpr 0x55709cd4a830 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55709cd44140
|     |     `-DeclRefExpr 0x55709cd4a810 <col:25> 'const String' lvalue ParmVar 0x55709cd44708 'x' 'const String &'
|     `-ImplicitCastExpr 0x55709cd4a978 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55709cd4a8e0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55709cd440c8
|         `-MemberExpr 0x55709cd4a8b0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55709cd44140
|           `-DeclRefExpr 0x55709cd4a890 <col:38> 'const String' lvalue ParmVar 0x55709cd44708 'x' 'const String &'
|-CXXMethodDecl 0x55709cd44890 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55709cd4b350 <col:31, line:278:5>
|   `-IfStmt 0x55709cd4b338 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55709cd4aa30 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55709cd4aa18 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55709cd4a9e8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55709cd440c8
|     |     `-MemberExpr 0x55709cd4a9b8 <col:6> 'String::rep_t' lvalue ->_r 0x55709cd44140
|     |       `-CXXThisExpr 0x55709cd4a9a8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55709cd4b310 <col:15, line:277:2>
|       |-ParenExpr 0x55709cd4aee0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55709cd4aeb0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55709cd4ab40 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55709cd4ab28 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55709cd4ab10 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55709cd4aad0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55709cd43998
|       |   |       `-ImplicitCastExpr 0x55709cd4aab8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55709cd4aa88 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55709cd440c8
|       |   |           `-MemberExpr 0x55709cd4aa58 <col:27> 'String::rep_t' lvalue ->_r 0x55709cd44140
|       |   |             `-CXXThisExpr 0x55709cd4aa48 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55709cd4aba0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55709cd4ab80 <col:54> 'int' 0
|       |   `-CallExpr 0x55709cd4ae10 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55709cd4adf8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55709cd4ad78 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55709caaa020 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55709cd4ae50 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55709cd4ac88 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55709cd4ae68 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55709cd4acb8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55709cd4ae80 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55709cd4acf0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55709cd4ae98 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55709cd4ad60 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55709cd4ad48 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55709cd4ad10 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55709cd4b230 <line:274:6, line:275:22>
|       | |-CallExpr 0x55709cd4b0f0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55709cd4b0d8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55709cd4b050 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55709cd34200 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55709cd4b020 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55709cd43998
|       | |   `-ImplicitCastExpr 0x55709cd4b008 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55709cd4afd8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55709cd440c8
|       | |       `-MemberExpr 0x55709cd4afa8 <col:40> 'String::rep_t' lvalue ->_r 0x55709cd44140
|       | |         `-CXXThisExpr 0x55709cd4af98 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55709cd4b1f0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55709cd4b1d8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55709cd4b118 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55709cd49070 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55709cd4b218 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55709cd4b178 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55709cd440c8
|       |       `-MemberExpr 0x55709cd4b148 <col:15> 'String::rep_t' lvalue ->_r 0x55709cd44140
|       |         `-CXXThisExpr 0x55709cd4b138 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55709cd4b2f0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55709cd4b288 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55709cd440c8
|         | `-MemberExpr 0x55709cd4b258 <col:6> 'String::rep_t' lvalue ->_r 0x55709cd44140
|         |   `-CXXThisExpr 0x55709cd4b248 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55709cd4b2d8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55709cd4b2b8 <col:16> 'int' 0
|-CXXMethodDecl 0x55709cd44b28 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55709cd44948 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55709cd449c8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55709cd44a40 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55709cd44c00 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55709cd44e50 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55709cd44cb8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55709cd44d38 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55709cd44db0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55709cd45038 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55709cd44f20 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55709cd44fa0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55709cd45138 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55709cd4b428 <col:41, line:286:5>
|   `-ReturnStmt 0x55709cd4b418 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55709cd4b3e8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55709cd4b3b0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55709cd4b398 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55709cd4b378 <col:46> 'int' 1
|-CXXMethodDecl 0x55709cd453d8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55709cd451f0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55709cd45270 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55709cd452f0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55709cd49070 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55709cd454a0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55709cd49140 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55709cd49310 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55709cd491f8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55709cd49278 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55709cd493d0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55709cd49498 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55709cd49598 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55709cd49610 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55709cd49688 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55709cd496f0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55709cd497f0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55709cd49840 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55709cd497d0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55709cd497b0 <col:22> 'int' 14
|-CXXMethodDecl 0x55709cd49a58 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55709cd49870 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55709cd498f0 <col:38> col:41 'int'
| `-ParmVarDecl 0x55709cd49970 <col:43> col:46 'int'
|-FriendDecl 0x55709cd49b60 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55709cd49bf0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55709ce0b990 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55709ce0bb68 prev 0x55709ce0b990 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55709ce0bbf8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55709ce0bc20 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55709ca0e3b0 'int'
|-TypedefDecl 0x55709ce0d580 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55709ce0d530 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55709ce0d510 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55709ce0be38 'type'
|     `-SubstTemplateTypeParmType 0x55709ce0be00 'String' sugar
|       |-TemplateTypeParmType 0x55709ccfe5f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55709ccfe5a0 'T'
|       `-RecordType 0x55709cd3ade0 'String'
|         `-CXXRecord 0x55709cd3ad50 'String'
|-TypedefDecl 0x55709ce0d638 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55709ce0d600 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55709ce0d5e0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55709ce0d580 'type'
|     `-ElaboratedType 0x55709ce0d530 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55709ce0d510 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55709ce0be38 'type'
|         `-SubstTemplateTypeParmType 0x55709ce0be00 'String' sugar
|           |-TemplateTypeParmType 0x55709ccfe5f0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55709ccfe5a0 'T'
|           `-RecordType 0x55709cd3ade0 'String'
|             `-CXXRecord 0x55709cd3ad50 'String'
|-CXXMethodDecl 0x55709ce0d7b8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55709ce0d6c8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55709ce0d8a8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55709ce0d988 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55709ce0d988
|-CXXMethodDecl 0x55709ce0dc58 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55709ce0db60 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55709ce0de98 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55709ce0dd10 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55709ce0dd88 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55709ce0e068 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55709ce0df58 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55709ce0dfd0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55709cfb8540 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55709cfb8610 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55709cfb8858 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55709cfb86d0 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55709cfb8748 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55709cfb8ab8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55709cfb8928 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55709cfb89a0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55709cfb8c78 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55709cfb8b88 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55709cfb8e38 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55709cfb8d40 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55709cfb8ef0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55709cfb8fa0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55709cfb91d8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55709cfb9050 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55709cfb90c8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55709cfb9478 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55709cfb9380 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55709cfb9540 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55709cfb9590 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55709cfb95e0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55709cf72580 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55709ce0a3f8 prev 0x55709cf72580 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55709ce0b900 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55709ce0b8b0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55709ce0b890 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55709ce0b740 'type'
|     `-SubstTemplateTypeParmType 0x55709ce0b5d0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55709ccd43a0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55709ccd4348 'F'
|       `-RecordType 0x55709ce0b230 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55709ce0b150 'typed_array_memory'
|-FieldDecl 0x55709cfb9630 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55709cfb9680 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55709cfb96b8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55709ce0a490 'String' sugar
|   |-TemplateTypeParmType 0x55709cd0b910 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55709cd0b8b8 'T'
|   `-RecordType 0x55709cd3ade0 'String'
|     `-CXXRecord 0x55709cd3ad50 'String'
|-TypedefDecl 0x55709cfb9748 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55709cfb9710 'String &'
|   `-SubstTemplateTypeParmType 0x55709ce0a490 'String' sugar
|     |-TemplateTypeParmType 0x55709cd0b910 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55709cd0b8b8 'T'
|     `-RecordType 0x55709cd3ade0 'String'
|       `-CXXRecord 0x55709cd3ad50 'String'
|-TypedefDecl 0x55709cfb97d8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55709cfb97a0 'const String &'
|   `-QualType 0x55709ce0a491 'const String' const
|     `-SubstTemplateTypeParmType 0x55709ce0a490 'String' sugar
|       |-TemplateTypeParmType 0x55709cd0b910 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55709cd0b8b8 'T'
|       `-RecordType 0x55709cd3ade0 'String'
|         `-CXXRecord 0x55709cd3ad50 'String'
|-TypedefDecl 0x55709cfb9868 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55709cfb9830 'String *'
|   `-SubstTemplateTypeParmType 0x55709ce0a490 'String' sugar
|     |-TemplateTypeParmType 0x55709cd0b910 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55709cd0b8b8 'T'
|     `-RecordType 0x55709cd3ade0 'String'
|       `-CXXRecord 0x55709cd3ad50 'String'
|-TypedefDecl 0x55709cfb98f8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55709cfb98c0 'const String *'
|   `-QualType 0x55709ce0a491 'const String' const
|     `-SubstTemplateTypeParmType 0x55709ce0a490 'String' sugar
|       |-TemplateTypeParmType 0x55709cd0b910 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55709cd0b8b8 'T'
|       `-RecordType 0x55709cd3ade0 'String'
|         `-CXXRecord 0x55709cd3ad50 'String'
|-TypedefDecl 0x55709cfba550 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55709cfba500 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55709cfba4e0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55709cfba418 'type'
|     `-LValueReferenceType 0x55709cfba3e0 'const String &'
|       `-QualType 0x55709cfba181 'const String' const
|         `-SubstTemplateTypeParmType 0x55709cfba180 'String' sugar
|           |-TemplateTypeParmType 0x55709ccde2f0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55709ccde298 'T'
|           `-RecordType 0x55709cd3ade0 'String'
|             `-CXXRecord 0x55709cd3ad50 'String'
|-TypedefDecl 0x55709cfba5b8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55709cfb97a0 'const String &'
|   `-QualType 0x55709ce0a491 'const String' const
|     `-SubstTemplateTypeParmType 0x55709ce0a490 'String' sugar
|       |-TemplateTypeParmType 0x55709cd0b910 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55709cd0b8b8 'T'
|       `-RecordType 0x55709cd3ade0 'String'
|         `-CXXRecord 0x55709cd3ad50 'String'
|-TypedefDecl 0x55709cfba610 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55709ca0e3b0 'int'
|-TypedefDecl 0x55709cfba678 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55709cfb9830 'String *'
|   `-SubstTemplateTypeParmType 0x55709ce0a490 'String' sugar
|     |-TemplateTypeParmType 0x55709cd0b910 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55709cd0b8b8 'T'
|     `-RecordType 0x55709cd3ade0 'String'
|       `-CXXRecord 0x55709cd3ad50 'String'
|-TypedefDecl 0x55709cfba6e0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55709cfb98c0 'const String *'
|   `-QualType 0x55709ce0a491 'const String' const
|     `-SubstTemplateTypeParmType 0x55709ce0a490 'String' sugar
|       |-TemplateTypeParmType 0x55709cd0b910 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55709cd0b8b8 'T'
|       `-RecordType 0x55709cd3ade0 'String'
|         `-CXXRecord 0x55709cd3ad50 'String'
|-EnumDecl 0x55709cfba738 <line:134:5> col:5
| `-EnumConstantDecl 0x55709cfba830 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55709cfba810 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55709cd0cf98 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55709cd0cf70 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55709cd0cf50 <col:40> 'int' 1
|-CXXConstructorDecl 0x55709cfba8b8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55709cfbab48 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55709cfba970 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55709cfbaa10 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55709cfbadd8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55709cfbacc0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55709cfbb098 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55709cfbaf80 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55709cfbb3b0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55709cfbb290 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55709cfbb6c0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55709cfbb5a0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55709cfbb9b0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55709cfbb7f8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55709cfbb870 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55709cfbbad8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55709cfbbb88 <col:20> Inherited
| `-OptimizeNoneAttr 0x55709cfbbbe0 <col:30> Inherited
|-CXXMethodDecl 0x55709cfbbc28 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55709cfbbcd8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55709cfbbd30 <col:30> Inherited
|-CXXMethodDecl 0x55709cfbbdf8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55709cfbbea8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55709cfbbf00 <col:30> Inherited
|-CXXMethodDecl 0x55709cfbbf48 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55709cfbbff8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55709cfbc050 <col:30> Inherited
|-CXXMethodDecl 0x55709cfbc098 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55709cfbc148 <col:20> Inherited
| `-OptimizeNoneAttr 0x55709cfbc1a0 <col:30> Inherited
|-CXXMethodDecl 0x55709cfbc1e8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55709cfbc298 <col:20> Inherited
| `-OptimizeNoneAttr 0x55709cfbc2f0 <col:30> Inherited
|-CXXMethodDecl 0x55709cfbc318 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55709cfbc3c8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55709cfbc478 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55709cfbc638 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55709cfbc528 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55709cfbc5a0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55709cfbc788 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55709cfbc6f8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55709cfbc938 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55709cfbc840 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55709cfbc9f0 <col:20>
| `-OptimizeNoneAttr 0x55709cfbca48 <col:30>
|-CXXMethodDecl 0x55709cfbcb68 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55709cfbca70 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55709cfbcc20 <col:20>
| `-OptimizeNoneAttr 0x55709cfbcc78 <col:30>
|-CXXMethodDecl 0x55709cfbcd30 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55709cfbcca0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55709cfbce78 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55709cfbcde8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55709cfbcfa8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55709cfbd0a8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55709cfbd178 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55709cfbd248 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55709cfbd388 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55709cfbd2f8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55709cfbd4d0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55709cfbd440 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55709cfbd618 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55709cfbd588 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55709cfbd6d0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55709cfbd7d0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55709cfbd740 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55709cfbd888 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55709cfbd948 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55709cfbda48 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55709cfbdbc8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55709cfbdb08 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55709cfbe388 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55709cfbdc80 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55709cfbe2e8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55709cfbe1e8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55709cfbe468 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55709cfbe5b8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55709cfbe528 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55709cfbe670 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55709cfbe8b8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55709cfbe730 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55709cfbe7a8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55709cfbea48 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55709cfbe988 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55709cfbec58 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55709cfbeb10 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55709cfbeb88 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55709cfbed18 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55709cfbef78 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55709cfbee80 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55709cfbf048 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55709cfbf048

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55709d0412f8 prev 0x55709cfd3be8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55709d0413f0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55709d041480 <col:22, col:28> col:22 public
|-EnumDecl 0x55709d0414a8 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55709d0415c8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55709d0415a8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55709d041590 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55709d041570 <col:14> 'int' 999
| |-EnumConstantDecl 0x55709d041670 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55709d041650 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55709d041638 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55709d041618 <col:14> 'int' 1
| |-EnumConstantDecl 0x55709d041700 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55709d0416e0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55709d0416c0 <col:17> 'int' 0
| |-EnumConstantDecl 0x55709d041790 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55709d041770 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55709d041750 <col:13> 'int' 1
| |-EnumConstantDecl 0x55709d041820 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55709d041800 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55709d0417e0 <col:16> 'int' 2
| |-EnumConstantDecl 0x55709d0418b0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55709d041890 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55709d041870 <col:13> 'int' 3
| |-EnumConstantDecl 0x55709d041940 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55709d041920 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55709d041900 <col:15> 'int' 4
| |-EnumConstantDecl 0x55709d0419d0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55709d0419b0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55709d041990 <col:14> 'int' 5
| |-EnumConstantDecl 0x55709d041a60 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55709d041a40 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55709d041a20 <col:12> 'int' 6
| `-EnumConstantDecl 0x55709d041af0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55709d041ad0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55709d041ab0 <col:13> 'int' 7
|-VarDecl 0x55709d041b60 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55709d041be8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55709d041c70 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55709d041cf8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55709d041d80 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55709d041e08 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55709d041e90 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55709d041f18 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55709d041fa0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55709d042028 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55709d0420b0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55709d0421b0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55709d0474a8 '_nerrors' 'int'
| | `-IntegerLiteral 0x55709d047c38 <line:128:13> 'int' 0
| `-CompoundStmt 0x55709d047ca8 <col:16, line:129:5>
|-CXXDestructorDecl 0x55709d0422a0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55709d047cb8 <col:29, line:132:5>
|-CXXMethodDecl 0x55709d042458 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55709d042390 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55709d042520 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55709d042608 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55709d047d10 <col:44, line:161:5>
|   `-ReturnStmt 0x55709d047d00 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55709d047ce8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55709d047cc8 <col:9> 'ErrorHandler *' lvalue Var 0x55709d047508 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55709d042748 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55709d0426b8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55709d042810 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55709d047d70 <col:43, line:173:5>
|   `-ReturnStmt 0x55709d047d60 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55709d047d48 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55709d047d28 <col:9> 'ErrorHandler *' lvalue Var 0x55709d047580 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55709d0428c8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55709d042948 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55709d042a58 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55709d0429c8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55709d042ba8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55709d042b18 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55709d042d00 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55709d042c68 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55709d042e58 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x55709d042dc0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55709d042fb0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55709d042f18 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55709d0431c0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55709d043068 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55709d0430e8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55709d043398 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55709d043280 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55709d043300 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55709d0435b8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55709d043458 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55709d0434d8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55709d043798 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55709d043678 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55709d0436f8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55709d043978 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55709d043858 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55709d0438d8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55709d043b00 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55709d043a38 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55709d043cd0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55709d043bb8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55709d043c30 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55709d047fc8 <col:57, line:234:5>
|   `-ReturnStmt 0x55709d047fb8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55709d047fa0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55709d047f48 <col:9, col:41> 'int'
|         |-MemberExpr 0x55709d047f18 <col:9> '<bound member function type>' ->xmessage 0x55709d043b00
|         | `-CXXThisExpr 0x55709d047f08 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55709d047f88 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55709d047f70 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55709d047ee8 <col:18, col:40> 'String' (CXXTemporary 0x55709d047ee8)
|               `-CallExpr 0x55709d047eb0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55709d047e98 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55709d047e10 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55709d045cc8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55709d047e30 <col:31> 'const String' lvalue ParmVar 0x55709d043c30 'str' 'const String &'
|                 `-DeclRefExpr 0x55709d047e50 <col:36> 'const String' lvalue ParmVar 0x55709d043bb8 'anno' 'const String &'
|-CXXMethodDecl 0x55709d043fb0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55709d043d90 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55709d043e10 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55709d043e88 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55709d048258 <col:68, line:243:5>
|   `-ReturnStmt 0x55709d048248 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55709d048230 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55709d0481d0 <col:9, col:41> 'int'
|         |-MemberExpr 0x55709d0481a0 <col:9> '<bound member function type>' ->xmessage 0x55709d043cd0
|         | `-CXXThisExpr 0x55709d048190 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55709d048068 <col:18> 'const String' lvalue ParmVar 0x55709d043d90 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55709d048218 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55709d048200 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55709d048170 <col:24, col:40> 'String' (CXXTemporary 0x55709d048170)
|               `-CXXMemberCallExpr 0x55709d048108 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55709d048098 <col:24> '<bound member function type>' ->vformat 0x55709d045190
|                 | `-CXXThisExpr 0x55709d048088 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55709d048138 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55709d0480c8 <col:32> 'const char *' lvalue ParmVar 0x55709d043e10 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55709d048150 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55709d0480e8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55709d043e88 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55709d044250 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55709d044078 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55709d0440f0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55709d044168 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55709d048598 <col:23, line:254:5>
|   `-ReturnStmt 0x55709d048588 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55709d048570 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55709d048510 <col:9, col:71> 'int'
|         |-MemberExpr 0x55709d0484e0 <col:9> '<bound member function type>' ->xmessage 0x55709d043cd0
|         | `-CXXThisExpr 0x55709d0484d0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55709d048558 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55709d048540 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55709d048490 <col:18, col:65> 'String' (CXXTemporary 0x55709d048490)
|         |     `-CallExpr 0x55709d048428 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55709d048410 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55709d0482f8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55709d045cc8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55709d048318 <col:31> 'const String' lvalue ParmVar 0x55709d0440f0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55709d048470 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55709d048458 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55709d0483f0 <col:37, col:64> 'String' (CXXTemporary 0x55709d0483f0)
|         |             `-CallExpr 0x55709d0483c0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55709d0483a8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55709d048338 <col:37> 'String (const String &)' lvalue CXXMethod 0x55709d046318 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55709d048358 <col:56> 'const String' lvalue ParmVar 0x55709d044078 'landmark' 'const String &'
|         `-DeclRefExpr 0x55709d0484b0 <col:68> 'const String' lvalue ParmVar 0x55709d044168 'str' 'const String &'
|-CXXMethodDecl 0x55709d0445d0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55709d044318 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55709d044390 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55709d044410 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55709d044488 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55709d048850 <col:34, line:267:5>
|   `-ReturnStmt 0x55709d048840 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55709d048828 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55709d0487c0 <col:9, col:51> 'int'
|         |-MemberExpr 0x55709d048790 <col:9> '<bound member function type>' ->xmessage 0x55709d044250
|         | `-CXXThisExpr 0x55709d048780 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55709d048638 <col:18> 'const String' lvalue ParmVar 0x55709d044318 'landmark' 'const String &'
|         |-DeclRefExpr 0x55709d048658 <col:28> 'const String' lvalue ParmVar 0x55709d044390 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55709d048810 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55709d0487f8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55709d048760 <col:34, col:50> 'String' (CXXTemporary 0x55709d048760)
|               `-CXXMemberCallExpr 0x55709d0486f8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55709d048688 <col:34> '<bound member function type>' ->vformat 0x55709d045190
|                 | `-CXXThisExpr 0x55709d048678 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55709d048728 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55709d0486b8 <col:42> 'const char *' lvalue ParmVar 0x55709d044410 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55709d048740 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55709d0486d8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55709d044488 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55709d0446e0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55709d0488d0 <col:25, line:288:5>
|   `-ReturnStmt 0x55709d0488c0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55709d0488a8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55709d048878 <col:9> 'const int' lvalue ->_nerrors 0x55709d0474a8
|         `-CXXThisExpr 0x55709d048868 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55709d0448f0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55709d044798 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55709d044818 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55709d044bd8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55709d0449b8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55709d044a38 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55709d044ab0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55709d044d70 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55709d044ca8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55709d044fb8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55709d044e30 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55709d044ea8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55709d048b30 <col:58, line:357:5>
|   `-ReturnStmt 0x55709d048b20 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55709d048b08 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55709d048ad8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55709d048ac0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55709d048aa0 <col:9, col:29> 'String' (CXXTemporary 0x55709d048aa0)
|             `-CallExpr 0x55709d048a30 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55709d048a18 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55709d048998 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55709d044bd8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55709d048938 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55709d048a68 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55709d048958 <col:21> 'const char *' lvalue ParmVar 0x55709d044e30 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55709d048a80 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55709d048978 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55709d044ea8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55709d045190 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55709d045080 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55709d0450f8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55709d0452e8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55709d045258 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55709d045430 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55709d0453a0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55709d0456d0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55709d0454e8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55709d045568 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55709d0455e0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55709d045830 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55709d0457a0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55709d048c48 <col:37, line:441:5>
|   `-IfStmt 0x55709d048c30 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55709d048bb8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55709d048b88 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55709d048b48 <col:6> 'int' lvalue ParmVar 0x55709d0457a0 'level' 'int'
|     | `-ImplicitCastExpr 0x55709d048ba0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55709d048b68 <col:15> 'ErrorHandler::Level' EnumConstant 0x55709d0418b0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55709d048c18 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55709d048be8 <col:8> 'int' lvalue ->_nerrors 0x55709d0474a8
|         `-CXXThisExpr 0x55709d048bd8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55709d0458f8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55709d048ce0 <col:26, line:448:5>
|   `-BinaryOperator 0x55709d048cc0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55709d048c70 <col:2> 'int' lvalue ->_nerrors 0x55709d0474a8
|     | `-CXXThisExpr 0x55709d048c60 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55709d048ca0 <col:13> 'int' 0
|-CXXMethodDecl 0x55709d045ac0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55709d0459b0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55709d045a28 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55709d045cc8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55709d045b80 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55709d045bf8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55709d045f78 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55709d045d88 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55709d045e08 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55709d045e88 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55709d046030 <col:59> 0 0
|-CXXMethodDecl 0x55709d0461c8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55709d0460a8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55709d046128 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55709d049350 <col:70, line:534:5>
|   |-DeclStmt 0x55709d048e50 <line:528:2, col:20>
|   | |-VarDecl 0x55709d048d08 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55709d048d70 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55709d048da8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55709d048e10 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55709d048f20 <line:529:2, col:23>
|   | `-VarDecl 0x55709d048e80 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55709d048f08 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55709d048ee8 <col:18> 'const char *' lvalue ParmVar 0x55709d0460a8 'begin' 'const char *'
|   |-DoStmt 0x55709d0492e8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55709d049218 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55709d049200 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55709d0491e0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55709d048f38 <col:6> 'const char *' lvalue Var 0x55709d048e80 'x' 'const char *'
|   | |     `-CallExpr 0x55709d049130 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55709d049118 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55709d0490d0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55709d047980 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55709d049198 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55709d049180 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55709d048ff0 <col:20, col:27> 'String' (CXXTemporary 0x55709d048ff0)
|   | |       |     `-CXXTemporaryObjectExpr 0x55709d048fb8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55709d0491b0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55709d049010 <col:30> 'const char *' lvalue Var 0x55709d048e80 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55709d0491c8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55709d049030 <col:33> 'const char *' lvalue ParmVar 0x55709d046128 'end' 'const char *'
|   | |       |-UnaryOperator 0x55709d049070 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55709d049050 <col:39> 'String' lvalue Var 0x55709d048d08 'name' 'String'
|   | |       |-UnaryOperator 0x55709d0490a8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55709d049088 <col:46> 'String' lvalue Var 0x55709d048da8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55709d0490c0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55709d0492d0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55709d0492b8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55709d049298 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55709d049268 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55709cd3e548
|   |         `-ImplicitCastExpr 0x55709d049250 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55709d049230 <col:11> 'String' lvalue Var 0x55709d048d08 'name' 'String'
|   `-ReturnStmt 0x55709d049340 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55709d049328 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55709d049308 <col:9> 'const char *' lvalue Var 0x55709d048e80 'x' 'const char *'
|-CXXMethodDecl 0x55709d046318 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55709d046288 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55709d049958 <col:55, line:550:5>
|   `-IfStmt 0x55709d049930 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55709d049590 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55709d049578 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55709d049560 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55709d049540 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55709d049510 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55709cd3e548
|     | |       `-DeclRefExpr 0x55709d0493b0 <col:6> 'const String' lvalue ParmVar 0x55709d046288 'x' 'const String &'
|     | `-BinaryOperator 0x55709d0494f0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55709d0494c0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55709d049470 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55709d049458 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55709d049410 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55709cd57d80 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55709d0493d0 <col:11> 'const String' lvalue ParmVar 0x55709d046288 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55709d0493f0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55709d0494d8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55709d0494a8 <col:19> 'char' 123
|     |-ReturnStmt 0x55709d049600 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55709d0495d0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55709d0495b0 <col:13> 'const String' lvalue ParmVar 0x55709d046288 'x' 'const String &'
|     `-IfStmt 0x55709d049908 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55709d049698 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55709d049680 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55709d049660 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55709d049630 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55709cd3e548
|       |       `-DeclRefExpr 0x55709d049610 <col:11> 'const String' lvalue ParmVar 0x55709d046288 'x' 'const String &'
|       |-ReturnStmt 0x55709d049820 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55709d049808 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55709d0497d8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55709d0497c0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55709d0497a0 <col:13, col:29> 'String' (CXXTemporary 0x55709d0497a0)
|       |         `-CallExpr 0x55709d049750 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55709d049738 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55709d0496b0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55709d045ac0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55709d049780 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55709d0496d0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55709d0496f0 <col:28> 'const String' lvalue ParmVar 0x55709d046288 'x' 'const String &'
|       `-ReturnStmt 0x55709d0498f8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55709d0498e0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55709d0498b0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55709d049898 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55709d049878 <col:13, col:20> 'String' (CXXTemporary 0x55709d049878)
|                 `-CXXTemporaryObjectExpr 0x55709d049840 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55709d0464e0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55709d0463d0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55709d046448 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55709d047c28 <col:71> 'bool' false
|-CXXRecordDecl 0x55709d046590 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55709d046888 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55709d046820 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55709d0467c0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55709d046780 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55709cd3ade0 'String'
|       | `-CXXRecord 0x55709cd3ad50 'String'
|       |-BuiltinType 0x55709ca0e3b0 'int'
|       `-DecayedType 0x55709cfd4c30 '__va_list_tag *' sugar
|         |-TypedefType 0x55709cfd4c00 'va_list' sugar
|         | |-Typedef 0x55709cc2be90 'va_list'
|         | `-TypedefType 0x55709cc2be40 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55709cb63a68 '__gnuc_va_list'
|         |   `-TypedefType 0x55709cb639d0 '__builtin_va_list' sugar
|         |     |-Typedef 0x55709ca4fc18 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55709ca4fbc0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55709ca0f100 '__va_list_tag'
|         |         `-CXXRecord 0x55709ca0f068 '__va_list_tag'
|         `-PointerType 0x55709cc31730 '__va_list_tag *'
|           `-RecordType 0x55709ca0f100 '__va_list_tag'
|             `-CXXRecord 0x55709ca0f068 '__va_list_tag'
|-EnumDecl 0x55709d0468e0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55709d0469e0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55709d046f50 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709d0469c0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55709d0469a0 <col:16> 'int' 1
| |-EnumConstantDecl 0x55709d046a70 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55709d046f68 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709d046a50 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55709d046a30 <col:21> 'int' 2
| |-EnumConstantDecl 0x55709d046b00 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55709d046f80 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709d046ae0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55709d046ac0 <col:22> 'int' 4
| |-EnumConstantDecl 0x55709d046b90 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55709d046f98 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709d046b70 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55709d046b50 <col:17> 'int' 8
| |-EnumConstantDecl 0x55709d046c20 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55709d046fb0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709d046c00 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55709d046be0 <col:22> 'int' 16
| |-EnumConstantDecl 0x55709d046cc0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55709d046fc8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709d046ca0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55709d046c80 <col:19> 'int' 32
| |-EnumConstantDecl 0x55709d046d50 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55709d046fe0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709d046d30 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55709d046d10 <col:17> 'int' 64
| |-EnumConstantDecl 0x55709d046de0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55709d046ff8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709d046dc0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55709d046da0 <col:14> 'int' 128
| |-EnumConstantDecl 0x55709d046e70 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55709d047010 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709d046e50 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55709d046e30 <col:16> 'int' 256
| `-EnumConstantDecl 0x55709d046f00 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55709d047028 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55709d046ee0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55709d046ec0 <col:12> 'int' 1024
|-CXXMethodDecl 0x55709d047238 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55709d047050 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55709d0470f0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55709d0473c0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55709d0472f8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55709d047468 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55709d0474a8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55709d047508 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55709d047580 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55709d047980 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55709d0475f8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55709d047678 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55709d0476f8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55709d047770 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55709d0477e8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55709d047860 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55709d047aa8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55709d047aa8
| `-ParmVarDecl 0x55709d047bb8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55709d049cb8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55709d049cb8
  `-ParmVarDecl 0x55709d049dc8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55709cfd3c78 prev 0x55709cf35028 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55709cfd3d70 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55709cfd3e00 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55709cfd3f38 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55709cfd3e38 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55709cfd5360 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55709cfd5340 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55709cfd4ed8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55709cfd53f0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55709cfd53b0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55709cfd3e38 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55709cfd4f40 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55709cfd5470 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55709cfd5430 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55709cfd4fa0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55709cfd54b0 <col:54> 'bool' false
| `-CompoundStmt 0x55709cfd55b8 <col:61, line:38:5>
|   `-BinaryOperator 0x55709cfd5598 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55709cfd5530 <col:9> 'const Element *' lvalue ->_context 0x55709cfd4e78
|     | `-CXXThisExpr 0x55709cfd5520 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55709cfd5580 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55709cfd5560 <col:20> 'int' 0
|-CXXConstructorDecl 0x55709cfd4148 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55709cfd3ff8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55709cfd4070 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55709cfd5398 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55709cfd5378 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55709cfd4e78 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55709cfd5610 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55709cfd55d0 <col:20> 'const Element *' lvalue ParmVar 0x55709cfd3ff8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55709cfd4ed8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55709cfd5690 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55709cfd5650 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55709cfd4070 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55709cfd4f40 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55709cfd5710 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55709cfd56d0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55709cfd4fa0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55709cfd5750 <col:73> 'bool' false
| `-CompoundStmt 0x55709cfd57c8 <col:80, line:46:5>
|-CXXMethodDecl 0x55709cfd4278 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55709cfd5840 <col:36, line:51:5>
|   `-ReturnStmt 0x55709cfd5830 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55709cfd5818 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55709cfd57e8 <col:16> 'const Element *const' lvalue ->_context 0x55709cfd4e78
|         `-CXXThisExpr 0x55709cfd57d8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55709cfd4368 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55709cfd58c0 <col:32, line:57:5>
|   `-ReturnStmt 0x55709cfd58b0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55709cfd5898 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55709cfd5868 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55709cfd4ed8
|         `-CXXThisExpr 0x55709cfd5858 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55709cfd4428 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55709cfd45b0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55709cfd44e0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55709cfd4700 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55709cfd4670 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55709cfd4850 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55709cfd47c0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55709cfd4a58 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55709cfd4908 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55709cfd4980 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55709cfd4d88 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55709cfd4b18 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55709cfd4b98 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55709cfd4c60 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55709cfd4e40 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55709cfd4e78 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55709cfd4ed8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55709cfd4f40 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55709cfd4fa0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55709cfd4ff0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55709cfd4ff0
| `-ParmVarDecl 0x55709cfd5108 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55709cfd51a8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55709cfd51a8
| `-ParmVarDecl 0x55709cfd52b8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55709d055b38 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55709cffdb80 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55709cffdd58 prev 0x55709cffdb80 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55709cffdde8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55709cffde10 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55709ca0e3b0 'int'
|-TypedefDecl 0x55709cfff9e0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55709cfff990 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55709cffe2c0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55709cffe1c0 'type'
|     `-TemplateSpecializationType 0x55709cffe150 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55709cffe030 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55709cffe010 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55709cffdff0 <col:24> 'unsigned long' 4
|       `-RecordType 0x55709cffe130 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55709cffe050 'char_array'
|-TypedefDecl 0x55709cfffa98 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55709cfffa60 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55709cfffa40 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55709cfff9e0 'type'
|     `-ElaboratedType 0x55709cfff990 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55709cffe2c0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55709cffe1c0 'type'
|         `-TemplateSpecializationType 0x55709cffe150 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55709cffe030 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55709cffe010 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55709cffdff0 <col:24> 'unsigned long' 4
|           `-RecordType 0x55709cffe130 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55709cffe050 'char_array'
|-CXXMethodDecl 0x55709cfffc18 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55709cfffb28 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55709cfffd08 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55709cfffde8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55709d0000b8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55709cffffc0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55709d0002f8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55709d000170 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55709d0001e8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55709d0004c8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55709d0003b8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55709d000430 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55709d000628 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55709d0006f8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55709d000948 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55709d0007b8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55709d000830 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55709d000ba8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55709d000a18 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55709d000a90 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55709d000d68 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55709d000c78 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55709d000f28 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55709d000e30 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55709d000fe0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55709d001090 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55709d008688 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55709d001140 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55709d008570 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55709d008928 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55709d008830 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55709d0089f0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55709d008a40 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55709d008a90 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55709cffc588 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55709cffc798 prev 0x55709cffc588 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55709cffdaf0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55709cffdaa0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55709cffda80 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55709cffd930 'type'
|     `-SubstTemplateTypeParmType 0x55709cffd750 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55709ccd3c20 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55709ccd3bc8 'T'
|       `-RecordType 0x55709cffd2a0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55709cffd1b8 'sized_array_memory'
|-FieldDecl 0x55709d008ae0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55709d008b30 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55709d008b68 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55709cffc830 'int' sugar
|   |-TemplateTypeParmType 0x55709cd0b910 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55709cd0b8b8 'T'
|   `-BuiltinType 0x55709ca0e3b0 'int'
|-TypedefDecl 0x55709d008bf8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55709d008bc0 'int &'
|   `-SubstTemplateTypeParmType 0x55709cffc830 'int' sugar
|     |-TemplateTypeParmType 0x55709cd0b910 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55709cd0b8b8 'T'
|     `-BuiltinType 0x55709ca0e3b0 'int'
|-TypedefDecl 0x55709d008cb8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55709d008c80 'const int &'
|   `-QualType 0x55709cffc831 'const int' const
|     `-SubstTemplateTypeParmType 0x55709cffc830 'int' sugar
|       |-TemplateTypeParmType 0x55709cd0b910 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55709cd0b8b8 'T'
|       `-BuiltinType 0x55709ca0e3b0 'int'
|-TypedefDecl 0x55709d008d48 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55709d008d10 'int *'
|   `-SubstTemplateTypeParmType 0x55709cffc830 'int' sugar
|     |-TemplateTypeParmType 0x55709cd0b910 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55709cd0b8b8 'T'
|     `-BuiltinType 0x55709ca0e3b0 'int'
|-TypedefDecl 0x55709d008dd8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55709d008da0 'const int *'
|   `-QualType 0x55709cffc831 'const int' const
|     `-SubstTemplateTypeParmType 0x55709cffc830 'int' sugar
|       |-TemplateTypeParmType 0x55709cd0b910 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55709cd0b8b8 'T'
|       `-BuiltinType 0x55709ca0e3b0 'int'
|-TypedefDecl 0x55709d0099c0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55709d009970 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55709d009950 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55709d0098e0 'type'
|     `-SubstTemplateTypeParmType 0x55709d0096a0 'int' sugar
|       |-TemplateTypeParmType 0x55709ccdea20 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55709ccde9d0 'T'
|       `-BuiltinType 0x55709ca0e3b0 'int'
|-TypedefDecl 0x55709d009a28 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55709d008c80 'const int &'
|   `-QualType 0x55709cffc831 'const int' const
|     `-SubstTemplateTypeParmType 0x55709cffc830 'int' sugar
|       |-TemplateTypeParmType 0x55709cd0b910 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55709cd0b8b8 'T'
|       `-BuiltinType 0x55709ca0e3b0 'int'
|-TypedefDecl 0x55709d009a80 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55709ca0e3b0 'int'
|-TypedefDecl 0x55709d009ae8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55709d008d10 'int *'
|   `-SubstTemplateTypeParmType 0x55709cffc830 'int' sugar
|     |-TemplateTypeParmType 0x55709cd0b910 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55709cd0b8b8 'T'
|     `-BuiltinType 0x55709ca0e3b0 'int'
|-TypedefDecl 0x55709d009b50 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55709d008da0 'const int *'
|   `-QualType 0x55709cffc831 'const int' const
|     `-SubstTemplateTypeParmType 0x55709cffc830 'int' sugar
|       |-TemplateTypeParmType 0x55709cd0b910 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55709cd0b8b8 'T'
|       `-BuiltinType 0x55709ca0e3b0 'int'
|-EnumDecl 0x55709d009ba8 <line:134:5> col:5
| `-EnumConstantDecl 0x55709d009ca0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55709d009c80 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55709cd0cf98 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55709cd0cf70 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55709cd0cf50 <col:40> 'int' 1
|-CXXConstructorDecl 0x55709d009d28 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55709d009f78 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55709d009de0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55709d009e80 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55709d00a238 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55709d00a120 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55709d00a4f8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55709d00a3e0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55709d00a840 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55709d00a720 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55709d00ab50 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55709d00aa30 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55709d00ae40 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55709d00ac88 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55709d00ad00 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55709d00af68 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55709d00b048 <col:20> Inherited
| `-OptimizeNoneAttr 0x55709d00b0a0 <col:30> Inherited
|-CXXMethodDecl 0x55709d00b0e8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55709d00b198 <col:20> Inherited
| `-OptimizeNoneAttr 0x55709d00b1f0 <col:30> Inherited
|-CXXMethodDecl 0x55709d00b2b8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55709d00b368 <col:20> Inherited
| `-OptimizeNoneAttr 0x55709d00b3c0 <col:30> Inherited
|-CXXMethodDecl 0x55709d00b408 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55709d00b4b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55709d00b510 <col:30> Inherited
|-CXXMethodDecl 0x55709d00b558 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55709d00b608 <col:20> Inherited
| `-OptimizeNoneAttr 0x55709d00b660 <col:30> Inherited
|-CXXMethodDecl 0x55709d00b6a8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55709d00b758 <col:20> Inherited
| `-OptimizeNoneAttr 0x55709d00b7b0 <col:30> Inherited
|-CXXMethodDecl 0x55709d00b7d8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55709d00b888 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55709d00b938 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55709d00baf8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55709d00b9e8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55709d00ba60 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55709d00bc48 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55709d00bbb8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55709d00bdf8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55709d00bd00 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55709d00beb0 <col:20>
| `-OptimizeNoneAttr 0x55709d00bf08 <col:30>
|-CXXMethodDecl 0x55709d00c028 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55709d00bf30 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55709d00c0e0 <col:20>
| `-OptimizeNoneAttr 0x55709d00c138 <col:30>
|-CXXMethodDecl 0x55709d00c1f0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55709d00c160 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55709d00c338 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55709d00c2a8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55709d00c468 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55709d00c598 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55709d00c668 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55709d00c738 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55709d00c878 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55709d00c7e8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55709d00c9c0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55709d00c930 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55709d00cb08 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55709d00ca78 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55709d00cbc0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55709d00ccc0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55709d00cc30 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55709d00cd78 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55709d00ce38 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55709d00cf38 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55709d00d0b8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55709d00cff8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55709d00d878 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55709d00d170 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55709d00d7d8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55709d00d6d8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55709d00d958 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55709d00daa8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55709d00da18 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55709d00db60 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55709d00dda8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55709d00dc20 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55709d00dc98 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55709d00df68 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55709d00de78 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55709d00e1b8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55709d00e030 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55709d00e0a8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55709d00e278 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55709d00e4d8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55709d00e3e0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55709d00e5a8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55709cffa6f8 prev 0x55709cfdc3b8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55709cffa7f0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55709cffa8e0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55709d020380 <col:16, line:828:9>
|-CXXDestructorDecl 0x55709cffa9d0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55709d020390 <col:25, line:830:9>
|-CXXMethodDecl 0x55709cffaad0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55709cffab80 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55709cffac28 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55709cffac28
| `-ParmVarDecl 0x55709cffad38 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55709cffb4f8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55709cffb4f8
  `-ParmVarDecl 0x55709cffb608 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55709cfdc1c8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55709cfdc328 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55709cfdc3b8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55709cfdc470 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55709cfdc578 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55709cfdc4a8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55709d00fb68 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55709d00fb48 <col:31> 'int' 0
|-CXXConstructorDecl 0x55709cfdc898 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55709cfdc710 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55709cfdc788 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55709d00fba0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55709d00fb80 <col:59> 'int' 0
|-CXXConstructorDecl 0x55709cfdca70 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55709cfdc960 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55709cfdc9d8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55709d00fbd8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55709d00fbb8 <col:55> 'int' 0
|-CXXConstructorDecl 0x55709cfdce28 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55709cfdcc10 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55709cfdcc88 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55709cfdcd00 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55709d00fc10 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55709d00fbf0 <col:31> 'int' 0
|-CXXConstructorDecl 0x55709cfdcfe8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55709cfdcf28 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55709cfdd0e0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55709cfdd2c8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55709cfdd1d0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55709cfdd3b8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55709d00ffc0 <col:24, line:291:5>
|   `-ReturnStmt 0x55709d00ffb0 <line:290:9, col:79>
|     `-BinaryOperator 0x55709d00ff90 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55709d00fe68 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55709d00fdc0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55709d00fda0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55709d00fc98 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55709d00fc80 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55709d00fc68 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55709d00fc38 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55709cffc520
|       | |   |       `-CXXThisExpr 0x55709d00fc28 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55709d00fd88 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55709d00fd70 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55709d00fd38 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55709d00fd08 <col:28, col:35> '<bound member function type>' ->size 0x55709cfbc318
|       | |           `-ImplicitCastExpr 0x55709d00fd58 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55709d00fcf0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55709d00fcc0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55709cffc520
|       | |                 `-CXXThisExpr 0x55709d00fcb0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55709d00fe50 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55709d00fe38 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55709d00fe20 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55709d00fdf0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55709d00e6f0
|       |         `-CXXThisExpr 0x55709d00fde0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55709d00ff70 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55709d00ff58 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55709d00ff40 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55709d00ff00 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55709d00fee8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55709d00fe98 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55709d00e7a0
|         |     |   `-CXXThisExpr 0x55709d00fe88 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55709d00fec8 <col:73> 'int' 0
|         `-IntegerLiteral 0x55709d00ff20 <col:79> 'int' 0
|-CXXMethodDecl 0x55709cfdd478 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55709d010198 <col:32, line:296:5>
|   `-ReturnStmt 0x55709d010188 <line:295:9, col:49>
|     `-BinaryOperator 0x55709d010168 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55709d010048 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55709d010030 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55709d010018 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55709d00ffe8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55709d00e6f0
|       |       `-CXXThisExpr 0x55709d00ffd8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55709d010148 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55709d010130 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55709d010118 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55709d0100d8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55709d0100c0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55709d010070 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55709d00e7a0
|         |     |   `-CXXThisExpr 0x55709d010060 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55709d0100a0 <col:43> 'int' 0
|         `-IntegerLiteral 0x55709d0100f8 <col:49> 'int' 0
|-CXXMethodDecl 0x55709cfdd568 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55709d0103a8 <col:19, line:306:5>
|   |-IfStmt 0x55709d0102c8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55709d010208 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55709d0101f0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55709d0101c0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55709cffc520
|   | |     `-CXXThisExpr 0x55709d0101b0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55709d0102a8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55709d010278 <col:13, col:20> '<bound member function type>' ->clear 0x55709cfbed18
|   |     `-ImplicitCastExpr 0x55709d010260 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55709d010230 <col:13> 'Vector<String> *' lvalue ->_conf 0x55709cffc520
|   |         `-CXXThisExpr 0x55709d010220 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55709d010350 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55709d010320 <col:9, col:16> '<bound member function type>' .clear 0x55709d00e278
|   |   `-MemberExpr 0x55709d0102f0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55709d00e690
|   |     `-CXXThisExpr 0x55709d0102e0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55709d010398 <line:305:9, col:17>
|     `-UnaryOperator 0x55709d010380 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55709d010370 <col:17> 'Args *' this
|-CXXMethodDecl 0x55709cfdd7e8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55709cfdd6f0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55709cfdd968 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55709cfdd8a0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55709cfddce8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55709cfdda10 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55709cfddc48 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55709cfddab8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55709cfddb30 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55709d012040 <col:67, line:327:5>
|     |-WhileStmt 0x55709d011ff0 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55709d010490 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55709d010410 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55709cf2d4f8 0x55709cd76ad8 0x55709cd767b0 0x55709cd67f90 0x55709cd67c40 0x55709cd67530 0x55709cd39ea0 0x55709ccc6360
|     | | |-DeclRefExpr 0x55709d0103d0 <col:16> 'Iter' lvalue ParmVar 0x55709cfddab8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55709d0103f0 <col:25> 'Iter' lvalue ParmVar 0x55709cfddb30 'end' 'Iter'
|     | `-CompoundStmt 0x55709d011fd0 <col:30, line:325:9>
|     |   |-CallExpr 0x55709d011f70 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55709d0104d8 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55709d011f40 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55709d011ed0 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55709cf32678 0x55709cf32298 0x55709cf31ec8 0x55709cf31ae8 0x55709cf31708 0x55709cf31338
|     |   |   `-DeclRefExpr 0x55709d010538 <col:24> 'Iter' lvalue ParmVar 0x55709cfddab8 'begin' 'Iter'
|     |   `-UnaryOperator 0x55709d011fb8 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55709d011f98 <col:15> 'Iter' lvalue ParmVar 0x55709cfddab8 'begin' 'Iter'
|     `-ReturnStmt 0x55709d012030 <line:326:9, col:17>
|       `-UnaryOperator 0x55709d012018 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55709d012008 <col:17> 'Args *' this
|-CXXMethodDecl 0x55709cfdddf0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55709cfddd60 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55709cfddf38 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55709cfddea8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55709cfde000 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55709d012120 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55709d0120c0 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55709d012070 <col:9> '<bound member function type>' ->reset_from 0x55709d00eb18
|   | | `-CXXThisExpr 0x55709d012060 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55709d0120a0 <col:20> 'int' 0
|   `-ReturnStmt 0x55709d012110 <line:352:9, col:17>
|     `-UnaryOperator 0x55709d0120f8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55709d0120e8 <col:17> 'Args *' this
|-VarDecl 0x55709cfde0b8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55709cfde120 <col:38> 'int' 1
|-VarDecl 0x55709cfde1b0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55709cfde218 <col:39> 'int' 2
|-VarDecl 0x55709cfde2a8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55709cfde310 <col:39> 'int' 4
|-VarDecl 0x55709cfde3a0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55709cfde408 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55709cfde788 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55709cfde480 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55709cfde6e8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55709cfde530 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfde5d8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55709d012278 <col:43, line:371:5>
|     `-ReturnStmt 0x55709d012268 <line:370:9, col:34>
|       `-CallExpr 0x55709d012230 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55709d012150 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55709d0121d0 <col:21> 'const char *' lvalue ParmVar 0x55709cfde530 'keyword' 'const char *'
|         |-IntegerLiteral 0x55709d0121f0 <col:30> 'int' 0
|         `-DeclRefExpr 0x55709d012210 <col:33> 'T' lvalue ParmVar 0x55709cfde5d8 'x' 'T &'
|-FunctionTemplateDecl 0x55709cfdeab8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55709cfde7f0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55709cfdea18 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55709cfde8a0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfde948 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55709d0123c8 <col:45, line:375:5>
|     `-ReturnStmt 0x55709d0123b8 <line:374:9, col:42>
|       `-CallExpr 0x55709d012380 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55709d0122a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55709d012320 <col:21> 'const char *' lvalue ParmVar 0x55709cfde8a0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55709d012340 <col:30> 'const int' lvalue Var 0x55709cfde0b8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55709d012360 <col:41> 'T' lvalue ParmVar 0x55709cfde948 'x' 'T &'
|-FunctionTemplateDecl 0x55709cfdede8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55709cfdeb20 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55709cfded48 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55709cfdebd0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfdec78 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55709d012518 <col:45, line:379:5>
|     `-ReturnStmt 0x55709d012508 <line:378:9, col:43>
|       `-CallExpr 0x55709d0124d0 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55709d0123f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55709d012470 <col:21> 'const char *' lvalue ParmVar 0x55709cfdebd0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55709d012490 <col:30> 'const int' lvalue Var 0x55709cfde1b0 'positional' 'const int'
|         `-DeclRefExpr 0x55709d0124b0 <col:42> 'T' lvalue ParmVar 0x55709cfdec78 'x' 'T &'
|-FunctionTemplateDecl 0x55709cfdf118 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55709cfdee50 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55709cfdf078 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55709cfdef00 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfdefa8 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x55709d012718 <col:46, line:383:5>
|     `-ReturnStmt 0x55709d012708 <line:382:9, col:55>
|       `-CallExpr 0x55709d0126d0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55709d012540 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55709d0125c0 <col:21> 'const char *' lvalue ParmVar 0x55709cfdef00 'keyword' 'const char *'
|         |-BinaryOperator 0x55709d012690 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55709d012640 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55709d012620 <col:30> 'const int' lvalue Var 0x55709cfde0b8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55709d012678 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55709d012658 <col:42> 'const int' lvalue Var 0x55709cfde1b0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55709d0126b0 <col:54> 'T' lvalue ParmVar 0x55709cfdefa8 'x' 'T &'
|-FunctionTemplateDecl 0x55709cfdf518 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55709cfdf180 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55709cfdf478 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55709cfdf230 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfdf2b0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55709cfdf358 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55709d012858 <col:54, line:388:5>
|     |-CallExpr 0x55709d0127e0 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55709d012730 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55709d012770 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55709d012780 <col:30> 'const char *' lvalue ParmVar 0x55709cfdf230 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55709d0127a0 <col:39> 'int' lvalue ParmVar 0x55709cfdf2b0 'flags' 'int'
|     | `-DeclRefExpr 0x55709d0127c0 <col:46> 'T' lvalue ParmVar 0x55709cfdf358 'x' 'T &'
|     `-ReturnStmt 0x55709d012848 <line:387:9, col:17>
|       `-UnaryOperator 0x55709d012830 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55709d012820 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55709cfdf9c8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55709cfdf588 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55709cfdf608 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55709cfdf928 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55709cfdf6c8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfdf768 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55709cfdf808 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55709d0129c8 <col:74, line:403:5>
|     `-ReturnStmt 0x55709d0129b8 <line:402:9, col:56>
|       `-CallExpr 0x55709d012978 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55709d012888 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55709d0128f8 <col:28> 'const char *' lvalue ParmVar 0x55709cfdf6c8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55709d012918 <col:37> 'int' 0
|         |-DeclRefExpr 0x55709d012938 <col:40> 'T' lvalue ParmVar 0x55709cfdf768 'x' 'T &'
|         `-DeclRefExpr 0x55709d012958 <col:43> 'const V' lvalue ParmVar 0x55709cfdf808 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55709cfdfe38 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55709cfdfa38 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55709cfdfab8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55709cfdfd98 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55709cfdfb78 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfdfc18 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55709cfdfcb8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55709d012b30 <col:76, line:407:5>
|     `-ReturnStmt 0x55709d012b20 <line:406:9, col:65>
|       `-CallExpr 0x55709d012ae0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55709d0129f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55709d012a60 <col:28> 'const char *' lvalue ParmVar 0x55709cfdfb78 'keyword' 'const char *'
|         |-DeclRefExpr 0x55709d012a80 <col:37> 'const int' lvalue Var 0x55709cfde1b0 'positional' 'const int'
|         |-DeclRefExpr 0x55709d012aa0 <col:49> 'T' lvalue ParmVar 0x55709cfdfc18 'x' 'T &'
|         `-DeclRefExpr 0x55709d012ac0 <col:52> 'const V' lvalue ParmVar 0x55709cfdfcb8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55709cfe0388 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55709cfdfea8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55709cfdff28 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55709cfe02e8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55709cfdffe8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfe0068 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55709cfe0108 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55709cfe01a8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55709d012c98 <col:85, line:412:5>
|     |-CallExpr 0x55709d012c18 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55709d012b48 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55709d012b88 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55709d012b98 <col:37> 'const char *' lvalue ParmVar 0x55709cfdffe8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55709d012bb8 <col:46> 'int' lvalue ParmVar 0x55709cfe0068 'flags' 'int'
|     | |-DeclRefExpr 0x55709d012bd8 <col:53> 'T' lvalue ParmVar 0x55709cfe0108 'x' 'T &'
|     | `-DeclRefExpr 0x55709d012bf8 <col:56> 'const V' lvalue ParmVar 0x55709cfe01a8 'default_value' 'const V &'
|     `-ReturnStmt 0x55709d012c88 <line:411:9, col:17>
|       `-UnaryOperator 0x55709d012c70 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55709d012c60 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55709cfe0818 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55709cfe0400 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55709cfe0478 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55709cfe0778 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55709cfe0538 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfe05b0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55709cfe0658 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55709d012e18 <col:53, line:425:5>
|     `-ReturnStmt 0x55709d012e08 <line:424:9, col:42>
|       `-CallExpr 0x55709d012dc8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55709d012cc8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55709d012d48 <col:21> 'const char *' lvalue ParmVar 0x55709cfe0538 'keyword' 'const char *'
|         |-IntegerLiteral 0x55709d012d68 <col:30> 'int' 0
|         |-DeclRefExpr 0x55709d012d88 <col:33> 'P' lvalue ParmVar 0x55709cfe05b0 'parser' 'P'
|         `-DeclRefExpr 0x55709d012da8 <col:41> 'T' lvalue ParmVar 0x55709cfe0658 'x' 'T &'
|-FunctionTemplateDecl 0x55709cfe0c68 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55709cfe0888 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55709cfe0908 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55709cfe0bc8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55709cfe09c8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfe0a40 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55709cfe0ae8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55709d012f90 <col:55, line:429:5>
|     `-ReturnStmt 0x55709d012f80 <line:428:9, col:50>
|       `-CallExpr 0x55709d012f40 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55709d012e40 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55709d012ec0 <col:21> 'const char *' lvalue ParmVar 0x55709cfe09c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55709d012ee0 <col:30> 'const int' lvalue Var 0x55709cfde0b8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55709d012f00 <col:41> 'P' lvalue ParmVar 0x55709cfe0a40 'parser' 'P'
|         `-DeclRefExpr 0x55709d012f20 <col:49> 'T' lvalue ParmVar 0x55709cfe0ae8 'x' 'T &'
|-FunctionTemplateDecl 0x55709cfe10b8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55709cfe0cd8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55709cfe0d58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55709cfe1018 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55709cfe0e18 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfe0e90 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55709cfe0f38 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55709d013108 <col:55, line:433:5>
|     `-ReturnStmt 0x55709d0130f8 <line:432:9, col:51>
|       `-CallExpr 0x55709d0130b8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55709d012fb8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55709d013038 <col:21> 'const char *' lvalue ParmVar 0x55709cfe0e18 'keyword' 'const char *'
|         |-DeclRefExpr 0x55709d013058 <col:30> 'const int' lvalue Var 0x55709cfde1b0 'positional' 'const int'
|         |-DeclRefExpr 0x55709d013078 <col:42> 'P' lvalue ParmVar 0x55709cfe0e90 'parser' 'P'
|         `-DeclRefExpr 0x55709d013098 <col:50> 'T' lvalue ParmVar 0x55709cfe0f38 'x' 'T &'
|-FunctionTemplateDecl 0x55709cfe1508 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55709cfe1128 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55709cfe11a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x55709cfe1468 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x55709cfe1268 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55709cfe12e0 <col:40, col:42> col:42 referenced parser 'P'
| | |-ParmVarDecl 0x55709cfe1388 <col:50, col:53> col:53 referenced x 'T &'
| | `-CompoundStmt 0x55709d013330 <col:56, line:437:5>
| |   `-ReturnStmt 0x55709d013320 <line:436:9, col:63>
| |     `-CallExpr 0x55709d0132e0 <col:16, col:63> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55709d013130 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55709d0131b0 <col:21> 'const char *' lvalue ParmVar 0x55709cfe1268 'keyword' 'const char *'
| |       |-BinaryOperator 0x55709d013280 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55709d013230 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55709d013210 <col:30> 'const int' lvalue Var 0x55709cfde0b8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55709d013268 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55709d013248 <col:42> 'const int' lvalue Var 0x55709cfde1b0 'positional' 'const int' non_odr_use_constant
| |       |-DeclRefExpr 0x55709d0132a0 <col:54> 'P' lvalue ParmVar 0x55709cfe12e0 'parser' 'P'
| |       `-DeclRefExpr 0x55709d0132c0 <col:62> 'T' lvalue ParmVar 0x55709cfe1388 'x' 'T &'
| |-CXXMethodDecl 0x55709d0565d8 <line:435:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, AnnoArg, int &)'
| | |-TemplateArgument type 'AnnoArg'
| | |-TemplateArgument type 'int'
| | |-ParmVarDecl 0x55709d056340 <col:19, col:31> col:31 keyword 'const char *'
| | |-ParmVarDecl 0x55709d0563e8 <col:40, col:42> col:42 parser 'AnnoArg':'AnnoArg'
| | `-ParmVarDecl 0x55709d0564b8 <col:50, col:53> col:53 x 'int &'
| `-CXXMethodDecl 0x55709d057228 <col:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, WordArg, String &)'
|   |-TemplateArgument type 'WordArg'
|   |-TemplateArgument type 'String'
|   |-ParmVarDecl 0x55709d056f90 <col:19, col:31> col:31 keyword 'const char *'
|   |-ParmVarDecl 0x55709d057038 <col:40, col:42> col:42 parser 'WordArg':'WordArg'
|   `-ParmVarDecl 0x55709d057108 <col:50, col:53> col:53 x 'String &'
|-FunctionTemplateDecl 0x55709cfe1a38 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55709cfe1578 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55709cfe15f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55709cfe1998 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55709cfe16b8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfe1738 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55709cfe17b0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55709cfe1858 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55709d013498 <col:64, line:442:5>
|     |-CallExpr 0x55709d013418 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55709d013348 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55709d013388 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55709d013398 <col:30> 'const char *' lvalue ParmVar 0x55709cfe16b8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55709d0133b8 <col:39> 'int' lvalue ParmVar 0x55709cfe1738 'flags' 'int'
|     | |-DeclRefExpr 0x55709d0133d8 <col:46> 'P' lvalue ParmVar 0x55709cfe17b0 'parser' 'P'
|     | `-DeclRefExpr 0x55709d0133f8 <col:54> 'T' lvalue ParmVar 0x55709cfe1858 'x' 'T &'
|     `-ReturnStmt 0x55709d013488 <line:441:9, col:17>
|       `-UnaryOperator 0x55709d013470 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55709d013460 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55709cfe2038 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55709cfe1ab0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55709cfe1b28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55709cfe1ba8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55709cfe1f98 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55709cfe1c70 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfe1ce8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55709cfe1d88 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55709cfe1e58 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55709d013630 <col:84, line:458:5>
|     `-ReturnStmt 0x55709d013620 <line:457:9, col:64>
|       `-CallExpr 0x55709d0135d8 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55709d0134c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55709d013538 <col:28> 'const char *' lvalue ParmVar 0x55709cfe1c70 'keyword' 'const char *'
|         |-IntegerLiteral 0x55709d013558 <col:37> 'int' 0
|         |-DeclRefExpr 0x55709d013578 <col:40> 'P' lvalue ParmVar 0x55709cfe1ce8 'parser' 'P'
|         |-DeclRefExpr 0x55709d013598 <col:48> 'T' lvalue ParmVar 0x55709cfe1d88 'x' 'T &'
|         `-DeclRefExpr 0x55709d0135b8 <col:51> 'const V' lvalue ParmVar 0x55709cfe1e58 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55709cfe25b8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55709cfe20b0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55709cfe2128 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55709cfe21a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55709cfe2518 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55709cfe2270 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfe22e8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55709cfe2388 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55709cfe2428 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55709d0137c0 <col:86, line:462:5>
|     `-ReturnStmt 0x55709d0137b0 <line:461:9, col:73>
|       `-CallExpr 0x55709d013768 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55709d013658 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55709d0136c8 <col:28> 'const char *' lvalue ParmVar 0x55709cfe2270 'keyword' 'const char *'
|         |-DeclRefExpr 0x55709d0136e8 <col:37> 'const int' lvalue Var 0x55709cfde1b0 'positional' 'const int'
|         |-DeclRefExpr 0x55709d013708 <col:49> 'P' lvalue ParmVar 0x55709cfe22e8 'parser' 'P'
|         |-DeclRefExpr 0x55709d013728 <col:57> 'T' lvalue ParmVar 0x55709cfe2388 'x' 'T &'
|         `-DeclRefExpr 0x55709d013748 <col:60> 'const V' lvalue ParmVar 0x55709cfe2428 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55709cfe2c18 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55709cfe2630 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55709cfe26a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55709cfe2728 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55709cfe2b78 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55709cfe27f0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfe2870 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55709cfe28e8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55709cfe2988 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55709cfe2a28 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55709d013950 <col:95, line:467:5>
|     |-CallExpr 0x55709d0138c8 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55709d0137d8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55709d013818 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55709d013828 <col:37> 'const char *' lvalue ParmVar 0x55709cfe27f0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55709d013848 <col:46> 'int' lvalue ParmVar 0x55709cfe2870 'flags' 'int'
|     | |-DeclRefExpr 0x55709d013868 <col:53> 'P' lvalue ParmVar 0x55709cfe28e8 'parser' 'P'
|     | |-DeclRefExpr 0x55709d013888 <col:61> 'T' lvalue ParmVar 0x55709cfe2988 'x' 'T &'
|     | `-DeclRefExpr 0x55709d0138a8 <col:64> 'const V' lvalue ParmVar 0x55709cfe2a28 'default_value' 'const V &'
|     `-ReturnStmt 0x55709d013940 <line:466:9, col:17>
|       `-UnaryOperator 0x55709d013928 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55709d013918 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55709cfe31f8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55709cfe2c98 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55709cfe2d18 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55709cfe2d98 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55709cfe3158 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55709cfe2e60 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfe2ed8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55709cfe2f78 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55709cfe3018 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55709d013af8 <col:63, line:481:5>
|     `-ReturnStmt 0x55709d013ae8 <line:480:9, col:47>
|       `-CallExpr 0x55709d013aa0 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55709d013980 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55709d013a00 <col:21> 'const char *' lvalue ParmVar 0x55709cfe2e60 'keyword' 'const char *'
|         |-IntegerLiteral 0x55709d013a20 <col:30> 'int' 0
|         |-DeclRefExpr 0x55709d013a40 <col:33> 'P' lvalue ParmVar 0x55709cfe2ed8 'parser' 'P'
|         |-DeclRefExpr 0x55709d013a60 <col:41> 'T1' lvalue ParmVar 0x55709cfe2f78 'x1' 'T1 &'
|         `-DeclRefExpr 0x55709d013a80 <col:45> 'T2' lvalue ParmVar 0x55709cfe3018 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55709cfe3778 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55709cfe3270 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55709cfe32e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55709cfe3368 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55709cfe36d8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55709cfe3430 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfe34a8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55709cfe3548 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55709cfe35e8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55709d013c98 <col:65, line:485:5>
|     `-ReturnStmt 0x55709d013c88 <line:484:9, col:55>
|       `-CallExpr 0x55709d013c40 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55709d013b20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55709d013ba0 <col:21> 'const char *' lvalue ParmVar 0x55709cfe3430 'keyword' 'const char *'
|         |-DeclRefExpr 0x55709d013bc0 <col:30> 'const int' lvalue Var 0x55709cfde0b8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55709d013be0 <col:41> 'P' lvalue ParmVar 0x55709cfe34a8 'parser' 'P'
|         |-DeclRefExpr 0x55709d013c00 <col:49> 'T1' lvalue ParmVar 0x55709cfe3548 'x1' 'T1 &'
|         `-DeclRefExpr 0x55709d013c20 <col:53> 'T2' lvalue ParmVar 0x55709cfe35e8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55709cfe3cf8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55709cfe37f0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55709cfe3868 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55709cfe38e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55709cfe3c58 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55709cfe39b0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfe3a28 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55709cfe3ac8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55709cfe3b68 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55709d013e38 <col:65, line:489:5>
|     `-ReturnStmt 0x55709d013e28 <line:488:9, col:56>
|       `-CallExpr 0x55709d013de0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55709d013cc0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55709d013d40 <col:21> 'const char *' lvalue ParmVar 0x55709cfe39b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55709d013d60 <col:30> 'const int' lvalue Var 0x55709cfde1b0 'positional' 'const int'
|         |-DeclRefExpr 0x55709d013d80 <col:42> 'P' lvalue ParmVar 0x55709cfe3a28 'parser' 'P'
|         |-DeclRefExpr 0x55709d013da0 <col:50> 'T1' lvalue ParmVar 0x55709cfe3ac8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55709d013dc0 <col:54> 'T2' lvalue ParmVar 0x55709cfe3b68 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55709cfe96e8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55709cfe3d70 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55709cfe3de8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55709cfe3e68 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55709cfe9648 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55709cfe3f30 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfe3fa8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55709cfe4048 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55709cfe40e8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55709d014088 <col:66, line:493:5>
|     `-ReturnStmt 0x55709d014078 <line:492:9, col:68>
|       `-CallExpr 0x55709d014030 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55709d013e60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55709d013ee0 <col:21> 'const char *' lvalue ParmVar 0x55709cfe3f30 'keyword' 'const char *'
|         |-BinaryOperator 0x55709d013fb0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55709d013f60 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55709d013f40 <col:30> 'const int' lvalue Var 0x55709cfde0b8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55709d013f98 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55709d013f78 <col:42> 'const int' lvalue Var 0x55709cfde1b0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55709d013fd0 <col:54> 'P' lvalue ParmVar 0x55709cfe3fa8 'parser' 'P'
|         |-DeclRefExpr 0x55709d013ff0 <col:62> 'T1' lvalue ParmVar 0x55709cfe4048 'x1' 'T1 &'
|         `-DeclRefExpr 0x55709d014010 <col:66> 'T2' lvalue ParmVar 0x55709cfe40e8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55709cfe9d48 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55709cfe9760 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55709cfe97d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55709cfe9858 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55709cfe9ca8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55709cfe9920 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfe99a0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55709cfe9a18 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55709cfe9ab8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55709cfe9b58 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55709d014218 <col:74, line:498:5>
|     |-CallExpr 0x55709d014190 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55709d0140a0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55709d0140e0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55709d0140f0 <col:30> 'const char *' lvalue ParmVar 0x55709cfe9920 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55709d014110 <col:39> 'int' lvalue ParmVar 0x55709cfe99a0 'flags' 'int'
|     | |-DeclRefExpr 0x55709d014130 <col:46> 'P' lvalue ParmVar 0x55709cfe9a18 'parser' 'P'
|     | |-DeclRefExpr 0x55709d014150 <col:54> 'T1' lvalue ParmVar 0x55709cfe9ab8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55709d014170 <col:58> 'T2' lvalue ParmVar 0x55709cfe9b58 'x2' 'T2 &'
|     `-ReturnStmt 0x55709d014208 <line:497:9, col:17>
|       `-UnaryOperator 0x55709d0141f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55709d0141e0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55709cfea0a8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55709cfe9dc8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55709cfea008 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55709cfe9e80 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfe9ef8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55709d014360 <col:52, line:509:5>
|     `-ReturnStmt 0x55709d014350 <line:508:9, col:44>
|       `-CallExpr 0x55709d014318 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55709d014248 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55709d0142b8 <col:26> 'const char *' lvalue ParmVar 0x55709cfe9e80 'keyword' 'const char *'
|         |-IntegerLiteral 0x55709d0142d8 <col:35> 'int' 0
|         `-DeclRefExpr 0x55709d0142f8 <col:38> 'P' lvalue ParmVar 0x55709cfe9ef8 'parser' 'P'
|-FunctionTemplateDecl 0x55709cfea3a8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55709cfea110 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55709cfea308 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55709cfea1c0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfea238 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55709d0144a0 <col:54, line:513:5>
|     `-ReturnStmt 0x55709d014490 <line:512:9, col:52>
|       `-CallExpr 0x55709d014458 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55709d014388 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55709d0143f8 <col:26> 'const char *' lvalue ParmVar 0x55709cfea1c0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55709d014418 <col:35> 'const int' lvalue Var 0x55709cfde0b8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55709d014438 <col:46> 'P' lvalue ParmVar 0x55709cfea238 'parser' 'P'
|-FunctionTemplateDecl 0x55709cfea6a8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55709cfea410 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55709cfea608 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55709cfea4c0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfea538 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55709d0145e0 <col:54, line:517:5>
|     `-ReturnStmt 0x55709d0145d0 <line:516:9, col:53>
|       `-CallExpr 0x55709d014598 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55709d0144c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55709d014538 <col:26> 'const char *' lvalue ParmVar 0x55709cfea4c0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55709d014558 <col:35> 'const int' lvalue Var 0x55709cfde1b0 'positional' 'const int'
|         `-DeclRefExpr 0x55709d014578 <col:47> 'P' lvalue ParmVar 0x55709cfea538 'parser' 'P'
|-FunctionTemplateDecl 0x55709cfea9a8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55709cfea710 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55709cfea908 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55709cfea7c0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfea838 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55709d0147d0 <col:55, line:521:5>
|     `-ReturnStmt 0x55709d0147c0 <line:520:9, col:65>
|       `-CallExpr 0x55709d014788 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55709d014608 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55709d014678 <col:26> 'const char *' lvalue ParmVar 0x55709cfea7c0 'keyword' 'const char *'
|         |-BinaryOperator 0x55709d014748 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55709d0146f8 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55709d0146d8 <col:35> 'const int' lvalue Var 0x55709cfde0b8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55709d014730 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55709d014710 <col:47> 'const int' lvalue Var 0x55709cfde1b0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55709d014768 <col:59> 'P' lvalue ParmVar 0x55709cfea838 'parser' 'P'
|-FunctionTemplateDecl 0x55709cfead78 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55709cfeaa10 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55709cfeacd8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55709cfeaac0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfeab40 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55709cfeabb8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55709d014910 <col:63, line:526:5>
|     |-CallExpr 0x55709d014898 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55709d0147e8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55709d014828 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55709d014838 <col:35> 'const char *' lvalue ParmVar 0x55709cfeaac0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55709d014858 <col:44> 'int' lvalue ParmVar 0x55709cfeab40 'flags' 'int'
|     | `-DeclRefExpr 0x55709d014878 <col:51> 'P' lvalue ParmVar 0x55709cfeabb8 'parser' 'P'
|     `-ReturnStmt 0x55709d014900 <line:525:9, col:17>
|       `-UnaryOperator 0x55709d0148e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55709d0148d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55709cfeb1c8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55709cfeade8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55709cfeae68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55709cfeb128 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55709cfeaf28 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfeafa0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55709cfeb048 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55709d014a68 <col:58, line:541:5>
|     `-ReturnStmt 0x55709d014a58 <line:540:9, col:39>
|       `-CallExpr 0x55709d014a20 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55709d014940 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55709d0149c0 <col:21> 'const char *' lvalue ParmVar 0x55709cfeaf28 'keyword' 'const char *'
|         |-DeclRefExpr 0x55709d0149e0 <col:30> 'P' lvalue ParmVar 0x55709cfeafa0 'parser' 'P'
|         `-DeclRefExpr 0x55709d014a00 <col:38> 'T' lvalue ParmVar 0x55709cfeb048 'x' 'T &'
|-FunctionTemplateDecl 0x55709cfeb618 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55709cfeb238 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55709cfeb2b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55709cfeb578 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55709cfeb378 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfeb3f0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55709cfeb498 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55709d014ba0 <col:60, line:545:5>
|     `-ReturnStmt 0x55709d014b90 <line:544:9, col:41>
|       `-CallExpr 0x55709d014b58 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55709d014a90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55709d014af8 <col:23> 'const char *' lvalue ParmVar 0x55709cfeb378 'keyword' 'const char *'
|         |-DeclRefExpr 0x55709d014b18 <col:32> 'P' lvalue ParmVar 0x55709cfeb3f0 'parser' 'P'
|         `-DeclRefExpr 0x55709d014b38 <col:40> 'T' lvalue ParmVar 0x55709cfeb498 'x' 'T &'
|-FunctionTemplateDecl 0x55709cfeba68 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55709cfeb688 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55709cfeb708 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55709cfeb9c8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55709cfeb7c8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfeb840 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55709cfeb8e8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55709d014cd8 <col:60, line:549:5>
|     `-ReturnStmt 0x55709d014cc8 <line:548:9, col:41>
|       `-CallExpr 0x55709d014c90 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55709d014bc8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55709d014c30 <col:23> 'const char *' lvalue ParmVar 0x55709cfeb7c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55709d014c50 <col:32> 'P' lvalue ParmVar 0x55709cfeb840 'parser' 'P'
|         `-DeclRefExpr 0x55709d014c70 <col:40> 'T' lvalue ParmVar 0x55709cfeb8e8 'x' 'T &'
|-FunctionTemplateDecl 0x55709cfebeb8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55709cfebad8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55709cfebb58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55709cfebe18 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55709cfebc18 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfebc90 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55709cfebd38 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55709d014e10 <col:61, line:553:5>
|     `-ReturnStmt 0x55709d014e00 <line:552:9, col:42>
|       `-CallExpr 0x55709d014dc8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55709d014d00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55709d014d68 <col:24> 'const char *' lvalue ParmVar 0x55709cfebc18 'keyword' 'const char *'
|         |-DeclRefExpr 0x55709d014d88 <col:33> 'P' lvalue ParmVar 0x55709cfebc90 'parser' 'P'
|         `-DeclRefExpr 0x55709d014da8 <col:41> 'T' lvalue ParmVar 0x55709cfebd38 'x' 'T &'
|-FunctionTemplateDecl 0x55709cfec398 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55709cfebf28 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55709cfebfa8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55709cfec2f8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55709cfec068 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfec0e8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55709cfec160 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55709cfec208 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55709d014f88 <col:69, line:557:5>
|     `-ReturnStmt 0x55709d014f78 <line:556:9, col:46>
|       `-CallExpr 0x55709d014f38 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55709d014e38 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55709d014eb8 <col:21> 'const char *' lvalue ParmVar 0x55709cfec068 'keyword' 'const char *'
|         |-DeclRefExpr 0x55709d014ed8 <col:30> 'int' lvalue ParmVar 0x55709cfec0e8 'flags' 'int'
|         |-DeclRefExpr 0x55709d014ef8 <col:37> 'P' lvalue ParmVar 0x55709cfec160 'parser' 'P'
|         `-DeclRefExpr 0x55709d014f18 <col:45> 'T' lvalue ParmVar 0x55709cfec208 'x' 'T &'
|-FunctionTemplateDecl 0x55709cfec6a8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55709cfec410 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55709cfec608 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55709cfec4c0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfec538 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55709d0150c8 <col:56, line:571:5>
|     `-ReturnStmt 0x55709d0150b8 <line:570:9, col:48>
|       `-CallExpr 0x55709d015080 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55709d014fb0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55709d015020 <col:30> 'const char *' lvalue ParmVar 0x55709cfec4c0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55709d015040 <col:39> 'int' 0
|         `-DeclRefExpr 0x55709d015060 <col:42> 'P' lvalue ParmVar 0x55709cfec538 'parser' 'P'
|-FunctionTemplateDecl 0x55709cfeca38 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55709cfec710 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55709cfec998 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55709cfec7c0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfec840 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55709cfec8b8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55709d015298 <col:67, line:576:5>
|     |-CallExpr 0x55709d015220 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55709d0150e0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55709d015120 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55709d015130 <col:39> 'const char *' lvalue ParmVar 0x55709cfec7c0 'keyword' 'const char *'
|     | |-BinaryOperator 0x55709d0151e0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55709d015190 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55709d015150 <col:48> 'int' lvalue ParmVar 0x55709cfec840 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55709d0151c8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55709d0151a8 <col:56> 'const int' lvalue Var 0x55709cfde3a0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55709d015200 <col:68> 'P' lvalue ParmVar 0x55709cfec8b8 'parser' 'P'
|     `-ReturnStmt 0x55709d015288 <line:575:9, col:17>
|       `-UnaryOperator 0x55709d015270 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55709d015260 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55709cfece88 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55709cfecaa8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55709cfecb28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55709cfecde8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55709cfecbe8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfecc60 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55709cfecd08 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55709d015408 <col:62, line:592:5>
|     `-ReturnStmt 0x55709d0153f8 <line:591:9, col:51>
|       `-CallExpr 0x55709d0153b8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55709d0152c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55709d015338 <col:30> 'const char *' lvalue ParmVar 0x55709cfecbe8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55709d015358 <col:39> 'int' 0
|         |-DeclRefExpr 0x55709d015378 <col:42> 'P' lvalue ParmVar 0x55709cfecc60 'parser' 'P'
|         `-DeclRefExpr 0x55709d015398 <col:50> 'T' lvalue ParmVar 0x55709cfecd08 'x' 'T &'
|-FunctionTemplateDecl 0x55709cfed368 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55709cfecef8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55709cfecf78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55709cfed2c8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55709cfed038 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfed0b8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55709cfed130 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55709cfed1d8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55709d015600 <col:73, line:597:5>
|     |-CallExpr 0x55709d015580 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55709d015420 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55709d015460 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55709d015470 <col:39> 'const char *' lvalue ParmVar 0x55709cfed038 'keyword' 'const char *'
|     | |-BinaryOperator 0x55709d015520 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55709d0154d0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55709d015490 <col:48> 'int' lvalue ParmVar 0x55709cfed0b8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55709d015508 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55709d0154e8 <col:56> 'const int' lvalue Var 0x55709cfde3a0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55709d015540 <col:68> 'P' lvalue ParmVar 0x55709cfed130 'parser' 'P'
|     | `-DeclRefExpr 0x55709d015560 <col:76> 'T' lvalue ParmVar 0x55709cfed1d8 'x' 'T &'
|     `-ReturnStmt 0x55709d0155f0 <line:596:9, col:17>
|       `-UnaryOperator 0x55709d0155d8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55709d0155c8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55709cfed918 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55709cfed3e0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55709cfed458 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55709cfed878 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55709cfed518 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfed590 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55709cfed750 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55709d015770 <col:65, line:614:5>
|     `-ReturnStmt 0x55709d015760 <line:613:9, col:46>
|       `-CallExpr 0x55709d015720 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55709d015630 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55709d0156a0 <col:25> 'const char *' lvalue ParmVar 0x55709cfed518 'keyword' 'const char *'
|         |-IntegerLiteral 0x55709d0156c0 <col:34> 'int' 0
|         |-DeclRefExpr 0x55709d0156e0 <col:37> 'P' lvalue ParmVar 0x55709cfed590 'parser' 'P'
|         `-DeclRefExpr 0x55709d015700 <col:45> 'Vector<T>' lvalue ParmVar 0x55709cfed750 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55709cfedd48 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55709cfed988 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55709cfedca8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55709cfeda40 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfedb90 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55709d015990 <col:55, line:618:5>
|     `-ReturnStmt 0x55709d015980 <line:617:9, col:55>
|       `-CallExpr 0x55709d015940 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55709d015798 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55709d015808 <col:25> 'const char *' lvalue ParmVar 0x55709cfeda40 'keyword' 'const char *'
|         |-IntegerLiteral 0x55709d015828 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55709d015900 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55709d015920 <col:54> 'Vector<T>' lvalue ParmVar 0x55709cfedb90 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55709cfee318 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55709cfeddb0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55709cfede28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55709cfee278 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55709cfedee8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfedf68 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55709cfedfe0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55709cfee130 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55709d015b88 <col:76, line:623:5>
|     |-CallExpr 0x55709d015b08 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55709d0159a8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55709d0159e8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55709d0159f8 <col:34> 'const char *' lvalue ParmVar 0x55709cfedee8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55709d015aa8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55709d015a58 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55709d015a18 <col:43> 'int' lvalue ParmVar 0x55709cfedf68 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55709d015a90 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55709d015a70 <col:51> 'const int' lvalue Var 0x55709cfde3a0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55709d015ac8 <col:63> 'P' lvalue ParmVar 0x55709cfedfe0 'parser' 'P'
|     | `-DeclRefExpr 0x55709d015ae8 <col:71> 'Vector<T>' lvalue ParmVar 0x55709cfee130 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55709d015b78 <line:622:9, col:17>
|       `-UnaryOperator 0x55709d015b60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55709d015b50 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55709cfee858 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55709cfee390 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55709cfee408 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55709cfee7b8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55709cfee4c8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfee548 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55709cfee690 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55709d015df0 <col:66, line:627:5>
|     `-ReturnStmt 0x55709d015de0 <line:626:9, col:59>
|       `-CallExpr 0x55709d015da0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55709d015bb8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55709d015c28 <col:25> 'const char *' lvalue ParmVar 0x55709cfee4c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55709d015c48 <col:34> 'int' lvalue ParmVar 0x55709cfee548 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55709d015d60 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55709d015d80 <col:58> 'Vector<T>' lvalue ParmVar 0x55709cfee690 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55709cfee8e8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55709d015e70 <col:25, line:633:5>
|   `-ReturnStmt 0x55709d015e60 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55709d015e48 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55709d015e18 <col:16> 'const bool' lvalue ->_status 0x55709cffc388
|         `-CXXThisExpr 0x55709d015e08 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55709cfeea68 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55709cfee9a0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55709d015f58 <col:27, line:639:5>
|   |-BinaryOperator 0x55709d015f00 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55709d015e88 <col:9> 'bool' lvalue ParmVar 0x55709cfee9a0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55709d015ee8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55709d015eb8 <col:13> 'bool' lvalue ->_status 0x55709cffc388
|   |     `-CXXThisExpr 0x55709d015ea8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55709d015f48 <line:638:9, col:17>
|     `-UnaryOperator 0x55709d015f30 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55709d015f20 <col:17> 'Args *' this
|-CXXMethodDecl 0x55709cfeebe8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55709cfeeb28 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55709d016048 <col:39, line:644:5>
|   |-BinaryOperator 0x55709d015ff0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55709d015f78 <col:9> 'bool' lvalue ParmVar 0x55709cfeeb28 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55709d015fd8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55709d015fa8 <col:13> 'const bool' lvalue ->_status 0x55709cffc388
|   |     `-CXXThisExpr 0x55709d015f98 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55709d016038 <line:643:9, col:17>
|     `-UnaryOperator 0x55709d016020 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55709d016010 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55709cfeecb0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55709d0160f0 <col:30, line:651:5>
|   `-ReturnStmt 0x55709d0160e0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55709d0160c8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55709d016098 <col:16> 'bool' lvalue ->_read_status 0x55709cfd4fa0
|         `-ImplicitCastExpr 0x55709d016078 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55709d016068 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55709cfeedf8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55709cfeed68 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55709d0161f8 <col:32, line:658:5>
|   |-BinaryOperator 0x55709d0161a0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55709d016108 <col:9> 'bool' lvalue ParmVar 0x55709cfeed68 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55709d016188 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55709d016158 <col:13> 'bool' lvalue ->_read_status 0x55709cfd4fa0
|   |     `-ImplicitCastExpr 0x55709d016138 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55709d016128 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55709d0161e8 <line:657:9, col:17>
|     `-UnaryOperator 0x55709d0161d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55709d0161c0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55709cfeef48 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55709cfeeeb8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55709d016308 <col:44, line:663:5>
|   |-BinaryOperator 0x55709d0162b0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55709d016218 <col:9> 'bool' lvalue ParmVar 0x55709cfeeeb8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55709d016298 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55709d016268 <col:13> 'bool' lvalue ->_read_status 0x55709cfd4fa0
|   |     `-ImplicitCastExpr 0x55709d016248 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55709d016238 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55709d0162f8 <line:662:9, col:17>
|     `-UnaryOperator 0x55709d0162e0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55709d0162d0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55709cfef010 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55709cfef0d8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55709cfef1a0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55709cfef268 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55709cfef578 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55709cfef308 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55709cfef4d8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55709cfef3e8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55709d0166c0 <col:19, line:706:5>
|     `-IfStmt 0x55709d016698 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55709d016408 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55709d0165c8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55709d016598 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55709d016558 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55709d016460 <col:42> '<bound member function type>' ->simple_slot 0x55709d00f7d0
|       |     | `-CXXThisExpr 0x55709d016450 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55709d0164f8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55709d0164b0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55709cd7b578
|       |     | `-DeclRefExpr 0x55709d016490 <col:55> 'T' lvalue ParmVar 0x55709cfef3e8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55709d016538 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55709d016688 <line:705:13, col:34>
|         `-CallExpr 0x55709d016660 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55709d0165e8 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55709d016640 <col:33> 'T' lvalue ParmVar 0x55709cfef3e8 'x' 'T &'
|-FunctionTemplateDecl 0x55709cfef848 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55709cfef5d8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55709cfef7a8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55709cfef6b8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55709d016aa0 <col:31, line:717:5>
|     |-DeclStmt 0x55709d016800 <line:713:9, col:23>
|     | `-VarDecl 0x55709d0166e8 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55709d0167d8 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55709d016760 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55709d0167b8 <col:21> 'T' lvalue ParmVar 0x55709cfef6b8 'x' 'T &'
|     |-IfStmt 0x55709d016a50 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55709d0168f8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55709d016a30 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55709d0169d0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55709d016960 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55709cf32678 0x55709cf32298 0x55709cf31ec8 0x55709cf31ae8 0x55709cf31708 0x55709cf31338
|     |   | `-DeclRefExpr 0x55709d016940 <col:14> 'T *' lvalue Var 0x55709d0166e8 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55709d016a10 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55709d016a88 <line:716:9, col:16>
|       `-DeclRefExpr 0x55709d016a68 <col:16> 'T *' lvalue Var 0x55709d0166e8 's' 'T *'
|-FunctionTemplateDecl 0x55709cfefc58 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55709cfef8a8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55709cfef928 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55709cfefbb8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55709cfefa08 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55709cfefaa8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55709d016db0 <col:37, line:726:5>
|     |-IfStmt 0x55709d016d40 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55709d016d60 <line:723:13, col:26>
|     | | `-VarDecl 0x55709d016b08 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55709d016bf8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55709d016b80 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55709d016bd8 <col:25> 'T' lvalue ParmVar 0x55709cfefa08 'x' 'T &'
|     | |-DeclRefExpr 0x55709d016c20 <col:16> 'T *' lvalue Var 0x55709d016b08 's' 'T *'
|     | `-BinaryOperator 0x55709d016d20 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55709d016cd0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55709d016c60 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55709cf32678 0x55709cf32298 0x55709cf31ec8 0x55709cf31ae8 0x55709cf31708 0x55709cf31338
|     |   | `-DeclRefExpr 0x55709d016c40 <col:14> 'T *' lvalue Var 0x55709d016b08 's' 'T *'
|     |   `-DeclRefExpr 0x55709d016d00 <col:18> 'const V' lvalue ParmVar 0x55709cfefaa8 'value' 'const V &'
|     `-ReturnStmt 0x55709d016da0 <line:725:9, col:17>
|       `-UnaryOperator 0x55709d016d88 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55709d016d78 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55709cff0058 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55709cfefcc0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55709cfeffb8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55709cfefd70 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cfefdf0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55709cfefe98 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55709d017bd0 <col:65, line:737:5>
|     |-DeclStmt 0x55709d016e48 <line:732:9, col:26>
|     | `-VarDecl 0x55709d016de0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55709d017b98 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55709d017bb8 <line:733:13, col:58>
|       | `-VarDecl 0x55709d016e70 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55709d017050 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55709d017020 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55709d017008 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55709d016fe8 <col:26, col:58> 'String' (CXXTemporary 0x55709d016fe8)
|       |           `-CXXMemberCallExpr 0x55709d016f78 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55709d016ee8 <col:26> '<bound member function type>' ->find 0x55709d00ede8
|       |             | `-CXXThisExpr 0x55709d016ed8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55709d016fb0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55709d016f18 <col:31> 'const char *' lvalue ParmVar 0x55709cfefd70 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55709d016fc8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55709d016f38 <col:40> 'int' lvalue ParmVar 0x55709cfefdf0 'flags' 'int'
|       |             `-DeclRefExpr 0x55709d016f58 <col:47> 'Args::Slot *' lvalue Var 0x55709d016de0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55709d017108 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55709d0170f0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55709d0170d0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55709d0170a0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55709cd3e548
|       |       `-ImplicitCastExpr 0x55709d017088 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55709d017068 <col:20> 'String' lvalue Var 0x55709d016e70 'str' 'String'
|       `-CompoundStmt 0x55709d017b78 <col:61, line:736:9>
|         |-DeclStmt 0x55709d0175c0 <line:734:13, col:76>
|         | `-VarDecl 0x55709d017158 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55709d017590 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55709d017500 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55709d017548 <col:60> 'T' lvalue ParmVar 0x55709cfefe98 'variable' 'T &'
|         |     `-UnaryOperator 0x55709d017578 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55709d017568 <col:71> 'Args *' this
|         `-CallExpr 0x55709d017b48 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55709d0175e8 <col:13> '<bound member function type>' ->postparse 0x55709d00eff8
|           | `-CXXThisExpr 0x55709d0175d8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55709d017b08 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55709d017618 <col:23> 'T *' lvalue Var 0x55709d017158 's' 'T *'
|           | `-CallExpr 0x55709d017ac8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55709d0178a0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55709d0179a0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55709d0179c0 <col:86> 'String' lvalue Var 0x55709d016e70 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55709d017a70 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55709d017a00 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55709cf32678 0x55709cf32298 0x55709cf31ec8 0x55709cf31ae8 0x55709cf31708 0x55709cf31338
|           |   | `-DeclRefExpr 0x55709d0179e0 <col:92> 'T *' lvalue Var 0x55709d017158 's' 'T *'
|           |   `-UnaryOperator 0x55709d017ab0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55709d017aa0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55709d017b28 <col:103> 'Args::Slot *' lvalue Var 0x55709d016de0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55709cff05a8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55709cff00c8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55709cff0148 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55709cff0508 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55709cff0208 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cff0288 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55709cff0328 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55709cff03c8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55709d018a70 <col:88, line:745:5>
|     |-DeclStmt 0x55709d017c68 <line:741:9, col:26>
|     | `-VarDecl 0x55709d017c00 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55709d017e88 <line:742:9, col:55>
|     | `-VarDecl 0x55709d017c90 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55709d017e70 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55709d017e40 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55709d017e28 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55709d017e08 <col:22, col:54> 'String' (CXXTemporary 0x55709d017e08)
|     |           `-CXXMemberCallExpr 0x55709d017d98 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55709d017d08 <col:22> '<bound member function type>' ->find 0x55709d00ede8
|     |             | `-CXXThisExpr 0x55709d017cf8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55709d017dd0 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55709d017d38 <col:27> 'const char *' lvalue ParmVar 0x55709cff0208 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55709d017de8 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55709d017d58 <col:36> 'int' lvalue ParmVar 0x55709cff0288 'flags' 'int'
|     |             `-DeclRefExpr 0x55709d017d78 <col:43> 'Args::Slot *' lvalue Var 0x55709d017c00 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55709d018260 <line:743:9, col:72>
|     | `-VarDecl 0x55709d017ed8 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55709d018230 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55709d0181a0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55709d0181e8 <col:56> 'T' lvalue ParmVar 0x55709cff0328 'variable' 'T &'
|     |     `-UnaryOperator 0x55709d018218 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55709d018208 <col:67> 'Args *' this
|     `-CallExpr 0x55709d018a40 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55709d018288 <col:9> '<bound member function type>' ->postparse 0x55709d00eff8
|       | `-CXXThisExpr 0x55709d018278 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55709d018a00 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55709d0182b8 <col:19> 'T *' lvalue Var 0x55709d017ed8 's' 'T *'
|       | `-ParenExpr 0x55709d0189e0 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55709d0189b0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55709d018998 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55709d018980 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55709d018960 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55709d018930 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55709cd3e548
|       |     |       `-ImplicitCastExpr 0x55709d018918 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55709d0182d8 <col:25> 'String' lvalue Var 0x55709d017c90 'str' 'String'
|       |     |-CallExpr 0x55709d018788 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55709d018560 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55709d018660 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55709d018680 <col:89> 'String' lvalue Var 0x55709d017c90 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55709d018730 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55709d0186c0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55709cf32678 0x55709cf32298 0x55709cf31ec8 0x55709cf31ae8 0x55709cf31708 0x55709cf31338
|       |     | | `-DeclRefExpr 0x55709d0186a0 <col:95> 'T *' lvalue Var 0x55709d017ed8 's' 'T *'
|       |     | `-UnaryOperator 0x55709d018770 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55709d018760 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55709d0188f8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55709d0188d8 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55709d0188a8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55709d018858 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55709d0187e8 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55709cf32678 0x55709cf32298 0x55709cf31ec8 0x55709cf31ae8 0x55709cf31708 0x55709cf31338
|       |         | | `-DeclRefExpr 0x55709d0187c8 <col:109> 'T *' lvalue Var 0x55709d017ed8 's' 'T *'
|       |         | `-DeclRefExpr 0x55709d018888 <col:113> 'const V' lvalue ParmVar 0x55709cff03c8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55709d0188c8 <col:120> 'bool' true
|       `-DeclRefExpr 0x55709d018a20 <col:128> 'Args::Slot *' lvalue Var 0x55709d017c00 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55709cff0ad8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55709cff0620 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55709cff0698 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55709cff0a38 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55709cff0758 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cff07d8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55709cff0850 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55709cff08f8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55709d019668 <col:75, line:754:5>
|     |-DeclStmt 0x55709d018b18 <line:749:9, col:26>
|     | `-VarDecl 0x55709d018ab0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55709d019630 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55709d019650 <line:750:13, col:58>
|       | `-VarDecl 0x55709d018b40 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55709d018d20 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55709d018cf0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55709d018cd8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55709d018cb8 <col:26, col:58> 'String' (CXXTemporary 0x55709d018cb8)
|       |           `-CXXMemberCallExpr 0x55709d018c48 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55709d018bb8 <col:26> '<bound member function type>' ->find 0x55709d00ede8
|       |             | `-CXXThisExpr 0x55709d018ba8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55709d018c80 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55709d018be8 <col:31> 'const char *' lvalue ParmVar 0x55709cff0758 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55709d018c98 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55709d018c08 <col:40> 'int' lvalue ParmVar 0x55709cff07d8 'flags' 'int'
|       |             `-DeclRefExpr 0x55709d018c28 <col:47> 'Args::Slot *' lvalue Var 0x55709d018ab0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55709d018dd8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55709d018dc0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55709d018da0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55709d018d70 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55709cd3e548
|       |       `-ImplicitCastExpr 0x55709d018d58 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55709d018d38 <col:20> 'String' lvalue Var 0x55709d018b40 'str' 'String'
|       `-CompoundStmt 0x55709d019610 <col:61, line:753:9>
|         |-DeclStmt 0x55709d0191b0 <line:751:13, col:63>
|         | `-VarDecl 0x55709d018e28 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55709d019180 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55709d0190f0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55709d019138 <col:47> 'T' lvalue ParmVar 0x55709cff08f8 'variable' 'T &'
|         |     `-UnaryOperator 0x55709d019168 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55709d019158 <col:58> 'Args *' this
|         `-CallExpr 0x55709d0195e0 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55709d0191d8 <col:13> '<bound member function type>' ->postparse 0x55709d00eff8
|           | `-CXXThisExpr 0x55709d0191c8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55709d0195a0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55709d019208 <col:23> 'T *' lvalue Var 0x55709d018e28 's' 'T *'
|           | `-CallExpr 0x55709d019560 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55709d0193f0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55709d019438 <col:56> 'P' lvalue ParmVar 0x55709cff0850 'parser' 'P'
|           |   |-DeclRefExpr 0x55709d019458 <col:64> 'String' lvalue Var 0x55709d018b40 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55709d019508 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55709d019498 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55709cf32678 0x55709cf32298 0x55709cf31ec8 0x55709cf31ae8 0x55709cf31708 0x55709cf31338
|           |   | `-DeclRefExpr 0x55709d019478 <col:70> 'T *' lvalue Var 0x55709d018e28 's' 'T *'
|           |   `-UnaryOperator 0x55709d019548 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55709d019538 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55709d0195c0 <col:81> 'Args::Slot *' lvalue Var 0x55709d018ab0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55709cff1138 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55709cff0b50 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55709cff0bc8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55709cff0c48 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55709cff1098 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55709cff0d10 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cff0d90 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55709cff0e08 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55709cff0ea8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55709cff0f48 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55709d01c748 <col:98, line:762:5>
|     |-DeclStmt 0x55709d019700 <line:758:9, col:26>
|     | `-VarDecl 0x55709d019698 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55709d019920 <line:759:9, col:55>
|     | `-VarDecl 0x55709d019728 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55709d019908 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55709d0198d8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55709d0198c0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55709d0198a0 <col:22, col:54> 'String' (CXXTemporary 0x55709d0198a0)
|     |           `-CXXMemberCallExpr 0x55709d019830 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55709d0197a0 <col:22> '<bound member function type>' ->find 0x55709d00ede8
|     |             | `-CXXThisExpr 0x55709d019790 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55709d019868 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55709d0197d0 <col:27> 'const char *' lvalue ParmVar 0x55709cff0d10 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55709d019880 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55709d0197f0 <col:36> 'int' lvalue ParmVar 0x55709cff0d90 'flags' 'int'
|     |             `-DeclRefExpr 0x55709d019810 <col:43> 'Args::Slot *' lvalue Var 0x55709d019698 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55709d019d40 <line:760:9, col:59>
|     | `-VarDecl 0x55709d019978 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55709d019d10 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55709d019c80 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55709d019cc8 <col:43> 'T' lvalue ParmVar 0x55709cff0ea8 'variable' 'T &'
|     |     `-UnaryOperator 0x55709d019cf8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55709d019ce8 <col:54> 'Args *' this
|     `-CallExpr 0x55709d01c718 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55709d019d68 <col:9> '<bound member function type>' ->postparse 0x55709d00eff8
|       | `-CXXThisExpr 0x55709d019d58 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55709d01c6d8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55709d019d98 <col:19> 'T *' lvalue Var 0x55709d019978 's' 'T *'
|       | `-ParenExpr 0x55709d01c6b8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55709d01c688 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55709d01c670 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55709d01c658 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55709d01c638 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55709d01c608 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55709cd3e548
|       |     |       `-ImplicitCastExpr 0x55709d01c5f0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55709d019db8 <col:25> 'String' lvalue Var 0x55709d019728 'str' 'String'
|       |     |-CallExpr 0x55709d01c460 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55709d01c2f0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55709d01c338 <col:59> 'P' lvalue ParmVar 0x55709cff0e08 'parser' 'P'
|       |     | |-DeclRefExpr 0x55709d01c358 <col:67> 'String' lvalue Var 0x55709d019728 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55709d01c408 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55709d01c398 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55709cf32678 0x55709cf32298 0x55709cf31ec8 0x55709cf31ae8 0x55709cf31708 0x55709cf31338
|       |     | | `-DeclRefExpr 0x55709d01c378 <col:73> 'T *' lvalue Var 0x55709d019978 's' 'T *'
|       |     | `-UnaryOperator 0x55709d01c448 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55709d01c438 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55709d01c5d0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55709d01c5b0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55709d01c580 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55709d01c530 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55709d01c4c0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55709cf32678 0x55709cf32298 0x55709cf31ec8 0x55709cf31ae8 0x55709cf31708 0x55709cf31338
|       |         | | `-DeclRefExpr 0x55709d01c4a0 <col:87> 'T *' lvalue Var 0x55709d019978 's' 'T *'
|       |         | `-DeclRefExpr 0x55709d01c560 <col:91> 'const V' lvalue ParmVar 0x55709cff0f48 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55709d01c5a0 <col:98> 'bool' true
|       `-DeclRefExpr 0x55709d01c6f8 <col:106> 'Args::Slot *' lvalue Var 0x55709d019698 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55709cff9408 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55709cff11b8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55709cff1238 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55709cff12b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55709cff9368 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55709cff1380 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cff1400 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55709cff1478 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55709cff1518 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55709cff9210 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55709d01d728 <col:60, line:773:5>
|     |-DeclStmt 0x55709d01c7f0 <line:767:9, col:26>
|     | `-VarDecl 0x55709d01c788 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55709d01d6f0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55709d01d710 <line:768:13, col:58>
|       | `-VarDecl 0x55709d01c818 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55709d01c9f8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55709d01c9c8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55709d01c9b0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55709d01c990 <col:26, col:58> 'String' (CXXTemporary 0x55709d01c990)
|       |           `-CXXMemberCallExpr 0x55709d01c920 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55709d01c890 <col:26> '<bound member function type>' ->find 0x55709d00ede8
|       |             | `-CXXThisExpr 0x55709d01c880 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55709d01c958 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55709d01c8c0 <col:31> 'const char *' lvalue ParmVar 0x55709cff1380 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55709d01c970 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55709d01c8e0 <col:40> 'int' lvalue ParmVar 0x55709cff1400 'flags' 'int'
|       |             `-DeclRefExpr 0x55709d01c900 <col:47> 'Args::Slot *' lvalue Var 0x55709d01c788 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55709d01cab0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55709d01ca98 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55709d01ca78 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55709d01ca48 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55709cd3e548
|       |       `-ImplicitCastExpr 0x55709d01ca30 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55709d01ca10 <col:20> 'String' lvalue Var 0x55709d01c818 'str' 'String'
|       `-CompoundStmt 0x55709d01d6c8 <col:61, line:772:9>
|         |-DeclStmt 0x55709d01cdf0 <line:769:13, col:66>
|         | `-VarDecl 0x55709d01cb08 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55709d01cdc0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55709d01cd30 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55709d01cd78 <col:49> 'T1' lvalue ParmVar 0x55709cff1518 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55709d01cda8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55709d01cd98 <col:61> 'Args *' this
|         |-DeclStmt 0x55709d01d160 <line:770:13, col:66>
|         | `-VarDecl 0x55709d01ce78 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55709d01d130 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55709d01d0a0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55709d01d0e8 <col:49> 'T2' lvalue ParmVar 0x55709cff9210 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55709d01d118 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55709d01d108 <col:61> 'Args *' this
|         `-CallExpr 0x55709d01d698 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55709d01d188 <col:13> '<bound member function type>' ->postparse 0x55709d00eff8
|           | `-CXXThisExpr 0x55709d01d178 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55709d01d658 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55709d01d1f8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55709d01d1b8 <col:23> 'T1 *' lvalue Var 0x55709d01cb08 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55709d01d1d8 <col:29> 'T2 *' lvalue Var 0x55709d01ce78 's2' 'T2 *'
|           | `-CallExpr 0x55709d01d610 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55709d01d3e0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55709d01d428 <col:63> 'P' lvalue ParmVar 0x55709cff1478 'parser' 'P'
|           |   |-DeclRefExpr 0x55709d01d448 <col:71> 'String' lvalue Var 0x55709d01c818 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55709d01d4f8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55709d01d488 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55709cf32678 0x55709cf32298 0x55709cf31ec8 0x55709cf31ae8 0x55709cf31708 0x55709cf31338
|           |   | `-DeclRefExpr 0x55709d01d468 <col:77> 'T1 *' lvalue Var 0x55709d01cb08 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55709d01d5b8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55709d01d548 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55709cf32678 0x55709cf32298 0x55709cf31ec8 0x55709cf31ae8 0x55709cf31708 0x55709cf31338
|           |   | `-DeclRefExpr 0x55709d01d528 <col:82> 'T2 *' lvalue Var 0x55709d01ce78 's2' 'T2 *'
|           |   `-UnaryOperator 0x55709d01d5f8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55709d01d5e8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55709d01d678 <col:94> 'Args::Slot *' lvalue Var 0x55709d01c788 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55709cff97f8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55709cff9488 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55709cff9758 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55709cff9540 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cff95c0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55709cff9638 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55709d01dc40 <col:67, line:780:5>
|     |-DeclStmt 0x55709d01d7c0 <line:777:9, col:26>
|     | `-VarDecl 0x55709d01d758 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55709d01dc08 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55709d01dc28 <line:778:13, col:58>
|       | `-VarDecl 0x55709d01d7e8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55709d01d9c8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55709d01d998 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55709d01d980 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55709d01d960 <col:26, col:58> 'String' (CXXTemporary 0x55709d01d960)
|       |           `-CXXMemberCallExpr 0x55709d01d8f0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55709d01d860 <col:26> '<bound member function type>' ->find 0x55709d00ede8
|       |             | `-CXXThisExpr 0x55709d01d850 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55709d01d928 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55709d01d890 <col:31> 'const char *' lvalue ParmVar 0x55709cff9540 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55709d01d940 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55709d01d8b0 <col:40> 'int' lvalue ParmVar 0x55709cff95c0 'flags' 'int'
|       |             `-DeclRefExpr 0x55709d01d8d0 <col:47> 'Args::Slot *' lvalue Var 0x55709d01d758 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55709d01da80 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55709d01da68 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55709d01da48 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55709d01da18 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55709cd3e548
|       |       `-ImplicitCastExpr 0x55709d01da00 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55709d01d9e0 <col:20> 'String' lvalue Var 0x55709d01d7e8 'str' 'String'
|       `-CallExpr 0x55709d01dbd8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55709d01daa8 <col:13> '<bound member function type>' ->postparse 0x55709d00eff8
|         | `-CXXThisExpr 0x55709d01da98 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55709d01db88 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55709d01daf8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55709d01dad8 <col:23> 'P' lvalue ParmVar 0x55709cff9638 'parser' 'P'
|         | |-DeclRefExpr 0x55709d01db40 <col:36> 'String' lvalue Var 0x55709d01d7e8 'str' 'String'
|         | `-UnaryOperator 0x55709d01db70 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55709d01db60 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55709d01dbb8 <col:49> 'Args::Slot *' lvalue Var 0x55709d01d758 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55709cff9b98 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55709cff9868 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55709cff9af8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55709cff9920 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cff99a0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55709cff9a18 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55709d01e5b0 <col:71, line:792:5>
|     |-DeclStmt 0x55709d01dcd8 <line:784:9, col:26>
|     | `-VarDecl 0x55709d01dc70 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55709d01dda8 <line:785:9, col:29>
|     | `-VarDecl 0x55709d01dd08 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55709d01dd90 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55709d01dd70 <col:28> 'int' 1
|     |-WhileStmt 0x55709d01e460 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55709d01e480 <line:786:16, col:61>
|     | | `-VarDecl 0x55709d01ddd0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55709d01dfb0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55709d01df80 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55709d01df68 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55709d01df48 <col:29, col:61> 'String' (CXXTemporary 0x55709d01df48)
|     | |           `-CXXMemberCallExpr 0x55709d01ded8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55709d01de48 <col:29> '<bound member function type>' ->find 0x55709d00ede8
|     | |             | `-CXXThisExpr 0x55709d01de38 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55709d01df10 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55709d01de78 <col:34> 'const char *' lvalue ParmVar 0x55709cff9920 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55709d01df28 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55709d01de98 <col:43> 'int' lvalue ParmVar 0x55709cff99a0 'flags' 'int'
|     | |             `-DeclRefExpr 0x55709d01deb8 <col:50> 'Args::Slot *' lvalue Var 0x55709d01dc70 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55709d01e068 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55709d01e050 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55709d01e030 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55709d01e000 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55709cd3e548
|     | |       `-ImplicitCastExpr 0x55709d01dfe8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55709d01dfc8 <col:23> 'String' lvalue Var 0x55709d01ddd0 'str' 'String'
|     | `-CompoundStmt 0x55709d01e438 <col:64, line:790:9>
|     |   |-CallExpr 0x55709d01e1c0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55709d01e090 <col:13> '<bound member function type>' ->postparse 0x55709d00eff8
|     |   | | `-CXXThisExpr 0x55709d01e080 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55709d01e170 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55709d01e0e0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55709d01e0c0 <col:23> 'P' lvalue ParmVar 0x55709cff9a18 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55709d01e128 <col:36> 'String' lvalue Var 0x55709d01ddd0 'str' 'String'
|     |   | | `-UnaryOperator 0x55709d01e158 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55709d01e148 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55709d01e1a0 <col:49> 'Args::Slot *' lvalue Var 0x55709d01dc70 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55709d01e358 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55709d01e1f0 <col:13> 'int' lvalue Var 0x55709d01dd08 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55709d01e340 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55709d01e320 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55709d01e288 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55709d01e268 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55709d01e250 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55709d01e210 <col:28> 'int' lvalue Var 0x55709d01dd08 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55709d01e230 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55709d01e308 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55709d01e2d8 <col:49> 'bool' lvalue ->_read_status 0x55709cfd4fa0
|     |   |         `-ImplicitCastExpr 0x55709d01e2b8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55709d01e2a8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55709d01e408 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55709d01e378 <col:13> 'int' lvalue ParmVar 0x55709cff99a0 'flags' 'int'
|     |     `-UnaryOperator 0x55709d01e3f0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55709d01e3d8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55709d01e3b8 <col:23> 'const int' lvalue Var 0x55709cfde0b8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55709d01e590 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55709d01e4c8 <col:9> 'bool' lvalue ->_read_status 0x55709cfd4fa0
|       | `-ImplicitCastExpr 0x55709d01e4a8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55709d01e498 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55709d01e570 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55709d01e550 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55709d01e538 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55709d01e4f8 <col:25> 'int' lvalue Var 0x55709d01dd08 'read_status' 'int'
|           `-IntegerLiteral 0x55709d01e518 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55709cffa078 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55709cff9c08 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55709cff9c88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55709cff9fd8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55709cff9d48 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cff9dc8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55709cff9e40 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55709cff9ee8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55709d01f540 <col:84, line:805:5>
|     |-DeclStmt 0x55709d01e658 <line:796:9, col:26>
|     | `-VarDecl 0x55709d01e5f0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55709d01e728 <line:797:9, col:29>
|     | `-VarDecl 0x55709d01e688 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55709d01e710 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55709d01e6f0 <col:28> 'int' 1
|     |-DeclStmt 0x55709d01ea60 <line:798:9, col:71>
|     | `-VarDecl 0x55709d01e778 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55709d01ea30 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55709d01e9a0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55709d01e9e8 <col:55> 'T' lvalue ParmVar 0x55709cff9ee8 'variable' 'T &'
|     |     `-UnaryOperator 0x55709d01ea18 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55709d01ea08 <col:66> 'Args *' this
|     |-WhileStmt 0x55709d01f3f0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55709d01f410 <line:799:16, col:61>
|     | | `-VarDecl 0x55709d01ea88 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55709d01ec68 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55709d01ec38 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55709d01ec20 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55709d01ec00 <col:29, col:61> 'String' (CXXTemporary 0x55709d01ec00)
|     | |           `-CXXMemberCallExpr 0x55709d01eb90 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55709d01eb00 <col:29> '<bound member function type>' ->find 0x55709d00ede8
|     | |             | `-CXXThisExpr 0x55709d01eaf0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55709d01ebc8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55709d01eb30 <col:34> 'const char *' lvalue ParmVar 0x55709cff9d48 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55709d01ebe0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55709d01eb50 <col:43> 'int' lvalue ParmVar 0x55709cff9dc8 'flags' 'int'
|     | |             `-DeclRefExpr 0x55709d01eb70 <col:50> 'Args::Slot *' lvalue Var 0x55709d01e5f0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55709d01ed20 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55709d01ed08 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55709d01ece8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55709d01ecb8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55709cd3e548
|     | |       `-ImplicitCastExpr 0x55709d01eca0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55709d01ec80 <col:23> 'String' lvalue Var 0x55709d01ea88 'str' 'String'
|     | `-CompoundStmt 0x55709d01f3c8 <col:64, line:803:9>
|     |   |-CallExpr 0x55709d01f150 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55709d01ed48 <col:13> '<bound member function type>' ->postparse 0x55709d00eff8
|     |   | | `-CXXThisExpr 0x55709d01ed38 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55709d01f110 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55709d01ed78 <col:23> 'T *' lvalue Var 0x55709d01e778 's' 'T *'
|     |   | | `-CallExpr 0x55709d01f0d0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55709d01ef60 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55709d01efa8 <col:56> 'P' lvalue ParmVar 0x55709cff9e40 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55709d01efc8 <col:64> 'String' lvalue Var 0x55709d01ea88 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55709d01f078 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55709d01f008 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55709cf32678 0x55709cf32298 0x55709cf31ec8 0x55709cf31ae8 0x55709cf31708 0x55709cf31338
|     |   | |   | `-DeclRefExpr 0x55709d01efe8 <col:70> 'T *' lvalue Var 0x55709d01e778 's' 'T *'
|     |   | |   `-UnaryOperator 0x55709d01f0b8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55709d01f0a8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55709d01f130 <col:81> 'Args::Slot *' lvalue Var 0x55709d01e5f0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55709d01f2e8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55709d01f180 <col:13> 'int' lvalue Var 0x55709d01e688 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55709d01f2d0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55709d01f2b0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55709d01f218 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55709d01f1f8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55709d01f1e0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55709d01f1a0 <col:28> 'int' lvalue Var 0x55709d01e688 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55709d01f1c0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55709d01f298 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55709d01f268 <col:49> 'bool' lvalue ->_read_status 0x55709cfd4fa0
|     |   |         `-ImplicitCastExpr 0x55709d01f248 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55709d01f238 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55709d01f398 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55709d01f308 <col:13> 'int' lvalue ParmVar 0x55709cff9dc8 'flags' 'int'
|     |     `-UnaryOperator 0x55709d01f380 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55709d01f368 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55709d01f348 <col:23> 'const int' lvalue Var 0x55709cfde0b8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55709d01f520 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55709d01f458 <col:9> 'bool' lvalue ->_read_status 0x55709cfd4fa0
|       | `-ImplicitCastExpr 0x55709d01f438 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55709d01f428 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55709d01f500 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55709d01f4e0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55709d01f4c8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55709d01f488 <col:25> 'int' lvalue Var 0x55709d01e688 'read_status' 'int'
|           `-IntegerLiteral 0x55709d01f4a8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55709cffa658 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55709cffa0f0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55709cffa168 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55709cffa5b8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55709cffa228 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55709cffa2a8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55709cffa320 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55709cffa470 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55709d020348 <col:87, line:821:5>
|     |-DeclStmt 0x55709d01f5f0 <line:809:9, col:26>
|     | `-VarDecl 0x55709d01f588 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55709d01f6c0 <line:810:9, col:29>
|     | `-VarDecl 0x55709d01f620 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55709d01f6a8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55709d01f688 <col:28> 'int' 1
|     |-DeclStmt 0x55709d01f908 <line:811:9, col:38>
|     | `-VarDecl 0x55709d01f7f0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55709d01f8e0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55709d01f868 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55709d01f8c0 <col:29> 'Vector<T>' lvalue ParmVar 0x55709cffa470 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55709d0201f8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55709d020218 <line:812:16, col:61>
|     | | `-VarDecl 0x55709d01f930 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55709d01fb10 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55709d01fae0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55709d01fac8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55709d01faa8 <col:29, col:61> 'String' (CXXTemporary 0x55709d01faa8)
|     | |           `-CXXMemberCallExpr 0x55709d01fa38 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55709d01f9a8 <col:29> '<bound member function type>' ->find 0x55709d00ede8
|     | |             | `-CXXThisExpr 0x55709d01f998 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55709d01fa70 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55709d01f9d8 <col:34> 'const char *' lvalue ParmVar 0x55709cffa228 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55709d01fa88 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55709d01f9f8 <col:43> 'int' lvalue ParmVar 0x55709cffa2a8 'flags' 'int'
|     | |             `-DeclRefExpr 0x55709d01fa18 <col:50> 'Args::Slot *' lvalue Var 0x55709d01f588 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55709d01fbc8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55709d01fbb0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55709d01fb90 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55709d01fb60 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55709cd3e548
|     | |       `-ImplicitCastExpr 0x55709d01fb48 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55709d01fb28 <col:23> 'String' lvalue Var 0x55709d01f930 'str' 'String'
|     | `-CompoundStmt 0x55709d0201c0 <col:64, line:819:9>
|     |   |-DeclStmt 0x55709d01fc88 <line:813:13, col:23>
|     |   | `-VarDecl 0x55709d01fbf0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55709d01fc68 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55709d01fe08 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55709d01fcb0 <col:13> '<bound member function type>' ->postparse 0x55709d00eff8
|     |   | | `-CXXThisExpr 0x55709d01fca0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55709d01fdb0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55709d01fd00 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55709d01fce0 <col:23> 'P' lvalue ParmVar 0x55709cffa320 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55709d01fd48 <col:36> 'String' lvalue Var 0x55709d01f930 'str' 'String'
|     |   | | |-DeclRefExpr 0x55709d01fd68 <col:41> 'T' lvalue Var 0x55709d01fbf0 'sx' 'T'
|     |   | | `-UnaryOperator 0x55709d01fd98 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55709d01fd88 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55709d01fde8 <col:53> 'Args::Slot *' lvalue Var 0x55709d01f588 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55709d01ff60 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55709d01fe98 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55709d01fe68 <col:17> 'bool' lvalue ->_read_status 0x55709cfd4fa0
|     |   | |   `-ImplicitCastExpr 0x55709d01fe48 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55709d01fe38 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55709d01ff38 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55709d01fed0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55709d01feb0 <col:17> 'Vector<T> *' lvalue Var 0x55709d01f7f0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55709d01ff18 <col:30> 'T' lvalue Var 0x55709d01fbf0 'sx' 'T'
|     |   |-BinaryOperator 0x55709d0200e0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55709d01ff78 <col:13> 'int' lvalue Var 0x55709d01f620 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55709d0200c8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55709d0200a8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55709d020010 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55709d01fff0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55709d01ffd8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55709d01ff98 <col:28> 'int' lvalue Var 0x55709d01f620 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55709d01ffb8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55709d020090 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55709d020060 <col:49> 'bool' lvalue ->_read_status 0x55709cfd4fa0
|     |   |         `-ImplicitCastExpr 0x55709d020040 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55709d020030 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55709d020190 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55709d020100 <col:13> 'int' lvalue ParmVar 0x55709cffa2a8 'flags' 'int'
|     |     `-UnaryOperator 0x55709d020178 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55709d020160 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55709d020140 <col:23> 'const int' lvalue Var 0x55709cfde0b8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55709d020328 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55709d020260 <col:9> 'bool' lvalue ->_read_status 0x55709cfd4fa0
|       | `-ImplicitCastExpr 0x55709d020240 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55709d020230 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55709d020308 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55709d0202e8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55709d0202d0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55709d020290 <col:25> 'int' lvalue Var 0x55709d01f620 'read_status' 'int'
|           `-IntegerLiteral 0x55709d0202b0 <col:40> 'int' 1
|-AccessSpecDecl 0x55709cffa6d0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55709cffa6f8 prev 0x55709cfdc3b8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55709cffa7f0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55709cffa8e0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55709d020380 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55709cffa9d0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55709d020390 <col:25, line:830:9>
| |-CXXMethodDecl 0x55709cffaad0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55709cffab80 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55709cffac28 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55709cffac28
| | `-ParmVarDecl 0x55709cffad38 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55709cffb4f8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55709cffb4f8
|   `-ParmVarDecl 0x55709cffb608 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55709cffada8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55709cffaf08 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55709cffb100 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55709cffafb0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55709cffb028 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55709d020570 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55709cffb3b8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55709d0203e0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55709d0203a0 <col:20> 'void *' lvalue ParmVar 0x55709cffafb0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55709cffb420 '_slot' 'char *'
| | | `-CXXNewExpr 0x55709d020468 <col:32, col:45> 'char *' array Function 0x55709cb611b8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55709d020450 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55709d020420 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55709cffb028 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55709cffb480 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55709d020530 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55709d0204f0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55709cffb028 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55709d0205f0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55709cffb200 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55709cffa9d0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55709d020678 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55709d020658 <line:840:13, col:22> 'void' array Function 0x55709cb61518 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55709d020640 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55709d020610 <col:22> 'char *' lvalue ->_slot 0x55709cffb420
| |         `-CXXThisExpr 0x55709d020600 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55709cffb300 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55709cffaad0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55709d020868 <col:22, line:844:9>
| |   `-CallExpr 0x55709d0207d0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55709d0207b8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55709d020798 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55709cc6cf98 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55709d020808 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55709d0206e8 <col:20> 'void *' lvalue ->_ptr 0x55709cffb3b8
| |     |   `-CXXThisExpr 0x55709d0206d8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55709d020838 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55709d020820 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55709d020728 <col:26> 'char *' lvalue ->_slot 0x55709cffb420
| |     |     `-CXXThisExpr 0x55709d020718 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55709d020850 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55709d020768 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55709cffb480
| |         `-CXXThisExpr 0x55709d020758 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55709cffb3b8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55709cffb420 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55709cffb480 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55709cffb678 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55709cffb678
| | `-ParmVarDecl 0x55709cffb788 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55709cffb828 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55709cffb828
|   `-ParmVarDecl 0x55709cffb938 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55709cffbad8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55709cffb9a8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55709cffba48 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55709cffbd70 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55709cffbf68 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55709cffbe38 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55709cffc0e8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55709d0208a0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55709d020880 <col:20> 'T *' lvalue ParmVar 0x55709cffbe38 'ptr' 'T *'
|   | `-CompoundStmt 0x55709d0208f0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55709cffc038 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55709cffaad0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55709d020aa0 <col:22, line:857:9>
|   |   `-CallExpr 0x55709d020a70 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55709d020900 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55709cd256c8 0x55709cccf9f8
|   |     |-CXXOperatorCallExpr 0x55709d020a00 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55709d020990 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55709cf32678 0x55709cf32298 0x55709cf31ec8 0x55709cf31ae8 0x55709cf31708 0x55709cf31338
|   |     | `-MemberExpr 0x55709d020960 <col:29> 'T *' lvalue ->_ptr 0x55709cffc0e8
|   |     |   `-CXXThisExpr 0x55709d020950 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55709d020a40 <col:35> 'T' lvalue ->_slot 0x55709cffc148
|   |       `-CXXThisExpr 0x55709d020a30 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55709cffc0e8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55709cffc148 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55709cffc1b0 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55709cffc2b0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55709cffc300 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55709cffc290 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55709cffc270 <col:31> 'int' 48
|-FieldDecl 0x55709cffc328 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55709cffc388 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55709cffc3e8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55709cffc520 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55709d00e690 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55709d00e6f0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55709d00e7a0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55709d00e9c8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55709d00e8d0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55709d00eb18 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55709d00ea88 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55709d00ede8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55709d00ebd8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55709d00ec58 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55709d00ed00 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55709d00eff8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55709d00eeb0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55709d00ef28 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55709d00f0c8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55709d00f218 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55709d00f180 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55709d00f5a8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55709d00f2d8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55709d00f358 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55709d00f400 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55709d00f4b8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55709d00f7d0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55709d00f680 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55709d00f6f8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55709d00fae8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55709d00f880 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55709d00fa48 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55709d00f958 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class AnnoArg
         0 |   int size
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55709d03b450 <../dummy_inc/click/args.hh:1294:1, line:1301:1> line:1294:7 referenced class AnnoArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55709d03b568 <col:1, col:7> col:7 implicit referenced class AnnoArg
|-AccessSpecDecl 0x55709d03b5f8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55709d03b708 <line:1295:5, line:1297:5> line:1295:5 used AnnoArg 'void (int)'
| |-ParmVarDecl 0x55709d03b638 <col:13, col:17> col:17 used s 'int'
| |-CXXCtorInitializer Field 0x55709d03ba58 'size' 'int'
| | `-ImplicitCastExpr 0x55709d03bb20 <line:1296:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55709d03bae0 <col:16> 'int' lvalue ParmVar 0x55709d03b638 's' 'int'
| `-CompoundStmt 0x55709d03bb68 <col:19, line:1297:5>
|-CXXMethodDecl 0x55709d03b960 <line:1298:5, col:83> col:10 parse 'bool (const String &, int &, const ArgContext &)'
| |-ParmVarDecl 0x55709d03b7c8 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x55709d03b848 <col:35, col:40> col:40 result 'int &'
| `-ParmVarDecl 0x55709d03b8c0 <col:48, col:73> col:66 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55709d03bac0 <col:73> 'const ArgContext' lvalue Var 0x55709d020ac8 'blank_args' 'const ArgContext'
|-AccessSpecDecl 0x55709d03ba18 <line:1299:3, col:10> col:3 private
|-FieldDecl 0x55709d03ba58 <line:1300:5, col:9> col:9 referenced size 'int'
|-CXXConstructorDecl 0x55709d055dc8 <line:1294:7> col:7 implicit constexpr AnnoArg 'void (const AnnoArg &)' inline default trivial noexcept-unevaluated 0x55709d055dc8
| `-ParmVarDecl 0x55709d055ed8 <col:7> col:7 'const AnnoArg &'
|-CXXConstructorDecl 0x55709d055f78 <col:7> col:7 implicit used constexpr AnnoArg 'void (AnnoArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55709d056088 <col:7> col:7 used 'AnnoArg &&'
| |-CXXCtorInitializer Field 0x55709d03ba58 'size' 'int'
| | `-ImplicitCastExpr 0x55709d056888 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55709d056840 <col:7> 'int' xvalue .size 0x55709d03ba58
| |     `-CXXStaticCastExpr 0x55709d056810 <col:7> 'AnnoArg' xvalue static_cast<class AnnoArg &&> <NoOp>
| |       `-DeclRefExpr 0x55709d0567e0 <col:7> 'AnnoArg' lvalue ParmVar 0x55709d056088 '' 'AnnoArg &&'
| `-CompoundStmt 0x55709d0568d0 <col:7>
`-CXXDestructorDecl 0x55709d056128 <col:7> col:7 implicit referenced ~AnnoArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.AnnoArg = type { i32 }
  NonVirtualBaseLLVMType:%class.AnnoArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WordArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55709d03ef40 <../dummy_inc/click/args.hh:1369:1, line:1373:1> line:1369:7 referenced class WordArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55709d03f058 <col:1, col:7> col:7 implicit class WordArg
|-AccessSpecDecl 0x55709d03f0e8 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x55709d03f2e0 <line:1370:5, line:1372:5> line:1370:17 parse 'bool (const String &, String &, const ArgContext &)' static
| |-ParmVarDecl 0x55709d03f120 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55709d03f198 <col:42, col:50> col:50 used result 'String &'
| |-ParmVarDecl 0x55709d03f210 <col:58, col:79> col:77 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55709d03f3b0 <col:79> 'const ArgContext' lvalue Var 0x55709d020ac8 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55709d03f528 <col:91, line:1372:5>
|   `-ReturnStmt 0x55709d03f518 <line:1371:9, col:39>
|     `-CallExpr 0x55709d03f4c8 <col:16, col:39> 'bool'
|       |-ImplicitCastExpr 0x55709d03f4b0 <col:16> 'bool (*)(const String &, String *, String *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55709d03f490 <col:16> 'bool (const String &, String *, String *)' lvalue Function 0x55709d03ee88 'cp_word' 'bool (const String &, String *, String *)'
|       |-DeclRefExpr 0x55709d03f418 <col:24> 'const String' lvalue ParmVar 0x55709d03f120 'str' 'const String &'
|       |-UnaryOperator 0x55709d03f458 <col:29, col:30> 'String *' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x55709d03f438 <col:30> 'String' lvalue ParmVar 0x55709d03f198 'result' 'String &'
|       `-ImplicitCastExpr 0x55709d03f500 <col:38> 'String *' <NullToPointer>
|         `-IntegerLiteral 0x55709d03f470 <col:38> 'int' 0
|-CXXConstructorDecl 0x55709d0569c0 <line:1369:7> col:7 implicit referenced constexpr WordArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55709d056ac8 <col:7> col:7 implicit constexpr WordArg 'void (const WordArg &)' inline default trivial noexcept-unevaluated 0x55709d056ac8
| `-ParmVarDecl 0x55709d056bd8 <col:7> col:7 'const WordArg &'
|-CXXConstructorDecl 0x55709d056c78 <col:7> col:7 implicit used constexpr WordArg 'void (WordArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55709d056d88 <col:7> col:7 'WordArg &&'
| `-CompoundStmt 0x55709d057430 <col:7>
`-CXXDestructorDecl 0x55709d056e28 <col:7> col:7 implicit referenced ~WordArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.WordArg = type { i8 }
  NonVirtualBaseLLVMType:%class.WordArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55709d02bc20 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55709d02bd38 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55709d02bdc8 <col:16, col:22> col:16 public
|-EnumDecl 0x55709d02bdf0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55709d02bef0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55709d02c140 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709d02bed0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55709d02beb0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55709d02bf80 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55709d02c158 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709d02bf60 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55709d02bf40 <col:24> 'int' 22
| |-EnumConstantDecl 0x55709d02c010 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55709d02c170 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709d02bff0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55709d02bfd0 <col:24> 'int' 34
| |-EnumConstantDecl 0x55709d02c0a0 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55709d02c188 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709d02c080 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55709d02c060 <col:25> 'int' 95
| `-EnumConstantDecl 0x55709d02c0f0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55709d02db00 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55709d02df38 <col:7>
|-CXXConstructorDecl 0x55709d02dc08 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55709d02dc08
| `-ParmVarDecl 0x55709d02dd18 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55709d02ddb8 <col:7> col:7 implicit constexpr NumArg 'void (NumArg &&)' inline default trivial noexcept-unevaluated 0x55709d02ddb8
| `-ParmVarDecl 0x55709d02dec8 <col:7> col:7 'NumArg &&'
`-CXXDestructorDecl 0x55709d030048 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55709d02c1b8 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55709d02c318 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55709d02c3a8 <col:32, col:38> col:32 public
|-TypedefDecl 0x55709d02c3e0 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55709cb63510 'uint32_t' sugar
|   |-Typedef 0x55709ca773d8 'uint32_t'
|   `-TypedefType 0x55709ca50480 '__uint32_t' sugar
|     |-Typedef 0x55709ca50078 '__uint32_t'
|     `-BuiltinType 0x55709ca0e450 'unsigned int'
|-CXXConstructorDecl 0x55709d02c528 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55709d02c450 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55709d02da08 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55709d02df48 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55709d02d2c0 'base' 'int'
| | `-ImplicitCastExpr 0x55709d02daa8 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55709d02da68 <col:16> 'int' lvalue ParmVar 0x55709d02c450 'b' 'int'
| `-CompoundStmt 0x55709d02dfb8 <col:19, line:1046:5>
|-CXXMethodDecl 0x55709d02ca20 <line:1048:5, line:1050:50> line:1048:17 parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55709d02c5f0 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55709d02c670 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55709d02c6e8 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55709d02c768 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55709d02c828 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55709d02c8a8 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55709d02ce78 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55709d02caf0 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| `-CXXMethodDecl 0x55709d02cdd8 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
|   |-ParmVarDecl 0x55709d02cb98 <col:27, col:41> col:41 referenced str 'const String &'
|   |-ParmVarDecl 0x55709d02cc38 <col:46, col:49> col:49 referenced result 'V &'
|   |-ParmVarDecl 0x55709d02ccb0 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
|   | `-DeclRefExpr 0x55709d02da28 <col:82> 'const ArgContext' lvalue Var 0x55709d020ac8 'blank_args' 'const ArgContext'
|   `-CompoundStmt 0x55709d02eef8 <col:94, line:1067:5>
|     |-DeclStmt 0x55709d02e148 <line:1054:9, col:64>
|     | `-VarDecl 0x55709d02dfd8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-CXXDependentScopeMemberExpr 0x55709d02e100 <col:36, col:55> '<dependent type>' lvalue ->is_signed
|     |-DeclStmt 0x55709d02e368 <line:1055:9, col:91>
|     | `-VarDecl 0x55709d02e178 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55709d02e340 <col:31, col:90> 'int' functional cast to int <Dependent>
|     |     `-BinaryOperator 0x55709d02e320 <col:35, col:89> 'unsigned long' '/'
|     |       |-ParenExpr 0x55709d02e2d0 <col:35, col:69> 'unsigned long'
|     |       | `-BinaryOperator 0x55709d02e2b0 <col:36, col:68> 'unsigned long' '-'
|     |       |   |-BinaryOperator 0x55709d02e258 <col:36, col:64> 'unsigned long' '+'
|     |       |   | |-UnaryExprOrTypeTraitExpr 0x55709d02e208 <col:36, col:44> 'unsigned long' sizeof 'V'
|     |       |   | `-UnaryExprOrTypeTraitExpr 0x55709d02e238 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |       |   `-ImplicitCastExpr 0x55709d02e298 <col:68> 'unsigned long' <IntegralCast>
|     |       |     `-IntegerLiteral 0x55709d02e278 <col:68> 'int' 1
|     |       `-UnaryExprOrTypeTraitExpr 0x55709d02e300 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55709d02e4c8 <line:1056:9, col:27>
|     | `-VarDecl 0x55709d02e460 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
|     |-IfStmt 0x55709d02e910 <line:1057:9, line:1059:22>
|     | |-CXXOperatorCallExpr 0x55709d02e840 <line:1057:13, line:1058:24> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55709d02e7c0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55709cf2d4f8 0x55709cd76ad8 0x55709cd767b0 0x55709cd67f90 0x55709cd67c40 0x55709cd67530 0x55709cd39ea0 0x55709ccc6360
|     | | |-CallExpr 0x55709d02e700 <line:1057:13, col:78> '<dependent type>'
|     | | | |-UnresolvedMemberExpr 0x55709d02e4f0 <col:13> '<bound member function type>' lvalue
|     | | | |-CXXMemberCallExpr 0x55709d02e5a0 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55709d02e570 <col:19, col:23> '<bound member function type>' .begin 0x55709cd57198
|     | | | |   `-DeclRefExpr 0x55709d02e550 <col:19> 'const String' lvalue ParmVar 0x55709d02cb98 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55709d02e610 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55709d02e5e0 <col:32, col:36> '<bound member function type>' .end 0x55709cd573b0
|     | | | |   `-DeclRefExpr 0x55709d02e5c0 <col:32> 'const String' lvalue ParmVar 0x55709d02cb98 'str' 'const String &'
|     | | | |-DeclRefExpr 0x55709d02e630 <col:43> 'const bool' lvalue Var 0x55709d02dfd8 'is_signed' 'const bool'
|     | | | |-CXXFunctionalCastExpr 0x55709d02e698 <col:54, col:67> 'int' functional cast to int <Dependent>
|     | | | | `-UnaryExprOrTypeTraitExpr 0x55709d02e678 <col:58, col:66> 'unsigned long' sizeof 'V'
|     | | | |-DeclRefExpr 0x55709d02e6c0 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55709d02e460 'x' 'IntArg::limb_type [nlimb]'
|     | | | `-DeclRefExpr 0x55709d02e6e0 <col:73> 'const int' lvalue Var 0x55709d02e178 'nlimb' 'const int'
|     | | `-CXXMemberCallExpr 0x55709d02e7a0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55709d02e770 <col:16, col:20> '<bound member function type>' .end 0x55709cd573b0
|     | |     `-DeclRefExpr 0x55709d02e750 <col:16> 'const String' lvalue ParmVar 0x55709d02cb98 'str' 'const String &'
|     | `-BinaryOperator 0x55709d02e8f0 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55709d02e888 <col:13> 'int' lvalue ->status 0x55709d02d328
|     |   | `-CXXThisExpr 0x55709d02e878 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55709d02e8d8 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55709d02e8b8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55709d02bf80 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55709d02eb60 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55709d02ea48 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55709d02ea30 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55709d02ea18 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55709d02e938 <col:13> 'int' lvalue ->status 0x55709d02d328
|     | | |     `-CXXThisExpr 0x55709d02e928 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55709d02e9f8 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55709d02e9c8 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55709d02e978 <col:23> 'int' lvalue ->status 0x55709d02d328
|     | |   |   `-CXXThisExpr 0x55709d02e968 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55709d02e9e0 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55709d02e9a8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55709d02c010 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55709d02eb40 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55709d02eae0 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55709d02ea88 <col:13, col:18> '<bound member function type>' .error 0x55709cfd45b0
|     |   | | `-DeclRefExpr 0x55709d02ea68 <col:13> 'const ArgContext' lvalue ParmVar 0x55709d02ccb0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55709d02eb08 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55709d02eab8 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55709d02eb30 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55709d02eb20 <col:20> 'bool' false
|     |-DeclStmt 0x55709d02ed48 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55709d02ecf0 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
|     |   `-DependentNameType 0x55709d02ec80 'typename make_unsigned<V>::type' dependent
|     |-CallExpr 0x55709d02eea8 <line:1065:9, col:71> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55709d02ed60 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55709ccfa328
|     | |-DeclRefExpr 0x55709d02eda8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55709d02e460 'x' 'IntArg::limb_type [nlimb]'
|     | `-CXXReinterpretCastExpr 0x55709d02ee78 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
|     |   `-DeclRefExpr 0x55709d02edf0 <col:64> 'V' lvalue ParmVar 0x55709d02cc38 'result' 'V &'
|     `-ReturnStmt 0x55709d02eee8 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x55709d02eed8 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55709d02d238 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55709d02cee8 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55709d02d198 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55709d02cf98 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55709d02d038 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55709d02d0b0 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55709d02da48 <col:71> 'const ArgContext' lvalue Var 0x55709d020ac8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55709d02f668 <col:83, line:1083:5>
| |   |-DeclStmt 0x55709d02efc0 <line:1071:9, col:12>
| |   | `-VarDecl 0x55709d02ef58 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x55709d02f640 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55709d02f250 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x55709d02f0d8 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x55709d02f0a0 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x55709d02efe8 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x55709d02f040 <col:31> 'const String' lvalue ParmVar 0x55709d02cf98 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55709d02f060 <col:36> 'V' lvalue Var 0x55709d02ef58 'x' 'V'
| |     | |   `-DeclRefExpr 0x55709d02f080 <col:39> 'const ArgContext' lvalue ParmVar 0x55709d02d0b0 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55709d02f230 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55709d02f210 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55709d02f1f8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55709d02f1e0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55709d02f100 <col:17> 'int' lvalue ->status 0x55709d02d328
| |     |     |     `-CXXThisExpr 0x55709d02f0f0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55709d02f1c0 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55709d02f190 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55709d02f140 <col:27> 'int' lvalue ->status 0x55709d02d328
| |     |       |   `-CXXThisExpr 0x55709d02f130 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55709d02f1a8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55709d02f170 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55709d02c010 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55709d02f280 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55709d02f270 <col:20> 'bool' false
| |     `-IfStmt 0x55709d02f618 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55709d02f320 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55709d02f2f0 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55709d02f2a0 <col:18> 'int' lvalue ->status 0x55709d02d328
| |       | |   `-CXXThisExpr 0x55709d02f290 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55709d02f308 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55709d02f2d0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55709d02c010 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55709d02f558 <col:42, line:1079:9>
| |       | |-CallExpr 0x55709d02f500 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x55709d02f350 <line:1076:13> '<bound member function type>' ->range_error 0x55709d02d938
| |       | | | `-CXXThisExpr 0x55709d02f340 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55709d02f380 <col:25> 'const ArgContext' lvalue ParmVar 0x55709d02d0b0 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x55709d02f460 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x55709d02f4d8 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x55709d02f4b8 <col:43> 'V' lvalue Var 0x55709d02ef58 'x' 'V'
| |       | `-ReturnStmt 0x55709d02f548 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55709d02f538 <col:20> 'bool' false
| |       `-CompoundStmt 0x55709d02f5f8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55709d02f5b8 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x55709d02f578 <col:13> 'V' lvalue ParmVar 0x55709d02d038 'result' 'V &'
| |         | `-DeclRefExpr 0x55709d02f598 <col:22> 'V' lvalue Var 0x55709d02ef58 'x' 'V'
| |         `-ReturnStmt 0x55709d02f5e8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55709d02f5d8 <col:20> 'bool' true
| `-CXXMethodDecl 0x55709d057f58 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x55709d057d38 <col:16, col:30> col:30 str 'const String &'
|   |-ParmVarDecl 0x55709d057e08 <col:35, col:38> col:38 result 'unsigned int &'
|   `-ParmVarDecl 0x55709d057e70 <col:46, col:71> col:64 args 'const ArgContext &' cinit
|     `-DeclRefExpr 0x55709d02da48 <col:71> 'const ArgContext' lvalue Var 0x55709d020ac8 'blank_args' 'const ArgContext'
|-FieldDecl 0x55709d02d2c0 <line:1085:5, col:9> col:9 base 'int'
|-FieldDecl 0x55709d02d328 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55709d02d378 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55709d02d630 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55709d02d3b8 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55709d02d438 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55709d02d4b0 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55709d02d530 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55709d02d938 <line:1092:5, line:1093:45> line:1092:10 referenced range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55709d02d700 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55709d02d778 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55709d02d810 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x55709d02fec8 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x55709d02fec8
| `-ParmVarDecl 0x55709d02ffd8 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x55709d030158 <col:7> col:7 implicit constexpr IntArg 'void (IntArg &&)' inline default trivial noexcept-unevaluated 0x55709d030158
| `-ParmVarDecl 0x55709d030268 <col:7> col:7 'IntArg &&'
`-CXXDestructorDecl 0x55709d057ad8 <col:7> col:7 implicit referenced ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55709cd2e3f0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55709cd2e508 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55709cd2e598 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55709cd2e668 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55709cd2e750 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55709cd2e968 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55709cd2e810 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55709cd2eb18 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55709cd2ea20 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55709cd2ec60 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55709cd2ebd0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55709cd2eda8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55709cd2ed18 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55709cd2eef0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55709cd2ee60 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55709cd2efb8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55709cd2f100 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55709cd2f070 <col:28> col:31 'int'
|-CXXMethodDecl 0x55709cd2f1c8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55709cd2f310 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55709cd2f280 <col:28> col:31 'int'
|-CXXMethodDecl 0x55709cd2f488 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55709cd2f3c8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55709cd2f5d0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55709cd2f540 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55709cd2f698 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55709cd2f858 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55709cd2f748 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55709cd2f7c0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55709cd2faa8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55709cd2f918 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55709cd2f990 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55709cd2fb58 <col:86> "" ""
|-CXXMethodDecl 0x55709cd2fdc8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55709cd2fc38 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55709cd2fcb0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55709cd2ff78 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55709cd2fe88 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55709cd30128 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55709cd30030 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55709cd303f8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55709cd301e0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55709cd30258 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55709cd302d0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55709cd306d8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55709cd304c0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55709cd30538 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55709cd305b0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55709cd30790 <col:115> "" ""
|-AccessSpecDecl 0x55709cd30800 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55709cd30838 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55709cd31d50 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55709cd31d50
| `-ParmVarDecl 0x55709cd31e58 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55709cd31ef8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55709cd31ef8
| `-ParmVarDecl 0x55709cd32008 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55709cd67638 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55709cf59430 <col:7>
|-CXXConstructorDecl 0x55709cd67710 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55709cd67710
| `-ParmVarDecl 0x55709cd67828 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55709cd67898 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55709cd67898
| `-ParmVarDecl 0x55709cd679a8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55709cf5be30 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55709cf47fd8 prev 0x55709cf3d1e0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55709cf480d0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55709cf481c0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55709cf482e8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55709cf48468 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55709cf485e8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55709cf48768 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55709cf59598 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55709cf59e08 <col:11>
|-CXXDestructorDecl 0x55709cf59670 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55709cf597a8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55709cf597a8
| `-ParmVarDecl 0x55709cf598b8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55709cf59958 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55709cf59958
| `-ParmVarDecl 0x55709cf59a68 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55709cf5c828 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55709cf5c938 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55709cf5cbb8 <col:11>
|   `-ReturnStmt 0x55709cf5cba8 <col:11>
|     `-UnaryOperator 0x55709cf5cb90 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55709cf5cb80 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55709cf5c9a8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55709cf5c9a8
  `-ParmVarDecl 0x55709cf5cab8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55709cf487d0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55709cf488e8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55709cf48988 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55709cf489f0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55709cf48a58 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55709cf48ac0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55709cf48b20 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55709cf48be0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55709cf48c40 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55709cf48ca0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55709cf594a8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55709cf48988 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55709cf59e18 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55709cf59e70 <col:12>
|-CXXConstructorDecl 0x55709cf59ad8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55709cf59ad8
| `-ParmVarDecl 0x55709cf59be8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55709cf59c88 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55709cf59c88
| `-ParmVarDecl 0x55709cf59d98 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55709cf5bf10 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55709cf368f0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55709cf36a08 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55709cf36a98 <col:16, col:22> col:16 public
|-EnumDecl 0x55709cf36ac0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55709cf36bc0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55709cf36ca0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709cf36ba0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55709cf36b80 <col:21> 'int' 28
| `-EnumConstantDecl 0x55709cf36c50 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55709cf36cb8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55709cf36c30 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55709cf36c10 <col:22> 'int' 64
|-CXXMethodDecl 0x55709cf36ff8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55709cf36ce0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55709cf36d60 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55709cf36dd8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55709cf36e50 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55709cf370b8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55709cf372b8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55709cf37130 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55709cf371a8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55709cf37368 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55709cf374c8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55709cf373d8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55709cf37570 <col:72> warn_unused_result ""
|-TypedefDecl 0x55709cf378d0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55709cf37860 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55709cf37800 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55709cf377c0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55709ca0e310 'void'
|       |-PointerType 0x55709ccb6c90 'unsigned char *'
|       | `-BuiltinType 0x55709ca0e410 'unsigned char'
|       |-TypedefType 0x55709cab3260 'size_t' sugar
|       | |-Typedef 0x55709ca7eaf0 'size_t'
|       | `-BuiltinType 0x55709ca0e470 'unsigned long'
|       `-PointerType 0x55709ca0eb10 'void *'
|         `-BuiltinType 0x55709ca0e310 'void'
|-CXXMethodDecl 0x55709cf37d48 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55709cf37940 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55709cf379b8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55709cf37a50 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55709cf37ad0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55709cf52440 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55709cf52428 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55709cf523f0 <col:58> 'int' 0
| |-ParmVarDecl 0x55709cf37b50 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55709cf52468 <col:76> 'int' 0
| |-ParmVarDecl 0x55709cf37bd0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55709cf52488 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55709cf37e18 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55709cf37e98 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55709cf37f58 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55709cf37ff8 <col:20>
| `-OptimizeNoneAttr 0x55709cf38050 <col:30>
|-CXXMethodDecl 0x55709cf380c8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55709cf38168 <col:20>
| `-OptimizeNoneAttr 0x55709cf381c0 <col:30>
|-CXXMethodDecl 0x55709cf38238 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55709cf382d8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55709cf38388 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55709cf38428 <col:20>
| |-OptimizeNoneAttr 0x55709cf38480 <col:30>
| `-WarnUnusedResultAttr 0x55709cf384a8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55709cf38500 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55709cf385a0 <col:20>
| `-OptimizeNoneAttr 0x55709cf385f8 <col:30>
|-CXXMethodDecl 0x55709cf38648 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55709cf386e8 <col:20>
| `-OptimizeNoneAttr 0x55709cf38740 <col:30>
|-CXXMethodDecl 0x55709cf38788 <line:81:5, col:58> col:49 used length 'uint32_t () const'
| |-NoInlineAttr 0x55709cf38828 <col:20>
| `-OptimizeNoneAttr 0x55709cf38880 <col:30>
|-CXXMethodDecl 0x55709cf388c8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55709cf38988 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55709cf38a50 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55709cf38b18 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55709cf38bd8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55709cf38cf8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55709cf52550 <col:54, line:99:5>
|   `-ReturnStmt 0x55709cf52540 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55709cf52528 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55709cf524f8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55709cf48fd8
|         `-CXXThisExpr 0x55709cf524e8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55709cf38e98 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55709cf38da8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55709cf52600 <col:67, line:103:5>
|   `-BinaryOperator 0x55709cf525e0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55709cf52578 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55709cf48fd8
|     | `-CXXThisExpr 0x55709cf52568 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55709cf525c8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55709cf525a8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55709cf38da8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55709cf38f90 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55709cf52680 <col:33, line:107:5>
|   `-ReturnStmt 0x55709cf52670 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55709cf52658 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55709cf52628 <col:16> 'void *' lvalue ->_destructor_argument 0x55709cf49040
|         `-CXXThisExpr 0x55709cf52618 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55709cf39050 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55709cf52cb0 <col:25, line:113:5>
|   |-ParenExpr 0x55709cf529f8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55709cf529c8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55709cf52738 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55709cf52710 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55709cf526d8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55709cf526a8 <col:24> '<bound member function type>' ->shared 0x55709cf380c8
|   |   |       `-ImplicitCastExpr 0x55709cf526f8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55709cf52698 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55709cf52798 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55709cf52778 <col:42> 'int' 0
|   |   `-CallExpr 0x55709cf52928 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55709cf52910 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55709cf528f0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55709caaa020 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55709cf52968 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55709cf52808 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55709cf52980 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55709cf52830 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55709cf52998 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55709cf52868 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55709cf529b0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55709cf528d8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55709cf528c0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55709cf52888 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55709cf52bf8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55709cf52a28 <col:2> 'unsigned char *' lvalue ->_head 0x55709cf48de0
|   | | `-CXXThisExpr 0x55709cf52a18 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55709cf52be0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55709cf52bc0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55709cf52a68 <col:10> 'unsigned char *' lvalue ->_data 0x55709cf48e48
|   |     | `-CXXThisExpr 0x55709cf52a58 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55709cf52ba8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55709cf52b88 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55709cf52aa8 <col:18> 'unsigned char *' lvalue ->_tail 0x55709cf48eb0
|   |         | `-CXXThisExpr 0x55709cf52a98 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55709cf52b70 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55709cf52b50 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55709cf52ae8 <col:26> 'unsigned char *' lvalue ->_end 0x55709cf48f18
|   |             | `-CXXThisExpr 0x55709cf52ad8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55709cf52b38 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55709cf52b18 <col:33> 'int' 0
|   `-BinaryOperator 0x55709cf52c90 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55709cf52c28 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55709cf48fd8
|     | `-CXXThisExpr 0x55709cf52c18 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55709cf52c78 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55709cf52c58 <col:16> 'int' 0
|-CXXMethodDecl 0x55709cf39190 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55709cf39100 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55709cf39238 <col:20>
| |-OptimizeNoneAttr 0x55709cf39290 <col:30>
| `-WarnUnusedResultAttr 0x55709cf392b8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55709cf39388 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55709cf392f8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55709cf39430 <col:20>
| |-OptimizeNoneAttr 0x55709cf39488 <col:30>
| `-WarnUnusedResultAttr 0x55709cf394b0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55709cf395e8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55709cf394f0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55709cf39690 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55709cf39790 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55709cf39700 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55709cf39838 <col:20>
| `-OptimizeNoneAttr 0x55709cf39890 <col:30>
|-CXXMethodDecl 0x55709cf39958 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55709cf398c8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55709cf39a00 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55709cf39b00 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55709cf39a70 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55709cf39ba8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55709cf39ca8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55709cf39c18 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55709cf39d50 <col:20>
| `-OptimizeNoneAttr 0x55709cf39da8 <col:30>
|-CXXMethodDecl 0x55709cf39f38 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55709cf39de8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55709cf39e60 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55709cf524a8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55709cf39fe8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55709cf3a1e8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55709cf3a060 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55709cf3a0d8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55709cf3a3f8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55709cf3a2a8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55709cf3a320 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55709cf3a608 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55709cf3a4b8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55709cf3a538 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55709cf524b8 <col:39> 'int' 0
|-CXXMethodDecl 0x55709cf3a6d8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55709cf3a7a0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55709cf3a868 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55709cf3a928 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55709cf3a9f0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55709cf3ab38 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55709cf3aaa8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55709cf3ad08 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55709cf3abf8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55709cf3ac70 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55709cf3add8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55709cf3ae98 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55709cf3af38 <col:20>
| `-OptimizeNoneAttr 0x55709cf3af90 <col:30>
|-CXXMethodDecl 0x55709cf3afe0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55709cf3b080 <col:20>
| `-OptimizeNoneAttr 0x55709cf3b0d8 <col:30>
|-CXXMethodDecl 0x55709cf3b128 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55709cf3b1e8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55709cf3b2b0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55709cf3b350 <col:20>
| `-OptimizeNoneAttr 0x55709cf3b3a8 <col:30>
|-CXXMethodDecl 0x55709cf3b4f8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55709cf3b3e8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55709cf3b460 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55709cf3b648 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55709cf3b5b8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55709cf3b720 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55709cf3b7e0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55709cf3b880 <col:20>
| `-OptimizeNoneAttr 0x55709cf3b8d8 <col:30>
|-CXXMethodDecl 0x55709cf3b928 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55709cf3b9c8 <col:20>
| `-OptimizeNoneAttr 0x55709cf3ba20 <col:30>
|-CXXMethodDecl 0x55709cf3ba70 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55709cf3bb38 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55709cf3bbd8 <col:20>
| `-OptimizeNoneAttr 0x55709cf3bc30 <col:30>
|-CXXMethodDecl 0x55709cf3bc78 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55709cf3bd98 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55709cf3bf08 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55709cf3be48 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55709cf3bff8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55709cf3c098 <col:20>
| `-OptimizeNoneAttr 0x55709cf3c0f0 <col:30>
|-CXXMethodDecl 0x55709cf3c140 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55709cf3c200 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55709cf3c438 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55709cf3c2b0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55709cf3c328 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55709cf3c4e8 <col:20>
| `-OptimizeNoneAttr 0x55709cf3c540 <col:30>
|-CXXMethodDecl 0x55709cf3c5e8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55709cf3c688 <col:20>
| `-OptimizeNoneAttr 0x55709cf3c6e0 <col:30>
|-CXXMethodDecl 0x55709cf3c730 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55709cf3c7d0 <col:20>
| `-OptimizeNoneAttr 0x55709cf3c828 <col:30>
|-CXXMethodDecl 0x55709cf3c870 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55709cf3c910 <col:20>
| `-OptimizeNoneAttr 0x55709cf3c968 <col:30>
|-CXXMethodDecl 0x55709cf3ca68 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55709cf3c9a0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55709cf3cb10 <col:20>
| `-OptimizeNoneAttr 0x55709cf3cb68 <col:30>
|-CXXMethodDecl 0x55709cf3cd28 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55709cf3cba0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55709cf3cc18 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55709cf3cdd8 <col:20>
| `-OptimizeNoneAttr 0x55709cf3ce30 <col:30>
|-CXXMethodDecl 0x55709cf3ced8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55709cf3cff8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55709cf3d118 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55709cf3d1b8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55709cf3d1e0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55709cf3d308 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55709cf3d3a8 <col:20>
| `-OptimizeNoneAttr 0x55709cf3d400 <col:30>
|-CXXMethodDecl 0x55709cf3d4a8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55709cf3d548 <col:20>
| `-OptimizeNoneAttr 0x55709cf3d5a0 <col:30>
|-AccessSpecDecl 0x55709cf3d5c8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55709cf3d5f0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55709cf3d6f0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55709cf3d740 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55709cf3d6d0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55709cf3d6b0 <col:14> 'int' 48
|-CXXMethodDecl 0x55709cf3d7a8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55709cf3d848 <col:20>
| `-OptimizeNoneAttr 0x55709cf3d8a0 <col:30>
|-CXXMethodDecl 0x55709cf3d918 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55709cf3d9b8 <col:20>
| `-OptimizeNoneAttr 0x55709cf3da10 <col:30>
|-CXXMethodDecl 0x55709cf3dad8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55709cf3da48 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55709cf3dc78 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55709cf3de18 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55709cf3dd28 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55709cf3dec0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55709cf3dfc0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55709cf3e370 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709cf3dfa0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55709cf3df80 <col:9> 'int' 0
| |-EnumConstantDecl 0x55709cf3e050 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55709cf3e388 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709cf3e030 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55709cf3e010 <col:14> 'int' 1
| |-EnumConstantDecl 0x55709cf3e0e0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55709cf3e3a0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709cf3e0c0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55709cf3e0a0 <col:14> 'int' 2
| |-EnumConstantDecl 0x55709cf3e170 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55709cf3e3b8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709cf3e150 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55709cf3e130 <col:14> 'int' 3
| |-EnumConstantDecl 0x55709cf3e200 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55709cf3e3d0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709cf3e1e0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55709cf3e1c0 <col:13> 'int' 4
| |-EnumConstantDecl 0x55709cf3e290 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55709cf3e3e8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709cf3e270 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55709cf3e250 <col:13> 'int' 5
| `-EnumConstantDecl 0x55709cf3e320 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55709cf3e400 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55709cf3e300 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55709cf3e2e0 <col:14> 'int' 6
|-CXXMethodDecl 0x55709cf3e468 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55709cf3e508 <col:20>
| `-OptimizeNoneAttr 0x55709cf3e560 <col:30>
|-CXXMethodDecl 0x55709cf3e658 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55709cf3e598 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55709cf3e700 <col:20>
| `-OptimizeNoneAttr 0x55709cf3e758 <col:30>
|-CXXMethodDecl 0x55709cf3e7c8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55709cf3e8f0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55709cf3ea68 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55709cf3e9a0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55709cf3eb30 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55709cf3ebf8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55709cf3ed38 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55709cf3eca8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55709cf3ede0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55709cf3eee0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55709cf3f0e0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709cf3eec0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55709cf3eea0 <col:23> 'int' 0
| |-EnumConstantDecl 0x55709cf3ef70 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55709cf3f0f8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709cf3ef50 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55709cf3ef30 <col:45> 'int' 4
| |-EnumConstantDecl 0x55709cf3f000 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55709cf3f110 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709cf3efe0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55709cf3efc0 <col:24> 'int' 0
| `-EnumConstantDecl 0x55709cf3f090 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55709cf3f128 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55709cf3f070 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55709cf3f050 <col:47> 'int' 16
|-CXXMethodDecl 0x55709cf3f188 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55709cf3f2f8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55709cf3f238 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55709cf3f3a0 <col:20>
| `-OptimizeNoneAttr 0x55709cf3f3f8 <col:30>
|-CXXMethodDecl 0x55709cf3f448 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55709cf52dd0 <col:18, col:36>
|   `-ReturnStmt 0x55709cf52dc0 <col:20, col:33>
|     `-ImplicitCastExpr 0x55709cf52da8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55709cf52d88 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55709cf52d58 <col:27> '<bound member function type>' ->xanno 0x55709cf3d4a8
|           `-CXXThisExpr 0x55709cf52d48 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55709cf3f540 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55709cf52ee0 <col:30, col:48>
|   `-ReturnStmt 0x55709cf52ed0 <col:32, col:45>
|     `-ImplicitCastExpr 0x55709cf52eb8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55709cf52e98 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55709cf52e68 <col:39> '<bound member function type>' ->xanno 0x55709cf3d308
|           `-CXXThisExpr 0x55709cf52e58 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55709cf3f628 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55709cf53078 <col:24, col:50>
|   `-ReturnStmt 0x55709cf53068 <col:26, col:47>
|     `-UnaryOperator 0x55709cf53050 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55709cf53030 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55709cf53018 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55709cf52fc8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55709cf482e8
|         |   `-CXXMemberCallExpr 0x55709cf52fa8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55709cf52f78 <col:34> '<bound member function type>' ->xanno 0x55709cf3d4a8
|         |       `-CXXThisExpr 0x55709cf52f68 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55709cf52ff8 <col:46> 'int' 0
|-CXXMethodDecl 0x55709cf3f730 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55709cf53248 <col:36, col:62>
|   `-ReturnStmt 0x55709cf53238 <col:38, col:59>
|     `-UnaryOperator 0x55709cf53220 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55709cf53200 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55709cf531e8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55709cf53160 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55709cf482e8
|         |   `-CXXMemberCallExpr 0x55709cf53140 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55709cf53110 <col:46> '<bound member function type>' ->xanno 0x55709cf3d308
|         |       `-CXXThisExpr 0x55709cf53100 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55709cf53190 <col:58> 'int' 0
|-CXXMethodDecl 0x55709cf3f848 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55709cf533e0 <col:26, col:53>
|   `-ReturnStmt 0x55709cf533d0 <col:28, col:50>
|     `-UnaryOperator 0x55709cf533b8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55709cf53398 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55709cf53380 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55709cf53330 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55709cf485e8
|         |   `-CXXMemberCallExpr 0x55709cf53310 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55709cf532e0 <col:36> '<bound member function type>' ->xanno 0x55709cf3d4a8
|         |       `-CXXThisExpr 0x55709cf532d0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55709cf53360 <col:49> 'int' 0
|-CXXMethodDecl 0x55709cf3f968 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55709cf535b8 <col:38, col:65>
|   `-ReturnStmt 0x55709cf535a8 <col:40, col:62>
|     `-UnaryOperator 0x55709cf53590 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55709cf53570 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55709cf53558 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55709cf534c8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55709cf485e8
|         |   `-CXXMemberCallExpr 0x55709cf534a8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55709cf53478 <col:48> '<bound member function type>' ->xanno 0x55709cf3d308
|         |       `-CXXThisExpr 0x55709cf53468 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55709cf534f8 <col:61> 'int' 0
|-CXXMethodDecl 0x55709cf3fb18 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55709cf3fa20 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55709cf53c88 <col:34, line:463:5>
|   |-ParenExpr 0x55709cf53ad0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55709cf53aa0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55709cf53708 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55709cf536d8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55709cf53628 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55709cf53610 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55709cf535d0 <col:23> 'int' lvalue ParmVar 0x55709cf3fa20 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55709cf535f0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55709cf536b8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55709cf53688 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55709cf53648 <col:33> 'int' lvalue ParmVar 0x55709cf3fa20 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55709cf536a0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55709cf53668 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55709cf3d6f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55709cf53768 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55709cf53748 <col:56> 'int' 0
|   |   `-CallExpr 0x55709cf53a00 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55709cf539e8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55709cf539c8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55709caaa020 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55709cf53a40 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55709cf53858 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55709cf53a58 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55709cf53888 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55709cf53a70 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55709cf538c0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55709cf53a88 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55709cf539b0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55709cf53998 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55709cf53958 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55709cf53c78 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55709cf53c60 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55709cf53c40 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55709cf53c10 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55709cf53bc0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55709cf482e8
|         |   `-CXXMemberCallExpr 0x55709cf53ba0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55709cf53b70 <col:9> '<bound member function type>' ->xanno 0x55709cf3d308
|         |       `-CXXThisExpr 0x55709cf53b60 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55709cf53c28 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55709cf53bf0 <col:21> 'int' lvalue ParmVar 0x55709cf3fa20 'i' 'int'
|-CXXMethodDecl 0x55709cf3fd68 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55709cf3fbd8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55709cf3fc50 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55709cf54318 <col:40, line:472:5>
|   |-ParenExpr 0x55709cf54130 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55709cf54100 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55709cf53de0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55709cf53db0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55709cf53d00 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55709cf53ce8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55709cf53ca8 <col:23> 'int' lvalue ParmVar 0x55709cf3fbd8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55709cf53cc8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55709cf53d90 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55709cf53d60 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55709cf53d20 <col:33> 'int' lvalue ParmVar 0x55709cf3fbd8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55709cf53d78 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55709cf53d40 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55709cf3d6f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55709cf53e40 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55709cf53e20 <col:56> 'int' 0
|   |   `-CallExpr 0x55709cf54060 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55709cf54048 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55709cf54028 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55709caaa020 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55709cf540a0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55709cf53eb0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55709cf540b8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55709cf53ee0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55709cf540d0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55709cf53f18 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55709cf540e8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55709cf54010 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55709cf53ff8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55709cf53fb8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55709cf542f8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55709cf542a0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55709cf54270 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55709cf54220 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55709cf482e8
|     | |   `-CXXMemberCallExpr 0x55709cf54200 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55709cf541d0 <col:2> '<bound member function type>' ->xanno 0x55709cf3d4a8
|     | |       `-CXXThisExpr 0x55709cf541c0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55709cf54288 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55709cf54250 <col:14> 'int' lvalue ParmVar 0x55709cf3fbd8 'i' 'int'
|     `-ImplicitCastExpr 0x55709cf542e0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55709cf542c0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55709cf3fc50 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55709cf3ff28 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55709cf3fe30 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55709cf54a98 <col:36, line:485:5>
|   |-ParenExpr 0x55709cf54800 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55709cf547d0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55709cf544b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55709cf54480 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55709cf54390 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55709cf54378 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55709cf54338 <col:23> 'int' lvalue ParmVar 0x55709cf3fe30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55709cf54358 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55709cf54460 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55709cf54448 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55709cf543b0 <col:33> 'int' lvalue ParmVar 0x55709cf3fe30 'i' 'int'
|   |   |     `-BinaryOperator 0x55709cf54428 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55709cf54410 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55709cf543d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55709cf3d6f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55709cf543f0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55709cf54510 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55709cf544f0 <col:60> 'int' 0
|   |   `-CallExpr 0x55709cf54730 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55709cf54718 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55709cf546f8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55709caaa020 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55709cf54770 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55709cf54580 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55709cf54788 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55709cf545b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55709cf547a0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55709cf545f0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55709cf547b8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55709cf546e0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55709cf546c8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55709cf54688 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55709cf54a88 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55709cf54a70 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55709cf54a58 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55709cf54a28 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55709cf549c8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55709cf54998 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55709cf54910 <col:61, col:70> 'char const[48]' lvalue ->c 0x55709cf481c0
|             |   `-CXXMemberCallExpr 0x55709cf548f0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55709cf548c0 <col:61> '<bound member function type>' ->xanno 0x55709cf3d308
|             |       `-CXXThisExpr 0x55709cf548b0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55709cf549b0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55709cf54940 <col:74> 'int' lvalue ParmVar 0x55709cf3fe30 'i' 'int'
|-CXXMethodDecl 0x55709cf40178 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55709cf3ffe8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55709cf40060 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55709cf551e8 <col:42, line:500:5>
|   |-ParenExpr 0x55709cf54f80 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55709cf54f50 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55709cf54c30 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55709cf54c00 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55709cf54b10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55709cf54af8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55709cf54ab8 <col:23> 'int' lvalue ParmVar 0x55709cf3ffe8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55709cf54ad8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55709cf54be0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55709cf54bc8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55709cf54b30 <col:33> 'int' lvalue ParmVar 0x55709cf3ffe8 'i' 'int'
|   |   |     `-BinaryOperator 0x55709cf54ba8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55709cf54b90 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55709cf54b50 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55709cf3d6f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55709cf54b70 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55709cf54c90 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55709cf54c70 <col:60> 'int' 0
|   |   `-CallExpr 0x55709cf54eb0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55709cf54e98 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55709cf54e78 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55709caaa020 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55709cf54ef0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55709cf54d00 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55709cf54f08 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55709cf54d38 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55709cf54f20 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55709cf54d70 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55709cf54f38 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55709cf54e60 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55709cf54e48 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55709cf54e08 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55709cf551c8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55709cf55178 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55709cf55148 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55709cf550f0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55709cf550c0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55709cf55070 <col:48, col:57> 'char [48]' lvalue ->c 0x55709cf481c0
|     |     |   `-CXXMemberCallExpr 0x55709cf55050 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55709cf55020 <col:48> '<bound member function type>' ->xanno 0x55709cf3d4a8
|     |     |       `-CXXThisExpr 0x55709cf55010 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55709cf550d8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55709cf550a0 <col:61> 'int' lvalue ParmVar 0x55709cf3ffe8 'i' 'int'
|     `-ImplicitCastExpr 0x55709cf551b0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55709cf55190 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55709cf40060 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55709cf40338 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55709cf40240 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55709cf55948 <col:35, line:513:5>
|   |-ParenExpr 0x55709cf55658 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55709cf55628 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55709cf55380 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55709cf55350 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55709cf55260 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55709cf55248 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55709cf55208 <col:23> 'int' lvalue ParmVar 0x55709cf40240 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55709cf55228 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55709cf55330 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55709cf55318 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55709cf55280 <col:33> 'int' lvalue ParmVar 0x55709cf40240 'i' 'int'
|   |   |     `-BinaryOperator 0x55709cf552f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55709cf552e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55709cf552a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55709cf3d6f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55709cf552c0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55709cf553e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55709cf553c0 <col:60> 'int' 0
|   |   `-CallExpr 0x55709cf55588 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55709cf55570 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55709cf55550 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55709caaa020 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55709cf555c8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55709cf55450 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55709cf555e0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55709cf55488 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55709cf555f8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55709cf554c0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55709cf55610 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55709cf55538 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55709cf55520 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55709cf554e0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55709cf55938 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55709cf55920 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55709cf55908 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55709cf558d8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55709cf55850 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55709cf55820 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55709cf557d0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55709cf481c0
|             |   `-CXXMemberCallExpr 0x55709cf557b0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55709cf55780 <col:60> '<bound member function type>' ->xanno 0x55709cf3d308
|             |       `-CXXThisExpr 0x55709cf55770 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55709cf55838 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55709cf55800 <col:73> 'int' lvalue ParmVar 0x55709cf40240 'i' 'int'
|-CXXMethodDecl 0x55709cf40588 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55709cf403f8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55709cf40470 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55709cf56068 <col:41, line:528:5>
|   |-ParenExpr 0x55709cf55df0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55709cf55dc0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55709cf55ae0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55709cf55ab0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55709cf559c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55709cf559a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55709cf55968 <col:23> 'int' lvalue ParmVar 0x55709cf403f8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55709cf55988 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55709cf55a90 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55709cf55a78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55709cf559e0 <col:33> 'int' lvalue ParmVar 0x55709cf403f8 'i' 'int'
|   |   |     `-BinaryOperator 0x55709cf55a58 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55709cf55a40 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55709cf55a00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55709cf3d6f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55709cf55a20 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55709cf55b40 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55709cf55b20 <col:60> 'int' 0
|   |   `-CallExpr 0x55709cf55d20 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55709cf55d08 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55709cf55ce8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55709caaa020 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55709cf55d60 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55709cf55bb0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55709cf55d78 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55709cf55be8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55709cf55d90 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55709cf55c20 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55709cf55da8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55709cf55cd0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55709cf55cb8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55709cf55c78 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55709cf56048 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55709cf55ff8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55709cf55fc8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55709cf55f70 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55709cf55f30 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55709cf55ee0 <col:47, col:56> 'char [48]' lvalue ->c 0x55709cf481c0
|     |     |   `-CXXMemberCallExpr 0x55709cf55ec0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55709cf55e90 <col:47> '<bound member function type>' ->xanno 0x55709cf3d4a8
|     |     |       `-CXXThisExpr 0x55709cf55e80 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55709cf55f48 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55709cf55f10 <col:60> 'int' lvalue ParmVar 0x55709cf403f8 'i' 'int'
|     `-ImplicitCastExpr 0x55709cf56030 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55709cf56010 <col:65> 'int16_t':'short' lvalue ParmVar 0x55709cf40470 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55709cf40748 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55709cf40650 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55709cf56738 <col:36, line:541:5>
|   |-ParenExpr 0x55709cf564d8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55709cf564a8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55709cf56200 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55709cf561d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55709cf560e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55709cf560c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55709cf56088 <col:23> 'int' lvalue ParmVar 0x55709cf40650 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55709cf560a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55709cf561b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55709cf56198 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55709cf56100 <col:33> 'int' lvalue ParmVar 0x55709cf40650 'i' 'int'
|   |   |     `-BinaryOperator 0x55709cf56178 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55709cf56160 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55709cf56120 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55709cf3d6f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55709cf56140 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55709cf56260 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55709cf56240 <col:60> 'int' 0
|   |   `-CallExpr 0x55709cf56408 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55709cf563f0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55709cf563d0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55709caaa020 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55709cf56448 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55709cf562d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55709cf56460 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55709cf56308 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55709cf56478 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55709cf56340 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55709cf56490 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55709cf563b8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55709cf563a0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55709cf56360 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55709cf56728 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55709cf56710 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55709cf566f8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55709cf566c8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55709cf56670 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55709cf56640 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55709cf565f0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55709cf481c0
|             |   `-CXXMemberCallExpr 0x55709cf565d0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55709cf565a0 <col:61> '<bound member function type>' ->xanno 0x55709cf3d308
|             |       `-CXXThisExpr 0x55709cf56590 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55709cf56658 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55709cf56620 <col:74> 'int' lvalue ParmVar 0x55709cf40650 'i' 'int'
|-CXXMethodDecl 0x55709cf40918 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55709cf40808 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55709cf40880 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55709cf409c8 <col:20>
| `-OptimizeNoneAttr 0x55709cf40a20 <col:30>
|-CXXMethodDecl 0x55709cf40b58 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55709cf40a60 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55709cf56e08 <col:35, line:562:5>
|   |-ParenExpr 0x55709cf56ba8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55709cf56b78 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55709cf568d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55709cf568a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55709cf567b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55709cf56798 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55709cf56758 <col:23> 'int' lvalue ParmVar 0x55709cf40a60 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55709cf56778 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55709cf56880 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55709cf56868 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55709cf567d0 <col:33> 'int' lvalue ParmVar 0x55709cf40a60 'i' 'int'
|   |   |     `-BinaryOperator 0x55709cf56848 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55709cf56830 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55709cf567f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55709cf3d6f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55709cf56810 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55709cf56930 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55709cf56910 <col:60> 'int' 0
|   |   `-CallExpr 0x55709cf56ad8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55709cf56ac0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55709cf56aa0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55709caaa020 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55709cf56b18 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55709cf569a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55709cf56b30 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55709cf569d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55709cf56b48 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55709cf56a10 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55709cf56b60 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55709cf56a88 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55709cf56a70 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55709cf56a30 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55709cf56df8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55709cf56de0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55709cf56dc8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55709cf56d98 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55709cf56d40 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55709cf56d10 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55709cf56cc0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55709cf481c0
|             |   `-CXXMemberCallExpr 0x55709cf56ca0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55709cf56c70 <col:60> '<bound member function type>' ->xanno 0x55709cf3d308
|             |       `-CXXThisExpr 0x55709cf56c60 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55709cf56d28 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55709cf56cf0 <col:73> 'int' lvalue ParmVar 0x55709cf40a60 'i' 'int'
|-CXXMethodDecl 0x55709cf40d68 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55709cf40c18 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55709cf40c90 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55709cf574e8 <col:41, line:577:5>
|   |-ParenExpr 0x55709cf57278 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55709cf57248 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55709cf56fa0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55709cf56f70 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55709cf56e80 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55709cf56e68 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55709cf56e28 <col:23> 'int' lvalue ParmVar 0x55709cf40c18 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55709cf56e48 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55709cf56f50 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55709cf56f38 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55709cf56ea0 <col:33> 'int' lvalue ParmVar 0x55709cf40c18 'i' 'int'
|   |   |     `-BinaryOperator 0x55709cf56f18 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55709cf56f00 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55709cf56ec0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55709cf3d6f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55709cf56ee0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55709cf57000 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55709cf56fe0 <col:60> 'int' 0
|   |   `-CallExpr 0x55709cf571a8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55709cf57190 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55709cf57170 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55709caaa020 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55709cf571e8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55709cf57070 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55709cf57200 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55709cf570a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55709cf57218 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55709cf570e0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55709cf57230 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55709cf57158 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55709cf57140 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55709cf57100 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55709cf574c8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55709cf57478 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55709cf57448 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55709cf573e8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55709cf573b8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55709cf57368 <col:47, col:56> 'char [48]' lvalue ->c 0x55709cf481c0
|     |     |   `-CXXMemberCallExpr 0x55709cf57348 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55709cf57318 <col:47> '<bound member function type>' ->xanno 0x55709cf3d4a8
|     |     |       `-CXXThisExpr 0x55709cf57308 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55709cf573d0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55709cf57398 <col:60> 'int' lvalue ParmVar 0x55709cf40c18 'i' 'int'
|     `-ImplicitCastExpr 0x55709cf574b0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55709cf57490 <col:65> 'int32_t':'int' lvalue ParmVar 0x55709cf40c90 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55709cf40f28 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55709cf40e30 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55709cf57c18 <col:36, line:591:5>
|   |-ParenExpr 0x55709cf57958 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55709cf57928 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55709cf57680 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55709cf57650 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55709cf57560 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55709cf57548 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55709cf57508 <col:23> 'int' lvalue ParmVar 0x55709cf40e30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55709cf57528 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55709cf57630 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55709cf57618 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55709cf57580 <col:33> 'int' lvalue ParmVar 0x55709cf40e30 'i' 'int'
|   |   |     `-BinaryOperator 0x55709cf575f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55709cf575e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55709cf575a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55709cf3d6f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55709cf575c0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55709cf576e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55709cf576c0 <col:60> 'int' 0
|   |   `-CallExpr 0x55709cf57888 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55709cf57870 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55709cf57850 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55709caaa020 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55709cf578c8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55709cf57750 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55709cf578e0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55709cf57788 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55709cf578f8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55709cf577c0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55709cf57910 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55709cf57838 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55709cf57820 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55709cf577e0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55709cf57c08 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55709cf57bf0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55709cf57bd8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55709cf57ba8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55709cf57b20 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55709cf57af0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55709cf57aa0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55709cf481c0
|             |   `-CXXMemberCallExpr 0x55709cf57a80 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55709cf57a50 <col:61> '<bound member function type>' ->xanno 0x55709cf3d308
|             |       `-CXXThisExpr 0x55709cf57a40 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55709cf57b08 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55709cf57ad0 <col:74> 'int' lvalue ParmVar 0x55709cf40e30 'i' 'int'
|-CXXMethodDecl 0x55709cf41178 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55709cf40fe8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55709cf41060 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55709cf582f8 <col:42, line:606:5>
|   |-ParenExpr 0x55709cf58088 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55709cf58058 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55709cf57db0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55709cf57d80 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55709cf57c90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55709cf57c78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55709cf57c38 <col:23> 'int' lvalue ParmVar 0x55709cf40fe8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55709cf57c58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55709cf57d60 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55709cf57d48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55709cf57cb0 <col:33> 'int' lvalue ParmVar 0x55709cf40fe8 'i' 'int'
|   |   |     `-BinaryOperator 0x55709cf57d28 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55709cf57d10 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55709cf57cd0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55709cf3d6f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55709cf57cf0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55709cf57e10 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55709cf57df0 <col:60> 'int' 0
|   |   `-CallExpr 0x55709cf57fb8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55709cf57fa0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55709cf57f80 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55709caaa020 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55709cf57ff8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55709cf57e80 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55709cf58010 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55709cf57eb8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55709cf58028 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55709cf57ef0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55709cf58040 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55709cf57f68 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55709cf57f50 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55709cf57f10 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55709cf582d8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55709cf58288 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55709cf58258 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55709cf581f8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55709cf581c8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55709cf58178 <col:48, col:57> 'char [48]' lvalue ->c 0x55709cf481c0
|     |     |   `-CXXMemberCallExpr 0x55709cf58158 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55709cf58128 <col:48> '<bound member function type>' ->xanno 0x55709cf3d4a8
|     |     |       `-CXXThisExpr 0x55709cf58118 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55709cf581e0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55709cf581a8 <col:61> 'int' lvalue ParmVar 0x55709cf40fe8 'i' 'int'
|     `-ImplicitCastExpr 0x55709cf582c0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55709cf582a0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55709cf41060 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55709cf41310 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55709cf41240 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55709cf58b68 <col:33, line:620:5>
|   |-ParenExpr 0x55709cf588e0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55709cf588b0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55709cf58500 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55709cf584d0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55709cf58370 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55709cf58358 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55709cf58318 <col:23> 'int' lvalue ParmVar 0x55709cf41240 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55709cf58338 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55709cf584b0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55709cf58498 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55709cf58390 <col:33> 'int' lvalue ParmVar 0x55709cf41240 'i' 'int'
|   |   |     `-BinaryOperator 0x55709cf58478 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55709cf58460 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55709cf583b0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55709cf3d6f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55709cf58438 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55709cf58420 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55709cf583e8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55709cf58560 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55709cf58540 <col:79> 'int' 0
|   |   `-CallExpr 0x55709cf58810 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55709cf587f8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55709cf587d8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55709caaa020 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55709cf58850 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55709cf58648 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55709cf58868 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55709cf58690 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55709cf58880 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55709cf586c8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55709cf58898 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55709cf587c0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55709cf587a8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55709cf58768 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55709cf58b58 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55709cf58b40 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55709cf58b28 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55709cf58af8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55709cf58a70 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55709cf58a40 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55709cf589f0 <col:67, col:76> 'char const[48]' lvalue ->c 0x55709cf481c0
|             |   `-CXXMemberCallExpr 0x55709cf589d0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55709cf589a0 <col:67> '<bound member function type>' ->xanno 0x55709cf3d308
|             |       `-CXXThisExpr 0x55709cf58990 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55709cf58a58 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55709cf58a20 <col:80> 'int' lvalue ParmVar 0x55709cf41240 'i' 'int'
|-CXXMethodDecl 0x55709cf41528 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55709cf413d0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55709cf41450 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55709cf59390 <col:45, line:635:5>
|   |-ParenExpr 0x55709cf590d8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55709cf590a8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55709cf58d70 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55709cf58d40 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55709cf58be0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55709cf58bc8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55709cf58b88 <col:23> 'int' lvalue ParmVar 0x55709cf413d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55709cf58ba8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55709cf58d20 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55709cf58d08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55709cf58c00 <col:33> 'int' lvalue ParmVar 0x55709cf413d0 'i' 'int'
|   |   |     `-BinaryOperator 0x55709cf58ce8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55709cf58cd0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55709cf58c20 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55709cf3d6f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55709cf58ca8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55709cf58c90 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55709cf58c58 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55709cf58dd0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55709cf58db0 <col:79> 'int' 0
|   |   `-CallExpr 0x55709cf59008 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55709cf58ff0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55709cf58fd0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55709caaa020 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55709cf59048 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55709cf58e40 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55709cf59060 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55709cf58e88 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55709cf59078 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55709cf58ec0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55709cf59090 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55709cf58fb8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55709cf58fa0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55709cf58f58 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55709cf59370 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55709cf592d8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55709cf592a8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55709cf59248 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55709cf59218 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55709cf591c8 <col:54, col:63> 'char [48]' lvalue ->c 0x55709cf481c0
|     |     |   `-CXXMemberCallExpr 0x55709cf591a8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55709cf59178 <col:54> '<bound member function type>' ->xanno 0x55709cf3d4a8
|     |     |       `-CXXThisExpr 0x55709cf59168 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55709cf59230 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55709cf591f8 <col:67> 'int' lvalue ParmVar 0x55709cf413d0 'i' 'int'
|     `-CXXConstCastExpr 0x55709cf59340 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55709cf59328 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55709cf592f0 <col:91> 'const void *' lvalue ParmVar 0x55709cf41450 'x' 'const void *'
|-CXXMethodDecl 0x55709cf415f8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55709cf59418 <col:34, line:640:5>
|   `-ReturnStmt 0x55709cf59408 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55709cf593f0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55709cf593c0 <col:16> 'Packet *' lvalue ->_data_packet 0x55709cf48d78
|         `-CXXThisExpr 0x55709cf593b0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55709cf41738 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55709cf416a8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55709cf524d8 <col:46> 'bool' true
|-CXXMethodDecl 0x55709cf418b8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55709cf417f0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55709cf41960 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55709cf42110 <line:660:22> "" ""
| |-EnumConstantDecl 0x55709cf41a60 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55709cf42180 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709cf41a40 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55709cf41a20 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55709cf36bc0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55709cf41af0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55709cf42198 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709cf41ad0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55709cf41ab0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55709cf36c50 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55709cf41b80 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55709cf421b0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709cf41b60 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55709cf41b40 <col:21> 'int' 0
| |-EnumConstantDecl 0x55709cf41c10 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55709cf421c8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709cf41bf0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55709cf41bd0 <col:19> 'int' 16
| |-EnumConstantDecl 0x55709cf41ca0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55709cf421e0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709cf41c80 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55709cf41c60 <col:21> 'int' 16
| |-EnumConstantDecl 0x55709cf41d30 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55709cf421f8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709cf41d10 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55709cf41cf0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55709cf41dc0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55709cf42210 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709cf41da0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55709cf41d80 <col:19> 'int' EnumConstant 0x55709cf41c10 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55709cf41e50 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55709cf42228 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709cf41e30 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55709cf41e10 <col:19> 'int' EnumConstant 0x55709cf41d30 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55709cf41f20 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55709cf42240 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709cf41f00 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55709cf41ee0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55709cf41ea0 <col:23> 'int' EnumConstant 0x55709cf41e50 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55709cf41ec0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55709cf41ff0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55709cf42258 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55709cf41fd0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55709cf41fb0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55709cf41f70 <col:23> 'int' EnumConstant 0x55709cf41e50 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55709cf41f90 <col:40> 'int' 4
| `-EnumConstantDecl 0x55709cf420c0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55709cf42270 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55709cf420a0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55709cf42080 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55709cf42040 <col:23> 'int' EnumConstant 0x55709cf41e50 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55709cf42060 <col:40> 'int' 8
|-CXXMethodDecl 0x55709cf422b0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55709cf42350 <col:68> "" ""
|-CXXMethodDecl 0x55709cf423e8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55709cf42488 <col:45> "" ""
|-CXXMethodDecl 0x55709cf42520 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55709cf425c0 <col:57> "" ""
|-CXXMethodDecl 0x55709cf42658 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55709cf426f8 <col:45> "" ""
|-CXXMethodDecl 0x55709cf42790 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55709cf42830 <col:57> "" ""
|-CXXMethodDecl 0x55709cf428c0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55709cf42960 <col:51> "" ""
|-CXXMethodDecl 0x55709cf429f0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55709cf42a90 <col:63> "" ""
|-CXXMethodDecl 0x55709cf42b20 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55709cf42bc0 <col:53> "" ""
|-CXXMethodDecl 0x55709cf42c50 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55709cf42cf0 <col:65> "" ""
|-CXXMethodDecl 0x55709cf42e08 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55709cf42d78 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55709cf42eb0 <col:61> "" ""
|-CXXMethodDecl 0x55709cf43048 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55709cf42f38 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55709cf42fb0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55709cf430f8 <col:67> "" ""
|-CXXMethodDecl 0x55709cf43210 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55709cf43180 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55709cf432b8 <col:63> "" ""
|-CXXMethodDecl 0x55709cf43450 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55709cf43340 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55709cf433b8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55709cf43500 <col:69> "" ""
|-CXXMethodDecl 0x55709cf43618 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55709cf43588 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55709cf436c0 <col:63> "" ""
|-CXXMethodDecl 0x55709cf45d98 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55709cf45c88 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55709cf45d00 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55709cf45e48 <col:69> "" ""
|-CXXMethodDecl 0x55709cf45f60 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55709cf45ed0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55709cf46008 <col:62> "" ""
|-CXXMethodDecl 0x55709cf461a0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55709cf46090 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55709cf46108 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55709cf46250 <col:68> "" ""
|-CXXMethodDecl 0x55709cf46368 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55709cf462d8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55709cf46410 <col:63> "" ""
|-CXXMethodDecl 0x55709cf465a8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55709cf46498 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55709cf46510 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55709cf46658 <col:69> "" ""
|-CXXMethodDecl 0x55709cf466e8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55709cf46788 <col:64> "" ""
|-CXXMethodDecl 0x55709cf46818 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55709cf468b8 <col:52> "" ""
|-CXXMethodDecl 0x55709cf46948 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55709cf469e8 <col:67> "" ""
|-CXXMethodDecl 0x55709cf46a78 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55709cf46b18 <col:55> "" ""
|-CXXMethodDecl 0x55709cf46c30 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55709cf46ba0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55709cf46cd8 <col:58> "" ""
|-CXXMethodDecl 0x55709cf46e70 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55709cf46d60 <col:33> col:36 'int'
| |-ParmVarDecl 0x55709cf46dd8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55709cf46f20 <col:62> "" ""
|-CXXMethodDecl 0x55709cf47038 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55709cf46fa8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55709cf470e0 <col:58> "" ""
|-CXXMethodDecl 0x55709cf47278 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55709cf47168 <col:33> col:36 'int'
| |-ParmVarDecl 0x55709cf471e0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55709cf47328 <col:62> "" ""
|-CXXMethodDecl 0x55709cf47440 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55709cf473b0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55709cf474e8 <col:60> "" ""
|-CXXMethodDecl 0x55709cf47680 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55709cf47570 <col:34> col:37 'int'
| |-ParmVarDecl 0x55709cf475e8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55709cf47730 <col:64> "" ""
|-CXXMethodDecl 0x55709cf47848 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55709cf477b8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55709cf478f0 <col:58> "" ""
|-CXXMethodDecl 0x55709cf47a88 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55709cf47978 <col:33> col:36 'int'
| |-ParmVarDecl 0x55709cf479f0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55709cf47b38 <col:62> "" ""
|-CXXMethodDecl 0x55709cf47c50 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55709cf47bc0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55709cf47cf8 <col:59> "" ""
|-CXXMethodDecl 0x55709cf47e90 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55709cf47d80 <col:33> col:36 'int'
| |-ParmVarDecl 0x55709cf47df8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55709cf47f40 <col:63> "" ""
|-AccessSpecDecl 0x55709cf47fb0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55709cf47fd8 prev 0x55709cf3d1e0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55709cf480d0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55709cf481c0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55709cf482e8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55709cf48468 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55709cf485e8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55709cf48768 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55709cf59598 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55709cf59e08 <col:11>
| |-CXXDestructorDecl 0x55709cf59670 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55709cf597a8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55709cf597a8
| | `-ParmVarDecl 0x55709cf598b8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55709cf59958 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55709cf59958
| | `-ParmVarDecl 0x55709cf59a68 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55709cf5c828 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55709cf5c938 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55709cf5cbb8 <col:11>
| |   `-ReturnStmt 0x55709cf5cba8 <col:11>
| |     `-UnaryOperator 0x55709cf5cb90 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55709cf5cb80 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55709cf5c9a8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55709cf5c9a8
|   `-ParmVarDecl 0x55709cf5cab8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55709cf487d0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55709cf488e8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55709cf48988 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55709cf489f0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55709cf48a58 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55709cf48ac0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55709cf48b20 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55709cf48be0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55709cf48c40 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55709cf48ca0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55709cf594a8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55709cf48988 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55709cf59e18 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55709cf59e70 <col:12>
| |-CXXConstructorDecl 0x55709cf59ad8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55709cf59ad8
| | `-ParmVarDecl 0x55709cf59be8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55709cf59c88 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55709cf59c88
| | `-ParmVarDecl 0x55709cf59d98 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55709cf5bf10 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55709cf48d18 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55709cf48d78 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55709cf48de0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55709cf48e48 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55709cf48eb0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55709cf48f18 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55709cf48f78 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55709cf48fd8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55709cf49040 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55709cf490c8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55709cf48d18 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55709cf59440 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55709cf48f78 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55709cf59e80 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55709cf59ee0 <col:21, line:755:5>
|-CXXConstructorDecl 0x55709cf49268 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55709cf491a8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55709cf49360 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55709cf49548 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55709cf49450 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55709cf49818 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55709cf49600 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55709cf49678 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55709cf496f0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55709cf49a38 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55709cf498e8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55709cf49960 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55709cf52018 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55709cf49af8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55709cf49b70 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55709cf49be8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55709cf52170 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55709cf520e0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55709cf522b8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55709cf52228 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55709cf523b0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class String>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class String * _ptr
        24 |   class String _slot
        24 |     struct String::rep_t _r
        24 |       const char * data
        32 |       int length
        40 |       struct String::memo_t * memo
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55709d09c528 <../dummy_inc/click/args.hh:850:5, line:860:5> line:851:12 struct SlotT definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Args::Slot'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55709d09c928 prev 0x55709d09c528 <col:5, col:12> col:12 implicit struct SlotT
|-CXXConstructorDecl 0x55709d09cb20 <line:852:9, line:854:9> line:852:9 used SlotT 'void (String *)'
| |-ParmVarDecl 0x55709d09ca28 <col:15, col:18> col:18 used ptr 'String *'
| |-CXXCtorInitializer 'Args::Slot'
| | `-CXXConstructExpr 0x55709d09e758 <col:9> 'Args::Slot' 'void ()'
| |-CXXCtorInitializer Field 0x55709d09cca0 '_ptr' 'String *'
| | `-ImplicitCastExpr 0x55709d09e718 <line:853:20> 'String *' <LValueToRValue>
| |   `-DeclRefExpr 0x55709d09e6d8 <col:20> 'String *' lvalue ParmVar 0x55709d09ca28 'ptr' 'String *'
| |-CXXCtorInitializer Field 0x55709d09cd00 '_slot' 'String':'String'
| | `-CXXConstructExpr 0x55709d09e7b8 <line:852:9> 'String':'String' 'void ()'
| `-CompoundStmt 0x55709d0208f0 <line:853:25, line:854:9>
|-CXXMethodDecl 0x55709d09cbe0 <line:855:9, line:857:9> line:855:14 used store 'void ()'
| |-Overrides: [ 0x55709cffaad0 Slot::store 'void ()' ]
| `-CompoundStmt 0x55709d09ee78 <col:22, line:857:9>
|   `-CallExpr 0x55709d09ee30 <line:856:13, col:40> 'void'
|     |-ImplicitCastExpr 0x55709d09ee18 <col:13> 'void (*)(String &, const String &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55709d09ed98 <col:13> 'void (String &, const String &)' lvalue Function 0x55709d09ec78 'assign_consume' 'void (String &, const String &)' (FunctionTemplate 0x55709cccf9f8 'assign_consume')
|     |-UnaryOperator 0x55709d09e948 <col:28, col:29> 'String':'String' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x55709d09e930 <col:29> 'String *' <LValueToRValue>
|     |   `-MemberExpr 0x55709d09e900 <col:29> 'String *' lvalue ->_ptr 0x55709d09cca0
|     |     `-CXXThisExpr 0x55709d09e8f0 <col:29> 'Args::SlotT<String> *' implicit this
|     `-ImplicitCastExpr 0x55709d09ee60 <col:35> 'const String':'const String' lvalue <NoOp>
|       `-MemberExpr 0x55709d09e970 <col:35> 'String':'String' lvalue ->_slot 0x55709d09cd00
|         `-CXXThisExpr 0x55709d09e960 <col:35> 'Args::SlotT<String> *' implicit this
|-FieldDecl 0x55709d09cca0 <line:858:9, col:12> col:12 referenced _ptr 'String *'
|-FieldDecl 0x55709d09cd00 <line:859:9, col:11> col:11 referenced _slot 'String':'String'
|-CXXConstructorDecl 0x55709d09cd78 <line:851:12> col:12 implicit SlotT 'void (const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x55709d09cd78
| `-ParmVarDecl 0x55709d09ce88 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXConstructorDecl 0x55709d09cf28 <col:12> col:12 implicit SlotT 'void (Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x55709d09cf28
| `-ParmVarDecl 0x55709d09d038 <col:12> col:12 'Args::SlotT<String> &&'
|-CXXMethodDecl 0x55709d09d0d8 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x55709d09d0d8
| `-ParmVarDecl 0x55709d09d1e8 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXMethodDecl 0x55709d09d258 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x55709d09d258
| `-ParmVarDecl 0x55709d09d368 <col:12> col:12 'Args::SlotT<String> &&'
`-CXXDestructorDecl 0x55709d09e0e0 <col:12> col:12 implicit used ~SlotT 'void () noexcept' inline default
  |-Overrides: [ 0x55709cffa9d0 Slot::~Slot 'void () noexcept' ]
  `-CompoundStmt 0x55709d09e820 <col:12>

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  NonVirtualBaseLLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>
