
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | struct StringAccum::rep_t
         0 |   unsigned char * s
         8 |   int len
        12 |   int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563ae8635198 prev 0x563ae862c938 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563ae8635290 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x563ae8635320 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x563ae8635398 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x563ae8635458 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x563ae8635520 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x563ae8635698 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x563ae86355d0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x563ae8635740 <col:24>
| `-OptimizeNoneAttr 0x563ae8635798 <col:34>
|-CXXMethodDecl 0x563ae86357e0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x563ae8635a98 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x563ae8635890 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x563ae8635908 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x563ae8635988 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x563ae8635b50 <line:229:7, col:14> col:7 private
|-FieldDecl 0x563ae8635b88 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x563ae8635bf0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x563ae8635c78 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x563ae8635f98 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x563ae8635d30 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x563ae8635da8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x563ae8635e20 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x563ae8635ea0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x563ae86360b0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x563ae863da28 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x563ae863da28
| `-ParmVarDecl 0x563ae863db38 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x563ae863dbd8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x563ae863dbd8
| `-ParmVarDecl 0x563ae863dce8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x563ae8723d10 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563ae86281b0 prev 0x563ae8627f30 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x563ae86282a8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x563ae8628338 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x563ae8628398 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x563ae8628488 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x563ae8628588 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x563ae8628758 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x563ae8628608 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x563ae8628680 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x563ae86288e8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x563ae8628820 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x563ae8628990 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x563ae8628ac8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x563ae8628a00 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x563ae8628c68 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x563ae8628ba8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x563ae8628e08 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x563ae8628d48 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x563ae8628eb0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x563ae8628fb0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x563ae8629090 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae8628f90 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x563ae8628f70 <col:26> 'int' 1
| `-EnumConstantDecl 0x563ae8629040 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x563ae86290a8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563ae8629020 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x563ae8629000 <col:44> 'int' 2
|-CXXMethodDecl 0x563ae86291f0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x563ae86290d8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x563ae8629158 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x563ae8629348 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x563ae86292b8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x563ae8629588 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x563ae8629408 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x563ae8629480 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x563ae8629638 <col:20>
| `-OptimizeNoneAttr 0x563ae8629690 <col:30>
|-CXXMethodDecl 0x563ae8629798 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x563ae86296d0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x563ae8629840 <col:20>
| `-OptimizeNoneAttr 0x563ae8629898 <col:30>
|-CXXMethodDecl 0x563ae86298e8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x563ae86299b0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x563ae8629ac8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x563ae8629b50 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x563ae8629bd8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x563ae8629c60 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x563ae8629ce8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x563ae8629d78 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x563ae8629e38 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x563ae8629ec0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x563ae8629f48 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x563ae8629fd0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x563ae862a058 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x563ae862a0e0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x563ae862a170 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x563ae862a230 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x563ae862a2c0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x563ae862a410 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x563ae862a378 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x563ae862a5a0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x563ae862a4d0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x563ae862a850 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x563ae862a658 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x563ae862a6d8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x563ae862a758 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x563ae862a908 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x563ae862aa10 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x563ae862aca0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae862a9f0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x563ae862a9d0 <col:33> 'int' 0
| |-EnumConstantDecl 0x563ae862aaa0 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x563ae862acb8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae862aa80 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x563ae862aa60 <col:32> 'int' 20
| |-EnumConstantDecl 0x563ae862ab30 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x563ae862acd0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae862ab10 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x563ae862aaf0 <col:38> 'int' 90
| |-EnumConstantDecl 0x563ae862abc0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x563ae862ace8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae862aba0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x563ae862ab80 <col:35> 'int' 100
| `-EnumConstantDecl 0x563ae862ac50 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x563ae862ad00 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563ae862ac30 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x563ae862ac10 <col:32> 'int' 2000
|-CXXMethodDecl 0x563ae862ad40 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x563ae862b180 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x563ae862aff0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x563ae862b068 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x563ae862b250 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x563ae862b3d0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x563ae862b300 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x563ae862b5d8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x563ae862b488 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x563ae862b500 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x563ae862b6d8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x563ae862b778 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x563ae862b840 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x563ae862b8d0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x563ae862bb00 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae862b8b0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x563ae862b890 <col:36> 'int' EnumConstant 0x563ae862b840 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x563ae862b920 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x563ae862b970 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x563ae862b9c0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x563ae862ba10 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x563ae862ba60 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x563ae862bab0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x563ae862bbe8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x563ae862bb28 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x563ae862bcb0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x563ae862bd70 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x563ae862be30 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x563ae862bef0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x563ae862c008 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x563ae862c0d0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x563ae862c250 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x563ae862c180 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x563ae862c378 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x563ae862c578 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x563ae862c428 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x563ae862c4a8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x563ae8639ec8 <col:54, line:127:5>
|   |-ParenExpr 0x563ae8639d78 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x563ae8639d48 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x563ae8639a38 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x563ae8639a10 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x563ae86399f8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x563ae86399e0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x563ae86399b0 <col:31> 'Router *' lvalue ->_router 0x563ae8637890
|   |   |         `-CXXThisExpr 0x563ae86399a0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x563ae8639a98 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563ae8639a78 <col:48> 'int' 0
|   |   `-CallExpr 0x563ae8639ca8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x563ae8639c90 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563ae8639c70 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563ae8162880 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563ae8639ce8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563ae8639b08 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x563ae8639d00 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563ae8639b28 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x563ae8639d18 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563ae8639b60 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x563ae8639d30 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563ae8639c58 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563ae8639c40 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563ae8639bf8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x563ae8639e10 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x563ae8639da8 <col:9> 'Router *' lvalue ->_router 0x563ae8637890
|   | | `-CXXThisExpr 0x563ae8639d98 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x563ae8639df8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x563ae8639dd8 <col:19> 'Router *' lvalue ParmVar 0x563ae862c428 'r' 'Router *'
|   `-BinaryOperator 0x563ae8639ea8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x563ae8639e40 <col:9> 'int' lvalue ->_eindex 0x563ae86378f8
|     | `-CXXThisExpr 0x563ae8639e30 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x563ae8639e90 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x563ae8639e70 <col:19> 'int' lvalue ParmVar 0x563ae862c4a8 'eindex' 'int'
|-CXXMethodDecl 0x563ae862c700 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x563ae862c638 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x563ae862c7d0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x563ae862c898 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x563ae862c938 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x563ae862cb88 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x563ae862ca00 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x563ae862ca80 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x563ae862cc38 <col:20>
| `-OptimizeNoneAttr 0x563ae862cc90 <col:30>
|-CXXMethodDecl 0x563ae862cd98 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x563ae862ccd0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x563ae862ce40 <col:20>
| `-OptimizeNoneAttr 0x563ae862ce98 <col:30>
|-CXXMethodDecl 0x563ae862cf68 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x563ae862ced8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x563ae862d010 <col:20>
| `-OptimizeNoneAttr 0x563ae862d068 <col:30>
|-CXXMethodDecl 0x563ae862d1f8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x563ae862d0a0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x563ae862d120 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x563ae862d388 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x563ae862d2c0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x563ae862d4d8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x563ae862d448 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x563ae862d628 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x563ae862d598 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x563ae862d778 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x563ae862d6e8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x563ae862da38 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x563ae862d830 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x563ae862d8b0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x563ae862d958 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x563ae862db10 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x563ae862dbd0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x563ae862dea0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x563ae862dd50 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x563ae862ddc8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x563ae862dfc8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x563ae862e1a0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x563ae862e080 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x563ae862e100 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x563ae862e388 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x563ae862e268 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x563ae862e2e8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x563ae862e6f8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x563ae862e448 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x563ae862e4c0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x563ae862e540 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x563ae86394b0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x563ae8639490 <col:106> 'int' 0
| `-ParmVarDecl 0x563ae862e5b8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x563ae86394e8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x563ae86394c8 <col:126> 'int' 0
|-CXXMethodDecl 0x563ae862ea98 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x563ae862e7c8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x563ae862e860 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x563ae862e8e0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x563ae862e958 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x563ae8639520 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x563ae8639500 <col:114> 'int' 0
|-CXXMethodDecl 0x563ae862ee28 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x563ae862eb70 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x563ae862ebe8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x563ae862ec68 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x563ae8639538 <col:96> 'int' 0
| `-ParmVarDecl 0x563ae862ece0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x563ae8639578 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x563ae8639558 <col:116> 'int' 0
|-CXXMethodDecl 0x563ae862f1a8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x563ae862eef8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x563ae862ef70 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x563ae862eff0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x563ae86395b0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x563ae8639590 <col:109> 'int' 0
| `-ParmVarDecl 0x563ae862f068 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x563ae86395e8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x563ae86395c8 <col:129> 'int' 0
|-CXXMethodDecl 0x563ae862f528 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x563ae862f278 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x563ae862f2f0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x563ae862f370 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x563ae862f3e8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x563ae8639620 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x563ae8639600 <col:117> 'int' 0
|-CXXMethodDecl 0x563ae862f8b8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x563ae862f600 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563ae862f678 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x563ae862f6f8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x563ae8639638 <col:99> 'int' 0
| `-ParmVarDecl 0x563ae862f770 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x563ae8639678 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x563ae8639658 <col:119> 'int' 0
|-CXXMethodDecl 0x563ae862fcd8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x563ae862f988 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x563ae862fa08 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x563ae862fa80 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x563ae862fb00 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x563ae86396b0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x563ae8639690 <col:108> 'int' 0
| `-ParmVarDecl 0x563ae862fb80 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x563ae86396e8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x563ae86396c8 <col:141> 'int' 0
|-CXXMethodDecl 0x563ae86300f8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x563ae862fdb0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x563ae862fe30 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x563ae862fea8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x563ae862ff28 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x563ae862ffa8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x563ae8639700 <col:121> 'int' 0
|-CXXMethodDecl 0x563ae8630528 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x563ae86301d8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x563ae8630258 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x563ae86302d0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x563ae8630350 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x563ae8639720 <col:98> 'int' 0
| `-ParmVarDecl 0x563ae86303d0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x563ae8639740 <col:123> 'int' 0
|-CXXMethodDecl 0x563ae86307f0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x563ae8630600 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x563ae8630680 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x563ae8630700 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x563ae8639760 <col:80> 'int' 0
|-EnumDecl 0x563ae86308a8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x563ae86309b0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x563ae8630c40 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae8630990 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x563ae8630970 <col:42> 'int' 1
| |-EnumConstantDecl 0x563ae8630a40 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x563ae8630c58 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae8630a20 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x563ae8630a00 <col:40> 'int' 2
| |-EnumConstantDecl 0x563ae8630ad0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x563ae8630c70 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae8630ab0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x563ae8630a90 <col:44> 'int' 4
| |-EnumConstantDecl 0x563ae8630b60 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x563ae8630c88 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae8630b40 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x563ae8630b20 <col:36> 'int' 7
| `-EnumConstantDecl 0x563ae8630bf0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x563ae8630ca0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563ae8630bd0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x563ae8630bb0 <col:34> 'int' 6
|-CXXMethodDecl 0x563ae8630f58 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x563ae8630cc8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x563ae8630d68 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x563ae8630de8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x563ae8630e60 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x563ae8639818 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x563ae8639800 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x563ae86397e8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x563ae86397c8 <col:98, col:105> 'String' (CXXTemporary 0x563ae86397c8)
|           `-CXXTemporaryObjectExpr 0x563ae8639790 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x563ae86311f8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x563ae8631028 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x563ae86310a0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x563ae8631118 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x563ae86398c8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x563ae86398b0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x563ae8639898 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x563ae8639878 <col:94, col:101> 'String' (CXXTemporary 0x563ae8639878)
| |         `-CXXTemporaryObjectExpr 0x563ae8639840 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x563ae863a0b0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x563ae863a028 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x563ae8639ff8 <col:9> '<bound member function type>' ->add_task_handlers 0x563ae8630f58
|     | `-CXXThisExpr 0x563ae8639fe8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x563ae863a068 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x563ae8639f68 <col:27> 'Task *' lvalue ParmVar 0x563ae8631028 'task' 'Task *'
|     |-ImplicitCastExpr 0x563ae863a080 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x563ae8639f88 <col:33> 'NotifierSignal *' lvalue ParmVar 0x563ae86310a0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x563ae863a098 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x563ae8639fa8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x563ae8630bf0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x563ae8639fc8 <col:62> 'const String' lvalue ParmVar 0x563ae8631118 'prefix' 'const String &'
|-CXXMethodDecl 0x563ae8631408 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x563ae86312c0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x563ae8631338 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x563ae8639978 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x563ae8639960 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x563ae8639948 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x563ae8639928 <col:70, col:77> 'String' (CXXTemporary 0x563ae8639928)
| |         `-CXXTemporaryObjectExpr 0x563ae86398f0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x563ae863a288 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x563ae863a200 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x563ae863a1d0 <col:9> '<bound member function type>' ->add_task_handlers 0x563ae8630f58
|     | `-CXXThisExpr 0x563ae863a1c0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x563ae863a240 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x563ae863a140 <col:27> 'Task *' lvalue ParmVar 0x563ae86312c0 'task' 'Task *'
|     |-ImplicitCastExpr 0x563ae863a258 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x563ae863a160 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x563ae863a270 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x563ae863a180 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x563ae8630bf0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x563ae863a1a0 <col:57> 'const String' lvalue ParmVar 0x563ae8631338 'prefix' 'const String &'
|-CXXMethodDecl 0x563ae86316e8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x563ae86314d0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563ae8631550 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563ae86315c8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x563ae8631998 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x563ae86317b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563ae8631838 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563ae86318b8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x563ae8631c88 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x563ae8631a68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563ae8631ae8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563ae8631b60 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x563ae8631f38 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x563ae8631d58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563ae8631dd8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563ae8631e58 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x563ae86321e8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x563ae8632008 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563ae8632088 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563ae8632108 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x563ae8632498 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x563ae86322b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563ae8632338 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563ae86323b0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x563ae8632748 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x563ae8632568 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563ae86325e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563ae8632668 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x563ae8632a58 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x563ae8632870 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563ae86328f0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563ae8632970 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x563ae8632d38 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x563ae8632b28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563ae8632ba8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563ae8632c50 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x563ae8633018 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x563ae8632e08 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563ae8632e88 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563ae8632f30 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x563ae8633280 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x563ae86330e8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x563ae8633168 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x563ae86331e0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x563ae8633528 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x563ae8633350 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x563ae86333d0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x563ae8633448 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x563ae86337d8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x563ae86335f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563ae8633678 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563ae86336f8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x563ae8633a88 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x563ae86338a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563ae8633928 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563ae86339a0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x563ae8633d38 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x563ae8633b58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563ae8633bd8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563ae8633c50 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x563ae8634008 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x563ae8633e08 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563ae8633e88 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563ae8633f28 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x563ae8634338 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x563ae86340d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563ae8634158 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x563ae86341d0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x563ae8634248 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x563ae8639990 <col:93> 'bool' false
|-CXXMethodDecl 0x563ae8634520 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x563ae8634408 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x563ae8634488 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x563ae86346f8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x563ae86345e0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x563ae8634660 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x563ae86349d8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x563ae86347b8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x563ae8634830 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x563ae86348b0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x563ae8634928 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x563ae8634cc8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x563ae8634aa8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x563ae8634b20 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x563ae8634ba0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x563ae8634c18 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x563ae8634f00 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x563ae8634da0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x563ae8634e20 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x563ae86350e8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x563ae8634fc8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x563ae8635048 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x563ae8635198 prev 0x563ae862c938 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x563ae8635290 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x563ae8635320 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x563ae8635398 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x563ae8635458 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x563ae8635520 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x563ae8635698 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x563ae86355d0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x563ae8635740 <col:24>
| | `-OptimizeNoneAttr 0x563ae8635798 <col:34>
| |-CXXMethodDecl 0x563ae86357e0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x563ae8635a98 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x563ae8635890 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x563ae8635908 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x563ae8635988 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x563ae8635b50 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x563ae8635b88 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x563ae8635bf0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x563ae8635c78 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x563ae8635f98 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x563ae8635d30 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x563ae8635da8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x563ae8635e20 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x563ae8635ea0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x563ae86360b0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x563ae863da28 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x563ae863da28
| | `-ParmVarDecl 0x563ae863db38 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x563ae863dbd8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x563ae863dbd8
| | `-ParmVarDecl 0x563ae863dce8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x563ae8723d10 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x563ae8636128 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x563ae86361c8 <col:38> "" ""
|-CXXMethodDecl 0x563ae8636258 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x563ae86362f8 <col:44> "" ""
|-AccessSpecDecl 0x563ae8636368 <line:260:3, col:10> col:3 private
|-EnumDecl 0x563ae8636390 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x563ae8636490 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x563ae86364e0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563ae8636470 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x563ae8636450 <col:27> 'int' 4
|-FieldDecl 0x563ae8636598 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x563ae8636748 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x563ae8636800 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x563ae8637890 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x563ae86378f8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x563ae8637a48 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x563ae8637988 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x563ae8637bf8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x563ae8637b08 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x563ae8637dd8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x563ae8637cb8 <col:20> col:23 'int'
| `-ParmVarDecl 0x563ae8637d38 <col:25> col:28 'int'
|-CXXMethodDecl 0x563ae8638080 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x563ae8637ea0 <col:23> col:26 'int'
| |-ParmVarDecl 0x563ae8637f20 <col:28> col:31 'int'
| `-ParmVarDecl 0x563ae8637f98 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x563ae8638138 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x563ae8638200 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x563ae8638250 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x563ae86382a0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x563ae8638480 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x563ae8638330 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x563ae86383a8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x563ae8638728 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x563ae8638548 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x563ae86385c8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x563ae8638640 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x563ae8638948 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x563ae86387f8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x563ae8638878 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x563ae8638c80 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x563ae8638a08 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x563ae8638a88 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x563ae8638b00 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x563ae8638b80 <col:57> col:60 'int'
|-CXXMethodDecl 0x563ae8638e68 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x563ae8638d50 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x563ae8638dd0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x563ae8638fb8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x563ae8638f28 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x563ae8639338 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x563ae8639078 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x563ae86390f8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x563ae8639170 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x563ae86391f0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x563ae8639450 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class SetVLANAnno
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   uint16_t _vlan_tci
           | [sizeof=112, dsize=110, align=8,
           |  nvsize=110, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563ae8640b98 <../elements/ethernet/setvlananno.hh:37:1, line:58:1> line:37:7 class SetVLANAnno definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x563ae8640cf8 <col:1, col:7> col:7 implicit referenced class SetVLANAnno
|-AccessSpecDecl 0x563ae8640d88 <col:38, col:44> col:38 public
|-CXXConstructorDecl 0x563ae8640e10 <line:39:5, col:17> col:5 SetVLANAnno 'void ()'
|-CXXDestructorDecl 0x563ae8640f00 <line:40:5, col:18> col:5 ~SetVLANAnno 'void ()' noexcept-unevaluated 0x563ae8640f00
| `-Overrides: [ 0x563ae8628488 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x563ae8641030 <line:42:5, col:60> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x563ae86298e8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x563ae8641eb8 <col:36, col:60>
|   `-ReturnStmt 0x563ae8641ea8 <col:38, col:45>
|     `-ImplicitCastExpr 0x563ae8641e90 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x563ae8641e68 <col:45> 'const char [12]' lvalue "SetVLANAnno"
|-CXXMethodDecl 0x563ae86410f8 <line:43:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x563ae86299b0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x563ae8641f18 <col:36, col:56>
|   `-ReturnStmt 0x563ae8641f08 <col:38, col:45>
|     `-ImplicitCastExpr 0x563ae8641ef0 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x563ae8641ed0 <col:45> 'const char []' lvalue Var 0x563ae8629c60 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x563ae86413d0 <line:45:5, col:59> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x563ae862b180 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x563ae8641280 <col:19, col:35> col:35 conf 'Vector<String> &'
| `-ParmVarDecl 0x563ae86412f8 <col:41, col:55> col:55 errh 'ErrorHandler *'
|-CXXMethodDecl 0x563ae86414a0 <line:46:5, col:54> col:10 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x563ae862dbd0 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x563ae8641f50 <col:39, col:54>
|   `-ReturnStmt 0x563ae8641f40 <col:41, col:48>
|     `-CXXBoolLiteralExpr 0x563ae8641f30 <col:48> 'bool' true
|-CXXMethodDecl 0x563ae8641560 <line:47:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x563ae862b250 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x563ae86416a0 <line:49:5, col:36> col:13 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x563ae8628ac8 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x563ae8641610 <col:27, col:35> col:35 p 'Packet *'
|-AccessSpecDecl 0x563ae8641748 <line:51:3, col:10> col:3 private
|-FieldDecl 0x563ae8641780 <line:53:5, col:14> col:14 _vlan_tci 'uint16_t':'unsigned short'
|-EnumDecl 0x563ae86417d0 <line:55:5, col:33> col:5
| |-EnumConstantDecl 0x563ae8641890 <col:12> col:12 h_config 'SetVLANAnno::(anonymous enum at ../elements/ethernet/setvlananno.hh:55:5)'
| `-EnumConstantDecl 0x563ae86418e0 <col:22> col:22 h_vlan_tci 'SetVLANAnno::(anonymous enum at ../elements/ethernet/setvlananno.hh:55:5)'
|-CXXMethodDecl 0x563ae8641a58 <line:56:5, col:59> col:19 read_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x563ae8641940 <col:32, col:41> col:41 e 'Element *'
| `-ParmVarDecl 0x563ae86419c0 <col:44, col:50> col:50 user_data 'void *'
|-CXXConstructorDecl 0x563ae8641b38 <line:37:7> col:7 implicit SetVLANAnno 'void (const SetVLANAnno &)' inline default_delete noexcept-unevaluated 0x563ae8641b38
| `-ParmVarDecl 0x563ae8641c48 <col:7> col:7 'const SetVLANAnno &'
`-CXXMethodDecl 0x563ae8641ce8 <col:7> col:7 implicit operator= 'SetVLANAnno &(const SetVLANAnno &)' inline default_delete noexcept-unevaluated 0x563ae8641ce8
  `-ParmVarDecl 0x563ae8641df8 <col:7> col:7 'const SetVLANAnno &'

Layout: <CGRecordLayout
  LLVMType:%class.SetVLANAnno = type { %class.Element.base, i16, [2 x i8] }
  NonVirtualBaseLLVMType:%class.SetVLANAnno.base = type { %class.Element.base, i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563ae83fc050 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x563ae83fc168 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x563ae83fc208 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x563ae83fc268 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x563ae83fc2c8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x563ae83fc378 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563ae83fc680 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563ae83fc798 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x563ae83fc840 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x563ae83fc8a8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x563ae83fc938 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x563ae84029d0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x563ae8402e08 <col:12>
|-CXXConstructorDecl 0x563ae8402ad8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x563ae8402be8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x563ae83fc840 'data' 'const char *'
| | `-ImplicitCastExpr 0x563ae8405390 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x563ae8405360 <col:12> 'const char *const' lvalue .data 0x563ae83fc840
| |     `-DeclRefExpr 0x563ae8405340 <col:12> 'const String::rep_t' lvalue ParmVar 0x563ae8402be8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x563ae83fc8a8 'length' 'int'
| | `-ImplicitCastExpr 0x563ae8405420 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x563ae84053f0 <col:12> 'const int' lvalue .length 0x563ae83fc8a8
| |     `-DeclRefExpr 0x563ae84053d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x563ae8402be8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x563ae83fc938 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x563ae84054b0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x563ae8405480 <col:12> 'String::memo_t *const' lvalue .memo 0x563ae83fc938
| |     `-DeclRefExpr 0x563ae8405460 <col:12> 'const String::rep_t' lvalue ParmVar 0x563ae8402be8 '' 'const String::rep_t &'
| `-CompoundStmt 0x563ae8405508 <col:12>
|-CXXConstructorDecl 0x563ae8402c88 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x563ae8402c88
| `-ParmVarDecl 0x563ae8402d98 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x563ae84082f0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x563ae8413d08 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x563ae8413e18 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x563ae8414330 <col:12>
|   |-BinaryOperator 0x563ae8414148 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x563ae8414100 <col:12> 'const char *' lvalue ->data 0x563ae83fc840
|   | | `-CXXThisExpr 0x563ae84140f0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x563ae8414130 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x563ae84140c0 <col:12> 'const char *const' lvalue .data 0x563ae83fc840
|   |     `-DeclRefExpr 0x563ae84140a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x563ae8413e18 '' 'const String::rep_t &'
|   |-BinaryOperator 0x563ae8414210 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x563ae84141c8 <col:12> 'int' lvalue ->length 0x563ae83fc8a8
|   | | `-CXXThisExpr 0x563ae84141b8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x563ae84141f8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x563ae8414188 <col:12> 'const int' lvalue .length 0x563ae83fc8a8
|   |     `-DeclRefExpr 0x563ae8414168 <col:12> 'const String::rep_t' lvalue ParmVar 0x563ae8413e18 '' 'const String::rep_t &'
|   |-BinaryOperator 0x563ae84142d8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x563ae8414290 <col:12> 'String::memo_t *' lvalue ->memo 0x563ae83fc938
|   | | `-CXXThisExpr 0x563ae8414280 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x563ae84142c0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x563ae8414250 <col:12> 'String::memo_t *const' lvalue .memo 0x563ae83fc938
|   |     `-DeclRefExpr 0x563ae8414230 <col:12> 'const String::rep_t' lvalue ParmVar 0x563ae8413e18 '' 'const String::rep_t &'
|   `-ReturnStmt 0x563ae8414320 <col:12>
|     `-UnaryOperator 0x563ae8414308 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x563ae84142f8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x563ae8413e88 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x563ae8413e88
  `-ParmVarDecl 0x563ae8413f98 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563ae83f35c0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x563ae83f36d8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x563ae83f3768 <col:16, col:22> col:16 public
|-TypedefDecl 0x563ae83f37a8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x563ae80c6dc0 'const char *'
|   `-QualType 0x563ae80c6311 'const char' const
|     `-BuiltinType 0x563ae80c6310 'char'
|-TypedefDecl 0x563ae83f3830 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x563ae83f3800 'String::const_iterator' sugar
|   |-Typedef 0x563ae83f37a8 'const_iterator'
|   `-PointerType 0x563ae80c6dc0 'const char *'
|     `-QualType 0x563ae80c6311 'const char' const
|       `-BuiltinType 0x563ae80c6310 'char'
|-TypedefDecl 0x563ae83f39a0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x563ae83f3910 'int (String::*)() const'
|   |-RecordType 0x563ae83f3650 'String'
|   | `-CXXRecord 0x563ae83f35c0 'String'
|   `-ParenType 0x563ae83f38b0 'int () const' sugar
|     `-FunctionProtoType 0x563ae83c7440 'int () const' const cdecl
|       `-BuiltinType 0x563ae80c6370 'int'
|-TypedefDecl 0x563ae83f3a08 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x563ae821c020 'int64_t' sugar
|   |-Typedef 0x563ae812f2d0 'int64_t'
|   `-TypedefType 0x563ae81084d0 '__int64_t' sugar
|     |-Typedef 0x563ae81080a8 '__int64_t'
|     `-BuiltinType 0x563ae80c6390 'long'
|-TypedefDecl 0x563ae83f3a70 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x563ae821bf40 'uint64_t' sugar
|   |-Typedef 0x563ae812f470 'uint64_t'
|   `-TypedefType 0x563ae8108560 '__uint64_t' sugar
|     |-Typedef 0x563ae8108118 '__uint64_t'
|     `-BuiltinType 0x563ae80c6430 'unsigned long'
|-TypedefDecl 0x563ae83f3b00 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x563ae83f3ad0 'String::intmax_t' sugar
|   |-Typedef 0x563ae83f3a08 'intmax_t'
|   `-TypedefType 0x563ae821c020 'int64_t' sugar
|     |-Typedef 0x563ae812f2d0 'int64_t'
|     `-TypedefType 0x563ae81084d0 '__int64_t' sugar
|       |-Typedef 0x563ae81080a8 '__int64_t'
|       `-BuiltinType 0x563ae80c6390 'long'
|-TypedefDecl 0x563ae83f3b90 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x563ae83f3b60 'String::uintmax_t' sugar
|   |-Typedef 0x563ae83f3a70 'uintmax_t'
|   `-TypedefType 0x563ae821bf40 'uint64_t' sugar
|     |-Typedef 0x563ae812f470 'uint64_t'
|     `-TypedefType 0x563ae8108560 '__uint64_t' sugar
|       |-Typedef 0x563ae8108118 '__uint64_t'
|       `-BuiltinType 0x563ae80c6430 'unsigned long'
|-CXXConstructorDecl 0x563ae83f3c50 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x563ae83f3df8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x563ae83f3d38 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x563ae83f3fa8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x563ae83f3ee8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x563ae83f4100 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x563ae83f4070 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x563ae83f4318 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x563ae83f41c8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x563ae83f4248 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x563ae83f4538 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x563ae83f43e8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x563ae83f4468 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x563ae83f4758 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x563ae83f4608 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x563ae83f4688 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x563ae83f4978 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x563ae83f4828 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x563ae83f48a8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x563ae83f4b08 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x563ae83f4a40 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x563ae83f4c88 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x563ae83f4bc8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x563ae83f4e18 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x563ae83f4d50 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x563ae83f4f70 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x563ae83f4ee0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x563ae83f50c8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x563ae83f5038 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x563ae83f5220 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x563ae83f5190 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x563ae83f53a8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x563ae83f52e8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x563ae83f5538 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x563ae83f5470 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x563ae83f56c8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x563ae83f5600 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x563ae83f5858 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x563ae83f5790 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x563ae83f5950 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x563ae83f5a78 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x563ae83f5bf8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x563ae83f5b30 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x563ae83f5d48 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x563ae83f5cb8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x563ae83f5e00 <col:63> "" ""
|-CXXMethodDecl 0x563ae83f5f48 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x563ae83f5e88 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x563ae83f6158 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x563ae83f6008 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x563ae83f6088 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x563ae83f6378 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x563ae83f6220 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x563ae83f62a0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x563ae83f6658 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x563ae83f6438 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x563ae83f64b8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x563ae84024a0 <col:55> 'int' 10
| `-ParmVarDecl 0x563ae83f6530 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x563ae84024c0 <col:76> 'bool' true
|-CXXMethodDecl 0x563ae83f6938 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x563ae83f6720 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x563ae83f67a0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x563ae84024d0 <col:56> 'int' 10
| `-ParmVarDecl 0x563ae83f6818 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x563ae84024f0 <col:77> 'bool' true
|-CXXMethodDecl 0x563ae83f6a40 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x563ae83f6b08 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x563ae83f6bd0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x563ae83f6c70 <col:20>
| `-OptimizeNoneAttr 0x563ae83f6cc8 <col:30>
|-CXXConversionDecl 0x563ae83f6db8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x563ae83f6e88 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x563ae83f6f48 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x563ae83f7038 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x563ae83f70f8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x563ae83f7278 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x563ae83f71b0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x563ae83f73c8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x563ae83f7338 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x563ae83f74b8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x563ae83f7578 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x563ae83f77c8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x563ae83f7630 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x563ae83f76b0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x563ae83f7a28 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x563ae83f7890 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x563ae83f7910 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x563ae83f7af8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x563ae83f7d08 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x563ae83f7bb0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x563ae83f7c30 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x563ae83f7f28 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x563ae83f7dd0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x563ae83f7e50 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x563ae83f80b8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x563ae83f7ff0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x563ae83f81a8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x563ae83f8318 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x563ae83f8258 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x563ae83f8528 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x563ae83f83d8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x563ae83f8458 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x563ae83f8740 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x563ae83f85e8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x563ae83f8660 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x563ae83f88d0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x563ae83f8800 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x563ae83f8af0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x563ae83f8990 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x563ae83f8a10 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x563ae83f8c40 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x563ae83f8bb0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x563ae83f8e18 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x563ae83f8d00 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x563ae83f8d80 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x563ae83f8f68 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x563ae83f8ed8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x563ae83f9180 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x563ae83f9020 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x563ae83f90a0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x563ae8402500 <col:39> 'int' 0
|-CXXMethodDecl 0x563ae83f93a0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x563ae83f9240 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x563ae83f92c0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x563ae8402520 <col:48> 'int' 0
|-CXXMethodDecl 0x563ae83f9580 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x563ae83f9460 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x563ae83f94e0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x563ae8402540 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x563ae83f9650 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x563ae83f9710 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x563ae83f97d0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x563ae83f9890 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x563ae83f9950 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x563ae83f9af8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x563ae83f9a00 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x563ae83f9c78 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x563ae83f9bb0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x563ae83f9e50 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x563ae83f9d38 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x563ae83f9fc8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x563ae83f9f08 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x563ae83fa110 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x563ae83fa080 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x563ae83fa260 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x563ae83fa1d0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x563ae83fa438 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x563ae83fa320 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x563ae83fa3a0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x563ae83fa618 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x563ae83fa500 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x563ae83fa580 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x563ae83fa768 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x563ae83fa6d8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x563ae83fa978 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x563ae83fa828 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x563ae83fa8a8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x563ae83faad8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x563ae83faa40 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x563ae83fac30 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x563ae83fab98 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x563ae83facd8 <col:57> "" ""
|-CXXMethodDecl 0x563ae83fade8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x563ae83fad58 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x563ae83faf38 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x563ae83faea8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x563ae83fb0b8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x563ae83faff0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x563ae83fb180 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x563ae83fb240 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x563ae83fb300 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x563ae83fb3a0 <col:49> "" ""
|-CXXMethodDecl 0x563ae83fb430 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x563ae83fb4f0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x563ae83fb5e0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x563ae83fb6a8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x563ae83fb768 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x563ae83fb828 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x563ae83fb920 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x563ae83fb9e8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x563ae83fbab0 <line:174:5, col:42> col:31 used empty_data 'const char *()' static inline
|-CXXMethodDecl 0x563ae83fbc88 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x563ae83fbb68 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x563ae83fbbe8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x563ae83fbeb0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x563ae83fbd50 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x563ae83fbdd0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x563ae83fbfc0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x563ae83fc028 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x563ae83fc050 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x563ae83fc168 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x563ae83fc208 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x563ae83fc268 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x563ae83fc2c8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x563ae83fc378 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x563ae83fc3e0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x563ae83fc618 <line:201:2, col:32> col:2 referenced MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x563ae83fc668 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563ae83fc5f8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x563ae83fc508 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x563ae83fc4b0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x563ae83fc4f0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x563ae83fc4d0 <col:32> 'int' 8
|-CXXRecordDecl 0x563ae83fc680 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x563ae83fc798 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x563ae83fc840 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x563ae83fc8a8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x563ae83fc938 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x563ae84029d0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x563ae8402e08 <col:12>
| |-CXXConstructorDecl 0x563ae8402ad8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x563ae8402be8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x563ae83fc840 'data' 'const char *'
| | | `-ImplicitCastExpr 0x563ae8405390 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x563ae8405360 <col:12> 'const char *const' lvalue .data 0x563ae83fc840
| | |     `-DeclRefExpr 0x563ae8405340 <col:12> 'const String::rep_t' lvalue ParmVar 0x563ae8402be8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x563ae83fc8a8 'length' 'int'
| | | `-ImplicitCastExpr 0x563ae8405420 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x563ae84053f0 <col:12> 'const int' lvalue .length 0x563ae83fc8a8
| | |     `-DeclRefExpr 0x563ae84053d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x563ae8402be8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x563ae83fc938 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x563ae84054b0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x563ae8405480 <col:12> 'String::memo_t *const' lvalue .memo 0x563ae83fc938
| | |     `-DeclRefExpr 0x563ae8405460 <col:12> 'const String::rep_t' lvalue ParmVar 0x563ae8402be8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x563ae8405508 <col:12>
| |-CXXConstructorDecl 0x563ae8402c88 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x563ae8402c88
| | `-ParmVarDecl 0x563ae8402d98 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x563ae84082f0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x563ae8413d08 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x563ae8413e18 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x563ae8414330 <col:12>
| |   |-BinaryOperator 0x563ae8414148 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x563ae8414100 <col:12> 'const char *' lvalue ->data 0x563ae83fc840
| |   | | `-CXXThisExpr 0x563ae84140f0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x563ae8414130 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x563ae84140c0 <col:12> 'const char *const' lvalue .data 0x563ae83fc840
| |   |     `-DeclRefExpr 0x563ae84140a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x563ae8413e18 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x563ae8414210 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x563ae84141c8 <col:12> 'int' lvalue ->length 0x563ae83fc8a8
| |   | | `-CXXThisExpr 0x563ae84141b8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x563ae84141f8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x563ae8414188 <col:12> 'const int' lvalue .length 0x563ae83fc8a8
| |   |     `-DeclRefExpr 0x563ae8414168 <col:12> 'const String::rep_t' lvalue ParmVar 0x563ae8413e18 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x563ae84142d8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x563ae8414290 <col:12> 'String::memo_t *' lvalue ->memo 0x563ae83fc938
| |   | | `-CXXThisExpr 0x563ae8414280 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x563ae84142c0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x563ae8414250 <col:12> 'String::memo_t *const' lvalue .memo 0x563ae83fc938
| |   |     `-DeclRefExpr 0x563ae8414230 <col:12> 'const String::rep_t' lvalue ParmVar 0x563ae8413e18 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x563ae8414320 <col:12>
| |     `-UnaryOperator 0x563ae8414308 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x563ae84142f8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x563ae8413e88 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x563ae8413e88
|   `-ParmVarDecl 0x563ae8413f98 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x563ae83fc9b0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x563ae83fcbf8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x563ae83fca18 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x563ae83fca98 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x563ae83fcb10 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x563ae8402990 <col:79, line:261:5>
|   |-BinaryOperator 0x563ae8402608 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x563ae84025a0 <col:2, col:5> 'const char *' lvalue .data 0x563ae83fc840
|   | | `-MemberExpr 0x563ae8402570 <col:2> 'String::rep_t' lvalue ->_r 0x563ae83fc9b0
|   | |   `-CXXThisExpr 0x563ae8402560 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x563ae84025f0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x563ae84025d0 <col:12> 'const char *' lvalue ParmVar 0x563ae83fca18 'data' 'const char *'
|   |-BinaryOperator 0x563ae84026d0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x563ae8402668 <col:2, col:5> 'int' lvalue .length 0x563ae83fc8a8
|   | | `-MemberExpr 0x563ae8402638 <col:2> 'String::rep_t' lvalue ->_r 0x563ae83fc9b0
|   | |   `-CXXThisExpr 0x563ae8402628 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x563ae84026b8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x563ae8402698 <col:14> 'int' lvalue ParmVar 0x563ae83fca98 'length' 'int'
|   `-IfStmt 0x563ae8402978 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x563ae84027f0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x563ae84027d8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x563ae84027b8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x563ae8402798 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x563ae8402730 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x563ae83fc938
|     |       | `-MemberExpr 0x563ae8402700 <col:7> 'String::rep_t' lvalue ->_r 0x563ae83fc9b0
|     |       |   `-CXXThisExpr 0x563ae84026f0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x563ae8402780 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x563ae8402760 <col:17> 'String::memo_t *' lvalue ParmVar 0x563ae83fcb10 'memo' 'String::memo_t *'
|     `-CallExpr 0x563ae8402950 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x563ae8402938 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x563ae8402840 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x563ae83eb628 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x563ae84028a8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x563ae83fc208
|         `-ImplicitCastExpr 0x563ae8402890 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x563ae8402870 <col:27> 'String::memo_t *' lvalue ParmVar 0x563ae83fcb10 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x563ae83fcea8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x563ae83fccc8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x563ae83fcd48 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x563ae83fcdc0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x563ae83fc9b0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x563ae8402e18 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x563ae8402fa8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x563ae8402f10 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x563ae8402e80 <col:2> '<bound member function type>' ->assign_memo 0x563ae83fcbf8
|     | `-ImplicitCastExpr 0x563ae8402f48 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x563ae8402e70 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x563ae8402f60 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x563ae8402eb0 <col:14> 'const char *' lvalue ParmVar 0x563ae83fccc8 'data' 'const char *'
|     |-ImplicitCastExpr 0x563ae8402f78 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x563ae8402ed0 <col:20> 'int' lvalue ParmVar 0x563ae83fcd48 'length' 'int'
|     `-ImplicitCastExpr 0x563ae8402f90 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x563ae8402ef0 <col:28> 'String::memo_t *' lvalue ParmVar 0x563ae83fcdc0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x563ae83fd038 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x563ae83fcf78 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x563ae8403200 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x563ae8403180 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x563ae8402fd0 <col:2> '<bound member function type>' ->assign_memo 0x563ae83fcbf8
|     | `-CXXThisExpr 0x563ae8402fc0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x563ae84031b8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x563ae8403050 <col:14, col:19> 'const char *' lvalue .data 0x563ae83fc840
|     |   `-MemberExpr 0x563ae8403020 <col:14, col:16> 'String::rep_t' lvalue ._r 0x563ae83fc9b0
|     |     `-DeclRefExpr 0x563ae8403000 <col:14> 'const String' lvalue ParmVar 0x563ae83fcf78 'x' 'const String &'
|     |-ImplicitCastExpr 0x563ae84031d0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x563ae84030d0 <col:25, col:30> 'int' lvalue .length 0x563ae83fc8a8
|     |   `-MemberExpr 0x563ae84030a0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x563ae83fc9b0
|     |     `-DeclRefExpr 0x563ae8403080 <col:25> 'const String' lvalue ParmVar 0x563ae83fcf78 'x' 'const String &'
|     `-ImplicitCastExpr 0x563ae84031e8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x563ae8403150 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x563ae83fc938
|         `-MemberExpr 0x563ae8403120 <col:38, col:40> 'String::rep_t' lvalue ._r 0x563ae83fc9b0
|           `-DeclRefExpr 0x563ae8403100 <col:38> 'const String' lvalue ParmVar 0x563ae83fcf78 'x' 'const String &'
|-CXXMethodDecl 0x563ae83fd100 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x563ae8403bc0 <col:31, line:278:5>
|   `-IfStmt 0x563ae8403ba8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x563ae84032a0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x563ae8403288 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x563ae8403258 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x563ae83fc938
|     |     `-MemberExpr 0x563ae8403228 <col:6> 'String::rep_t' lvalue ->_r 0x563ae83fc9b0
|     |       `-CXXThisExpr 0x563ae8403218 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x563ae8403b80 <col:15, line:277:2>
|       |-ParenExpr 0x563ae8403750 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x563ae8403720 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x563ae84033b0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x563ae8403398 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x563ae8403380 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x563ae8403340 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x563ae83fc208
|       |   |       `-ImplicitCastExpr 0x563ae8403328 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x563ae84032f8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x563ae83fc938
|       |   |           `-MemberExpr 0x563ae84032c8 <col:27> 'String::rep_t' lvalue ->_r 0x563ae83fc9b0
|       |   |             `-CXXThisExpr 0x563ae84032b8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x563ae8403410 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x563ae84033f0 <col:54> 'int' 0
|       |   `-CallExpr 0x563ae8403680 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x563ae8403668 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x563ae84035e8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563ae8162880 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x563ae84036c0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x563ae84034f8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x563ae84036d8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x563ae8403528 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x563ae84036f0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x563ae8403560 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x563ae8403708 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x563ae84035d0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x563ae84035b8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x563ae8403580 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x563ae8403aa0 <line:274:6, line:275:22>
|       | |-CallExpr 0x563ae8403960 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x563ae8403948 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x563ae84038c0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x563ae83eca70 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x563ae8403890 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x563ae83fc208
|       | |   `-ImplicitCastExpr 0x563ae8403878 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x563ae8403848 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x563ae83fc938
|       | |       `-MemberExpr 0x563ae8403818 <col:40> 'String::rep_t' lvalue ->_r 0x563ae83fc9b0
|       | |         `-CXXThisExpr 0x563ae8403808 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x563ae8403a60 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x563ae8403a48 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x563ae8403988 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x563ae84018e0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x563ae8403a88 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x563ae84039e8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x563ae83fc938
|       |       `-MemberExpr 0x563ae84039b8 <col:15> 'String::rep_t' lvalue ->_r 0x563ae83fc9b0
|       |         `-CXXThisExpr 0x563ae84039a8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x563ae8403b60 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x563ae8403af8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x563ae83fc938
|         | `-MemberExpr 0x563ae8403ac8 <col:6> 'String::rep_t' lvalue ->_r 0x563ae83fc9b0
|         |   `-CXXThisExpr 0x563ae8403ab8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x563ae8403b48 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x563ae8403b28 <col:16> 'int' 0
|-CXXMethodDecl 0x563ae83fd398 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x563ae83fd1b8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x563ae83fd238 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x563ae83fd2b0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x563ae83fd470 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x563ae83fd6c0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x563ae83fd528 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x563ae83fd5a8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x563ae83fd620 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x563ae83fd8a8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x563ae83fd790 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x563ae83fd810 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x563ae83fd9a8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x563ae8403c98 <col:41, line:286:5>
|   `-ReturnStmt 0x563ae8403c88 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x563ae8403c58 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x563ae8403c20 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x563ae8403c08 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x563ae8403be8 <col:46> 'int' 1
|-CXXMethodDecl 0x563ae83fdc48 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x563ae83fda60 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x563ae83fdae0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x563ae83fdb60 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x563ae84018e0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x563ae83fdd10 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x563ae84019b0 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x563ae8401b80 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x563ae8401a68 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x563ae8401ae8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x563ae8401c40 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x563ae8401d08 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x563ae8401e08 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x563ae8401e80 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x563ae8401ef8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x563ae8401f60 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x563ae8402060 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x563ae84020b0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563ae8402040 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x563ae8402020 <col:22> 'int' 14
|-CXXMethodDecl 0x563ae84022c8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x563ae84020e0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x563ae8402160 <col:38> col:41 'int'
| `-ParmVarDecl 0x563ae84021e0 <col:43> col:46 'int'
|-FriendDecl 0x563ae84023d0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x563ae8402460 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x563ae8670920 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x563ae8670af8 prev 0x563ae8670920 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x563ae8670b88 <col:46, col:52> col:46 public
|-TypedefDecl 0x563ae8670bb0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563ae80c6370 'int'
|-TypedefDecl 0x563ae8672510 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x563ae86724c0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x563ae86724a0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x563ae8670dc8 'type'
|     `-SubstTemplateTypeParmType 0x563ae8670d90 'String' sugar
|       |-TemplateTypeParmType 0x563ae83b6e60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563ae83b6e10 'T'
|       `-RecordType 0x563ae83f3650 'String'
|         `-CXXRecord 0x563ae83f35c0 'String'
|-TypedefDecl 0x563ae86725c8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x563ae8672590 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x563ae8672570 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x563ae8672510 'type'
|     `-ElaboratedType 0x563ae86724c0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x563ae86724a0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x563ae8670dc8 'type'
|         `-SubstTemplateTypeParmType 0x563ae8670d90 'String' sugar
|           |-TemplateTypeParmType 0x563ae83b6e60 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x563ae83b6e10 'T'
|           `-RecordType 0x563ae83f3650 'String'
|             `-CXXRecord 0x563ae83f35c0 'String'
|-CXXMethodDecl 0x563ae8672748 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x563ae8672658 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x563ae8672838 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x563ae8672918 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x563ae8672918
|-CXXMethodDecl 0x563ae8672be8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x563ae8672af0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x563ae8672e28 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x563ae8672ca0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x563ae8672d18 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x563ae8672ff8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x563ae8672ee8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x563ae8672f60 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x563ae8673168 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x563ae8673238 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x563ae8673488 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x563ae86732f8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x563ae8673370 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x563ae86736e8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x563ae8673558 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x563ae86735d0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x563ae86738a8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x563ae86737b8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x563ae8673a68 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x563ae8673970 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x563ae8673b20 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x563ae8673bd0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x563ae8673e08 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x563ae8673c80 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x563ae8673cf8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x563ae86740a8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x563ae8673fb0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x563ae8674170 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x563ae86741c0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x563ae8674210 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x563ae862adf0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x563ae866f388 prev 0x563ae862adf0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x563ae8670890 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x563ae8670840 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x563ae8670820 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x563ae86706d0 'type'
|     `-SubstTemplateTypeParmType 0x563ae8670560 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x563ae838cc10 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x563ae838cbb8 'F'
|       `-RecordType 0x563ae86701c0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x563ae86700e0 'typed_array_memory'
|-FieldDecl 0x563ae8674260 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x563ae86742b0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x563ae86742e8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x563ae866f420 'String' sugar
|   |-TemplateTypeParmType 0x563ae83c4180 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x563ae83c4128 'T'
|   `-RecordType 0x563ae83f3650 'String'
|     `-CXXRecord 0x563ae83f35c0 'String'
|-TypedefDecl 0x563ae8674378 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x563ae8674340 'String &'
|   `-SubstTemplateTypeParmType 0x563ae866f420 'String' sugar
|     |-TemplateTypeParmType 0x563ae83c4180 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563ae83c4128 'T'
|     `-RecordType 0x563ae83f3650 'String'
|       `-CXXRecord 0x563ae83f35c0 'String'
|-TypedefDecl 0x563ae8674408 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x563ae86743d0 'const String &'
|   `-QualType 0x563ae866f421 'const String' const
|     `-SubstTemplateTypeParmType 0x563ae866f420 'String' sugar
|       |-TemplateTypeParmType 0x563ae83c4180 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563ae83c4128 'T'
|       `-RecordType 0x563ae83f3650 'String'
|         `-CXXRecord 0x563ae83f35c0 'String'
|-TypedefDecl 0x563ae8674498 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x563ae8674460 'String *'
|   `-SubstTemplateTypeParmType 0x563ae866f420 'String' sugar
|     |-TemplateTypeParmType 0x563ae83c4180 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563ae83c4128 'T'
|     `-RecordType 0x563ae83f3650 'String'
|       `-CXXRecord 0x563ae83f35c0 'String'
|-TypedefDecl 0x563ae8674528 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x563ae86744f0 'const String *'
|   `-QualType 0x563ae866f421 'const String' const
|     `-SubstTemplateTypeParmType 0x563ae866f420 'String' sugar
|       |-TemplateTypeParmType 0x563ae83c4180 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563ae83c4128 'T'
|       `-RecordType 0x563ae83f3650 'String'
|         `-CXXRecord 0x563ae83f35c0 'String'
|-TypedefDecl 0x563ae8675180 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x563ae8675130 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x563ae8675110 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x563ae8675048 'type'
|     `-LValueReferenceType 0x563ae8675010 'const String &'
|       `-QualType 0x563ae8674db1 'const String' const
|         `-SubstTemplateTypeParmType 0x563ae8674db0 'String' sugar
|           |-TemplateTypeParmType 0x563ae8396b60 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x563ae8396b08 'T'
|           `-RecordType 0x563ae83f3650 'String'
|             `-CXXRecord 0x563ae83f35c0 'String'
|-TypedefDecl 0x563ae86751e8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x563ae86743d0 'const String &'
|   `-QualType 0x563ae866f421 'const String' const
|     `-SubstTemplateTypeParmType 0x563ae866f420 'String' sugar
|       |-TemplateTypeParmType 0x563ae83c4180 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563ae83c4128 'T'
|       `-RecordType 0x563ae83f3650 'String'
|         `-CXXRecord 0x563ae83f35c0 'String'
|-TypedefDecl 0x563ae8675240 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563ae80c6370 'int'
|-TypedefDecl 0x563ae86752a8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x563ae8674460 'String *'
|   `-SubstTemplateTypeParmType 0x563ae866f420 'String' sugar
|     |-TemplateTypeParmType 0x563ae83c4180 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563ae83c4128 'T'
|     `-RecordType 0x563ae83f3650 'String'
|       `-CXXRecord 0x563ae83f35c0 'String'
|-TypedefDecl 0x563ae8675310 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x563ae86744f0 'const String *'
|   `-QualType 0x563ae866f421 'const String' const
|     `-SubstTemplateTypeParmType 0x563ae866f420 'String' sugar
|       |-TemplateTypeParmType 0x563ae83c4180 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563ae83c4128 'T'
|       `-RecordType 0x563ae83f3650 'String'
|         `-CXXRecord 0x563ae83f35c0 'String'
|-EnumDecl 0x563ae8675368 <line:134:5> col:5
| `-EnumConstantDecl 0x563ae8675460 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x563ae8675440 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x563ae83c5808 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x563ae83c57e0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x563ae83c57c0 <col:40> 'int' 1
|-CXXConstructorDecl 0x563ae86754e8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x563ae8675778 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x563ae86755a0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x563ae8675640 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x563ae8675a08 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x563ae86758f0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x563ae8675cc8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x563ae8675bb0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x563ae8675fe0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x563ae8675ec0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x563ae86762f0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x563ae86761d0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x563ae86765e0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x563ae8676428 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x563ae86764a0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x563ae8676708 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x563ae86767b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x563ae8676810 <col:30> Inherited
|-CXXMethodDecl 0x563ae8676858 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x563ae8676908 <col:20> Inherited
| `-OptimizeNoneAttr 0x563ae8676960 <col:30> Inherited
|-CXXMethodDecl 0x563ae8676a28 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x563ae8676ad8 <col:20> Inherited
| `-OptimizeNoneAttr 0x563ae8676b30 <col:30> Inherited
|-CXXMethodDecl 0x563ae8676b78 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x563ae8676c28 <col:20> Inherited
| `-OptimizeNoneAttr 0x563ae8676c80 <col:30> Inherited
|-CXXMethodDecl 0x563ae8676cc8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x563ae8676d78 <col:20> Inherited
| `-OptimizeNoneAttr 0x563ae8676dd0 <col:30> Inherited
|-CXXMethodDecl 0x563ae8676e18 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x563ae8676ec8 <col:20> Inherited
| `-OptimizeNoneAttr 0x563ae8676f20 <col:30> Inherited
|-CXXMethodDecl 0x563ae8676f48 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x563ae8676ff8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x563ae86770a8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x563ae8677268 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x563ae8677158 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x563ae86771d0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x563ae86773b8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x563ae8677328 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x563ae8677568 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x563ae8677470 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x563ae8677620 <col:20>
| `-OptimizeNoneAttr 0x563ae8677678 <col:30>
|-CXXMethodDecl 0x563ae8677798 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x563ae86776a0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x563ae8677850 <col:20>
| `-OptimizeNoneAttr 0x563ae86778a8 <col:30>
|-CXXMethodDecl 0x563ae8677960 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x563ae86778d0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563ae8677aa8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x563ae8677a18 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563ae8677bd8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x563ae8677cd8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x563ae8677da8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x563ae8677e78 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x563ae8677fb8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x563ae8677f28 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563ae8678100 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x563ae8678070 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563ae8678248 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x563ae86781b8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x563ae8678300 <col:48> Inherited "" ""
|-CXXMethodDecl 0x563ae8678400 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x563ae8678370 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x563ae86784b8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x563ae8678578 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x563ae8678678 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x563ae86787f8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x563ae8678738 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x563ae8678fb8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x563ae86788b0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x563ae8678f18 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x563ae8678e18 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x563ae8679098 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x563ae86791e8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x563ae8679158 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x563ae86792a0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x563ae86794e8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x563ae8679360 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x563ae86793d8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x563ae8679678 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x563ae86795b8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x563ae8679888 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x563ae8679740 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x563ae86797b8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x563ae8679948 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x563ae8679ba8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x563ae8679ab0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x563ae8679c78 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x563ae8679c78

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563ae86f84a8 prev 0x563ae85a8a48 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x563ae86f85a0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x563ae86f8630 <col:22, col:28> col:22 public
|-EnumDecl 0x563ae86f8658 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x563ae86f8778 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x563ae86f8758 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x563ae86f8740 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x563ae86f8720 <col:14> 'int' 999
| |-EnumConstantDecl 0x563ae86f8820 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x563ae86f8800 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x563ae86f87e8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x563ae86f87c8 <col:14> 'int' 1
| |-EnumConstantDecl 0x563ae86f88b0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x563ae86f8890 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x563ae86f8870 <col:17> 'int' 0
| |-EnumConstantDecl 0x563ae86f8940 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x563ae86f8920 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x563ae86f8900 <col:13> 'int' 1
| |-EnumConstantDecl 0x563ae86f89d0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x563ae86f89b0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x563ae86f8990 <col:16> 'int' 2
| |-EnumConstantDecl 0x563ae86f8a60 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x563ae86f8a40 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x563ae86f8a20 <col:13> 'int' 3
| |-EnumConstantDecl 0x563ae86f8af0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x563ae86f8ad0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x563ae86f8ab0 <col:15> 'int' 4
| |-EnumConstantDecl 0x563ae86f8b80 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x563ae86f8b60 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x563ae86f8b40 <col:14> 'int' 5
| |-EnumConstantDecl 0x563ae86f8c10 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x563ae86f8bf0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x563ae86f8bd0 <col:12> 'int' 6
| `-EnumConstantDecl 0x563ae86f8ca0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x563ae86f8c80 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x563ae86f8c60 <col:13> 'int' 7
|-VarDecl 0x563ae86f8d10 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x563ae86f8d98 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x563ae86f8e20 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x563ae86f8ea8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x563ae86f8f30 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x563ae86f8fb8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x563ae86f9040 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x563ae86f90c8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x563ae86f9150 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x563ae86f91d8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x563ae86f9260 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x563ae86f9360 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x563ae86fe688 '_nerrors' 'int'
| | `-IntegerLiteral 0x563ae86fee18 <line:128:13> 'int' 0
| `-CompoundStmt 0x563ae86fee88 <col:16, line:129:5>
|-CXXDestructorDecl 0x563ae86f9450 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x563ae86fee98 <col:29, line:132:5>
|-CXXMethodDecl 0x563ae86f9608 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x563ae86f9540 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x563ae86f96d0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x563ae86f97b8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x563ae86feef0 <col:44, line:161:5>
|   `-ReturnStmt 0x563ae86feee0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x563ae86feec8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x563ae86feea8 <col:9> 'ErrorHandler *' lvalue Var 0x563ae86fe6e8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x563ae86f98f8 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x563ae86f9868 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x563ae86f99c0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x563ae86fef50 <col:43, line:173:5>
|   `-ReturnStmt 0x563ae86fef40 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x563ae86fef28 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x563ae86fef08 <col:9> 'ErrorHandler *' lvalue Var 0x563ae86fe760 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x563ae86f9a78 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x563ae86f9af8 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x563ae86f9c08 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x563ae86f9b78 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x563ae86f9d58 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x563ae86f9cc8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x563ae86f9eb0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x563ae86f9e18 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x563ae86fa008 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x563ae86f9f70 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x563ae86fa160 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x563ae86fa0c8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x563ae86fa370 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x563ae86fa218 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x563ae86fa298 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x563ae86fa548 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x563ae86fa430 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x563ae86fa4b0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x563ae86fa768 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x563ae86fa608 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x563ae86fa688 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x563ae86fa948 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x563ae86fa828 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x563ae86fa8a8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x563ae86fab28 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x563ae86faa08 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x563ae86faa88 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x563ae86facb0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x563ae86fabe8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x563ae86fae80 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x563ae86fad68 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x563ae86fade0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x563ae86ff1a8 <col:57, line:234:5>
|   `-ReturnStmt 0x563ae86ff198 <line:233:2, col:41>
|     `-ExprWithCleanups 0x563ae86ff180 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x563ae86ff128 <col:9, col:41> 'int'
|         |-MemberExpr 0x563ae86ff0f8 <col:9> '<bound member function type>' ->xmessage 0x563ae86facb0
|         | `-CXXThisExpr 0x563ae86ff0e8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x563ae86ff168 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x563ae86ff150 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x563ae86ff0c8 <col:18, col:40> 'String' (CXXTemporary 0x563ae86ff0c8)
|               `-CallExpr 0x563ae86ff090 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x563ae86ff078 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x563ae86feff0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x563ae86fce78 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x563ae86ff010 <col:31> 'const String' lvalue ParmVar 0x563ae86fade0 'str' 'const String &'
|                 `-DeclRefExpr 0x563ae86ff030 <col:36> 'const String' lvalue ParmVar 0x563ae86fad68 'anno' 'const String &'
|-CXXMethodDecl 0x563ae86fb160 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x563ae86faf40 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x563ae86fafc0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x563ae86fb038 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x563ae86ff438 <col:68, line:243:5>
|   `-ReturnStmt 0x563ae86ff428 <line:242:2, col:41>
|     `-ExprWithCleanups 0x563ae86ff410 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x563ae86ff3b0 <col:9, col:41> 'int'
|         |-MemberExpr 0x563ae86ff380 <col:9> '<bound member function type>' ->xmessage 0x563ae86fae80
|         | `-CXXThisExpr 0x563ae86ff370 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x563ae86ff248 <col:18> 'const String' lvalue ParmVar 0x563ae86faf40 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x563ae86ff3f8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x563ae86ff3e0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x563ae86ff350 <col:24, col:40> 'String' (CXXTemporary 0x563ae86ff350)
|               `-CXXMemberCallExpr 0x563ae86ff2e8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x563ae86ff278 <col:24> '<bound member function type>' ->vformat 0x563ae86fc340
|                 | `-CXXThisExpr 0x563ae86ff268 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x563ae86ff318 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x563ae86ff2a8 <col:32> 'const char *' lvalue ParmVar 0x563ae86fafc0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x563ae86ff330 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x563ae86ff2c8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x563ae86fb038 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x563ae86fb400 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x563ae86fb228 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x563ae86fb2a0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x563ae86fb318 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x563ae86ff778 <col:23, line:254:5>
|   `-ReturnStmt 0x563ae86ff768 <line:253:2, col:71>
|     `-ExprWithCleanups 0x563ae86ff750 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x563ae86ff6f0 <col:9, col:71> 'int'
|         |-MemberExpr 0x563ae86ff6c0 <col:9> '<bound member function type>' ->xmessage 0x563ae86fae80
|         | `-CXXThisExpr 0x563ae86ff6b0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x563ae86ff738 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x563ae86ff720 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x563ae86ff670 <col:18, col:65> 'String' (CXXTemporary 0x563ae86ff670)
|         |     `-CallExpr 0x563ae86ff608 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x563ae86ff5f0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x563ae86ff4d8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x563ae86fce78 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x563ae86ff4f8 <col:31> 'const String' lvalue ParmVar 0x563ae86fb2a0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x563ae86ff650 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x563ae86ff638 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x563ae86ff5d0 <col:37, col:64> 'String' (CXXTemporary 0x563ae86ff5d0)
|         |             `-CallExpr 0x563ae86ff5a0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x563ae86ff588 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x563ae86ff518 <col:37> 'String (const String &)' lvalue CXXMethod 0x563ae86fd4c8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x563ae86ff538 <col:56> 'const String' lvalue ParmVar 0x563ae86fb228 'landmark' 'const String &'
|         `-DeclRefExpr 0x563ae86ff690 <col:68> 'const String' lvalue ParmVar 0x563ae86fb318 'str' 'const String &'
|-CXXMethodDecl 0x563ae86fb780 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x563ae86fb4c8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x563ae86fb540 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x563ae86fb5c0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x563ae86fb638 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x563ae86ffa30 <col:34, line:267:5>
|   `-ReturnStmt 0x563ae86ffa20 <line:266:2, col:51>
|     `-ExprWithCleanups 0x563ae86ffa08 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x563ae86ff9a0 <col:9, col:51> 'int'
|         |-MemberExpr 0x563ae86ff970 <col:9> '<bound member function type>' ->xmessage 0x563ae86fb400
|         | `-CXXThisExpr 0x563ae86ff960 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x563ae86ff818 <col:18> 'const String' lvalue ParmVar 0x563ae86fb4c8 'landmark' 'const String &'
|         |-DeclRefExpr 0x563ae86ff838 <col:28> 'const String' lvalue ParmVar 0x563ae86fb540 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x563ae86ff9f0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x563ae86ff9d8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x563ae86ff940 <col:34, col:50> 'String' (CXXTemporary 0x563ae86ff940)
|               `-CXXMemberCallExpr 0x563ae86ff8d8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x563ae86ff868 <col:34> '<bound member function type>' ->vformat 0x563ae86fc340
|                 | `-CXXThisExpr 0x563ae86ff858 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x563ae86ff908 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x563ae86ff898 <col:42> 'const char *' lvalue ParmVar 0x563ae86fb5c0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x563ae86ff920 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x563ae86ff8b8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x563ae86fb638 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x563ae86fb890 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x563ae86ffab0 <col:25, line:288:5>
|   `-ReturnStmt 0x563ae86ffaa0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x563ae86ffa88 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x563ae86ffa58 <col:9> 'const int' lvalue ->_nerrors 0x563ae86fe688
|         `-CXXThisExpr 0x563ae86ffa48 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x563ae86fbaa0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x563ae86fb948 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x563ae86fb9c8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x563ae86fbd88 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x563ae86fbb68 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x563ae86fbbe8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x563ae86fbc60 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x563ae86fbf20 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x563ae86fbe58 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x563ae86fc168 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x563ae86fbfe0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x563ae86fc058 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x563ae86ffd10 <col:58, line:357:5>
|   `-ReturnStmt 0x563ae86ffd00 <line:356:2, col:29>
|     `-ExprWithCleanups 0x563ae86ffce8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x563ae86ffcb8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x563ae86ffca0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x563ae86ffc80 <col:9, col:29> 'String' (CXXTemporary 0x563ae86ffc80)
|             `-CallExpr 0x563ae86ffc10 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x563ae86ffbf8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x563ae86ffb78 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x563ae86fbd88 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x563ae86ffb18 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x563ae86ffc48 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x563ae86ffb38 <col:21> 'const char *' lvalue ParmVar 0x563ae86fbfe0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x563ae86ffc60 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x563ae86ffb58 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x563ae86fc058 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x563ae86fc340 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x563ae86fc230 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x563ae86fc2a8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x563ae86fc498 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x563ae86fc408 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x563ae86fc5e0 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x563ae86fc550 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x563ae86fc880 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x563ae86fc698 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x563ae86fc718 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x563ae86fc790 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x563ae86fc9e0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x563ae86fc950 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x563ae86ffe28 <col:37, line:441:5>
|   `-IfStmt 0x563ae86ffe10 <line:439:2, line:440:8>
|     |-BinaryOperator 0x563ae86ffd98 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x563ae86ffd68 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x563ae86ffd28 <col:6> 'int' lvalue ParmVar 0x563ae86fc950 'level' 'int'
|     | `-ImplicitCastExpr 0x563ae86ffd80 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x563ae86ffd48 <col:15> 'ErrorHandler::Level' EnumConstant 0x563ae86f8a60 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x563ae86ffdf8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x563ae86ffdc8 <col:8> 'int' lvalue ->_nerrors 0x563ae86fe688
|         `-CXXThisExpr 0x563ae86ffdb8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x563ae86fcaa8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x563ae86ffec0 <col:26, line:448:5>
|   `-BinaryOperator 0x563ae86ffea0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x563ae86ffe50 <col:2> 'int' lvalue ->_nerrors 0x563ae86fe688
|     | `-CXXThisExpr 0x563ae86ffe40 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x563ae86ffe80 <col:13> 'int' 0
|-CXXMethodDecl 0x563ae86fcc70 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x563ae86fcb60 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x563ae86fcbd8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x563ae86fce78 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x563ae86fcd30 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x563ae86fcda8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x563ae86fd128 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x563ae86fcf38 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x563ae86fcfb8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x563ae86fd038 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x563ae86fd1e0 <col:59> 0 0
|-CXXMethodDecl 0x563ae86fd378 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x563ae86fd258 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x563ae86fd2d8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x563ae8700530 <col:70, line:534:5>
|   |-DeclStmt 0x563ae8700030 <line:528:2, col:20>
|   | |-VarDecl 0x563ae86ffee8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x563ae86fff50 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x563ae86fff88 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x563ae86ffff0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x563ae8700100 <line:529:2, col:23>
|   | `-VarDecl 0x563ae8700060 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x563ae87000e8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x563ae87000c8 <col:18> 'const char *' lvalue ParmVar 0x563ae86fd258 'begin' 'const char *'
|   |-DoStmt 0x563ae87004c8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x563ae87003f8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x563ae87003e0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x563ae87003c0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x563ae8700118 <col:6> 'const char *' lvalue Var 0x563ae8700060 'x' 'const char *'
|   | |     `-CallExpr 0x563ae8700310 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x563ae87002f8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x563ae87002b0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x563ae86feb60 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x563ae8700378 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x563ae8700360 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x563ae87001d0 <col:20, col:27> 'String' (CXXTemporary 0x563ae87001d0)
|   | |       |     `-CXXTemporaryObjectExpr 0x563ae8700198 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x563ae8700390 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x563ae87001f0 <col:30> 'const char *' lvalue Var 0x563ae8700060 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x563ae87003a8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x563ae8700210 <col:33> 'const char *' lvalue ParmVar 0x563ae86fd2d8 'end' 'const char *'
|   | |       |-UnaryOperator 0x563ae8700250 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x563ae8700230 <col:39> 'String' lvalue Var 0x563ae86ffee8 'name' 'String'
|   | |       |-UnaryOperator 0x563ae8700288 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x563ae8700268 <col:46> 'String' lvalue Var 0x563ae86fff88 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x563ae87002a0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x563ae87004b0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x563ae8700498 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x563ae8700478 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x563ae8700448 <col:11> '<bound member function type>' .operator int (String::*)() const 0x563ae83f6db8
|   |         `-ImplicitCastExpr 0x563ae8700430 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x563ae8700410 <col:11> 'String' lvalue Var 0x563ae86ffee8 'name' 'String'
|   `-ReturnStmt 0x563ae8700520 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x563ae8700508 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x563ae87004e8 <col:9> 'const char *' lvalue Var 0x563ae8700060 'x' 'const char *'
|-CXXMethodDecl 0x563ae86fd4c8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x563ae86fd438 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x563ae8700b38 <col:55, line:550:5>
|   `-IfStmt 0x563ae8700b10 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x563ae8700770 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x563ae8700758 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x563ae8700740 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x563ae8700720 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x563ae87006f0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x563ae83f6db8
|     | |       `-DeclRefExpr 0x563ae8700590 <col:6> 'const String' lvalue ParmVar 0x563ae86fd438 'x' 'const String &'
|     | `-BinaryOperator 0x563ae87006d0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x563ae87006a0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x563ae8700650 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x563ae8700638 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x563ae87005f0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x563ae84105f0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x563ae87005b0 <col:11> 'const String' lvalue ParmVar 0x563ae86fd438 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x563ae87005d0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x563ae87006b8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x563ae8700688 <col:19> 'char' 123
|     |-ReturnStmt 0x563ae87007e0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x563ae87007b0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x563ae8700790 <col:13> 'const String' lvalue ParmVar 0x563ae86fd438 'x' 'const String &'
|     `-IfStmt 0x563ae8700ae8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x563ae8700878 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x563ae8700860 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x563ae8700840 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x563ae8700810 <col:11> '<bound member function type>' .operator int (String::*)() const 0x563ae83f6db8
|       |       `-DeclRefExpr 0x563ae87007f0 <col:11> 'const String' lvalue ParmVar 0x563ae86fd438 'x' 'const String &'
|       |-ReturnStmt 0x563ae8700a00 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x563ae87009e8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x563ae87009b8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x563ae87009a0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x563ae8700980 <col:13, col:29> 'String' (CXXTemporary 0x563ae8700980)
|       |         `-CallExpr 0x563ae8700930 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x563ae8700918 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x563ae8700890 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x563ae86fcc70 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x563ae8700960 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x563ae87008b0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x563ae87008d0 <col:28> 'const String' lvalue ParmVar 0x563ae86fd438 'x' 'const String &'
|       `-ReturnStmt 0x563ae8700ad8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x563ae8700ac0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x563ae8700a90 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x563ae8700a78 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x563ae8700a58 <col:13, col:20> 'String' (CXXTemporary 0x563ae8700a58)
|                 `-CXXTemporaryObjectExpr 0x563ae8700a20 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x563ae86fd690 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x563ae86fd580 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x563ae86fd5f8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x563ae86fee08 <col:71> 'bool' false
|-CXXRecordDecl 0x563ae86fd740 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x563ae86fda38 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x563ae86fd9d0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x563ae86fd970 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x563ae86fd930 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x563ae83f3650 'String'
|       | `-CXXRecord 0x563ae83f35c0 'String'
|       |-BuiltinType 0x563ae80c6370 'int'
|       `-DecayedType 0x563ae85a9a90 '__va_list_tag *' sugar
|         |-TypedefType 0x563ae85a9a60 'va_list' sugar
|         | |-Typedef 0x563ae82e4700 'va_list'
|         | `-TypedefType 0x563ae82e46b0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x563ae821c2d8 '__gnuc_va_list'
|         |   `-TypedefType 0x563ae821c240 '__builtin_va_list' sugar
|         |     |-Typedef 0x563ae8107bd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x563ae8107b80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x563ae80c70c0 '__va_list_tag'
|         |         `-CXXRecord 0x563ae80c7028 '__va_list_tag'
|         `-PointerType 0x563ae82e9fa0 '__va_list_tag *'
|           `-RecordType 0x563ae80c70c0 '__va_list_tag'
|             `-CXXRecord 0x563ae80c7028 '__va_list_tag'
|-EnumDecl 0x563ae86fda90 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x563ae86fdb90 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x563ae86fe130 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae86fdb70 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x563ae86fdb50 <col:16> 'int' 1
| |-EnumConstantDecl 0x563ae86fdc20 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x563ae86fe148 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae86fdc00 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x563ae86fdbe0 <col:21> 'int' 2
| |-EnumConstantDecl 0x563ae86fdcb0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x563ae86fe160 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae86fdc90 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x563ae86fdc70 <col:22> 'int' 4
| |-EnumConstantDecl 0x563ae86fdd80 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x563ae86fe178 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae86fdd20 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x563ae86fdd00 <col:17> 'int' 8
| |-EnumConstantDecl 0x563ae86fde10 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x563ae86fe190 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae86fddf0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x563ae86fddd0 <col:22> 'int' 16
| |-EnumConstantDecl 0x563ae86fdea0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x563ae86fe1a8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae86fde80 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x563ae86fde60 <col:19> 'int' 32
| |-EnumConstantDecl 0x563ae86fdf30 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x563ae86fe1c0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae86fdf10 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x563ae86fdef0 <col:17> 'int' 64
| |-EnumConstantDecl 0x563ae86fdfc0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x563ae86fe1d8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae86fdfa0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x563ae86fdf80 <col:14> 'int' 128
| |-EnumConstantDecl 0x563ae86fe050 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x563ae86fe1f0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae86fe030 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x563ae86fe010 <col:16> 'int' 256
| `-EnumConstantDecl 0x563ae86fe0e0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x563ae86fe208 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563ae86fe0c0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x563ae86fe0a0 <col:12> 'int' 1024
|-CXXMethodDecl 0x563ae86fe418 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x563ae86fe230 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x563ae86fe2d0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x563ae86fe5a0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x563ae86fe4d8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x563ae86fe648 <line:580:3, col:10> col:3 private
|-FieldDecl 0x563ae86fe688 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x563ae86fe6e8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x563ae86fe760 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x563ae86feb60 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x563ae86fe7d8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x563ae86fe858 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x563ae86fe8d8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x563ae86fe950 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x563ae86fe9c8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x563ae86fea40 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x563ae86fec88 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x563ae86fec88
| `-ParmVarDecl 0x563ae86fed98 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x563ae8700e98 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x563ae8700e98
  `-ParmVarDecl 0x563ae8700fa8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563ae85a8ad8 prev 0x563ae85ed898 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563ae85a8bd0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x563ae85a8c60 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x563ae85a8d98 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x563ae85a8c98 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x563ae85aa1c0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x563ae85aa1a0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x563ae85a9d38 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x563ae85aa250 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x563ae85aa210 <col:17> 'ErrorHandler *' lvalue ParmVar 0x563ae85a8c98 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x563ae85a9da0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x563ae85aa2d0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x563ae85aa290 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x563ae85a9e00 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x563ae85aa310 <col:54> 'bool' false
| `-CompoundStmt 0x563ae85aa418 <col:61, line:38:5>
|   `-BinaryOperator 0x563ae85aa3f8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x563ae85aa390 <col:9> 'const Element *' lvalue ->_context 0x563ae85a9cd8
|     | `-CXXThisExpr 0x563ae85aa380 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x563ae85aa3e0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x563ae85aa3c0 <col:20> 'int' 0
|-CXXConstructorDecl 0x563ae85a8fa8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x563ae85a8e58 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x563ae85a8ed0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x563ae85aa1f8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x563ae85aa1d8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x563ae85a9cd8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x563ae85aa470 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x563ae85aa430 <col:20> 'const Element *' lvalue ParmVar 0x563ae85a8e58 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x563ae85a9d38 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x563ae85aa4f0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x563ae85aa4b0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x563ae85a8ed0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x563ae85a9da0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x563ae85aa570 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x563ae85aa530 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x563ae85a9e00 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x563ae85aa5b0 <col:73> 'bool' false
| `-CompoundStmt 0x563ae85aa628 <col:80, line:46:5>
|-CXXMethodDecl 0x563ae85a90d8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x563ae85aa6a0 <col:36, line:51:5>
|   `-ReturnStmt 0x563ae85aa690 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x563ae85aa678 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x563ae85aa648 <col:16> 'const Element *const' lvalue ->_context 0x563ae85a9cd8
|         `-CXXThisExpr 0x563ae85aa638 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x563ae85a91c8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x563ae85aa720 <col:32, line:57:5>
|   `-ReturnStmt 0x563ae85aa710 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x563ae85aa6f8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x563ae85aa6c8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x563ae85a9d38
|         `-CXXThisExpr 0x563ae85aa6b8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x563ae85a9288 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x563ae85a9410 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x563ae85a9340 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x563ae85a9560 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x563ae85a94d0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x563ae85a96b0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x563ae85a9620 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x563ae85a98b8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x563ae85a9768 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x563ae85a97e0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x563ae85a9be8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x563ae85a9978 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x563ae85a99f8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x563ae85a9ac0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x563ae85a9ca0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x563ae85a9cd8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x563ae85a9d38 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x563ae85a9da0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x563ae85a9e00 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x563ae85a9e50 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x563ae85a9e50
| `-ParmVarDecl 0x563ae85a9f68 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x563ae85aa008 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x563ae85aa008
| `-ParmVarDecl 0x563ae85aa118 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x563ae87249a8 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x563ae86b5ca0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x563ae86b5e78 prev 0x563ae86b5ca0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x563ae86b5f08 <col:46, col:52> col:46 public
|-TypedefDecl 0x563ae86b5f30 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563ae80c6370 'int'
|-TypedefDecl 0x563ae86b7b00 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x563ae86b7ab0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x563ae86b63e0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x563ae86b62e0 'type'
|     `-TemplateSpecializationType 0x563ae86b6270 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x563ae86b6150 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x563ae86b6130 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x563ae86b6110 <col:24> 'unsigned long' 4
|       `-RecordType 0x563ae86b6250 'char_array<4>'
|         `-ClassTemplateSpecialization 0x563ae86b6170 'char_array'
|-TypedefDecl 0x563ae86b7bb8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x563ae86b7b80 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x563ae86b7b60 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x563ae86b7b00 'type'
|     `-ElaboratedType 0x563ae86b7ab0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x563ae86b63e0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x563ae86b62e0 'type'
|         `-TemplateSpecializationType 0x563ae86b6270 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x563ae86b6150 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x563ae86b6130 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x563ae86b6110 <col:24> 'unsigned long' 4
|           `-RecordType 0x563ae86b6250 'char_array<4>'
|             `-ClassTemplateSpecialization 0x563ae86b6170 'char_array'
|-CXXMethodDecl 0x563ae86b7d38 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x563ae86b7c48 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x563ae86b7e28 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x563ae86b7f08 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x563ae86b81d8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x563ae86b80e0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x563ae86b8418 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x563ae86b8290 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x563ae86b8308 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x563ae86b85e8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x563ae86b84d8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x563ae86b8550 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x563ae86b8748 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x563ae86b8818 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x563ae86b8a68 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x563ae86b88d8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x563ae86b8950 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x563ae86b8cc8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x563ae86b8b38 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x563ae86b8bb0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x563ae86b8e88 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x563ae86b8d98 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x563ae86b9048 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x563ae86b8f50 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x563ae86b9100 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x563ae86b91b0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x563ae86c0808 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x563ae86c0680 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x563ae86c06f8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x563ae86c0aa8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x563ae86c09b0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x563ae86c0b70 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x563ae86c0bc0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x563ae86c0c10 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x563ae86b46a8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x563ae86b48b8 prev 0x563ae86b46a8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x563ae86b5c10 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x563ae86b5bc0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x563ae86b5ba0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x563ae86b5a50 'type'
|     `-SubstTemplateTypeParmType 0x563ae86b5870 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x563ae838c490 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563ae838c438 'T'
|       `-RecordType 0x563ae86b53c0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x563ae86b52d8 'sized_array_memory'
|-FieldDecl 0x563ae86c0c60 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x563ae86c0cb0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x563ae86c0ce8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x563ae86b4950 'int' sugar
|   |-TemplateTypeParmType 0x563ae83c4180 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x563ae83c4128 'T'
|   `-BuiltinType 0x563ae80c6370 'int'
|-TypedefDecl 0x563ae86c0d78 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x563ae86c0d40 'int &'
|   `-SubstTemplateTypeParmType 0x563ae86b4950 'int' sugar
|     |-TemplateTypeParmType 0x563ae83c4180 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563ae83c4128 'T'
|     `-BuiltinType 0x563ae80c6370 'int'
|-TypedefDecl 0x563ae86c0e38 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x563ae86c0e00 'const int &'
|   `-QualType 0x563ae86b4951 'const int' const
|     `-SubstTemplateTypeParmType 0x563ae86b4950 'int' sugar
|       |-TemplateTypeParmType 0x563ae83c4180 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563ae83c4128 'T'
|       `-BuiltinType 0x563ae80c6370 'int'
|-TypedefDecl 0x563ae86c0ec8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x563ae86c0e90 'int *'
|   `-SubstTemplateTypeParmType 0x563ae86b4950 'int' sugar
|     |-TemplateTypeParmType 0x563ae83c4180 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563ae83c4128 'T'
|     `-BuiltinType 0x563ae80c6370 'int'
|-TypedefDecl 0x563ae86c0f58 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x563ae86c0f20 'const int *'
|   `-QualType 0x563ae86b4951 'const int' const
|     `-SubstTemplateTypeParmType 0x563ae86b4950 'int' sugar
|       |-TemplateTypeParmType 0x563ae83c4180 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563ae83c4128 'T'
|       `-BuiltinType 0x563ae80c6370 'int'
|-TypedefDecl 0x563ae86c1b40 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x563ae86c1af0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x563ae86c1ad0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x563ae86c1a60 'type'
|     `-SubstTemplateTypeParmType 0x563ae86c1820 'int' sugar
|       |-TemplateTypeParmType 0x563ae8397290 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563ae8397240 'T'
|       `-BuiltinType 0x563ae80c6370 'int'
|-TypedefDecl 0x563ae86c1ba8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x563ae86c0e00 'const int &'
|   `-QualType 0x563ae86b4951 'const int' const
|     `-SubstTemplateTypeParmType 0x563ae86b4950 'int' sugar
|       |-TemplateTypeParmType 0x563ae83c4180 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563ae83c4128 'T'
|       `-BuiltinType 0x563ae80c6370 'int'
|-TypedefDecl 0x563ae86c1c00 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563ae80c6370 'int'
|-TypedefDecl 0x563ae86c1c68 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x563ae86c0e90 'int *'
|   `-SubstTemplateTypeParmType 0x563ae86b4950 'int' sugar
|     |-TemplateTypeParmType 0x563ae83c4180 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563ae83c4128 'T'
|     `-BuiltinType 0x563ae80c6370 'int'
|-TypedefDecl 0x563ae86c1cd0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x563ae86c0f20 'const int *'
|   `-QualType 0x563ae86b4951 'const int' const
|     `-SubstTemplateTypeParmType 0x563ae86b4950 'int' sugar
|       |-TemplateTypeParmType 0x563ae83c4180 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563ae83c4128 'T'
|       `-BuiltinType 0x563ae80c6370 'int'
|-EnumDecl 0x563ae86c1d28 <line:134:5> col:5
| `-EnumConstantDecl 0x563ae86c1e20 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x563ae86c1e00 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x563ae83c5808 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x563ae83c57e0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x563ae83c57c0 <col:40> 'int' 1
|-CXXConstructorDecl 0x563ae86c1ea8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x563ae86c20f8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x563ae86c1f60 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x563ae86c2000 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x563ae86c23b8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x563ae86c22a0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x563ae86c2678 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x563ae86c2560 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x563ae86c29c0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x563ae86c28a0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x563ae86c2cd0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x563ae86c2bb0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x563ae86c2fc0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x563ae86c2e08 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x563ae86c2e80 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x563ae86c30e8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x563ae86c31c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x563ae86c3220 <col:30> Inherited
|-CXXMethodDecl 0x563ae86c3268 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x563ae86c3318 <col:20> Inherited
| `-OptimizeNoneAttr 0x563ae86c3370 <col:30> Inherited
|-CXXMethodDecl 0x563ae86c3438 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x563ae86c34e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x563ae86c3540 <col:30> Inherited
|-CXXMethodDecl 0x563ae86c3588 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x563ae86c3638 <col:20> Inherited
| `-OptimizeNoneAttr 0x563ae86c3690 <col:30> Inherited
|-CXXMethodDecl 0x563ae86c36d8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x563ae86c3788 <col:20> Inherited
| `-OptimizeNoneAttr 0x563ae86c37e0 <col:30> Inherited
|-CXXMethodDecl 0x563ae86c3828 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x563ae86c38d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x563ae86c3930 <col:30> Inherited
|-CXXMethodDecl 0x563ae86c3958 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x563ae86c3a08 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x563ae86c3ab8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x563ae86c3c78 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x563ae86c3b68 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x563ae86c3be0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x563ae86c3dc8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x563ae86c3d38 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x563ae86c3f78 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x563ae86c3e80 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x563ae86c4030 <col:20>
| `-OptimizeNoneAttr 0x563ae86c4088 <col:30>
|-CXXMethodDecl 0x563ae86c41a8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x563ae86c40b0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x563ae86c4260 <col:20>
| `-OptimizeNoneAttr 0x563ae86c42b8 <col:30>
|-CXXMethodDecl 0x563ae86c4370 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x563ae86c42e0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563ae86c44b8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x563ae86c4428 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563ae86c45e8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x563ae86c4718 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x563ae86c47e8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x563ae86c48b8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x563ae86c49f8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x563ae86c4968 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563ae86c4b40 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x563ae86c4ab0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563ae86c4c88 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x563ae86c4bf8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x563ae86c4d40 <col:48> Inherited "" ""
|-CXXMethodDecl 0x563ae86c4e40 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x563ae86c4db0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x563ae86c4ef8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x563ae86c4fb8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x563ae86c50b8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x563ae86c5238 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x563ae86c5178 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x563ae86c59f8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x563ae86c52f0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x563ae86c5958 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x563ae86c5858 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x563ae86c5ad8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x563ae86c5c28 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x563ae86c5b98 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x563ae86c5ce0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x563ae86c5f28 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x563ae86c5da0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x563ae86c5e18 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x563ae86c60e8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x563ae86c5ff8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x563ae86c6338 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x563ae86c61b0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x563ae86c6228 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x563ae86c63f8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x563ae86c6658 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x563ae86c6560 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x563ae86c6728 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563ae86b2818 prev 0x563ae8695448 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x563ae86b2910 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x563ae86b2a00 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x563ae86d8520 <col:16, line:828:9>
|-CXXDestructorDecl 0x563ae86b2af0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x563ae86d8530 <col:25, line:830:9>
|-CXXMethodDecl 0x563ae86b2bf0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x563ae86b2ca0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x563ae86b2d48 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x563ae86b2d48
| `-ParmVarDecl 0x563ae86b2e58 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x563ae86b3618 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x563ae86b3618
  `-ParmVarDecl 0x563ae86b3728 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563ae8695258 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x563ae86953b8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x563ae8695448 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x563ae8695500 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x563ae8695608 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x563ae8695538 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x563ae86c7ce8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x563ae86c7cc8 <col:31> 'int' 0
|-CXXConstructorDecl 0x563ae8695928 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x563ae86957a0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x563ae8695818 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x563ae86c7d20 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x563ae86c7d00 <col:59> 'int' 0
|-CXXConstructorDecl 0x563ae8695b00 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x563ae86959f0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x563ae8695a68 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x563ae86c7d58 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x563ae86c7d38 <col:55> 'int' 0
|-CXXConstructorDecl 0x563ae8695eb8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x563ae8695ca0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x563ae8695d18 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x563ae8695d90 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x563ae86c7d90 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x563ae86c7d70 <col:31> 'int' 0
|-CXXConstructorDecl 0x563ae8696078 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x563ae8695fb8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x563ae8696170 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x563ae8696358 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x563ae8696260 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x563ae8696448 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x563ae86c8140 <col:24, line:291:5>
|   `-ReturnStmt 0x563ae86c8130 <line:290:9, col:79>
|     `-BinaryOperator 0x563ae86c8110 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x563ae86c7fe8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x563ae86c7f40 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x563ae86c7f20 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x563ae86c7e18 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x563ae86c7e00 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x563ae86c7de8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x563ae86c7db8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x563ae86b4640
|       | |   |       `-CXXThisExpr 0x563ae86c7da8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x563ae86c7f08 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x563ae86c7ef0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x563ae86c7eb8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x563ae86c7e88 <col:28, col:35> '<bound member function type>' ->size 0x563ae8676f48
|       | |           `-ImplicitCastExpr 0x563ae86c7ed8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x563ae86c7e70 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x563ae86c7e40 <col:28> 'Vector<String> *const' lvalue ->_conf 0x563ae86b4640
|       | |                 `-CXXThisExpr 0x563ae86c7e30 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x563ae86c7fd0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x563ae86c7fb8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x563ae86c7fa0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x563ae86c7f70 <col:47> 'Args::Slot *const' lvalue ->_slots 0x563ae86c6870
|       |         `-CXXThisExpr 0x563ae86c7f60 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x563ae86c80f0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x563ae86c80d8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x563ae86c80c0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x563ae86c8080 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x563ae86c8068 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x563ae86c8018 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x563ae86c6920
|         |     |   `-CXXThisExpr 0x563ae86c8008 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x563ae86c8048 <col:73> 'int' 0
|         `-IntegerLiteral 0x563ae86c80a0 <col:79> 'int' 0
|-CXXMethodDecl 0x563ae8696508 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x563ae86c8318 <col:32, line:296:5>
|   `-ReturnStmt 0x563ae86c8308 <line:295:9, col:49>
|     `-BinaryOperator 0x563ae86c82e8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x563ae86c81c8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x563ae86c81b0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x563ae86c8198 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x563ae86c8168 <col:17> 'Args::Slot *const' lvalue ->_slots 0x563ae86c6870
|       |       `-CXXThisExpr 0x563ae86c8158 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x563ae86c82c8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x563ae86c82b0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x563ae86c8298 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x563ae86c8258 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x563ae86c8240 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x563ae86c81f0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x563ae86c6920
|         |     |   `-CXXThisExpr 0x563ae86c81e0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x563ae86c8220 <col:43> 'int' 0
|         `-IntegerLiteral 0x563ae86c8278 <col:49> 'int' 0
|-CXXMethodDecl 0x563ae86965f8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x563ae86c8528 <col:19, line:306:5>
|   |-IfStmt 0x563ae86c8448 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x563ae86c8388 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x563ae86c8370 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x563ae86c8340 <col:13> 'Vector<String> *' lvalue ->_conf 0x563ae86b4640
|   | |     `-CXXThisExpr 0x563ae86c8330 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x563ae86c8428 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x563ae86c83f8 <col:13, col:20> '<bound member function type>' ->clear 0x563ae8679948
|   |     `-ImplicitCastExpr 0x563ae86c83e0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x563ae86c83b0 <col:13> 'Vector<String> *' lvalue ->_conf 0x563ae86b4640
|   |         `-CXXThisExpr 0x563ae86c83a0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x563ae86c84d0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x563ae86c84a0 <col:9, col:16> '<bound member function type>' .clear 0x563ae86c63f8
|   |   `-MemberExpr 0x563ae86c8470 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x563ae86c6810
|   |     `-CXXThisExpr 0x563ae86c8460 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x563ae86c8518 <line:305:9, col:17>
|     `-UnaryOperator 0x563ae86c8500 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x563ae86c84f0 <col:17> 'Args *' this
|-CXXMethodDecl 0x563ae8696878 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x563ae8696780 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x563ae86969f8 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x563ae8696930 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x563ae8696d78 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x563ae8696aa0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x563ae8696cd8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x563ae8696b48 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x563ae8696bc0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x563ae86ca1d0 <col:67, line:327:5>
|     |-WhileStmt 0x563ae86ca180 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x563ae86c8610 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x563ae86c8590 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x563ae85e5d68 0x563ae842f348 0x563ae842f020 0x563ae8420800 0x563ae84204b0 0x563ae841fda0 0x563ae83f2710 0x563ae837ebd0
|     | | |-DeclRefExpr 0x563ae86c8550 <col:16> 'Iter' lvalue ParmVar 0x563ae8696b48 'begin' 'Iter'
|     | | `-DeclRefExpr 0x563ae86c8570 <col:25> 'Iter' lvalue ParmVar 0x563ae8696bc0 'end' 'Iter'
|     | `-CompoundStmt 0x563ae86ca160 <col:30, line:325:9>
|     |   |-CallExpr 0x563ae86ca100 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x563ae86c9fe0 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x563ae86ca0d0 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x563ae86ca060 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563ae85eaee8 0x563ae85eab08 0x563ae85ea738 0x563ae85ea358 0x563ae85e9f78 0x563ae85e9ba8
|     |   |   `-DeclRefExpr 0x563ae86ca040 <col:24> 'Iter' lvalue ParmVar 0x563ae8696b48 'begin' 'Iter'
|     |   `-UnaryOperator 0x563ae86ca148 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x563ae86ca128 <col:15> 'Iter' lvalue ParmVar 0x563ae8696b48 'begin' 'Iter'
|     `-ReturnStmt 0x563ae86ca1c0 <line:326:9, col:17>
|       `-UnaryOperator 0x563ae86ca1a8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563ae86ca198 <col:17> 'Args *' this
|-CXXMethodDecl 0x563ae8696e80 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x563ae8696df0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x563ae8696fc8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x563ae8696f38 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x563ae8697090 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x563ae86ca2b0 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x563ae86ca250 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x563ae86ca200 <col:9> '<bound member function type>' ->reset_from 0x563ae86c6c98
|   | | `-CXXThisExpr 0x563ae86ca1f0 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x563ae86ca230 <col:20> 'int' 0
|   `-ReturnStmt 0x563ae86ca2a0 <line:352:9, col:17>
|     `-UnaryOperator 0x563ae86ca288 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x563ae86ca278 <col:17> 'Args *' this
|-VarDecl 0x563ae8697148 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x563ae86971b0 <col:38> 'int' 1
|-VarDecl 0x563ae8697240 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x563ae86972a8 <col:39> 'int' 2
|-VarDecl 0x563ae8697338 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x563ae86973a0 <col:39> 'int' 4
|-VarDecl 0x563ae8697430 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x563ae8697498 <col:39> 'int' 8
|-FunctionTemplateDecl 0x563ae8697818 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x563ae8697510 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563ae8697778 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x563ae86975c0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae8697668 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x563ae86ca408 <col:43, line:371:5>
|     `-ReturnStmt 0x563ae86ca3f8 <line:370:9, col:34>
|       `-CallExpr 0x563ae86ca3c0 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563ae86ca2e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563ae86ca360 <col:21> 'const char *' lvalue ParmVar 0x563ae86975c0 'keyword' 'const char *'
|         |-IntegerLiteral 0x563ae86ca380 <col:30> 'int' 0
|         `-DeclRefExpr 0x563ae86ca3a0 <col:33> 'T' lvalue ParmVar 0x563ae8697668 'x' 'T &'
|-FunctionTemplateDecl 0x563ae8697b48 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x563ae8697880 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563ae8697aa8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x563ae8697930 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae86979d8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x563ae86ca558 <col:45, line:375:5>
|     `-ReturnStmt 0x563ae86ca548 <line:374:9, col:42>
|       `-CallExpr 0x563ae86ca510 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563ae86ca430 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563ae86ca4b0 <col:21> 'const char *' lvalue ParmVar 0x563ae8697930 'keyword' 'const char *'
|         |-DeclRefExpr 0x563ae86ca4d0 <col:30> 'const int' lvalue Var 0x563ae8697148 'mandatory' 'const int'
|         `-DeclRefExpr 0x563ae86ca4f0 <col:41> 'T' lvalue ParmVar 0x563ae86979d8 'x' 'T &'
|-FunctionTemplateDecl 0x563ae8697e78 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x563ae8697bb0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563ae8697dd8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x563ae8697c60 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae8697d08 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x563ae86ca6a8 <col:45, line:379:5>
|     `-ReturnStmt 0x563ae86ca698 <line:378:9, col:43>
|       `-CallExpr 0x563ae86ca660 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563ae86ca580 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563ae86ca600 <col:21> 'const char *' lvalue ParmVar 0x563ae8697c60 'keyword' 'const char *'
|         |-DeclRefExpr 0x563ae86ca620 <col:30> 'const int' lvalue Var 0x563ae8697240 'positional' 'const int'
|         `-DeclRefExpr 0x563ae86ca640 <col:42> 'T' lvalue ParmVar 0x563ae8697d08 'x' 'T &'
|-FunctionTemplateDecl 0x563ae86981a8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x563ae8697ee0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563ae8698108 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x563ae8697f90 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae8698038 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x563ae86ca8a8 <col:46, line:383:5>
|     `-ReturnStmt 0x563ae86ca898 <line:382:9, col:55>
|       `-CallExpr 0x563ae86ca860 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563ae86ca6d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563ae86ca750 <col:21> 'const char *' lvalue ParmVar 0x563ae8697f90 'keyword' 'const char *'
|         |-BinaryOperator 0x563ae86ca820 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x563ae86ca7d0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x563ae86ca7b0 <col:30> 'const int' lvalue Var 0x563ae8697148 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x563ae86ca808 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x563ae86ca7e8 <col:42> 'const int' lvalue Var 0x563ae8697240 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x563ae86ca840 <col:54> 'T' lvalue ParmVar 0x563ae8698038 'x' 'T &'
|-FunctionTemplateDecl 0x563ae86985a8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x563ae8698210 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563ae8698508 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x563ae86982c0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae8698340 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x563ae86983e8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x563ae86ca9e8 <col:54, line:388:5>
|     |-CallExpr 0x563ae86ca970 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x563ae86ca8c0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x563ae86ca900 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x563ae86ca910 <col:30> 'const char *' lvalue ParmVar 0x563ae86982c0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x563ae86ca930 <col:39> 'int' lvalue ParmVar 0x563ae8698340 'flags' 'int'
|     | `-DeclRefExpr 0x563ae86ca950 <col:46> 'T' lvalue ParmVar 0x563ae86983e8 'x' 'T &'
|     `-ReturnStmt 0x563ae86ca9d8 <line:387:9, col:17>
|       `-UnaryOperator 0x563ae86ca9c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563ae86ca9b0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563ae8698a58 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x563ae8698618 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x563ae8698698 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x563ae86989b8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x563ae8698758 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae86987f8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x563ae8698898 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x563ae86cab58 <col:74, line:403:5>
|     `-ReturnStmt 0x563ae86cab48 <line:402:9, col:56>
|       `-CallExpr 0x563ae86cab08 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563ae86caa18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563ae86caa88 <col:28> 'const char *' lvalue ParmVar 0x563ae8698758 'keyword' 'const char *'
|         |-IntegerLiteral 0x563ae86caaa8 <col:37> 'int' 0
|         |-DeclRefExpr 0x563ae86caac8 <col:40> 'T' lvalue ParmVar 0x563ae86987f8 'x' 'T &'
|         `-DeclRefExpr 0x563ae86caae8 <col:43> 'const V' lvalue ParmVar 0x563ae8698898 'default_value' 'const V &'
|-FunctionTemplateDecl 0x563ae8698ec8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x563ae8698ac8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x563ae8698b48 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x563ae8698e28 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x563ae8698c08 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae8698ca8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x563ae8698d48 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x563ae86cacc0 <col:76, line:407:5>
|     `-ReturnStmt 0x563ae86cacb0 <line:406:9, col:65>
|       `-CallExpr 0x563ae86cac70 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563ae86cab80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563ae86cabf0 <col:28> 'const char *' lvalue ParmVar 0x563ae8698c08 'keyword' 'const char *'
|         |-DeclRefExpr 0x563ae86cac10 <col:37> 'const int' lvalue Var 0x563ae8697240 'positional' 'const int'
|         |-DeclRefExpr 0x563ae86cac30 <col:49> 'T' lvalue ParmVar 0x563ae8698ca8 'x' 'T &'
|         `-DeclRefExpr 0x563ae86cac50 <col:52> 'const V' lvalue ParmVar 0x563ae8698d48 'default_value' 'const V &'
|-FunctionTemplateDecl 0x563ae8699418 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x563ae8698f38 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x563ae8698fb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x563ae8699378 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x563ae8699078 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae86990f8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x563ae8699198 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x563ae8699238 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x563ae86cae28 <col:85, line:412:5>
|     |-CallExpr 0x563ae86cada8 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x563ae86cacd8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x563ae86cad18 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x563ae86cad28 <col:37> 'const char *' lvalue ParmVar 0x563ae8699078 'keyword' 'const char *'
|     | |-DeclRefExpr 0x563ae86cad48 <col:46> 'int' lvalue ParmVar 0x563ae86990f8 'flags' 'int'
|     | |-DeclRefExpr 0x563ae86cad68 <col:53> 'T' lvalue ParmVar 0x563ae8699198 'x' 'T &'
|     | `-DeclRefExpr 0x563ae86cad88 <col:56> 'const V' lvalue ParmVar 0x563ae8699238 'default_value' 'const V &'
|     `-ReturnStmt 0x563ae86cae18 <line:411:9, col:17>
|       `-UnaryOperator 0x563ae86cae00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563ae86cadf0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563ae86998a8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x563ae8699490 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563ae8699508 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x563ae8699808 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x563ae86995c8 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x563ae8699640 <col:37, col:39> col:39 referenced parser 'P'
| | |-ParmVarDecl 0x563ae86996e8 <col:47, col:50> col:50 referenced x 'T &'
| | `-CompoundStmt 0x563ae86cafa8 <col:53, line:425:5>
| |   `-ReturnStmt 0x563ae86caf98 <line:424:9, col:42>
| |     `-CallExpr 0x563ae86caf58 <col:16, col:42> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x563ae86cae58 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x563ae86caed8 <col:21> 'const char *' lvalue ParmVar 0x563ae86995c8 'keyword' 'const char *'
| |       |-IntegerLiteral 0x563ae86caef8 <col:30> 'int' 0
| |       |-DeclRefExpr 0x563ae86caf18 <col:33> 'P' lvalue ParmVar 0x563ae8699640 'parser' 'P'
| |       `-DeclRefExpr 0x563ae86caf38 <col:41> 'T' lvalue ParmVar 0x563ae86996e8 'x' 'T &'
| `-CXXMethodDecl 0x563ae87269b8 <line:423:5, line:425:5> line:423:11 used read 'Args &(const char *, BoundedIntArg, int &)'
|   |-TemplateArgument type 'BoundedIntArg'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x563ae8726768 <col:16, col:28> col:28 keyword 'const char *'
|   |-ParmVarDecl 0x563ae8726808 <col:37, col:39> col:39 parser 'BoundedIntArg':'BoundedIntArg'
|   `-ParmVarDecl 0x563ae87268d8 <col:47, col:50> col:50 x 'int &'
|-FunctionTemplateDecl 0x563ae8699cf8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x563ae8699918 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563ae8699998 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563ae8699c58 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563ae8699a58 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae8699ad0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x563ae8699b78 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x563ae86cb120 <col:55, line:429:5>
|     `-ReturnStmt 0x563ae86cb110 <line:428:9, col:50>
|       `-CallExpr 0x563ae86cb0d0 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563ae86cafd0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563ae86cb050 <col:21> 'const char *' lvalue ParmVar 0x563ae8699a58 'keyword' 'const char *'
|         |-DeclRefExpr 0x563ae86cb070 <col:30> 'const int' lvalue Var 0x563ae8697148 'mandatory' 'const int'
|         |-DeclRefExpr 0x563ae86cb090 <col:41> 'P' lvalue ParmVar 0x563ae8699ad0 'parser' 'P'
|         `-DeclRefExpr 0x563ae86cb0b0 <col:49> 'T' lvalue ParmVar 0x563ae8699b78 'x' 'T &'
|-FunctionTemplateDecl 0x563ae869a148 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x563ae8699d68 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563ae8699de8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x563ae869a0a8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x563ae8699ea8 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x563ae8699f20 <col:39, col:41> col:41 referenced parser 'P'
| | |-ParmVarDecl 0x563ae8699fc8 <col:49, col:52> col:52 referenced x 'T &'
| | `-CompoundStmt 0x563ae86cb298 <col:55, line:433:5>
| |   `-ReturnStmt 0x563ae86cb288 <line:432:9, col:51>
| |     `-CallExpr 0x563ae86cb248 <col:16, col:51> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x563ae86cb148 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x563ae86cb1c8 <col:21> 'const char *' lvalue ParmVar 0x563ae8699ea8 'keyword' 'const char *'
| |       |-DeclRefExpr 0x563ae86cb1e8 <col:30> 'const int' lvalue Var 0x563ae8697240 'positional' 'const int'
| |       |-DeclRefExpr 0x563ae86cb208 <col:42> 'P' lvalue ParmVar 0x563ae8699f20 'parser' 'P'
| |       `-DeclRefExpr 0x563ae86cb228 <col:50> 'T' lvalue ParmVar 0x563ae8699fc8 'x' 'T &'
| `-CXXMethodDecl 0x563ae87258e8 <line:431:5, line:433:5> line:431:11 used read_p 'Args &(const char *, BoundedIntArg, int &)'
|   |-TemplateArgument type 'BoundedIntArg'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x563ae8725658 <col:18, col:30> col:30 keyword 'const char *'
|   |-ParmVarDecl 0x563ae87256f8 <col:39, col:41> col:41 parser 'BoundedIntArg':'BoundedIntArg'
|   `-ParmVarDecl 0x563ae87257c8 <col:49, col:52> col:52 x 'int &'
|-FunctionTemplateDecl 0x563ae869a598 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x563ae869a1b8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563ae869a238 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563ae869a4f8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563ae869a2f8 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae869a370 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x563ae869a418 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x563ae86cb4c0 <col:56, line:437:5>
|     `-ReturnStmt 0x563ae86cb4b0 <line:436:9, col:63>
|       `-CallExpr 0x563ae86cb470 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563ae86cb2c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563ae86cb340 <col:21> 'const char *' lvalue ParmVar 0x563ae869a2f8 'keyword' 'const char *'
|         |-BinaryOperator 0x563ae86cb410 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x563ae86cb3c0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x563ae86cb3a0 <col:30> 'const int' lvalue Var 0x563ae8697148 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x563ae86cb3f8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x563ae86cb3d8 <col:42> 'const int' lvalue Var 0x563ae8697240 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x563ae86cb430 <col:54> 'P' lvalue ParmVar 0x563ae869a370 'parser' 'P'
|         `-DeclRefExpr 0x563ae86cb450 <col:62> 'T' lvalue ParmVar 0x563ae869a418 'x' 'T &'
|-FunctionTemplateDecl 0x563ae869aac8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x563ae869a608 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563ae869a688 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563ae869aa28 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x563ae869a748 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae869a7c8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x563ae869a840 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x563ae869a8e8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x563ae86cb628 <col:64, line:442:5>
|     |-CallExpr 0x563ae86cb5a8 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x563ae86cb4d8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x563ae86cb518 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x563ae86cb528 <col:30> 'const char *' lvalue ParmVar 0x563ae869a748 'keyword' 'const char *'
|     | |-DeclRefExpr 0x563ae86cb548 <col:39> 'int' lvalue ParmVar 0x563ae869a7c8 'flags' 'int'
|     | |-DeclRefExpr 0x563ae86cb568 <col:46> 'P' lvalue ParmVar 0x563ae869a840 'parser' 'P'
|     | `-DeclRefExpr 0x563ae86cb588 <col:54> 'T' lvalue ParmVar 0x563ae869a8e8 'x' 'T &'
|     `-ReturnStmt 0x563ae86cb618 <line:441:9, col:17>
|       `-UnaryOperator 0x563ae86cb600 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563ae86cb5f0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563ae869b0c8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x563ae869ab40 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563ae869abb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x563ae869ac38 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x563ae869b028 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x563ae869ad00 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae869ad78 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x563ae869ae18 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x563ae869aee8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x563ae86cb7c0 <col:84, line:458:5>
|     `-ReturnStmt 0x563ae86cb7b0 <line:457:9, col:64>
|       `-CallExpr 0x563ae86cb768 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563ae86cb658 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563ae86cb6c8 <col:28> 'const char *' lvalue ParmVar 0x563ae869ad00 'keyword' 'const char *'
|         |-IntegerLiteral 0x563ae86cb6e8 <col:37> 'int' 0
|         |-DeclRefExpr 0x563ae86cb708 <col:40> 'P' lvalue ParmVar 0x563ae869ad78 'parser' 'P'
|         |-DeclRefExpr 0x563ae86cb728 <col:48> 'T' lvalue ParmVar 0x563ae869ae18 'x' 'T &'
|         `-DeclRefExpr 0x563ae86cb748 <col:51> 'const V' lvalue ParmVar 0x563ae869aee8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x563ae869b648 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x563ae869b140 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563ae869b1b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x563ae869b238 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x563ae869b5a8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x563ae869b300 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae869b378 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x563ae869b418 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x563ae869b4b8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x563ae86cb950 <col:86, line:462:5>
|     `-ReturnStmt 0x563ae86cb940 <line:461:9, col:73>
|       `-CallExpr 0x563ae86cb8f8 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563ae86cb7e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563ae86cb858 <col:28> 'const char *' lvalue ParmVar 0x563ae869b300 'keyword' 'const char *'
|         |-DeclRefExpr 0x563ae86cb878 <col:37> 'const int' lvalue Var 0x563ae8697240 'positional' 'const int'
|         |-DeclRefExpr 0x563ae86cb898 <col:49> 'P' lvalue ParmVar 0x563ae869b378 'parser' 'P'
|         |-DeclRefExpr 0x563ae86cb8b8 <col:57> 'T' lvalue ParmVar 0x563ae869b418 'x' 'T &'
|         `-DeclRefExpr 0x563ae86cb8d8 <col:60> 'const V' lvalue ParmVar 0x563ae869b4b8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x563ae869bca8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x563ae869b6c0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563ae869b738 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x563ae869b7b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x563ae869bc08 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x563ae869b880 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae869b900 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x563ae869b978 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x563ae869ba18 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x563ae869bab8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x563ae86cbae0 <col:95, line:467:5>
|     |-CallExpr 0x563ae86cba58 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x563ae86cb968 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x563ae86cb9a8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x563ae86cb9b8 <col:37> 'const char *' lvalue ParmVar 0x563ae869b880 'keyword' 'const char *'
|     | |-DeclRefExpr 0x563ae86cb9d8 <col:46> 'int' lvalue ParmVar 0x563ae869b900 'flags' 'int'
|     | |-DeclRefExpr 0x563ae86cb9f8 <col:53> 'P' lvalue ParmVar 0x563ae869b978 'parser' 'P'
|     | |-DeclRefExpr 0x563ae86cba18 <col:61> 'T' lvalue ParmVar 0x563ae869ba18 'x' 'T &'
|     | `-DeclRefExpr 0x563ae86cba38 <col:64> 'const V' lvalue ParmVar 0x563ae869bab8 'default_value' 'const V &'
|     `-ReturnStmt 0x563ae86cbad0 <line:466:9, col:17>
|       `-UnaryOperator 0x563ae86cbab8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563ae86cbaa8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563ae869c288 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x563ae869bd28 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563ae869bda8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x563ae869be28 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x563ae869c1e8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x563ae869bef0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae869bf68 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x563ae869c008 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x563ae869c0a8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x563ae86cbc88 <col:63, line:481:5>
|     `-ReturnStmt 0x563ae86cbc78 <line:480:9, col:47>
|       `-CallExpr 0x563ae86cbc30 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563ae86cbb10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563ae86cbb90 <col:21> 'const char *' lvalue ParmVar 0x563ae869bef0 'keyword' 'const char *'
|         |-IntegerLiteral 0x563ae86cbbb0 <col:30> 'int' 0
|         |-DeclRefExpr 0x563ae86cbbd0 <col:33> 'P' lvalue ParmVar 0x563ae869bf68 'parser' 'P'
|         |-DeclRefExpr 0x563ae86cbbf0 <col:41> 'T1' lvalue ParmVar 0x563ae869c008 'x1' 'T1 &'
|         `-DeclRefExpr 0x563ae86cbc10 <col:45> 'T2' lvalue ParmVar 0x563ae869c0a8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x563ae869c808 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x563ae869c300 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563ae869c378 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x563ae869c3f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x563ae869c768 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x563ae869c4c0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae869c538 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x563ae869c5d8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x563ae869c678 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x563ae86cbe28 <col:65, line:485:5>
|     `-ReturnStmt 0x563ae86cbe18 <line:484:9, col:55>
|       `-CallExpr 0x563ae86cbdd0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563ae86cbcb0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563ae86cbd30 <col:21> 'const char *' lvalue ParmVar 0x563ae869c4c0 'keyword' 'const char *'
|         |-DeclRefExpr 0x563ae86cbd50 <col:30> 'const int' lvalue Var 0x563ae8697148 'mandatory' 'const int'
|         |-DeclRefExpr 0x563ae86cbd70 <col:41> 'P' lvalue ParmVar 0x563ae869c538 'parser' 'P'
|         |-DeclRefExpr 0x563ae86cbd90 <col:49> 'T1' lvalue ParmVar 0x563ae869c5d8 'x1' 'T1 &'
|         `-DeclRefExpr 0x563ae86cbdb0 <col:53> 'T2' lvalue ParmVar 0x563ae869c678 'x2' 'T2 &'
|-FunctionTemplateDecl 0x563ae869cd88 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x563ae869c880 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563ae869c8f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x563ae869c978 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x563ae869cce8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x563ae869ca40 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae869cab8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x563ae869cb58 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x563ae869cbf8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x563ae86cbfc8 <col:65, line:489:5>
|     `-ReturnStmt 0x563ae86cbfb8 <line:488:9, col:56>
|       `-CallExpr 0x563ae86cbf70 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563ae86cbe50 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563ae86cbed0 <col:21> 'const char *' lvalue ParmVar 0x563ae869ca40 'keyword' 'const char *'
|         |-DeclRefExpr 0x563ae86cbef0 <col:30> 'const int' lvalue Var 0x563ae8697240 'positional' 'const int'
|         |-DeclRefExpr 0x563ae86cbf10 <col:42> 'P' lvalue ParmVar 0x563ae869cab8 'parser' 'P'
|         |-DeclRefExpr 0x563ae86cbf30 <col:50> 'T1' lvalue ParmVar 0x563ae869cb58 'x1' 'T1 &'
|         `-DeclRefExpr 0x563ae86cbf50 <col:54> 'T2' lvalue ParmVar 0x563ae869cbf8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x563ae86a17e8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x563ae869ce00 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563ae869ce78 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x563ae869cef8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x563ae86a1748 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x563ae869cfc0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae869d038 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x563ae869d0d8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x563ae86a1650 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x563ae86cc218 <col:66, line:493:5>
|     `-ReturnStmt 0x563ae86cc208 <line:492:9, col:68>
|       `-CallExpr 0x563ae86cc1c0 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563ae86cbff0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563ae86cc070 <col:21> 'const char *' lvalue ParmVar 0x563ae869cfc0 'keyword' 'const char *'
|         |-BinaryOperator 0x563ae86cc140 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x563ae86cc0f0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x563ae86cc0d0 <col:30> 'const int' lvalue Var 0x563ae8697148 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x563ae86cc128 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x563ae86cc108 <col:42> 'const int' lvalue Var 0x563ae8697240 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x563ae86cc160 <col:54> 'P' lvalue ParmVar 0x563ae869d038 'parser' 'P'
|         |-DeclRefExpr 0x563ae86cc180 <col:62> 'T1' lvalue ParmVar 0x563ae869d0d8 'x1' 'T1 &'
|         `-DeclRefExpr 0x563ae86cc1a0 <col:66> 'T2' lvalue ParmVar 0x563ae86a1650 'x2' 'T2 &'
|-FunctionTemplateDecl 0x563ae86a1e48 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x563ae86a1860 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563ae86a18d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x563ae86a1958 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x563ae86a1da8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x563ae86a1a20 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae86a1aa0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x563ae86a1b18 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x563ae86a1bb8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x563ae86a1c58 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x563ae86cc3a8 <col:74, line:498:5>
|     |-CallExpr 0x563ae86cc320 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x563ae86cc230 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x563ae86cc270 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x563ae86cc280 <col:30> 'const char *' lvalue ParmVar 0x563ae86a1a20 'keyword' 'const char *'
|     | |-DeclRefExpr 0x563ae86cc2a0 <col:39> 'int' lvalue ParmVar 0x563ae86a1aa0 'flags' 'int'
|     | |-DeclRefExpr 0x563ae86cc2c0 <col:46> 'P' lvalue ParmVar 0x563ae86a1b18 'parser' 'P'
|     | |-DeclRefExpr 0x563ae86cc2e0 <col:54> 'T1' lvalue ParmVar 0x563ae86a1bb8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x563ae86cc300 <col:58> 'T2' lvalue ParmVar 0x563ae86a1c58 'x2' 'T2 &'
|     `-ReturnStmt 0x563ae86cc398 <line:497:9, col:17>
|       `-UnaryOperator 0x563ae86cc380 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563ae86cc370 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563ae86a21a8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x563ae86a1ec8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563ae86a2108 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x563ae86a1f80 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae86a1ff8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x563ae86cc4f0 <col:52, line:509:5>
|     `-ReturnStmt 0x563ae86cc4e0 <line:508:9, col:44>
|       `-CallExpr 0x563ae86cc4a8 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563ae86cc3d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563ae86cc448 <col:26> 'const char *' lvalue ParmVar 0x563ae86a1f80 'keyword' 'const char *'
|         |-IntegerLiteral 0x563ae86cc468 <col:35> 'int' 0
|         `-DeclRefExpr 0x563ae86cc488 <col:38> 'P' lvalue ParmVar 0x563ae86a1ff8 'parser' 'P'
|-FunctionTemplateDecl 0x563ae86a24a8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x563ae86a2210 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563ae86a2408 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x563ae86a22c0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae86a2338 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x563ae86cc630 <col:54, line:513:5>
|     `-ReturnStmt 0x563ae86cc620 <line:512:9, col:52>
|       `-CallExpr 0x563ae86cc5e8 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563ae86cc518 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563ae86cc588 <col:26> 'const char *' lvalue ParmVar 0x563ae86a22c0 'keyword' 'const char *'
|         |-DeclRefExpr 0x563ae86cc5a8 <col:35> 'const int' lvalue Var 0x563ae8697148 'mandatory' 'const int'
|         `-DeclRefExpr 0x563ae86cc5c8 <col:46> 'P' lvalue ParmVar 0x563ae86a2338 'parser' 'P'
|-FunctionTemplateDecl 0x563ae86a27a8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x563ae86a2510 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563ae86a2708 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x563ae86a25c0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae86a2638 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x563ae86cc770 <col:54, line:517:5>
|     `-ReturnStmt 0x563ae86cc760 <line:516:9, col:53>
|       `-CallExpr 0x563ae86cc728 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563ae86cc658 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563ae86cc6c8 <col:26> 'const char *' lvalue ParmVar 0x563ae86a25c0 'keyword' 'const char *'
|         |-DeclRefExpr 0x563ae86cc6e8 <col:35> 'const int' lvalue Var 0x563ae8697240 'positional' 'const int'
|         `-DeclRefExpr 0x563ae86cc708 <col:47> 'P' lvalue ParmVar 0x563ae86a2638 'parser' 'P'
|-FunctionTemplateDecl 0x563ae86a2aa8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x563ae86a2810 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563ae86a2a08 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x563ae86a28c0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae86a2938 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x563ae86cc960 <col:55, line:521:5>
|     `-ReturnStmt 0x563ae86cc950 <line:520:9, col:65>
|       `-CallExpr 0x563ae86cc918 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563ae86cc798 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563ae86cc808 <col:26> 'const char *' lvalue ParmVar 0x563ae86a28c0 'keyword' 'const char *'
|         |-BinaryOperator 0x563ae86cc8d8 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x563ae86cc888 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x563ae86cc868 <col:35> 'const int' lvalue Var 0x563ae8697148 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x563ae86cc8c0 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x563ae86cc8a0 <col:47> 'const int' lvalue Var 0x563ae8697240 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x563ae86cc8f8 <col:59> 'P' lvalue ParmVar 0x563ae86a2938 'parser' 'P'
|-FunctionTemplateDecl 0x563ae86a2e78 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x563ae86a2b10 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563ae86a2dd8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x563ae86a2bc0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae86a2c40 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x563ae86a2cb8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x563ae86ccaa0 <col:63, line:526:5>
|     |-CallExpr 0x563ae86cca28 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x563ae86cc978 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x563ae86cc9b8 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x563ae86cc9c8 <col:35> 'const char *' lvalue ParmVar 0x563ae86a2bc0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x563ae86cc9e8 <col:44> 'int' lvalue ParmVar 0x563ae86a2c40 'flags' 'int'
|     | `-DeclRefExpr 0x563ae86cca08 <col:51> 'P' lvalue ParmVar 0x563ae86a2cb8 'parser' 'P'
|     `-ReturnStmt 0x563ae86cca90 <line:525:9, col:17>
|       `-UnaryOperator 0x563ae86cca78 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563ae86cca68 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563ae86a32c8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x563ae86a2ee8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563ae86a2f68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563ae86a3228 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563ae86a3028 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae86a30a0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x563ae86a3148 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x563ae86ccbf8 <col:58, line:541:5>
|     `-ReturnStmt 0x563ae86ccbe8 <line:540:9, col:39>
|       `-CallExpr 0x563ae86ccbb0 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563ae86ccad0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563ae86ccb50 <col:21> 'const char *' lvalue ParmVar 0x563ae86a3028 'keyword' 'const char *'
|         |-DeclRefExpr 0x563ae86ccb70 <col:30> 'P' lvalue ParmVar 0x563ae86a30a0 'parser' 'P'
|         `-DeclRefExpr 0x563ae86ccb90 <col:38> 'T' lvalue ParmVar 0x563ae86a3148 'x' 'T &'
|-FunctionTemplateDecl 0x563ae86a3718 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x563ae86a3338 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563ae86a33b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563ae86a3678 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563ae86a3478 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae86a34f0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x563ae86a3598 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x563ae86ccd30 <col:60, line:545:5>
|     `-ReturnStmt 0x563ae86ccd20 <line:544:9, col:41>
|       `-CallExpr 0x563ae86ccce8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563ae86ccc20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563ae86ccc88 <col:23> 'const char *' lvalue ParmVar 0x563ae86a3478 'keyword' 'const char *'
|         |-DeclRefExpr 0x563ae86ccca8 <col:32> 'P' lvalue ParmVar 0x563ae86a34f0 'parser' 'P'
|         `-DeclRefExpr 0x563ae86cccc8 <col:40> 'T' lvalue ParmVar 0x563ae86a3598 'x' 'T &'
|-FunctionTemplateDecl 0x563ae86a3b68 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x563ae86a3788 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563ae86a3808 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563ae86a3ac8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563ae86a38c8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae86a3940 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x563ae86a39e8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x563ae86cce68 <col:60, line:549:5>
|     `-ReturnStmt 0x563ae86cce58 <line:548:9, col:41>
|       `-CallExpr 0x563ae86cce20 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563ae86ccd58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563ae86ccdc0 <col:23> 'const char *' lvalue ParmVar 0x563ae86a38c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x563ae86ccde0 <col:32> 'P' lvalue ParmVar 0x563ae86a3940 'parser' 'P'
|         `-DeclRefExpr 0x563ae86cce00 <col:40> 'T' lvalue ParmVar 0x563ae86a39e8 'x' 'T &'
|-FunctionTemplateDecl 0x563ae86a3fb8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x563ae86a3bd8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563ae86a3c58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563ae86a3f18 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563ae86a3d18 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae86a3d90 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x563ae86a3e38 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x563ae86ccfa0 <col:61, line:553:5>
|     `-ReturnStmt 0x563ae86ccf90 <line:552:9, col:42>
|       `-CallExpr 0x563ae86ccf58 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563ae86cce90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563ae86ccef8 <col:24> 'const char *' lvalue ParmVar 0x563ae86a3d18 'keyword' 'const char *'
|         |-DeclRefExpr 0x563ae86ccf18 <col:33> 'P' lvalue ParmVar 0x563ae86a3d90 'parser' 'P'
|         `-DeclRefExpr 0x563ae86ccf38 <col:41> 'T' lvalue ParmVar 0x563ae86a3e38 'x' 'T &'
|-FunctionTemplateDecl 0x563ae86a4498 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x563ae86a4028 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563ae86a40a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563ae86a43f8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x563ae86a4168 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae86a41e8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x563ae86a4260 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x563ae86a4308 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x563ae86cd118 <col:69, line:557:5>
|     `-ReturnStmt 0x563ae86cd108 <line:556:9, col:46>
|       `-CallExpr 0x563ae86cd0c8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563ae86ccfc8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563ae86cd048 <col:21> 'const char *' lvalue ParmVar 0x563ae86a4168 'keyword' 'const char *'
|         |-DeclRefExpr 0x563ae86cd068 <col:30> 'int' lvalue ParmVar 0x563ae86a41e8 'flags' 'int'
|         |-DeclRefExpr 0x563ae86cd088 <col:37> 'P' lvalue ParmVar 0x563ae86a4260 'parser' 'P'
|         `-DeclRefExpr 0x563ae86cd0a8 <col:45> 'T' lvalue ParmVar 0x563ae86a4308 'x' 'T &'
|-FunctionTemplateDecl 0x563ae86a47a8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x563ae86a4510 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563ae86a4708 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x563ae86a45c0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae86a4638 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x563ae86cd258 <col:56, line:571:5>
|     `-ReturnStmt 0x563ae86cd248 <line:570:9, col:48>
|       `-CallExpr 0x563ae86cd210 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563ae86cd140 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563ae86cd1b0 <col:30> 'const char *' lvalue ParmVar 0x563ae86a45c0 'keyword' 'const char *'
|         |-IntegerLiteral 0x563ae86cd1d0 <col:39> 'int' 0
|         `-DeclRefExpr 0x563ae86cd1f0 <col:42> 'P' lvalue ParmVar 0x563ae86a4638 'parser' 'P'
|-FunctionTemplateDecl 0x563ae86a4b38 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x563ae86a4810 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563ae86a4a98 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x563ae86a48c0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae86a4940 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x563ae86a49b8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x563ae86cd428 <col:67, line:576:5>
|     |-CallExpr 0x563ae86cd3b0 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x563ae86cd270 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x563ae86cd2b0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x563ae86cd2c0 <col:39> 'const char *' lvalue ParmVar 0x563ae86a48c0 'keyword' 'const char *'
|     | |-BinaryOperator 0x563ae86cd370 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x563ae86cd320 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x563ae86cd2e0 <col:48> 'int' lvalue ParmVar 0x563ae86a4940 'flags' 'int'
|     | | `-ImplicitCastExpr 0x563ae86cd358 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x563ae86cd338 <col:56> 'const int' lvalue Var 0x563ae8697430 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x563ae86cd390 <col:68> 'P' lvalue ParmVar 0x563ae86a49b8 'parser' 'P'
|     `-ReturnStmt 0x563ae86cd418 <line:575:9, col:17>
|       `-UnaryOperator 0x563ae86cd400 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563ae86cd3f0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563ae86a4f88 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x563ae86a4ba8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563ae86a4c28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563ae86a4ee8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563ae86a4ce8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae86a4d60 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x563ae86a4e08 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x563ae86cd598 <col:62, line:592:5>
|     `-ReturnStmt 0x563ae86cd588 <line:591:9, col:51>
|       `-CallExpr 0x563ae86cd548 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563ae86cd458 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563ae86cd4c8 <col:30> 'const char *' lvalue ParmVar 0x563ae86a4ce8 'keyword' 'const char *'
|         |-IntegerLiteral 0x563ae86cd4e8 <col:39> 'int' 0
|         |-DeclRefExpr 0x563ae86cd508 <col:42> 'P' lvalue ParmVar 0x563ae86a4d60 'parser' 'P'
|         `-DeclRefExpr 0x563ae86cd528 <col:50> 'T' lvalue ParmVar 0x563ae86a4e08 'x' 'T &'
|-FunctionTemplateDecl 0x563ae86a5468 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x563ae86a4ff8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563ae86a5078 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563ae86a53c8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x563ae86a5138 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae86a51b8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x563ae86a5230 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x563ae86a52d8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x563ae86cd790 <col:73, line:597:5>
|     |-CallExpr 0x563ae86cd710 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x563ae86cd5b0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x563ae86cd5f0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x563ae86cd600 <col:39> 'const char *' lvalue ParmVar 0x563ae86a5138 'keyword' 'const char *'
|     | |-BinaryOperator 0x563ae86cd6b0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x563ae86cd660 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x563ae86cd620 <col:48> 'int' lvalue ParmVar 0x563ae86a51b8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x563ae86cd698 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x563ae86cd678 <col:56> 'const int' lvalue Var 0x563ae8697430 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x563ae86cd6d0 <col:68> 'P' lvalue ParmVar 0x563ae86a5230 'parser' 'P'
|     | `-DeclRefExpr 0x563ae86cd6f0 <col:76> 'T' lvalue ParmVar 0x563ae86a52d8 'x' 'T &'
|     `-ReturnStmt 0x563ae86cd780 <line:596:9, col:17>
|       `-UnaryOperator 0x563ae86cd768 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563ae86cd758 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563ae86a5a18 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x563ae86a54e0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563ae86a5558 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563ae86a5978 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x563ae86a5618 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae86a5690 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x563ae86a5850 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x563ae86cd900 <col:65, line:614:5>
|     `-ReturnStmt 0x563ae86cd8f0 <line:613:9, col:46>
|       `-CallExpr 0x563ae86cd8b0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563ae86cd7c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563ae86cd830 <col:25> 'const char *' lvalue ParmVar 0x563ae86a5618 'keyword' 'const char *'
|         |-IntegerLiteral 0x563ae86cd850 <col:34> 'int' 0
|         |-DeclRefExpr 0x563ae86cd870 <col:37> 'P' lvalue ParmVar 0x563ae86a5690 'parser' 'P'
|         `-DeclRefExpr 0x563ae86cd890 <col:45> 'Vector<T>' lvalue ParmVar 0x563ae86a5850 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x563ae86a5e48 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x563ae86a5a88 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563ae86a5da8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x563ae86a5b40 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae86a5c90 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x563ae86cdb20 <col:55, line:618:5>
|     `-ReturnStmt 0x563ae86cdb10 <line:617:9, col:55>
|       `-CallExpr 0x563ae86cdad0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563ae86cd928 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563ae86cd998 <col:25> 'const char *' lvalue ParmVar 0x563ae86a5b40 'keyword' 'const char *'
|         |-IntegerLiteral 0x563ae86cd9b8 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x563ae86cda90 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x563ae86cdab0 <col:54> 'Vector<T>' lvalue ParmVar 0x563ae86a5c90 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x563ae86a6418 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x563ae86a5eb0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563ae86a5f28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563ae86a6378 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x563ae86a5fe8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae86a6068 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x563ae86a60e0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x563ae86a6230 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x563ae86cdd18 <col:76, line:623:5>
|     |-CallExpr 0x563ae86cdc98 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x563ae86cdb38 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x563ae86cdb78 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x563ae86cdb88 <col:34> 'const char *' lvalue ParmVar 0x563ae86a5fe8 'keyword' 'const char *'
|     | |-BinaryOperator 0x563ae86cdc38 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x563ae86cdbe8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x563ae86cdba8 <col:43> 'int' lvalue ParmVar 0x563ae86a6068 'flags' 'int'
|     | | `-ImplicitCastExpr 0x563ae86cdc20 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x563ae86cdc00 <col:51> 'const int' lvalue Var 0x563ae8697430 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x563ae86cdc58 <col:63> 'P' lvalue ParmVar 0x563ae86a60e0 'parser' 'P'
|     | `-DeclRefExpr 0x563ae86cdc78 <col:71> 'Vector<T>' lvalue ParmVar 0x563ae86a6230 'x' 'Vector<T> &'
|     `-ReturnStmt 0x563ae86cdd08 <line:622:9, col:17>
|       `-UnaryOperator 0x563ae86cdcf0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563ae86cdce0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563ae86a6958 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x563ae86a6490 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563ae86a6508 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563ae86a68b8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x563ae86a65c8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae86a6648 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x563ae86a6790 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x563ae86cdf80 <col:66, line:627:5>
|     `-ReturnStmt 0x563ae86cdf70 <line:626:9, col:59>
|       `-CallExpr 0x563ae86cdf30 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563ae86cdd48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563ae86cddb8 <col:25> 'const char *' lvalue ParmVar 0x563ae86a65c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x563ae86cddd8 <col:34> 'int' lvalue ParmVar 0x563ae86a6648 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x563ae86cdef0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x563ae86cdf10 <col:58> 'Vector<T>' lvalue ParmVar 0x563ae86a6790 'x' 'Vector<T> &'
|-CXXMethodDecl 0x563ae86a69e8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x563ae86ce000 <col:25, line:633:5>
|   `-ReturnStmt 0x563ae86cdff0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x563ae86cdfd8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x563ae86cdfa8 <col:16> 'const bool' lvalue ->_status 0x563ae86b44a8
|         `-CXXThisExpr 0x563ae86cdf98 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x563ae86a6b68 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x563ae86a6aa0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x563ae86ce0e8 <col:27, line:639:5>
|   |-BinaryOperator 0x563ae86ce090 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x563ae86ce018 <col:9> 'bool' lvalue ParmVar 0x563ae86a6aa0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x563ae86ce078 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x563ae86ce048 <col:13> 'bool' lvalue ->_status 0x563ae86b44a8
|   |     `-CXXThisExpr 0x563ae86ce038 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x563ae86ce0d8 <line:638:9, col:17>
|     `-UnaryOperator 0x563ae86ce0c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x563ae86ce0b0 <col:17> 'Args *' this
|-CXXMethodDecl 0x563ae86a6ce8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x563ae86a6c28 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x563ae86ce1d8 <col:39, line:644:5>
|   |-BinaryOperator 0x563ae86ce180 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x563ae86ce108 <col:9> 'bool' lvalue ParmVar 0x563ae86a6c28 'x' 'bool &'
|   | `-ImplicitCastExpr 0x563ae86ce168 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x563ae86ce138 <col:13> 'const bool' lvalue ->_status 0x563ae86b44a8
|   |     `-CXXThisExpr 0x563ae86ce128 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x563ae86ce1c8 <line:643:9, col:17>
|     `-UnaryOperator 0x563ae86ce1b0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x563ae86ce1a0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x563ae86a6db0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x563ae86ce280 <col:30, line:651:5>
|   `-ReturnStmt 0x563ae86ce270 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x563ae86ce258 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x563ae86ce228 <col:16> 'bool' lvalue ->_read_status 0x563ae85a9e00
|         `-ImplicitCastExpr 0x563ae86ce208 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x563ae86ce1f8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x563ae86a6ef8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x563ae86a6e68 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x563ae86ce388 <col:32, line:658:5>
|   |-BinaryOperator 0x563ae86ce330 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x563ae86ce298 <col:9> 'bool' lvalue ParmVar 0x563ae86a6e68 'x' 'bool &'
|   | `-ImplicitCastExpr 0x563ae86ce318 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x563ae86ce2e8 <col:13> 'bool' lvalue ->_read_status 0x563ae85a9e00
|   |     `-ImplicitCastExpr 0x563ae86ce2c8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x563ae86ce2b8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x563ae86ce378 <line:657:9, col:17>
|     `-UnaryOperator 0x563ae86ce360 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x563ae86ce350 <col:17> 'Args *' this
|-CXXMethodDecl 0x563ae86a7048 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x563ae86a6fb8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x563ae86ce498 <col:44, line:663:5>
|   |-BinaryOperator 0x563ae86ce440 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x563ae86ce3a8 <col:9> 'bool' lvalue ParmVar 0x563ae86a6fb8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x563ae86ce428 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x563ae86ce3f8 <col:13> 'bool' lvalue ->_read_status 0x563ae85a9e00
|   |     `-ImplicitCastExpr 0x563ae86ce3d8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x563ae86ce3c8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x563ae86ce488 <line:662:9, col:17>
|     `-UnaryOperator 0x563ae86ce470 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x563ae86ce460 <col:17> 'const Args *' this
|-CXXMethodDecl 0x563ae86a7110 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x563ae86a71d8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x563ae86a72a0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x563ae86a7368 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x563ae86a7678 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x563ae86a7408 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563ae86a75d8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x563ae86a74e8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x563ae86ce850 <col:19, line:706:5>
|     `-IfStmt 0x563ae86ce828 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x563ae86ce598 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x563ae86ce758 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x563ae86ce728 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x563ae86ce6e8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x563ae86ce5f0 <col:42> '<bound member function type>' ->simple_slot 0x563ae86c7950
|       |     | `-CXXThisExpr 0x563ae86ce5e0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x563ae86ce688 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x563ae86ce640 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x563ae8433de8
|       |     | `-DeclRefExpr 0x563ae86ce620 <col:55> 'T' lvalue ParmVar 0x563ae86a74e8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x563ae86ce6c8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x563ae86ce818 <line:705:13, col:34>
|         `-CallExpr 0x563ae86ce7f0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x563ae86ce778 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x563ae86ce7d0 <col:33> 'T' lvalue ParmVar 0x563ae86a74e8 'x' 'T &'
|-FunctionTemplateDecl 0x563ae86a7948 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x563ae86a76d8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563ae86a78a8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x563ae86a77b8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x563ae86cec30 <col:31, line:717:5>
|     |-DeclStmt 0x563ae86ce990 <line:713:9, col:23>
|     | `-VarDecl 0x563ae86ce878 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x563ae86ce968 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x563ae86ce8f0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x563ae86ce948 <col:21> 'T' lvalue ParmVar 0x563ae86a77b8 'x' 'T &'
|     |-IfStmt 0x563ae86cebe0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x563ae86cea88 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x563ae86cebc0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x563ae86ceb60 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x563ae86ceaf0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563ae85eaee8 0x563ae85eab08 0x563ae85ea738 0x563ae85ea358 0x563ae85e9f78 0x563ae85e9ba8
|     |   | `-DeclRefExpr 0x563ae86cead0 <col:14> 'T *' lvalue Var 0x563ae86ce878 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x563ae86ceba0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x563ae86cec18 <line:716:9, col:16>
|       `-DeclRefExpr 0x563ae86cebf8 <col:16> 'T *' lvalue Var 0x563ae86ce878 's' 'T *'
|-FunctionTemplateDecl 0x563ae86a7d58 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x563ae86a79a8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x563ae86a7a28 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x563ae86a7cb8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x563ae86a7b08 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x563ae86a7ba8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x563ae86cef40 <col:37, line:726:5>
|     |-IfStmt 0x563ae86ceed0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x563ae86ceef0 <line:723:13, col:26>
|     | | `-VarDecl 0x563ae86cec98 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x563ae86ced88 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x563ae86ced10 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x563ae86ced68 <col:25> 'T' lvalue ParmVar 0x563ae86a7b08 'x' 'T &'
|     | |-DeclRefExpr 0x563ae86cedb0 <col:16> 'T *' lvalue Var 0x563ae86cec98 's' 'T *'
|     | `-BinaryOperator 0x563ae86ceeb0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x563ae86cee60 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x563ae86cedf0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563ae85eaee8 0x563ae85eab08 0x563ae85ea738 0x563ae85ea358 0x563ae85e9f78 0x563ae85e9ba8
|     |   | `-DeclRefExpr 0x563ae86cedd0 <col:14> 'T *' lvalue Var 0x563ae86cec98 's' 'T *'
|     |   `-DeclRefExpr 0x563ae86cee90 <col:18> 'const V' lvalue ParmVar 0x563ae86a7ba8 'value' 'const V &'
|     `-ReturnStmt 0x563ae86cef30 <line:725:9, col:17>
|       `-UnaryOperator 0x563ae86cef18 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563ae86cef08 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563ae86a8158 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x563ae86a7dc0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563ae86a80b8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x563ae86a7e70 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae86a7ef0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x563ae86a7f98 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x563ae86cfd60 <col:65, line:737:5>
|     |-DeclStmt 0x563ae86cefd8 <line:732:9, col:26>
|     | `-VarDecl 0x563ae86cef70 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x563ae86cfd28 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x563ae86cfd48 <line:733:13, col:58>
|       | `-VarDecl 0x563ae86cf000 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x563ae86cf1e0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x563ae86cf1b0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x563ae86cf198 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x563ae86cf178 <col:26, col:58> 'String' (CXXTemporary 0x563ae86cf178)
|       |           `-CXXMemberCallExpr 0x563ae86cf108 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x563ae86cf078 <col:26> '<bound member function type>' ->find 0x563ae86c6f68
|       |             | `-CXXThisExpr 0x563ae86cf068 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x563ae86cf140 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x563ae86cf0a8 <col:31> 'const char *' lvalue ParmVar 0x563ae86a7e70 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x563ae86cf158 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x563ae86cf0c8 <col:40> 'int' lvalue ParmVar 0x563ae86a7ef0 'flags' 'int'
|       |             `-DeclRefExpr 0x563ae86cf0e8 <col:47> 'Args::Slot *' lvalue Var 0x563ae86cef70 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x563ae86cf298 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x563ae86cf280 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x563ae86cf260 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x563ae86cf230 <col:20> '<bound member function type>' .operator int (String::*)() const 0x563ae83f6db8
|       |       `-ImplicitCastExpr 0x563ae86cf218 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x563ae86cf1f8 <col:20> 'String' lvalue Var 0x563ae86cf000 'str' 'String'
|       `-CompoundStmt 0x563ae86cfd08 <col:61, line:736:9>
|         |-DeclStmt 0x563ae86cf750 <line:734:13, col:76>
|         | `-VarDecl 0x563ae86cf2e8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x563ae86cf720 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x563ae86cf690 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x563ae86cf6d8 <col:60> 'T' lvalue ParmVar 0x563ae86a7f98 'variable' 'T &'
|         |     `-UnaryOperator 0x563ae86cf708 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x563ae86cf6f8 <col:71> 'Args *' this
|         `-CallExpr 0x563ae86cfcd8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x563ae86cf778 <col:13> '<bound member function type>' ->postparse 0x563ae86c7178
|           | `-CXXThisExpr 0x563ae86cf768 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x563ae86cfc98 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x563ae86cf7a8 <col:23> 'T *' lvalue Var 0x563ae86cf2e8 's' 'T *'
|           | `-CallExpr 0x563ae86cfc58 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x563ae86cfa30 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x563ae86cfb30 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x563ae86cfb50 <col:86> 'String' lvalue Var 0x563ae86cf000 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x563ae86cfc00 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x563ae86cfb90 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563ae85eaee8 0x563ae85eab08 0x563ae85ea738 0x563ae85ea358 0x563ae85e9f78 0x563ae85e9ba8
|           |   | `-DeclRefExpr 0x563ae86cfb70 <col:92> 'T *' lvalue Var 0x563ae86cf2e8 's' 'T *'
|           |   `-UnaryOperator 0x563ae86cfc40 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x563ae86cfc30 <col:96> 'Args *' this
|           `-DeclRefExpr 0x563ae86cfcb8 <col:103> 'Args::Slot *' lvalue Var 0x563ae86cef70 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x563ae86a86a8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x563ae86a81c8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x563ae86a8248 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x563ae86a8608 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x563ae86a8308 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae86a8388 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x563ae86a8428 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x563ae86a84c8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x563ae86d0c00 <col:88, line:745:5>
|     |-DeclStmt 0x563ae86cfdf8 <line:741:9, col:26>
|     | `-VarDecl 0x563ae86cfd90 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x563ae86d0018 <line:742:9, col:55>
|     | `-VarDecl 0x563ae86cfe20 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x563ae86d0000 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x563ae86cffd0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x563ae86cffb8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x563ae86cff98 <col:22, col:54> 'String' (CXXTemporary 0x563ae86cff98)
|     |           `-CXXMemberCallExpr 0x563ae86cff28 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x563ae86cfe98 <col:22> '<bound member function type>' ->find 0x563ae86c6f68
|     |             | `-CXXThisExpr 0x563ae86cfe88 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x563ae86cff60 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x563ae86cfec8 <col:27> 'const char *' lvalue ParmVar 0x563ae86a8308 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x563ae86cff78 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x563ae86cfee8 <col:36> 'int' lvalue ParmVar 0x563ae86a8388 'flags' 'int'
|     |             `-DeclRefExpr 0x563ae86cff08 <col:43> 'Args::Slot *' lvalue Var 0x563ae86cfd90 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x563ae86d03f0 <line:743:9, col:72>
|     | `-VarDecl 0x563ae86d0068 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x563ae86d03c0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x563ae86d0330 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x563ae86d0378 <col:56> 'T' lvalue ParmVar 0x563ae86a8428 'variable' 'T &'
|     |     `-UnaryOperator 0x563ae86d03a8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x563ae86d0398 <col:67> 'Args *' this
|     `-CallExpr 0x563ae86d0bd0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x563ae86d0418 <col:9> '<bound member function type>' ->postparse 0x563ae86c7178
|       | `-CXXThisExpr 0x563ae86d0408 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x563ae86d0b90 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x563ae86d0448 <col:19> 'T *' lvalue Var 0x563ae86d0068 's' 'T *'
|       | `-ParenExpr 0x563ae86d0b70 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x563ae86d0b40 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x563ae86d0b28 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x563ae86d0b10 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x563ae86d0af0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x563ae86d0ac0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x563ae83f6db8
|       |     |       `-ImplicitCastExpr 0x563ae86d0aa8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x563ae86d0468 <col:25> 'String' lvalue Var 0x563ae86cfe20 'str' 'String'
|       |     |-CallExpr 0x563ae86d0918 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x563ae86d06f0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x563ae86d07f0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x563ae86d0810 <col:89> 'String' lvalue Var 0x563ae86cfe20 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x563ae86d08c0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x563ae86d0850 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563ae85eaee8 0x563ae85eab08 0x563ae85ea738 0x563ae85ea358 0x563ae85e9f78 0x563ae85e9ba8
|       |     | | `-DeclRefExpr 0x563ae86d0830 <col:95> 'T *' lvalue Var 0x563ae86d0068 's' 'T *'
|       |     | `-UnaryOperator 0x563ae86d0900 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x563ae86d08f0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x563ae86d0a88 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x563ae86d0a68 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x563ae86d0a38 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x563ae86d09e8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x563ae86d0978 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563ae85eaee8 0x563ae85eab08 0x563ae85ea738 0x563ae85ea358 0x563ae85e9f78 0x563ae85e9ba8
|       |         | | `-DeclRefExpr 0x563ae86d0958 <col:109> 'T *' lvalue Var 0x563ae86d0068 's' 'T *'
|       |         | `-DeclRefExpr 0x563ae86d0a18 <col:113> 'const V' lvalue ParmVar 0x563ae86a84c8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x563ae86d0a58 <col:120> 'bool' true
|       `-DeclRefExpr 0x563ae86d0bb0 <col:128> 'Args::Slot *' lvalue Var 0x563ae86cfd90 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x563ae86a8bd8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x563ae86a8720 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563ae86a8798 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563ae86a8b38 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x563ae86a8858 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae86a88d8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x563ae86a8950 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x563ae86a89f8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x563ae86d17f8 <col:75, line:754:5>
|     |-DeclStmt 0x563ae86d0ca8 <line:749:9, col:26>
|     | `-VarDecl 0x563ae86d0c40 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x563ae86d17c0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x563ae86d17e0 <line:750:13, col:58>
|       | `-VarDecl 0x563ae86d0cd0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x563ae86d0eb0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x563ae86d0e80 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x563ae86d0e68 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x563ae86d0e48 <col:26, col:58> 'String' (CXXTemporary 0x563ae86d0e48)
|       |           `-CXXMemberCallExpr 0x563ae86d0dd8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x563ae86d0d48 <col:26> '<bound member function type>' ->find 0x563ae86c6f68
|       |             | `-CXXThisExpr 0x563ae86d0d38 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x563ae86d0e10 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x563ae86d0d78 <col:31> 'const char *' lvalue ParmVar 0x563ae86a8858 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x563ae86d0e28 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x563ae86d0d98 <col:40> 'int' lvalue ParmVar 0x563ae86a88d8 'flags' 'int'
|       |             `-DeclRefExpr 0x563ae86d0db8 <col:47> 'Args::Slot *' lvalue Var 0x563ae86d0c40 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x563ae86d0f68 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x563ae86d0f50 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x563ae86d0f30 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x563ae86d0f00 <col:20> '<bound member function type>' .operator int (String::*)() const 0x563ae83f6db8
|       |       `-ImplicitCastExpr 0x563ae86d0ee8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x563ae86d0ec8 <col:20> 'String' lvalue Var 0x563ae86d0cd0 'str' 'String'
|       `-CompoundStmt 0x563ae86d17a0 <col:61, line:753:9>
|         |-DeclStmt 0x563ae86d1340 <line:751:13, col:63>
|         | `-VarDecl 0x563ae86d0fb8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x563ae86d1310 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x563ae86d1280 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x563ae86d12c8 <col:47> 'T' lvalue ParmVar 0x563ae86a89f8 'variable' 'T &'
|         |     `-UnaryOperator 0x563ae86d12f8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x563ae86d12e8 <col:58> 'Args *' this
|         `-CallExpr 0x563ae86d1770 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x563ae86d1368 <col:13> '<bound member function type>' ->postparse 0x563ae86c7178
|           | `-CXXThisExpr 0x563ae86d1358 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x563ae86d1730 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x563ae86d1398 <col:23> 'T *' lvalue Var 0x563ae86d0fb8 's' 'T *'
|           | `-CallExpr 0x563ae86d16f0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x563ae86d1580 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x563ae86d15c8 <col:56> 'P' lvalue ParmVar 0x563ae86a8950 'parser' 'P'
|           |   |-DeclRefExpr 0x563ae86d15e8 <col:64> 'String' lvalue Var 0x563ae86d0cd0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x563ae86d1698 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x563ae86d1628 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563ae85eaee8 0x563ae85eab08 0x563ae85ea738 0x563ae85ea358 0x563ae85e9f78 0x563ae85e9ba8
|           |   | `-DeclRefExpr 0x563ae86d1608 <col:70> 'T *' lvalue Var 0x563ae86d0fb8 's' 'T *'
|           |   `-UnaryOperator 0x563ae86d16d8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x563ae86d16c8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x563ae86d1750 <col:81> 'Args::Slot *' lvalue Var 0x563ae86d0c40 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x563ae86a9238 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x563ae86a8c50 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x563ae86a8cc8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x563ae86a8d48 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x563ae86a9198 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x563ae86a8e10 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae86a8e90 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x563ae86a8f08 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x563ae86a8fa8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x563ae86a9048 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x563ae86d48e8 <col:98, line:762:5>
|     |-DeclStmt 0x563ae86d1890 <line:758:9, col:26>
|     | `-VarDecl 0x563ae86d1828 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x563ae86d1ab0 <line:759:9, col:55>
|     | `-VarDecl 0x563ae86d18b8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x563ae86d1a98 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x563ae86d1a68 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x563ae86d1a50 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x563ae86d1a30 <col:22, col:54> 'String' (CXXTemporary 0x563ae86d1a30)
|     |           `-CXXMemberCallExpr 0x563ae86d19c0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x563ae86d1930 <col:22> '<bound member function type>' ->find 0x563ae86c6f68
|     |             | `-CXXThisExpr 0x563ae86d1920 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x563ae86d19f8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x563ae86d1960 <col:27> 'const char *' lvalue ParmVar 0x563ae86a8e10 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x563ae86d1a10 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x563ae86d1980 <col:36> 'int' lvalue ParmVar 0x563ae86a8e90 'flags' 'int'
|     |             `-DeclRefExpr 0x563ae86d19a0 <col:43> 'Args::Slot *' lvalue Var 0x563ae86d1828 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x563ae86d1ed0 <line:760:9, col:59>
|     | `-VarDecl 0x563ae86d1b08 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x563ae86d1ea0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x563ae86d1e10 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x563ae86d1e58 <col:43> 'T' lvalue ParmVar 0x563ae86a8fa8 'variable' 'T &'
|     |     `-UnaryOperator 0x563ae86d1e88 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x563ae86d1e78 <col:54> 'Args *' this
|     `-CallExpr 0x563ae86d48b8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x563ae86d1ef8 <col:9> '<bound member function type>' ->postparse 0x563ae86c7178
|       | `-CXXThisExpr 0x563ae86d1ee8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x563ae86d4878 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x563ae86d1f28 <col:19> 'T *' lvalue Var 0x563ae86d1b08 's' 'T *'
|       | `-ParenExpr 0x563ae86d4858 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x563ae86d4828 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x563ae86d4810 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x563ae86d47f8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x563ae86d47d8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x563ae86d47a8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x563ae83f6db8
|       |     |       `-ImplicitCastExpr 0x563ae86d4790 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x563ae86d1f48 <col:25> 'String' lvalue Var 0x563ae86d18b8 'str' 'String'
|       |     |-CallExpr 0x563ae86d4600 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x563ae86d4490 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x563ae86d44d8 <col:59> 'P' lvalue ParmVar 0x563ae86a8f08 'parser' 'P'
|       |     | |-DeclRefExpr 0x563ae86d44f8 <col:67> 'String' lvalue Var 0x563ae86d18b8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x563ae86d45a8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x563ae86d4538 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563ae85eaee8 0x563ae85eab08 0x563ae85ea738 0x563ae85ea358 0x563ae85e9f78 0x563ae85e9ba8
|       |     | | `-DeclRefExpr 0x563ae86d4518 <col:73> 'T *' lvalue Var 0x563ae86d1b08 's' 'T *'
|       |     | `-UnaryOperator 0x563ae86d45e8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x563ae86d45d8 <col:77> 'Args *' this
|       |     `-ParenExpr 0x563ae86d4770 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x563ae86d4750 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x563ae86d4720 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x563ae86d46d0 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x563ae86d4660 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563ae85eaee8 0x563ae85eab08 0x563ae85ea738 0x563ae85ea358 0x563ae85e9f78 0x563ae85e9ba8
|       |         | | `-DeclRefExpr 0x563ae86d4640 <col:87> 'T *' lvalue Var 0x563ae86d1b08 's' 'T *'
|       |         | `-DeclRefExpr 0x563ae86d4700 <col:91> 'const V' lvalue ParmVar 0x563ae86a9048 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x563ae86d4740 <col:98> 'bool' true
|       `-DeclRefExpr 0x563ae86d4898 <col:106> 'Args::Slot *' lvalue Var 0x563ae86d1828 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x563ae86b1528 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x563ae86a92b8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563ae86a9338 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x563ae86a93b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x563ae86b1488 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x563ae86a9480 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae86a9500 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x563ae86a9578 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x563ae86b1290 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x563ae86b1338 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x563ae86d58c8 <col:60, line:773:5>
|     |-DeclStmt 0x563ae86d4990 <line:767:9, col:26>
|     | `-VarDecl 0x563ae86d4928 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x563ae86d5890 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x563ae86d58b0 <line:768:13, col:58>
|       | `-VarDecl 0x563ae86d49b8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x563ae86d4b98 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x563ae86d4b68 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x563ae86d4b50 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x563ae86d4b30 <col:26, col:58> 'String' (CXXTemporary 0x563ae86d4b30)
|       |           `-CXXMemberCallExpr 0x563ae86d4ac0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x563ae86d4a30 <col:26> '<bound member function type>' ->find 0x563ae86c6f68
|       |             | `-CXXThisExpr 0x563ae86d4a20 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x563ae86d4af8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x563ae86d4a60 <col:31> 'const char *' lvalue ParmVar 0x563ae86a9480 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x563ae86d4b10 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x563ae86d4a80 <col:40> 'int' lvalue ParmVar 0x563ae86a9500 'flags' 'int'
|       |             `-DeclRefExpr 0x563ae86d4aa0 <col:47> 'Args::Slot *' lvalue Var 0x563ae86d4928 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x563ae86d4c50 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x563ae86d4c38 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x563ae86d4c18 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x563ae86d4be8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x563ae83f6db8
|       |       `-ImplicitCastExpr 0x563ae86d4bd0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x563ae86d4bb0 <col:20> 'String' lvalue Var 0x563ae86d49b8 'str' 'String'
|       `-CompoundStmt 0x563ae86d5868 <col:61, line:772:9>
|         |-DeclStmt 0x563ae86d4f90 <line:769:13, col:66>
|         | `-VarDecl 0x563ae86d4ca8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x563ae86d4f60 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x563ae86d4ed0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x563ae86d4f18 <col:49> 'T1' lvalue ParmVar 0x563ae86b1290 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x563ae86d4f48 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x563ae86d4f38 <col:61> 'Args *' this
|         |-DeclStmt 0x563ae86d5300 <line:770:13, col:66>
|         | `-VarDecl 0x563ae86d5018 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x563ae86d52d0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x563ae86d5240 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x563ae86d5288 <col:49> 'T2' lvalue ParmVar 0x563ae86b1338 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x563ae86d52b8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x563ae86d52a8 <col:61> 'Args *' this
|         `-CallExpr 0x563ae86d5838 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x563ae86d5328 <col:13> '<bound member function type>' ->postparse 0x563ae86c7178
|           | `-CXXThisExpr 0x563ae86d5318 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x563ae86d57f8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x563ae86d5398 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x563ae86d5358 <col:23> 'T1 *' lvalue Var 0x563ae86d4ca8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x563ae86d5378 <col:29> 'T2 *' lvalue Var 0x563ae86d5018 's2' 'T2 *'
|           | `-CallExpr 0x563ae86d57b0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x563ae86d5580 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x563ae86d55c8 <col:63> 'P' lvalue ParmVar 0x563ae86a9578 'parser' 'P'
|           |   |-DeclRefExpr 0x563ae86d55e8 <col:71> 'String' lvalue Var 0x563ae86d49b8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x563ae86d5698 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x563ae86d5628 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563ae85eaee8 0x563ae85eab08 0x563ae85ea738 0x563ae85ea358 0x563ae85e9f78 0x563ae85e9ba8
|           |   | `-DeclRefExpr 0x563ae86d5608 <col:77> 'T1 *' lvalue Var 0x563ae86d4ca8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x563ae86d5758 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x563ae86d56e8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563ae85eaee8 0x563ae85eab08 0x563ae85ea738 0x563ae85ea358 0x563ae85e9f78 0x563ae85e9ba8
|           |   | `-DeclRefExpr 0x563ae86d56c8 <col:82> 'T2 *' lvalue Var 0x563ae86d5018 's2' 'T2 *'
|           |   `-UnaryOperator 0x563ae86d5798 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x563ae86d5788 <col:87> 'Args *' this
|           `-DeclRefExpr 0x563ae86d5818 <col:94> 'Args::Slot *' lvalue Var 0x563ae86d4928 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x563ae86b1918 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x563ae86b15a8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563ae86b1878 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x563ae86b1660 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae86b16e0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x563ae86b1758 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x563ae86d5de0 <col:67, line:780:5>
|     |-DeclStmt 0x563ae86d5960 <line:777:9, col:26>
|     | `-VarDecl 0x563ae86d58f8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x563ae86d5da8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x563ae86d5dc8 <line:778:13, col:58>
|       | `-VarDecl 0x563ae86d5988 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x563ae86d5b68 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x563ae86d5b38 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x563ae86d5b20 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x563ae86d5b00 <col:26, col:58> 'String' (CXXTemporary 0x563ae86d5b00)
|       |           `-CXXMemberCallExpr 0x563ae86d5a90 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x563ae86d5a00 <col:26> '<bound member function type>' ->find 0x563ae86c6f68
|       |             | `-CXXThisExpr 0x563ae86d59f0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x563ae86d5ac8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x563ae86d5a30 <col:31> 'const char *' lvalue ParmVar 0x563ae86b1660 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x563ae86d5ae0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x563ae86d5a50 <col:40> 'int' lvalue ParmVar 0x563ae86b16e0 'flags' 'int'
|       |             `-DeclRefExpr 0x563ae86d5a70 <col:47> 'Args::Slot *' lvalue Var 0x563ae86d58f8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x563ae86d5c20 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x563ae86d5c08 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x563ae86d5be8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x563ae86d5bb8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x563ae83f6db8
|       |       `-ImplicitCastExpr 0x563ae86d5ba0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x563ae86d5b80 <col:20> 'String' lvalue Var 0x563ae86d5988 'str' 'String'
|       `-CallExpr 0x563ae86d5d78 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x563ae86d5c48 <col:13> '<bound member function type>' ->postparse 0x563ae86c7178
|         | `-CXXThisExpr 0x563ae86d5c38 <col:13> 'Args *' implicit this
|         |-CallExpr 0x563ae86d5d28 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x563ae86d5c98 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x563ae86d5c78 <col:23> 'P' lvalue ParmVar 0x563ae86b1758 'parser' 'P'
|         | |-DeclRefExpr 0x563ae86d5ce0 <col:36> 'String' lvalue Var 0x563ae86d5988 'str' 'String'
|         | `-UnaryOperator 0x563ae86d5d10 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x563ae86d5d00 <col:42> 'Args *' this
|         `-DeclRefExpr 0x563ae86d5d58 <col:49> 'Args::Slot *' lvalue Var 0x563ae86d58f8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x563ae86b1cb8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x563ae86b1988 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563ae86b1c18 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x563ae86b1a40 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae86b1ac0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x563ae86b1b38 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x563ae86d6750 <col:71, line:792:5>
|     |-DeclStmt 0x563ae86d5e78 <line:784:9, col:26>
|     | `-VarDecl 0x563ae86d5e10 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x563ae86d5f48 <line:785:9, col:29>
|     | `-VarDecl 0x563ae86d5ea8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x563ae86d5f30 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x563ae86d5f10 <col:28> 'int' 1
|     |-WhileStmt 0x563ae86d6600 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x563ae86d6620 <line:786:16, col:61>
|     | | `-VarDecl 0x563ae86d5f70 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x563ae86d6150 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x563ae86d6120 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x563ae86d6108 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x563ae86d60e8 <col:29, col:61> 'String' (CXXTemporary 0x563ae86d60e8)
|     | |           `-CXXMemberCallExpr 0x563ae86d6078 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x563ae86d5fe8 <col:29> '<bound member function type>' ->find 0x563ae86c6f68
|     | |             | `-CXXThisExpr 0x563ae86d5fd8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x563ae86d60b0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x563ae86d6018 <col:34> 'const char *' lvalue ParmVar 0x563ae86b1a40 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x563ae86d60c8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x563ae86d6038 <col:43> 'int' lvalue ParmVar 0x563ae86b1ac0 'flags' 'int'
|     | |             `-DeclRefExpr 0x563ae86d6058 <col:50> 'Args::Slot *' lvalue Var 0x563ae86d5e10 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x563ae86d6208 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x563ae86d61f0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x563ae86d61d0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x563ae86d61a0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x563ae83f6db8
|     | |       `-ImplicitCastExpr 0x563ae86d6188 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x563ae86d6168 <col:23> 'String' lvalue Var 0x563ae86d5f70 'str' 'String'
|     | `-CompoundStmt 0x563ae86d65d8 <col:64, line:790:9>
|     |   |-CallExpr 0x563ae86d6360 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x563ae86d6230 <col:13> '<bound member function type>' ->postparse 0x563ae86c7178
|     |   | | `-CXXThisExpr 0x563ae86d6220 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x563ae86d6310 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x563ae86d6280 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x563ae86d6260 <col:23> 'P' lvalue ParmVar 0x563ae86b1b38 'parser' 'P'
|     |   | | |-DeclRefExpr 0x563ae86d62c8 <col:36> 'String' lvalue Var 0x563ae86d5f70 'str' 'String'
|     |   | | `-UnaryOperator 0x563ae86d62f8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x563ae86d62e8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x563ae86d6340 <col:49> 'Args::Slot *' lvalue Var 0x563ae86d5e10 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x563ae86d64f8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x563ae86d6390 <col:13> 'int' lvalue Var 0x563ae86d5ea8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x563ae86d64e0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x563ae86d64c0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x563ae86d6428 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x563ae86d6408 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x563ae86d63f0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x563ae86d63b0 <col:28> 'int' lvalue Var 0x563ae86d5ea8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x563ae86d63d0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x563ae86d64a8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x563ae86d6478 <col:49> 'bool' lvalue ->_read_status 0x563ae85a9e00
|     |   |         `-ImplicitCastExpr 0x563ae86d6458 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x563ae86d6448 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x563ae86d65a8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x563ae86d6518 <col:13> 'int' lvalue ParmVar 0x563ae86b1ac0 'flags' 'int'
|     |     `-UnaryOperator 0x563ae86d6590 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x563ae86d6578 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x563ae86d6558 <col:23> 'const int' lvalue Var 0x563ae8697148 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x563ae86d6730 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x563ae86d6668 <col:9> 'bool' lvalue ->_read_status 0x563ae85a9e00
|       | `-ImplicitCastExpr 0x563ae86d6648 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x563ae86d6638 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x563ae86d6710 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x563ae86d66f0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x563ae86d66d8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x563ae86d6698 <col:25> 'int' lvalue Var 0x563ae86d5ea8 'read_status' 'int'
|           `-IntegerLiteral 0x563ae86d66b8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x563ae86b2198 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x563ae86b1d28 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563ae86b1da8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563ae86b20f8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x563ae86b1e68 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae86b1ee8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x563ae86b1f60 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x563ae86b2008 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x563ae86d76e0 <col:84, line:805:5>
|     |-DeclStmt 0x563ae86d67f8 <line:796:9, col:26>
|     | `-VarDecl 0x563ae86d6790 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x563ae86d68c8 <line:797:9, col:29>
|     | `-VarDecl 0x563ae86d6828 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x563ae86d68b0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x563ae86d6890 <col:28> 'int' 1
|     |-DeclStmt 0x563ae86d6c00 <line:798:9, col:71>
|     | `-VarDecl 0x563ae86d6918 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x563ae86d6bd0 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x563ae86d6b40 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x563ae86d6b88 <col:55> 'T' lvalue ParmVar 0x563ae86b2008 'variable' 'T &'
|     |     `-UnaryOperator 0x563ae86d6bb8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x563ae86d6ba8 <col:66> 'Args *' this
|     |-WhileStmt 0x563ae86d7590 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x563ae86d75b0 <line:799:16, col:61>
|     | | `-VarDecl 0x563ae86d6c28 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x563ae86d6e08 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x563ae86d6dd8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x563ae86d6dc0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x563ae86d6da0 <col:29, col:61> 'String' (CXXTemporary 0x563ae86d6da0)
|     | |           `-CXXMemberCallExpr 0x563ae86d6d30 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x563ae86d6ca0 <col:29> '<bound member function type>' ->find 0x563ae86c6f68
|     | |             | `-CXXThisExpr 0x563ae86d6c90 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x563ae86d6d68 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x563ae86d6cd0 <col:34> 'const char *' lvalue ParmVar 0x563ae86b1e68 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x563ae86d6d80 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x563ae86d6cf0 <col:43> 'int' lvalue ParmVar 0x563ae86b1ee8 'flags' 'int'
|     | |             `-DeclRefExpr 0x563ae86d6d10 <col:50> 'Args::Slot *' lvalue Var 0x563ae86d6790 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x563ae86d6ec0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x563ae86d6ea8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x563ae86d6e88 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x563ae86d6e58 <col:23> '<bound member function type>' .operator int (String::*)() const 0x563ae83f6db8
|     | |       `-ImplicitCastExpr 0x563ae86d6e40 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x563ae86d6e20 <col:23> 'String' lvalue Var 0x563ae86d6c28 'str' 'String'
|     | `-CompoundStmt 0x563ae86d7568 <col:64, line:803:9>
|     |   |-CallExpr 0x563ae86d72f0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x563ae86d6ee8 <col:13> '<bound member function type>' ->postparse 0x563ae86c7178
|     |   | | `-CXXThisExpr 0x563ae86d6ed8 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x563ae86d72b0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x563ae86d6f18 <col:23> 'T *' lvalue Var 0x563ae86d6918 's' 'T *'
|     |   | | `-CallExpr 0x563ae86d7270 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x563ae86d7100 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x563ae86d7148 <col:56> 'P' lvalue ParmVar 0x563ae86b1f60 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x563ae86d7168 <col:64> 'String' lvalue Var 0x563ae86d6c28 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x563ae86d7218 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x563ae86d71a8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563ae85eaee8 0x563ae85eab08 0x563ae85ea738 0x563ae85ea358 0x563ae85e9f78 0x563ae85e9ba8
|     |   | |   | `-DeclRefExpr 0x563ae86d7188 <col:70> 'T *' lvalue Var 0x563ae86d6918 's' 'T *'
|     |   | |   `-UnaryOperator 0x563ae86d7258 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x563ae86d7248 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x563ae86d72d0 <col:81> 'Args::Slot *' lvalue Var 0x563ae86d6790 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x563ae86d7488 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x563ae86d7320 <col:13> 'int' lvalue Var 0x563ae86d6828 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x563ae86d7470 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x563ae86d7450 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x563ae86d73b8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x563ae86d7398 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x563ae86d7380 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x563ae86d7340 <col:28> 'int' lvalue Var 0x563ae86d6828 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x563ae86d7360 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x563ae86d7438 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x563ae86d7408 <col:49> 'bool' lvalue ->_read_status 0x563ae85a9e00
|     |   |         `-ImplicitCastExpr 0x563ae86d73e8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x563ae86d73d8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x563ae86d7538 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x563ae86d74a8 <col:13> 'int' lvalue ParmVar 0x563ae86b1ee8 'flags' 'int'
|     |     `-UnaryOperator 0x563ae86d7520 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x563ae86d7508 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x563ae86d74e8 <col:23> 'const int' lvalue Var 0x563ae8697148 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x563ae86d76c0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x563ae86d75f8 <col:9> 'bool' lvalue ->_read_status 0x563ae85a9e00
|       | `-ImplicitCastExpr 0x563ae86d75d8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x563ae86d75c8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x563ae86d76a0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x563ae86d7680 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x563ae86d7668 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x563ae86d7628 <col:25> 'int' lvalue Var 0x563ae86d6828 'read_status' 'int'
|           `-IntegerLiteral 0x563ae86d7648 <col:40> 'int' 1
|-FunctionTemplateDecl 0x563ae86b2778 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x563ae86b2210 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563ae86b2288 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563ae86b26d8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x563ae86b2348 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563ae86b23c8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x563ae86b2440 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x563ae86b2590 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x563ae86d84e8 <col:87, line:821:5>
|     |-DeclStmt 0x563ae86d7790 <line:809:9, col:26>
|     | `-VarDecl 0x563ae86d7728 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x563ae86d7860 <line:810:9, col:29>
|     | `-VarDecl 0x563ae86d77c0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x563ae86d7848 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x563ae86d7828 <col:28> 'int' 1
|     |-DeclStmt 0x563ae86d7aa8 <line:811:9, col:38>
|     | `-VarDecl 0x563ae86d7990 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x563ae86d7a80 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x563ae86d7a08 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x563ae86d7a60 <col:29> 'Vector<T>' lvalue ParmVar 0x563ae86b2590 'variable' 'Vector<T> &'
|     |-WhileStmt 0x563ae86d8398 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x563ae86d83b8 <line:812:16, col:61>
|     | | `-VarDecl 0x563ae86d7ad0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x563ae86d7cb0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x563ae86d7c80 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x563ae86d7c68 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x563ae86d7c48 <col:29, col:61> 'String' (CXXTemporary 0x563ae86d7c48)
|     | |           `-CXXMemberCallExpr 0x563ae86d7bd8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x563ae86d7b48 <col:29> '<bound member function type>' ->find 0x563ae86c6f68
|     | |             | `-CXXThisExpr 0x563ae86d7b38 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x563ae86d7c10 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x563ae86d7b78 <col:34> 'const char *' lvalue ParmVar 0x563ae86b2348 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x563ae86d7c28 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x563ae86d7b98 <col:43> 'int' lvalue ParmVar 0x563ae86b23c8 'flags' 'int'
|     | |             `-DeclRefExpr 0x563ae86d7bb8 <col:50> 'Args::Slot *' lvalue Var 0x563ae86d7728 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x563ae86d7d68 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x563ae86d7d50 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x563ae86d7d30 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x563ae86d7d00 <col:23> '<bound member function type>' .operator int (String::*)() const 0x563ae83f6db8
|     | |       `-ImplicitCastExpr 0x563ae86d7ce8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x563ae86d7cc8 <col:23> 'String' lvalue Var 0x563ae86d7ad0 'str' 'String'
|     | `-CompoundStmt 0x563ae86d8360 <col:64, line:819:9>
|     |   |-DeclStmt 0x563ae86d7e28 <line:813:13, col:23>
|     |   | `-VarDecl 0x563ae86d7d90 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x563ae86d7e08 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x563ae86d7fa8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x563ae86d7e50 <col:13> '<bound member function type>' ->postparse 0x563ae86c7178
|     |   | | `-CXXThisExpr 0x563ae86d7e40 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x563ae86d7f50 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x563ae86d7ea0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x563ae86d7e80 <col:23> 'P' lvalue ParmVar 0x563ae86b2440 'parser' 'P'
|     |   | | |-DeclRefExpr 0x563ae86d7ee8 <col:36> 'String' lvalue Var 0x563ae86d7ad0 'str' 'String'
|     |   | | |-DeclRefExpr 0x563ae86d7f08 <col:41> 'T' lvalue Var 0x563ae86d7d90 'sx' 'T'
|     |   | | `-UnaryOperator 0x563ae86d7f38 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x563ae86d7f28 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x563ae86d7f88 <col:53> 'Args::Slot *' lvalue Var 0x563ae86d7728 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x563ae86d8100 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x563ae86d8038 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x563ae86d8008 <col:17> 'bool' lvalue ->_read_status 0x563ae85a9e00
|     |   | |   `-ImplicitCastExpr 0x563ae86d7fe8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x563ae86d7fd8 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x563ae86d80d8 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x563ae86d8070 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x563ae86d8050 <col:17> 'Vector<T> *' lvalue Var 0x563ae86d7990 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x563ae86d80b8 <col:30> 'T' lvalue Var 0x563ae86d7d90 'sx' 'T'
|     |   |-BinaryOperator 0x563ae86d8280 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x563ae86d8118 <col:13> 'int' lvalue Var 0x563ae86d77c0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x563ae86d8268 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x563ae86d8248 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x563ae86d81b0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x563ae86d8190 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x563ae86d8178 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x563ae86d8138 <col:28> 'int' lvalue Var 0x563ae86d77c0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x563ae86d8158 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x563ae86d8230 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x563ae86d8200 <col:49> 'bool' lvalue ->_read_status 0x563ae85a9e00
|     |   |         `-ImplicitCastExpr 0x563ae86d81e0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x563ae86d81d0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x563ae86d8330 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x563ae86d82a0 <col:13> 'int' lvalue ParmVar 0x563ae86b23c8 'flags' 'int'
|     |     `-UnaryOperator 0x563ae86d8318 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x563ae86d8300 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x563ae86d82e0 <col:23> 'const int' lvalue Var 0x563ae8697148 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x563ae86d84c8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x563ae86d8400 <col:9> 'bool' lvalue ->_read_status 0x563ae85a9e00
|       | `-ImplicitCastExpr 0x563ae86d83e0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x563ae86d83d0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x563ae86d84a8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x563ae86d8488 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x563ae86d8470 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x563ae86d8430 <col:25> 'int' lvalue Var 0x563ae86d77c0 'read_status' 'int'
|           `-IntegerLiteral 0x563ae86d8450 <col:40> 'int' 1
|-AccessSpecDecl 0x563ae86b27f0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x563ae86b2818 prev 0x563ae8695448 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x563ae86b2910 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x563ae86b2a00 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x563ae86d8520 <col:16, line:828:9>
| |-CXXDestructorDecl 0x563ae86b2af0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x563ae86d8530 <col:25, line:830:9>
| |-CXXMethodDecl 0x563ae86b2bf0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x563ae86b2ca0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x563ae86b2d48 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x563ae86b2d48
| | `-ParmVarDecl 0x563ae86b2e58 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x563ae86b3618 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x563ae86b3618
|   `-ParmVarDecl 0x563ae86b3728 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x563ae86b2ec8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x563ae86b3028 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x563ae86b3220 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x563ae86b30d0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x563ae86b3148 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x563ae86d8710 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x563ae86b34d8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x563ae86d8580 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x563ae86d8540 <col:20> 'void *' lvalue ParmVar 0x563ae86b30d0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x563ae86b3540 '_slot' 'char *'
| | | `-CXXNewExpr 0x563ae86d8608 <col:32, col:45> 'char *' array Function 0x563ae8219a28 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x563ae86d85f0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x563ae86d85c0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x563ae86b3148 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x563ae86b35a0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x563ae86d86d0 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x563ae86d8690 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x563ae86b3148 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x563ae86d8790 <col:61, line:838:9>
| |-CXXDestructorDecl 0x563ae86b3320 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x563ae86b2af0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x563ae86d8818 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x563ae86d87f8 <line:840:13, col:22> 'void' array Function 0x563ae8219d88 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x563ae86d87e0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x563ae86d87b0 <col:22> 'char *' lvalue ->_slot 0x563ae86b3540
| |         `-CXXThisExpr 0x563ae86d87a0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x563ae86b3420 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x563ae86b2bf0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x563ae86d8a08 <col:22, line:844:9>
| |   `-CallExpr 0x563ae86d8970 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x563ae86d8958 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x563ae86d8938 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x563ae8325808 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x563ae86d89a8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x563ae86d8888 <col:20> 'void *' lvalue ->_ptr 0x563ae86b34d8
| |     |   `-CXXThisExpr 0x563ae86d8878 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x563ae86d89d8 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x563ae86d89c0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x563ae86d88c8 <col:26> 'char *' lvalue ->_slot 0x563ae86b3540
| |     |     `-CXXThisExpr 0x563ae86d88b8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x563ae86d89f0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x563ae86d8908 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x563ae86b35a0
| |         `-CXXThisExpr 0x563ae86d88f8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x563ae86b34d8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x563ae86b3540 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x563ae86b35a0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x563ae86b3798 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x563ae86b3798
| | `-ParmVarDecl 0x563ae86b38a8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x563ae86b3948 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x563ae86b3948
|   `-ParmVarDecl 0x563ae86b3a58 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x563ae86b3bf8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x563ae86b3ac8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x563ae86b3b68 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x563ae86b3e90 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x563ae86b4088 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x563ae86b3f58 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x563ae86b4208 '_ptr' 'T *'
|   | | `-ParenListExpr 0x563ae86d8a40 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x563ae86d8a20 <col:20> 'T *' lvalue ParmVar 0x563ae86b3f58 'ptr' 'T *'
|   | `-CompoundStmt 0x563ae86d8a90 <col:25, line:854:9>
|   |-CXXMethodDecl 0x563ae86b4158 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x563ae86b2bf0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x563ae86d8c40 <col:22, line:857:9>
|   |   `-CallExpr 0x563ae86d8c10 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x563ae86d8aa0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x563ae83ddf38 0x563ae8388268
|   |     |-CXXOperatorCallExpr 0x563ae86d8ba0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x563ae86d8b30 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x563ae85eaee8 0x563ae85eab08 0x563ae85ea738 0x563ae85ea358 0x563ae85e9f78 0x563ae85e9ba8
|   |     | `-MemberExpr 0x563ae86d8b00 <col:29> 'T *' lvalue ->_ptr 0x563ae86b4208
|   |     |   `-CXXThisExpr 0x563ae86d8af0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x563ae86d8be0 <col:35> 'T' lvalue ->_slot 0x563ae86b4268
|   |       `-CXXThisExpr 0x563ae86d8bd0 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x563ae86b4208 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x563ae86b4268 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x563ae86b42d0 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x563ae86b43d0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x563ae86b4420 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563ae86b43b0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x563ae86b4390 <col:31> 'int' 48
|-FieldDecl 0x563ae86b4448 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x563ae86b44a8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x563ae86b4508 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x563ae86b4640 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x563ae86c6810 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x563ae86c6870 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x563ae86c6920 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x563ae86c6b48 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x563ae86c6a50 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x563ae86c6c98 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x563ae86c6c08 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x563ae86c6f68 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x563ae86c6d58 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x563ae86c6dd8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x563ae86c6e80 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x563ae86c7178 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x563ae86c7030 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x563ae86c70a8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x563ae86c7248 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x563ae86c7398 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x563ae86c7300 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x563ae86c7728 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x563ae86c7458 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x563ae86c74d8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x563ae86c7580 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x563ae86c7638 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x563ae86c7950 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x563ae86c7800 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x563ae86c7878 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x563ae86c7c68 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x563ae86c7a00 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x563ae86c7bc8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x563ae86c7ad8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | class BoundedIntArg
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
         8 |   click_intmax_t min_value
        16 |   click_intmax_t max_value
        24 |   _Bool is_signed
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563ae86e2da0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563ae86e2eb8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x563ae86e2f48 <col:16, col:22> col:16 public
|-EnumDecl 0x563ae86e2f70 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x563ae86e3070 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x563ae86e32c0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae86e3050 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x563ae86e3030 <col:21> 'int' 0
| |-EnumConstantDecl 0x563ae86e3100 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x563ae86e32d8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae86e30e0 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x563ae86e30c0 <col:24> 'int' 22
| |-EnumConstantDecl 0x563ae86e3190 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x563ae86e32f0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae86e3170 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x563ae86e3150 <col:24> 'int' 34
| |-EnumConstantDecl 0x563ae86e3220 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x563ae86e3308 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae86e3200 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x563ae86e31e0 <col:25> 'int' 95
| `-EnumConstantDecl 0x563ae86e3270 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x563ae86e4c80 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x563ae86e50b8 <col:7>
|-CXXConstructorDecl 0x563ae86e4d88 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x563ae86e4d88
| `-ParmVarDecl 0x563ae86e4e98 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x563ae86e4f38 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x563ae86e5048 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x563ae8725c50 <col:7>
`-CXXDestructorDecl 0x563ae86e71f8 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563ae86e3338 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x563ae86e3498 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x563ae86e3528 <col:32, col:38> col:32 public
|-TypedefDecl 0x563ae86e3560 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x563ae821bd80 'uint32_t' sugar
|   |-Typedef 0x563ae812f408 'uint32_t'
|   `-TypedefType 0x563ae8108440 '__uint32_t' sugar
|     |-Typedef 0x563ae8108038 '__uint32_t'
|     `-BuiltinType 0x563ae80c6410 'unsigned int'
|-CXXConstructorDecl 0x563ae86e36a8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x563ae86e35d0 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x563ae86e4b88 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x563ae86e50c8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x563ae86e4440 'base' 'int'
| | `-ImplicitCastExpr 0x563ae86e4c28 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x563ae86e4be8 <col:16> 'int' lvalue ParmVar 0x563ae86e35d0 'b' 'int'
| `-CompoundStmt 0x563ae86e5138 <col:19, line:1046:5>
|-CXXMethodDecl 0x563ae86e3ba0 <line:1048:5, line:1050:50> line:1048:17 parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x563ae86e3770 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x563ae86e37f0 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x563ae86e3868 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x563ae86e38e8 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x563ae86e39a8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x563ae86e3a28 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x563ae86e3ff8 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x563ae86e3c70 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| `-CXXMethodDecl 0x563ae86e3f58 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
|   |-ParmVarDecl 0x563ae86e3d18 <col:27, col:41> col:41 referenced str 'const String &'
|   |-ParmVarDecl 0x563ae86e3db8 <col:46, col:49> col:49 referenced result 'V &'
|   |-ParmVarDecl 0x563ae86e3e30 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
|   | `-DeclRefExpr 0x563ae86e4ba8 <col:82> 'const ArgContext' lvalue Var 0x563ae86d8c68 'blank_args' 'const ArgContext'
|   `-CompoundStmt 0x563ae86e60a8 <col:94, line:1067:5>
|     |-DeclStmt 0x563ae86e52c8 <line:1054:9, col:64>
|     | `-VarDecl 0x563ae86e5158 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-CXXDependentScopeMemberExpr 0x563ae86e5280 <col:36, col:55> '<dependent type>' lvalue ->is_signed
|     |-DeclStmt 0x563ae86e54e8 <line:1055:9, col:91>
|     | `-VarDecl 0x563ae86e52f8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x563ae86e54c0 <col:31, col:90> 'int' functional cast to int <Dependent>
|     |     `-BinaryOperator 0x563ae86e54a0 <col:35, col:89> 'unsigned long' '/'
|     |       |-ParenExpr 0x563ae86e5450 <col:35, col:69> 'unsigned long'
|     |       | `-BinaryOperator 0x563ae86e5430 <col:36, col:68> 'unsigned long' '-'
|     |       |   |-BinaryOperator 0x563ae86e53d8 <col:36, col:64> 'unsigned long' '+'
|     |       |   | |-UnaryExprOrTypeTraitExpr 0x563ae86e5388 <col:36, col:44> 'unsigned long' sizeof 'V'
|     |       |   | `-UnaryExprOrTypeTraitExpr 0x563ae86e53b8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |       |   `-ImplicitCastExpr 0x563ae86e5418 <col:68> 'unsigned long' <IntegralCast>
|     |       |     `-IntegerLiteral 0x563ae86e53f8 <col:68> 'int' 1
|     |       `-UnaryExprOrTypeTraitExpr 0x563ae86e5480 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x563ae86e5648 <line:1056:9, col:27>
|     | `-VarDecl 0x563ae86e55e0 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
|     |-IfStmt 0x563ae86e5a90 <line:1057:9, line:1059:22>
|     | |-CXXOperatorCallExpr 0x563ae86e59c0 <line:1057:13, line:1058:24> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x563ae86e5940 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x563ae85e5d68 0x563ae842f348 0x563ae842f020 0x563ae8420800 0x563ae84204b0 0x563ae841fda0 0x563ae83f2710 0x563ae837ebd0
|     | | |-CallExpr 0x563ae86e5880 <line:1057:13, col:78> '<dependent type>'
|     | | | |-UnresolvedMemberExpr 0x563ae86e5670 <col:13> '<bound member function type>' lvalue
|     | | | |-CXXMemberCallExpr 0x563ae86e5720 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x563ae86e56f0 <col:19, col:23> '<bound member function type>' .begin 0x563ae840fa08
|     | | | |   `-DeclRefExpr 0x563ae86e56d0 <col:19> 'const String' lvalue ParmVar 0x563ae86e3d18 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x563ae86e5790 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x563ae86e5760 <col:32, col:36> '<bound member function type>' .end 0x563ae840fc20
|     | | | |   `-DeclRefExpr 0x563ae86e5740 <col:32> 'const String' lvalue ParmVar 0x563ae86e3d18 'str' 'const String &'
|     | | | |-DeclRefExpr 0x563ae86e57b0 <col:43> 'const bool' lvalue Var 0x563ae86e5158 'is_signed' 'const bool'
|     | | | |-CXXFunctionalCastExpr 0x563ae86e5818 <col:54, col:67> 'int' functional cast to int <Dependent>
|     | | | | `-UnaryExprOrTypeTraitExpr 0x563ae86e57f8 <col:58, col:66> 'unsigned long' sizeof 'V'
|     | | | |-DeclRefExpr 0x563ae86e5840 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x563ae86e55e0 'x' 'IntArg::limb_type [nlimb]'
|     | | | `-DeclRefExpr 0x563ae86e5860 <col:73> 'const int' lvalue Var 0x563ae86e52f8 'nlimb' 'const int'
|     | | `-CXXMemberCallExpr 0x563ae86e5920 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x563ae86e58f0 <col:16, col:20> '<bound member function type>' .end 0x563ae840fc20
|     | |     `-DeclRefExpr 0x563ae86e58d0 <col:16> 'const String' lvalue ParmVar 0x563ae86e3d18 'str' 'const String &'
|     | `-BinaryOperator 0x563ae86e5a70 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x563ae86e5a08 <col:13> 'int' lvalue ->status 0x563ae86e44a8
|     |   | `-CXXThisExpr 0x563ae86e59f8 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x563ae86e5a58 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x563ae86e5a38 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x563ae86e3100 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x563ae86e5ce0 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x563ae86e5bc8 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x563ae86e5bb0 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x563ae86e5b98 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x563ae86e5ab8 <col:13> 'int' lvalue ->status 0x563ae86e44a8
|     | | |     `-CXXThisExpr 0x563ae86e5aa8 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x563ae86e5b78 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x563ae86e5b48 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x563ae86e5af8 <col:23> 'int' lvalue ->status 0x563ae86e44a8
|     | |   |   `-CXXThisExpr 0x563ae86e5ae8 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x563ae86e5b60 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x563ae86e5b28 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x563ae86e3190 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x563ae86e5cc0 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x563ae86e5c60 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x563ae86e5c08 <col:13, col:18> '<bound member function type>' .error 0x563ae85a9410
|     |   | | `-DeclRefExpr 0x563ae86e5be8 <col:13> 'const ArgContext' lvalue ParmVar 0x563ae86e3e30 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x563ae86e5c88 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x563ae86e5c38 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x563ae86e5cb0 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x563ae86e5ca0 <col:20> 'bool' false
|     |-DeclStmt 0x563ae86e5ef8 <line:1064:9, col:64>
|     | `-TypedefDecl 0x563ae86e5ea0 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
|     |   `-DependentNameType 0x563ae86e5e30 'typename make_unsigned<V>::type' dependent
|     |-CallExpr 0x563ae86e6058 <line:1065:9, col:71> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x563ae86e5f10 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x563ae83b2b98
|     | |-DeclRefExpr 0x563ae86e5f58 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x563ae86e55e0 'x' 'IntArg::limb_type [nlimb]'
|     | `-CXXReinterpretCastExpr 0x563ae86e6028 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
|     |   `-DeclRefExpr 0x563ae86e5fa0 <col:64> 'V' lvalue ParmVar 0x563ae86e3db8 'result' 'V &'
|     `-ReturnStmt 0x563ae86e6098 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x563ae86e6088 <col:16> 'bool' true
|-FunctionTemplateDecl 0x563ae86e43b8 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x563ae86e4068 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| `-CXXMethodDecl 0x563ae86e4318 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
|   |-ParmVarDecl 0x563ae86e4118 <col:16, col:30> col:30 referenced str 'const String &'
|   |-ParmVarDecl 0x563ae86e41b8 <col:35, col:38> col:38 referenced result 'V &'
|   |-ParmVarDecl 0x563ae86e4230 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
|   | `-DeclRefExpr 0x563ae86e4bc8 <col:71> 'const ArgContext' lvalue Var 0x563ae86d8c68 'blank_args' 'const ArgContext'
|   `-CompoundStmt 0x563ae86e6818 <col:83, line:1083:5>
|     |-DeclStmt 0x563ae86e6170 <line:1071:9, col:12>
|     | `-VarDecl 0x563ae86e6108 <col:9, col:11> col:11 referenced x 'V'
|     `-IfStmt 0x563ae86e67f0 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x563ae86e6400 <line:1072:13, line:1073:49> '<dependent type>' '||'
|       | |-UnaryOperator 0x563ae86e6288 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
|       | | `-CallExpr 0x563ae86e6250 <col:14, col:43> '<dependent type>'
|       | |   |-UnresolvedMemberExpr 0x563ae86e6198 <col:14> '<bound member function type>' lvalue
|       | |   |-DeclRefExpr 0x563ae86e61f0 <col:31> 'const String' lvalue ParmVar 0x563ae86e4118 'str' 'const String &'
|       | |   |-DeclRefExpr 0x563ae86e6210 <col:36> 'V' lvalue Var 0x563ae86e6108 'x' 'V'
|       | |   `-DeclRefExpr 0x563ae86e6230 <col:39> 'const ArgContext' lvalue ParmVar 0x563ae86e4230 'args' 'const ArgContext &'
|       | `-ParenExpr 0x563ae86e63e0 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x563ae86e63c0 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x563ae86e63a8 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x563ae86e6390 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x563ae86e62b0 <col:17> 'int' lvalue ->status 0x563ae86e44a8
|       |     |     `-CXXThisExpr 0x563ae86e62a0 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x563ae86e6370 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x563ae86e6340 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x563ae86e62f0 <col:27> 'int' lvalue ->status 0x563ae86e44a8
|       |       |   `-CXXThisExpr 0x563ae86e62e0 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x563ae86e6358 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x563ae86e6320 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x563ae86e3190 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x563ae86e6430 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x563ae86e6420 <col:20> 'bool' false
|       `-IfStmt 0x563ae86e67c8 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x563ae86e64d0 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x563ae86e64a0 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x563ae86e6450 <col:18> 'int' lvalue ->status 0x563ae86e44a8
|         | |   `-CXXThisExpr 0x563ae86e6440 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x563ae86e64b8 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x563ae86e6480 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x563ae86e3190 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x563ae86e6708 <col:42, line:1079:9>
|         | |-CallExpr 0x563ae86e66b0 <line:1076:13, line:1077:45> '<dependent type>'
|         | | |-MemberExpr 0x563ae86e6500 <line:1076:13> '<bound member function type>' ->range_error 0x563ae86e4ab8
|         | | | `-CXXThisExpr 0x563ae86e64f0 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x563ae86e6530 <col:25> 'const ArgContext' lvalue ParmVar 0x563ae86e4230 'args' 'const ArgContext &'
|         | | |-CXXDependentScopeMemberExpr 0x563ae86e6610 <col:31, col:50> '<dependent type>' lvalue ->is_signed
|         | | `-CXXUnresolvedConstructExpr 0x563ae86e6688 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
|         | |   `-DeclRefExpr 0x563ae86e6668 <col:43> 'V' lvalue Var 0x563ae86e6108 'x' 'V'
|         | `-ReturnStmt 0x563ae86e66f8 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x563ae86e66e8 <col:20> 'bool' false
|         `-CompoundStmt 0x563ae86e67a8 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x563ae86e6768 <line:1080:13, col:22> '<dependent type>' '='
|           | |-DeclRefExpr 0x563ae86e6728 <col:13> 'V' lvalue ParmVar 0x563ae86e41b8 'result' 'V &'
|           | `-DeclRefExpr 0x563ae86e6748 <col:22> 'V' lvalue Var 0x563ae86e6108 'x' 'V'
|           `-ReturnStmt 0x563ae86e6798 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x563ae86e6788 <col:20> 'bool' true
|-FieldDecl 0x563ae86e4440 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x563ae86e44a8 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x563ae86e44f8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x563ae86e47b0 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x563ae86e4538 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x563ae86e45b8 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x563ae86e4630 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x563ae86e46b0 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x563ae86e4ab8 <line:1092:5, line:1093:45> line:1092:10 referenced range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x563ae86e4880 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x563ae86e48f8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x563ae86e4990 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x563ae86e7078 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x563ae86e7078
| `-ParmVarDecl 0x563ae86e7188 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x563ae86e7308 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x563ae86e7418 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x563ae8725c60 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x563ae8725c30 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x563ae8725c00 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x563ae8725bd0 <col:7> 'IntArg' lvalue ParmVar 0x563ae86e7418 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x563ae86e4440 'base' 'int'
| | `-ImplicitCastExpr 0x563ae8725d58 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x563ae8725d28 <col:7> 'int' xvalue .base 0x563ae86e4440
| |     `-CXXStaticCastExpr 0x563ae8725cf8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x563ae8725cc8 <col:7> 'IntArg' lvalue ParmVar 0x563ae86e7418 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x563ae86e44a8 'status' 'int'
| | `-ImplicitCastExpr 0x563ae8725e28 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x563ae8725df8 <col:7> 'int' xvalue .status 0x563ae86e44a8
| |     `-CXXStaticCastExpr 0x563ae8725dc8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x563ae8725d98 <col:7> 'IntArg' lvalue ParmVar 0x563ae86e7418 '' 'IntArg &&'
| `-CompoundStmt 0x563ae8725e80 <col:7>
`-CXXDestructorDecl 0x563ae8724d58 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563ae86e7638 <../dummy_inc/click/args.hh:1122:1, line:1175:1> line:1122:7 referenced class BoundedIntArg definition
|-DefinitionData pass_in_registers trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-CXXRecordDecl 0x563ae86e7798 <col:1, col:7> col:7 implicit referenced class BoundedIntArg
|-AccessSpecDecl 0x563ae86e7828 <col:39, col:45> col:39 public
|-FunctionTemplateDecl 0x563ae86e7c00 <line:1123:5, line:1128:5> line:1124:5 BoundedIntArg
| |-TemplateTypeParmDecl 0x563ae86e7850 <line:1123:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXConstructorDecl 0x563ae86e7b58 <line:1124:5, line:1128:5> line:1124:5 BoundedIntArg 'void (T, T, int)'
| | |-ParmVarDecl 0x563ae86e78f8 <col:19, col:21> col:21 referenced min_value 'T'
| | |-ParmVarDecl 0x563ae86e7970 <col:32, col:34> col:34 referenced max_value 'T'
| | |-ParmVarDecl 0x563ae86e79f0 <col:45, col:53> col:49 referenced b 'int' cinit
| | | `-IntegerLiteral 0x563ae86e8798 <col:53> 'int' 0
| | |-CXXCtorInitializer 'IntArg'
| | | `-ParenListExpr 0x563ae86e87f8 <line:1125:17, col:19> 'NULL TYPE'
| | |   `-DeclRefExpr 0x563ae86e87d8 <col:18> 'int' lvalue ParmVar 0x563ae86e79f0 'b' 'int'
| | |-CXXCtorInitializer Field 0x563ae86e8670 'min_value' 'click_intmax_t':'long long'
| | | `-ParenListExpr 0x563ae86e88b8 <col:31, col:41> 'NULL TYPE'
| | |   `-DeclRefExpr 0x563ae86e8898 <col:32> 'T' lvalue ParmVar 0x563ae86e78f8 'min_value' 'T'
| | |-CXXCtorInitializer Field 0x563ae86e86d0 'max_value' 'click_intmax_t':'long long'
| | | `-ParenListExpr 0x563ae86e8920 <col:53, col:63> 'NULL TYPE'
| | |   `-DeclRefExpr 0x563ae86e8900 <col:54> 'T' lvalue ParmVar 0x563ae86e7970 'max_value' 'T'
| | `-CompoundStmt 0x563ae86e8c88 <col:65, line:1128:5>
| |   |-DeclStmt 0x563ae86e8b08 <line:1126:9, col:97>
| |   | `-StaticAssertDecl 0x563ae86e8ac8 <col:9, col:96> col:9
| |   |   |-CXXDependentScopeMemberExpr 0x563ae86e8a40 <col:23, col:42> '<dependent type>' lvalue ->is_integral
| |   |   `-StringLiteral 0x563ae86e8a88 <col:55> 'const char [40]' lvalue "BoundedIntArg argument must be integral"
| |   `-BinaryOperator 0x563ae86e8c68 <line:1127:9, col:40> '<dependent type>' '='
| |     |-MemberExpr 0x563ae86e8b30 <col:9> 'bool' lvalue ->is_signed 0x563ae86e8730
| |     | `-CXXThisExpr 0x563ae86e8b20 <col:9> 'BoundedIntArg *' implicit this
| |     `-CXXDependentScopeMemberExpr 0x563ae86e8c20 <col:21, col:40> '<dependent type>' lvalue ->is_signed
| `-CXXConstructorDecl 0x563ae87252e8 <line:1124:5, line:1128:5> line:1124:5 used BoundedIntArg 'void (int, int, int)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x563ae87250e8 <col:19, col:21> col:21 min_value 'int':'int'
|   |-ParmVarDecl 0x563ae8725160 <col:32, col:34> col:34 max_value 'int':'int'
|   `-ParmVarDecl 0x563ae87251c8 <col:45, col:53> col:49 b 'int' cinit
|     `-IntegerLiteral 0x563ae86e8798 <col:53> 'int' 0
|-FunctionTemplateDecl 0x563ae86e7fb8 <line:1130:5, line:1145:5> line:1131:10 parse
| |-TemplateTypeParmDecl 0x563ae86e7c70 <line:1130:15, col:24> col:24 referenced typename depth 0 index 0 V
| `-CXXMethodDecl 0x563ae86e7f18 <line:1131:5, line:1145:5> line:1131:10 parse 'bool (const String &, V &, const ArgContext &)'
|   |-ParmVarDecl 0x563ae86e7d18 <col:16, col:30> col:30 referenced str 'const String &'
|   |-ParmVarDecl 0x563ae86e7db8 <col:35, col:38> col:38 referenced result 'V &'
|   |-ParmVarDecl 0x563ae86e7e30 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
|   | `-DeclRefExpr 0x563ae86e87b8 <col:71> 'const ArgContext' lvalue Var 0x563ae86d8c68 'blank_args' 'const ArgContext'
|   `-CompoundStmt 0x563ae86e9778 <col:83, line:1145:5>
|     |-DeclStmt 0x563ae86e8d20 <line:1132:9, col:12>
|     | `-VarDecl 0x563ae86e8cb8 <col:9, col:11> col:11 referenced x 'V'
|     `-IfStmt 0x563ae86e9750 <line:1133:9, line:1144:9> has_else
|       |-UnaryOperator 0x563ae86e8e90 <line:1133:13, col:40> '<dependent type>' prefix '!' cannot overflow
|       | `-CallExpr 0x563ae86e8e58 <col:14, col:40> '<dependent type>'
|       |   |-UnresolvedMemberExpr 0x563ae86e8d98 <col:14, col:22> '<bound member function type>' lvalue
|       |   |-DeclRefExpr 0x563ae86e8df8 <col:28> 'const String' lvalue ParmVar 0x563ae86e7d18 'str' 'const String &'
|       |   |-DeclRefExpr 0x563ae86e8e18 <col:33> 'V' lvalue Var 0x563ae86e8cb8 'x' 'V'
|       |   `-DeclRefExpr 0x563ae86e8e38 <col:36> 'const ArgContext' lvalue ParmVar 0x563ae86e7e30 'args' 'const ArgContext &'
|       |-ReturnStmt 0x563ae86e8eb8 <line:1134:13, col:20>
|       | `-CXXBoolLiteralExpr 0x563ae86e8ea8 <col:20> 'bool' false
|       `-IfStmt 0x563ae86e9728 <line:1135:14, line:1144:9> has_else
|         |-UnaryOperator 0x563ae86e90f0 <line:1135:18, col:68> '<dependent type>' prefix '!' cannot overflow
|         | `-CallExpr 0x563ae86e90c8 <col:19, col:68> '<dependent type>'
|         |   |-UnresolvedMemberExpr 0x563ae86e8ed8 <col:19> '<bound member function type>' lvalue
|         |   `-CXXUnresolvedConstructExpr 0x563ae86e90a0 <col:29, col:67> 'typename integer_traits<V>::max_type' 'typename integer_traits<V>::max_type'
|         |     `-DeclRefExpr 0x563ae86e9080 <col:66> 'V' lvalue Var 0x563ae86e8cb8 'x' 'V'
|         |-CompoundStmt 0x563ae86e9290 <col:71, line:1138:9>
|         | |-CXXMemberCallExpr 0x563ae86e91e8 <line:1136:13, col:51> 'void'
|         | | |-MemberExpr 0x563ae86e9118 <col:13> '<bound member function type>' ->range_error 0x563ae86e4ab8
|         | | | `-ImplicitCastExpr 0x563ae86e9220 <col:13> 'IntArg *' <UncheckedDerivedToBase (IntArg)>
|         | | |   `-CXXThisExpr 0x563ae86e9108 <col:13> 'BoundedIntArg *' implicit this
|         | | |-DeclRefExpr 0x563ae86e9148 <col:25> 'const ArgContext' lvalue ParmVar 0x563ae86e7e30 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x563ae86e9240 <col:31> 'bool' <LValueToRValue>
|         | | | `-MemberExpr 0x563ae86e9178 <col:31> 'bool' lvalue ->is_signed 0x563ae86e8730
|         | | |   `-CXXThisExpr 0x563ae86e9168 <col:31> 'BoundedIntArg *' implicit this
|         | | `-ImplicitCastExpr 0x563ae86e9258 <col:42> 'click_intmax_t':'long long' <LValueToRValue>
|         | |   `-MemberExpr 0x563ae86e91b8 <col:42> 'click_intmax_t':'long long' lvalue ->min_value 0x563ae86e8670
|         | |     `-CXXThisExpr 0x563ae86e91a8 <col:42> 'BoundedIntArg *' implicit this
|         | `-ReturnStmt 0x563ae86e9280 <line:1137:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x563ae86e9270 <col:20> 'bool' false
|         `-IfStmt 0x563ae86e9700 <line:1138:16, line:1144:9> has_else
|           |-UnaryOperator 0x563ae86e94a0 <line:1138:20, col:70> '<dependent type>' prefix '!' cannot overflow
|           | `-CallExpr 0x563ae86e9478 <col:21, col:70> '<dependent type>'
|           |   |-UnresolvedMemberExpr 0x563ae86e92c0 <col:21> '<bound member function type>' lvalue
|           |   `-CXXUnresolvedConstructExpr 0x563ae86e9450 <col:31, col:69> 'typename integer_traits<V>::max_type' 'typename integer_traits<V>::max_type'
|           |     `-DeclRefExpr 0x563ae86e9430 <col:68> 'V' lvalue Var 0x563ae86e8cb8 'x' 'V'
|           |-CompoundStmt 0x563ae86e9640 <col:73, line:1141:9>
|           | |-CXXMemberCallExpr 0x563ae86e9598 <line:1139:13, col:51> 'void'
|           | | |-MemberExpr 0x563ae86e94c8 <col:13> '<bound member function type>' ->range_error 0x563ae86e4ab8
|           | | | `-ImplicitCastExpr 0x563ae86e95d0 <col:13> 'IntArg *' <UncheckedDerivedToBase (IntArg)>
|           | | |   `-CXXThisExpr 0x563ae86e94b8 <col:13> 'BoundedIntArg *' implicit this
|           | | |-DeclRefExpr 0x563ae86e94f8 <col:25> 'const ArgContext' lvalue ParmVar 0x563ae86e7e30 'args' 'const ArgContext &'
|           | | |-ImplicitCastExpr 0x563ae86e95f0 <col:31> 'bool' <LValueToRValue>
|           | | | `-MemberExpr 0x563ae86e9528 <col:31> 'bool' lvalue ->is_signed 0x563ae86e8730
|           | | |   `-CXXThisExpr 0x563ae86e9518 <col:31> 'BoundedIntArg *' implicit this
|           | | `-ImplicitCastExpr 0x563ae86e9608 <col:42> 'click_intmax_t':'long long' <LValueToRValue>
|           | |   `-MemberExpr 0x563ae86e9568 <col:42> 'click_intmax_t':'long long' lvalue ->max_value 0x563ae86e86d0
|           | |     `-CXXThisExpr 0x563ae86e9558 <col:42> 'BoundedIntArg *' implicit this
|           | `-ReturnStmt 0x563ae86e9630 <line:1140:13, col:20>
|           |   `-CXXBoolLiteralExpr 0x563ae86e9620 <col:20> 'bool' false
|           `-CompoundStmt 0x563ae86e96e0 <line:1141:16, line:1144:9>
|             |-BinaryOperator 0x563ae86e96a0 <line:1142:13, col:22> '<dependent type>' '='
|             | |-DeclRefExpr 0x563ae86e9660 <col:13> 'V' lvalue ParmVar 0x563ae86e7db8 'result' 'V &'
|             | `-DeclRefExpr 0x563ae86e9680 <col:22> 'V' lvalue Var 0x563ae86e8cb8 'x' 'V'
|             `-ReturnStmt 0x563ae86e96d0 <line:1143:13, col:20>
|               `-CXXBoolLiteralExpr 0x563ae86e96c0 <col:20> 'bool' true
|-CXXMethodDecl 0x563ae86e8158 <line:1147:5, line:1152:5> line:1147:17 check_min 'bool (click_int_large_t) const' inline
| |-ParmVarDecl 0x563ae86e8038 <col:27, col:45> col:45 used x 'click_int_large_t':'long long'
| `-CompoundStmt 0x563ae86e9ae8 <col:54, line:1152:5>
|   `-IfStmt 0x563ae86e9ac0 <line:1148:9, line:1151:83> has_else
|     |-ImplicitCastExpr 0x563ae86e97d8 <line:1148:13> 'bool' <LValueToRValue>
|     | `-MemberExpr 0x563ae86e97a8 <col:13> 'const bool' lvalue ->is_signed 0x563ae86e8730
|     |   `-CXXThisExpr 0x563ae86e9798 <col:13> 'const BoundedIntArg *' implicit this
|     |-ReturnStmt 0x563ae86e98a0 <line:1149:13, col:25>
|     | `-BinaryOperator 0x563ae86e9880 <col:20, col:25> 'bool' '>='
|     |   |-ImplicitCastExpr 0x563ae86e9850 <col:20> 'click_int_large_t':'long long' <LValueToRValue>
|     |   | `-DeclRefExpr 0x563ae86e97f0 <col:20> 'click_int_large_t':'long long' lvalue ParmVar 0x563ae86e8038 'x' 'click_int_large_t':'long long'
|     |   `-ImplicitCastExpr 0x563ae86e9868 <col:25> 'click_intmax_t':'long long' <LValueToRValue>
|     |     `-MemberExpr 0x563ae86e9820 <col:25> 'const click_intmax_t':'const long long' lvalue ->min_value 0x563ae86e8670
|     |       `-CXXThisExpr 0x563ae86e9810 <col:25> 'const BoundedIntArg *' implicit this
|     `-ReturnStmt 0x563ae86e9ab0 <line:1151:13, col:83>
|       `-BinaryOperator 0x563ae86e9a90 <col:20, col:83> 'bool' '&&'
|         |-BinaryOperator 0x563ae86e9920 <col:20, col:25> 'bool' '>='
|         | |-ImplicitCastExpr 0x563ae86e98f0 <col:20> 'click_int_large_t':'long long' <LValueToRValue>
|         | | `-DeclRefExpr 0x563ae86e98b0 <col:20> 'click_int_large_t':'long long' lvalue ParmVar 0x563ae86e8038 'x' 'click_int_large_t':'long long'
|         | `-ImplicitCastExpr 0x563ae86e9908 <col:25> 'long long' <IntegralCast>
|         |   `-IntegerLiteral 0x563ae86e98d0 <col:25> 'int' 0
|         `-BinaryOperator 0x563ae86e9a70 <col:30, col:83> 'bool' '>='
|           |-CXXFunctionalCastExpr 0x563ae86e99a0 <col:30, col:50> 'click_uint_large_t':'unsigned long long' functional cast to click_uint_large_t <NoOp>
|           | `-ImplicitCastExpr 0x563ae86e9988 <col:49> 'click_uint_large_t':'unsigned long long' <IntegralCast> part_of_explicit_cast
|           |   `-ImplicitCastExpr 0x563ae86e9970 <col:49> 'click_int_large_t':'long long' <LValueToRValue> part_of_explicit_cast
|           |     `-DeclRefExpr 0x563ae86e9950 <col:49> 'click_int_large_t':'long long' lvalue ParmVar 0x563ae86e8038 'x' 'click_int_large_t':'long long'
|           `-CXXFunctionalCastExpr 0x563ae86e9a48 <col:55, col:83> 'click_uint_large_t':'unsigned long long' functional cast to click_uint_large_t <NoOp>
|             `-ImplicitCastExpr 0x563ae86e9a30 <col:74> 'click_uint_large_t':'unsigned long long' <IntegralCast> part_of_explicit_cast
|               `-ImplicitCastExpr 0x563ae86e9a18 <col:74> 'click_intmax_t':'long long' <LValueToRValue> part_of_explicit_cast
|                 `-MemberExpr 0x563ae86e99e8 <col:74> 'const click_intmax_t':'const long long' lvalue ->min_value 0x563ae86e8670
|                   `-CXXThisExpr 0x563ae86e99d8 <col:74> 'const BoundedIntArg *' implicit this
|-CXXMethodDecl 0x563ae86e8328 <line:1153:5, line:1158:5> line:1153:17 check_min 'bool (click_uint_large_t) const' inline
| |-ParmVarDecl 0x563ae86e8230 <col:27, col:46> col:46 used x 'click_uint_large_t':'unsigned long long'
| `-CompoundStmt 0x563ae86e9ea8 <col:55, line:1158:5>
|   `-IfStmt 0x563ae86e9e80 <line:1154:9, line:1157:73> has_else
|     |-ImplicitCastExpr 0x563ae86e9b40 <line:1154:13> 'bool' <LValueToRValue>
|     | `-MemberExpr 0x563ae86e9b10 <col:13> 'const bool' lvalue ->is_signed 0x563ae86e8730
|     |   `-CXXThisExpr 0x563ae86e9b00 <col:13> 'const BoundedIntArg *' implicit this
|     |-ReturnStmt 0x563ae86e9d28 <line:1155:13, col:70>
|     | `-BinaryOperator 0x563ae86e9d08 <col:20, col:70> 'bool' '||'
|     |   |-BinaryOperator 0x563ae86e9be8 <col:20, col:32> 'bool' '<'
|     |   | |-ImplicitCastExpr 0x563ae86e9bb8 <col:20> 'click_intmax_t':'long long' <LValueToRValue>
|     |   | | `-MemberExpr 0x563ae86e9b68 <col:20> 'const click_intmax_t':'const long long' lvalue ->min_value 0x563ae86e8670
|     |   | |   `-CXXThisExpr 0x563ae86e9b58 <col:20> 'const BoundedIntArg *' implicit this
|     |   | `-ImplicitCastExpr 0x563ae86e9bd0 <col:32> 'long long' <IntegralCast>
|     |   |   `-IntegerLiteral 0x563ae86e9b98 <col:32> 'int' 0
|     |   `-BinaryOperator 0x563ae86e9ce8 <col:37, col:70> 'bool' '>='
|     |     |-ImplicitCastExpr 0x563ae86e9cd0 <col:37> 'click_uint_large_t':'unsigned long long' <LValueToRValue>
|     |     | `-DeclRefExpr 0x563ae86e9c08 <col:37> 'click_uint_large_t':'unsigned long long' lvalue ParmVar 0x563ae86e8230 'x' 'click_uint_large_t':'unsigned long long'
|     |     `-CXXFunctionalCastExpr 0x563ae86e9ca8 <col:42, col:70> 'click_uint_large_t':'unsigned long long' functional cast to click_uint_large_t <NoOp>
|     |       `-ImplicitCastExpr 0x563ae86e9c90 <col:61> 'click_uint_large_t':'unsigned long long' <IntegralCast> part_of_explicit_cast
|     |         `-ImplicitCastExpr 0x563ae86e9c78 <col:61> 'click_intmax_t':'long long' <LValueToRValue> part_of_explicit_cast
|     |           `-MemberExpr 0x563ae86e9c48 <col:61> 'const click_intmax_t':'const long long' lvalue ->min_value 0x563ae86e8670
|     |             `-CXXThisExpr 0x563ae86e9c38 <col:61> 'const BoundedIntArg *' implicit this
|     `-ReturnStmt 0x563ae86e9e70 <line:1157:13, col:73>
|       `-BinaryOperator 0x563ae86e9e50 <col:20, col:73> 'bool' '>='
|         |-CXXFunctionalCastExpr 0x563ae86e9d80 <col:20, col:40> 'click_uint_large_t':'unsigned long long' functional cast to click_uint_large_t <NoOp>
|         | `-ImplicitCastExpr 0x563ae86e9d68 <col:39> 'click_uint_large_t':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|         |   `-DeclRefExpr 0x563ae86e9d48 <col:39> 'click_uint_large_t':'unsigned long long' lvalue ParmVar 0x563ae86e8230 'x' 'click_uint_large_t':'unsigned long long'
|         `-CXXFunctionalCastExpr 0x563ae86e9e28 <col:45, col:73> 'click_uint_large_t':'unsigned long long' functional cast to click_uint_large_t <NoOp>
|           `-ImplicitCastExpr 0x563ae86e9e10 <col:64> 'click_uint_large_t':'unsigned long long' <IntegralCast> part_of_explicit_cast
|             `-ImplicitCastExpr 0x563ae86e9df8 <col:64> 'click_intmax_t':'long long' <LValueToRValue> part_of_explicit_cast
|               `-MemberExpr 0x563ae86e9dc8 <col:64> 'const click_intmax_t':'const long long' lvalue ->min_value 0x563ae86e8670
|                 `-CXXThisExpr 0x563ae86e9db8 <col:64> 'const BoundedIntArg *' implicit this
|-CXXMethodDecl 0x563ae86e8470 <line:1159:5, line:1164:5> line:1159:17 check_max 'bool (click_int_large_t) const' inline
| |-ParmVarDecl 0x563ae86e83e0 <col:27, col:45> col:45 used x 'click_int_large_t':'long long'
| `-CompoundStmt 0x563ae86ea210 <col:54, line:1164:5>
|   `-IfStmt 0x563ae86ea1e8 <line:1160:9, line:1163:83> has_else
|     |-ImplicitCastExpr 0x563ae86e9f00 <line:1160:13> 'bool' <LValueToRValue>
|     | `-MemberExpr 0x563ae86e9ed0 <col:13> 'const bool' lvalue ->is_signed 0x563ae86e8730
|     |   `-CXXThisExpr 0x563ae86e9ec0 <col:13> 'const BoundedIntArg *' implicit this
|     |-ReturnStmt 0x563ae86e9fc8 <line:1161:13, col:25>
|     | `-BinaryOperator 0x563ae86e9fa8 <col:20, col:25> 'bool' '<='
|     |   |-ImplicitCastExpr 0x563ae86e9f78 <col:20> 'click_int_large_t':'long long' <LValueToRValue>
|     |   | `-DeclRefExpr 0x563ae86e9f18 <col:20> 'click_int_large_t':'long long' lvalue ParmVar 0x563ae86e83e0 'x' 'click_int_large_t':'long long'
|     |   `-ImplicitCastExpr 0x563ae86e9f90 <col:25> 'click_intmax_t':'long long' <LValueToRValue>
|     |     `-MemberExpr 0x563ae86e9f48 <col:25> 'const click_intmax_t':'const long long' lvalue ->max_value 0x563ae86e86d0
|     |       `-CXXThisExpr 0x563ae86e9f38 <col:25> 'const BoundedIntArg *' implicit this
|     `-ReturnStmt 0x563ae86ea1d8 <line:1163:13, col:83>
|       `-BinaryOperator 0x563ae86ea1b8 <col:20, col:83> 'bool' '&&'
|         |-BinaryOperator 0x563ae86ea048 <col:20, col:25> 'bool' '>='
|         | |-ImplicitCastExpr 0x563ae86ea018 <col:20> 'click_int_large_t':'long long' <LValueToRValue>
|         | | `-DeclRefExpr 0x563ae86e9fd8 <col:20> 'click_int_large_t':'long long' lvalue ParmVar 0x563ae86e83e0 'x' 'click_int_large_t':'long long'
|         | `-ImplicitCastExpr 0x563ae86ea030 <col:25> 'long long' <IntegralCast>
|         |   `-IntegerLiteral 0x563ae86e9ff8 <col:25> 'int' 0
|         `-BinaryOperator 0x563ae86ea198 <col:30, col:83> 'bool' '<='
|           |-CXXFunctionalCastExpr 0x563ae86ea0c8 <col:30, col:50> 'click_uint_large_t':'unsigned long long' functional cast to click_uint_large_t <NoOp>
|           | `-ImplicitCastExpr 0x563ae86ea0b0 <col:49> 'click_uint_large_t':'unsigned long long' <IntegralCast> part_of_explicit_cast
|           |   `-ImplicitCastExpr 0x563ae86ea098 <col:49> 'click_int_large_t':'long long' <LValueToRValue> part_of_explicit_cast
|           |     `-DeclRefExpr 0x563ae86ea078 <col:49> 'click_int_large_t':'long long' lvalue ParmVar 0x563ae86e83e0 'x' 'click_int_large_t':'long long'
|           `-CXXFunctionalCastExpr 0x563ae86ea170 <col:55, col:83> 'click_uint_large_t':'unsigned long long' functional cast to click_uint_large_t <NoOp>
|             `-ImplicitCastExpr 0x563ae86ea158 <col:74> 'click_uint_large_t':'unsigned long long' <IntegralCast> part_of_explicit_cast
|               `-ImplicitCastExpr 0x563ae86ea140 <col:74> 'click_intmax_t':'long long' <LValueToRValue> part_of_explicit_cast
|                 `-MemberExpr 0x563ae86ea110 <col:74> 'const click_intmax_t':'const long long' lvalue ->max_value 0x563ae86e86d0
|                   `-CXXThisExpr 0x563ae86ea100 <col:74> 'const BoundedIntArg *' implicit this
|-CXXMethodDecl 0x563ae86e85b8 <line:1165:5, line:1170:5> line:1165:17 check_max 'bool (click_uint_large_t) const' inline
| |-ParmVarDecl 0x563ae86e8528 <col:27, col:46> col:46 used x 'click_uint_large_t':'unsigned long long'
| `-CompoundStmt 0x563ae86ea5d0 <col:55, line:1170:5>
|   `-IfStmt 0x563ae86ea5a8 <line:1166:9, line:1169:73> has_else
|     |-ImplicitCastExpr 0x563ae86ea268 <line:1166:13> 'bool' <LValueToRValue>
|     | `-MemberExpr 0x563ae86ea238 <col:13> 'const bool' lvalue ->is_signed 0x563ae86e8730
|     |   `-CXXThisExpr 0x563ae86ea228 <col:13> 'const BoundedIntArg *' implicit this
|     |-ReturnStmt 0x563ae86ea450 <line:1167:13, col:71>
|     | `-BinaryOperator 0x563ae86ea430 <col:20, col:71> 'bool' '&&'
|     |   |-BinaryOperator 0x563ae86ea310 <col:20, col:33> 'bool' '>='
|     |   | |-ImplicitCastExpr 0x563ae86ea2e0 <col:20> 'click_intmax_t':'long long' <LValueToRValue>
|     |   | | `-MemberExpr 0x563ae86ea290 <col:20> 'const click_intmax_t':'const long long' lvalue ->max_value 0x563ae86e86d0
|     |   | |   `-CXXThisExpr 0x563ae86ea280 <col:20> 'const BoundedIntArg *' implicit this
|     |   | `-ImplicitCastExpr 0x563ae86ea2f8 <col:33> 'long long' <IntegralCast>
|     |   |   `-IntegerLiteral 0x563ae86ea2c0 <col:33> 'int' 0
|     |   `-BinaryOperator 0x563ae86ea410 <col:38, col:71> 'bool' '<='
|     |     |-ImplicitCastExpr 0x563ae86ea3f8 <col:38> 'click_uint_large_t':'unsigned long long' <LValueToRValue>
|     |     | `-DeclRefExpr 0x563ae86ea330 <col:38> 'click_uint_large_t':'unsigned long long' lvalue ParmVar 0x563ae86e8528 'x' 'click_uint_large_t':'unsigned long long'
|     |     `-CXXFunctionalCastExpr 0x563ae86ea3d0 <col:43, col:71> 'click_uint_large_t':'unsigned long long' functional cast to click_uint_large_t <NoOp>
|     |       `-ImplicitCastExpr 0x563ae86ea3b8 <col:62> 'click_uint_large_t':'unsigned long long' <IntegralCast> part_of_explicit_cast
|     |         `-ImplicitCastExpr 0x563ae86ea3a0 <col:62> 'click_intmax_t':'long long' <LValueToRValue> part_of_explicit_cast
|     |           `-MemberExpr 0x563ae86ea370 <col:62> 'const click_intmax_t':'const long long' lvalue ->max_value 0x563ae86e86d0
|     |             `-CXXThisExpr 0x563ae86ea360 <col:62> 'const BoundedIntArg *' implicit this
|     `-ReturnStmt 0x563ae86ea598 <line:1169:13, col:73>
|       `-BinaryOperator 0x563ae86ea578 <col:20, col:73> 'bool' '<='
|         |-CXXFunctionalCastExpr 0x563ae86ea4a8 <col:20, col:40> 'click_uint_large_t':'unsigned long long' functional cast to click_uint_large_t <NoOp>
|         | `-ImplicitCastExpr 0x563ae86ea490 <col:39> 'click_uint_large_t':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|         |   `-DeclRefExpr 0x563ae86ea470 <col:39> 'click_uint_large_t':'unsigned long long' lvalue ParmVar 0x563ae86e8528 'x' 'click_uint_large_t':'unsigned long long'
|         `-CXXFunctionalCastExpr 0x563ae86ea550 <col:45, col:73> 'click_uint_large_t':'unsigned long long' functional cast to click_uint_large_t <NoOp>
|           `-ImplicitCastExpr 0x563ae86ea538 <col:64> 'click_uint_large_t':'unsigned long long' <IntegralCast> part_of_explicit_cast
|             `-ImplicitCastExpr 0x563ae86ea520 <col:64> 'click_intmax_t':'long long' <LValueToRValue> part_of_explicit_cast
|               `-MemberExpr 0x563ae86ea4f0 <col:64> 'const click_intmax_t':'const long long' lvalue ->max_value 0x563ae86e86d0
|                 `-CXXThisExpr 0x563ae86ea4e0 <col:64> 'const BoundedIntArg *' implicit this
|-FieldDecl 0x563ae86e8670 <line:1172:5, col:20> col:20 referenced min_value 'click_intmax_t':'long long'
|-FieldDecl 0x563ae86e86d0 <line:1173:5, col:20> col:20 referenced max_value 'click_intmax_t':'long long'
|-FieldDecl 0x563ae86e8730 <line:1174:5, col:10> col:10 referenced is_signed 'bool'
|-CXXConstructorDecl 0x563ae8724bd8 <line:1122:7> col:7 implicit constexpr BoundedIntArg 'void (const BoundedIntArg &)' inline default trivial noexcept-unevaluated 0x563ae8724bd8
| `-ParmVarDecl 0x563ae8724ce8 <col:7> col:7 'const BoundedIntArg &'
|-CXXConstructorDecl 0x563ae8724e68 <col:7> col:7 implicit used constexpr BoundedIntArg 'void (BoundedIntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x563ae8724f78 <col:7> col:7 used 'BoundedIntArg &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x563ae8725e90 <col:7> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x563ae8725bb0 <col:7> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x563ae8725b80 <col:7> 'BoundedIntArg' xvalue static_cast<class BoundedIntArg &&> <NoOp>
| |       `-DeclRefExpr 0x563ae8725b50 <col:7> 'BoundedIntArg' lvalue ParmVar 0x563ae8724f78 '' 'BoundedIntArg &&'
| |-CXXCtorInitializer Field 0x563ae86e8670 'min_value' 'click_intmax_t':'long long'
| | `-ImplicitCastExpr 0x563ae8725f88 <col:7> 'click_intmax_t':'long long' <LValueToRValue>
| |   `-MemberExpr 0x563ae8725f58 <col:7> 'click_intmax_t':'long long' xvalue .min_value 0x563ae86e8670
| |     `-CXXStaticCastExpr 0x563ae8725f28 <col:7> 'BoundedIntArg' xvalue static_cast<class BoundedIntArg &&> <NoOp>
| |       `-DeclRefExpr 0x563ae8725ef8 <col:7> 'BoundedIntArg' lvalue ParmVar 0x563ae8724f78 '' 'BoundedIntArg &&'
| |-CXXCtorInitializer Field 0x563ae86e86d0 'max_value' 'click_intmax_t':'long long'
| | `-ImplicitCastExpr 0x563ae8726058 <col:7> 'click_intmax_t':'long long' <LValueToRValue>
| |   `-MemberExpr 0x563ae8726028 <col:7> 'click_intmax_t':'long long' xvalue .max_value 0x563ae86e86d0
| |     `-CXXStaticCastExpr 0x563ae8725ff8 <col:7> 'BoundedIntArg' xvalue static_cast<class BoundedIntArg &&> <NoOp>
| |       `-DeclRefExpr 0x563ae8725fc8 <col:7> 'BoundedIntArg' lvalue ParmVar 0x563ae8724f78 '' 'BoundedIntArg &&'
| |-CXXCtorInitializer Field 0x563ae86e8730 'is_signed' 'bool'
| | `-ImplicitCastExpr 0x563ae8726128 <col:7> 'bool' <LValueToRValue>
| |   `-MemberExpr 0x563ae87260f8 <col:7> 'bool' xvalue .is_signed 0x563ae86e8730
| |     `-CXXStaticCastExpr 0x563ae87260c8 <col:7> 'BoundedIntArg' xvalue static_cast<class BoundedIntArg &&> <NoOp>
| |       `-DeclRefExpr 0x563ae8726098 <col:7> 'BoundedIntArg' lvalue ParmVar 0x563ae8724f78 '' 'BoundedIntArg &&'
| `-CompoundStmt 0x563ae8726188 <col:7>
`-CXXDestructorDecl 0x563ae8725468 <col:7> col:7 implicit referenced ~BoundedIntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.BoundedIntArg = type <{ %class.IntArg, i64, i64, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.BoundedIntArg.base = type <{ %class.IntArg, i64, i64, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563ae83e6c60 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563ae83e6d78 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x563ae83e6e08 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x563ae83e6ed8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x563ae83e6fc0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x563ae83e71d8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x563ae83e7080 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563ae83e7388 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x563ae83e7290 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x563ae83e74d0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x563ae83e7440 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x563ae83e7618 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x563ae83e7588 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563ae83e7760 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x563ae83e76d0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563ae83e7828 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x563ae83e7970 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x563ae83e78e0 <col:28> col:31 'int'
|-CXXMethodDecl 0x563ae83e7a38 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x563ae83e7b80 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x563ae83e7af0 <col:28> col:31 'int'
|-CXXMethodDecl 0x563ae83e7cf8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x563ae83e7c38 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563ae83e7e40 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x563ae83e7db0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563ae83e7f08 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x563ae83e80c8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x563ae83e7fb8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x563ae83e8030 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563ae83e8318 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x563ae83e8188 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x563ae83e8200 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x563ae83e83c8 <col:86> "" ""
|-CXXMethodDecl 0x563ae83e8638 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x563ae83e84a8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x563ae83e8520 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563ae83e87e8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x563ae83e86f8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x563ae83e8998 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x563ae83e88a0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x563ae83e8c68 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x563ae83e8a50 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x563ae83e8ac8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x563ae83e8b40 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563ae83e8f48 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x563ae83e8d30 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x563ae83e8da8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x563ae83e8e20 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x563ae83e9000 <col:115> "" ""
|-AccessSpecDecl 0x563ae83e9070 <line:84:3, col:10> col:3 private
|-FieldDecl 0x563ae83e90a8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563ae83ea5c0 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x563ae83ea5c0
| `-ParmVarDecl 0x563ae83ea6c8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x563ae83ea768 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x563ae83ea768
| `-ParmVarDecl 0x563ae83ea878 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x563ae841fea8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x563ae8611ca0 <col:7>
|-CXXConstructorDecl 0x563ae841ff80 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x563ae841ff80
| `-ParmVarDecl 0x563ae8420098 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x563ae8420108 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x563ae8420108
| `-ParmVarDecl 0x563ae8420218 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x563ae86146a0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563ae8600848 prev 0x563ae85f5a50 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563ae8600940 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x563ae8600a30 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x563ae8600b58 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x563ae8600cd8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x563ae8600e58 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x563ae8600fd8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x563ae8611e08 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x563ae8612678 <col:11>
|-CXXDestructorDecl 0x563ae8611ee0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x563ae8612018 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x563ae8612018
| `-ParmVarDecl 0x563ae8612128 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x563ae86121c8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x563ae86121c8
| `-ParmVarDecl 0x563ae86122d8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x563ae8615098 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x563ae86151a8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x563ae8615428 <col:11>
|   `-ReturnStmt 0x563ae8615418 <col:11>
|     `-UnaryOperator 0x563ae8615400 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x563ae86153f0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x563ae8615218 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x563ae8615218
  `-ParmVarDecl 0x563ae8615328 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563ae8601040 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563ae8601158 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x563ae86011f8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x563ae8601260 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x563ae86012c8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x563ae8601330 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x563ae8601390 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x563ae8601450 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x563ae86014b0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x563ae8601510 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x563ae8611d18 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x563ae86011f8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x563ae8612688 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x563ae86126e0 <col:12>
|-CXXConstructorDecl 0x563ae8612348 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x563ae8612348
| `-ParmVarDecl 0x563ae8612458 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x563ae86124f8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x563ae86124f8
| `-ParmVarDecl 0x563ae8612608 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x563ae8614780 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563ae85ef160 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x563ae85ef278 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x563ae85ef308 <col:16, col:22> col:16 public
|-EnumDecl 0x563ae85ef330 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x563ae85ef430 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x563ae85ef510 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae85ef410 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x563ae85ef3f0 <col:21> 'int' 28
| `-EnumConstantDecl 0x563ae85ef4c0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x563ae85ef528 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563ae85ef4a0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x563ae85ef480 <col:22> 'int' 64
|-CXXMethodDecl 0x563ae85ef868 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x563ae85ef550 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x563ae85ef5d0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x563ae85ef648 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x563ae85ef6c0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x563ae85ef928 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x563ae85efb28 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x563ae85ef9a0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x563ae85efa18 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x563ae85efbd8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x563ae85efd38 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x563ae85efc48 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x563ae85efde0 <col:72> warn_unused_result ""
|-TypedefDecl 0x563ae85f0140 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x563ae85f00d0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x563ae85f0070 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x563ae85f0030 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x563ae80c62d0 'void'
|       |-PointerType 0x563ae836f500 'unsigned char *'
|       | `-BuiltinType 0x563ae80c63d0 'unsigned char'
|       |-TypedefType 0x563ae816ba70 'size_t' sugar
|       | |-Typedef 0x563ae8136b20 'size_t'
|       | `-BuiltinType 0x563ae80c6430 'unsigned long'
|       `-PointerType 0x563ae80c6ad0 'void *'
|         `-BuiltinType 0x563ae80c62d0 'void'
|-CXXMethodDecl 0x563ae85f05b8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x563ae85f01b0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x563ae85f0228 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x563ae85f02c0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x563ae85f0340 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x563ae860acb0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x563ae860ac98 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x563ae860ac60 <col:58> 'int' 0
| |-ParmVarDecl 0x563ae85f03c0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x563ae860acd8 <col:76> 'int' 0
| |-ParmVarDecl 0x563ae85f0440 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x563ae860acf8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x563ae85f0688 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x563ae85f0708 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x563ae85f07c8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x563ae85f0868 <col:20>
| `-OptimizeNoneAttr 0x563ae85f08c0 <col:30>
|-CXXMethodDecl 0x563ae85f0938 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x563ae85f09d8 <col:20>
| `-OptimizeNoneAttr 0x563ae85f0a30 <col:30>
|-CXXMethodDecl 0x563ae85f0aa8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x563ae85f0b48 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x563ae85f0bf8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x563ae85f0c98 <col:20>
| |-OptimizeNoneAttr 0x563ae85f0cf0 <col:30>
| `-WarnUnusedResultAttr 0x563ae85f0d18 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x563ae85f0d70 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x563ae85f0e10 <col:20>
| `-OptimizeNoneAttr 0x563ae85f0e68 <col:30>
|-CXXMethodDecl 0x563ae85f0eb8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x563ae85f0f58 <col:20>
| `-OptimizeNoneAttr 0x563ae85f0fb0 <col:30>
|-CXXMethodDecl 0x563ae85f0ff8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x563ae85f1098 <col:20>
| `-OptimizeNoneAttr 0x563ae85f10f0 <col:30>
|-CXXMethodDecl 0x563ae85f1138 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x563ae85f11f8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x563ae85f12c0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x563ae85f1388 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x563ae85f1448 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x563ae85f1568 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x563ae860adc0 <col:54, line:99:5>
|   `-ReturnStmt 0x563ae860adb0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x563ae860ad98 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x563ae860ad68 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x563ae8601848
|         `-CXXThisExpr 0x563ae860ad58 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x563ae85f1708 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x563ae85f1618 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x563ae860ae70 <col:67, line:103:5>
|   `-BinaryOperator 0x563ae860ae50 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x563ae860ade8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x563ae8601848
|     | `-CXXThisExpr 0x563ae860add8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x563ae860ae38 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x563ae860ae18 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x563ae85f1618 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x563ae85f1800 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x563ae860aef0 <col:33, line:107:5>
|   `-ReturnStmt 0x563ae860aee0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x563ae860aec8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x563ae860ae98 <col:16> 'void *' lvalue ->_destructor_argument 0x563ae86018b0
|         `-CXXThisExpr 0x563ae860ae88 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x563ae85f18c0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x563ae860b520 <col:25, line:113:5>
|   |-ParenExpr 0x563ae860b268 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x563ae860b238 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x563ae860afa8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x563ae860af80 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x563ae860af48 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x563ae860af18 <col:24> '<bound member function type>' ->shared 0x563ae85f0938
|   |   |       `-ImplicitCastExpr 0x563ae860af68 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x563ae860af08 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x563ae860b008 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563ae860afe8 <col:42> 'int' 0
|   |   `-CallExpr 0x563ae860b198 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x563ae860b180 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563ae860b160 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563ae8162880 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563ae860b1d8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563ae860b078 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x563ae860b1f0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563ae860b0a0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563ae860b208 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563ae860b0d8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x563ae860b220 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563ae860b148 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563ae860b130 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563ae860b0f8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x563ae860b468 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x563ae860b298 <col:2> 'unsigned char *' lvalue ->_head 0x563ae8601650
|   | | `-CXXThisExpr 0x563ae860b288 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x563ae860b450 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x563ae860b430 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x563ae860b2d8 <col:10> 'unsigned char *' lvalue ->_data 0x563ae86016b8
|   |     | `-CXXThisExpr 0x563ae860b2c8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x563ae860b418 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x563ae860b3f8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x563ae860b318 <col:18> 'unsigned char *' lvalue ->_tail 0x563ae8601720
|   |         | `-CXXThisExpr 0x563ae860b308 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x563ae860b3e0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x563ae860b3c0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x563ae860b358 <col:26> 'unsigned char *' lvalue ->_end 0x563ae8601788
|   |             | `-CXXThisExpr 0x563ae860b348 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x563ae860b3a8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x563ae860b388 <col:33> 'int' 0
|   `-BinaryOperator 0x563ae860b500 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x563ae860b498 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x563ae8601848
|     | `-CXXThisExpr 0x563ae860b488 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x563ae860b4e8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x563ae860b4c8 <col:16> 'int' 0
|-CXXMethodDecl 0x563ae85f1a00 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x563ae85f1970 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x563ae85f1aa8 <col:20>
| |-OptimizeNoneAttr 0x563ae85f1b00 <col:30>
| `-WarnUnusedResultAttr 0x563ae85f1b28 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x563ae85f1bf8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x563ae85f1b68 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x563ae85f1ca0 <col:20>
| |-OptimizeNoneAttr 0x563ae85f1cf8 <col:30>
| `-WarnUnusedResultAttr 0x563ae85f1d20 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x563ae85f1e58 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x563ae85f1d60 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x563ae85f1f00 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x563ae85f2000 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x563ae85f1f70 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x563ae85f20a8 <col:20>
| `-OptimizeNoneAttr 0x563ae85f2100 <col:30>
|-CXXMethodDecl 0x563ae85f21c8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x563ae85f2138 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x563ae85f2270 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x563ae85f2370 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x563ae85f22e0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x563ae85f2418 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x563ae85f2518 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x563ae85f2488 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x563ae85f25c0 <col:20>
| `-OptimizeNoneAttr 0x563ae85f2618 <col:30>
|-CXXMethodDecl 0x563ae85f27a8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x563ae85f2658 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x563ae85f26d0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x563ae860ad18 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x563ae85f2858 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x563ae85f2a58 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x563ae85f28d0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x563ae85f2948 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563ae85f2c68 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x563ae85f2b18 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x563ae85f2b90 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563ae85f2e78 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x563ae85f2d28 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x563ae85f2da8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x563ae860ad28 <col:39> 'int' 0
|-CXXMethodDecl 0x563ae85f2f48 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x563ae85f3010 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x563ae85f30d8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x563ae85f3198 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x563ae85f3260 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x563ae85f33a8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x563ae85f3318 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x563ae85f3578 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x563ae85f3468 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x563ae85f34e0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563ae85f3648 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x563ae85f3708 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x563ae85f37a8 <col:20>
| `-OptimizeNoneAttr 0x563ae85f3800 <col:30>
|-CXXMethodDecl 0x563ae85f3850 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x563ae85f38f0 <col:20>
| `-OptimizeNoneAttr 0x563ae85f3948 <col:30>
|-CXXMethodDecl 0x563ae85f3998 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x563ae85f3a58 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x563ae85f3b20 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x563ae85f3bc0 <col:20>
| `-OptimizeNoneAttr 0x563ae85f3c18 <col:30>
|-CXXMethodDecl 0x563ae85f3d68 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x563ae85f3c58 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x563ae85f3cd0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563ae85f3eb8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x563ae85f3e28 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563ae85f3f90 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x563ae85f4050 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x563ae85f40f0 <col:20>
| `-OptimizeNoneAttr 0x563ae85f4148 <col:30>
|-CXXMethodDecl 0x563ae85f4198 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x563ae85f4238 <col:20>
| `-OptimizeNoneAttr 0x563ae85f4290 <col:30>
|-CXXMethodDecl 0x563ae85f42e0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x563ae85f43a8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x563ae85f4448 <col:20>
| `-OptimizeNoneAttr 0x563ae85f44a0 <col:30>
|-CXXMethodDecl 0x563ae85f44e8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x563ae85f4608 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x563ae85f4778 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x563ae85f46b8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x563ae85f4868 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x563ae85f4908 <col:20>
| `-OptimizeNoneAttr 0x563ae85f4960 <col:30>
|-CXXMethodDecl 0x563ae85f49b0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x563ae85f4a70 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x563ae85f4ca8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x563ae85f4b20 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x563ae85f4b98 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x563ae85f4d58 <col:20>
| `-OptimizeNoneAttr 0x563ae85f4db0 <col:30>
|-CXXMethodDecl 0x563ae85f4e58 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x563ae85f4ef8 <col:20>
| `-OptimizeNoneAttr 0x563ae85f4f50 <col:30>
|-CXXMethodDecl 0x563ae85f4fa0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x563ae85f5040 <col:20>
| `-OptimizeNoneAttr 0x563ae85f5098 <col:30>
|-CXXMethodDecl 0x563ae85f50e0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x563ae85f5180 <col:20>
| `-OptimizeNoneAttr 0x563ae85f51d8 <col:30>
|-CXXMethodDecl 0x563ae85f52d8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x563ae85f5210 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x563ae85f5380 <col:20>
| `-OptimizeNoneAttr 0x563ae85f53d8 <col:30>
|-CXXMethodDecl 0x563ae85f5598 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x563ae85f5410 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x563ae85f5488 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x563ae85f5648 <col:20>
| `-OptimizeNoneAttr 0x563ae85f56a0 <col:30>
|-CXXMethodDecl 0x563ae85f5748 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x563ae85f5868 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x563ae85f5988 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x563ae85f5a28 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x563ae85f5a50 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x563ae85f5b78 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x563ae85f5c18 <col:20>
| `-OptimizeNoneAttr 0x563ae85f5c70 <col:30>
|-CXXMethodDecl 0x563ae85f5d18 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x563ae85f5db8 <col:20>
| `-OptimizeNoneAttr 0x563ae85f5e10 <col:30>
|-AccessSpecDecl 0x563ae85f5e38 <line:344:3, col:9> col:3 public
|-EnumDecl 0x563ae85f5e60 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x563ae85f5f60 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x563ae85f5fb0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563ae85f5f40 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x563ae85f5f20 <col:14> 'int' 48
|-CXXMethodDecl 0x563ae85f6018 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x563ae85f60b8 <col:20>
| `-OptimizeNoneAttr 0x563ae85f6110 <col:30>
|-CXXMethodDecl 0x563ae85f6188 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x563ae85f6228 <col:20>
| `-OptimizeNoneAttr 0x563ae85f6280 <col:30>
|-CXXMethodDecl 0x563ae85f6348 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x563ae85f62b8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x563ae85f64e8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x563ae85f6688 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x563ae85f6598 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x563ae85f6730 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x563ae85f6830 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x563ae85f6be0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae85f6810 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x563ae85f67f0 <col:9> 'int' 0
| |-EnumConstantDecl 0x563ae85f68c0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x563ae85f6bf8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae85f68a0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x563ae85f6880 <col:14> 'int' 1
| |-EnumConstantDecl 0x563ae85f6950 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x563ae85f6c10 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae85f6930 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x563ae85f6910 <col:14> 'int' 2
| |-EnumConstantDecl 0x563ae85f69e0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x563ae85f6c28 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae85f69c0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x563ae85f69a0 <col:14> 'int' 3
| |-EnumConstantDecl 0x563ae85f6a70 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x563ae85f6c40 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae85f6a50 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x563ae85f6a30 <col:13> 'int' 4
| |-EnumConstantDecl 0x563ae85f6b00 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x563ae85f6c58 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae85f6ae0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x563ae85f6ac0 <col:13> 'int' 5
| `-EnumConstantDecl 0x563ae85f6b90 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x563ae85f6c70 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563ae85f6b70 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x563ae85f6b50 <col:14> 'int' 6
|-CXXMethodDecl 0x563ae85f6cd8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x563ae85f6d78 <col:20>
| `-OptimizeNoneAttr 0x563ae85f6dd0 <col:30>
|-CXXMethodDecl 0x563ae85f6ec8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x563ae85f6e08 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x563ae85f6f70 <col:20>
| `-OptimizeNoneAttr 0x563ae85f6fc8 <col:30>
|-CXXMethodDecl 0x563ae85f7038 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x563ae85f7160 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x563ae85f72d8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x563ae85f7210 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x563ae85f73a0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x563ae85f7468 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x563ae85f75a8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x563ae85f7518 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x563ae85f7650 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x563ae85f7750 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x563ae85f7950 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae85f7730 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x563ae85f7710 <col:23> 'int' 0
| |-EnumConstantDecl 0x563ae85f77e0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x563ae85f7968 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae85f77c0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x563ae85f77a0 <col:45> 'int' 4
| |-EnumConstantDecl 0x563ae85f7870 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x563ae85f7980 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae85f7850 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x563ae85f7830 <col:24> 'int' 0
| `-EnumConstantDecl 0x563ae85f7900 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x563ae85f7998 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563ae85f78e0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x563ae85f78c0 <col:47> 'int' 16
|-CXXMethodDecl 0x563ae85f79f8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x563ae85f7b68 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x563ae85f7aa8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x563ae85f7c10 <col:20>
| `-OptimizeNoneAttr 0x563ae85f7c68 <col:30>
|-CXXMethodDecl 0x563ae85f7cb8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x563ae860b640 <col:18, col:36>
|   `-ReturnStmt 0x563ae860b630 <col:20, col:33>
|     `-ImplicitCastExpr 0x563ae860b618 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x563ae860b5f8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x563ae860b5c8 <col:27> '<bound member function type>' ->xanno 0x563ae85f5d18
|           `-CXXThisExpr 0x563ae860b5b8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x563ae85f7db0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x563ae860b750 <col:30, col:48>
|   `-ReturnStmt 0x563ae860b740 <col:32, col:45>
|     `-ImplicitCastExpr 0x563ae860b728 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x563ae860b708 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x563ae860b6d8 <col:39> '<bound member function type>' ->xanno 0x563ae85f5b78
|           `-CXXThisExpr 0x563ae860b6c8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x563ae85f7e98 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x563ae860b8e8 <col:24, col:50>
|   `-ReturnStmt 0x563ae860b8d8 <col:26, col:47>
|     `-UnaryOperator 0x563ae860b8c0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x563ae860b8a0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x563ae860b888 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x563ae860b838 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x563ae8600b58
|         |   `-CXXMemberCallExpr 0x563ae860b818 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x563ae860b7e8 <col:34> '<bound member function type>' ->xanno 0x563ae85f5d18
|         |       `-CXXThisExpr 0x563ae860b7d8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x563ae860b868 <col:46> 'int' 0
|-CXXMethodDecl 0x563ae85f7fa0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x563ae860bab8 <col:36, col:62>
|   `-ReturnStmt 0x563ae860baa8 <col:38, col:59>
|     `-UnaryOperator 0x563ae860ba90 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x563ae860ba70 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x563ae860ba58 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x563ae860b9d0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x563ae8600b58
|         |   `-CXXMemberCallExpr 0x563ae860b9b0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x563ae860b980 <col:46> '<bound member function type>' ->xanno 0x563ae85f5b78
|         |       `-CXXThisExpr 0x563ae860b970 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x563ae860ba00 <col:58> 'int' 0
|-CXXMethodDecl 0x563ae85f80b8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x563ae860bc50 <col:26, col:53>
|   `-ReturnStmt 0x563ae860bc40 <col:28, col:50>
|     `-UnaryOperator 0x563ae860bc28 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x563ae860bc08 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x563ae860bbf0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x563ae860bba0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x563ae8600e58
|         |   `-CXXMemberCallExpr 0x563ae860bb80 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x563ae860bb50 <col:36> '<bound member function type>' ->xanno 0x563ae85f5d18
|         |       `-CXXThisExpr 0x563ae860bb40 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x563ae860bbd0 <col:49> 'int' 0
|-CXXMethodDecl 0x563ae85f81d8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x563ae860be28 <col:38, col:65>
|   `-ReturnStmt 0x563ae860be18 <col:40, col:62>
|     `-UnaryOperator 0x563ae860be00 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x563ae860bde0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x563ae860bdc8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x563ae860bd38 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x563ae8600e58
|         |   `-CXXMemberCallExpr 0x563ae860bd18 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x563ae860bce8 <col:48> '<bound member function type>' ->xanno 0x563ae85f5b78
|         |       `-CXXThisExpr 0x563ae860bcd8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x563ae860bd68 <col:61> 'int' 0
|-CXXMethodDecl 0x563ae85f8388 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x563ae85f8290 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x563ae860c4f8 <col:34, line:463:5>
|   |-ParenExpr 0x563ae860c340 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x563ae860c310 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x563ae860bf78 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563ae860bf48 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563ae860be98 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563ae860be80 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563ae860be40 <col:23> 'int' lvalue ParmVar 0x563ae85f8290 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563ae860be60 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563ae860bf28 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x563ae860bef8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563ae860beb8 <col:33> 'int' lvalue ParmVar 0x563ae85f8290 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x563ae860bf10 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x563ae860bed8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563ae85f5f60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x563ae860bfd8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563ae860bfb8 <col:56> 'int' 0
|   |   `-CallExpr 0x563ae860c270 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x563ae860c258 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563ae860c238 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563ae8162880 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563ae860c2b0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563ae860c0c8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x563ae860c2c8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563ae860c0f8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563ae860c2e0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563ae860c130 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x563ae860c2f8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563ae860c220 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563ae860c208 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563ae860c1c8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x563ae860c4e8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x563ae860c4d0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x563ae860c4b0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x563ae860c480 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x563ae860c430 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x563ae8600b58
|         |   `-CXXMemberCallExpr 0x563ae860c410 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x563ae860c3e0 <col:9> '<bound member function type>' ->xanno 0x563ae85f5b78
|         |       `-CXXThisExpr 0x563ae860c3d0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x563ae860c498 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x563ae860c460 <col:21> 'int' lvalue ParmVar 0x563ae85f8290 'i' 'int'
|-CXXMethodDecl 0x563ae85f85d8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x563ae85f8448 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x563ae85f84c0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x563ae860cb88 <col:40, line:472:5>
|   |-ParenExpr 0x563ae860c9a0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x563ae860c970 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x563ae860c650 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563ae860c620 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563ae860c570 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563ae860c558 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563ae860c518 <col:23> 'int' lvalue ParmVar 0x563ae85f8448 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563ae860c538 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563ae860c600 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x563ae860c5d0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563ae860c590 <col:33> 'int' lvalue ParmVar 0x563ae85f8448 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x563ae860c5e8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x563ae860c5b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563ae85f5f60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x563ae860c6b0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563ae860c690 <col:56> 'int' 0
|   |   `-CallExpr 0x563ae860c8d0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x563ae860c8b8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563ae860c898 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563ae8162880 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563ae860c910 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563ae860c720 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x563ae860c928 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563ae860c750 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563ae860c940 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563ae860c788 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x563ae860c958 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563ae860c880 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563ae860c868 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563ae860c828 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x563ae860cb68 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x563ae860cb10 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x563ae860cae0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x563ae860ca90 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x563ae8600b58
|     | |   `-CXXMemberCallExpr 0x563ae860ca70 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x563ae860ca40 <col:2> '<bound member function type>' ->xanno 0x563ae85f5d18
|     | |       `-CXXThisExpr 0x563ae860ca30 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x563ae860caf8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x563ae860cac0 <col:14> 'int' lvalue ParmVar 0x563ae85f8448 'i' 'int'
|     `-ImplicitCastExpr 0x563ae860cb50 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x563ae860cb30 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x563ae85f84c0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x563ae85f8798 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x563ae85f86a0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x563ae860d308 <col:36, line:485:5>
|   |-ParenExpr 0x563ae860d070 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x563ae860d040 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x563ae860cd20 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563ae860ccf0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563ae860cc00 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563ae860cbe8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563ae860cba8 <col:23> 'int' lvalue ParmVar 0x563ae85f86a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563ae860cbc8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563ae860ccd0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x563ae860ccb8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563ae860cc20 <col:33> 'int' lvalue ParmVar 0x563ae85f86a0 'i' 'int'
|   |   |     `-BinaryOperator 0x563ae860cc98 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x563ae860cc80 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x563ae860cc40 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563ae85f5f60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x563ae860cc60 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x563ae860cd80 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563ae860cd60 <col:60> 'int' 0
|   |   `-CallExpr 0x563ae860cfa0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x563ae860cf88 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563ae860cf68 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563ae8162880 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563ae860cfe0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563ae860cdf0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x563ae860cff8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563ae860ce28 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563ae860d010 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563ae860ce60 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x563ae860d028 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563ae860cf50 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563ae860cf38 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563ae860cef8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x563ae860d2f8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x563ae860d2e0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x563ae860d2c8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x563ae860d298 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x563ae860d238 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x563ae860d208 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x563ae860d180 <col:61, col:70> 'char const[48]' lvalue ->c 0x563ae8600a30
|             |   `-CXXMemberCallExpr 0x563ae860d160 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x563ae860d130 <col:61> '<bound member function type>' ->xanno 0x563ae85f5b78
|             |       `-CXXThisExpr 0x563ae860d120 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x563ae860d220 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x563ae860d1b0 <col:74> 'int' lvalue ParmVar 0x563ae85f86a0 'i' 'int'
|-CXXMethodDecl 0x563ae85f89e8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x563ae85f8858 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x563ae85f88d0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x563ae860da58 <col:42, line:500:5>
|   |-ParenExpr 0x563ae860d7f0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x563ae860d7c0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x563ae860d4a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563ae860d470 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563ae860d380 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563ae860d368 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563ae860d328 <col:23> 'int' lvalue ParmVar 0x563ae85f8858 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563ae860d348 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563ae860d450 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x563ae860d438 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563ae860d3a0 <col:33> 'int' lvalue ParmVar 0x563ae85f8858 'i' 'int'
|   |   |     `-BinaryOperator 0x563ae860d418 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x563ae860d400 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x563ae860d3c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563ae85f5f60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x563ae860d3e0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x563ae860d500 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563ae860d4e0 <col:60> 'int' 0
|   |   `-CallExpr 0x563ae860d720 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x563ae860d708 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563ae860d6e8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563ae8162880 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563ae860d760 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563ae860d570 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x563ae860d778 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563ae860d5a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563ae860d790 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563ae860d5e0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x563ae860d7a8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563ae860d6d0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563ae860d6b8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563ae860d678 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x563ae860da38 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x563ae860d9e8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x563ae860d9b8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x563ae860d960 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x563ae860d930 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x563ae860d8e0 <col:48, col:57> 'char [48]' lvalue ->c 0x563ae8600a30
|     |     |   `-CXXMemberCallExpr 0x563ae860d8c0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x563ae860d890 <col:48> '<bound member function type>' ->xanno 0x563ae85f5d18
|     |     |       `-CXXThisExpr 0x563ae860d880 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x563ae860d948 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x563ae860d910 <col:61> 'int' lvalue ParmVar 0x563ae85f8858 'i' 'int'
|     `-ImplicitCastExpr 0x563ae860da20 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x563ae860da00 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x563ae85f88d0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x563ae85f8ba8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x563ae85f8ab0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x563ae860e1b8 <col:35, line:513:5>
|   |-ParenExpr 0x563ae860dec8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x563ae860de98 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x563ae860dbf0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563ae860dbc0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563ae860dad0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563ae860dab8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563ae860da78 <col:23> 'int' lvalue ParmVar 0x563ae85f8ab0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563ae860da98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563ae860dba0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x563ae860db88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563ae860daf0 <col:33> 'int' lvalue ParmVar 0x563ae85f8ab0 'i' 'int'
|   |   |     `-BinaryOperator 0x563ae860db68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x563ae860db50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x563ae860db10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563ae85f5f60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x563ae860db30 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x563ae860dc50 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563ae860dc30 <col:60> 'int' 0
|   |   `-CallExpr 0x563ae860ddf8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x563ae860dde0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563ae860ddc0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563ae8162880 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563ae860de38 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563ae860dcc0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x563ae860de50 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563ae860dcf8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563ae860de68 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563ae860dd30 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x563ae860de80 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563ae860dda8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563ae860dd90 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563ae860dd50 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x563ae860e1a8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x563ae860e190 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x563ae860e178 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x563ae860e148 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x563ae860e0c0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x563ae860e090 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x563ae860e040 <col:60, col:69> 'char const[48]' lvalue ->c 0x563ae8600a30
|             |   `-CXXMemberCallExpr 0x563ae860e020 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x563ae860dff0 <col:60> '<bound member function type>' ->xanno 0x563ae85f5b78
|             |       `-CXXThisExpr 0x563ae860dfe0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x563ae860e0a8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x563ae860e070 <col:73> 'int' lvalue ParmVar 0x563ae85f8ab0 'i' 'int'
|-CXXMethodDecl 0x563ae85f8df8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x563ae85f8c68 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x563ae85f8ce0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x563ae860e8d8 <col:41, line:528:5>
|   |-ParenExpr 0x563ae860e660 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x563ae860e630 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x563ae860e350 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563ae860e320 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563ae860e230 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563ae860e218 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563ae860e1d8 <col:23> 'int' lvalue ParmVar 0x563ae85f8c68 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563ae860e1f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563ae860e300 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x563ae860e2e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563ae860e250 <col:33> 'int' lvalue ParmVar 0x563ae85f8c68 'i' 'int'
|   |   |     `-BinaryOperator 0x563ae860e2c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x563ae860e2b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x563ae860e270 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563ae85f5f60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x563ae860e290 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x563ae860e3b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563ae860e390 <col:60> 'int' 0
|   |   `-CallExpr 0x563ae860e590 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x563ae860e578 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563ae860e558 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563ae8162880 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563ae860e5d0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563ae860e420 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x563ae860e5e8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563ae860e458 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563ae860e600 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563ae860e490 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x563ae860e618 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563ae860e540 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563ae860e528 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563ae860e4e8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x563ae860e8b8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x563ae860e868 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x563ae860e838 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x563ae860e7e0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x563ae860e7a0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x563ae860e750 <col:47, col:56> 'char [48]' lvalue ->c 0x563ae8600a30
|     |     |   `-CXXMemberCallExpr 0x563ae860e730 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x563ae860e700 <col:47> '<bound member function type>' ->xanno 0x563ae85f5d18
|     |     |       `-CXXThisExpr 0x563ae860e6f0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x563ae860e7b8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x563ae860e780 <col:60> 'int' lvalue ParmVar 0x563ae85f8c68 'i' 'int'
|     `-ImplicitCastExpr 0x563ae860e8a0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x563ae860e880 <col:65> 'int16_t':'short' lvalue ParmVar 0x563ae85f8ce0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x563ae85f8fb8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x563ae85f8ec0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x563ae860efa8 <col:36, line:541:5>
|   |-ParenExpr 0x563ae860ed48 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x563ae860ed18 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x563ae860ea70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563ae860ea40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563ae860e950 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563ae860e938 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563ae860e8f8 <col:23> 'int' lvalue ParmVar 0x563ae85f8ec0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563ae860e918 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563ae860ea20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x563ae860ea08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563ae860e970 <col:33> 'int' lvalue ParmVar 0x563ae85f8ec0 'i' 'int'
|   |   |     `-BinaryOperator 0x563ae860e9e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x563ae860e9d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x563ae860e990 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563ae85f5f60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x563ae860e9b0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x563ae860ead0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563ae860eab0 <col:60> 'int' 0
|   |   `-CallExpr 0x563ae860ec78 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x563ae860ec60 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563ae860ec40 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563ae8162880 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563ae860ecb8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563ae860eb40 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x563ae860ecd0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563ae860eb78 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563ae860ece8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563ae860ebb0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x563ae860ed00 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563ae860ec28 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563ae860ec10 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563ae860ebd0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x563ae860ef98 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x563ae860ef80 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x563ae860ef68 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x563ae860ef38 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x563ae860eee0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x563ae860eeb0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x563ae860ee60 <col:61, col:70> 'char const[48]' lvalue ->c 0x563ae8600a30
|             |   `-CXXMemberCallExpr 0x563ae860ee40 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x563ae860ee10 <col:61> '<bound member function type>' ->xanno 0x563ae85f5b78
|             |       `-CXXThisExpr 0x563ae860ee00 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x563ae860eec8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x563ae860ee90 <col:74> 'int' lvalue ParmVar 0x563ae85f8ec0 'i' 'int'
|-CXXMethodDecl 0x563ae85f9188 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x563ae85f9078 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x563ae85f90f0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x563ae85f9238 <col:20>
| `-OptimizeNoneAttr 0x563ae85f9290 <col:30>
|-CXXMethodDecl 0x563ae85f93c8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x563ae85f92d0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x563ae860f678 <col:35, line:562:5>
|   |-ParenExpr 0x563ae860f418 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x563ae860f3e8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x563ae860f140 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563ae860f110 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563ae860f020 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563ae860f008 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563ae860efc8 <col:23> 'int' lvalue ParmVar 0x563ae85f92d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563ae860efe8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563ae860f0f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x563ae860f0d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563ae860f040 <col:33> 'int' lvalue ParmVar 0x563ae85f92d0 'i' 'int'
|   |   |     `-BinaryOperator 0x563ae860f0b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x563ae860f0a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x563ae860f060 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563ae85f5f60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x563ae860f080 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x563ae860f1a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563ae860f180 <col:60> 'int' 0
|   |   `-CallExpr 0x563ae860f348 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x563ae860f330 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563ae860f310 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563ae8162880 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563ae860f388 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563ae860f210 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x563ae860f3a0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563ae860f248 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563ae860f3b8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563ae860f280 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x563ae860f3d0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563ae860f2f8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563ae860f2e0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563ae860f2a0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x563ae860f668 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x563ae860f650 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x563ae860f638 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x563ae860f608 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x563ae860f5b0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x563ae860f580 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x563ae860f530 <col:60, col:69> 'char const[48]' lvalue ->c 0x563ae8600a30
|             |   `-CXXMemberCallExpr 0x563ae860f510 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x563ae860f4e0 <col:60> '<bound member function type>' ->xanno 0x563ae85f5b78
|             |       `-CXXThisExpr 0x563ae860f4d0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x563ae860f598 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x563ae860f560 <col:73> 'int' lvalue ParmVar 0x563ae85f92d0 'i' 'int'
|-CXXMethodDecl 0x563ae85f95d8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x563ae85f9488 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x563ae85f9500 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x563ae860fd58 <col:41, line:577:5>
|   |-ParenExpr 0x563ae860fae8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x563ae860fab8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x563ae860f810 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563ae860f7e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563ae860f6f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563ae860f6d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563ae860f698 <col:23> 'int' lvalue ParmVar 0x563ae85f9488 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563ae860f6b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563ae860f7c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x563ae860f7a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563ae860f710 <col:33> 'int' lvalue ParmVar 0x563ae85f9488 'i' 'int'
|   |   |     `-BinaryOperator 0x563ae860f788 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x563ae860f770 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x563ae860f730 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563ae85f5f60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x563ae860f750 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x563ae860f870 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563ae860f850 <col:60> 'int' 0
|   |   `-CallExpr 0x563ae860fa18 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x563ae860fa00 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563ae860f9e0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563ae8162880 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563ae860fa58 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563ae860f8e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x563ae860fa70 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563ae860f918 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563ae860fa88 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563ae860f950 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x563ae860faa0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563ae860f9c8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563ae860f9b0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563ae860f970 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x563ae860fd38 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x563ae860fce8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x563ae860fcb8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x563ae860fc58 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x563ae860fc28 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x563ae860fbd8 <col:47, col:56> 'char [48]' lvalue ->c 0x563ae8600a30
|     |     |   `-CXXMemberCallExpr 0x563ae860fbb8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x563ae860fb88 <col:47> '<bound member function type>' ->xanno 0x563ae85f5d18
|     |     |       `-CXXThisExpr 0x563ae860fb78 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x563ae860fc40 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x563ae860fc08 <col:60> 'int' lvalue ParmVar 0x563ae85f9488 'i' 'int'
|     `-ImplicitCastExpr 0x563ae860fd20 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x563ae860fd00 <col:65> 'int32_t':'int' lvalue ParmVar 0x563ae85f9500 'x' 'int32_t':'int'
|-CXXMethodDecl 0x563ae85f9798 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x563ae85f96a0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x563ae8610488 <col:36, line:591:5>
|   |-ParenExpr 0x563ae86101c8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x563ae8610198 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x563ae860fef0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563ae860fec0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563ae860fdd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563ae860fdb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563ae860fd78 <col:23> 'int' lvalue ParmVar 0x563ae85f96a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563ae860fd98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563ae860fea0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x563ae860fe88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563ae860fdf0 <col:33> 'int' lvalue ParmVar 0x563ae85f96a0 'i' 'int'
|   |   |     `-BinaryOperator 0x563ae860fe68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x563ae860fe50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x563ae860fe10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563ae85f5f60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x563ae860fe30 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x563ae860ff50 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563ae860ff30 <col:60> 'int' 0
|   |   `-CallExpr 0x563ae86100f8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x563ae86100e0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563ae86100c0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563ae8162880 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563ae8610138 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563ae860ffc0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x563ae8610150 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563ae860fff8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563ae8610168 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563ae8610030 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x563ae8610180 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563ae86100a8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563ae8610090 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563ae8610050 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x563ae8610478 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x563ae8610460 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x563ae8610448 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x563ae8610418 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x563ae8610390 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x563ae8610360 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x563ae8610310 <col:61, col:70> 'char const[48]' lvalue ->c 0x563ae8600a30
|             |   `-CXXMemberCallExpr 0x563ae86102f0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x563ae86102c0 <col:61> '<bound member function type>' ->xanno 0x563ae85f5b78
|             |       `-CXXThisExpr 0x563ae86102b0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x563ae8610378 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x563ae8610340 <col:74> 'int' lvalue ParmVar 0x563ae85f96a0 'i' 'int'
|-CXXMethodDecl 0x563ae85f99e8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x563ae85f9858 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x563ae85f98d0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x563ae8610b68 <col:42, line:606:5>
|   |-ParenExpr 0x563ae86108f8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x563ae86108c8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x563ae8610620 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563ae86105f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563ae8610500 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563ae86104e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563ae86104a8 <col:23> 'int' lvalue ParmVar 0x563ae85f9858 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563ae86104c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563ae86105d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x563ae86105b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563ae8610520 <col:33> 'int' lvalue ParmVar 0x563ae85f9858 'i' 'int'
|   |   |     `-BinaryOperator 0x563ae8610598 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x563ae8610580 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x563ae8610540 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563ae85f5f60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x563ae8610560 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x563ae8610680 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563ae8610660 <col:60> 'int' 0
|   |   `-CallExpr 0x563ae8610828 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x563ae8610810 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563ae86107f0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563ae8162880 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563ae8610868 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563ae86106f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x563ae8610880 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563ae8610728 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563ae8610898 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563ae8610760 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x563ae86108b0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563ae86107d8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563ae86107c0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563ae8610780 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x563ae8610b48 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x563ae8610af8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x563ae8610ac8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x563ae8610a68 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x563ae8610a38 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x563ae86109e8 <col:48, col:57> 'char [48]' lvalue ->c 0x563ae8600a30
|     |     |   `-CXXMemberCallExpr 0x563ae86109c8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x563ae8610998 <col:48> '<bound member function type>' ->xanno 0x563ae85f5d18
|     |     |       `-CXXThisExpr 0x563ae8610988 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x563ae8610a50 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x563ae8610a18 <col:61> 'int' lvalue ParmVar 0x563ae85f9858 'i' 'int'
|     `-ImplicitCastExpr 0x563ae8610b30 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x563ae8610b10 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x563ae85f98d0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x563ae85f9b80 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x563ae85f9ab0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x563ae86113d8 <col:33, line:620:5>
|   |-ParenExpr 0x563ae8611150 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x563ae8611120 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x563ae8610d70 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563ae8610d40 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563ae8610be0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563ae8610bc8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563ae8610b88 <col:23> 'int' lvalue ParmVar 0x563ae85f9ab0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563ae8610ba8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563ae8610d20 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x563ae8610d08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563ae8610c00 <col:33> 'int' lvalue ParmVar 0x563ae85f9ab0 'i' 'int'
|   |   |     `-BinaryOperator 0x563ae8610ce8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x563ae8610cd0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x563ae8610c20 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563ae85f5f60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x563ae8610ca8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x563ae8610c90 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x563ae8610c58 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x563ae8610dd0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563ae8610db0 <col:79> 'int' 0
|   |   `-CallExpr 0x563ae8611080 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x563ae8611068 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563ae8611048 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563ae8162880 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563ae86110c0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563ae8610eb8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x563ae86110d8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563ae8610f00 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563ae86110f0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563ae8610f38 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x563ae8611108 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563ae8611030 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563ae8611018 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563ae8610fd8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x563ae86113c8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x563ae86113b0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x563ae8611398 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x563ae8611368 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x563ae86112e0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x563ae86112b0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x563ae8611260 <col:67, col:76> 'char const[48]' lvalue ->c 0x563ae8600a30
|             |   `-CXXMemberCallExpr 0x563ae8611240 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x563ae8611210 <col:67> '<bound member function type>' ->xanno 0x563ae85f5b78
|             |       `-CXXThisExpr 0x563ae8611200 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x563ae86112c8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x563ae8611290 <col:80> 'int' lvalue ParmVar 0x563ae85f9ab0 'i' 'int'
|-CXXMethodDecl 0x563ae85f9d98 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x563ae85f9c40 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x563ae85f9cc0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x563ae8611c00 <col:45, line:635:5>
|   |-ParenExpr 0x563ae8611948 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x563ae8611918 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x563ae86115e0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x563ae86115b0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x563ae8611450 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x563ae8611438 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x563ae86113f8 <col:23> 'int' lvalue ParmVar 0x563ae85f9c40 'i' 'int'
|   |   |   | `-IntegerLiteral 0x563ae8611418 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x563ae8611590 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x563ae8611578 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x563ae8611470 <col:33> 'int' lvalue ParmVar 0x563ae85f9c40 'i' 'int'
|   |   |     `-BinaryOperator 0x563ae8611558 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x563ae8611540 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x563ae8611490 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x563ae85f5f60 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x563ae8611518 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x563ae8611500 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x563ae86114c8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x563ae8611640 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x563ae8611620 <col:79> 'int' 0
|   |   `-CallExpr 0x563ae8611878 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x563ae8611860 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x563ae8611840 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563ae8162880 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563ae86118b8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563ae86116b0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x563ae86118d0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563ae86116f8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x563ae86118e8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x563ae8611730 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x563ae8611900 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x563ae8611828 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x563ae8611810 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563ae86117c8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x563ae8611be0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x563ae8611b48 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x563ae8611b18 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x563ae8611ab8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x563ae8611a88 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x563ae8611a38 <col:54, col:63> 'char [48]' lvalue ->c 0x563ae8600a30
|     |     |   `-CXXMemberCallExpr 0x563ae8611a18 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x563ae86119e8 <col:54> '<bound member function type>' ->xanno 0x563ae85f5d18
|     |     |       `-CXXThisExpr 0x563ae86119d8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x563ae8611aa0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x563ae8611a68 <col:67> 'int' lvalue ParmVar 0x563ae85f9c40 'i' 'int'
|     `-CXXConstCastExpr 0x563ae8611bb0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x563ae8611b98 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x563ae8611b60 <col:91> 'const void *' lvalue ParmVar 0x563ae85f9cc0 'x' 'const void *'
|-CXXMethodDecl 0x563ae85f9e68 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x563ae8611c88 <col:34, line:640:5>
|   `-ReturnStmt 0x563ae8611c78 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x563ae8611c60 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x563ae8611c30 <col:16> 'Packet *' lvalue ->_data_packet 0x563ae86015e8
|         `-CXXThisExpr 0x563ae8611c20 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x563ae85f9fa8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x563ae85f9f18 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x563ae860ad48 <col:46> 'bool' true
|-CXXMethodDecl 0x563ae85fa128 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x563ae85fa060 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x563ae85fa1d0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x563ae85fa980 <line:660:22> "" ""
| |-EnumConstantDecl 0x563ae85fa2d0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x563ae85fa9f0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae85fa2b0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x563ae85fa290 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x563ae85ef430 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x563ae85fa360 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x563ae85faa08 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae85fa340 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x563ae85fa320 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x563ae85ef4c0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x563ae85fa3f0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x563ae85faa20 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae85fa3d0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x563ae85fa3b0 <col:21> 'int' 0
| |-EnumConstantDecl 0x563ae85fa480 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x563ae85faa38 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae85fa460 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x563ae85fa440 <col:19> 'int' 16
| |-EnumConstantDecl 0x563ae85fa510 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x563ae85faa50 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae85fa4f0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x563ae85fa4d0 <col:21> 'int' 16
| |-EnumConstantDecl 0x563ae85fa5a0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x563ae85faa68 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae85fa580 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x563ae85fa560 <col:19> 'int' 32
| |-EnumConstantDecl 0x563ae85fa630 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x563ae85faa80 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae85fa610 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x563ae85fa5f0 <col:19> 'int' EnumConstant 0x563ae85fa480 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x563ae85fa6c0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x563ae85faa98 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae85fa6a0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x563ae85fa680 <col:19> 'int' EnumConstant 0x563ae85fa5a0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x563ae85fa790 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x563ae85faab0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae85fa770 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x563ae85fa750 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x563ae85fa710 <col:23> 'int' EnumConstant 0x563ae85fa6c0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x563ae85fa730 <col:40> 'int' 2
| |-EnumConstantDecl 0x563ae85fa860 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x563ae85faac8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563ae85fa840 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x563ae85fa820 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x563ae85fa7e0 <col:23> 'int' EnumConstant 0x563ae85fa6c0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x563ae85fa800 <col:40> 'int' 4
| `-EnumConstantDecl 0x563ae85fa930 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x563ae85faae0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563ae85fa910 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x563ae85fa8f0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x563ae85fa8b0 <col:23> 'int' EnumConstant 0x563ae85fa6c0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x563ae85fa8d0 <col:40> 'int' 8
|-CXXMethodDecl 0x563ae85fab20 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x563ae85fabc0 <col:68> "" ""
|-CXXMethodDecl 0x563ae85fac58 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x563ae85facf8 <col:45> "" ""
|-CXXMethodDecl 0x563ae85fad90 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x563ae85fae30 <col:57> "" ""
|-CXXMethodDecl 0x563ae85faec8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x563ae85faf68 <col:45> "" ""
|-CXXMethodDecl 0x563ae85fb000 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x563ae85fb0a0 <col:57> "" ""
|-CXXMethodDecl 0x563ae85fb130 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x563ae85fb1d0 <col:51> "" ""
|-CXXMethodDecl 0x563ae85fb260 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x563ae85fb300 <col:63> "" ""
|-CXXMethodDecl 0x563ae85fb390 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x563ae85fb430 <col:53> "" ""
|-CXXMethodDecl 0x563ae85fb4c0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x563ae85fb560 <col:65> "" ""
|-CXXMethodDecl 0x563ae85fb678 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x563ae85fb5e8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x563ae85fb720 <col:61> "" ""
|-CXXMethodDecl 0x563ae85fb8b8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x563ae85fb7a8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x563ae85fb820 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x563ae85fb968 <col:67> "" ""
|-CXXMethodDecl 0x563ae85fba80 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x563ae85fb9f0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x563ae85fbb28 <col:63> "" ""
|-CXXMethodDecl 0x563ae85fbcc0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x563ae85fbbb0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x563ae85fbc28 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x563ae85fbd70 <col:69> "" ""
|-CXXMethodDecl 0x563ae85fbe88 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x563ae85fbdf8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x563ae85fbf30 <col:63> "" ""
|-CXXMethodDecl 0x563ae85fe608 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x563ae85fe4f8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x563ae85fe570 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x563ae85fe6b8 <col:69> "" ""
|-CXXMethodDecl 0x563ae85fe7d0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x563ae85fe740 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x563ae85fe878 <col:62> "" ""
|-CXXMethodDecl 0x563ae85fea10 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x563ae85fe900 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x563ae85fe978 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x563ae85feac0 <col:68> "" ""
|-CXXMethodDecl 0x563ae85febd8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x563ae85feb48 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x563ae85fec80 <col:63> "" ""
|-CXXMethodDecl 0x563ae85fee18 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x563ae85fed08 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x563ae85fed80 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x563ae85feec8 <col:69> "" ""
|-CXXMethodDecl 0x563ae85fef58 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x563ae85feff8 <col:64> "" ""
|-CXXMethodDecl 0x563ae85ff088 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x563ae85ff128 <col:52> "" ""
|-CXXMethodDecl 0x563ae85ff1b8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x563ae85ff258 <col:67> "" ""
|-CXXMethodDecl 0x563ae85ff2e8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x563ae85ff388 <col:55> "" ""
|-CXXMethodDecl 0x563ae85ff4a0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x563ae85ff410 <col:32> col:35 'int'
| `-DeprecatedAttr 0x563ae85ff548 <col:58> "" ""
|-CXXMethodDecl 0x563ae85ff6e0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x563ae85ff5d0 <col:33> col:36 'int'
| |-ParmVarDecl 0x563ae85ff648 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x563ae85ff790 <col:62> "" ""
|-CXXMethodDecl 0x563ae85ff8a8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x563ae85ff818 <col:32> col:35 'int'
| `-DeprecatedAttr 0x563ae85ff950 <col:58> "" ""
|-CXXMethodDecl 0x563ae85ffae8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x563ae85ff9d8 <col:33> col:36 'int'
| |-ParmVarDecl 0x563ae85ffa50 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x563ae85ffb98 <col:62> "" ""
|-CXXMethodDecl 0x563ae85ffcb0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x563ae85ffc20 <col:34> col:37 'int'
| `-DeprecatedAttr 0x563ae85ffd58 <col:60> "" ""
|-CXXMethodDecl 0x563ae85ffef0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x563ae85ffde0 <col:34> col:37 'int'
| |-ParmVarDecl 0x563ae85ffe58 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x563ae85fffa0 <col:64> "" ""
|-CXXMethodDecl 0x563ae86000b8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x563ae8600028 <col:32> col:35 'int'
| `-DeprecatedAttr 0x563ae8600160 <col:58> "" ""
|-CXXMethodDecl 0x563ae86002f8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x563ae86001e8 <col:33> col:36 'int'
| |-ParmVarDecl 0x563ae8600260 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x563ae86003a8 <col:62> "" ""
|-CXXMethodDecl 0x563ae86004c0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x563ae8600430 <col:33> col:36 'int'
| `-DeprecatedAttr 0x563ae8600568 <col:59> "" ""
|-CXXMethodDecl 0x563ae8600700 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x563ae86005f0 <col:33> col:36 'int'
| |-ParmVarDecl 0x563ae8600668 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x563ae86007b0 <col:63> "" ""
|-AccessSpecDecl 0x563ae8600820 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x563ae8600848 prev 0x563ae85f5a50 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x563ae8600940 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x563ae8600a30 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x563ae8600b58 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x563ae8600cd8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x563ae8600e58 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x563ae8600fd8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x563ae8611e08 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x563ae8612678 <col:11>
| |-CXXDestructorDecl 0x563ae8611ee0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x563ae8612018 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x563ae8612018
| | `-ParmVarDecl 0x563ae8612128 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x563ae86121c8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x563ae86121c8
| | `-ParmVarDecl 0x563ae86122d8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x563ae8615098 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x563ae86151a8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x563ae8615428 <col:11>
| |   `-ReturnStmt 0x563ae8615418 <col:11>
| |     `-UnaryOperator 0x563ae8615400 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x563ae86153f0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x563ae8615218 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x563ae8615218
|   `-ParmVarDecl 0x563ae8615328 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x563ae8601040 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x563ae8601158 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x563ae86011f8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x563ae8601260 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x563ae86012c8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x563ae8601330 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x563ae8601390 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x563ae8601450 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x563ae86014b0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x563ae8601510 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x563ae8611d18 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x563ae86011f8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x563ae8612688 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x563ae86126e0 <col:12>
| |-CXXConstructorDecl 0x563ae8612348 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x563ae8612348
| | `-ParmVarDecl 0x563ae8612458 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x563ae86124f8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x563ae86124f8
| | `-ParmVarDecl 0x563ae8612608 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x563ae8614780 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x563ae8601588 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x563ae86015e8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x563ae8601650 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x563ae86016b8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x563ae8601720 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x563ae8601788 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x563ae86017e8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x563ae8601848 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x563ae86018b0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x563ae8601938 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x563ae8601588 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x563ae8611cb0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x563ae86017e8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x563ae86126f0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x563ae8612750 <col:21, line:755:5>
|-CXXConstructorDecl 0x563ae8601ad8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x563ae8601a18 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x563ae8601bd0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x563ae8601db8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x563ae8601cc0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x563ae8602088 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x563ae8601e70 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x563ae8601ee8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x563ae8601f60 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563ae86022a8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x563ae8602158 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x563ae86021d0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x563ae860a888 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x563ae8602368 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x563ae86023e0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x563ae8602458 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x563ae860a9e0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x563ae860a950 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x563ae860ab28 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x563ae860aa98 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x563ae860ac20 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class StringAccum
         0 |   struct StringAccum::rep_t r_
         0 |     unsigned char * s
         8 |     int len
        12 |     int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563ae870f5c0 <../dummy_inc/click/straccum.hh:112:5, line:122:5> line:112:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563ae870f6d8 <col:5, col:12> col:12 implicit referenced struct rep_t
|-FieldDecl 0x563ae870f780 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
|-FieldDecl 0x563ae870f7e8 <line:114:2, col:6> col:6 referenced len 'int'
|-FieldDecl 0x563ae870f850 <line:115:2, col:6> col:6 referenced cap 'int'
|-CXXConstructorDecl 0x563ae870f900 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| |-CXXCtorInitializer Field 0x563ae870f780 's' 'unsigned char *'
| | `-CXXReinterpretCastExpr 0x563ae87107b0 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| |   `-CXXConstCastExpr 0x563ae8710768 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| |     `-CallExpr 0x563ae8710730 <col:63, col:82> 'const char *'
| |       `-ImplicitCastExpr 0x563ae8710718 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| |         `-DeclRefExpr 0x563ae87106c0 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x563ae84198a0 'empty_data' 'const char *()'
| |-CXXCtorInitializer Field 0x563ae870f7e8 'len' 'int'
| | `-IntegerLiteral 0x563ae8710828 <line:118:12> 'int' 0
| |-CXXCtorInitializer Field 0x563ae870f850 'cap' 'int'
| | `-IntegerLiteral 0x563ae8710890 <col:20> 'int' 0
| `-CompoundStmt 0x563ae8710910 <col:23, line:119:2>
|-CXXConstructorDecl 0x563ae870fa78 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| |-ParmVarDecl 0x563ae870f9b8 <col:17> col:35 'uninitialized_type'
| `-CompoundStmt 0x563ae8710920 <col:37, line:121:2>
|-CXXConstructorDecl 0x563ae8712b38 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x563ae8712c48 <col:12> col:12 used 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x563ae870f780 's' 'unsigned char *'
| | `-ImplicitCastExpr 0x563ae8714600 <col:12> 'unsigned char *' <LValueToRValue>
| |   `-MemberExpr 0x563ae87145d0 <col:12> 'unsigned char *const' lvalue .s 0x563ae870f780
| |     `-DeclRefExpr 0x563ae87145b0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x563ae8712c48 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x563ae870f7e8 'len' 'int'
| | `-ImplicitCastExpr 0x563ae8714690 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x563ae8714660 <col:12> 'const int' lvalue .len 0x563ae870f7e8
| |     `-DeclRefExpr 0x563ae8714640 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x563ae8712c48 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x563ae870f850 'cap' 'int'
| | `-ImplicitCastExpr 0x563ae8714720 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x563ae87146f0 <col:12> 'const int' lvalue .cap 0x563ae870f850
| |     `-DeclRefExpr 0x563ae87146d0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x563ae8712c48 '' 'const StringAccum::rep_t &'
| `-CompoundStmt 0x563ae8714778 <col:12>
|-CXXConstructorDecl 0x563ae8712ce8 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x563ae8712ce8
| `-ParmVarDecl 0x563ae8712df8 <col:12> col:12 'StringAccum::rep_t &&'
`-CXXDestructorDecl 0x563ae8714a30 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  NonVirtualBaseLLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563ae870ad68 prev 0x563ae8642118 <../dummy_inc/click/straccum.hh:28:1, line:137:1> line:28:7 referenced class StringAccum definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x563ae870ae60 <col:1, col:7> col:7 implicit referenced class StringAccum
|-AccessSpecDecl 0x563ae870aef0 <col:21, col:27> col:21 public
|-TypedefDecl 0x563ae870af30 <line:30:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x563ae80c6dc0 'const char *'
|   `-QualType 0x563ae80c6311 'const char' const
|     `-BuiltinType 0x563ae80c6310 'char'
|-TypedefDecl 0x563ae870afa0 <line:31:5, col:19> col:19 referenced iterator 'char *'
| `-PointerType 0x563ae80c6f90 'char *'
|   `-BuiltinType 0x563ae80c6310 'char'
|-TypedefDecl 0x563ae870b0e0 <line:33:5, col:57> col:32 referenced unspecified_bool_type 'int (StringAccum::*)() const'
| `-MemberPointerType 0x563ae870b050 'int (StringAccum::*)() const'
|   |-RecordType 0x563ae8384160 'StringAccum'
|   | `-CXXRecord 0x563ae870ad68 'StringAccum'
|   `-ParenType 0x563ae83f38b0 'int () const' sugar
|     `-FunctionProtoType 0x563ae83c7440 'int () const' const cdecl
|       `-BuiltinType 0x563ae80c6370 'int'
|-CXXConstructorDecl 0x563ae870b1a0 <line:35:5, col:24> col:12 used StringAccum 'void ()' inline
|-CXXConstructorDecl 0x563ae870b2f0 <line:36:5, col:45> col:21 StringAccum 'void (int)' inline
| `-ParmVarDecl 0x563ae870b260 <col:33, col:37> col:37 capacity 'int'
|-CXXConstructorDecl 0x563ae870b440 <line:37:5, col:41> col:12 StringAccum 'void (const String &)' inline
| `-ParmVarDecl 0x563ae870b3b0 <col:24, col:38> col:38 str 'const String &'
|-CXXConstructorDecl 0x563ae870b5e8 <line:38:5, col:44> col:12 StringAccum 'void (const StringAccum &)' inline
| `-ParmVarDecl 0x563ae870b528 <col:24, col:43> col:43 x 'const StringAccum &'
|-CXXConstructorDecl 0x563ae870b798 <line:40:5, col:39> col:12 StringAccum 'void (StringAccum &&)' inline
| `-ParmVarDecl 0x563ae870b6d8 <col:24, col:38> col:38 x 'StringAccum &&'
|-CXXDestructorDecl 0x563ae870b890 <line:42:5, col:25> col:12 used ~StringAccum 'void () noexcept' inline
|-CXXMethodDecl 0x563ae870ba48 <line:44:5, col:55> col:25 operator= 'StringAccum &(const StringAccum &)' inline
| `-ParmVarDecl 0x563ae870b980 <col:35, col:54> col:54 x 'const StringAccum &'
|-CXXMethodDecl 0x563ae870bbc8 <line:46:5, col:50> col:25 operator= 'StringAccum &(StringAccum &&)' inline
| `-ParmVarDecl 0x563ae870bb00 <col:35, col:49> col:49 x 'StringAccum &&'
|-CXXMethodDecl 0x563ae870bcc0 <line:49:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x563ae870bd88 <line:50:5, col:23> col:18 data 'char *()' inline
|-CXXMethodDecl 0x563ae870be50 <line:51:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x563ae870bf18 <line:52:5, col:27> col:16 used capacity 'int () const' inline
|-CXXMethodDecl 0x563ae870bfe0 <line:54:5, col:23> col:17 c_str 'const char *()'
|-CXXConversionDecl 0x563ae870c148 <line:56:5, col:45> col:12 operator int (StringAccum::*)() const 'StringAccum::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x563ae870c218 <line:57:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x563ae870c2d8 <line:58:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x563ae870c3e8 <line:60:5, col:35> col:27 used begin 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x563ae870c4f8 <line:61:5, col:27> col:21 begin 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x563ae870c5b8 <line:62:5, col:33> col:27 used end 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x563ae870c678 <line:63:5, col:25> col:21 end 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x563ae870c7c0 <line:65:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x563ae870c730 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x563ae870c950 <line:66:5, col:34> col:18 operator[] 'char &(int)' inline
| `-ParmVarDecl 0x563ae870c880 <col:29, col:33> col:33 i 'int'
|-CXXMethodDecl 0x563ae870ca18 <line:67:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x563ae870cb10 <line:68:5, col:24> col:18 front 'char &()' inline
|-CXXMethodDecl 0x563ae870cbd0 <line:69:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x563ae870cc98 <line:70:5, col:23> col:18 back 'char &()' inline
|-CXXMethodDecl 0x563ae870cd58 <line:72:5, col:33> col:17 used out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x563ae870ce18 <line:73:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x563ae870ced8 <line:75:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x563ae870d028 <line:76:5, col:31> col:18 reserve 'char *(int)' inline
| `-ParmVarDecl 0x563ae870cf90 <col:26, col:30> col:30 n 'int'
|-CXXMethodDecl 0x563ae870d178 <line:77:5, col:35> col:17 set_length 'void (int)' inline
| `-ParmVarDecl 0x563ae870d0e8 <col:28, col:32> col:32 len 'int'
|-CXXMethodDecl 0x563ae870d2d0 <line:78:5, col:23> col:9 resize 'int (int)'
| `-ParmVarDecl 0x563ae870d238 <col:16, col:20> col:20 len 'int'
|-CXXMethodDecl 0x563ae870d420 <line:79:5, col:40> col:17 used adjust_length 'void (int)' inline
| `-ParmVarDecl 0x563ae870d390 <col:31, col:35> col:35 delta 'int'
|-CXXMethodDecl 0x563ae870d640 <line:80:5, col:54> col:18 extend 'char *(int, int)' inline
| |-ParmVarDecl 0x563ae870d4e0 <col:25, col:29> col:29 nadjust 'int'
| `-ParmVarDecl 0x563ae870d560 <col:38, col:53> col:42 nreserve 'int' cinit
|   `-IntegerLiteral 0x563ae87105e8 <col:53> 'int' 0
|-CXXMethodDecl 0x563ae870d798 <line:82:5, col:35> col:17 pop_back 'void (int)' inline
| `-ParmVarDecl 0x563ae870d708 <col:26, col:34> col:30 n 'int' cinit
|   `-IntegerLiteral 0x563ae8710608 <col:34> 'int' 1
|-CXXMethodDecl 0x563ae870d8e0 <line:84:5, col:30> col:17 used append 'void (char)' inline
| `-ParmVarDecl 0x563ae870d850 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x563ae870da30 <line:85:5, col:39> col:17 used append 'void (unsigned char)' inline
| `-ParmVarDecl 0x563ae870d9a0 <col:24, col:38> col:38 c 'unsigned char'
|-CXXMethodDecl 0x563ae870db80 <line:86:5, col:35> col:17 append_utf8 'bool (int)' inline
| `-ParmVarDecl 0x563ae870daf0 <col:29, col:33> col:33 ch 'int'
|-CXXMethodDecl 0x563ae870dcd0 <line:87:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x563ae870dc40 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x563ae870dea8 <line:88:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x563ae870dd90 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x563ae870de10 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x563ae870e088 <line:89:5, col:55> col:17 used append 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x563ae870df70 <col:24, col:45> col:45 s 'const unsigned char *'
| `-ParmVarDecl 0x563ae870dff0 <col:48, col:52> col:52 len 'int'
|-CXXMethodDecl 0x563ae870e268 <line:90:5, col:59> col:17 used append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x563ae870e150 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x563ae870e1d0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x563ae870e448 <line:91:5, col:77> col:17 append 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x563ae870e330 <col:24, col:45> col:45 first 'const unsigned char *'
| `-ParmVarDecl 0x563ae870e3b0 <col:52, col:73> col:73 last 'const unsigned char *'
|-CXXMethodDecl 0x563ae870e628 <line:92:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x563ae870e510 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x563ae870e590 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x563ae870e988 <line:93:5, col:81> col:10 used append_numeric 'void (String::intmax_t, int, bool)'
| |-ParmVarDecl 0x563ae870e770 <col:25, col:42> col:42 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x563ae870e7f0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x563ae8710628 <col:56> 'int' 10
| `-ParmVarDecl 0x563ae870e868 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x563ae8710648 <col:77> 'bool' true
|-CXXMethodDecl 0x563ae870ece8 <line:94:5, col:82> col:10 used append_numeric 'void (String::uintmax_t, int, bool)'
| |-ParmVarDecl 0x563ae870ead0 <col:25, col:43> col:43 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x563ae870eb50 <col:46, col:57> col:50 base 'int' cinit
| | `-IntegerLiteral 0x563ae8710658 <col:57> 'int' 10
| `-ParmVarDecl 0x563ae870ebc8 <col:61, col:78> col:66 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x563ae8710678 <col:78> 'bool' true
|-CXXMethodDecl 0x563ae870ef10 <line:96:5, col:57> col:18 snprintf 'StringAccum &(int, const char *, ...)'
| |-ParmVarDecl 0x563ae870edb8 <col:27, col:31> col:31 n 'int'
| `-ParmVarDecl 0x563ae870ee38 <col:34, col:46> col:46 format 'const char *'
|-CXXMethodDecl 0x563ae870f008 <line:98:5, col:24> col:12 used take_string 'String ()'
|-CXXMethodDecl 0x563ae870f178 <line:100:5, col:29> col:10 used swap 'void (StringAccum &)'
| `-ParmVarDecl 0x563ae870f0b8 <col:15, col:28> col:28 x 'StringAccum &'
|-CXXMethodDecl 0x563ae870f2c8 <line:104:5, col:62> col:17 forward 'void (int)' inline
| |-ParmVarDecl 0x563ae870f238 <col:25, col:29> col:29 delta 'int'
| `-DeprecatedAttr 0x563ae870f370 <col:51> "" ""
|-AccessSpecDecl 0x563ae870f3e0 <line:106:3, col:10> col:3 private
|-EnumDecl 0x563ae870f408 <line:108:5, line:110:5> line:108:5
| `-EnumConstantDecl 0x563ae870f558 <line:109:2, col:23> col:2 referenced MEMO_SPACE 'StringAccum::(anonymous enum at ../dummy_inc/click/straccum.hh:108:5)'
|   `-ImplicitCastExpr 0x563ae870f5a8 <col:15, col:23> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563ae870f538 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' Int: 12
|       `-DeclRefExpr 0x563ae870f508 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' EnumConstant 0x563ae83fc618 'MEMO_SPACE' 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|-CXXRecordDecl 0x563ae870f5c0 <line:112:5, line:122:5> line:112:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x563ae870f6d8 <col:5, col:12> col:12 implicit referenced struct rep_t
| |-FieldDecl 0x563ae870f780 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
| |-FieldDecl 0x563ae870f7e8 <line:114:2, col:6> col:6 referenced len 'int'
| |-FieldDecl 0x563ae870f850 <line:115:2, col:6> col:6 referenced cap 'int'
| |-CXXConstructorDecl 0x563ae870f900 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| | |-CXXCtorInitializer Field 0x563ae870f780 's' 'unsigned char *'
| | | `-CXXReinterpretCastExpr 0x563ae87107b0 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| | |   `-CXXConstCastExpr 0x563ae8710768 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| | |     `-CallExpr 0x563ae8710730 <col:63, col:82> 'const char *'
| | |       `-ImplicitCastExpr 0x563ae8710718 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| | |         `-DeclRefExpr 0x563ae87106c0 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x563ae84198a0 'empty_data' 'const char *()'
| | |-CXXCtorInitializer Field 0x563ae870f7e8 'len' 'int'
| | | `-IntegerLiteral 0x563ae8710828 <line:118:12> 'int' 0
| | |-CXXCtorInitializer Field 0x563ae870f850 'cap' 'int'
| | | `-IntegerLiteral 0x563ae8710890 <col:20> 'int' 0
| | `-CompoundStmt 0x563ae8710910 <col:23, line:119:2>
| |-CXXConstructorDecl 0x563ae870fa78 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| | |-ParmVarDecl 0x563ae870f9b8 <col:17> col:35 'uninitialized_type'
| | `-CompoundStmt 0x563ae8710920 <col:37, line:121:2>
| |-CXXConstructorDecl 0x563ae8712b38 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x563ae8712c48 <col:12> col:12 used 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x563ae870f780 's' 'unsigned char *'
| | | `-ImplicitCastExpr 0x563ae8714600 <col:12> 'unsigned char *' <LValueToRValue>
| | |   `-MemberExpr 0x563ae87145d0 <col:12> 'unsigned char *const' lvalue .s 0x563ae870f780
| | |     `-DeclRefExpr 0x563ae87145b0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x563ae8712c48 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x563ae870f7e8 'len' 'int'
| | | `-ImplicitCastExpr 0x563ae8714690 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x563ae8714660 <col:12> 'const int' lvalue .len 0x563ae870f7e8
| | |     `-DeclRefExpr 0x563ae8714640 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x563ae8712c48 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x563ae870f850 'cap' 'int'
| | | `-ImplicitCastExpr 0x563ae8714720 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x563ae87146f0 <col:12> 'const int' lvalue .cap 0x563ae870f850
| | |     `-DeclRefExpr 0x563ae87146d0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x563ae8712c48 '' 'const StringAccum::rep_t &'
| | `-CompoundStmt 0x563ae8714778 <col:12>
| |-CXXConstructorDecl 0x563ae8712ce8 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x563ae8712ce8
| | `-ParmVarDecl 0x563ae8712df8 <col:12> col:12 'StringAccum::rep_t &&'
| `-CXXDestructorDecl 0x563ae8714a30 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-FieldDecl 0x563ae870fb50 <line:124:5, col:11> col:11 referenced r_ 'StringAccum::rep_t'
|-CXXMethodDecl 0x563ae870fc50 <line:126:5, col:19> col:11 used grow 'char *(int)'
| `-ParmVarDecl 0x563ae870fbb8 <col:16> col:19 'int'
|-CXXMethodDecl 0x563ae870fe60 <line:127:5, col:48> col:11 used hard_extend 'char *(int, int)'
| |-ParmVarDecl 0x563ae870fd10 <col:23, col:27> col:27 nadjust 'int'
| `-ParmVarDecl 0x563ae870fdc0 <col:36, col:40> col:40 nreserve 'int'
|-CXXMethodDecl 0x563ae8710040 <line:128:5, col:44> col:10 used hard_append 'void (const char *, int)'
| |-ParmVarDecl 0x563ae870ff28 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x563ae870ffa8 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x563ae8710198 <line:129:5, col:43> col:10 used hard_append_cstr 'void (const char *)'
| `-ParmVarDecl 0x563ae8710108 <col:27, col:39> col:39 cstr 'const char *'
|-CXXMethodDecl 0x563ae87102e8 <line:130:5, col:33> col:10 used append_utf8_hard 'bool (int)'
| `-ParmVarDecl 0x563ae8710258 <col:27, col:31> col:31 ch 'int'
`-FriendDecl 0x563ae87105a8 <line:132:5, col:70> col:25
  `-FunctionDecl 0x563ae87104e8 parent 0x563ae80c6278 <col:5, col:70> col:25 operator<< 'StringAccum &(StringAccum &, const String &)'
    |-ParmVarDecl 0x563ae87103a0 <col:36, col:49> col:49 sa 'StringAccum &'
    `-ParmVarDecl 0x563ae8710418 <col:53, col:67> col:67 str 'const String &'

Layout: <CGRecordLayout
  LLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  NonVirtualBaseLLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]
