
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | class EtherAddress
         0 |   uint16_t [3] _data
           | [sizeof=6, dsize=6, align=1,
           |  nvsize=6, nvalign=1]

*** Dumping AST Record Layout
         0 | struct ARPResponder::Entry
         0 |   class IPAddress dst
         0 |     uint32_t _addr
         4 |   class IPAddress mask
         4 |     uint32_t _addr
         8 |   class EtherAddress ena
         8 |     uint16_t [3] _data
           | [sizeof=16, dsize=14, align=4,
           |  nvsize=14, nvalign=4]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55948b005c68 prev 0x55948affd408 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55948b005d60 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55948b005df0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55948b005e68 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55948b005f28 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55948b005ff0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55948b006168 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55948b0060a0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55948b006210 <col:24>
| `-OptimizeNoneAttr 0x55948b006268 <col:34>
|-CXXMethodDecl 0x55948b0062b0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55948b006568 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55948b006360 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55948b0063d8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55948b006458 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55948b006620 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55948b006658 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55948b0066c0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55948b006748 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55948b006a68 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55948b006800 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55948b006878 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55948b0068f0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55948b006970 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55948b006b80 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55948b00e4f8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55948b00e4f8
| `-ParmVarDecl 0x55948b00e608 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55948b00e6a8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55948b00e6a8
| `-ParmVarDecl 0x55948b00e7b8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55948b118b10 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55948aff8c80 prev 0x55948aff8a00 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55948aff8d78 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55948aff8e08 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55948aff8e68 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55948aff8f58 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55948aff9058 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55948aff9228 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55948aff90d8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55948aff9150 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55948aff93b8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55948aff92f0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55948aff9460 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55948aff9598 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55948aff94d0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55948aff9738 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55948aff9678 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55948aff98d8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55948aff9818 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55948aff9980 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55948aff9a80 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55948aff9b60 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948aff9a60 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55948aff9a40 <col:26> 'int' 1
| `-EnumConstantDecl 0x55948aff9b10 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55948aff9b78 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55948aff9af0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55948aff9ad0 <col:44> 'int' 2
|-CXXMethodDecl 0x55948aff9cc0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55948aff9ba8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55948aff9c28 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55948aff9e18 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55948aff9d88 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55948affa058 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55948aff9ed8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55948aff9f50 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55948affa108 <col:20>
| `-OptimizeNoneAttr 0x55948affa160 <col:30>
|-CXXMethodDecl 0x55948affa268 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55948affa1a0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55948affa310 <col:20>
| `-OptimizeNoneAttr 0x55948affa368 <col:30>
|-CXXMethodDecl 0x55948affa3b8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55948affa480 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55948affa598 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55948affa620 <line:56:5, col:33> col:23 used PORTS_0_1 'const char []' static
|-VarDecl 0x55948affa6a8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55948affa730 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x55948affa7b8 <line:59:5, col:35> col:23 used PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55948affa848 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55948affa908 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55948affa990 <line:63:5, col:28> col:23 used PUSH 'const char []' static
|-VarDecl 0x55948affaa18 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55948affaaa0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55948affab28 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55948affabb0 <line:67:5, col:39> col:23 used PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55948affac40 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55948affad00 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55948affad90 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55948affaee0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55948affae48 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55948affb070 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55948affafa0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55948affb320 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55948affb128 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55948affb1a8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55948affb228 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55948affb3d8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55948affb4e0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55948affb770 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948affb4c0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55948affb4a0 <col:33> 'int' 0
| |-EnumConstantDecl 0x55948affb570 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55948affb788 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948affb550 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55948affb530 <col:32> 'int' 20
| |-EnumConstantDecl 0x55948affb600 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55948affb7a0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948affb5e0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55948affb5c0 <col:38> 'int' 90
| |-EnumConstantDecl 0x55948affb690 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55948affb7b8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948affb670 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55948affb650 <col:35> 'int' 100
| `-EnumConstantDecl 0x55948affb720 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55948affb7d0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55948affb700 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55948affb6e0 <col:32> 'int' 2000
|-CXXMethodDecl 0x55948affb810 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55948affbc50 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55948affbac0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55948affbb38 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55948affbd20 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55948affbea0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55948affbdd0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55948affc0a8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55948affbf58 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55948affbfd0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55948affc1a8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55948affc248 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55948affc310 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55948affc3a0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55948affc5d0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948affc380 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55948affc360 <col:36> 'int' EnumConstant 0x55948affc310 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55948affc3f0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55948affc440 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55948affc490 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55948affc4e0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55948affc530 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55948affc580 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55948affc6b8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55948affc5f8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55948affc780 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55948affc840 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55948affc900 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55948affc9c0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55948affcad8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55948affcba0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55948affcd20 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55948affcc50 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55948affce48 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55948affd048 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55948affcef8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55948affcf78 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55948b00a998 <col:54, line:127:5>
|   |-ParenExpr 0x55948b00a848 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55948b00a818 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55948b00a508 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55948b00a4e0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55948b00a4c8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55948b00a4b0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55948b00a480 <col:31> 'Router *' lvalue ->_router 0x55948b008360
|   |   |         `-CXXThisExpr 0x55948b00a470 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55948b00a568 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55948b00a548 <col:48> 'int' 0
|   |   `-CallExpr 0x55948b00a778 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55948b00a760 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55948b00a740 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55948ab330e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55948b00a7b8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55948b00a5d8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55948b00a7d0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55948b00a5f8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55948b00a7e8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55948b00a630 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55948b00a800 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55948b00a728 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55948b00a710 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55948b00a6c8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55948b00a8e0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55948b00a878 <col:9> 'Router *' lvalue ->_router 0x55948b008360
|   | | `-CXXThisExpr 0x55948b00a868 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55948b00a8c8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55948b00a8a8 <col:19> 'Router *' lvalue ParmVar 0x55948affcef8 'r' 'Router *'
|   `-BinaryOperator 0x55948b00a978 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55948b00a910 <col:9> 'int' lvalue ->_eindex 0x55948b0083c8
|     | `-CXXThisExpr 0x55948b00a900 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55948b00a960 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55948b00a940 <col:19> 'int' lvalue ParmVar 0x55948affcf78 'eindex' 'int'
|-CXXMethodDecl 0x55948affd1d0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55948affd108 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55948affd2a0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55948affd368 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55948affd408 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55948affd658 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55948affd4d0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55948affd550 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55948affd708 <col:20>
| `-OptimizeNoneAttr 0x55948affd760 <col:30>
|-CXXMethodDecl 0x55948affd868 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55948affd7a0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55948affd910 <col:20>
| `-OptimizeNoneAttr 0x55948affd968 <col:30>
|-CXXMethodDecl 0x55948affda38 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55948affd9a8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55948affdae0 <col:20>
| `-OptimizeNoneAttr 0x55948affdb38 <col:30>
|-CXXMethodDecl 0x55948affdcc8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55948affdb70 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55948affdbf0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55948affde58 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55948affdd90 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55948affdfa8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55948affdf18 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55948affe0f8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55948affe068 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55948affe248 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55948affe1b8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55948affe508 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55948affe300 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55948affe380 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55948affe428 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55948affe5e0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55948affe6a0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55948affe970 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55948affe820 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55948affe898 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55948affea98 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55948affec70 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55948affeb50 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55948affebd0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55948affee58 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55948affed38 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55948affedb8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55948afff1c8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55948affef18 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55948affef90 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55948afff010 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55948b009f80 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55948b009f60 <col:106> 'int' 0
| `-ParmVarDecl 0x55948afff088 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55948b009fb8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55948b009f98 <col:126> 'int' 0
|-CXXMethodDecl 0x55948afff568 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55948afff298 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55948afff330 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55948afff3b0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55948afff428 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55948b009ff0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55948b009fd0 <col:114> 'int' 0
|-CXXMethodDecl 0x55948afff8f8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55948afff640 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55948afff6b8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55948afff738 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55948b00a008 <col:96> 'int' 0
| `-ParmVarDecl 0x55948afff7b0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55948b00a048 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55948b00a028 <col:116> 'int' 0
|-CXXMethodDecl 0x55948afffc78 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55948afff9c8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55948afffa40 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55948afffac0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55948b00a080 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55948b00a060 <col:109> 'int' 0
| `-ParmVarDecl 0x55948afffb38 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55948b00a0b8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55948b00a098 <col:129> 'int' 0
|-CXXMethodDecl 0x55948afffff8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55948afffd48 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55948afffdc0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55948afffe40 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55948afffeb8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55948b00a0f0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55948b00a0d0 <col:117> 'int' 0
|-CXXMethodDecl 0x55948b000388 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55948b0000d0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55948b000148 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55948b0001c8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55948b00a108 <col:99> 'int' 0
| `-ParmVarDecl 0x55948b000240 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55948b00a148 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55948b00a128 <col:119> 'int' 0
|-CXXMethodDecl 0x55948b0007a8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55948b000458 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55948b0004d8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55948b000550 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55948b0005d0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55948b00a180 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55948b00a160 <col:108> 'int' 0
| `-ParmVarDecl 0x55948b000650 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55948b00a1b8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55948b00a198 <col:141> 'int' 0
|-CXXMethodDecl 0x55948b000bc8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55948b000880 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55948b000900 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55948b000978 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55948b0009f8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55948b000a78 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55948b00a1d0 <col:121> 'int' 0
|-CXXMethodDecl 0x55948b000ff8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55948b000ca8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55948b000d28 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55948b000da0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55948b000e20 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55948b00a1f0 <col:98> 'int' 0
| `-ParmVarDecl 0x55948b000ea0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55948b00a210 <col:123> 'int' 0
|-CXXMethodDecl 0x55948b0012c0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55948b0010d0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55948b001150 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55948b0011d0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55948b00a230 <col:80> 'int' 0
|-EnumDecl 0x55948b001378 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55948b001480 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55948b001710 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948b001460 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55948b001440 <col:42> 'int' 1
| |-EnumConstantDecl 0x55948b001510 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55948b001728 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948b0014f0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55948b0014d0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55948b0015a0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55948b001740 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948b001580 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55948b001560 <col:44> 'int' 4
| |-EnumConstantDecl 0x55948b001630 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55948b001758 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948b001610 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55948b0015f0 <col:36> 'int' 7
| `-EnumConstantDecl 0x55948b0016c0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55948b001770 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55948b0016a0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55948b001680 <col:34> 'int' 6
|-CXXMethodDecl 0x55948b001a28 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55948b001798 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55948b001838 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55948b0018b8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55948b001930 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55948b00a2e8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55948b00a2d0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55948b00a2b8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55948b00a298 <col:98, col:105> 'String' (CXXTemporary 0x55948b00a298)
|           `-CXXTemporaryObjectExpr 0x55948b00a260 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55948b001cc8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55948b001af8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55948b001b70 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55948b001be8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55948b00a398 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55948b00a380 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55948b00a368 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55948b00a348 <col:94, col:101> 'String' (CXXTemporary 0x55948b00a348)
| |         `-CXXTemporaryObjectExpr 0x55948b00a310 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55948b00ab80 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55948b00aaf8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55948b00aac8 <col:9> '<bound member function type>' ->add_task_handlers 0x55948b001a28
|     | `-CXXThisExpr 0x55948b00aab8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55948b00ab38 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55948b00aa38 <col:27> 'Task *' lvalue ParmVar 0x55948b001af8 'task' 'Task *'
|     |-ImplicitCastExpr 0x55948b00ab50 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55948b00aa58 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55948b001b70 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55948b00ab68 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55948b00aa78 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55948b0016c0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55948b00aa98 <col:62> 'const String' lvalue ParmVar 0x55948b001be8 'prefix' 'const String &'
|-CXXMethodDecl 0x55948b001ed8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55948b001d90 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55948b001e08 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55948b00a448 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55948b00a430 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55948b00a418 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55948b00a3f8 <col:70, col:77> 'String' (CXXTemporary 0x55948b00a3f8)
| |         `-CXXTemporaryObjectExpr 0x55948b00a3c0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55948b00ad58 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55948b00acd0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55948b00aca0 <col:9> '<bound member function type>' ->add_task_handlers 0x55948b001a28
|     | `-CXXThisExpr 0x55948b00ac90 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55948b00ad10 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55948b00ac10 <col:27> 'Task *' lvalue ParmVar 0x55948b001d90 'task' 'Task *'
|     |-ImplicitCastExpr 0x55948b00ad28 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55948b00ac30 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55948b00ad40 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55948b00ac50 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55948b0016c0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55948b00ac70 <col:57> 'const String' lvalue ParmVar 0x55948b001e08 'prefix' 'const String &'
|-CXXMethodDecl 0x55948b0021b8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55948b001fa0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55948b002020 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55948b002098 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55948b002468 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55948b002288 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55948b002308 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55948b002388 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55948b002758 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55948b002538 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55948b0025b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55948b002630 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55948b002a08 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55948b002828 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55948b0028a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55948b002928 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55948b002cb8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55948b002ad8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55948b002b58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55948b002bd8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55948b002f68 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55948b002d88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55948b002e08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55948b002e80 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55948b003218 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55948b003038 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55948b0030b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55948b003138 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55948b003528 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55948b003340 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55948b0033c0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55948b003440 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55948b003808 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55948b0035f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55948b003678 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55948b003720 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55948b003ae8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55948b0038d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55948b003958 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55948b003a00 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55948b003d50 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55948b003bb8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55948b003c38 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55948b003cb0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55948b003ff8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55948b003e20 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55948b003ea0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55948b003f18 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55948b0042a8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55948b0040c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55948b004148 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55948b0041c8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55948b004558 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55948b004378 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55948b0043f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55948b004470 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55948b004808 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55948b004628 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55948b0046a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55948b004720 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55948b004ad8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55948b0048d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55948b004958 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55948b0049f8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55948b004e08 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55948b004ba8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55948b004c28 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55948b004ca0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55948b004d18 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55948b00a460 <col:93> 'bool' false
|-CXXMethodDecl 0x55948b004ff0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55948b004ed8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55948b004f58 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55948b0051c8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55948b0050b0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55948b005130 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55948b0054a8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55948b005288 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55948b005300 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55948b005380 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55948b0053f8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55948b005798 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55948b005578 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55948b0055f0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55948b005670 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55948b0056e8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55948b0059d0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55948b005870 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55948b0058f0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55948b005bb8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55948b005a98 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55948b005b18 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55948b005c68 prev 0x55948affd408 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55948b005d60 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55948b005df0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55948b005e68 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55948b005f28 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55948b005ff0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55948b006168 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55948b0060a0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55948b006210 <col:24>
| | `-OptimizeNoneAttr 0x55948b006268 <col:34>
| |-CXXMethodDecl 0x55948b0062b0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55948b006568 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55948b006360 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55948b0063d8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55948b006458 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55948b006620 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55948b006658 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55948b0066c0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55948b006748 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55948b006a68 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55948b006800 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55948b006878 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55948b0068f0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55948b006970 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55948b006b80 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55948b00e4f8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55948b00e4f8
| | `-ParmVarDecl 0x55948b00e608 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55948b00e6a8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55948b00e6a8
| | `-ParmVarDecl 0x55948b00e7b8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55948b118b10 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55948b006bf8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55948b006c98 <col:38> "" ""
|-CXXMethodDecl 0x55948b006d28 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55948b006dc8 <col:44> "" ""
|-AccessSpecDecl 0x55948b006e38 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55948b006e60 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55948b006f60 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55948b006fb0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55948b006f40 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55948b006f20 <col:27> 'int' 4
|-FieldDecl 0x55948b007068 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55948b007218 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55948b0072d0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55948b008360 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55948b0083c8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55948b008518 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55948b008458 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55948b0086c8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55948b0085d8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55948b0088a8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55948b008788 <col:20> col:23 'int'
| `-ParmVarDecl 0x55948b008808 <col:25> col:28 'int'
|-CXXMethodDecl 0x55948b008b50 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55948b008970 <col:23> col:26 'int'
| |-ParmVarDecl 0x55948b0089f0 <col:28> col:31 'int'
| `-ParmVarDecl 0x55948b008a68 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55948b008c08 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55948b008cd0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55948b008d20 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55948b008d70 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55948b008f50 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55948b008e00 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55948b008e78 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55948b0091f8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55948b009018 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55948b009098 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55948b009110 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55948b009418 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55948b0092c8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55948b009348 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55948b009750 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55948b0094d8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55948b009558 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55948b0095d0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55948b009650 <col:57> col:60 'int'
|-CXXMethodDecl 0x55948b009938 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55948b009820 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55948b0098a0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55948b009a88 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55948b0099f8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55948b009e08 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55948b009b48 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55948b009bc8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55948b009c40 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55948b009cc0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55948b009f20 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5)
         0 |   TimerCallback callback
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timer
         0 |   int _schedpos1
         8 |   class Timestamp _expiry_s
         8 |     union Timestamp::rep_t _t
         8 |       int64_t x
        16 |   union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
        16 |     TimerCallback callback
        24 |   void * _thunk
        32 |   class Element * _owner
        40 |   class RouterThread * _thread
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | class ARPFaker
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   class IPAddress _ip1
       108 |     uint32_t _addr
       112 |   class EtherAddress _eth1
       112 |     uint16_t [3] _data
       120 |   class IPAddress _ip2
       120 |     uint32_t _addr
       124 |   class EtherAddress _eth2
       124 |     uint16_t [3] _data
       136 |   class Timer _timer
       136 |     int _schedpos1
       144 |     class Timestamp _expiry_s
       144 |       union Timestamp::rep_t _t
       144 |         int64_t x
       152 |     union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
       152 |       TimerCallback callback
       160 |     void * _thunk
       168 |     class Element * _owner
       176 |     class RouterThread * _thread
           | [sizeof=184, dsize=184, align=8,
           |  nvsize=184, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55948adf9c50 prev 0x55948ad5ec88 <../dummy_inc/click/ipaddress.hh:15:1, line:154:1> line:15:7 referenced class IPAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55948adf9d48 <col:1, col:7> col:7 implicit referenced class IPAddress
|-AccessSpecDecl 0x55948adf9dd8 <col:19, col:25> col:19 public
|-TypedefDecl 0x55948adf9e10 <line:17:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x55948abec340 'uninitialized_type'
|   `-CXXRecord 0x55948abec2a8 'uninitialized_type'
|-CXXConstructorDecl 0x55948adf9ed0 <line:20:5, line:22:5> line:20:12 used IPAddress 'void ()' inline
| |-CXXCtorInitializer Field 0x55948adfd620 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55948adfd6c8 <line:21:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55948adfd688 <col:10> 'int' 0
| `-CompoundStmt 0x55948adfd710 <col:13, line:22:5>
|-CXXConstructorDecl 0x55948adfa020 <line:25:5, line:27:5> line:25:12 used IPAddress 'void (unsigned int)' inline
| |-ParmVarDecl 0x55948adf9f90 <col:22, col:31> col:31 used x 'unsigned int'
| |-CXXCtorInitializer Field 0x55948adfd620 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55948adfd760 <line:26:10> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x55948adfd720 <col:10> 'unsigned int' lvalue ParmVar 0x55948adf9f90 'x' 'unsigned int'
| `-CompoundStmt 0x55948adfd7a8 <col:13, line:27:5>
|-CXXConstructorDecl 0x55948adfa178 <line:29:5, line:31:5> line:29:21 IPAddress 'void (int)' inline
| |-ParmVarDecl 0x55948adfa0e8 <col:31, col:35> col:35 used x 'int'
| |-CXXCtorInitializer Field 0x55948adfd620 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55948adfd810 <line:30:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55948adfd7f8 <col:10> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x55948adfd7b8 <col:10> 'int' lvalue ParmVar 0x55948adfa0e8 'x' 'int'
| `-CompoundStmt 0x55948adfd858 <col:13, line:31:5>
|-CXXConstructorDecl 0x55948adfa2d0 <line:33:5, line:35:5> line:33:21 IPAddress 'void (unsigned long)' inline
| |-ParmVarDecl 0x55948adfa240 <col:31, col:45> col:45 used x 'unsigned long'
| |-CXXCtorInitializer Field 0x55948adfd620 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55948adfd8c0 <line:34:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55948adfd8a8 <col:10> 'unsigned long' <LValueToRValue>
| |     `-DeclRefExpr 0x55948adfd868 <col:10> 'unsigned long' lvalue ParmVar 0x55948adfa240 'x' 'unsigned long'
| `-CompoundStmt 0x55948adfd908 <col:13, line:35:5>
|-CXXConstructorDecl 0x55948adfa428 <line:37:5, line:39:5> line:37:21 IPAddress 'void (long)' inline
| |-ParmVarDecl 0x55948adfa398 <col:31, col:36> col:36 used x 'long'
| |-CXXCtorInitializer Field 0x55948adfd620 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55948adfd970 <line:38:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x55948adfd958 <col:10> 'long' <LValueToRValue>
| |     `-DeclRefExpr 0x55948adfd918 <col:10> 'long' lvalue ParmVar 0x55948adfa398 'x' 'long'
| `-CompoundStmt 0x55948adfd9b8 <col:13, line:39:5>
|-CXXConstructorDecl 0x55948adfa5e8 <line:42:5, line:44:5> line:42:12 IPAddress 'void (struct in_addr)' inline
| |-ParmVarDecl 0x55948adfa4f8 <col:22, col:37> col:37 used x 'struct in_addr':'in_addr'
| |-CXXCtorInitializer Field 0x55948adfd620 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55948adfda38 <line:43:10, col:12> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55948adfd9e8 <col:10, col:12> 'in_addr_t':'unsigned int' lvalue .s_addr 0x55948ad2da40
| |     `-DeclRefExpr 0x55948adfd9c8 <col:10> 'struct in_addr':'in_addr' lvalue ParmVar 0x55948adfa4f8 'x' 'struct in_addr':'in_addr'
| `-CompoundStmt 0x55948adfda80 <col:20, line:44:5>
|-CXXConstructorDecl 0x55948adfa778 <line:50:5, line:56:5> line:50:14 IPAddress 'void (const unsigned char *)'
| |-ParmVarDecl 0x55948adfa6b0 <col:24, col:45> col:45 used data 'const unsigned char *'
| `-CompoundStmt 0x55948adfdbe8 <col:51, line:56:5>
|   `-BinaryOperator 0x55948adfdbc8 <line:52:2, col:52> 'uint32_t':'unsigned int' lvalue '='
|     |-MemberExpr 0x55948adfdaa0 <col:2> 'uint32_t':'unsigned int' lvalue ->_addr 0x55948adfd620
|     | `-CXXThisExpr 0x55948adfda90 <col:2> 'IPAddress *' implicit this
|     `-ImplicitCastExpr 0x55948adfdbb0 <col:10, col:52> 'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55948adfdb98 <col:10, col:52> 'const unsigned int' lvalue prefix '*' cannot overflow
|         `-ParenExpr 0x55948adfdb78 <col:11, col:52> 'const unsigned int *'
|           `-CXXReinterpretCastExpr 0x55948adfdb48 <col:12, col:51> 'const unsigned int *' reinterpret_cast<const unsigned int *> <BitCast>
|             `-ImplicitCastExpr 0x55948adfdb30 <col:47> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|               `-DeclRefExpr 0x55948adfdad0 <col:47> 'const unsigned char *' lvalue ParmVar 0x55948adfa6b0 'data' 'const unsigned char *'
|-CXXConstructorDecl 0x55948adfa8c8 <line:63:5, col:39> col:14 IPAddress 'void (const String &)'
| `-ParmVarDecl 0x55948adfa838 <col:24, col:38> col:38 x 'const String &'
|-CXXConstructorDecl 0x55948adfaa78 <line:66:5, line:68:5> line:66:12 IPAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x55948adfa9b8 <col:22, col:48> col:48 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x55948adfdc58 <col:56, line:68:5>
|   `-CStyleCastExpr 0x55948adfdc30 <line:67:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x55948adfdc00 <col:9> 'const uninitialized_type' lvalue ParmVar 0x55948adfa9b8 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x55948adfac08 <line:78:5, col:48> col:22 make_prefix 'IPAddress (int)' static
| `-ParmVarDecl 0x55948adfab40 <col:34, col:38> col:38 prefix_len 'int'
|-CXXMethodDecl 0x55948adfacf8 <line:81:5, line:83:5> line:81:29 make_broadcast 'IPAddress ()' static inline
| `-CompoundStmt 0x55948adfec18 <col:46, line:83:5>
|   `-ReturnStmt 0x55948adfec08 <line:82:2, col:29>
|     `-ExprWithCleanups 0x55948adfebf0 <col:9, col:29> 'IPAddress'
|       `-CXXConstructExpr 0x55948adfebc0 <col:9, col:29> 'IPAddress' 'void (IPAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55948adfea78 <col:9, col:29> 'IPAddress' xvalue
|           `-CXXFunctionalCastExpr 0x55948adfe960 <col:9, col:29> 'IPAddress' functional cast to class IPAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x55948adfe848 <col:9, col:29> 'IPAddress' 'void (unsigned int)'
|               `-IntegerLiteral 0x55948adfdc80 <col:19> 'unsigned int' 4294967295
|-CXXMethodDecl 0x55948adfade8 <line:86:5, line:88:5> line:86:17 empty 'bool () const' inline
| `-CompoundStmt 0x55948adfecc8 <col:31, line:88:5>
|   `-ReturnStmt 0x55948adfecb8 <line:87:2, col:10>
|     `-UnaryOperator 0x55948adfeca0 <col:9, col:10> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x55948adfec88 <col:10> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x55948adfec70 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x55948adfec40 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55948adfd620
|             `-CXXThisExpr 0x55948adfec30 <col:10> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x55948adfaea8 <line:91:5, line:93:5> line:91:21 used addr 'uint32_t () const' inline
| `-CompoundStmt 0x55948adfed48 <col:34, line:93:5>
|   `-ReturnStmt 0x55948adfed38 <line:92:2, col:9>
|     `-ImplicitCastExpr 0x55948adfed20 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55948adfecf0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55948adfd620
|         `-CXXThisExpr 0x55948adfece0 <col:9> 'const IPAddress *' implicit this
|-CXXConversionDecl 0x55948adfaf78 <line:99:5, line:101:5> line:99:12 operator unsigned int 'uint32_t () const' inline
| `-CompoundStmt 0x55948adfedc8 <col:38, line:101:5>
|   `-ReturnStmt 0x55948adfedb8 <line:100:2, col:9>
|     `-ImplicitCastExpr 0x55948adfeda0 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55948adfed70 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55948adfd620
|         `-CXXThisExpr 0x55948adfed60 <col:9> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x55948adfb048 <line:106:5, line:108:5> line:106:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x55948adff098 <col:38, line:108:5>
|   `-ReturnStmt 0x55948adff088 <line:107:2, col:58>
|     `-BinaryOperator 0x55948adff068 <col:9, col:58> 'bool' '=='
|       |-ParenExpr 0x55948adfef80 <col:9, col:36> 'unsigned int'
|       | `-BinaryOperator 0x55948adfef60 <col:10, col:35> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x55948adfef48 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x55948adfedf0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55948adfd620
|       |   |   `-CXXThisExpr 0x55948adfede0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x55948adfef20 <col:18, col:35> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x55948adfef08 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55948adfee88 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x55948ad3bf78 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x55948adfee68 <col:24> 'unsigned int' 4026531840
|       `-CallExpr 0x55948adff040 <col:41, col:58> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x55948adff028 <col:41> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55948adff008 <col:41> 'uint32_t (uint32_t) throw()' lvalue Function 0x55948ad3bf78 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x55948adfefe8 <col:47> 'unsigned int' 3758096384
|-CXXMethodDecl 0x55948adfb108 <line:110:5, line:112:5> line:110:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x55948adff308 <col:39, line:112:5>
|   `-ReturnStmt 0x55948adff2f8 <line:111:2, col:56>
|     `-BinaryOperator 0x55948adff2d8 <col:9, col:56> 'bool' '=='
|       |-ParenExpr 0x55948adff1f0 <col:9, col:35> 'unsigned int'
|       | `-BinaryOperator 0x55948adff1d0 <col:10, col:34> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x55948adff1b8 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x55948adff0c0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x55948adfd620
|       |   |   `-CXXThisExpr 0x55948adff0b0 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x55948adff190 <col:18, col:34> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x55948adff178 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55948adff158 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x55948ad3bf78 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x55948adff138 <col:24> 'unsigned int' 4294901760
|       `-CallExpr 0x55948adff2b0 <col:40, col:56> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x55948adff298 <col:40> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55948adff278 <col:40> 'uint32_t (uint32_t) throw()' lvalue Function 0x55948ad3bf78 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x55948adff258 <col:46> 'unsigned int' 2851995648
|-CXXMethodDecl 0x55948adfb238 <line:114:5, col:37> col:27 used in_addr 'struct in_addr () const' inline
|-CXXConversionDecl 0x55948adfb340 <line:115:5, col:38> col:12 operator in_addr 'struct in_addr () const' inline
|-CXXMethodDecl 0x55948adfb450 <line:117:5, col:32> col:27 data 'unsigned char *()' inline
|-CXXMethodDecl 0x55948adfc518 <line:118:5, col:40> col:33 data 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55948adfc5d8 <line:120:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55948adfc6a0 <line:122:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x55948adfc898 <line:123:5, col:64> col:17 matches_prefix 'bool (IPAddress, IPAddress) const' inline
| |-ParmVarDecl 0x55948adfc750 <col:32, col:42> col:42 addr 'IPAddress'
| `-ParmVarDecl 0x55948adfc7c8 <col:48, col:58> col:58 mask 'IPAddress'
|-CXXMethodDecl 0x55948adfca18 <line:124:5, col:50> col:17 mask_as_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x55948adfc958 <col:34, col:44> col:44 mask 'IPAddress'
|-CXXMethodDecl 0x55948adfcb60 <line:125:5, col:52> col:17 mask_more_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x55948adfcad0 <col:36, col:46> col:46 mask 'IPAddress'
|-CXXMethodDecl 0x55948adfcd08 <line:137:5, col:43> col:23 operator&= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55948adfcc18 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55948adfce50 <line:138:5, col:43> col:23 operator|= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55948adfcdc0 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55948adfcf98 <line:139:5, col:43> col:23 operator^= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x55948adfcf08 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x55948adfd060 <line:141:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x55948adfd120 <line:142:5, col:27> col:12 unparse_mask 'String () const'
|-CXXMethodDecl 0x55948adfd298 <line:143:5, col:41> col:12 unparse_with_mask 'String (IPAddress) const'
| `-ParmVarDecl 0x55948adfd1d0 <col:30> col:39 'IPAddress'
|-CXXMethodDecl 0x55948adfd360 <line:145:5, col:23> col:19 s 'String () const' inline
|-CXXConversionDecl 0x55948adfd448 <line:146:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x55948adfd4f0 <col:51> "" ""
|-TypedefDecl 0x55948adfd590 <line:148:5, col:23> col:23 parameter_type 'IPAddress'
| `-RecordType 0x55948ad5ed20 'IPAddress'
|   `-CXXRecord 0x55948adf9c50 'IPAddress'
|-AccessSpecDecl 0x55948adfd5e8 <line:150:3, col:10> col:3 private
|-FieldDecl 0x55948adfd620 <line:152:5, col:14> col:14 referenced _addr 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55948adfdcc8 <line:15:7> col:7 implicit used constexpr IPAddress 'void (const IPAddress &) noexcept' inline default trivial
| |-ParmVarDecl 0x55948adfddd8 <col:7> col:7 used 'const IPAddress &'
| |-CXXCtorInitializer Field 0x55948adfd620 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55948b049128 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55948b0490e0 <col:7> 'const uint32_t':'const unsigned int' lvalue ._addr 0x55948adfd620
| |     `-DeclRefExpr 0x55948b0490c0 <col:7> 'const IPAddress' lvalue ParmVar 0x55948adfddd8 '' 'const IPAddress &'
| `-CompoundStmt 0x55948b049170 <col:7>
|-CXXConstructorDecl 0x55948adfde78 <col:7> col:7 implicit used constexpr IPAddress 'void (IPAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55948adfdf88 <col:7> col:7 used 'IPAddress &&'
| |-CXXCtorInitializer Field 0x55948adfd620 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55948adfeb68 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55948adfeb20 <col:7> 'uint32_t':'unsigned int' xvalue ._addr 0x55948adfd620
| |     `-CXXStaticCastExpr 0x55948adfeaf0 <col:7> 'IPAddress' xvalue static_cast<class IPAddress &&> <NoOp>
| |       `-DeclRefExpr 0x55948adfeac0 <col:7> 'IPAddress' lvalue ParmVar 0x55948adfdf88 '' 'IPAddress &&'
| `-CompoundStmt 0x55948adfebb0 <col:7>
`-CXXDestructorDecl 0x55948adfe878 <col:7> col:7 implicit referenced ~IPAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddress = type { i32 }
  NonVirtualBaseLLVMType:%class.IPAddress = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55948b0303a0 prev 0x55948aff8bd0 <../dummy_inc/click/etheraddress.hh:9:1, line:148:1> line:9:7 referenced class EtherAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-PackedAttr 0x55948b031e08 <line:148:18>
|-CXXRecordDecl 0x55948b030498 <line:9:1, col:7> col:7 implicit referenced class EtherAddress
|-AccessSpecDecl 0x55948b030528 <col:22, col:28> col:22 public
|-TypedefDecl 0x55948b030560 <line:11:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x55948abec340 'uninitialized_type'
|   `-CXXRecord 0x55948abec2a8 'uninitialized_type'
|-CXXConstructorDecl 0x55948b0305f0 <line:14:5, line:16:5> line:14:12 used EtherAddress 'void ()' inline
| `-CompoundStmt 0x55948b032108 <col:27, line:16:5>
|   `-BinaryOperator 0x55948b0320e8 <line:15:2, col:35> 'uint16_t':'unsigned short' lvalue '='
|     |-ArraySubscriptExpr 0x55948b031ef0 <col:2, col:9> 'uint16_t':'unsigned short' lvalue
|     | |-ImplicitCastExpr 0x55948b031ed8 <col:2> 'uint16_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55948b031e88 <col:2> 'uint16_t [3]' lvalue ->_data 0x55948b031c08
|     | |   `-CXXThisExpr 0x55948b031e78 <col:2> 'EtherAddress *' implicit this
|     | `-IntegerLiteral 0x55948b031eb8 <col:8> 'int' 0
|     `-ImplicitCastExpr 0x55948b0320d0 <col:13, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-BinaryOperator 0x55948b0320b0 <col:13, col:35> 'uint16_t':'unsigned short' lvalue '='
|         |-ArraySubscriptExpr 0x55948b031f88 <col:13, col:20> 'uint16_t':'unsigned short' lvalue
|         | |-ImplicitCastExpr 0x55948b031f70 <col:13> 'uint16_t *' <ArrayToPointerDecay>
|         | | `-MemberExpr 0x55948b031f20 <col:13> 'uint16_t [3]' lvalue ->_data 0x55948b031c08
|         | |   `-CXXThisExpr 0x55948b031f10 <col:13> 'EtherAddress *' implicit this
|         | `-IntegerLiteral 0x55948b031f50 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x55948b032098 <col:24, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|           `-BinaryOperator 0x55948b032078 <col:24, col:35> 'uint16_t':'unsigned short' lvalue '='
|             |-ArraySubscriptExpr 0x55948b032020 <col:24, col:31> 'uint16_t':'unsigned short' lvalue
|             | |-ImplicitCastExpr 0x55948b032008 <col:24> 'uint16_t *' <ArrayToPointerDecay>
|             | | `-MemberExpr 0x55948b031fb8 <col:24> 'uint16_t [3]' lvalue ->_data 0x55948b031c08
|             | |   `-CXXThisExpr 0x55948b031fa8 <col:24> 'EtherAddress *' implicit this
|             | `-IntegerLiteral 0x55948b031fe8 <col:30> 'int' 2
|             `-ImplicitCastExpr 0x55948b032060 <col:35> 'uint16_t':'unsigned short' <IntegralCast>
|               `-IntegerLiteral 0x55948b032040 <col:35> 'int' 0
|-CXXConstructorDecl 0x55948b030740 <line:22:5, line:24:5> line:22:21 EtherAddress 'void (const unsigned char *)' inline
| |-ParmVarDecl 0x55948b0306b0 <col:34, col:55> col:55 used data 'const unsigned char *'
| `-CompoundStmt 0x55948b0322d0 <col:61, line:24:5>
|   `-CallExpr 0x55948b032220 <line:23:2, col:23> 'void *'
|     |-ImplicitCastExpr 0x55948b032208 <col:2> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55948b0321e8 <col:2> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55948acf62d8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
|     |-ImplicitCastExpr 0x55948b032270 <col:9> 'void *' <BitCast>
|     | `-ImplicitCastExpr 0x55948b032258 <col:9> 'uint16_t *' <ArrayToPointerDecay>
|     |   `-MemberExpr 0x55948b032178 <col:9> 'uint16_t [3]' lvalue ->_data 0x55948b031c08
|     |     `-CXXThisExpr 0x55948b032168 <col:9> 'EtherAddress *' implicit this
|     |-ImplicitCastExpr 0x55948b0322a0 <col:16> 'const void *' <BitCast>
|     | `-ImplicitCastExpr 0x55948b032288 <col:16> 'const unsigned char *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55948b0321a8 <col:16> 'const unsigned char *' lvalue ParmVar 0x55948b0306b0 'data' 'const unsigned char *'
|     `-ImplicitCastExpr 0x55948b0322b8 <col:22> 'size_t':'unsigned long' <IntegralCast>
|       `-IntegerLiteral 0x55948b0321c8 <col:22> 'int' 6
|-CXXConstructorDecl 0x55948b030890 <line:27:5, line:29:5> line:27:12 EtherAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x55948b030800 <col:25, col:51> col:51 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x55948b032340 <col:59, line:29:5>
|   `-CStyleCastExpr 0x55948b032318 <line:28:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x55948b0322e8 <col:9> 'const uninitialized_type' lvalue ParmVar 0x55948b030800 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x55948b030988 <line:32:5, line:34:5> line:32:25 used make_broadcast 'EtherAddress ()' static
| `-CompoundStmt 0x55948b032ad8 <col:42, line:34:5>
|   `-ReturnStmt 0x55948b032ac8 <line:33:2, col:28>
|     `-ExprWithCleanups 0x55948b032ab0 <col:9, col:28> 'EtherAddress'
|       `-CXXConstructExpr 0x55948b032a80 <col:9, col:28> 'EtherAddress' 'void (EtherAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55948b0328b8 <col:9, col:28> 'EtherAddress' xvalue
|           `-CXXFunctionalCastExpr 0x55948b032830 <col:9, col:28> 'EtherAddress' functional cast to class EtherAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x55948b032720 <col:9, col:28> 'EtherAddress' 'void (uint16_t)'
|               `-ImplicitCastExpr 0x55948b032708 <col:22> 'uint16_t':'unsigned short' <IntegralCast>
|                 `-IntegerLiteral 0x55948b032368 <col:22> 'int' 65535
|-CXXMethodDecl 0x55948b030a48 <line:36:5, col:70> col:32 broadcast 'EtherAddress ()' static inline
| `-DeprecatedAttr 0x55948b030ae8 <col:59> "" ""
|-TypedefDecl 0x55948b030c68 <line:39:5, col:59> col:34 referenced unspecified_bool_type 'bool (EtherAddress::*)() const'
| `-MemberPointerType 0x55948b030be0 'bool (EtherAddress::*)() const'
|   |-RecordType 0x55948aff8c60 'EtherAddress'
|   | `-CXXRecord 0x55948b0303a0 'EtherAddress'
|   `-ParenType 0x55948b030b80 'bool () const' sugar
|     `-FunctionProtoType 0x55948ab3f0c0 'bool () const' const cdecl
|       `-BuiltinType 0x55948aa96500 'bool'
|-CXXConversionDecl 0x55948b030da8 <line:41:5, line:43:5> line:41:12 operator bool (EtherAddress::*)() const 'EtherAddress::unspecified_bool_type () const' inline
| `-CompoundStmt 0x55948b032eb8 <col:51, line:43:5>
|   `-ReturnStmt 0x55948b032ea8 <line:42:2, col:70>
|     `-ConditionalOperator 0x55948b032e78 <col:9, col:70> 'bool (EtherAddress::*)() const'
|       |-BinaryOperator 0x55948b032da0 <col:9, col:40> 'bool' '||'
|       | |-BinaryOperator 0x55948b032cb8 <col:9, col:28> 'bool' '||'
|       | | |-ImplicitCastExpr 0x55948b032c70 <col:9, col:16> 'bool' <IntegralToBoolean>
|       | | | `-ImplicitCastExpr 0x55948b032c58 <col:9, col:16> 'uint16_t':'unsigned short' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x55948b032ba0 <col:9, col:16> 'const uint16_t':'const unsigned short' lvalue
|       | | |     |-ImplicitCastExpr 0x55948b032b88 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       | | |     | `-MemberExpr 0x55948b032b00 <col:9> 'uint16_t const[3]' lvalue ->_data 0x55948b031c08
|       | | |     |   `-CXXThisExpr 0x55948b032af0 <col:9> 'const EtherAddress *' implicit this
|       | | |     `-IntegerLiteral 0x55948b032b30 <col:15> 'int' 0
|       | | `-ImplicitCastExpr 0x55948b032ca0 <col:21, col:28> 'bool' <IntegralToBoolean>
|       | |   `-ImplicitCastExpr 0x55948b032c88 <col:21, col:28> 'uint16_t':'unsigned short' <LValueToRValue>
|       | |     `-ArraySubscriptExpr 0x55948b032c38 <col:21, col:28> 'const uint16_t':'const unsigned short' lvalue
|       | |       |-ImplicitCastExpr 0x55948b032c20 <col:21> 'const uint16_t *' <ArrayToPointerDecay>
|       | |       | `-MemberExpr 0x55948b032bd0 <col:21> 'uint16_t const[3]' lvalue ->_data 0x55948b031c08
|       | |       |   `-CXXThisExpr 0x55948b032bc0 <col:21> 'const EtherAddress *' implicit this
|       | |       `-IntegerLiteral 0x55948b032c00 <col:27> 'int' 1
|       | `-ImplicitCastExpr 0x55948b032d88 <col:33, col:40> 'bool' <IntegralToBoolean>
|       |   `-ImplicitCastExpr 0x55948b032d70 <col:33, col:40> 'uint16_t':'unsigned short' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x55948b032d50 <col:33, col:40> 'const uint16_t':'const unsigned short' lvalue
|       |       |-ImplicitCastExpr 0x55948b032d38 <col:33> 'const uint16_t *' <ArrayToPointerDecay>
|       |       | `-MemberExpr 0x55948b032ce8 <col:33> 'uint16_t const[3]' lvalue ->_data 0x55948b031c08
|       |       |   `-CXXThisExpr 0x55948b032cd8 <col:33> 'const EtherAddress *' implicit this
|       |       `-IntegerLiteral 0x55948b032d18 <col:39> 'int' 2
|       |-UnaryOperator 0x55948b032e28 <col:44, col:59> 'bool (EtherAddress::*)() const' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x55948b032df8 <col:45, col:59> 'bool () const' CXXMethod 0x55948b030e78 'is_group' 'bool () const'
|       `-ImplicitCastExpr 0x55948b032e60 <col:70> 'bool (EtherAddress::*)() const' <NullToMemberPointer>
|         `-IntegerLiteral 0x55948b032e40 <col:70> 'int' 0
|-CXXMethodDecl 0x55948b030e78 <line:49:5, line:51:5> line:49:17 used is_group 'bool () const' inline
| `-CompoundStmt 0x55948b033078 <col:34, line:51:5>
|   `-ReturnStmt 0x55948b033068 <line:50:2, col:21>
|     `-ImplicitCastExpr 0x55948b033050 <col:9, col:21> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x55948b033030 <col:9, col:21> 'int' '&'
|         |-ImplicitCastExpr 0x55948b033018 <col:9, col:17> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55948b033000 <col:9, col:17> 'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55948b032fc0 <col:9, col:17> 'const unsigned char' lvalue
|         |     |-CXXMemberCallExpr 0x55948b032f80 <col:9, col:14> 'const unsigned char *'
|         |     | `-MemberExpr 0x55948b032f50 <col:9> '<bound member function type>' ->data 0x55948b031310
|         |     |   `-CXXThisExpr 0x55948b032f40 <col:9> 'const EtherAddress *' implicit this
|         |     `-IntegerLiteral 0x55948b032fa0 <col:16> 'int' 0
|         `-IntegerLiteral 0x55948b032fe0 <col:21> 'int' 1
|-CXXMethodDecl 0x55948b030f38 <line:57:5, line:59:5> line:57:17 is_local 'bool () const' inline
| `-CompoundStmt 0x55948b033238 <col:34, line:59:5>
|   `-ReturnStmt 0x55948b033228 <line:58:2, col:21>
|     `-ImplicitCastExpr 0x55948b033210 <col:9, col:21> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x55948b0331f0 <col:9, col:21> 'int' '&'
|         |-ImplicitCastExpr 0x55948b0331d8 <col:9, col:17> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55948b0331c0 <col:9, col:17> 'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55948b033180 <col:9, col:17> 'const unsigned char' lvalue
|         |     |-CXXMemberCallExpr 0x55948b033140 <col:9, col:14> 'const unsigned char *'
|         |     | `-MemberExpr 0x55948b033110 <col:9> '<bound member function type>' ->data 0x55948b031310
|         |     |   `-CXXThisExpr 0x55948b033100 <col:9> 'const EtherAddress *' implicit this
|         |     `-IntegerLiteral 0x55948b033160 <col:16> 'int' 0
|         `-IntegerLiteral 0x55948b0331a0 <col:21> 'int' 2
|-CXXMethodDecl 0x55948b030ff8 <line:64:5, line:66:5> line:64:17 used is_broadcast 'bool () const' inline
| `-CompoundStmt 0x55948b033538 <col:38, line:66:5>
|   `-ReturnStmt 0x55948b033528 <line:65:2, col:43>
|     `-BinaryOperator 0x55948b033508 <col:9, col:43> 'bool' '=='
|       |-BinaryOperator 0x55948b0334c8 <col:9, col:38> 'int' '+'
|       | |-BinaryOperator 0x55948b0333e0 <col:9, col:27> 'int' '+'
|       | | |-ImplicitCastExpr 0x55948b033398 <col:9, col:16> 'int' <IntegralCast>
|       | | | `-ImplicitCastExpr 0x55948b033380 <col:9, col:16> 'uint16_t':'unsigned short' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x55948b0332c8 <col:9, col:16> 'const uint16_t':'const unsigned short' lvalue
|       | | |     |-ImplicitCastExpr 0x55948b0332b0 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       | | |     | `-MemberExpr 0x55948b033260 <col:9> 'uint16_t const[3]' lvalue ->_data 0x55948b031c08
|       | | |     |   `-CXXThisExpr 0x55948b033250 <col:9> 'const EtherAddress *' implicit this
|       | | |     `-IntegerLiteral 0x55948b033290 <col:15> 'int' 0
|       | | `-ImplicitCastExpr 0x55948b0333c8 <col:20, col:27> 'int' <IntegralCast>
|       | |   `-ImplicitCastExpr 0x55948b0333b0 <col:20, col:27> 'uint16_t':'unsigned short' <LValueToRValue>
|       | |     `-ArraySubscriptExpr 0x55948b033360 <col:20, col:27> 'const uint16_t':'const unsigned short' lvalue
|       | |       |-ImplicitCastExpr 0x55948b033348 <col:20> 'const uint16_t *' <ArrayToPointerDecay>
|       | |       | `-MemberExpr 0x55948b0332f8 <col:20> 'uint16_t const[3]' lvalue ->_data 0x55948b031c08
|       | |       |   `-CXXThisExpr 0x55948b0332e8 <col:20> 'const EtherAddress *' implicit this
|       | |       `-IntegerLiteral 0x55948b033328 <col:26> 'int' 1
|       | `-ImplicitCastExpr 0x55948b0334b0 <col:31, col:38> 'int' <IntegralCast>
|       |   `-ImplicitCastExpr 0x55948b033498 <col:31, col:38> 'uint16_t':'unsigned short' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x55948b033478 <col:31, col:38> 'const uint16_t':'const unsigned short' lvalue
|       |       |-ImplicitCastExpr 0x55948b033460 <col:31> 'const uint16_t *' <ArrayToPointerDecay>
|       |       | `-MemberExpr 0x55948b033410 <col:31> 'uint16_t const[3]' lvalue ->_data 0x55948b031c08
|       |       |   `-CXXThisExpr 0x55948b033400 <col:31> 'const EtherAddress *' implicit this
|       |       `-IntegerLiteral 0x55948b033440 <col:37> 'int' 2
|       `-IntegerLiteral 0x55948b0334e8 <col:43> 'int' 196605
|-CXXMethodDecl 0x55948b031178 <line:69:5, line:75:5> line:69:24 is_broadcast 'bool (const unsigned char *)' static inline
| |-ParmVarDecl 0x55948b0310b0 <col:37, col:58> col:58 used data 'const unsigned char *'
| `-CompoundStmt 0x55948b033688 <col:64, line:75:5>
|   `-ReturnStmt 0x55948b033678 <line:71:2, col:68>
|     `-CXXMemberCallExpr 0x55948b033658 <col:9, col:68> 'bool'
|       `-MemberExpr 0x55948b033628 <col:9, col:55> '<bound member function type>' ->is_broadcast 0x55948b030ff8
|         `-CXXReinterpretCastExpr 0x55948b033598 <col:9, col:52> 'const EtherAddress *' reinterpret_cast<const class EtherAddress *> <BitCast>
|           `-ImplicitCastExpr 0x55948b033580 <col:48> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|             `-DeclRefExpr 0x55948b033550 <col:48> 'const unsigned char *' lvalue ParmVar 0x55948b0310b0 'data' 'const unsigned char *'
|-CXXMethodDecl 0x55948b031248 <line:78:5, line:80:5> line:78:27 data 'unsigned char *()' inline
| `-CompoundStmt 0x55948b033750 <col:34, line:80:5>
|   `-ReturnStmt 0x55948b033740 <line:79:2, col:48>
|     `-CXXReinterpretCastExpr 0x55948b033710 <col:9, col:48> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
|       `-ImplicitCastExpr 0x55948b0336f8 <col:43> 'uint16_t *' <ArrayToPointerDecay> part_of_explicit_cast
|         `-MemberExpr 0x55948b0336b0 <col:43> 'uint16_t [3]' lvalue ->_data 0x55948b031c08
|           `-CXXThisExpr 0x55948b0336a0 <col:43> 'EtherAddress *' implicit this
|-CXXMethodDecl 0x55948b031310 <line:83:5, line:85:5> line:83:33 used data 'const unsigned char *() const' inline
| `-CompoundStmt 0x55948b033818 <col:46, line:85:5>
|   `-ReturnStmt 0x55948b033808 <line:84:2, col:54>
|     `-CXXReinterpretCastExpr 0x55948b0337d8 <col:9, col:54> 'const unsigned char *' reinterpret_cast<const unsigned char *> <BitCast>
|       `-ImplicitCastExpr 0x55948b0337c0 <col:49> 'const uint16_t *' <ArrayToPointerDecay> part_of_explicit_cast
|         `-MemberExpr 0x55948b033778 <col:49> 'uint16_t const[3]' lvalue ->_data 0x55948b031c08
|           `-CXXThisExpr 0x55948b033768 <col:49> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x55948b031458 <line:89:5, line:91:5> line:89:28 used sdata 'const uint16_t *() const' inline
| `-CompoundStmt 0x55948b033898 <col:42, line:91:5>
|   `-ReturnStmt 0x55948b033888 <line:90:2, col:9>
|     `-ImplicitCastExpr 0x55948b033870 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       `-MemberExpr 0x55948b033840 <col:9> 'uint16_t const[3]' lvalue ->_data 0x55948b031c08
|         `-CXXThisExpr 0x55948b033830 <col:9> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x55948b031548 <line:94:5, line:97:5> line:94:19 hashcode 'size_t () const' inline
| `-CompoundStmt 0x55948b033ca8 <col:36, line:97:5>
|   `-ReturnStmt 0x55948b033c98 <line:95:2, line:96:31>
|     `-BinaryOperator 0x55948b033c78 <line:95:9, line:96:31> 'unsigned long' '^'
|       |-ParenExpr 0x55948b033af8 <line:95:9, col:46> 'unsigned long'
|       | `-BinaryOperator 0x55948b033ad8 <col:10, col:45> 'unsigned long' '|'
|       |   |-ImplicitCastExpr 0x55948b033ac0 <col:10, col:17> 'unsigned long' <IntegralCast>
|       |   | `-ImplicitCastExpr 0x55948b033aa8 <col:10, col:17> 'uint16_t':'unsigned short' <LValueToRValue>
|       |   |   `-ArraySubscriptExpr 0x55948b033928 <col:10, col:17> 'const uint16_t':'const unsigned short' lvalue
|       |   |     |-ImplicitCastExpr 0x55948b033910 <col:10> 'const uint16_t *' <ArrayToPointerDecay>
|       |   |     | `-MemberExpr 0x55948b0338c0 <col:10> 'uint16_t const[3]' lvalue ->_data 0x55948b031c08
|       |   |     |   `-CXXThisExpr 0x55948b0338b0 <col:10> 'const EtherAddress *' implicit this
|       |   |     `-IntegerLiteral 0x55948b0338f0 <col:16> 'int' 2
|       |   `-ParenExpr 0x55948b033a88 <col:21, col:45> 'size_t':'unsigned long'
|       |     `-BinaryOperator 0x55948b033a68 <col:22, col:43> 'size_t':'unsigned long' '<<'
|       |       |-CStyleCastExpr 0x55948b033a20 <col:22, col:38> 'size_t':'unsigned long' <NoOp>
|       |       | `-ImplicitCastExpr 0x55948b033a08 <col:31, col:38> 'size_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|       |       |   `-ImplicitCastExpr 0x55948b0339f0 <col:31, col:38> 'uint16_t':'unsigned short' <LValueToRValue> part_of_explicit_cast
|       |       |     `-ArraySubscriptExpr 0x55948b0339c0 <col:31, col:38> 'const uint16_t':'const unsigned short' lvalue
|       |       |       |-ImplicitCastExpr 0x55948b0339a8 <col:31> 'const uint16_t *' <ArrayToPointerDecay>
|       |       |       | `-MemberExpr 0x55948b033958 <col:31> 'uint16_t const[3]' lvalue ->_data 0x55948b031c08
|       |       |       |   `-CXXThisExpr 0x55948b033948 <col:31> 'const EtherAddress *' implicit this
|       |       |       `-IntegerLiteral 0x55948b033988 <col:37> 'int' 1
|       |       `-IntegerLiteral 0x55948b033a48 <col:43> 'int' 16
|       `-ParenExpr 0x55948b033c58 <line:96:8, col:31> 'size_t':'unsigned long'
|         `-BinaryOperator 0x55948b033c38 <col:9, col:30> 'size_t':'unsigned long' '<<'
|           |-CStyleCastExpr 0x55948b033bf0 <col:9, col:25> 'size_t':'unsigned long' <NoOp>
|           | `-ImplicitCastExpr 0x55948b033bd8 <col:18, col:25> 'size_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           |   `-ImplicitCastExpr 0x55948b033bc0 <col:18, col:25> 'uint16_t':'unsigned short' <LValueToRValue> part_of_explicit_cast
|           |     `-ArraySubscriptExpr 0x55948b033b90 <col:18, col:25> 'const uint16_t':'const unsigned short' lvalue
|           |       |-ImplicitCastExpr 0x55948b033b78 <col:18> 'const uint16_t *' <ArrayToPointerDecay>
|           |       | `-MemberExpr 0x55948b033b28 <col:18> 'uint16_t const[3]' lvalue ->_data 0x55948b031c08
|           |       |   `-CXXThisExpr 0x55948b033b18 <col:18> 'const EtherAddress *' implicit this
|           |       `-IntegerLiteral 0x55948b033b58 <col:24> 'int' 0
|           `-IntegerLiteral 0x55948b033c18 <col:30> 'int' 9
|-CXXMethodDecl 0x55948b031608 <line:109:5, line:111:5> line:109:19 used unparse 'String () const' inline
| `-CompoundStmt 0x55948b033db8 <col:35, line:111:5>
|   `-ReturnStmt 0x55948b033da8 <line:110:2, col:22>
|     `-ExprWithCleanups 0x55948b033d90 <col:9, col:22> 'String'
|       `-CXXConstructExpr 0x55948b033d60 <col:9, col:22> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55948b033d48 <col:9, col:22> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55948b033d28 <col:9, col:22> 'String' (CXXTemporary 0x55948b033d28)
|             `-CXXMemberCallExpr 0x55948b033d00 <col:9, col:22> 'String'
|               `-MemberExpr 0x55948b033cd0 <col:9> '<bound member function type>' ->unparse_dash 0x55948b031788
|                 `-CXXThisExpr 0x55948b033cc0 <col:9> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x55948b0316c8 <line:118:5, col:28> col:12 unparse_colon 'String () const'
|-CXXMethodDecl 0x55948b031788 <line:126:5, col:27> col:12 used unparse_dash 'String () const'
|-CXXMethodDecl 0x55948b031848 <line:131:5, col:55> col:19 s 'String () const' inline
| `-DeprecatedAttr 0x55948b0318e8 <col:44> "" ""
|-CXXConversionDecl 0x55948b031988 <line:136:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x55948b031a30 <col:51> "" ""
|-TypedefDecl 0x55948b031ae8 <line:138:5, col:33> col:33 parameter_type 'const EtherAddress &'
| `-LValueReferenceType 0x55948b031ab0 'const EtherAddress &'
|   `-QualType 0x55948aff8c61 'const EtherAddress' const
|     `-RecordType 0x55948aff8c60 'EtherAddress'
|       `-CXXRecord 0x55948b0303a0 'EtherAddress'
|-AccessSpecDecl 0x55948b031b40 <line:140:2, col:9> col:2 private
|-FieldDecl 0x55948b031c08 <line:142:5, col:21> col:14 referenced _data 'uint16_t [3]'
|-CXXConstructorDecl 0x55948b031d58 <line:144:5, line:146:5> line:144:5 used EtherAddress 'void (uint16_t)'
| |-ParmVarDecl 0x55948b031c68 <col:18, col:27> col:27 used m 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55948b034060 <col:30, line:146:5>
|   `-BinaryOperator 0x55948b034040 <line:145:2, col:35> 'uint16_t':'unsigned short' lvalue '='
|     |-ArraySubscriptExpr 0x55948b033e48 <col:2, col:9> 'uint16_t':'unsigned short' lvalue
|     | |-ImplicitCastExpr 0x55948b033e30 <col:2> 'uint16_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55948b033de0 <col:2> 'uint16_t [3]' lvalue ->_data 0x55948b031c08
|     | |   `-CXXThisExpr 0x55948b033dd0 <col:2> 'EtherAddress *' implicit this
|     | `-IntegerLiteral 0x55948b033e10 <col:8> 'int' 0
|     `-ImplicitCastExpr 0x55948b034028 <col:13, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-BinaryOperator 0x55948b034008 <col:13, col:35> 'uint16_t':'unsigned short' lvalue '='
|         |-ArraySubscriptExpr 0x55948b033ee0 <col:13, col:20> 'uint16_t':'unsigned short' lvalue
|         | |-ImplicitCastExpr 0x55948b033ec8 <col:13> 'uint16_t *' <ArrayToPointerDecay>
|         | | `-MemberExpr 0x55948b033e78 <col:13> 'uint16_t [3]' lvalue ->_data 0x55948b031c08
|         | |   `-CXXThisExpr 0x55948b033e68 <col:13> 'EtherAddress *' implicit this
|         | `-IntegerLiteral 0x55948b033ea8 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x55948b033ff0 <col:24, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|           `-BinaryOperator 0x55948b033fd0 <col:24, col:35> 'uint16_t':'unsigned short' lvalue '='
|             |-ArraySubscriptExpr 0x55948b033f78 <col:24, col:31> 'uint16_t':'unsigned short' lvalue
|             | |-ImplicitCastExpr 0x55948b033f60 <col:24> 'uint16_t *' <ArrayToPointerDecay>
|             | | `-MemberExpr 0x55948b033f10 <col:24> 'uint16_t [3]' lvalue ->_data 0x55948b031c08
|             | |   `-CXXThisExpr 0x55948b033f00 <col:24> 'EtherAddress *' implicit this
|             | `-IntegerLiteral 0x55948b033f40 <col:30> 'int' 2
|             `-ImplicitCastExpr 0x55948b033fb8 <col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|               `-DeclRefExpr 0x55948b033f98 <col:35> 'uint16_t':'unsigned short' lvalue ParmVar 0x55948b031c68 'm' 'uint16_t':'unsigned short'
|-CXXConstructorDecl 0x55948b0323d0 <line:9:7> col:7 implicit constexpr EtherAddress 'void (const EtherAddress &)' inline default trivial noexcept-unevaluated 0x55948b0323d0
| `-ParmVarDecl 0x55948b0324e8 <col:7> col:7 'const EtherAddress &'
|-CXXConstructorDecl 0x55948b032588 <col:7> col:7 implicit used constexpr EtherAddress 'void (EtherAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55948b032698 <col:7> col:7 used 'EtherAddress &&'
| |-CXXCtorInitializer Field 0x55948b031c08 '_data' 'uint16_t [3]'
| | `-ArrayInitLoopExpr 0x55948b032a20 <col:7> 'uint16_t [3]'
| |   |-OpaqueValueExpr 0x55948b0329a8 <col:7> 'uint16_t [3]' xvalue
| |   | `-MemberExpr 0x55948b032960 <col:7> 'uint16_t [3]' xvalue ._data 0x55948b031c08
| |   |   `-CXXStaticCastExpr 0x55948b032930 <col:7> 'EtherAddress' xvalue static_cast<class EtherAddress &&> <NoOp>
| |   |     `-DeclRefExpr 0x55948b032900 <col:7> 'EtherAddress' lvalue ParmVar 0x55948b032698 '' 'EtherAddress &&'
| |   `-ImplicitCastExpr 0x55948b032a08 <col:7> 'uint16_t':'unsigned short' <LValueToRValue>
| |     `-ArraySubscriptExpr 0x55948b0329e8 <col:7> 'uint16_t':'unsigned short' xvalue
| |       |-ImplicitCastExpr 0x55948b0329d0 <col:7> 'uint16_t *' <ArrayToPointerDecay>
| |       | `-OpaqueValueExpr 0x55948b0329a8 <col:7> 'uint16_t [3]' xvalue
| |       |   `-MemberExpr 0x55948b032960 <col:7> 'uint16_t [3]' xvalue ._data 0x55948b031c08
| |       |     `-CXXStaticCastExpr 0x55948b032930 <col:7> 'EtherAddress' xvalue static_cast<class EtherAddress &&> <NoOp>
| |       |       `-DeclRefExpr 0x55948b032900 <col:7> 'EtherAddress' lvalue ParmVar 0x55948b032698 '' 'EtherAddress &&'
| |       `-ArrayInitIndexExpr 0x55948b0329c0 <<invalid sloc>> 'unsigned long'
| `-CompoundStmt 0x55948b032a70 <col:7>
|-CXXDestructorDecl 0x55948b032750 <col:7> col:7 implicit referenced ~EtherAddress 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55948b0497f8 <col:7> col:7 implicit used operator= 'EtherAddress &(const EtherAddress &) noexcept' inline default trivial
| |-ParmVarDecl 0x55948b049908 <col:7> col:7 used 'const EtherAddress &'
| `-CompoundStmt 0x55948b04a3c0 <col:7>
|   |-CallExpr 0x55948b04a320 <col:7> 'void *'
|   | |-ImplicitCastExpr 0x55948b04a308 <col:7> 'void *(*)(void *, const void *, unsigned long) noexcept' <BuiltinFnToFnPtr>
|   | | `-DeclRefExpr 0x55948b04a298 <col:7> '<builtin fn type>' Function 0x55948b04a050 '__builtin_memcpy' 'void *(void *, const void *, unsigned long) noexcept'
|   | |-ImplicitCastExpr 0x55948b04a358 <col:7> 'void *' <BitCast>
|   | | `-UnaryOperator 0x55948b049fa8 <col:7> 'uint16_t (*)[3]' prefix '&' cannot overflow
|   | |   `-MemberExpr 0x55948b049f20 <col:7> 'uint16_t [3]' lvalue ->_data 0x55948b031c08
|   | |     `-CXXThisExpr 0x55948b049f10 <col:7> 'EtherAddress *' this
|   | |-ImplicitCastExpr 0x55948b04a370 <col:7> 'const void *' <BitCast>
|   | | `-UnaryOperator 0x55948b049ef8 <col:7> 'uint16_t const (*)[3]' prefix '&' cannot overflow
|   | |   `-MemberExpr 0x55948b049e70 <col:7> 'uint16_t const[3]' lvalue ._data 0x55948b031c08
|   | |     `-DeclRefExpr 0x55948b049e50 <col:7> 'const EtherAddress' lvalue ParmVar 0x55948b049908 '' 'const EtherAddress &'
|   | `-IntegerLiteral 0x55948b04a2b8 <col:7> 'unsigned long' 6
|   `-ReturnStmt 0x55948b04a3b0 <col:7>
|     `-UnaryOperator 0x55948b04a398 <col:7> 'EtherAddress' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55948b04a388 <col:7> 'EtherAddress *' this
`-CXXMethodDecl 0x55948b049978 <col:7> col:7 implicit operator= 'EtherAddress &(EtherAddress &&)' inline default trivial noexcept-unevaluated 0x55948b049978
  `-ParmVarDecl 0x55948b049a88 <col:7> col:7 'EtherAddress &&'

Layout: <CGRecordLayout
  LLVMType:%class.EtherAddress = type { [3 x i16] }
  NonVirtualBaseLLVMType:%class.EtherAddress = type { [3 x i16] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55948af915b0 prev 0x55948af883f0 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55948af916a8 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x55948af91748 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x55948af98510 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55948af988f8 <col:11>
|-CXXConstructorDecl 0x55948af985f0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55948af986d8 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55948af99040 <col:11>
|-CXXConstructorDecl 0x55948af98778 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55948af98888 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x55948af9a898 <col:11>
|-CXXDestructorDecl 0x55948af99ba8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55948aca0758 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55948aca0868 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55948aca1130 <col:11>
|   `-ReturnStmt 0x55948aca1120 <col:11>
|     `-UnaryOperator 0x55948aca1108 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55948aca10f8 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x55948aca08d8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55948aca09e8 <col:11> col:11 'Timestamp::rep_t &&'
  `-CompoundStmt 0x55948b02ebd0 <col:11>
    `-ReturnStmt 0x55948b02ebc0 <col:11>
      `-UnaryOperator 0x55948b02eba8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x55948b02eb98 <col:11> 'Timestamp::rep_t *' this

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55948af875a8 prev 0x55948af872b8 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55948af876a0 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x55948af87730 <col:19, col:25> col:19 public
|-TypedefDecl 0x55948af87768 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x55948abec710 'int32_t' sugar
|   |-Typedef 0x55948aaff328 'int32_t'
|   `-TypedefType 0x55948aad8510 '__int32_t' sugar
|     |-Typedef 0x55948aad8128 '__int32_t'
|     `-BuiltinType 0x55948aa96580 'int'
|-TypedefDecl 0x55948af877d0 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x55948abec8d0 'int64_t' sugar
|   |-Typedef 0x55948aaff390 'int64_t'
|   `-TypedefType 0x55948aad8630 '__int64_t' sugar
|     |-Typedef 0x55948aad8208 '__int64_t'
|     `-BuiltinType 0x55948aa965a0 'long'
|-EnumDecl 0x55948af87828 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x55948af879a0 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x55948af87980 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x55948af87958 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x55948af87940 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x55948af87910 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x55948af87a98 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x55948af87a78 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x55948af87a50 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x55948af87a38 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x55948af87a10 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x55948af879f0 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x55948af87ae8 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x55948af87bf0 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55948af88140 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948af87bd0 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x55948af87bb0 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x55948af87c80 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55948af88158 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948af87c60 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x55948af87c40 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x55948af87d10 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55948af88170 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948af87cf0 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x55948af87cd0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x55948af87da0 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55948af88188 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948af87d80 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x55948af87d60 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x55948af87e30 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55948af881a0 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948af87e10 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x55948af87df0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x55948af87ec0 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55948af881b8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948af87ea0 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x55948af87e80 <col:24> 'int' 1000
| |-EnumConstantDecl 0x55948af87f50 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55948af881d0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948af87f30 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x55948af87f10 <col:26> 'int' EnumConstant 0x55948af87bf0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x55948af88020 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55948af881e8 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948af88000 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x55948af87fe0 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x55948af87fa0 <col:27> 'int' EnumConstant 0x55948af87f50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x55948af87fc0 <col:44> 'int' EnumConstant 0x55948af87ec0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x55948af880f0 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x55948af88200 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55948af880d0 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x55948af880b0 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x55948af88070 <col:27> 'int' EnumConstant 0x55948af87f50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x55948af88090 <col:44> 'int' EnumConstant 0x55948af87da0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x55948af88218 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x55948af88320 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x55948af88370 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55948af88300 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x55948af882e0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55948af87f50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x55948af88398 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x55948abec340 'uninitialized_type'
|   `-CXXRecord 0x55948abec2a8 'uninitialized_type'
|-CXXRecordDecl 0x55948af883f0 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x55948af88500 <line:174:5, line:176:5> line:174:12 used Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x55948af926f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55948af98908 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55948af98a28 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x55948af989e0 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x55948af98970 <col:9> '<bound member function type>' ->assign 0x55948af8d148
|     | `-CXXThisExpr 0x55948af98960 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x55948af989a0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x55948af98a10 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x55948af989c0 <col:19> 'int' 0
|-CXXConstructorDecl 0x55948af88748 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x55948af885c0 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x55948af88638 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55948af94240 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55948af94220 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x55948af926f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55948af98a40 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55948af98b90 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x55948af98b18 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x55948af98aa8 <col:9> '<bound member function type>' ->assign 0x55948af8d148
|     | `-CXXThisExpr 0x55948af98a98 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55948af98b60 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55948af98b48 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x55948af98ad8 <col:16> 'long' lvalue ParmVar 0x55948af885c0 'sec' 'long'
|     `-ImplicitCastExpr 0x55948af98b78 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55948af98af8 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55948af88638 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55948af889a8 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55948af88818 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x55948af88890 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55948af94278 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55948af94258 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x55948af926f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55948af98ba8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55948af98ce0 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x55948af98c80 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x55948af98c10 <col:9> '<bound member function type>' ->assign 0x55948af8d148
|     | `-CXXThisExpr 0x55948af98c00 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55948af98cb0 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55948af98c40 <col:16> 'int' lvalue ParmVar 0x55948af88818 'sec' 'int'
|     `-ImplicitCastExpr 0x55948af98cc8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55948af98c60 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55948af88890 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55948af88c08 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x55948af88a78 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x55948af88af0 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55948af942b0 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55948af94290 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x55948af926f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55948af98cf8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55948af98e48 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x55948af98dd0 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x55948af98d60 <col:9> '<bound member function type>' ->assign 0x55948af8d148
|     | `-CXXThisExpr 0x55948af98d50 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55948af98e18 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55948af98e00 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x55948af98d90 <col:16> 'unsigned long' lvalue ParmVar 0x55948af88a78 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x55948af98e30 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55948af98db0 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55948af88af0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55948af89da0 <line:199:5, line:201:5> line:199:21 used Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x55948af88cd8 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x55948af88d50 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55948af942e8 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55948af942c8 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x55948af926f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55948af98e60 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55948af98fb0 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x55948af98f38 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x55948af98ec8 <col:9> '<bound member function type>' ->assign 0x55948af8d148
|     | `-CXXThisExpr 0x55948af98eb8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55948af98f80 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55948af98f68 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55948af98ef8 <col:16> 'unsigned int' lvalue ParmVar 0x55948af88cd8 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x55948af98f98 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55948af98f18 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55948af88d50 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55948af89f00 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x55948af89e70 <col:31> col:37 'double'
|-CXXConstructorDecl 0x55948af8a098 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x55948af89fd8 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x55948af8a2c8 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x55948af8a1d0 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x55948af8a478 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x55948af8a3b8 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x55948af926f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55948af99050 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x55948af98fc8 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x55948af8a3b8 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55948af990b0 <col:19, line:214:5>
|-CXXConstructorDecl 0x55948af8a648 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x55948af8a588 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x55948af926f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55948af990c0 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55948af99170 <col:53, line:219:5>
|   `-CStyleCastExpr 0x55948af99148 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x55948af99118 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x55948af8a588 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x55948af8a838 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x55948af8a7b0 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x55948af87350 'Timestamp'
|   | `-CXXRecord 0x55948af875a8 'Timestamp'
|   `-ParenType 0x55948af8a750 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x55948af8a720 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x55948af878f0 'Timestamp::seconds_type' sugar
|         |-Typedef 0x55948af87768 'seconds_type'
|         `-TypedefType 0x55948abec710 'int32_t' sugar
|           |-Typedef 0x55948aaff328 'int32_t'
|           `-TypedefType 0x55948aad8510 '__int32_t' sugar
|             |-Typedef 0x55948aad8128 '__int32_t'
|             `-BuiltinType 0x55948aa96580 'int'
|-CXXConversionDecl 0x55948af8a978 <line:222:5, col:45> col:12 used operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55948af8aa48 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x55948af99278 <col:37, line:231:5>
|   `-ReturnStmt 0x55948af99268 <line:227:9, col:23>
|     `-BinaryOperator 0x55948af99248 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x55948af99218 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55948af991c8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x55948af91748
|       |   `-MemberExpr 0x55948af99198 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x55948af926f8
|       |     `-CXXThisExpr 0x55948af99188 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55948af99230 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x55948af991f8 <col:23> 'int' 0
|-CXXMethodDecl 0x55948af8ab08 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x55948af8abc8 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x55948af8ac88 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x55948af8ad48 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x55948af8ae08 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x55948af8af78 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x55948af8aeb8 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x55948af8b0c0 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x55948af8b030 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55948af8b188 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x55948af8b228 <col:54> "" ""
|-CXXMethodDecl 0x55948af8b2b8 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x55948af8b358 <col:54> "" ""
|-CXXMethodDecl 0x55948af8b3e8 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x55948af8b488 <col:54> "" ""
|-CXXMethodDecl 0x55948af8b588 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x55948af8b658 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x55948af8b788 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x55948af8b880 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x55948af8b9b8 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55948af99490 <col:39, line:271:5>
|   `-ReturnStmt 0x55948af99480 <line:267:9, col:61>
|     `-CallExpr 0x55948af99420 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x55948af99408 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55948af99290 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55948af92a28 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x55948af99450 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55948af992f0 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x55948af91748
|       |   `-MemberExpr 0x55948af992c0 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x55948af926f8
|       |     `-CXXThisExpr 0x55948af992b0 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55948af99468 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x55948af99390 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x55948af99360 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x55948af99320 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55948af87f50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x55948af99378 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x55948af99340 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55948af87ec0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55948af8ba78 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55948af99650 <col:39, line:279:5>
|   `-ReturnStmt 0x55948af99640 <line:275:9, col:61>
|     `-CallExpr 0x55948af995e0 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x55948af995c8 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55948af994a8 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55948af92a28 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x55948af99610 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55948af99508 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x55948af91748
|       |   `-MemberExpr 0x55948af994d8 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x55948af926f8
|       |     `-CXXThisExpr 0x55948af994c8 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55948af99628 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x55948af995a8 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x55948af99578 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x55948af99538 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55948af87f50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x55948af99590 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x55948af99558 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55948af87da0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55948af8bb38 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55948af997e8 <col:39, line:287:5>
|   `-ReturnStmt 0x55948af997d8 <line:283:9, col:53>
|     `-BinaryOperator 0x55948af997b8 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x55948af99788 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55948af996a8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x55948af91748
|       |   `-MemberExpr 0x55948af99678 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x55948af926f8
|       |     `-CXXThisExpr 0x55948af99668 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55948af997a0 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x55948af99768 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55948af99748 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x55948af99718 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55948af996d8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55948af87bf0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55948af99730 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55948af996f8 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55948af87f50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55948af8bc28 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x55948af9aa80 <col:40, line:293:5>
|   |-DeclStmt 0x55948af99930 <line:291:9, col:48>
|   | `-VarDecl 0x55948af99810 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x55948af99910 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x55948af998b8 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x55948af99888 <col:22> '<bound member function type>' ->subsec 0x55948af8abc8
|   |     |   `-CXXThisExpr 0x55948af99878 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x55948af998f8 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x55948af998d8 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55948af88020 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55948af9aa70 <line:292:9, col:70>
|     `-ExprWithCleanups 0x55948af9aa58 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x55948af9aa28 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55948af9aa10 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x55948af9a9f0 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x55948af9a9c0 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x55948af9a758 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x55948af9a740 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x55948af99948 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x55948af99810 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x55948af9a960 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x55948af9a948 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x55948af9a918 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x55948af9a770 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x55948af9a6e0 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x55948af9a6c8 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x55948af9a678 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55948af874f8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x55948af9a618 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x55948af99978 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x55948af99968 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x55948af9a660 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x55948af9a648 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x55948af99e38 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x55948af999a0 <col:39> 'int' 0
|               |               `-BinaryOperator 0x55948af99a30 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x55948af99a00 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x55948af999c0 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55948af88020 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x55948af99a18 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x55948af999e0 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x55948af99810 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x55948af9a990 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x55948af9a728 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x55948af9a718 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x55948af8bce8 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x55948af9afd8 <col:40, line:302:5>
|   |-DeclStmt 0x55948af9abd0 <line:297:9, col:48>
|   | `-VarDecl 0x55948af9aab0 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x55948af9abb0 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x55948af9ab58 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x55948af9ab28 <col:22> '<bound member function type>' ->subsec 0x55948af8abc8
|   |     |   `-CXXThisExpr 0x55948af9ab18 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x55948af9ab98 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x55948af9ab78 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55948af880f0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55948af9afc8 <line:298:9, col:70>
|     `-ExprWithCleanups 0x55948af9afb0 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x55948af9af80 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55948af9af68 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x55948af9af48 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x55948af9af18 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x55948af9ae40 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x55948af9ae28 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x55948af9abe8 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x55948af9aab0 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x55948af9aeb8 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x55948af9aea0 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x55948af9ae70 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x55948af9ae58 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x55948af9adc8 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x55948af9adb0 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x55948af9ad90 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55948af874f8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x55948af9ad30 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x55948af9ac18 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x55948af9ac08 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x55948af9ad78 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x55948af9ad60 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x55948af9acf0 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x55948af9ac40 <col:39> 'int' 0
|               |               `-BinaryOperator 0x55948af9acd0 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x55948af9aca0 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x55948af9ac60 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55948af880f0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x55948af9acb8 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x55948af9ac80 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x55948af9aab0 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x55948af9aee8 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x55948af9ae10 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x55948af9ae00 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x55948af8bda8 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x55948af9b060 <col:40, line:306:5>
|   `-ReturnStmt 0x55948af9b050 <line:305:9, col:17>
|     `-CXXConstructExpr 0x55948af9b020 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x55948af9b008 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55948af9aff8 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x55948af8bf48 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x55948af8be58 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x55948af8c118 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x55948af8c020 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x55948af8c208 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x55948af8c378 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x55948af8c2b8 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x55948af9b1a8 <col:56, line:320:5>
|   `-ReturnStmt 0x55948af9b198 <line:319:9, col:32>
|     `-ExprWithCleanups 0x55948af9b180 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x55948af9b150 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55948af9b138 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55948af9b0f8 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55948af9b0c8 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55948af9b088 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55948af8c2b8 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x55948af9b0e0 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x55948af9b0a8 <col:31> 'int' 0
|-CXXMethodDecl 0x55948af8c5b8 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x55948af8c430 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55948af8c4a8 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55948af9b378 <col:72, line:326:5>
|   `-ReturnStmt 0x55948af9b368 <line:325:9, col:51>
|     `-ExprWithCleanups 0x55948af9b350 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55948af9b320 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55948af9b308 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55948af9b2c8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55948af9b2b0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55948af9b1d0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55948af8c430 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55948af9b270 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55948af9b258 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55948af9b1f0 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55948af90ea0 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55948af9b298 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55948af9b210 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x55948af8c4a8 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55948af8c768 <line:328:5, line:337:5> line:328:29 used make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x55948af8c678 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55948af9ba40 <col:56, line:337:5>
|   |-DeclStmt 0x55948af9b678 <line:329:9, col:51>
|   | `-VarDecl 0x55948af9b3a0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55948af9b660 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55948af9b630 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55948af9b618 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55948af9b600 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55948af9b5d0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55948af9b5b8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55948af9b5a0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55948af9b490 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55948af9b830 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55948af9b6e0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x55948af91748
|   | | `-MemberExpr 0x55948af9b6b0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55948af926f8
|   | |   `-DeclRefExpr 0x55948af9b690 <col:9> 'Timestamp' lvalue Var 0x55948af9b3a0 't' 'Timestamp'
|   | `-BinaryOperator 0x55948af9b810 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x55948af9b7e0 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55948af9b710 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x55948af8c678 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55948af9b7f8 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x55948af9b7c0 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x55948af9b7a0 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x55948af9b770 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x55948af9b730 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55948af87f50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x55948af9b788 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x55948af9b750 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55948af87ec0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55948af9ba28 <line:336:9, col:16>
|     `-CXXConstructExpr 0x55948af9b9f8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55948af9b9e0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55948af9b9c0 <col:16> 'Timestamp' lvalue Var 0x55948af9b3a0 't' 'Timestamp'
|-CXXMethodDecl 0x55948af8c930 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x55948af8c820 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55948af8c898 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55948af9bbf8 <col:72, line:343:5>
|   `-ReturnStmt 0x55948af9bbe8 <line:342:9, col:51>
|     `-ExprWithCleanups 0x55948af9bbd0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55948af9bba0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55948af9bb88 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55948af9bb48 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55948af9bb30 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55948af9ba78 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55948af8c820 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55948af9baf0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55948af9bad8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55948af9ba98 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55948af90fe8 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55948af9bb18 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55948af9bab8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x55948af8c898 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55948af8ca80 <line:345:5, line:354:5> line:345:29 used make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x55948af8c9f0 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55948af9c040 <col:56, line:354:5>
|   |-DeclStmt 0x55948af9bde8 <line:346:9, col:51>
|   | `-VarDecl 0x55948af9bc20 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55948af9bdd0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55948af9bda0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55948af9bd88 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55948af9bd70 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55948af9bd40 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55948af9bd28 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55948af9bd10 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55948af9bce0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55948af9bfa0 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55948af9be50 <col:9, col:14> 'int64_t':'long' lvalue .x 0x55948af91748
|   | | `-MemberExpr 0x55948af9be20 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55948af926f8
|   | |   `-DeclRefExpr 0x55948af9be00 <col:9> 'Timestamp' lvalue Var 0x55948af9bc20 't' 'Timestamp'
|   | `-BinaryOperator 0x55948af9bf80 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x55948af9bf50 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55948af9be80 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x55948af8c9f0 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55948af9bf68 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x55948af9bf30 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x55948af9bf10 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x55948af9bee0 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x55948af9bea0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55948af87f50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x55948af9bef8 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x55948af9bec0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55948af87da0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55948af9c028 <line:353:9, col:16>
|     `-CXXConstructExpr 0x55948af9bff8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55948af9bfe0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55948af9bfc0 <col:16> 'Timestamp' lvalue Var 0x55948af9bc20 't' 'Timestamp'
|-CXXMethodDecl 0x55948af8cc48 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x55948af8cb38 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55948af8cbb0 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55948af9c1f8 <col:72, line:360:5>
|   `-ReturnStmt 0x55948af9c1e8 <line:359:9, col:51>
|     `-ExprWithCleanups 0x55948af9c1d0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55948af9c1a0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55948af9c188 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55948af9c148 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55948af9c130 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55948af9c078 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55948af8cb38 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55948af9c0f0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55948af9c0d8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55948af9c098 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55948af91130 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55948af9c118 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55948af9c0b8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x55948af8cbb0 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55948af8cd98 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x55948af8cd08 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55948afa8b68 <col:56, line:371:5>
|   |-DeclStmt 0x55948af9c3e8 <line:363:9, col:51>
|   | `-VarDecl 0x55948af9c220 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55948af9c3d0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55948af9c3a0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55948af9c388 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55948af9c370 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55948af9c340 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55948af9c328 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55948af9c310 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55948af9c2e0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55948afa8ac8 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55948af9c450 <col:9, col:14> 'int64_t':'long' lvalue .x 0x55948af91748
|   | | `-MemberExpr 0x55948af9c420 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55948af926f8
|   | |   `-DeclRefExpr 0x55948af9c400 <col:9> 'Timestamp' lvalue Var 0x55948af9c220 't' 'Timestamp'
|   | `-CallExpr 0x55948afa8a68 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x55948afa8a50 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55948af9c480 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55948af92a28 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x55948afa8a98 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55948af9c4a0 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x55948af8cd08 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55948afa8ab0 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x55948afa8a30 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x55948afa8a00 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x55948af9c4c0 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55948af87bf0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x55948afa8a18 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x55948af9c4e0 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55948af87f50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55948afa8b50 <line:370:9, col:16>
|     `-CXXConstructExpr 0x55948afa8b20 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55948afa8b08 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55948afa8ae8 <col:16> 'Timestamp' lvalue Var 0x55948af9c220 't' 'Timestamp'
|-CXXMethodDecl 0x55948af8ce88 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x55948afa8ca8 <col:39, line:377:5>
|   `-ReturnStmt 0x55948afa8c98 <line:376:9, col:30>
|     `-ExprWithCleanups 0x55948afa8c80 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x55948afa8c50 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55948afa8c38 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55948afa8bf8 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x55948afa8ba0 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x55948afa8be0 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x55948afa8bc0 <col:29> 'int' 1
|-CXXMethodDecl 0x55948af8cf48 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x55948afa8d88 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x55948afa8d40 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x55948afa8cd0 <col:9> '<bound member function type>' ->assign 0x55948af8d148
|     | `-CXXThisExpr 0x55948afa8cc0 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x55948afa8d00 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x55948afa8d70 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x55948afa8d20 <col:19> 'int' 0
|-CXXMethodDecl 0x55948af8d148 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55948af8cff8 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55948af8d070 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55948af94320 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55948af94300 <col:60> 'int' 0
| `-CompoundStmt 0x55948afa8f80 <col:63, line:395:5>
|   `-BinaryOperator 0x55948afa8f60 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x55948afa8de0 <col:9, col:12> 'int64_t':'long' lvalue .x 0x55948af91748
|     | `-MemberExpr 0x55948afa8db0 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x55948af926f8
|     |   `-CXXThisExpr 0x55948afa8da0 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x55948afa8f40 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x55948afa8ed0 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x55948afa8e70 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x55948afa8e58 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x55948afa8e40 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x55948afa8e10 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55948af8cff8 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x55948afa8eb8 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x55948afa8e98 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55948af87f50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x55948afa8f28 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x55948afa8f10 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x55948afa8ef0 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x55948af8d070 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55948af8d318 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55948af8d208 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55948af8d280 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55948afa90d8 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x55948afa9090 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x55948afa8fa8 <col:9> '<bound member function type>' ->assign 0x55948af8d148
|     | `-CXXThisExpr 0x55948afa8f98 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55948afa90c0 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55948afa8fd8 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55948af8d208 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x55948afa9050 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55948afa9038 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55948afa8ff8 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55948af90fe8 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x55948afa9078 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55948afa9018 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x55948af8d280 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55948af8d4e8 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55948af8d3d8 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55948af8d450 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55948afa9230 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x55948afa91e8 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x55948afa9100 <col:9> '<bound member function type>' ->assign 0x55948af8d148
|     | `-CXXThisExpr 0x55948afa90f0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55948afa9218 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55948afa9130 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55948af8d3d8 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x55948afa91a8 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55948afa9190 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55948afa9150 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55948af91130 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x55948afa91d0 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55948afa9170 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x55948af8d450 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55948af8d6b8 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55948af8d5a8 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55948af8d620 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55948af94358 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55948af94338 <col:57> 'int' 0
| `-DeprecatedAttr 0x55948af8d768 <col:75> "" ""
|-CXXMethodDecl 0x55948af8d8f8 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55948af8d7e8 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55948af8d860 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55948af8d9a8 <col:74> "" ""
|-CXXMethodDecl 0x55948af8db38 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55948af8da28 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55948af8daa0 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55948af8dbe8 <col:74> "" ""
|-CXXMethodDecl 0x55948af8dc78 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x55948af8dd18 <col:42> "" ""
|-CXXMethodDecl 0x55948af90550 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x55948af90430 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55948af904b0 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x55948af90620 <line:432:5, col:33> col:29 now 'Timestamp ()' static inline
|-CXXMethodDecl 0x55948af906e0 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x55948af90780 <col:20>
| `-OptimizeNoneAttr 0x55948af907d8 <col:30>
|-CXXMethodDecl 0x55948af90820 <line:446:5, col:36> col:29 used recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x55948af908e0 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x55948af909a0 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x55948af90a60 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x55948af90b20 <line:481:5, col:43> col:29 used recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x55948af90be0 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x55948af90ca0 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x55948af90d60 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x55948af90ea0 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55948af90e10 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55948afa9378 <col:58, line:512:5>
|   `-ReturnStmt 0x55948afa9368 <line:511:9, col:53>
|     `-BinaryOperator 0x55948afa9348 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55948afa9318 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55948afa9248 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55948af90e10 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55948afa9330 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55948afa92f8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55948afa92d8 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55948afa92a8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55948afa9268 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55948af87f50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55948afa92c0 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55948afa9288 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55948af87ec0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55948af90fe8 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55948af90f58 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55948afa94c0 <col:58, line:516:5>
|   `-ReturnStmt 0x55948afa94b0 <line:515:9, col:53>
|     `-BinaryOperator 0x55948afa9490 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55948afa9460 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55948afa9390 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55948af90f58 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55948afa9478 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55948afa9440 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55948afa9420 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55948afa93f0 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55948afa93b0 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55948af87f50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55948afa9408 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55948afa93d0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55948af87da0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55948af91130 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55948af910a0 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55948afa9608 <col:58, line:520:5>
|   `-ReturnStmt 0x55948afa95f8 <line:519:9, col:53>
|     `-BinaryOperator 0x55948afa95d8 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55948afa95a8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55948afa94d8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55948af910a0 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55948afa95c0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55948afa9588 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55948afa9568 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x55948afa9538 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55948afa94f8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55948af87bf0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55948afa9550 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55948afa9518 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55948af87f50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55948af91278 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55948af911e8 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55948afa9750 <col:60, line:524:5>
|   `-ReturnStmt 0x55948afa9740 <line:523:9, col:55>
|     `-BinaryOperator 0x55948afa9720 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55948afa96f0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55948afa9620 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55948af911e8 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55948afa9708 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55948afa96d0 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55948afa96b0 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x55948afa9680 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55948afa9640 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55948af87f50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55948afa9698 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55948afa9660 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55948af87ec0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55948af913c0 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55948af91330 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55948afa9898 <col:60, line:528:5>
|   `-ReturnStmt 0x55948afa9888 <line:527:9, col:55>
|     `-BinaryOperator 0x55948afa9868 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55948afa9838 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55948afa9768 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55948af91330 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55948afa9850 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55948afa9818 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55948afa97f8 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x55948afa97c8 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55948afa9788 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55948af87f50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55948afa97e0 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55948afa97a8 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55948af87da0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55948af91508 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55948af91478 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55948afa99e0 <col:60, line:532:5>
|   `-ReturnStmt 0x55948afa99d0 <line:531:9, col:55>
|     `-BinaryOperator 0x55948afa99b0 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55948afa9980 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55948afa98b0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55948af91478 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55948afa9998 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55948afa9960 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55948afa9940 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55948afa9910 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55948afa98d0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55948af87bf0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55948afa9928 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55948afa98f0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55948af87f50 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x55948af915b0 prev 0x55948af883f0 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55948af916a8 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x55948af91748 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x55948af98510 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55948af988f8 <col:11>
| |-CXXConstructorDecl 0x55948af985f0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55948af986d8 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x55948af99040 <col:11>
| |-CXXConstructorDecl 0x55948af98778 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x55948af98888 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x55948af9a898 <col:11>
| |-CXXDestructorDecl 0x55948af99ba8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55948aca0758 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55948aca0868 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x55948aca1130 <col:11>
| |   `-ReturnStmt 0x55948aca1120 <col:11>
| |     `-UnaryOperator 0x55948aca1108 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55948aca10f8 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x55948aca08d8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x55948aca09e8 <col:11> col:11 'Timestamp::rep_t &&'
|   `-CompoundStmt 0x55948b02ebd0 <col:11>
|     `-ReturnStmt 0x55948b02ebc0 <col:11>
|       `-UnaryOperator 0x55948b02eba8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55948b02eb98 <col:11> 'Timestamp::rep_t *' this
|-EnumDecl 0x55948af917b0 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x55948af918b0 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x55948af91ab0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948af91890 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55948af91870 <col:21> 'int' 0
| |-EnumConstantDecl 0x55948af91940 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x55948af91ac8 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948af91920 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x55948af91900 <col:23> 'int' 1
| |-EnumConstantDecl 0x55948af919d0 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x55948af91ae0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948af919b0 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x55948af91990 <col:23> 'int' 2
| `-EnumConstantDecl 0x55948af91a60 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x55948af91af8 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55948af91a40 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x55948af91a20 <col:27> 'int' 3
|-CXXMethodDecl 0x55948af91b38 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x55948af91c00 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x55948af91e08 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x55948af91cb0 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x55948af91d30 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x55948af94370 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x55948af92018 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x55948af91ec8 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x55948af91f40 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x55948af920e8 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x55948af921a8 <line:635:5, col:37> col:24 used warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x55948af92318 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x55948af92258 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x55948af923e0 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x55948af924a0 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x55948af92560 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x55948af92620 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x55948af926c0 <line:670:3, col:10> col:3 private
|-FieldDecl 0x55948af926f8 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x55948af92768 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x55948afa99f8 <col:27, line:684:5>
|-CXXMethodDecl 0x55948af92828 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x55948afa9a08 <col:27, line:696:5>
|-CXXMethodDecl 0x55948af92a28 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x55948af928d8 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x55948af92950 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55948afa9b90 <col:66, line:700:5>
|   `-ReturnStmt 0x55948afa9b80 <line:699:9, col:31>
|     `-CallExpr 0x55948afa9b20 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x55948afa9b08 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55948afa9ab8 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x55948ae14dd8 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x55948afa9b50 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x55948afa9a78 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x55948af928d8 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x55948afa9b68 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55948afa9a98 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x55948af92950 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55948af92d98 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x55948af92ae8 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x55948af92b60 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x55948af92bd8 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x55948af92c50 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55948afa9ee0 <col:64, line:707:5>
|   |-DeclStmt 0x55948afa9c20 <line:704:9, col:24>
|   | `-VarDecl 0x55948afa9bb8 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x55948afa9e30 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x55948afa9c38 <col:9> 'int32_t':'int' lvalue ParmVar 0x55948af92b60 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x55948afa9e18 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x55948afa9db0 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x55948afa9d98 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55948afa9d18 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x55948ae1a0a8 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x55948afa9de8 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x55948afa9cb8 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x55948af92bd8 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x55948afa9e00 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x55948afa9cd8 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x55948af92c50 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x55948afa9cf8 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x55948afa9bb8 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x55948afa9ec0 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x55948afa9e50 <col:9> 'int32_t':'int' lvalue ParmVar 0x55948af92ae8 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x55948afa9ea8 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x55948afa9e90 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x55948afa9e70 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x55948afa9bb8 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x55948af93038 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x55948af92e68 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x55948af92ee0 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x55948af92f58 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x55948af932d8 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x55948af93100 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x55948af93178 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x55948af931f0 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x55948af93468 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x55948af933a0 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x55948af93668 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x55948af93520 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x55948af93598 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x55948af93938 <line:717:5, col:73> col:24
| `-FunctionDecl 0x55948af93878 parent 0x55948aa96488 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55948af93728 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x55948af937a0 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x55948af93b58 <line:718:5, col:72> col:24
| `-FunctionDecl 0x55948af93a98 parent 0x55948aa96488 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55948af93988 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x55948af93a00 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x55948af93d20 <line:719:5, col:57> col:29
| `-FunctionDecl 0x55948af93c68 parent 0x55948aa96488 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x55948af93ba8 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x55948af93fa8 <line:720:5, col:73> col:30
| `-FunctionDecl 0x55948af93ee8 parent 0x55948aa96488 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55948af93d98 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x55948af93e10 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x55948af941c8 <line:721:5, col:73> col:30
| `-FunctionDecl 0x55948af94108 parent 0x55948aa96488 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55948af93ff8 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x55948af94070 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x55948af99a50 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x55948af99b38 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x55948af926f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55948af9a5a8 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x55948af9a560 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x55948af926f8
| |     `-DeclRefExpr 0x55948af9a540 <col:7> 'const Timestamp' lvalue ParmVar 0x55948af99b38 '' 'const Timestamp &'
| `-CompoundStmt 0x55948af9a608 <col:7>
|-CXXConstructorDecl 0x55948af99cb8 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55948af99dc8 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x55948af926f8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55948af9a8a8 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x55948af9a850 <col:7> 'Timestamp::rep_t' xvalue ._t 0x55948af926f8
| |     `-CXXStaticCastExpr 0x55948af9a820 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x55948af9a7f0 <col:7> 'Timestamp' lvalue ParmVar 0x55948af99dc8 '' 'Timestamp &&'
| `-CompoundStmt 0x55948af9a908 <col:7>
|-CXXDestructorDecl 0x55948af99e78 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55948aca05a8 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x55948aca06b8 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x55948aca11a8 <col:7>
|   |-CXXMemberCallExpr 0x55948aca1148 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x55948aca1088 <col:7> '<bound member function type>' .operator= 0x55948aca0758
|   | | `-MemberExpr 0x55948aca0f98 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x55948af926f8
|   | |   `-CXXThisExpr 0x55948aca0f88 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x55948aca1058 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x55948af926f8
|   |   `-DeclRefExpr 0x55948aca1038 <col:7> 'const Timestamp' lvalue ParmVar 0x55948aca06b8 '' 'const Timestamp &'
|   `-ReturnStmt 0x55948aca1198 <col:7>
|     `-UnaryOperator 0x55948aca1180 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55948aca1170 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x55948aca0a58 <col:7> col:7 implicit used operator= 'Timestamp &(Timestamp &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55948aca0b68 <col:7> col:7 used 'Timestamp &&'
  `-CompoundStmt 0x55948b02ec48 <col:7>
    |-CXXMemberCallExpr 0x55948b02ebe8 <col:7> 'Timestamp::rep_t' lvalue
    | |-MemberExpr 0x55948b02eb50 <col:7> '<bound member function type>' .operator= 0x55948aca08d8
    | | `-MemberExpr 0x55948b02ea20 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x55948af926f8
    | |   `-CXXThisExpr 0x55948b02ea10 <col:7> 'Timestamp *' this
    | `-MemberExpr 0x55948b02eb20 <col:7> 'Timestamp::rep_t' xvalue ._t 0x55948af926f8
    |   `-CXXStaticCastExpr 0x55948b02eaf0 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
    |     `-DeclRefExpr 0x55948b02eac0 <col:7> 'Timestamp' lvalue ParmVar 0x55948aca0b68 '' 'Timestamp &&'
    `-ReturnStmt 0x55948b02ec38 <col:7>
      `-UnaryOperator 0x55948b02ec20 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x55948b02ec10 <col:7> 'Timestamp *' this

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55948b02bc28 <../dummy_inc/click/timer.hh:343:5, line:345:5> line:343:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x55948b02bd58 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
`-CXXDestructorDecl 0x55948b02c848 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { void (%class.Timer*, i8*)* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55948b016458 prev 0x55948aff88a0 <../dummy_inc/click/timer.hh:14:1, line:358:1> line:14:7 referenced class Timer definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55948b016550 <col:1, col:7> col:7 implicit referenced class Timer
|-AccessSpecDecl 0x55948b0165e0 <col:15, col:21> col:15 public
|-CXXConstructorDecl 0x55948b016640 <line:22:5, col:11> col:5 Timer 'void ()'
|-CXXRecordDecl 0x55948b0166e8 <line:24:5, line:25:5> line:24:12 referenced struct do_nothing_t definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55948b016808 <col:5, col:12> col:12 implicit struct do_nothing_t
| |-CXXConstructorDecl 0x55948b1184e0 <col:12> col:12 implicit constexpr do_nothing_t 'void ()' inline default trivial noexcept-unevaluated 0x55948b1184e0
| |-CXXConstructorDecl 0x55948b1185c0 <col:12> col:12 implicit constexpr do_nothing_t 'void (const Timer::do_nothing_t &)' inline default trivial noexcept-unevaluated 0x55948b1185c0
| | `-ParmVarDecl 0x55948b1186a8 <col:12> col:12 'const Timer::do_nothing_t &'
| `-CXXConstructorDecl 0x55948b118748 <col:12> col:12 implicit constexpr do_nothing_t 'void (Timer::do_nothing_t &&)' inline default trivial noexcept-unevaluated 0x55948b118748
|   `-ParmVarDecl 0x55948b118858 <col:12> col:12 'Timer::do_nothing_t &&'
|-CXXConstructorDecl 0x55948b0169a8 <line:32:5, col:37> col:5 Timer 'void (const Timer::do_nothing_t &)'
| `-ParmVarDecl 0x55948b0168e8 <col:11, col:31> col:31 unused 'const Timer::do_nothing_t &'
|-CXXConstructorDecl 0x55948b016bf8 <line:38:5, col:43> col:5 Timer 'void (TimerCallback, void *)'
| |-ParmVarDecl 0x55948b016a68 <col:11, col:25> col:25 f 'TimerCallback':'void (*)(Timer *, void *)'
| `-ParmVarDecl 0x55948b016ae8 <col:28, col:34> col:34 user_data 'void *'
|-CXXConstructorDecl 0x55948b016d88 <line:43:5, col:27> col:5 used Timer 'void (Element *)'
| `-ParmVarDecl 0x55948b016cc0 <col:11, col:20> col:20 element 'Element *'
|-CXXConstructorDecl 0x55948b016f08 <line:47:5, col:21> col:5 Timer 'void (Task *)'
| `-ParmVarDecl 0x55948b016e48 <col:11, col:17> col:17 task 'Task *'
|-CXXConstructorDecl 0x55948b0170b8 <line:52:5, col:25> col:5 Timer 'void (const Timer &)'
| `-ParmVarDecl 0x55948b016ff8 <col:11, col:24> col:24 x 'const Timer &'
|-CXXDestructorDecl 0x55948b0171b0 <line:55:5, line:58:5> line:55:12 used ~Timer 'void () noexcept' inline
| `-CompoundStmt 0x55948b02ca20 <col:21, line:58:5>
|   `-IfStmt 0x55948b02ca08 <line:56:2, line:57:17>
|     |-CXXMemberCallExpr 0x55948b02c970 <line:56:6, col:16> 'bool'
|     | `-MemberExpr 0x55948b02c940 <col:6> '<bound member function type>' ->scheduled 0x55948b017a08
|     |   `-ImplicitCastExpr 0x55948b02c990 <col:6> 'const Timer *' <NoOp>
|     |     `-CXXThisExpr 0x55948b02c930 <col:6> 'Timer *' implicit this
|     `-CXXMemberCallExpr 0x55948b02c9e8 <line:57:6, col:17> 'void'
|       `-MemberExpr 0x55948b02c9b8 <col:6> '<bound member function type>' ->unschedule 0x55948b02b0d0
|         `-CXXThisExpr 0x55948b02c9a8 <col:6> 'Timer *' implicit this
|-CXXMethodDecl 0x55948b0172b0 <line:62:5, line:65:5> line:62:17 used assign 'void ()' inline
| `-CompoundStmt 0x55948b02cbc0 <col:26, line:65:5>
|   |-BinaryOperator 0x55948b02cae0 <line:63:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x55948b02ca78 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x55948b02bd58
|   | | `-MemberExpr 0x55948b02ca48 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x55948b02be18
|   | |   `-CXXThisExpr 0x55948b02ca38 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x55948b02cac8 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55948b02caa8 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x55948b02c278 'do_nothing_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x55948b02cba0 <line:64:2, col:20> 'void *' lvalue '='
|     |-MemberExpr 0x55948b02cb10 <col:2> 'void *' lvalue ->_thunk 0x55948b02be98
|     | `-CXXThisExpr 0x55948b02cb00 <col:2> 'Timer *' implicit this
|     `-CStyleCastExpr 0x55948b02cb78 <col:11, col:20> 'void *' <IntegralToPointer>
|       `-IntegerLiteral 0x55948b02cb40 <col:20> 'int' 1
|-CXXMethodDecl 0x55948b0173f0 <line:68:5, line:71:5> line:68:17 assign 'void (const Timer::do_nothing_t &)' inline
| |-ParmVarDecl 0x55948b017360 <col:24, col:44> col:44 used unused 'const Timer::do_nothing_t &'
| `-CompoundStmt 0x55948b02cd20 <col:52, line:71:5>
|   |-CStyleCastExpr 0x55948b02cc10 <line:69:2, col:9> 'void' <ToVoid>
|   | `-DeclRefExpr 0x55948b02cbe0 <col:9> 'const Timer::do_nothing_t' lvalue ParmVar 0x55948b017360 'unused' 'const Timer::do_nothing_t &'
|   `-CXXMemberCallExpr 0x55948b02cd00 <line:70:2, col:9> 'void'
|     `-MemberExpr 0x55948b02ccd0 <col:2> '<bound member function type>' ->assign 0x55948b0172b0
|       `-CXXThisExpr 0x55948b02ccc0 <col:2> 'Timer *' implicit this
|-CXXMethodDecl 0x55948b0175c0 <line:76:5, line:79:5> line:76:17 assign 'void (TimerCallback, void *)' inline
| |-ParmVarDecl 0x55948b0174a8 <col:24, col:38> col:38 used f 'TimerCallback':'void (*)(Timer *, void *)'
| |-ParmVarDecl 0x55948b017528 <col:41, col:47> col:47 used user_data 'void *'
| `-CompoundStmt 0x55948b02cea0 <col:58, line:79:5>
|   |-BinaryOperator 0x55948b02cde8 <line:77:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x55948b02cd80 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x55948b02bd58
|   | | `-MemberExpr 0x55948b02cd50 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x55948b02be18
|   | |   `-CXXThisExpr 0x55948b02cd40 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x55948b02cdd0 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' <LValueToRValue>
|   |   `-DeclRefExpr 0x55948b02cdb0 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue ParmVar 0x55948b0174a8 'f' 'TimerCallback':'void (*)(Timer *, void *)'
|   `-BinaryOperator 0x55948b02ce80 <line:78:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x55948b02ce18 <col:2> 'void *' lvalue ->_thunk 0x55948b02be98
|     | `-CXXThisExpr 0x55948b02ce08 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x55948b02ce68 <col:11> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x55948b02ce48 <col:11> 'void *' lvalue ParmVar 0x55948b017528 'user_data' 'void *'
|-CXXMethodDecl 0x55948b017710 <line:84:5, line:87:5> line:84:10 assign 'void (Element *)'
| |-ParmVarDecl 0x55948b017680 <col:17, col:26> col:26 used element 'Element *'
| `-CompoundStmt 0x55948b02d038 <col:35, line:87:5>
|   |-BinaryOperator 0x55948b02cf68 <line:85:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x55948b02cf00 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x55948b02bd58
|   | | `-MemberExpr 0x55948b02ced0 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x55948b02be18
|   | |   `-CXXThisExpr 0x55948b02cec0 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x55948b02cf50 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55948b02cf30 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x55948b02c450 'element_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x55948b02d018 <line:86:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x55948b02cf98 <col:2> 'void *' lvalue ->_thunk 0x55948b02be98
|     | `-CXXThisExpr 0x55948b02cf88 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x55948b02d000 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x55948b02cfe8 <col:11> 'Element *' <LValueToRValue>
|         `-DeclRefExpr 0x55948b02cfc8 <col:11> 'Element *' lvalue ParmVar 0x55948b017680 'element' 'Element *'
|-CXXMethodDecl 0x55948b017858 <line:91:5, line:94:5> line:91:10 assign 'void (Task *)'
| |-ParmVarDecl 0x55948b0177c8 <col:17, col:23> col:23 used task 'Task *'
| `-CompoundStmt 0x55948b02d1d0 <col:29, line:94:5>
|   |-BinaryOperator 0x55948b02d100 <line:92:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x55948b02d098 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x55948b02bd58
|   | | `-MemberExpr 0x55948b02d068 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x55948b02be18
|   | |   `-CXXThisExpr 0x55948b02d058 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x55948b02d0e8 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55948b02d0c8 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x55948b02c628 'task_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x55948b02d1b0 <line:93:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x55948b02d130 <col:2> 'void *' lvalue ->_thunk 0x55948b02be98
|     | `-CXXThisExpr 0x55948b02d120 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x55948b02d198 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x55948b02d180 <col:11> 'Task *' <LValueToRValue>
|         `-DeclRefExpr 0x55948b02d160 <col:11> 'Task *' lvalue ParmVar 0x55948b0177c8 'task' 'Task *'
|-CXXMethodDecl 0x55948b017948 <line:98:5, line:100:5> line:98:17 initialized 'bool () const' inline
| `-CompoundStmt 0x55948b02d2b0 <col:37, line:100:5>
|   `-ReturnStmt 0x55948b02d2a0 <line:99:2, col:19>
|     `-BinaryOperator 0x55948b02d280 <col:9, col:19> 'bool' '!='
|       |-ImplicitCastExpr 0x55948b02d250 <col:9> 'Element *' <LValueToRValue>
|       | `-MemberExpr 0x55948b02d200 <col:9> 'Element *const' lvalue ->_owner 0x55948b02bef8
|       |   `-CXXThisExpr 0x55948b02d1f0 <col:9> 'const Timer *' implicit this
|       `-ImplicitCastExpr 0x55948b02d268 <col:19> 'Element *' <NullToPointer>
|         `-IntegerLiteral 0x55948b02d230 <col:19> 'int' 0
|-CXXMethodDecl 0x55948b017a08 <line:103:5, line:105:5> line:103:17 used scheduled 'bool () const' inline
| `-CompoundStmt 0x55948b02d370 <col:35, line:105:5>
|   `-ReturnStmt 0x55948b02d360 <line:104:2, col:23>
|     `-BinaryOperator 0x55948b02d340 <col:9, col:23> 'bool' '!='
|       |-ImplicitCastExpr 0x55948b02d328 <col:9> 'int' <LValueToRValue>
|       | `-MemberExpr 0x55948b02d2d8 <col:9> 'const int' lvalue ->_schedpos1 0x55948b02bb78
|       |   `-CXXThisExpr 0x55948b02d2c8 <col:9> 'const Timer *' implicit this
|       `-IntegerLiteral 0x55948b02d308 <col:23> 'int' 0
|-CXXMethodDecl 0x55948b017ac8 <line:116:5, line:118:5> line:116:29 expiry_steady 'const Timestamp &() const' inline
| `-CompoundStmt 0x55948b02d3d8 <col:51, line:118:5>
|   `-ReturnStmt 0x55948b02d3c8 <line:117:2, col:9>
|     `-MemberExpr 0x55948b02d398 <col:9> 'const Timestamp' lvalue ->_expiry_s 0x55948b02bbd8
|       `-CXXThisExpr 0x55948b02d388 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x55948b017b88 <line:131:5, line:136:5> line:131:22 expiry 'Timestamp () const' inline
| `-CompoundStmt 0x55948b02d930 <col:37, line:136:5>
|   `-IfStmt 0x55948b02d908 <line:132:2, line:135:13> has_else
|     |-ImplicitCastExpr 0x55948b02d498 <line:132:6> 'bool' <MemberPointerToBoolean>
|     | `-ImplicitCastExpr 0x55948b02d480 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const' <UserDefinedConversion>
|     |   `-CXXMemberCallExpr 0x55948b02d460 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const'
|     |     `-MemberExpr 0x55948b02d430 <col:6> '<bound member function type>' .operator int (Timestamp::*)() const 0x55948af8a978
|     |       `-MemberExpr 0x55948b02d400 <col:6> 'const Timestamp' lvalue ->_expiry_s 0x55948b02bbd8
|     |         `-CXXThisExpr 0x55948b02d3f0 <col:6> 'const Timer *' implicit this
|     |-ReturnStmt 0x55948b02d878 <line:133:6, col:72>
|     | `-ExprWithCleanups 0x55948b02d860 <col:13, col:72> 'Timestamp'
|     |   `-CXXConstructExpr 0x55948b02d830 <col:13, col:72> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |     `-MaterializeTemporaryExpr 0x55948b02d818 <col:13, col:72> 'Timestamp' xvalue
|     |       `-CXXOperatorCallExpr 0x55948b02d7e0 <col:13, col:72> 'Timestamp'
|     |         |-ImplicitCastExpr 0x55948b02d7c8 <col:45> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         | `-DeclRefExpr 0x55948b02d7a8 <col:45> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55948afb9150 'operator-' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |-CXXConstructExpr 0x55948b02d748 <col:13, col:43> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |         | `-MaterializeTemporaryExpr 0x55948b02d730 <col:13, col:43> 'Timestamp' xvalue
|     |         |   `-CXXOperatorCallExpr 0x55948b02d658 <col:13, col:43> 'Timestamp'
|     |         |     |-ImplicitCastExpr 0x55948b02d640 <col:23> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         |     | `-DeclRefExpr 0x55948b02d620 <col:23> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55948afb8e10 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |     |-CXXConstructExpr 0x55948b02d5c0 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|     |         |     | `-MemberExpr 0x55948b02d4c0 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x55948b02bbd8
|     |         |     |   `-CXXThisExpr 0x55948b02d4b0 <col:13> 'const Timer *' implicit this
|     |         |     `-MaterializeTemporaryExpr 0x55948b02d608 <col:25, col:43> 'const Timestamp' lvalue
|     |         |       `-ImplicitCastExpr 0x55948b02d5f0 <col:25, col:43> 'const Timestamp' <NoOp>
|     |         |         `-CallExpr 0x55948b02d5a0 <col:25, col:43> 'Timestamp'
|     |         |           `-ImplicitCastExpr 0x55948b02d588 <col:25, col:36> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |         |             `-DeclRefExpr 0x55948b02d528 <col:25, col:36> 'Timestamp ()' lvalue CXXMethod 0x55948afac470 'recent' 'Timestamp ()'
|     |         `-MaterializeTemporaryExpr 0x55948b02d790 <col:47, col:72> 'const Timestamp' lvalue
|     |           `-ImplicitCastExpr 0x55948b02d778 <col:47, col:72> 'const Timestamp' <NoOp>
|     |             `-CallExpr 0x55948b02d710 <col:47, col:72> 'Timestamp'
|     |               `-ImplicitCastExpr 0x55948b02d6f8 <col:47, col:58> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |                 `-DeclRefExpr 0x55948b02d6c8 <col:47, col:58> 'Timestamp ()' lvalue CXXMethod 0x55948ae079c0 'recent_steady' 'Timestamp ()'
|     `-ReturnStmt 0x55948b02d8f8 <line:135:6, col:13>
|       `-CXXConstructExpr 0x55948b02d8c8 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|         `-MemberExpr 0x55948b02d898 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x55948b02bbd8
|           `-CXXThisExpr 0x55948b02d888 <col:13> 'const Timer *' implicit this
|-CXXMethodDecl 0x55948b017c48 <line:139:5, line:141:5> line:139:20 router 'Router *() const' inline
| `-CompoundStmt 0x55948b02da18 <col:35, line:141:5>
|   `-ReturnStmt 0x55948b02da08 <line:140:2, col:24>
|     `-CXXMemberCallExpr 0x55948b02d9d0 <col:9, col:24> 'Router *'
|       `-MemberExpr 0x55948b02d9a0 <col:9, col:17> '<bound member function type>' ->router 0x55948b00b000
|         `-ImplicitCastExpr 0x55948b02d9f0 <col:9> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x55948b02d988 <col:9> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x55948b02d958 <col:9> 'Element *const' lvalue ->_owner 0x55948b02bef8
|               `-CXXThisExpr 0x55948b02d948 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x55948b017d08 <line:144:5, line:146:5> line:144:21 element 'Element *() const' inline
| `-CompoundStmt 0x55948b02da98 <col:37, line:146:5>
|   `-ReturnStmt 0x55948b02da88 <line:145:2, col:9>
|     `-ImplicitCastExpr 0x55948b02da70 <col:9> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x55948b02da40 <col:9> 'Element *const' lvalue ->_owner 0x55948b02bef8
|         `-CXXThisExpr 0x55948b02da30 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x55948b017dc8 <line:149:5, line:151:5> line:149:26 thread 'RouterThread *() const' inline
| `-CompoundStmt 0x55948b02db18 <col:41, line:151:5>
|   `-ReturnStmt 0x55948b02db08 <line:150:2, col:9>
|     `-ImplicitCastExpr 0x55948b02daf0 <col:9> 'RouterThread *' <LValueToRValue>
|       `-MemberExpr 0x55948b02dac0 <col:9> 'RouterThread *const' lvalue ->_thread 0x55948b02bf58
|         `-CXXThisExpr 0x55948b02dab0 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x55948b017e90 <line:154:5, col:26> col:9 home_thread_id 'int () const'
|-CXXMethodDecl 0x55948b018088 <line:171:5, col:55> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x55948b017f40 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x55948b017fb8 <col:37, col:50> col:42 quiet 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55948b02c838 <col:50> 'bool' false
|-CXXMethodDecl 0x55948b018208 <line:181:5, col:35> col:10 initialize 'void (Router *)'
| `-ParmVarDecl 0x55948b018148 <col:21, col:29> col:29 router 'Router *'
|-CXXMethodDecl 0x55948b02a3c0 <line:191:5, col:57> col:10 used schedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x55948b0182c0 <col:29, col:46> col:46 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x55948b02a508 <line:197:5, col:59> col:10 reschedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x55948b02a478 <col:31, col:48> col:48 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x55948b02a650 <line:210:5, col:50> col:17 used schedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55948b02a5c0 <col:29, col:46> col:46 when 'const Timestamp &'
|-CXXMethodDecl 0x55948b02a798 <line:216:5, col:52> col:17 reschedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55948b02a708 <col:31, col:48> col:48 when 'const Timestamp &'
|-CXXMethodDecl 0x55948b02a860 <line:221:5, line:223:5> line:221:17 schedule_now 'void ()' inline
| `-CompoundStmt 0x55948b02dc80 <col:32, line:223:5>
|   `-ExprWithCleanups 0x55948b02dc68 <line:222:2, col:47> 'void'
|     `-CXXMemberCallExpr 0x55948b02dc10 <col:2, col:47> 'void'
|       |-MemberExpr 0x55948b02db40 <col:2> '<bound member function type>' ->schedule_at_steady 0x55948b02a3c0
|       | `-CXXThisExpr 0x55948b02db30 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x55948b02dc50 <col:21, col:46> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x55948b02dc38 <col:21, col:46> 'const Timestamp' <NoOp>
|           `-CallExpr 0x55948b02dbf0 <col:21, col:46> 'Timestamp'
|             `-ImplicitCastExpr 0x55948b02dbd8 <col:21, col:32> 'Timestamp (*)()' <FunctionToPointerDecay>
|               `-DeclRefExpr 0x55948b02dba8 <col:21, col:32> 'Timestamp ()' lvalue CXXMethod 0x55948ae079c0 'recent_steady' 'Timestamp ()'
|-CXXMethodDecl 0x55948b02a9a0 <line:233:5, col:47> col:10 used schedule_after 'void (const Timestamp &)'
| `-ParmVarDecl 0x55948b02a910 <col:25, col:42> col:42 delta 'const Timestamp &'
|-CXXMethodDecl 0x55948b02aae8 <line:239:5, line:241:5> line:239:17 used schedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x55948b02aa58 <col:36, col:45> col:45 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55948b02de08 <col:56, line:241:5>
|   `-ExprWithCleanups 0x55948b02ddf0 <line:240:2, col:40> 'void'
|     `-CXXMemberCallExpr 0x55948b02dd98 <col:2, col:40> 'void'
|       |-MemberExpr 0x55948b02dca8 <col:2> '<bound member function type>' ->schedule_after 0x55948b02a9a0
|       | `-CXXThisExpr 0x55948b02dc98 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x55948b02ddd8 <col:17, col:39> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x55948b02ddc0 <col:17, col:39> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x55948b02dd58 <col:17, col:39> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-ImplicitCastExpr 0x55948b02dd28 <col:27> 'uint32_t':'unsigned int' <LValueToRValue>
|             | `-DeclRefExpr 0x55948b02dce8 <col:27> 'uint32_t':'unsigned int' lvalue ParmVar 0x55948b02aa58 'delta_sec' 'uint32_t':'unsigned int'
|             `-ImplicitCastExpr 0x55948b02dd40 <col:38> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x55948b02dd08 <col:38> 'int' 0
|-CXXMethodDecl 0x55948b02ac30 <line:247:5, line:249:5> line:247:17 used schedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x55948b02aba0 <col:37, col:46> col:46 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55948b02e078 <col:58, line:249:5>
|   `-ExprWithCleanups 0x55948b02e060 <line:248:2, col:49> 'void'
|     `-CXXMemberCallExpr 0x55948b02e008 <col:2, col:49> 'void'
|       |-MemberExpr 0x55948b02de30 <col:2> '<bound member function type>' ->schedule_after 0x55948b02a9a0
|       | `-CXXThisExpr 0x55948b02de20 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x55948b02e048 <col:17, col:48> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x55948b02e030 <col:17, col:48> 'const Timestamp' <NoOp>
|           `-CallExpr 0x55948b02dfb0 <col:17, col:48> 'Timestamp'
|             |-ImplicitCastExpr 0x55948b02df98 <col:17, col:28> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x55948b02df08 <col:17, col:28> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x55948af8c768 'make_msec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x55948b02dff0 <col:38> 'Timestamp::value_type':'long' <IntegralCast>
|               `-ImplicitCastExpr 0x55948b02dfd8 <col:38> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55948b02dee8 <col:38> 'uint32_t':'unsigned int' lvalue ParmVar 0x55948b02aba0 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55948b02ad78 <line:259:5, line:261:5> line:259:17 reschedule_after 'void (const Timestamp &)' inline
| |-ParmVarDecl 0x55948b02ace8 <col:34, col:51> col:51 used delta 'const Timestamp &'
| `-CompoundStmt 0x55948b02e258 <col:58, line:261:5>
|   `-ExprWithCleanups 0x55948b02e240 <line:260:2, col:38> 'void'
|     `-CXXMemberCallExpr 0x55948b02e1e8 <col:2, col:38> 'void'
|       |-MemberExpr 0x55948b02e0a0 <col:2> '<bound member function type>' ->schedule_at_steady 0x55948b02a3c0
|       | `-CXXThisExpr 0x55948b02e090 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x55948b02e228 <col:21, col:33> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x55948b02e210 <col:21, col:33> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x55948b02e1b0 <col:21, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x55948b02e198 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x55948b02e178 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55948afb8e10 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x55948b02e148 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x55948b02e130 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x55948b02e0e0 <col:21> 'Timestamp' lvalue ->_expiry_s 0x55948b02bbd8
|             |     `-CXXThisExpr 0x55948b02e0d0 <col:21> 'Timer *' implicit this
|             `-DeclRefExpr 0x55948b02e110 <col:33> 'const Timestamp' lvalue ParmVar 0x55948b02ace8 'delta' 'const Timestamp &'
|-CXXMethodDecl 0x55948b02aec0 <line:268:5, line:270:5> line:268:17 used reschedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x55948b02ae30 <col:38, col:47> col:47 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55948b02e530 <col:58, line:270:5>
|   `-ExprWithCleanups 0x55948b02e518 <line:269:2, col:79> 'void'
|     `-CXXMemberCallExpr 0x55948b02e4c0 <col:2, col:79> 'void'
|       |-MemberExpr 0x55948b02e280 <col:2> '<bound member function type>' ->schedule_at_steady 0x55948b02a3c0
|       | `-CXXThisExpr 0x55948b02e270 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x55948b02e500 <col:21, col:78> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x55948b02e4e8 <col:21, col:78> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x55948b02e480 <col:21, col:78> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-BinaryOperator 0x55948b02e3b8 <col:31, col:49> 'unsigned int' '+'
|             | |-ImplicitCastExpr 0x55948b02e3a0 <col:31, col:45> 'unsigned int' <IntegralCast>
|             | | `-CXXMemberCallExpr 0x55948b02e330 <col:31, col:45> 'Timestamp::seconds_type':'int'
|             | |   `-MemberExpr 0x55948b02e300 <col:31, col:41> '<bound member function type>' .sec 0x55948ae094b8
|             | |     `-ImplicitCastExpr 0x55948b02e350 <col:31> 'const Timestamp' lvalue <NoOp>
|             | |       `-MemberExpr 0x55948b02e2d0 <col:31> 'Timestamp' lvalue ->_expiry_s 0x55948b02bbd8
|             | |         `-CXXThisExpr 0x55948b02e2c0 <col:31> 'Timer *' implicit this
|             | `-ImplicitCastExpr 0x55948b02e388 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|             |   `-DeclRefExpr 0x55948b02e368 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x55948b02ae30 'delta_sec' 'uint32_t':'unsigned int'
|             `-CXXMemberCallExpr 0x55948b02e448 <col:60, col:77> 'uint32_t':'unsigned int'
|               `-MemberExpr 0x55948b02e418 <col:60, col:70> '<bound member function type>' .subsec 0x55948ae09bb0
|                 `-ImplicitCastExpr 0x55948b02e468 <col:60> 'const Timestamp' lvalue <NoOp>
|                   `-MemberExpr 0x55948b02e3e8 <col:60> 'Timestamp' lvalue ->_expiry_s 0x55948b02bbd8
|                     `-CXXThisExpr 0x55948b02e3d8 <col:60> 'Timer *' implicit this
|-CXXMethodDecl 0x55948b02b008 <line:277:5, line:279:5> line:277:17 used reschedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x55948b02af78 <col:39, col:48> col:48 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55948b02e868 <col:60, line:279:5>
|   `-ExprWithCleanups 0x55948b02e850 <line:278:2, col:65> 'void'
|     `-CXXMemberCallExpr 0x55948b02e7f8 <col:2, col:65> 'void'
|       |-MemberExpr 0x55948b02e558 <col:2> '<bound member function type>' ->schedule_at_steady 0x55948b02a3c0
|       | `-CXXThisExpr 0x55948b02e548 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x55948b02e838 <col:21, col:64> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x55948b02e820 <col:21, col:64> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x55948b02e7c0 <col:21, col:64> 'Timestamp'
|             |-ImplicitCastExpr 0x55948b02e7a8 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x55948b02e788 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55948afb8e10 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x55948b02e728 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x55948b02e710 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x55948b02e598 <col:21> 'Timestamp' lvalue ->_expiry_s 0x55948b02bbd8
|             |     `-CXXThisExpr 0x55948b02e588 <col:21> 'Timer *' implicit this
|             `-MaterializeTemporaryExpr 0x55948b02e770 <col:33, col:64> 'const Timestamp' lvalue
|               `-ImplicitCastExpr 0x55948b02e758 <col:33, col:64> 'const Timestamp' <NoOp>
|                 `-CallExpr 0x55948b02e6b8 <col:33, col:64> 'Timestamp'
|                   |-ImplicitCastExpr 0x55948b02e6a0 <col:33, col:44> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|                   | `-DeclRefExpr 0x55948b02e670 <col:33, col:44> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x55948af8c768 'make_msec' 'Timestamp (Timestamp::value_type)'
|                   `-ImplicitCastExpr 0x55948b02e6f8 <col:54> 'Timestamp::value_type':'long' <IntegralCast>
|                     `-ImplicitCastExpr 0x55948b02e6e0 <col:54> 'uint32_t':'unsigned int' <LValueToRValue>
|                       `-DeclRefExpr 0x55948b02e650 <col:54> 'uint32_t':'unsigned int' lvalue ParmVar 0x55948b02af78 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55948b02b0d0 <line:285:5, col:21> col:10 used unschedule 'void ()'
|-CXXMethodDecl 0x55948b02b190 <line:288:5, line:291:5> line:288:17 clear 'void ()' inline
| `-CompoundStmt 0x55948b02ed30 <col:25, line:291:5>
|   |-CXXMemberCallExpr 0x55948b02e8c0 <line:289:2, col:13> 'void'
|   | `-MemberExpr 0x55948b02e890 <col:2> '<bound member function type>' ->unschedule 0x55948b02b0d0
|   |   `-CXXThisExpr 0x55948b02e880 <col:2> 'Timer *' implicit this
|   `-ExprWithCleanups 0x55948b02ed18 <line:290:2, col:24> 'Timestamp' lvalue
|     `-CXXOperatorCallExpr 0x55948b02ece0 <col:2, col:24> 'Timestamp' lvalue
|       |-ImplicitCastExpr 0x55948b02ecc8 <col:12> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55948b02e978 <col:12> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x55948aca0a58 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|       |-MemberExpr 0x55948b02e8f0 <col:2> 'Timestamp' lvalue ->_expiry_s 0x55948b02bbd8
|       | `-CXXThisExpr 0x55948b02e8e0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x55948b02e960 <col:14, col:24> 'Timestamp' xvalue
|         `-CXXTemporaryObjectExpr 0x55948b02e930 <col:14, col:24> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x55948b02b250 <line:304:5, line:310:5> line:304:29 adjustment 'Timestamp ()' static inline
| `-CompoundStmt 0x55948b02f088 <col:42, line:310:5>
|   |-IfStmt 0x55948b02eed0 <line:306:2, line:307:23>
|   | |-CallExpr 0x55948b02ee00 <line:306:6, col:30> 'bool'
|   | | `-ImplicitCastExpr 0x55948b02ede8 <col:6, col:17> 'bool (*)()' <FunctionToPointerDecay>
|   | |   `-DeclRefExpr 0x55948b02ed88 <col:6, col:17> 'bool ()' lvalue CXXMethod 0x55948afaa8e0 'warp_jumping' 'bool ()'
|   | `-ReturnStmt 0x55948b02eec0 <line:307:6, col:23>
|   |   `-ExprWithCleanups 0x55948b02eea8 <col:13, col:23> 'Timestamp'
|   |     `-CXXConstructExpr 0x55948b02ee78 <col:13, col:23> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55948b02ee60 <col:13, col:23> 'Timestamp' xvalue
|   |         `-CXXTemporaryObjectExpr 0x55948b02ee30 <col:13, col:23> 'Timestamp' 'void ()'
|   `-ReturnStmt 0x55948b02f078 <line:309:2, col:33>
|     `-ExprWithCleanups 0x55948b02f060 <col:9, col:33> 'Timestamp'
|       `-CXXConstructExpr 0x55948b02f030 <col:9, col:33> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55948b02f018 <col:9, col:33> 'Timestamp' xvalue
|           `-CallExpr 0x55948b02efd8 <col:9, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x55948b02efc0 <col:9, col:20> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x55948b02ef90 <col:9, col:20> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x55948af8ca80 'make_usec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x55948b02f000 <col:30> 'Timestamp::value_type':'long' <IntegralCast>
|               `-IntegerLiteral 0x55948b02ef70 <col:30> 'int' 500
|-CXXMethodDecl 0x55948b02b390 <line:317:5, col:80> col:17 schedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x55948b02b300 <col:34, col:43> col:43 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55948b02b438 <col:69> "" ""
|-CXXMethodDecl 0x55948b02b548 <line:323:5, col:81> col:17 schedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x55948b02b4b8 <col:35, col:44> col:44 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55948b02b5f0 <col:70> "" ""
|-CXXMethodDecl 0x55948b02b700 <line:329:5, col:82> col:17 reschedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x55948b02b670 <col:36, col:45> col:45 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55948b02b7a8 <col:71> "" ""
|-CXXMethodDecl 0x55948b02b8b8 <line:335:5, col:83> col:17 reschedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x55948b02b828 <col:37, col:46> col:46 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55948b02b960 <col:72> "" ""
|-EnumDecl 0x55948b02b9d0 <line:337:5, col:27> col:5
| `-EnumConstantDecl 0x55948b02bad0 <col:12, col:25> col:12 behind_sec 'Timer::(anonymous enum at ../dummy_inc/click/timer.hh:337:5)'
|   `-ImplicitCastExpr 0x55948b02bb20 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55948b02bab0 <col:25> 'int' Int: 1
|       `-IntegerLiteral 0x55948b02ba90 <col:25> 'int' 1
|-AccessSpecDecl 0x55948b02bb38 <line:339:3, col:10> col:3 private
|-FieldDecl 0x55948b02bb78 <line:341:5, col:9> col:9 referenced _schedpos1 'int'
|-FieldDecl 0x55948b02bbd8 <line:342:5, col:15> col:15 referenced _expiry_s 'Timestamp'
|-CXXRecordDecl 0x55948b02bc28 <line:343:5, line:345:5> line:343:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x55948b02bd58 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
| `-CXXDestructorDecl 0x55948b02c848 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-FieldDecl 0x55948b02be18 <col:5, line:345:7> col:7 referenced _hook 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)'
|-FieldDecl 0x55948b02be98 <line:346:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x55948b02bef8 <line:347:5, col:14> col:14 referenced _owner 'Element *'
|-FieldDecl 0x55948b02bf58 <line:348:5, col:19> col:19 referenced _thread 'RouterThread *'
|-CXXMethodDecl 0x55948b02c0a8 <line:350:5, col:36> col:12 operator= 'Timer &(const Timer &)'
| `-ParmVarDecl 0x55948b02bfb8 <col:22, col:35> col:35 x 'const Timer &'
|-CXXMethodDecl 0x55948b02c278 <line:352:5, col:58> col:17 used do_nothing_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x55948b02c160 <col:33, col:40> col:40 t 'Timer *'
| `-ParmVarDecl 0x55948b02c1e0 <col:43, col:49> col:49 user_data 'void *'
|-CXXMethodDecl 0x55948b02c450 <line:353:5, col:55> col:17 used element_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x55948b02c338 <col:30, col:37> col:37 t 'Timer *'
| `-ParmVarDecl 0x55948b02c3b8 <col:40, col:46> col:46 user_data 'void *'
|-CXXMethodDecl 0x55948b02c628 <line:354:5, col:52> col:17 used task_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x55948b02c510 <col:27, col:34> col:34 t 'Timer *'
| `-ParmVarDecl 0x55948b02c590 <col:37, col:43> col:43 user_data 'void *'
`-FriendDecl 0x55948b02c7f8 <line:356:5, col:18> col:12 'class TimerSet':'TimerSet'

Layout: <CGRecordLayout
  LLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  NonVirtualBaseLLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55948b037dd0 <../elements/ethernet/arpfaker.hh:34:1, line:59:1> line:34:7 class ARPFaker definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55948b037f28 <col:1, col:7> col:7 implicit referenced class ARPFaker
|-AccessSpecDecl 0x55948b037fb8 <line:36:1, col:7> col:1 public
|-CXXConstructorDecl 0x55948b038040 <line:38:3, col:12> col:3 ARPFaker 'void ()'
|-CXXDestructorDecl 0x55948b038130 <line:39:3, col:13> col:3 ~ARPFaker 'void ()' noexcept-unevaluated 0x55948b038130
| `-Overrides: [ 0x55948aff8f58 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55948b038260 <line:41:3, col:55> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x55948affa3b8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55948b038fb0 <col:34, col:55>
|   `-ReturnStmt 0x55948b038fa0 <col:36, col:43>
|     `-ImplicitCastExpr 0x55948b038f88 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55948b038f68 <col:43> 'const char [9]' lvalue "ARPFaker"
|-CXXMethodDecl 0x55948b038328 <line:42:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x55948affa480 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55948b039010 <col:34, col:54>
|   `-ReturnStmt 0x55948b039000 <col:36, col:43>
|     `-ImplicitCastExpr 0x55948b038fe8 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55948b038fc8 <col:43> 'const char []' lvalue Var 0x55948affa620 'PORTS_0_1' 'const char []'
|-CXXMethodDecl 0x55948b0383f0 <line:43:3, col:49> col:15 processing 'const char *() const'
| |-Overrides: [ 0x55948affa848 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x55948b039070 <col:34, col:49>
|   `-ReturnStmt 0x55948b039060 <col:36, col:43>
|     `-ImplicitCastExpr 0x55948b039048 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55948b039028 <col:43> 'const char []' lvalue Var 0x55948affa990 'PUSH' 'const char []'
|-CXXMethodDecl 0x55948b0386c0 <line:45:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55948affbc50 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55948b038570 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x55948b0385e8 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x55948b038818 <line:46:3, col:32> col:7 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x55948affbea0 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x55948b038780 <col:18, col:31> col:32 'ErrorHandler *'
|-CXXMethodDecl 0x55948b038960 <line:48:3, col:25> col:8 run_timer 'void (Timer *)'
| |-Overrides: [ 0x55948aff98d8 Element::run_timer 'void (Timer *)' ]
| `-ParmVarDecl 0x55948b0388d0 <col:18, col:24> col:25 'Timer *'
|-AccessSpecDecl 0x55948b038a08 <line:50:1, col:8> col:1 private
|-FieldDecl 0x55948b038a40 <line:52:3, col:13> col:13 _ip1 'IPAddress'
|-FieldDecl 0x55948b038aa0 <line:53:3, col:16> col:16 _eth1 'EtherAddress'
|-FieldDecl 0x55948b038b00 <line:54:3, col:13> col:13 _ip2 'IPAddress'
|-FieldDecl 0x55948b038b60 <line:55:3, col:16> col:16 _eth2 'EtherAddress'
|-FieldDecl 0x55948b038bc0 <line:57:3, col:9> col:9 _timer 'Timer'
|-CXXConstructorDecl 0x55948b038c38 <line:34:7> col:7 implicit ARPFaker 'void (const ARPFaker &)' inline default_delete noexcept-unevaluated 0x55948b038c38
| `-ParmVarDecl 0x55948b038d48 <col:7> col:7 'const ARPFaker &'
`-CXXMethodDecl 0x55948b038de8 <col:7> col:7 implicit operator= 'ARPFaker &(const ARPFaker &)' inline default_delete noexcept-unevaluated 0x55948b038de8
  `-ParmVarDecl 0x55948b038ef8 <col:7> col:7 'const ARPFaker &'

Layout: <CGRecordLayout
  LLVMType:%class.ARPFaker = type { %class.Element.base, %class.IPAddress, %class.EtherAddress, %class.IPAddress, %class.EtherAddress, %class.Timer }
  NonVirtualBaseLLVMType:%class.ARPFaker = type { %class.Element.base, %class.IPAddress, %class.EtherAddress, %class.IPAddress, %class.EtherAddress, %class.Timer }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55948adccb20 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55948adccc38 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55948adcccd8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55948adccd38 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55948adccd98 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55948adcce48 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55948adcd150 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55948adcd268 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55948adcd310 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55948adcd378 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55948adcd408 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55948add34a0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55948add38d8 <col:12>
|-CXXConstructorDecl 0x55948add35a8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55948add36b8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55948adcd310 'data' 'const char *'
| | `-ImplicitCastExpr 0x55948add5e60 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55948add5e30 <col:12> 'const char *const' lvalue .data 0x55948adcd310
| |     `-DeclRefExpr 0x55948add5e10 <col:12> 'const String::rep_t' lvalue ParmVar 0x55948add36b8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55948adcd378 'length' 'int'
| | `-ImplicitCastExpr 0x55948add5ef0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55948add5ec0 <col:12> 'const int' lvalue .length 0x55948adcd378
| |     `-DeclRefExpr 0x55948add5ea0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55948add36b8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55948adcd408 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55948add5f80 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55948add5f50 <col:12> 'String::memo_t *const' lvalue .memo 0x55948adcd408
| |     `-DeclRefExpr 0x55948add5f30 <col:12> 'const String::rep_t' lvalue ParmVar 0x55948add36b8 '' 'const String::rep_t &'
| `-CompoundStmt 0x55948add5fd8 <col:12>
|-CXXConstructorDecl 0x55948add3758 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55948add3758
| `-ParmVarDecl 0x55948add3868 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55948add8dc0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55948ade47d8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55948ade48e8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55948ade4e00 <col:12>
|   |-BinaryOperator 0x55948ade4c18 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55948ade4bd0 <col:12> 'const char *' lvalue ->data 0x55948adcd310
|   | | `-CXXThisExpr 0x55948ade4bc0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55948ade4c00 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55948ade4b90 <col:12> 'const char *const' lvalue .data 0x55948adcd310
|   |     `-DeclRefExpr 0x55948ade4b70 <col:12> 'const String::rep_t' lvalue ParmVar 0x55948ade48e8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55948ade4ce0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55948ade4c98 <col:12> 'int' lvalue ->length 0x55948adcd378
|   | | `-CXXThisExpr 0x55948ade4c88 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55948ade4cc8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55948ade4c58 <col:12> 'const int' lvalue .length 0x55948adcd378
|   |     `-DeclRefExpr 0x55948ade4c38 <col:12> 'const String::rep_t' lvalue ParmVar 0x55948ade48e8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55948ade4da8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55948ade4d60 <col:12> 'String::memo_t *' lvalue ->memo 0x55948adcd408
|   | | `-CXXThisExpr 0x55948ade4d50 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55948ade4d90 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55948ade4d20 <col:12> 'String::memo_t *const' lvalue .memo 0x55948adcd408
|   |     `-DeclRefExpr 0x55948ade4d00 <col:12> 'const String::rep_t' lvalue ParmVar 0x55948ade48e8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55948ade4df0 <col:12>
|     `-UnaryOperator 0x55948ade4dd8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55948ade4dc8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55948ade4958 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55948ade4958
  `-ParmVarDecl 0x55948ade4a68 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55948adc4090 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55948adc41a8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55948adc4238 <col:16, col:22> col:16 public
|-TypedefDecl 0x55948adc4278 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55948aa96fd0 'const char *'
|   `-QualType 0x55948aa96521 'const char' const
|     `-BuiltinType 0x55948aa96520 'char'
|-TypedefDecl 0x55948adc4300 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55948adc42d0 'String::const_iterator' sugar
|   |-Typedef 0x55948adc4278 'const_iterator'
|   `-PointerType 0x55948aa96fd0 'const char *'
|     `-QualType 0x55948aa96521 'const char' const
|       `-BuiltinType 0x55948aa96520 'char'
|-TypedefDecl 0x55948adc4470 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55948adc43e0 'int (String::*)() const'
|   |-RecordType 0x55948adc4120 'String'
|   | `-CXXRecord 0x55948adc4090 'String'
|   `-ParenType 0x55948adc4380 'int () const' sugar
|     `-FunctionProtoType 0x55948ad97f10 'int () const' const cdecl
|       `-BuiltinType 0x55948aa96580 'int'
|-TypedefDecl 0x55948adc44d8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55948abec8d0 'int64_t' sugar
|   |-Typedef 0x55948aaff390 'int64_t'
|   `-TypedefType 0x55948aad8630 '__int64_t' sugar
|     |-Typedef 0x55948aad8208 '__int64_t'
|     `-BuiltinType 0x55948aa965a0 'long'
|-TypedefDecl 0x55948adc4540 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55948abec7f0 'uint64_t' sugar
|   |-Typedef 0x55948aaff530 'uint64_t'
|   `-TypedefType 0x55948aad86c0 '__uint64_t' sugar
|     |-Typedef 0x55948aad8278 '__uint64_t'
|     `-BuiltinType 0x55948aa96640 'unsigned long'
|-TypedefDecl 0x55948adc45d0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55948adc45a0 'String::intmax_t' sugar
|   |-Typedef 0x55948adc44d8 'intmax_t'
|   `-TypedefType 0x55948abec8d0 'int64_t' sugar
|     |-Typedef 0x55948aaff390 'int64_t'
|     `-TypedefType 0x55948aad8630 '__int64_t' sugar
|       |-Typedef 0x55948aad8208 '__int64_t'
|       `-BuiltinType 0x55948aa965a0 'long'
|-TypedefDecl 0x55948adc4660 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55948adc4630 'String::uintmax_t' sugar
|   |-Typedef 0x55948adc4540 'uintmax_t'
|   `-TypedefType 0x55948abec7f0 'uint64_t' sugar
|     |-Typedef 0x55948aaff530 'uint64_t'
|     `-TypedefType 0x55948aad86c0 '__uint64_t' sugar
|       |-Typedef 0x55948aad8278 '__uint64_t'
|       `-BuiltinType 0x55948aa96640 'unsigned long'
|-CXXConstructorDecl 0x55948adc4720 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55948adc48c8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55948adc4808 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55948adc4a78 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55948adc49b8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55948adc4bd0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55948adc4b40 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55948adc4de8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55948adc4c98 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55948adc4d18 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55948adc5008 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55948adc4eb8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55948adc4f38 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55948adc5228 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55948adc50d8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55948adc5158 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55948adc5448 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55948adc52f8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55948adc5378 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55948adc55d8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55948adc5510 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55948adc5758 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55948adc5698 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55948adc58e8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55948adc5820 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55948adc5a40 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55948adc59b0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55948adc5b98 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55948adc5b08 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55948adc5cf0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55948adc5c60 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55948adc5e78 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55948adc5db8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55948adc6008 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55948adc5f40 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55948adc6198 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55948adc60d0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55948adc6328 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55948adc6260 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55948adc6420 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55948adc6548 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55948adc66c8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55948adc6600 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55948adc6818 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55948adc6788 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55948adc68d0 <col:63> "" ""
|-CXXMethodDecl 0x55948adc6a18 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55948adc6958 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55948adc6c28 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55948adc6ad8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55948adc6b58 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55948adc6e48 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55948adc6cf0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55948adc6d70 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55948adc7128 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55948adc6f08 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55948adc6f88 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55948add2f70 <col:55> 'int' 10
| `-ParmVarDecl 0x55948adc7000 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55948add2f90 <col:76> 'bool' true
|-CXXMethodDecl 0x55948adc7408 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55948adc71f0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55948adc7270 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55948add2fa0 <col:56> 'int' 10
| `-ParmVarDecl 0x55948adc72e8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55948add2fc0 <col:77> 'bool' true
|-CXXMethodDecl 0x55948adc7510 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55948adc75d8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55948adc76a0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55948adc7740 <col:20>
| `-OptimizeNoneAttr 0x55948adc7798 <col:30>
|-CXXConversionDecl 0x55948adc7888 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55948adc7958 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55948adc7a18 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55948adc7b08 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55948adc7bc8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55948adc7d48 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55948adc7c80 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55948adc7e98 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55948adc7e08 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55948adc7f88 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55948adc8048 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55948adc8298 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55948adc8100 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55948adc8180 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55948adc84f8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55948adc8360 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55948adc83e0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55948adc85c8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55948adc87d8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55948adc8680 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55948adc8700 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55948adc89f8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55948adc88a0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55948adc8920 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55948adc8b88 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55948adc8ac0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55948adc8c78 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55948adc8de8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55948adc8d28 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55948adc8ff8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55948adc8ea8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55948adc8f28 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55948adc9210 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55948adc90b8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55948adc9130 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55948adc93a0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55948adc92d0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55948adc95c0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55948adc9460 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55948adc94e0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55948adc9710 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55948adc9680 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55948adc98e8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55948adc97d0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55948adc9850 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55948adc9a38 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55948adc99a8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55948adc9c50 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55948adc9af0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55948adc9b70 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55948add2fd0 <col:39> 'int' 0
|-CXXMethodDecl 0x55948adc9e70 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55948adc9d10 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55948adc9d90 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55948add2ff0 <col:48> 'int' 0
|-CXXMethodDecl 0x55948adca050 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55948adc9f30 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55948adc9fb0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55948add3010 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55948adca120 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55948adca1e0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55948adca2a0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55948adca360 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55948adca420 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55948adca5c8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55948adca4d0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55948adca748 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55948adca680 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55948adca920 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55948adca808 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55948adcaa98 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55948adca9d8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55948adcabe0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55948adcab50 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55948adcad30 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55948adcaca0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55948adcaf08 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55948adcadf0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55948adcae70 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55948adcb0e8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55948adcafd0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55948adcb050 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55948adcb238 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55948adcb1a8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55948adcb448 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55948adcb2f8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55948adcb378 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55948adcb5a8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55948adcb510 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55948adcb700 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55948adcb668 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55948adcb7a8 <col:57> "" ""
|-CXXMethodDecl 0x55948adcb8b8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55948adcb828 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55948adcba08 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55948adcb978 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55948adcbb88 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55948adcbac0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55948adcbc50 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55948adcbd10 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55948adcbdd0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55948adcbe70 <col:49> "" ""
|-CXXMethodDecl 0x55948adcbf00 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55948adcbfc0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55948adcc0b0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55948adcc178 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55948adcc238 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55948adcc2f8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55948adcc3f0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55948adcc4b8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55948adcc580 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55948adcc758 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55948adcc638 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55948adcc6b8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55948adcc980 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55948adcc820 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55948adcc8a0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55948adcca90 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55948adccaf8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55948adccb20 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55948adccc38 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55948adcccd8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55948adccd38 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55948adccd98 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55948adcce48 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55948adcceb0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55948adcd0e8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55948adcd138 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55948adcd0c8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55948adccfd8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55948adccf80 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55948adccfc0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55948adccfa0 <col:32> 'int' 8
|-CXXRecordDecl 0x55948adcd150 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55948adcd268 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55948adcd310 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55948adcd378 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55948adcd408 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55948add34a0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55948add38d8 <col:12>
| |-CXXConstructorDecl 0x55948add35a8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55948add36b8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55948adcd310 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55948add5e60 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55948add5e30 <col:12> 'const char *const' lvalue .data 0x55948adcd310
| | |     `-DeclRefExpr 0x55948add5e10 <col:12> 'const String::rep_t' lvalue ParmVar 0x55948add36b8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55948adcd378 'length' 'int'
| | | `-ImplicitCastExpr 0x55948add5ef0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55948add5ec0 <col:12> 'const int' lvalue .length 0x55948adcd378
| | |     `-DeclRefExpr 0x55948add5ea0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55948add36b8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55948adcd408 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55948add5f80 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55948add5f50 <col:12> 'String::memo_t *const' lvalue .memo 0x55948adcd408
| | |     `-DeclRefExpr 0x55948add5f30 <col:12> 'const String::rep_t' lvalue ParmVar 0x55948add36b8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55948add5fd8 <col:12>
| |-CXXConstructorDecl 0x55948add3758 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55948add3758
| | `-ParmVarDecl 0x55948add3868 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55948add8dc0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55948ade47d8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55948ade48e8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55948ade4e00 <col:12>
| |   |-BinaryOperator 0x55948ade4c18 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55948ade4bd0 <col:12> 'const char *' lvalue ->data 0x55948adcd310
| |   | | `-CXXThisExpr 0x55948ade4bc0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55948ade4c00 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55948ade4b90 <col:12> 'const char *const' lvalue .data 0x55948adcd310
| |   |     `-DeclRefExpr 0x55948ade4b70 <col:12> 'const String::rep_t' lvalue ParmVar 0x55948ade48e8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55948ade4ce0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55948ade4c98 <col:12> 'int' lvalue ->length 0x55948adcd378
| |   | | `-CXXThisExpr 0x55948ade4c88 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55948ade4cc8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55948ade4c58 <col:12> 'const int' lvalue .length 0x55948adcd378
| |   |     `-DeclRefExpr 0x55948ade4c38 <col:12> 'const String::rep_t' lvalue ParmVar 0x55948ade48e8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55948ade4da8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55948ade4d60 <col:12> 'String::memo_t *' lvalue ->memo 0x55948adcd408
| |   | | `-CXXThisExpr 0x55948ade4d50 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55948ade4d90 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55948ade4d20 <col:12> 'String::memo_t *const' lvalue .memo 0x55948adcd408
| |   |     `-DeclRefExpr 0x55948ade4d00 <col:12> 'const String::rep_t' lvalue ParmVar 0x55948ade48e8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55948ade4df0 <col:12>
| |     `-UnaryOperator 0x55948ade4dd8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55948ade4dc8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55948ade4958 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55948ade4958
|   `-ParmVarDecl 0x55948ade4a68 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55948adcd480 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55948adcd6c8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55948adcd4e8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55948adcd568 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55948adcd5e0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55948add3460 <col:79, line:261:5>
|   |-BinaryOperator 0x55948add30d8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55948add3070 <col:2, col:5> 'const char *' lvalue .data 0x55948adcd310
|   | | `-MemberExpr 0x55948add3040 <col:2> 'String::rep_t' lvalue ->_r 0x55948adcd480
|   | |   `-CXXThisExpr 0x55948add3030 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55948add30c0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55948add30a0 <col:12> 'const char *' lvalue ParmVar 0x55948adcd4e8 'data' 'const char *'
|   |-BinaryOperator 0x55948add31a0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55948add3138 <col:2, col:5> 'int' lvalue .length 0x55948adcd378
|   | | `-MemberExpr 0x55948add3108 <col:2> 'String::rep_t' lvalue ->_r 0x55948adcd480
|   | |   `-CXXThisExpr 0x55948add30f8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55948add3188 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55948add3168 <col:14> 'int' lvalue ParmVar 0x55948adcd568 'length' 'int'
|   `-IfStmt 0x55948add3448 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55948add32c0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55948add32a8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55948add3288 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55948add3268 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55948add3200 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55948adcd408
|     |       | `-MemberExpr 0x55948add31d0 <col:7> 'String::rep_t' lvalue ->_r 0x55948adcd480
|     |       |   `-CXXThisExpr 0x55948add31c0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55948add3250 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55948add3230 <col:17> 'String::memo_t *' lvalue ParmVar 0x55948adcd5e0 'memo' 'String::memo_t *'
|     `-CallExpr 0x55948add3420 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55948add3408 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55948add3310 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55948adbc0f8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55948add3378 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55948adcccd8
|         `-ImplicitCastExpr 0x55948add3360 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55948add3340 <col:27> 'String::memo_t *' lvalue ParmVar 0x55948adcd5e0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55948adcd978 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55948adcd798 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55948adcd818 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55948adcd890 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55948adcd480 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55948add38e8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55948add3a78 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55948add39e0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55948add3950 <col:2> '<bound member function type>' ->assign_memo 0x55948adcd6c8
|     | `-ImplicitCastExpr 0x55948add3a18 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55948add3940 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55948add3a30 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55948add3980 <col:14> 'const char *' lvalue ParmVar 0x55948adcd798 'data' 'const char *'
|     |-ImplicitCastExpr 0x55948add3a48 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55948add39a0 <col:20> 'int' lvalue ParmVar 0x55948adcd818 'length' 'int'
|     `-ImplicitCastExpr 0x55948add3a60 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55948add39c0 <col:28> 'String::memo_t *' lvalue ParmVar 0x55948adcd890 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55948adcdb08 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55948adcda48 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55948add3cd0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55948add3c50 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55948add3aa0 <col:2> '<bound member function type>' ->assign_memo 0x55948adcd6c8
|     | `-CXXThisExpr 0x55948add3a90 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55948add3c88 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55948add3b20 <col:14, col:19> 'const char *' lvalue .data 0x55948adcd310
|     |   `-MemberExpr 0x55948add3af0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55948adcd480
|     |     `-DeclRefExpr 0x55948add3ad0 <col:14> 'const String' lvalue ParmVar 0x55948adcda48 'x' 'const String &'
|     |-ImplicitCastExpr 0x55948add3ca0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55948add3ba0 <col:25, col:30> 'int' lvalue .length 0x55948adcd378
|     |   `-MemberExpr 0x55948add3b70 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55948adcd480
|     |     `-DeclRefExpr 0x55948add3b50 <col:25> 'const String' lvalue ParmVar 0x55948adcda48 'x' 'const String &'
|     `-ImplicitCastExpr 0x55948add3cb8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55948add3c20 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55948adcd408
|         `-MemberExpr 0x55948add3bf0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55948adcd480
|           `-DeclRefExpr 0x55948add3bd0 <col:38> 'const String' lvalue ParmVar 0x55948adcda48 'x' 'const String &'
|-CXXMethodDecl 0x55948adcdbd0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55948add4690 <col:31, line:278:5>
|   `-IfStmt 0x55948add4678 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55948add3d70 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55948add3d58 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55948add3d28 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55948adcd408
|     |     `-MemberExpr 0x55948add3cf8 <col:6> 'String::rep_t' lvalue ->_r 0x55948adcd480
|     |       `-CXXThisExpr 0x55948add3ce8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55948add4650 <col:15, line:277:2>
|       |-ParenExpr 0x55948add4220 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55948add41f0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55948add3e80 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55948add3e68 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55948add3e50 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55948add3e10 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55948adcccd8
|       |   |       `-ImplicitCastExpr 0x55948add3df8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55948add3dc8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55948adcd408
|       |   |           `-MemberExpr 0x55948add3d98 <col:27> 'String::rep_t' lvalue ->_r 0x55948adcd480
|       |   |             `-CXXThisExpr 0x55948add3d88 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55948add3ee0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55948add3ec0 <col:54> 'int' 0
|       |   `-CallExpr 0x55948add4150 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55948add4138 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55948add40b8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55948ab330e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55948add4190 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55948add3fc8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55948add41a8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55948add3ff8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55948add41c0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55948add4030 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55948add41d8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55948add40a0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55948add4088 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55948add4050 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55948add4570 <line:274:6, line:275:22>
|       | |-CallExpr 0x55948add4430 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55948add4418 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55948add4390 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55948adbd540 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55948add4360 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55948adcccd8
|       | |   `-ImplicitCastExpr 0x55948add4348 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55948add4318 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55948adcd408
|       | |       `-MemberExpr 0x55948add42e8 <col:40> 'String::rep_t' lvalue ->_r 0x55948adcd480
|       | |         `-CXXThisExpr 0x55948add42d8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55948add4530 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55948add4518 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55948add4458 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55948add23b0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55948add4558 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55948add44b8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55948adcd408
|       |       `-MemberExpr 0x55948add4488 <col:15> 'String::rep_t' lvalue ->_r 0x55948adcd480
|       |         `-CXXThisExpr 0x55948add4478 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55948add4630 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55948add45c8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55948adcd408
|         | `-MemberExpr 0x55948add4598 <col:6> 'String::rep_t' lvalue ->_r 0x55948adcd480
|         |   `-CXXThisExpr 0x55948add4588 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55948add4618 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55948add45f8 <col:16> 'int' 0
|-CXXMethodDecl 0x55948adcde68 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55948adcdc88 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55948adcdd08 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55948adcdd80 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55948adcdf40 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55948adce190 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55948adcdff8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55948adce078 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55948adce0f0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55948adce378 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55948adce260 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55948adce2e0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55948adce478 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55948add4768 <col:41, line:286:5>
|   `-ReturnStmt 0x55948add4758 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55948add4728 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55948add46f0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55948add46d8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55948add46b8 <col:46> 'int' 1
|-CXXMethodDecl 0x55948adce718 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55948adce530 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55948adce5b0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55948adce630 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55948add23b0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55948adce7e0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55948add2480 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55948add2650 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55948add2538 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55948add25b8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55948add2710 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55948add27d8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55948add28d8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55948add2950 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55948add29c8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55948add2a30 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55948add2b30 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55948add2b80 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55948add2b10 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55948add2af0 <col:22> 'int' 14
|-CXXMethodDecl 0x55948add2d98 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55948add2bb0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55948add2c30 <col:38> col:41 'int'
| `-ParmVarDecl 0x55948add2cb0 <col:43> col:46 'int'
|-FriendDecl 0x55948add2ea0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55948add2f30 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55948b07d320 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55948b07d4f8 prev 0x55948b07d320 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55948b07d588 <col:46, col:52> col:46 public
|-TypedefDecl 0x55948b07d5b0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55948aa96580 'int'
|-TypedefDecl 0x55948b07ef10 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55948b07eec0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55948b07eea0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55948b07d7c8 'type'
|     `-SubstTemplateTypeParmType 0x55948b07d790 'String' sugar
|       |-TemplateTypeParmType 0x55948ad87930 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55948ad878e0 'T'
|       `-RecordType 0x55948adc4120 'String'
|         `-CXXRecord 0x55948adc4090 'String'
|-TypedefDecl 0x55948b07efc8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55948b07ef90 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55948b07ef70 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55948b07ef10 'type'
|     `-ElaboratedType 0x55948b07eec0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55948b07eea0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55948b07d7c8 'type'
|         `-SubstTemplateTypeParmType 0x55948b07d790 'String' sugar
|           |-TemplateTypeParmType 0x55948ad87930 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55948ad878e0 'T'
|           `-RecordType 0x55948adc4120 'String'
|             `-CXXRecord 0x55948adc4090 'String'
|-CXXMethodDecl 0x55948b07f148 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55948b07f058 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55948b07f238 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55948b07f318 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55948b07f318
|-CXXMethodDecl 0x55948b07f5e8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55948b07f4f0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55948b07f828 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55948b07f6a0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55948b07f718 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55948b07f9f8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55948b07f8e8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55948b07f960 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55948b07fb58 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55948b07fc28 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55948b07fe78 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55948b07fce8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55948b07fd60 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55948b0800d8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55948b07ff48 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55948b07ffc0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55948b080298 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55948b0801a8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55948b080458 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55948b080360 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55948b080510 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55948b0805c0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55948b0807f8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55948b080670 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55948b0806e8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55948b080a98 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55948b0809a0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55948b080b60 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55948b080bb0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55948b080c00 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55948affb8c0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55948b07bfc8 prev 0x55948affb8c0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55948b07d290 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55948b07d240 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55948b07d220 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55948b07d0d0 'type'
|     `-SubstTemplateTypeParmType 0x55948b07cf60 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55948ad5d6e0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55948ad5d688 'F'
|       `-RecordType 0x55948b07cbc0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55948b07cae0 'typed_array_memory'
|-FieldDecl 0x55948b080c50 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55948b080ca0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55948b080cd8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55948b07c060 'String' sugar
|   |-TemplateTypeParmType 0x55948ad94c50 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55948ad94bf8 'T'
|   `-RecordType 0x55948adc4120 'String'
|     `-CXXRecord 0x55948adc4090 'String'
|-TypedefDecl 0x55948b080d68 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55948b080d30 'String &'
|   `-SubstTemplateTypeParmType 0x55948b07c060 'String' sugar
|     |-TemplateTypeParmType 0x55948ad94c50 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55948ad94bf8 'T'
|     `-RecordType 0x55948adc4120 'String'
|       `-CXXRecord 0x55948adc4090 'String'
|-TypedefDecl 0x55948b080df8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55948b080dc0 'const String &'
|   `-QualType 0x55948b07c061 'const String' const
|     `-SubstTemplateTypeParmType 0x55948b07c060 'String' sugar
|       |-TemplateTypeParmType 0x55948ad94c50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55948ad94bf8 'T'
|       `-RecordType 0x55948adc4120 'String'
|         `-CXXRecord 0x55948adc4090 'String'
|-TypedefDecl 0x55948b080e88 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55948b080e50 'String *'
|   `-SubstTemplateTypeParmType 0x55948b07c060 'String' sugar
|     |-TemplateTypeParmType 0x55948ad94c50 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55948ad94bf8 'T'
|     `-RecordType 0x55948adc4120 'String'
|       `-CXXRecord 0x55948adc4090 'String'
|-TypedefDecl 0x55948b080f28 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55948b080ef0 'const String *'
|   `-QualType 0x55948b07c061 'const String' const
|     `-SubstTemplateTypeParmType 0x55948b07c060 'String' sugar
|       |-TemplateTypeParmType 0x55948ad94c50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55948ad94bf8 'T'
|       `-RecordType 0x55948adc4120 'String'
|         `-CXXRecord 0x55948adc4090 'String'
|-TypedefDecl 0x55948b081b80 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55948b081b30 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55948b081b10 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55948b081a48 'type'
|     `-LValueReferenceType 0x55948b081a10 'const String &'
|       `-QualType 0x55948b0817b1 'const String' const
|         `-SubstTemplateTypeParmType 0x55948b0817b0 'String' sugar
|           |-TemplateTypeParmType 0x55948ad67630 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55948ad675d8 'T'
|           `-RecordType 0x55948adc4120 'String'
|             `-CXXRecord 0x55948adc4090 'String'
|-TypedefDecl 0x55948b081be8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55948b080dc0 'const String &'
|   `-QualType 0x55948b07c061 'const String' const
|     `-SubstTemplateTypeParmType 0x55948b07c060 'String' sugar
|       |-TemplateTypeParmType 0x55948ad94c50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55948ad94bf8 'T'
|       `-RecordType 0x55948adc4120 'String'
|         `-CXXRecord 0x55948adc4090 'String'
|-TypedefDecl 0x55948b081c40 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55948aa96580 'int'
|-TypedefDecl 0x55948b081ca8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55948b080e50 'String *'
|   `-SubstTemplateTypeParmType 0x55948b07c060 'String' sugar
|     |-TemplateTypeParmType 0x55948ad94c50 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55948ad94bf8 'T'
|     `-RecordType 0x55948adc4120 'String'
|       `-CXXRecord 0x55948adc4090 'String'
|-TypedefDecl 0x55948b081d10 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55948b080ef0 'const String *'
|   `-QualType 0x55948b07c061 'const String' const
|     `-SubstTemplateTypeParmType 0x55948b07c060 'String' sugar
|       |-TemplateTypeParmType 0x55948ad94c50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55948ad94bf8 'T'
|       `-RecordType 0x55948adc4120 'String'
|         `-CXXRecord 0x55948adc4090 'String'
|-EnumDecl 0x55948b081d68 <line:134:5> col:5
| `-EnumConstantDecl 0x55948b081e60 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55948b081e40 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55948ad962d8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55948ad962b0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55948ad96290 <col:40> 'int' 1
|-CXXConstructorDecl 0x55948b081ee8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55948b082178 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55948b081fa0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55948b082040 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55948b082408 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55948b0822f0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55948b0826c8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55948b0825b0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55948b0829e0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55948b0828c0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55948b082cf0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55948b082bd0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55948b082fe0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55948b082e28 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55948b082ea0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55948b083108 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55948b0831b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55948b083210 <col:30> Inherited
|-CXXMethodDecl 0x55948b083258 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55948b083308 <col:20> Inherited
| `-OptimizeNoneAttr 0x55948b083360 <col:30> Inherited
|-CXXMethodDecl 0x55948b083428 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55948b0834d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55948b083530 <col:30> Inherited
|-CXXMethodDecl 0x55948b083578 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55948b083628 <col:20> Inherited
| `-OptimizeNoneAttr 0x55948b083680 <col:30> Inherited
|-CXXMethodDecl 0x55948b0836c8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55948b083778 <col:20> Inherited
| `-OptimizeNoneAttr 0x55948b0837d0 <col:30> Inherited
|-CXXMethodDecl 0x55948b083818 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55948b0838c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55948b083920 <col:30> Inherited
|-CXXMethodDecl 0x55948b083948 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55948b0839f8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55948b083aa8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55948b083c68 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55948b083b58 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55948b083bd0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55948b083db8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55948b083d28 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55948b083f68 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55948b083e70 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55948b084020 <col:20>
| `-OptimizeNoneAttr 0x55948b084078 <col:30>
|-CXXMethodDecl 0x55948b084198 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55948b0840a0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55948b084250 <col:20>
| `-OptimizeNoneAttr 0x55948b0842a8 <col:30>
|-CXXMethodDecl 0x55948b084360 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55948b0842d0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55948b0844a8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55948b084418 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55948b0845d8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55948b0846d8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55948b0847a8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55948b084878 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55948b0849b8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55948b084928 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55948b084b00 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55948b084a70 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55948b084c48 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55948b084bb8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55948b084d00 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55948b084e00 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55948b084d70 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55948b084eb8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55948b084f78 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55948b085078 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55948b0851f8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55948b085138 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55948b085988 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55948b0852b0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55948b0858e8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55948b0857e8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55948b085a68 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55948b085bb8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55948b085b28 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55948b085c70 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55948b085eb8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55948b085d30 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55948b085da8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55948b086048 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55948b085f88 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55948b086258 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55948b086110 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55948b086188 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55948b086318 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55948b086578 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55948b086480 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55948b086648 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55948b086648

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55948b0fdac8 prev 0x55948b094c78 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55948b0fdbc0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55948b0fdc50 <col:22, col:28> col:22 public
|-EnumDecl 0x55948b0fdc78 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55948b0fdd98 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55948b0fdd78 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55948b0fdd60 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55948b0fdd40 <col:14> 'int' 999
| |-EnumConstantDecl 0x55948b0fde40 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55948b0fde20 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55948b0fde08 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55948b0fdde8 <col:14> 'int' 1
| |-EnumConstantDecl 0x55948b0fded0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55948b0fdeb0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55948b0fde90 <col:17> 'int' 0
| |-EnumConstantDecl 0x55948b0fdf60 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55948b0fdf40 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55948b0fdf20 <col:13> 'int' 1
| |-EnumConstantDecl 0x55948b0fdff0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55948b0fdfd0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55948b0fdfb0 <col:16> 'int' 2
| |-EnumConstantDecl 0x55948b0fe080 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55948b0fe060 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55948b0fe040 <col:13> 'int' 3
| |-EnumConstantDecl 0x55948b0fe110 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55948b0fe0f0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55948b0fe0d0 <col:15> 'int' 4
| |-EnumConstantDecl 0x55948b0fe1a0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55948b0fe180 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55948b0fe160 <col:14> 'int' 5
| |-EnumConstantDecl 0x55948b0fe230 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55948b0fe210 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55948b0fe1f0 <col:12> 'int' 6
| `-EnumConstantDecl 0x55948b0fe2c0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55948b0fe2a0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55948b0fe280 <col:13> 'int' 7
|-VarDecl 0x55948b0fe330 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55948b0fe3b8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55948b0fe440 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55948b0fe4c8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55948b0fe550 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55948b0fe5d8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55948b0fe660 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55948b0fe6e8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55948b0fe770 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55948b0fe7f8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55948b0fe880 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55948b0fe980 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55948b103c68 '_nerrors' 'int'
| | `-IntegerLiteral 0x55948b1043f8 <line:128:13> 'int' 0
| `-CompoundStmt 0x55948b104468 <col:16, line:129:5>
|-CXXDestructorDecl 0x55948b0fea70 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55948b104478 <col:29, line:132:5>
|-CXXMethodDecl 0x55948b0fec28 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55948b0feb60 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55948b0fecf0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55948b0fedd8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55948b1044d0 <col:44, line:161:5>
|   `-ReturnStmt 0x55948b1044c0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55948b1044a8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55948b104488 <col:9> 'ErrorHandler *' lvalue Var 0x55948b103cc8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55948b0fef18 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55948b0fee88 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55948b0fefe0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55948b104530 <col:43, line:173:5>
|   `-ReturnStmt 0x55948b104520 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55948b104508 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55948b1044e8 <col:9> 'ErrorHandler *' lvalue Var 0x55948b103d40 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55948b0ff098 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55948b0ff118 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55948b0ff228 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55948b0ff198 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55948b0ff378 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55948b0ff2e8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55948b0ff4d0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55948b0ff438 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55948b0ff628 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x55948b0ff590 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55948b0ff780 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55948b0ff6e8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55948b0ff990 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55948b0ff838 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55948b0ff8b8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55948b0ffb68 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55948b0ffa50 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55948b0ffad0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55948b0ffd88 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55948b0ffc28 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55948b0ffca8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55948b0fff68 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55948b0ffe48 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55948b0ffec8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55948b100148 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55948b100028 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55948b1000a8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55948b1002d0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55948b100208 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55948b1004a0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55948b100388 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55948b100400 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55948b104788 <col:57, line:234:5>
|   `-ReturnStmt 0x55948b104778 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55948b104760 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55948b104708 <col:9, col:41> 'int'
|         |-MemberExpr 0x55948b1046d8 <col:9> '<bound member function type>' ->xmessage 0x55948b1002d0
|         | `-CXXThisExpr 0x55948b1046c8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55948b104748 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55948b104730 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55948b1046a8 <col:18, col:40> 'String' (CXXTemporary 0x55948b1046a8)
|               `-CallExpr 0x55948b104670 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55948b104658 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55948b1045d0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55948b102498 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55948b1045f0 <col:31> 'const String' lvalue ParmVar 0x55948b100400 'str' 'const String &'
|                 `-DeclRefExpr 0x55948b104610 <col:36> 'const String' lvalue ParmVar 0x55948b100388 'anno' 'const String &'
|-CXXMethodDecl 0x55948b100780 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55948b100560 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55948b1005e0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55948b100658 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55948b10ea40 <col:68, line:243:5>
|   `-ReturnStmt 0x55948b10ea30 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55948b10ea18 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55948b10e9b8 <col:9, col:41> 'int'
|         |-MemberExpr 0x55948b10e988 <col:9> '<bound member function type>' ->xmessage 0x55948b1004a0
|         | `-CXXThisExpr 0x55948b10e978 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55948b104828 <col:18> 'const String' lvalue ParmVar 0x55948b100560 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55948b10ea00 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55948b10e9e8 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55948b10e958 <col:24, col:40> 'String' (CXXTemporary 0x55948b10e958)
|               `-CXXMemberCallExpr 0x55948b1048c8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55948b104858 <col:24> '<bound member function type>' ->vformat 0x55948b101960
|                 | `-CXXThisExpr 0x55948b104848 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55948b10e920 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55948b104888 <col:32> 'const char *' lvalue ParmVar 0x55948b1005e0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55948b10e938 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55948b1048a8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55948b100658 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55948b100a20 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55948b100848 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55948b1008c0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55948b100938 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55948b10ed78 <col:23, line:254:5>
|   `-ReturnStmt 0x55948b10ed68 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55948b10ed50 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55948b10ecf0 <col:9, col:71> 'int'
|         |-MemberExpr 0x55948b10ecc0 <col:9> '<bound member function type>' ->xmessage 0x55948b1004a0
|         | `-CXXThisExpr 0x55948b10ecb0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55948b10ed38 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55948b10ed20 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55948b10ec70 <col:18, col:65> 'String' (CXXTemporary 0x55948b10ec70)
|         |     `-CallExpr 0x55948b10ec08 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55948b10ebf0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55948b10eae0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55948b102498 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55948b10eb00 <col:31> 'const String' lvalue ParmVar 0x55948b1008c0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55948b10ec50 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55948b10ec38 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55948b10ebd0 <col:37, col:64> 'String' (CXXTemporary 0x55948b10ebd0)
|         |             `-CallExpr 0x55948b10eba0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55948b10eb88 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55948b10eb20 <col:37> 'String (const String &)' lvalue CXXMethod 0x55948b102ae8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55948b10eb40 <col:56> 'const String' lvalue ParmVar 0x55948b100848 'landmark' 'const String &'
|         `-DeclRefExpr 0x55948b10ec90 <col:68> 'const String' lvalue ParmVar 0x55948b100938 'str' 'const String &'
|-CXXMethodDecl 0x55948b100da0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55948b100ae8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55948b100b60 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55948b100be0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55948b100c58 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55948b10f030 <col:34, line:267:5>
|   `-ReturnStmt 0x55948b10f020 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55948b10f008 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55948b10efa0 <col:9, col:51> 'int'
|         |-MemberExpr 0x55948b10ef70 <col:9> '<bound member function type>' ->xmessage 0x55948b100a20
|         | `-CXXThisExpr 0x55948b10ef60 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55948b10ee18 <col:18> 'const String' lvalue ParmVar 0x55948b100ae8 'landmark' 'const String &'
|         |-DeclRefExpr 0x55948b10ee38 <col:28> 'const String' lvalue ParmVar 0x55948b100b60 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55948b10eff0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55948b10efd8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55948b10ef40 <col:34, col:50> 'String' (CXXTemporary 0x55948b10ef40)
|               `-CXXMemberCallExpr 0x55948b10eed8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55948b10ee68 <col:34> '<bound member function type>' ->vformat 0x55948b101960
|                 | `-CXXThisExpr 0x55948b10ee58 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55948b10ef08 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55948b10ee98 <col:42> 'const char *' lvalue ParmVar 0x55948b100be0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55948b10ef20 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55948b10eeb8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55948b100c58 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55948b100eb0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55948b10f0b0 <col:25, line:288:5>
|   `-ReturnStmt 0x55948b10f0a0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55948b10f088 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55948b10f058 <col:9> 'const int' lvalue ->_nerrors 0x55948b103c68
|         `-CXXThisExpr 0x55948b10f048 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55948b1010c0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55948b100f68 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55948b100fe8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55948b1013a8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55948b101188 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55948b101208 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55948b101280 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55948b101540 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55948b101478 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55948b101788 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55948b101600 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55948b101678 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55948b10f310 <col:58, line:357:5>
|   `-ReturnStmt 0x55948b10f300 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55948b10f2e8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55948b10f2b8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55948b10f2a0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55948b10f280 <col:9, col:29> 'String' (CXXTemporary 0x55948b10f280)
|             `-CallExpr 0x55948b10f210 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55948b10f1f8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55948b10f178 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55948b1013a8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55948b10f118 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55948b10f248 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55948b10f138 <col:21> 'const char *' lvalue ParmVar 0x55948b101600 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55948b10f260 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55948b10f158 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55948b101678 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55948b101960 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55948b101850 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55948b1018c8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55948b101ab8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55948b101a28 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55948b101c00 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55948b101b70 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55948b101ea0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55948b101cb8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55948b101d38 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55948b101db0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55948b102000 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55948b101f70 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55948b10f428 <col:37, line:441:5>
|   `-IfStmt 0x55948b10f410 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55948b10f398 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55948b10f368 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55948b10f328 <col:6> 'int' lvalue ParmVar 0x55948b101f70 'level' 'int'
|     | `-ImplicitCastExpr 0x55948b10f380 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55948b10f348 <col:15> 'ErrorHandler::Level' EnumConstant 0x55948b0fe080 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55948b10f3f8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55948b10f3c8 <col:8> 'int' lvalue ->_nerrors 0x55948b103c68
|         `-CXXThisExpr 0x55948b10f3b8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55948b1020c8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55948b10f4c0 <col:26, line:448:5>
|   `-BinaryOperator 0x55948b10f4a0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55948b10f450 <col:2> 'int' lvalue ->_nerrors 0x55948b103c68
|     | `-CXXThisExpr 0x55948b10f440 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55948b10f480 <col:13> 'int' 0
|-CXXMethodDecl 0x55948b102290 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55948b102180 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55948b1021f8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55948b102498 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55948b102350 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55948b1023c8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55948b102748 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55948b102558 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55948b1025d8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55948b102658 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55948b102800 <col:59> 0 0
|-CXXMethodDecl 0x55948b102998 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55948b102878 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55948b1028f8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55948b10fb30 <col:70, line:534:5>
|   |-DeclStmt 0x55948b10f630 <line:528:2, col:20>
|   | |-VarDecl 0x55948b10f4e8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55948b10f550 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55948b10f588 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55948b10f5f0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55948b10f700 <line:529:2, col:23>
|   | `-VarDecl 0x55948b10f660 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55948b10f6e8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55948b10f6c8 <col:18> 'const char *' lvalue ParmVar 0x55948b102878 'begin' 'const char *'
|   |-DoStmt 0x55948b10fac8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55948b10f9f8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55948b10f9e0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55948b10f9c0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55948b10f718 <col:6> 'const char *' lvalue Var 0x55948b10f660 'x' 'const char *'
|   | |     `-CallExpr 0x55948b10f910 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55948b10f8f8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55948b10f8b0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55948b104140 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55948b10f978 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55948b10f960 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55948b10f7d0 <col:20, col:27> 'String' (CXXTemporary 0x55948b10f7d0)
|   | |       |     `-CXXTemporaryObjectExpr 0x55948b10f798 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55948b10f990 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55948b10f7f0 <col:30> 'const char *' lvalue Var 0x55948b10f660 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55948b10f9a8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55948b10f810 <col:33> 'const char *' lvalue ParmVar 0x55948b1028f8 'end' 'const char *'
|   | |       |-UnaryOperator 0x55948b10f850 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55948b10f830 <col:39> 'String' lvalue Var 0x55948b10f4e8 'name' 'String'
|   | |       |-UnaryOperator 0x55948b10f888 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55948b10f868 <col:46> 'String' lvalue Var 0x55948b10f588 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55948b10f8a0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55948b10fab0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55948b10fa98 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55948b10fa78 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55948b10fa48 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55948adc7888
|   |         `-ImplicitCastExpr 0x55948b10fa30 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55948b10fa10 <col:11> 'String' lvalue Var 0x55948b10f4e8 'name' 'String'
|   `-ReturnStmt 0x55948b10fb20 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55948b10fb08 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55948b10fae8 <col:9> 'const char *' lvalue Var 0x55948b10f660 'x' 'const char *'
|-CXXMethodDecl 0x55948b102ae8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55948b102a58 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55948b110138 <col:55, line:550:5>
|   `-IfStmt 0x55948b110110 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55948b10fd70 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55948b10fd58 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55948b10fd40 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55948b10fd20 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55948b10fcf0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55948adc7888
|     | |       `-DeclRefExpr 0x55948b10fb90 <col:6> 'const String' lvalue ParmVar 0x55948b102a58 'x' 'const String &'
|     | `-BinaryOperator 0x55948b10fcd0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55948b10fca0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55948b10fc50 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55948b10fc38 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55948b10fbf0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55948ade10c0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55948b10fbb0 <col:11> 'const String' lvalue ParmVar 0x55948b102a58 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55948b10fbd0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55948b10fcb8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55948b10fc88 <col:19> 'char' 123
|     |-ReturnStmt 0x55948b10fde0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55948b10fdb0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55948b10fd90 <col:13> 'const String' lvalue ParmVar 0x55948b102a58 'x' 'const String &'
|     `-IfStmt 0x55948b1100e8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55948b10fe78 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55948b10fe60 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55948b10fe40 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55948b10fe10 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55948adc7888
|       |       `-DeclRefExpr 0x55948b10fdf0 <col:11> 'const String' lvalue ParmVar 0x55948b102a58 'x' 'const String &'
|       |-ReturnStmt 0x55948b110000 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55948b10ffe8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55948b10ffb8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55948b10ffa0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55948b10ff80 <col:13, col:29> 'String' (CXXTemporary 0x55948b10ff80)
|       |         `-CallExpr 0x55948b10ff30 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55948b10ff18 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55948b10fe90 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55948b102290 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55948b10ff60 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55948b10feb0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55948b10fed0 <col:28> 'const String' lvalue ParmVar 0x55948b102a58 'x' 'const String &'
|       `-ReturnStmt 0x55948b1100d8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55948b1100c0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55948b110090 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55948b110078 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55948b110058 <col:13, col:20> 'String' (CXXTemporary 0x55948b110058)
|                 `-CXXTemporaryObjectExpr 0x55948b110020 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55948b102cb0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55948b102ba0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55948b102c18 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55948b1043e8 <col:71> 'bool' false
|-CXXRecordDecl 0x55948b102d60 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55948b103058 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55948b102ff0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55948b102f90 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55948b102f50 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55948adc4120 'String'
|       | `-CXXRecord 0x55948adc4090 'String'
|       |-BuiltinType 0x55948aa96580 'int'
|       `-DecayedType 0x55948b095cc0 '__va_list_tag *' sugar
|         |-TypedefType 0x55948b095c90 'va_list' sugar
|         | |-Typedef 0x55948acb51d0 'va_list'
|         | `-TypedefType 0x55948acb5180 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55948abecb88 '__gnuc_va_list'
|         |   `-TypedefType 0x55948abecaf0 '__builtin_va_list' sugar
|         |     |-Typedef 0x55948aad7d38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55948aad7ce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55948aa972d0 '__va_list_tag'
|         |         `-CXXRecord 0x55948aa97238 '__va_list_tag'
|         `-PointerType 0x55948acbaa70 '__va_list_tag *'
|           `-RecordType 0x55948aa972d0 '__va_list_tag'
|             `-CXXRecord 0x55948aa97238 '__va_list_tag'
|-EnumDecl 0x55948b1030b0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55948b1031b0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55948b103710 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948b103190 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55948b103170 <col:16> 'int' 1
| |-EnumConstantDecl 0x55948b103240 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55948b103728 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948b103220 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55948b103200 <col:21> 'int' 2
| |-EnumConstantDecl 0x55948b1032d0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55948b103740 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948b1032b0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55948b103290 <col:22> 'int' 4
| |-EnumConstantDecl 0x55948b103360 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55948b103758 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948b103340 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55948b103320 <col:17> 'int' 8
| |-EnumConstantDecl 0x55948b1033f0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55948b103770 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948b1033d0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55948b1033b0 <col:22> 'int' 16
| |-EnumConstantDecl 0x55948b103480 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55948b103788 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948b103460 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55948b103440 <col:19> 'int' 32
| |-EnumConstantDecl 0x55948b103510 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55948b1037a0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948b1034f0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55948b1034d0 <col:17> 'int' 64
| |-EnumConstantDecl 0x55948b1035a0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55948b1037b8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948b103580 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55948b103560 <col:14> 'int' 128
| |-EnumConstantDecl 0x55948b103630 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55948b1037d0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948b103610 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55948b1035f0 <col:16> 'int' 256
| `-EnumConstantDecl 0x55948b1036c0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55948b1037e8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55948b1036a0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55948b103680 <col:12> 'int' 1024
|-CXXMethodDecl 0x55948b1039f8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55948b103810 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55948b1038b0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55948b103b80 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55948b103ab8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55948b103c28 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55948b103c68 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55948b103cc8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55948b103d40 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55948b104140 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55948b103db8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55948b103e38 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55948b103eb8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55948b103f30 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55948b103fa8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55948b104020 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55948b104268 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55948b104268
| `-ParmVarDecl 0x55948b104378 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55948b110498 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55948b110498
  `-ParmVarDecl 0x55948b1105a8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55948b094d08 prev 0x55948b035788 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55948b094e00 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55948b094e90 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55948b094fc8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55948b094ec8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55948b0963f0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55948b0963d0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55948b095f68 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55948b096480 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55948b096440 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55948b094ec8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55948b095fd0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55948b096500 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55948b0964c0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55948b096030 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55948b096540 <col:54> 'bool' false
| `-CompoundStmt 0x55948b096648 <col:61, line:38:5>
|   `-BinaryOperator 0x55948b096628 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55948b0965c0 <col:9> 'const Element *' lvalue ->_context 0x55948b095f08
|     | `-CXXThisExpr 0x55948b0965b0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55948b096610 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55948b0965f0 <col:20> 'int' 0
|-CXXConstructorDecl 0x55948b0951d8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55948b095088 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55948b095100 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55948b096428 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55948b096408 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55948b095f08 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55948b0966a0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55948b096660 <col:20> 'const Element *' lvalue ParmVar 0x55948b095088 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55948b095f68 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55948b096720 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55948b0966e0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55948b095100 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55948b095fd0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55948b0967a0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55948b096760 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55948b096030 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55948b0967e0 <col:73> 'bool' false
| `-CompoundStmt 0x55948b096858 <col:80, line:46:5>
|-CXXMethodDecl 0x55948b095308 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55948b0968d0 <col:36, line:51:5>
|   `-ReturnStmt 0x55948b0968c0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55948b0968a8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55948b096878 <col:16> 'const Element *const' lvalue ->_context 0x55948b095f08
|         `-CXXThisExpr 0x55948b096868 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55948b0953f8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55948b096950 <col:32, line:57:5>
|   `-ReturnStmt 0x55948b096940 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55948b096928 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55948b0968f8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55948b095f68
|         `-CXXThisExpr 0x55948b0968e8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55948b0954b8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55948b095640 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55948b095570 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55948b095790 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55948b095700 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55948b0958e0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55948b095850 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55948b095ae8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55948b095998 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55948b095a10 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55948b095e18 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55948b095ba8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55948b095c28 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55948b095cf0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55948b095ed0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55948b095f08 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55948b095f68 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55948b095fd0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55948b096030 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55948b096080 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55948b096080
| `-ParmVarDecl 0x55948b096198 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55948b096238 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55948b096238
| `-ParmVarDecl 0x55948b096348 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55948b119738 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55948b0bcf10 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55948b0bd0e8 prev 0x55948b0bcf10 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55948b0bd178 <col:46, col:52> col:46 public
|-TypedefDecl 0x55948b0bd1a0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55948aa96580 'int'
|-TypedefDecl 0x55948b0bed70 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55948b0bed20 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55948b0bd650 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55948b0bd550 'type'
|     `-TemplateSpecializationType 0x55948b0bd4e0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55948b0bd3c0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55948b0bd3a0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55948b0bd380 <col:24> 'unsigned long' 4
|       `-RecordType 0x55948b0bd4c0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55948b0bd3e0 'char_array'
|-TypedefDecl 0x55948b0bee28 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55948b0bedf0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55948b0bedd0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55948b0bed70 'type'
|     `-ElaboratedType 0x55948b0bed20 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55948b0bd650 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55948b0bd550 'type'
|         `-TemplateSpecializationType 0x55948b0bd4e0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55948b0bd3c0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55948b0bd3a0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55948b0bd380 <col:24> 'unsigned long' 4
|           `-RecordType 0x55948b0bd4c0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55948b0bd3e0 'char_array'
|-CXXMethodDecl 0x55948b0befa8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55948b0beeb8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55948b0bf098 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55948b0bf178 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55948b0bf448 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55948b0bf350 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55948b0bf688 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55948b0bf500 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55948b0bf578 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55948b0bf858 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55948b0bf748 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55948b0bf7c0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55948b0bf9b8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55948b0bfa88 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55948b0bfcd8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55948b0bfb48 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55948b0bfbc0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55948b0bff38 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55948b0bfda8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55948b0bfe20 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55948b0c00f8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55948b0c0008 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55948b0c02b8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55948b0c01c0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55948b0c0370 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55948b0c0420 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55948b0c0658 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55948b0c04d0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55948b0c0548 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55948b0c08f8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55948b0c0800 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55948b0c09c0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55948b0c0a10 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55948b0c0a60 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55948b0bbb28 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55948b0bbd38 prev 0x55948b0bbb28 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55948b0bce80 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55948b0bce30 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55948b0bce10 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55948b0bccc0 'type'
|     `-SubstTemplateTypeParmType 0x55948b0bcae0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55948ad5cf60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55948ad5cf08 'T'
|       `-RecordType 0x55948b0bc630 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55948b0bc548 'sized_array_memory'
|-FieldDecl 0x55948b0c0ab0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55948b0c0b00 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55948b0c0b38 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55948b0bbdd0 'int' sugar
|   |-TemplateTypeParmType 0x55948ad94c50 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55948ad94bf8 'T'
|   `-BuiltinType 0x55948aa96580 'int'
|-TypedefDecl 0x55948b0c0bc8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55948b0c0b90 'int &'
|   `-SubstTemplateTypeParmType 0x55948b0bbdd0 'int' sugar
|     |-TemplateTypeParmType 0x55948ad94c50 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55948ad94bf8 'T'
|     `-BuiltinType 0x55948aa96580 'int'
|-TypedefDecl 0x55948b0c0c88 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55948b0c0c50 'const int &'
|   `-QualType 0x55948b0bbdd1 'const int' const
|     `-SubstTemplateTypeParmType 0x55948b0bbdd0 'int' sugar
|       |-TemplateTypeParmType 0x55948ad94c50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55948ad94bf8 'T'
|       `-BuiltinType 0x55948aa96580 'int'
|-TypedefDecl 0x55948b0c0d18 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55948b0c0ce0 'int *'
|   `-SubstTemplateTypeParmType 0x55948b0bbdd0 'int' sugar
|     |-TemplateTypeParmType 0x55948ad94c50 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55948ad94bf8 'T'
|     `-BuiltinType 0x55948aa96580 'int'
|-TypedefDecl 0x55948b0c0da8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55948b0c0d70 'const int *'
|   `-QualType 0x55948b0bbdd1 'const int' const
|     `-SubstTemplateTypeParmType 0x55948b0bbdd0 'int' sugar
|       |-TemplateTypeParmType 0x55948ad94c50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55948ad94bf8 'T'
|       `-BuiltinType 0x55948aa96580 'int'
|-TypedefDecl 0x55948b0c1990 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55948b0c1940 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55948b0c1920 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55948b0c18b0 'type'
|     `-SubstTemplateTypeParmType 0x55948b0c1670 'int' sugar
|       |-TemplateTypeParmType 0x55948ad67d60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55948ad67d10 'T'
|       `-BuiltinType 0x55948aa96580 'int'
|-TypedefDecl 0x55948b0c19f8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55948b0c0c50 'const int &'
|   `-QualType 0x55948b0bbdd1 'const int' const
|     `-SubstTemplateTypeParmType 0x55948b0bbdd0 'int' sugar
|       |-TemplateTypeParmType 0x55948ad94c50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55948ad94bf8 'T'
|       `-BuiltinType 0x55948aa96580 'int'
|-TypedefDecl 0x55948b0c1a50 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55948aa96580 'int'
|-TypedefDecl 0x55948b0c7b30 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55948b0c0ce0 'int *'
|   `-SubstTemplateTypeParmType 0x55948b0bbdd0 'int' sugar
|     |-TemplateTypeParmType 0x55948ad94c50 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55948ad94bf8 'T'
|     `-BuiltinType 0x55948aa96580 'int'
|-TypedefDecl 0x55948b0c7b98 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55948b0c0d70 'const int *'
|   `-QualType 0x55948b0bbdd1 'const int' const
|     `-SubstTemplateTypeParmType 0x55948b0bbdd0 'int' sugar
|       |-TemplateTypeParmType 0x55948ad94c50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55948ad94bf8 'T'
|       `-BuiltinType 0x55948aa96580 'int'
|-EnumDecl 0x55948b0c7bf0 <line:134:5> col:5
| `-EnumConstantDecl 0x55948b0c7ce0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55948b0c7cc0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55948ad962d8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55948ad962b0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55948ad96290 <col:40> 'int' 1
|-CXXConstructorDecl 0x55948b0c7d68 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55948b0c7fb8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55948b0c7e20 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55948b0c7ec0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55948b0c8278 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55948b0c8160 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55948b0c8538 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55948b0c8420 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55948b0c8880 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55948b0c8760 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55948b0c8b90 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55948b0c8a70 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55948b0c8e80 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55948b0c8cc8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55948b0c8d40 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55948b0c8fa8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55948b0c9088 <col:20> Inherited
| `-OptimizeNoneAttr 0x55948b0c90e0 <col:30> Inherited
|-CXXMethodDecl 0x55948b0c9128 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55948b0c91d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55948b0c9230 <col:30> Inherited
|-CXXMethodDecl 0x55948b0c92f8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55948b0c93a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55948b0c9400 <col:30> Inherited
|-CXXMethodDecl 0x55948b0c9448 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55948b0c94f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55948b0c9550 <col:30> Inherited
|-CXXMethodDecl 0x55948b0c9598 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55948b0c9648 <col:20> Inherited
| `-OptimizeNoneAttr 0x55948b0c96a0 <col:30> Inherited
|-CXXMethodDecl 0x55948b0c96e8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55948b0c9798 <col:20> Inherited
| `-OptimizeNoneAttr 0x55948b0c97f0 <col:30> Inherited
|-CXXMethodDecl 0x55948b0c9818 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55948b0c98c8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55948b0c9978 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55948b0c9b38 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55948b0c9a28 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55948b0c9aa0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55948b0c9c88 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55948b0c9bf8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55948b0c9e38 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55948b0c9d40 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55948b0c9ef0 <col:20>
| `-OptimizeNoneAttr 0x55948b0c9f48 <col:30>
|-CXXMethodDecl 0x55948b0ca068 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55948b0c9f70 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55948b0ca120 <col:20>
| `-OptimizeNoneAttr 0x55948b0ca178 <col:30>
|-CXXMethodDecl 0x55948b0ca230 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55948b0ca1a0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55948b0ca378 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55948b0ca2e8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55948b0ca4a8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55948b0ca5d8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55948b0ca6a8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55948b0ca778 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55948b0ca8b8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55948b0ca828 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55948b0caa00 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55948b0ca970 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55948b0cab48 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55948b0caab8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55948b0cac00 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55948b0cad00 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55948b0cac70 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55948b0cadb8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55948b0cae78 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55948b0caf78 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55948b0cb0f8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55948b0cb038 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55948b0cb8b8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55948b0cb1b0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55948b0cb818 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55948b0cb718 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55948b0cb998 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55948b0cbae8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55948b0cba58 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55948b0cbba0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55948b0cbde8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55948b0cbc60 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55948b0cbcd8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55948b0cbfa8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55948b0cbeb8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55948b0cc1f8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55948b0cc070 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55948b0cc0e8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55948b0cc2b8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55948b0cc518 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55948b0cc420 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55948b0cc5e8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55948b0b9c98 prev 0x55948b09b840 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55948b0b9d90 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55948b0b9e80 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55948b0ddc90 <col:16, line:828:9>
|-CXXDestructorDecl 0x55948b0b9f70 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55948b0ddca0 <col:25, line:830:9>
|-CXXMethodDecl 0x55948b0ba070 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55948b0ba120 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55948b0ba1c8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55948b0ba1c8
| `-ParmVarDecl 0x55948b0ba2d8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55948b0baa98 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55948b0baa98
  `-ParmVarDecl 0x55948b0baba8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55948b09b678 prev 0x55948b035818 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55948b09b7b0 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55948b09b840 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55948b09b8f0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55948b09b9f8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55948b09b928 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55948b0cdba8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55948b0cdb88 <col:31> 'int' 0
|-CXXConstructorDecl 0x55948b09bd18 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55948b09bb90 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55948b09bc08 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55948b0cdbe0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55948b0cdbc0 <col:59> 'int' 0
|-CXXConstructorDecl 0x55948b09bef0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55948b09bde0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55948b09be58 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55948b0cdc18 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55948b0cdbf8 <col:55> 'int' 0
|-CXXConstructorDecl 0x55948b09c2a8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55948b09c090 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55948b09c108 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55948b09c180 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55948b0cdc50 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55948b0cdc30 <col:31> 'int' 0
|-CXXConstructorDecl 0x55948b09c468 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55948b09c3a8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55948b09c560 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55948b09c718 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55948b09c650 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55948b09c808 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55948b0ce000 <col:24, line:291:5>
|   `-ReturnStmt 0x55948b0cdff0 <line:290:9, col:79>
|     `-BinaryOperator 0x55948b0cdfd0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55948b0cdea8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55948b0cde00 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55948b0cdde0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55948b0cdcd8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55948b0cdcc0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55948b0cdca8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55948b0cdc78 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55948b0bbac0
|       | |   |       `-CXXThisExpr 0x55948b0cdc68 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55948b0cddc8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55948b0cddb0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55948b0cdd78 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55948b0cdd48 <col:28, col:35> '<bound member function type>' ->size 0x55948b083948
|       | |           `-ImplicitCastExpr 0x55948b0cdd98 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55948b0cdd30 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55948b0cdd00 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55948b0bbac0
|       | |                 `-CXXThisExpr 0x55948b0cdcf0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55948b0cde90 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55948b0cde78 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55948b0cde60 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55948b0cde30 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55948b0cc730
|       |         `-CXXThisExpr 0x55948b0cde20 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55948b0cdfb0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55948b0cdf98 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55948b0cdf80 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55948b0cdf40 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55948b0cdf28 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55948b0cded8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55948b0cc7e0
|         |     |   `-CXXThisExpr 0x55948b0cdec8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55948b0cdf08 <col:73> 'int' 0
|         `-IntegerLiteral 0x55948b0cdf60 <col:79> 'int' 0
|-CXXMethodDecl 0x55948b09c940 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55948b0ce1d8 <col:32, line:296:5>
|   `-ReturnStmt 0x55948b0ce1c8 <line:295:9, col:49>
|     `-BinaryOperator 0x55948b0ce1a8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55948b0ce088 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55948b0ce070 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55948b0ce058 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55948b0ce028 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55948b0cc730
|       |       `-CXXThisExpr 0x55948b0ce018 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55948b0ce188 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55948b0ce170 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55948b0ce158 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55948b0ce118 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55948b0ce100 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55948b0ce0b0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55948b0cc7e0
|         |     |   `-CXXThisExpr 0x55948b0ce0a0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55948b0ce0e0 <col:43> 'int' 0
|         `-IntegerLiteral 0x55948b0ce138 <col:49> 'int' 0
|-CXXMethodDecl 0x55948b09ca28 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55948b0ce3e8 <col:19, line:306:5>
|   |-IfStmt 0x55948b0ce308 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55948b0ce248 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55948b0ce230 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55948b0ce200 <col:13> 'Vector<String> *' lvalue ->_conf 0x55948b0bbac0
|   | |     `-CXXThisExpr 0x55948b0ce1f0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55948b0ce2e8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55948b0ce2b8 <col:13, col:20> '<bound member function type>' ->clear 0x55948b086318
|   |     `-ImplicitCastExpr 0x55948b0ce2a0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55948b0ce270 <col:13> 'Vector<String> *' lvalue ->_conf 0x55948b0bbac0
|   |         `-CXXThisExpr 0x55948b0ce260 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55948b0ce390 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55948b0ce360 <col:9, col:16> '<bound member function type>' .clear 0x55948b0cc2b8
|   |   `-MemberExpr 0x55948b0ce330 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55948b0cc6d0
|   |     `-CXXThisExpr 0x55948b0ce320 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55948b0ce3d8 <line:305:9, col:17>
|     `-UnaryOperator 0x55948b0ce3c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55948b0ce3b0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55948b09cca8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55948b09cbb0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55948b09ce28 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55948b09cd60 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55948b09d1a8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55948b09ced0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55948b09d108 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55948b09cf78 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55948b09cff0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55948b0ce710 <col:67, line:327:5>
|     |-WhileStmt 0x55948b0ce6c0 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55948b0ce4d8 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55948b0ce450 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55948b0351b0 0x55948afb6838 0x55948adffe18 0x55948adffaf0 0x55948adf12d0 0x55948adf0f80 0x55948adf0870 0x55948adc31e0 0x55948ad4f6a0
|     | | |-DeclRefExpr 0x55948b0ce410 <col:16> 'Iter' lvalue ParmVar 0x55948b09cf78 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55948b0ce430 <col:25> 'Iter' lvalue ParmVar 0x55948b09cff0 'end' 'Iter'
|     | `-CompoundStmt 0x55948b0ce6a0 <col:30, line:325:9>
|     |   |-CallExpr 0x55948b0ce640 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55948b0ce520 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55948b0ce610 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55948b0ce5a0 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55948afbb9b8 0x55948afbb5d8 0x55948afbb208 0x55948afbae28 0x55948afbaa48 0x55948afba678
|     |   |   `-DeclRefExpr 0x55948b0ce580 <col:24> 'Iter' lvalue ParmVar 0x55948b09cf78 'begin' 'Iter'
|     |   `-UnaryOperator 0x55948b0ce688 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55948b0ce668 <col:15> 'Iter' lvalue ParmVar 0x55948b09cf78 'begin' 'Iter'
|     `-ReturnStmt 0x55948b0ce700 <line:326:9, col:17>
|       `-UnaryOperator 0x55948b0ce6e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55948b0ce6d8 <col:17> 'Args *' this
|-CXXMethodDecl 0x55948b09d2b0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55948b09d220 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55948b09d3f8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55948b09d368 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55948b09d4c0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55948b0ce7f0 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55948b0ce790 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55948b0ce740 <col:9> '<bound member function type>' ->reset_from 0x55948b0ccb58
|   | | `-CXXThisExpr 0x55948b0ce730 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55948b0ce770 <col:20> 'int' 0
|   `-ReturnStmt 0x55948b0ce7e0 <line:352:9, col:17>
|     `-UnaryOperator 0x55948b0ce7c8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55948b0ce7b8 <col:17> 'Args *' this
|-VarDecl 0x55948b09d578 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55948b09d5e0 <col:38> 'int' 1
|-VarDecl 0x55948b09d670 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55948b09d6d8 <col:39> 'int' 2
|-VarDecl 0x55948b09d768 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55948b09d7d0 <col:39> 'int' 4
|-VarDecl 0x55948b09d860 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55948b09d8c8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55948b09dc48 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55948b09d940 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55948b09dba8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55948b09d9f0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b09da98 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55948b0ce948 <col:43, line:371:5>
|     `-ReturnStmt 0x55948b0ce938 <line:370:9, col:34>
|       `-CallExpr 0x55948b0ce900 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55948b0ce820 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55948b0ce8a0 <col:21> 'const char *' lvalue ParmVar 0x55948b09d9f0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55948b0ce8c0 <col:30> 'int' 0
|         `-DeclRefExpr 0x55948b0ce8e0 <col:33> 'T' lvalue ParmVar 0x55948b09da98 'x' 'T &'
|-FunctionTemplateDecl 0x55948b09df78 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55948b09dcb0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55948b09ded8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55948b09dd60 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b09de08 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55948b0cea98 <col:45, line:375:5>
|     `-ReturnStmt 0x55948b0cea88 <line:374:9, col:42>
|       `-CallExpr 0x55948b0cea50 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55948b0ce970 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55948b0ce9f0 <col:21> 'const char *' lvalue ParmVar 0x55948b09dd60 'keyword' 'const char *'
|         |-DeclRefExpr 0x55948b0cea10 <col:30> 'const int' lvalue Var 0x55948b09d578 'mandatory' 'const int'
|         `-DeclRefExpr 0x55948b0cea30 <col:41> 'T' lvalue ParmVar 0x55948b09de08 'x' 'T &'
|-FunctionTemplateDecl 0x55948b09e2a8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55948b09dfe0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55948b09e208 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55948b09e090 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b09e138 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55948b0cebe8 <col:45, line:379:5>
|     `-ReturnStmt 0x55948b0cebd8 <line:378:9, col:43>
|       `-CallExpr 0x55948b0ceba0 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55948b0ceac0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55948b0ceb40 <col:21> 'const char *' lvalue ParmVar 0x55948b09e090 'keyword' 'const char *'
|         |-DeclRefExpr 0x55948b0ceb60 <col:30> 'const int' lvalue Var 0x55948b09d670 'positional' 'const int'
|         `-DeclRefExpr 0x55948b0ceb80 <col:42> 'T' lvalue ParmVar 0x55948b09e138 'x' 'T &'
|-FunctionTemplateDecl 0x55948b09e5d8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55948b09e310 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55948b09e538 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55948b09e3c0 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55948b09e468 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x55948b0cede8 <col:46, line:383:5>
| |   `-ReturnStmt 0x55948b0cedd8 <line:382:9, col:55>
| |     `-CallExpr 0x55948b0ceda0 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55948b0cec10 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55948b0cec90 <col:21> 'const char *' lvalue ParmVar 0x55948b09e3c0 'keyword' 'const char *'
| |       |-BinaryOperator 0x55948b0ced60 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55948b0ced10 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55948b0cecf0 <col:30> 'const int' lvalue Var 0x55948b09d578 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55948b0ced48 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55948b0ced28 <col:42> 'const int' lvalue Var 0x55948b09d670 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x55948b0ced80 <col:54> 'T' lvalue ParmVar 0x55948b09e468 'x' 'T &'
| |-CXXMethodDecl 0x55948b119bc8 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, IPAddress &)'
| | |-TemplateArgument type 'IPAddress'
| | |-ParmVarDecl 0x55948b1199e0 <col:19, col:31> col:31 keyword 'const char *'
| | `-ParmVarDecl 0x55948b119ab8 <col:40, col:43> col:43 x 'IPAddress &'
| `-CXXMethodDecl 0x55948b11a048 <col:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, EtherAddress &)'
|   |-TemplateArgument type 'EtherAddress'
|   |-ParmVarDecl 0x55948b119e60 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x55948b119f38 <col:40, col:43> col:43 x 'EtherAddress &'
|-FunctionTemplateDecl 0x55948b09e9d8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55948b09e640 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55948b09e938 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55948b09e6f0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b09e770 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55948b09e818 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55948b0cef28 <col:54, line:388:5>
|     |-CallExpr 0x55948b0ceeb0 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55948b0cee00 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55948b0cee40 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55948b0cee50 <col:30> 'const char *' lvalue ParmVar 0x55948b09e6f0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55948b0cee70 <col:39> 'int' lvalue ParmVar 0x55948b09e770 'flags' 'int'
|     | `-DeclRefExpr 0x55948b0cee90 <col:46> 'T' lvalue ParmVar 0x55948b09e818 'x' 'T &'
|     `-ReturnStmt 0x55948b0cef18 <line:387:9, col:17>
|       `-UnaryOperator 0x55948b0cef00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55948b0ceef0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55948b09ee88 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55948b09ea48 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55948b09eac8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55948b09ede8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55948b09eb88 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b09ec28 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55948b09ecc8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55948b0cf098 <col:74, line:403:5>
|     `-ReturnStmt 0x55948b0cf088 <line:402:9, col:56>
|       `-CallExpr 0x55948b0cf048 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55948b0cef58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55948b0cefc8 <col:28> 'const char *' lvalue ParmVar 0x55948b09eb88 'keyword' 'const char *'
|         |-IntegerLiteral 0x55948b0cefe8 <col:37> 'int' 0
|         |-DeclRefExpr 0x55948b0cf008 <col:40> 'T' lvalue ParmVar 0x55948b09ec28 'x' 'T &'
|         `-DeclRefExpr 0x55948b0cf028 <col:43> 'const V' lvalue ParmVar 0x55948b09ecc8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55948b09f2f8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55948b09eef8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55948b09ef78 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55948b09f258 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55948b09f038 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b09f0d8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55948b09f178 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55948b0cf200 <col:76, line:407:5>
|     `-ReturnStmt 0x55948b0cf1f0 <line:406:9, col:65>
|       `-CallExpr 0x55948b0cf1b0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55948b0cf0c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55948b0cf130 <col:28> 'const char *' lvalue ParmVar 0x55948b09f038 'keyword' 'const char *'
|         |-DeclRefExpr 0x55948b0cf150 <col:37> 'const int' lvalue Var 0x55948b09d670 'positional' 'const int'
|         |-DeclRefExpr 0x55948b0cf170 <col:49> 'T' lvalue ParmVar 0x55948b09f0d8 'x' 'T &'
|         `-DeclRefExpr 0x55948b0cf190 <col:52> 'const V' lvalue ParmVar 0x55948b09f178 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55948b09f848 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55948b09f368 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55948b09f3e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55948b09f7a8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55948b09f4a8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b09f528 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55948b09f5c8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55948b09f668 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55948b0cf368 <col:85, line:412:5>
|     |-CallExpr 0x55948b0cf2e8 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55948b0cf218 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55948b0cf258 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55948b0cf268 <col:37> 'const char *' lvalue ParmVar 0x55948b09f4a8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55948b0cf288 <col:46> 'int' lvalue ParmVar 0x55948b09f528 'flags' 'int'
|     | |-DeclRefExpr 0x55948b0cf2a8 <col:53> 'T' lvalue ParmVar 0x55948b09f5c8 'x' 'T &'
|     | `-DeclRefExpr 0x55948b0cf2c8 <col:56> 'const V' lvalue ParmVar 0x55948b09f668 'default_value' 'const V &'
|     `-ReturnStmt 0x55948b0cf358 <line:411:9, col:17>
|       `-UnaryOperator 0x55948b0cf340 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55948b0cf330 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55948b09fcd8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55948b09f8c0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55948b09f938 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55948b09fc38 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55948b09f9f8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b09fa70 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55948b09fb18 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55948b0cf4e8 <col:53, line:425:5>
|     `-ReturnStmt 0x55948b0cf4d8 <line:424:9, col:42>
|       `-CallExpr 0x55948b0cf498 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55948b0cf398 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55948b0cf418 <col:21> 'const char *' lvalue ParmVar 0x55948b09f9f8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55948b0cf438 <col:30> 'int' 0
|         |-DeclRefExpr 0x55948b0cf458 <col:33> 'P' lvalue ParmVar 0x55948b09fa70 'parser' 'P'
|         `-DeclRefExpr 0x55948b0cf478 <col:41> 'T' lvalue ParmVar 0x55948b09fb18 'x' 'T &'
|-FunctionTemplateDecl 0x55948b0a0128 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55948b09fd48 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55948b09fdc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55948b0a0088 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55948b09fe88 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b09ff00 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55948b09ffa8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55948b0cf660 <col:55, line:429:5>
|     `-ReturnStmt 0x55948b0cf650 <line:428:9, col:50>
|       `-CallExpr 0x55948b0cf610 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55948b0cf510 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55948b0cf590 <col:21> 'const char *' lvalue ParmVar 0x55948b09fe88 'keyword' 'const char *'
|         |-DeclRefExpr 0x55948b0cf5b0 <col:30> 'const int' lvalue Var 0x55948b09d578 'mandatory' 'const int'
|         |-DeclRefExpr 0x55948b0cf5d0 <col:41> 'P' lvalue ParmVar 0x55948b09ff00 'parser' 'P'
|         `-DeclRefExpr 0x55948b0cf5f0 <col:49> 'T' lvalue ParmVar 0x55948b09ffa8 'x' 'T &'
|-FunctionTemplateDecl 0x55948b0a0578 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55948b0a0198 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55948b0a0218 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55948b0a04d8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55948b0a02d8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0a0350 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55948b0a03f8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55948b0cf7d8 <col:55, line:433:5>
|     `-ReturnStmt 0x55948b0cf7c8 <line:432:9, col:51>
|       `-CallExpr 0x55948b0cf788 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55948b0cf688 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55948b0cf708 <col:21> 'const char *' lvalue ParmVar 0x55948b0a02d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55948b0cf728 <col:30> 'const int' lvalue Var 0x55948b09d670 'positional' 'const int'
|         |-DeclRefExpr 0x55948b0cf748 <col:42> 'P' lvalue ParmVar 0x55948b0a0350 'parser' 'P'
|         `-DeclRefExpr 0x55948b0cf768 <col:50> 'T' lvalue ParmVar 0x55948b0a03f8 'x' 'T &'
|-FunctionTemplateDecl 0x55948b0a09c8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55948b0a05e8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55948b0a0668 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55948b0a0928 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55948b0a0728 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0a07a0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55948b0a0848 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55948b0cfa00 <col:56, line:437:5>
|     `-ReturnStmt 0x55948b0cf9f0 <line:436:9, col:63>
|       `-CallExpr 0x55948b0cf9b0 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55948b0cf800 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55948b0cf880 <col:21> 'const char *' lvalue ParmVar 0x55948b0a0728 'keyword' 'const char *'
|         |-BinaryOperator 0x55948b0cf950 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55948b0cf900 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55948b0cf8e0 <col:30> 'const int' lvalue Var 0x55948b09d578 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55948b0cf938 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55948b0cf918 <col:42> 'const int' lvalue Var 0x55948b09d670 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55948b0cf970 <col:54> 'P' lvalue ParmVar 0x55948b0a07a0 'parser' 'P'
|         `-DeclRefExpr 0x55948b0cf990 <col:62> 'T' lvalue ParmVar 0x55948b0a0848 'x' 'T &'
|-FunctionTemplateDecl 0x55948b0a0ef8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55948b0a0a38 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55948b0a0ab8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55948b0a0e58 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55948b0a0b78 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0a0bf8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55948b0a0c70 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55948b0a0d18 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55948b0d13f8 <col:64, line:442:5>
|     |-CallExpr 0x55948b0cfae8 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55948b0cfa18 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55948b0cfa58 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55948b0cfa68 <col:30> 'const char *' lvalue ParmVar 0x55948b0a0b78 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55948b0cfa88 <col:39> 'int' lvalue ParmVar 0x55948b0a0bf8 'flags' 'int'
|     | |-DeclRefExpr 0x55948b0cfaa8 <col:46> 'P' lvalue ParmVar 0x55948b0a0c70 'parser' 'P'
|     | `-DeclRefExpr 0x55948b0cfac8 <col:54> 'T' lvalue ParmVar 0x55948b0a0d18 'x' 'T &'
|     `-ReturnStmt 0x55948b0d13e8 <line:441:9, col:17>
|       `-UnaryOperator 0x55948b0d13d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55948b0d13c0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55948b0a14f8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55948b0a0f70 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55948b0a0fe8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55948b0a1068 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55948b0a1458 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55948b0a1130 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0a11a8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55948b0a1248 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55948b0a1318 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55948b0d1590 <col:84, line:458:5>
|     `-ReturnStmt 0x55948b0d1580 <line:457:9, col:64>
|       `-CallExpr 0x55948b0d1538 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55948b0d1428 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55948b0d1498 <col:28> 'const char *' lvalue ParmVar 0x55948b0a1130 'keyword' 'const char *'
|         |-IntegerLiteral 0x55948b0d14b8 <col:37> 'int' 0
|         |-DeclRefExpr 0x55948b0d14d8 <col:40> 'P' lvalue ParmVar 0x55948b0a11a8 'parser' 'P'
|         |-DeclRefExpr 0x55948b0d14f8 <col:48> 'T' lvalue ParmVar 0x55948b0a1248 'x' 'T &'
|         `-DeclRefExpr 0x55948b0d1518 <col:51> 'const V' lvalue ParmVar 0x55948b0a1318 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55948b0a1a78 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55948b0a1570 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55948b0a15e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55948b0a1668 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55948b0a19d8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55948b0a1730 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0a17a8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55948b0a1848 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55948b0a18e8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55948b0d1720 <col:86, line:462:5>
|     `-ReturnStmt 0x55948b0d1710 <line:461:9, col:73>
|       `-CallExpr 0x55948b0d16c8 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55948b0d15b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55948b0d1628 <col:28> 'const char *' lvalue ParmVar 0x55948b0a1730 'keyword' 'const char *'
|         |-DeclRefExpr 0x55948b0d1648 <col:37> 'const int' lvalue Var 0x55948b09d670 'positional' 'const int'
|         |-DeclRefExpr 0x55948b0d1668 <col:49> 'P' lvalue ParmVar 0x55948b0a17a8 'parser' 'P'
|         |-DeclRefExpr 0x55948b0d1688 <col:57> 'T' lvalue ParmVar 0x55948b0a1848 'x' 'T &'
|         `-DeclRefExpr 0x55948b0d16a8 <col:60> 'const V' lvalue ParmVar 0x55948b0a18e8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55948b0a20d8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55948b0a1af0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55948b0a1b68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55948b0a1be8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55948b0a2038 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55948b0a1cb0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0a1d30 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55948b0a1da8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55948b0a1e48 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55948b0a1ee8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55948b0d18b0 <col:95, line:467:5>
|     |-CallExpr 0x55948b0d1828 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55948b0d1738 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55948b0d1778 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55948b0d1788 <col:37> 'const char *' lvalue ParmVar 0x55948b0a1cb0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55948b0d17a8 <col:46> 'int' lvalue ParmVar 0x55948b0a1d30 'flags' 'int'
|     | |-DeclRefExpr 0x55948b0d17c8 <col:53> 'P' lvalue ParmVar 0x55948b0a1da8 'parser' 'P'
|     | |-DeclRefExpr 0x55948b0d17e8 <col:61> 'T' lvalue ParmVar 0x55948b0a1e48 'x' 'T &'
|     | `-DeclRefExpr 0x55948b0d1808 <col:64> 'const V' lvalue ParmVar 0x55948b0a1ee8 'default_value' 'const V &'
|     `-ReturnStmt 0x55948b0d18a0 <line:466:9, col:17>
|       `-UnaryOperator 0x55948b0d1888 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55948b0d1878 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55948b0a26b8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55948b0a2158 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55948b0a21d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55948b0a2258 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55948b0a2618 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55948b0a2320 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0a2398 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55948b0a2438 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55948b0a24d8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55948b0d1a58 <col:63, line:481:5>
|     `-ReturnStmt 0x55948b0d1a48 <line:480:9, col:47>
|       `-CallExpr 0x55948b0d1a00 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55948b0d18e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55948b0d1960 <col:21> 'const char *' lvalue ParmVar 0x55948b0a2320 'keyword' 'const char *'
|         |-IntegerLiteral 0x55948b0d1980 <col:30> 'int' 0
|         |-DeclRefExpr 0x55948b0d19a0 <col:33> 'P' lvalue ParmVar 0x55948b0a2398 'parser' 'P'
|         |-DeclRefExpr 0x55948b0d19c0 <col:41> 'T1' lvalue ParmVar 0x55948b0a2438 'x1' 'T1 &'
|         `-DeclRefExpr 0x55948b0d19e0 <col:45> 'T2' lvalue ParmVar 0x55948b0a24d8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55948b0a2c38 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55948b0a2730 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55948b0a27a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55948b0a2828 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55948b0a2b98 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55948b0a28f0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0a2968 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55948b0a2a08 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55948b0a2aa8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55948b0d1bf8 <col:65, line:485:5>
|     `-ReturnStmt 0x55948b0d1be8 <line:484:9, col:55>
|       `-CallExpr 0x55948b0d1ba0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55948b0d1a80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55948b0d1b00 <col:21> 'const char *' lvalue ParmVar 0x55948b0a28f0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55948b0d1b20 <col:30> 'const int' lvalue Var 0x55948b09d578 'mandatory' 'const int'
|         |-DeclRefExpr 0x55948b0d1b40 <col:41> 'P' lvalue ParmVar 0x55948b0a2968 'parser' 'P'
|         |-DeclRefExpr 0x55948b0d1b60 <col:49> 'T1' lvalue ParmVar 0x55948b0a2a08 'x1' 'T1 &'
|         `-DeclRefExpr 0x55948b0d1b80 <col:53> 'T2' lvalue ParmVar 0x55948b0a2aa8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55948b0a31b8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55948b0a2cb0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55948b0a2d28 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55948b0a2da8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55948b0a3118 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55948b0a2e70 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0a2ee8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55948b0a2f88 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55948b0a3028 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55948b0d1d98 <col:65, line:489:5>
|     `-ReturnStmt 0x55948b0d1d88 <line:488:9, col:56>
|       `-CallExpr 0x55948b0d1d40 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55948b0d1c20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55948b0d1ca0 <col:21> 'const char *' lvalue ParmVar 0x55948b0a2e70 'keyword' 'const char *'
|         |-DeclRefExpr 0x55948b0d1cc0 <col:30> 'const int' lvalue Var 0x55948b09d670 'positional' 'const int'
|         |-DeclRefExpr 0x55948b0d1ce0 <col:42> 'P' lvalue ParmVar 0x55948b0a2ee8 'parser' 'P'
|         |-DeclRefExpr 0x55948b0d1d00 <col:50> 'T1' lvalue ParmVar 0x55948b0a2f88 'x1' 'T1 &'
|         `-DeclRefExpr 0x55948b0d1d20 <col:54> 'T2' lvalue ParmVar 0x55948b0a3028 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55948b0a3738 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55948b0a3230 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55948b0a32a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55948b0a3328 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55948b0a3698 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55948b0a33f0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0a3468 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55948b0a3508 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55948b0a35a8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55948b0d1fe8 <col:66, line:493:5>
|     `-ReturnStmt 0x55948b0d1fd8 <line:492:9, col:68>
|       `-CallExpr 0x55948b0d1f90 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55948b0d1dc0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55948b0d1e40 <col:21> 'const char *' lvalue ParmVar 0x55948b0a33f0 'keyword' 'const char *'
|         |-BinaryOperator 0x55948b0d1f10 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55948b0d1ec0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55948b0d1ea0 <col:30> 'const int' lvalue Var 0x55948b09d578 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55948b0d1ef8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55948b0d1ed8 <col:42> 'const int' lvalue Var 0x55948b09d670 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55948b0d1f30 <col:54> 'P' lvalue ParmVar 0x55948b0a3468 'parser' 'P'
|         |-DeclRefExpr 0x55948b0d1f50 <col:62> 'T1' lvalue ParmVar 0x55948b0a3508 'x1' 'T1 &'
|         `-DeclRefExpr 0x55948b0d1f70 <col:66> 'T2' lvalue ParmVar 0x55948b0a35a8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55948b0a3d98 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55948b0a37b0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55948b0a3828 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55948b0a38a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55948b0a3cf8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55948b0a3970 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0a39f0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55948b0a3a68 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55948b0a3b08 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55948b0a3ba8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55948b0d2178 <col:74, line:498:5>
|     |-CallExpr 0x55948b0d20f0 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55948b0d2000 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55948b0d2040 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55948b0d2050 <col:30> 'const char *' lvalue ParmVar 0x55948b0a3970 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55948b0d2070 <col:39> 'int' lvalue ParmVar 0x55948b0a39f0 'flags' 'int'
|     | |-DeclRefExpr 0x55948b0d2090 <col:46> 'P' lvalue ParmVar 0x55948b0a3a68 'parser' 'P'
|     | |-DeclRefExpr 0x55948b0d20b0 <col:54> 'T1' lvalue ParmVar 0x55948b0a3b08 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55948b0d20d0 <col:58> 'T2' lvalue ParmVar 0x55948b0a3ba8 'x2' 'T2 &'
|     `-ReturnStmt 0x55948b0d2168 <line:497:9, col:17>
|       `-UnaryOperator 0x55948b0d2150 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55948b0d2140 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55948b0a40f8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55948b0a3e18 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55948b0a4058 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55948b0a3ed0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0a3f48 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55948b0d22c0 <col:52, line:509:5>
|     `-ReturnStmt 0x55948b0d22b0 <line:508:9, col:44>
|       `-CallExpr 0x55948b0d2278 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55948b0d21a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55948b0d2218 <col:26> 'const char *' lvalue ParmVar 0x55948b0a3ed0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55948b0d2238 <col:35> 'int' 0
|         `-DeclRefExpr 0x55948b0d2258 <col:38> 'P' lvalue ParmVar 0x55948b0a3f48 'parser' 'P'
|-FunctionTemplateDecl 0x55948b0a43f8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55948b0a4160 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55948b0a4358 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55948b0a4210 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0a4288 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55948b0d2400 <col:54, line:513:5>
|     `-ReturnStmt 0x55948b0d23f0 <line:512:9, col:52>
|       `-CallExpr 0x55948b0d23b8 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55948b0d22e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55948b0d2358 <col:26> 'const char *' lvalue ParmVar 0x55948b0a4210 'keyword' 'const char *'
|         |-DeclRefExpr 0x55948b0d2378 <col:35> 'const int' lvalue Var 0x55948b09d578 'mandatory' 'const int'
|         `-DeclRefExpr 0x55948b0d2398 <col:46> 'P' lvalue ParmVar 0x55948b0a4288 'parser' 'P'
|-FunctionTemplateDecl 0x55948b0a46f8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55948b0a4460 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55948b0a4658 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55948b0a4510 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0a4588 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55948b0d2540 <col:54, line:517:5>
|     `-ReturnStmt 0x55948b0d2530 <line:516:9, col:53>
|       `-CallExpr 0x55948b0d24f8 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55948b0d2428 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55948b0d2498 <col:26> 'const char *' lvalue ParmVar 0x55948b0a4510 'keyword' 'const char *'
|         |-DeclRefExpr 0x55948b0d24b8 <col:35> 'const int' lvalue Var 0x55948b09d670 'positional' 'const int'
|         `-DeclRefExpr 0x55948b0d24d8 <col:47> 'P' lvalue ParmVar 0x55948b0a4588 'parser' 'P'
|-FunctionTemplateDecl 0x55948b0a7180 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55948b0a4760 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55948b0a70e0 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55948b0a4810 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0a4888 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55948b0d2730 <col:55, line:521:5>
|     `-ReturnStmt 0x55948b0d2720 <line:520:9, col:65>
|       `-CallExpr 0x55948b0d26e8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55948b0d2568 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55948b0d25d8 <col:26> 'const char *' lvalue ParmVar 0x55948b0a4810 'keyword' 'const char *'
|         |-BinaryOperator 0x55948b0d26a8 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55948b0d2658 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55948b0d2638 <col:35> 'const int' lvalue Var 0x55948b09d578 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55948b0d2690 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55948b0d2670 <col:47> 'const int' lvalue Var 0x55948b09d670 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55948b0d26c8 <col:59> 'P' lvalue ParmVar 0x55948b0a4888 'parser' 'P'
|-FunctionTemplateDecl 0x55948b0a7558 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55948b0a71e8 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55948b0a74b8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55948b0a72a0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0a7320 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55948b0a7398 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55948b0d2870 <col:63, line:526:5>
|     |-CallExpr 0x55948b0d27f8 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55948b0d2748 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55948b0d2788 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55948b0d2798 <col:35> 'const char *' lvalue ParmVar 0x55948b0a72a0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55948b0d27b8 <col:44> 'int' lvalue ParmVar 0x55948b0a7320 'flags' 'int'
|     | `-DeclRefExpr 0x55948b0d27d8 <col:51> 'P' lvalue ParmVar 0x55948b0a7398 'parser' 'P'
|     `-ReturnStmt 0x55948b0d2860 <line:525:9, col:17>
|       `-UnaryOperator 0x55948b0d2848 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55948b0d2838 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55948b0a79a8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55948b0a75c8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55948b0a7648 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55948b0a7908 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55948b0a7708 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0a7780 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55948b0a7828 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55948b0d29c8 <col:58, line:541:5>
|     `-ReturnStmt 0x55948b0d29b8 <line:540:9, col:39>
|       `-CallExpr 0x55948b0d2980 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55948b0d28a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55948b0d2920 <col:21> 'const char *' lvalue ParmVar 0x55948b0a7708 'keyword' 'const char *'
|         |-DeclRefExpr 0x55948b0d2940 <col:30> 'P' lvalue ParmVar 0x55948b0a7780 'parser' 'P'
|         `-DeclRefExpr 0x55948b0d2960 <col:38> 'T' lvalue ParmVar 0x55948b0a7828 'x' 'T &'
|-FunctionTemplateDecl 0x55948b0a7df8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55948b0a7a18 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55948b0a7a98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55948b0a7d58 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55948b0a7b58 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0a7bd0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55948b0a7c78 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55948b0d2b00 <col:60, line:545:5>
|     `-ReturnStmt 0x55948b0d2af0 <line:544:9, col:41>
|       `-CallExpr 0x55948b0d2ab8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55948b0d29f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55948b0d2a58 <col:23> 'const char *' lvalue ParmVar 0x55948b0a7b58 'keyword' 'const char *'
|         |-DeclRefExpr 0x55948b0d2a78 <col:32> 'P' lvalue ParmVar 0x55948b0a7bd0 'parser' 'P'
|         `-DeclRefExpr 0x55948b0d2a98 <col:40> 'T' lvalue ParmVar 0x55948b0a7c78 'x' 'T &'
|-FunctionTemplateDecl 0x55948b0a8248 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55948b0a7e68 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55948b0a7ee8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55948b0a81a8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55948b0a7fa8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0a8020 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55948b0a80c8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55948b0d2c38 <col:60, line:549:5>
|     `-ReturnStmt 0x55948b0d2c28 <line:548:9, col:41>
|       `-CallExpr 0x55948b0d2bf0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55948b0d2b28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55948b0d2b90 <col:23> 'const char *' lvalue ParmVar 0x55948b0a7fa8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55948b0d2bb0 <col:32> 'P' lvalue ParmVar 0x55948b0a8020 'parser' 'P'
|         `-DeclRefExpr 0x55948b0d2bd0 <col:40> 'T' lvalue ParmVar 0x55948b0a80c8 'x' 'T &'
|-FunctionTemplateDecl 0x55948b0a8698 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55948b0a82b8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55948b0a8338 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55948b0a85f8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55948b0a83f8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0a8470 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55948b0a8518 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55948b0d2d70 <col:61, line:553:5>
|     `-ReturnStmt 0x55948b0d2d60 <line:552:9, col:42>
|       `-CallExpr 0x55948b0d2d28 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55948b0d2c60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55948b0d2cc8 <col:24> 'const char *' lvalue ParmVar 0x55948b0a83f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55948b0d2ce8 <col:33> 'P' lvalue ParmVar 0x55948b0a8470 'parser' 'P'
|         `-DeclRefExpr 0x55948b0d2d08 <col:41> 'T' lvalue ParmVar 0x55948b0a8518 'x' 'T &'
|-FunctionTemplateDecl 0x55948b0a8b78 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55948b0a8708 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55948b0a8788 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55948b0a8ad8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55948b0a8848 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0a88c8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55948b0a8940 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55948b0a89e8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55948b0d2ee8 <col:69, line:557:5>
|     `-ReturnStmt 0x55948b0d2ed8 <line:556:9, col:46>
|       `-CallExpr 0x55948b0d2e98 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55948b0d2d98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55948b0d2e18 <col:21> 'const char *' lvalue ParmVar 0x55948b0a8848 'keyword' 'const char *'
|         |-DeclRefExpr 0x55948b0d2e38 <col:30> 'int' lvalue ParmVar 0x55948b0a88c8 'flags' 'int'
|         |-DeclRefExpr 0x55948b0d2e58 <col:37> 'P' lvalue ParmVar 0x55948b0a8940 'parser' 'P'
|         `-DeclRefExpr 0x55948b0d2e78 <col:45> 'T' lvalue ParmVar 0x55948b0a89e8 'x' 'T &'
|-FunctionTemplateDecl 0x55948b0a8e88 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55948b0a8bf0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55948b0a8de8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55948b0a8ca0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0a8d18 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55948b0d3028 <col:56, line:571:5>
|     `-ReturnStmt 0x55948b0d3018 <line:570:9, col:48>
|       `-CallExpr 0x55948b0d2fe0 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55948b0d2f10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55948b0d2f80 <col:30> 'const char *' lvalue ParmVar 0x55948b0a8ca0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55948b0d2fa0 <col:39> 'int' 0
|         `-DeclRefExpr 0x55948b0d2fc0 <col:42> 'P' lvalue ParmVar 0x55948b0a8d18 'parser' 'P'
|-FunctionTemplateDecl 0x55948b0a9218 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55948b0a8ef0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55948b0a9178 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55948b0a8fa0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0a9020 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55948b0a9098 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55948b0d31f8 <col:67, line:576:5>
|     |-CallExpr 0x55948b0d3180 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55948b0d3040 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55948b0d3080 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55948b0d3090 <col:39> 'const char *' lvalue ParmVar 0x55948b0a8fa0 'keyword' 'const char *'
|     | |-BinaryOperator 0x55948b0d3140 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55948b0d30f0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55948b0d30b0 <col:48> 'int' lvalue ParmVar 0x55948b0a9020 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55948b0d3128 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55948b0d3108 <col:56> 'const int' lvalue Var 0x55948b09d860 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55948b0d3160 <col:68> 'P' lvalue ParmVar 0x55948b0a9098 'parser' 'P'
|     `-ReturnStmt 0x55948b0d31e8 <line:575:9, col:17>
|       `-UnaryOperator 0x55948b0d31d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55948b0d31c0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55948b0a9668 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55948b0a9288 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55948b0a9308 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55948b0a95c8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55948b0a93c8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0a9440 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55948b0a94e8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55948b0d3368 <col:62, line:592:5>
|     `-ReturnStmt 0x55948b0d3358 <line:591:9, col:51>
|       `-CallExpr 0x55948b0d3318 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55948b0d3228 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55948b0d3298 <col:30> 'const char *' lvalue ParmVar 0x55948b0a93c8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55948b0d32b8 <col:39> 'int' 0
|         |-DeclRefExpr 0x55948b0d32d8 <col:42> 'P' lvalue ParmVar 0x55948b0a9440 'parser' 'P'
|         `-DeclRefExpr 0x55948b0d32f8 <col:50> 'T' lvalue ParmVar 0x55948b0a94e8 'x' 'T &'
|-FunctionTemplateDecl 0x55948b0a9b48 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55948b0a96d8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55948b0a9758 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55948b0a9aa8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55948b0a9818 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0a9898 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55948b0a9910 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55948b0a99b8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55948b0d3560 <col:73, line:597:5>
|     |-CallExpr 0x55948b0d34e0 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55948b0d3380 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55948b0d33c0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55948b0d33d0 <col:39> 'const char *' lvalue ParmVar 0x55948b0a9818 'keyword' 'const char *'
|     | |-BinaryOperator 0x55948b0d3480 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55948b0d3430 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55948b0d33f0 <col:48> 'int' lvalue ParmVar 0x55948b0a9898 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55948b0d3468 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55948b0d3448 <col:56> 'const int' lvalue Var 0x55948b09d860 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55948b0d34a0 <col:68> 'P' lvalue ParmVar 0x55948b0a9910 'parser' 'P'
|     | `-DeclRefExpr 0x55948b0d34c0 <col:76> 'T' lvalue ParmVar 0x55948b0a99b8 'x' 'T &'
|     `-ReturnStmt 0x55948b0d3550 <line:596:9, col:17>
|       `-UnaryOperator 0x55948b0d3538 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55948b0d3528 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55948b0aa0f8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55948b0a9bc0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55948b0a9c38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55948b0aa058 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55948b0a9cf8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0a9d70 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55948b0a9f30 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55948b0d36d0 <col:65, line:614:5>
|     `-ReturnStmt 0x55948b0d36c0 <line:613:9, col:46>
|       `-CallExpr 0x55948b0d3680 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55948b0d3590 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55948b0d3600 <col:25> 'const char *' lvalue ParmVar 0x55948b0a9cf8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55948b0d3620 <col:34> 'int' 0
|         |-DeclRefExpr 0x55948b0d3640 <col:37> 'P' lvalue ParmVar 0x55948b0a9d70 'parser' 'P'
|         `-DeclRefExpr 0x55948b0d3660 <col:45> 'Vector<T>' lvalue ParmVar 0x55948b0a9f30 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55948b0aa528 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55948b0aa168 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55948b0aa488 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55948b0aa220 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0aa370 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55948b0d38f0 <col:55, line:618:5>
|     `-ReturnStmt 0x55948b0d38e0 <line:617:9, col:55>
|       `-CallExpr 0x55948b0d38a0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55948b0d36f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55948b0d3768 <col:25> 'const char *' lvalue ParmVar 0x55948b0aa220 'keyword' 'const char *'
|         |-IntegerLiteral 0x55948b0d3788 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55948b0d3860 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55948b0d3880 <col:54> 'Vector<T>' lvalue ParmVar 0x55948b0aa370 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55948b0aaaf8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55948b0aa590 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55948b0aa608 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55948b0aaa58 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55948b0aa6c8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0aa748 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55948b0aa7c0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55948b0aa910 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55948b0d3ae8 <col:76, line:623:5>
|     |-CallExpr 0x55948b0d3a68 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55948b0d3908 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55948b0d3948 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55948b0d3958 <col:34> 'const char *' lvalue ParmVar 0x55948b0aa6c8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55948b0d3a08 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55948b0d39b8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55948b0d3978 <col:43> 'int' lvalue ParmVar 0x55948b0aa748 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55948b0d39f0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55948b0d39d0 <col:51> 'const int' lvalue Var 0x55948b09d860 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55948b0d3a28 <col:63> 'P' lvalue ParmVar 0x55948b0aa7c0 'parser' 'P'
|     | `-DeclRefExpr 0x55948b0d3a48 <col:71> 'Vector<T>' lvalue ParmVar 0x55948b0aa910 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55948b0d3ad8 <line:622:9, col:17>
|       `-UnaryOperator 0x55948b0d3ac0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55948b0d3ab0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55948b0ab038 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55948b0aab70 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55948b0aabe8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55948b0aaf98 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55948b0aaca8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0aad28 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55948b0aae70 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55948b0d3d50 <col:66, line:627:5>
|     `-ReturnStmt 0x55948b0d3d40 <line:626:9, col:59>
|       `-CallExpr 0x55948b0d3d00 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55948b0d3b18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55948b0d3b88 <col:25> 'const char *' lvalue ParmVar 0x55948b0aaca8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55948b0d3ba8 <col:34> 'int' lvalue ParmVar 0x55948b0aad28 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55948b0d3cc0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55948b0d3ce0 <col:58> 'Vector<T>' lvalue ParmVar 0x55948b0aae70 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55948b0ab0c8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55948b0d3dd0 <col:25, line:633:5>
|   `-ReturnStmt 0x55948b0d3dc0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55948b0d3da8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55948b0d3d78 <col:16> 'const bool' lvalue ->_status 0x55948b0bb928
|         `-CXXThisExpr 0x55948b0d3d68 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55948b0ab248 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55948b0ab180 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55948b0d3eb8 <col:27, line:639:5>
|   |-BinaryOperator 0x55948b0d3e60 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55948b0d3de8 <col:9> 'bool' lvalue ParmVar 0x55948b0ab180 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55948b0d3e48 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55948b0d3e18 <col:13> 'bool' lvalue ->_status 0x55948b0bb928
|   |     `-CXXThisExpr 0x55948b0d3e08 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55948b0d3ea8 <line:638:9, col:17>
|     `-UnaryOperator 0x55948b0d3e90 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55948b0d3e80 <col:17> 'Args *' this
|-CXXMethodDecl 0x55948b0ab3c8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55948b0ab308 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55948b0d3fa8 <col:39, line:644:5>
|   |-BinaryOperator 0x55948b0d3f50 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55948b0d3ed8 <col:9> 'bool' lvalue ParmVar 0x55948b0ab308 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55948b0d3f38 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55948b0d3f08 <col:13> 'const bool' lvalue ->_status 0x55948b0bb928
|   |     `-CXXThisExpr 0x55948b0d3ef8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55948b0d3f98 <line:643:9, col:17>
|     `-UnaryOperator 0x55948b0d3f80 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55948b0d3f70 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55948b0ab490 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55948b0d4050 <col:30, line:651:5>
|   `-ReturnStmt 0x55948b0d4040 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55948b0d4028 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55948b0d3ff8 <col:16> 'bool' lvalue ->_read_status 0x55948b096030
|         `-ImplicitCastExpr 0x55948b0d3fd8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55948b0d3fc8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55948b0ab5d8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55948b0ab548 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55948b0d4158 <col:32, line:658:5>
|   |-BinaryOperator 0x55948b0d4100 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55948b0d4068 <col:9> 'bool' lvalue ParmVar 0x55948b0ab548 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55948b0d40e8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55948b0d40b8 <col:13> 'bool' lvalue ->_read_status 0x55948b096030
|   |     `-ImplicitCastExpr 0x55948b0d4098 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55948b0d4088 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55948b0d4148 <line:657:9, col:17>
|     `-UnaryOperator 0x55948b0d4130 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55948b0d4120 <col:17> 'Args *' this
|-CXXMethodDecl 0x55948b0ab728 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55948b0ab698 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55948b0d4268 <col:44, line:663:5>
|   |-BinaryOperator 0x55948b0d4210 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55948b0d4178 <col:9> 'bool' lvalue ParmVar 0x55948b0ab698 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55948b0d41f8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55948b0d41c8 <col:13> 'bool' lvalue ->_read_status 0x55948b096030
|   |     `-ImplicitCastExpr 0x55948b0d41a8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55948b0d4198 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55948b0d4258 <line:662:9, col:17>
|     `-UnaryOperator 0x55948b0d4240 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55948b0d4230 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55948b0ab7f0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55948b0ab8b8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55948b0ab980 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55948b0aba48 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55948b0abd58 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55948b0abae8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55948b0abcb8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55948b0abbc8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55948b0d4620 <col:19, line:706:5>
|     `-IfStmt 0x55948b0d45f8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55948b0d4368 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55948b0d4528 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55948b0d44f8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55948b0d44b8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55948b0d43c0 <col:42> '<bound member function type>' ->simple_slot 0x55948b0cd810
|       |     | `-CXXThisExpr 0x55948b0d43b0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55948b0d4458 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55948b0d4410 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55948ae048b8
|       |     | `-DeclRefExpr 0x55948b0d43f0 <col:55> 'T' lvalue ParmVar 0x55948b0abbc8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55948b0d4498 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55948b0d45e8 <line:705:13, col:34>
|         `-CallExpr 0x55948b0d45c0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55948b0d4548 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55948b0d45a0 <col:33> 'T' lvalue ParmVar 0x55948b0abbc8 'x' 'T &'
|-FunctionTemplateDecl 0x55948b0ac028 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55948b0abdb8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55948b0abf88 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55948b0abe98 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55948b0d4a00 <col:31, line:717:5>
|     |-DeclStmt 0x55948b0d4760 <line:713:9, col:23>
|     | `-VarDecl 0x55948b0d4648 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55948b0d4738 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55948b0d46c0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55948b0d4718 <col:21> 'T' lvalue ParmVar 0x55948b0abe98 'x' 'T &'
|     |-IfStmt 0x55948b0d49b0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55948b0d4858 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55948b0d4990 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55948b0d4930 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55948b0d48c0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55948afbb9b8 0x55948afbb5d8 0x55948afbb208 0x55948afbae28 0x55948afbaa48 0x55948afba678
|     |   | `-DeclRefExpr 0x55948b0d48a0 <col:14> 'T *' lvalue Var 0x55948b0d4648 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55948b0d4970 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55948b0d49e8 <line:716:9, col:16>
|       `-DeclRefExpr 0x55948b0d49c8 <col:16> 'T *' lvalue Var 0x55948b0d4648 's' 'T *'
|-FunctionTemplateDecl 0x55948b0ac438 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55948b0ac088 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55948b0ac108 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55948b0ac398 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55948b0ac1e8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55948b0ac288 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55948b0d4d10 <col:37, line:726:5>
|     |-IfStmt 0x55948b0d4ca0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55948b0d4cc0 <line:723:13, col:26>
|     | | `-VarDecl 0x55948b0d4a68 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55948b0d4b58 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55948b0d4ae0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55948b0d4b38 <col:25> 'T' lvalue ParmVar 0x55948b0ac1e8 'x' 'T &'
|     | |-DeclRefExpr 0x55948b0d4b80 <col:16> 'T *' lvalue Var 0x55948b0d4a68 's' 'T *'
|     | `-BinaryOperator 0x55948b0d4c80 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55948b0d4c30 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55948b0d4bc0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55948afbb9b8 0x55948afbb5d8 0x55948afbb208 0x55948afbae28 0x55948afbaa48 0x55948afba678
|     |   | `-DeclRefExpr 0x55948b0d4ba0 <col:14> 'T *' lvalue Var 0x55948b0d4a68 's' 'T *'
|     |   `-DeclRefExpr 0x55948b0d4c60 <col:18> 'const V' lvalue ParmVar 0x55948b0ac288 'value' 'const V &'
|     `-ReturnStmt 0x55948b0d4d00 <line:725:9, col:17>
|       `-UnaryOperator 0x55948b0d4ce8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55948b0d4cd8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55948b0ac838 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55948b0ac4a0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55948b0ac798 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55948b0ac550 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0ac5d0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55948b0ac678 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55948b0d5b30 <col:65, line:737:5>
|     |-DeclStmt 0x55948b0d4da8 <line:732:9, col:26>
|     | `-VarDecl 0x55948b0d4d40 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55948b0d5af8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55948b0d5b18 <line:733:13, col:58>
|       | `-VarDecl 0x55948b0d4dd0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55948b0d4fb0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55948b0d4f80 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55948b0d4f68 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55948b0d4f48 <col:26, col:58> 'String' (CXXTemporary 0x55948b0d4f48)
|       |           `-CXXMemberCallExpr 0x55948b0d4ed8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55948b0d4e48 <col:26> '<bound member function type>' ->find 0x55948b0cce28
|       |             | `-CXXThisExpr 0x55948b0d4e38 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55948b0d4f10 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55948b0d4e78 <col:31> 'const char *' lvalue ParmVar 0x55948b0ac550 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55948b0d4f28 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55948b0d4e98 <col:40> 'int' lvalue ParmVar 0x55948b0ac5d0 'flags' 'int'
|       |             `-DeclRefExpr 0x55948b0d4eb8 <col:47> 'Args::Slot *' lvalue Var 0x55948b0d4d40 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55948b0d5068 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55948b0d5050 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55948b0d5030 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55948b0d5000 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55948adc7888
|       |       `-ImplicitCastExpr 0x55948b0d4fe8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55948b0d4fc8 <col:20> 'String' lvalue Var 0x55948b0d4dd0 'str' 'String'
|       `-CompoundStmt 0x55948b0d5ad8 <col:61, line:736:9>
|         |-DeclStmt 0x55948b0d5520 <line:734:13, col:76>
|         | `-VarDecl 0x55948b0d50b8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55948b0d54f0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55948b0d5460 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55948b0d54a8 <col:60> 'T' lvalue ParmVar 0x55948b0ac678 'variable' 'T &'
|         |     `-UnaryOperator 0x55948b0d54d8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55948b0d54c8 <col:71> 'Args *' this
|         `-CallExpr 0x55948b0d5aa8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55948b0d5548 <col:13> '<bound member function type>' ->postparse 0x55948b0cd038
|           | `-CXXThisExpr 0x55948b0d5538 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55948b0d5a68 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55948b0d5578 <col:23> 'T *' lvalue Var 0x55948b0d50b8 's' 'T *'
|           | `-CallExpr 0x55948b0d5a28 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55948b0d5800 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55948b0d5900 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55948b0d5920 <col:86> 'String' lvalue Var 0x55948b0d4dd0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55948b0d59d0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55948b0d5960 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55948afbb9b8 0x55948afbb5d8 0x55948afbb208 0x55948afbae28 0x55948afbaa48 0x55948afba678
|           |   | `-DeclRefExpr 0x55948b0d5940 <col:92> 'T *' lvalue Var 0x55948b0d50b8 's' 'T *'
|           |   `-UnaryOperator 0x55948b0d5a10 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55948b0d5a00 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55948b0d5a88 <col:103> 'Args::Slot *' lvalue Var 0x55948b0d4d40 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55948b0acd88 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55948b0ac8a8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55948b0ac928 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55948b0acce8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55948b0ac9e8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0aca68 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55948b0acb08 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55948b0acba8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55948b0d69d0 <col:88, line:745:5>
|     |-DeclStmt 0x55948b0d5bc8 <line:741:9, col:26>
|     | `-VarDecl 0x55948b0d5b60 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55948b0d5de8 <line:742:9, col:55>
|     | `-VarDecl 0x55948b0d5bf0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55948b0d5dd0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55948b0d5da0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55948b0d5d88 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55948b0d5d68 <col:22, col:54> 'String' (CXXTemporary 0x55948b0d5d68)
|     |           `-CXXMemberCallExpr 0x55948b0d5cf8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55948b0d5c68 <col:22> '<bound member function type>' ->find 0x55948b0cce28
|     |             | `-CXXThisExpr 0x55948b0d5c58 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55948b0d5d30 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55948b0d5c98 <col:27> 'const char *' lvalue ParmVar 0x55948b0ac9e8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55948b0d5d48 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55948b0d5cb8 <col:36> 'int' lvalue ParmVar 0x55948b0aca68 'flags' 'int'
|     |             `-DeclRefExpr 0x55948b0d5cd8 <col:43> 'Args::Slot *' lvalue Var 0x55948b0d5b60 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55948b0d61c0 <line:743:9, col:72>
|     | `-VarDecl 0x55948b0d5e38 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55948b0d6190 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55948b0d6100 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55948b0d6148 <col:56> 'T' lvalue ParmVar 0x55948b0acb08 'variable' 'T &'
|     |     `-UnaryOperator 0x55948b0d6178 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55948b0d6168 <col:67> 'Args *' this
|     `-CallExpr 0x55948b0d69a0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55948b0d61e8 <col:9> '<bound member function type>' ->postparse 0x55948b0cd038
|       | `-CXXThisExpr 0x55948b0d61d8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55948b0d6960 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55948b0d6218 <col:19> 'T *' lvalue Var 0x55948b0d5e38 's' 'T *'
|       | `-ParenExpr 0x55948b0d6940 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55948b0d6910 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55948b0d68f8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55948b0d68e0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55948b0d68c0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55948b0d6890 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55948adc7888
|       |     |       `-ImplicitCastExpr 0x55948b0d6878 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55948b0d6238 <col:25> 'String' lvalue Var 0x55948b0d5bf0 'str' 'String'
|       |     |-CallExpr 0x55948b0d66e8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55948b0d64c0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55948b0d65c0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55948b0d65e0 <col:89> 'String' lvalue Var 0x55948b0d5bf0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55948b0d6690 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55948b0d6620 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55948afbb9b8 0x55948afbb5d8 0x55948afbb208 0x55948afbae28 0x55948afbaa48 0x55948afba678
|       |     | | `-DeclRefExpr 0x55948b0d6600 <col:95> 'T *' lvalue Var 0x55948b0d5e38 's' 'T *'
|       |     | `-UnaryOperator 0x55948b0d66d0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55948b0d66c0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55948b0d6858 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55948b0d6838 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55948b0d6808 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55948b0d67b8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55948b0d6748 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55948afbb9b8 0x55948afbb5d8 0x55948afbb208 0x55948afbae28 0x55948afbaa48 0x55948afba678
|       |         | | `-DeclRefExpr 0x55948b0d6728 <col:109> 'T *' lvalue Var 0x55948b0d5e38 's' 'T *'
|       |         | `-DeclRefExpr 0x55948b0d67e8 <col:113> 'const V' lvalue ParmVar 0x55948b0acba8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55948b0d6828 <col:120> 'bool' true
|       `-DeclRefExpr 0x55948b0d6980 <col:128> 'Args::Slot *' lvalue Var 0x55948b0d5b60 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55948b0ad2b8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55948b0ace00 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55948b0ace78 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55948b0ad218 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55948b0acf38 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0acfb8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55948b0ad030 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55948b0ad0d8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55948b0d75c8 <col:75, line:754:5>
|     |-DeclStmt 0x55948b0d6a78 <line:749:9, col:26>
|     | `-VarDecl 0x55948b0d6a10 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55948b0d7590 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55948b0d75b0 <line:750:13, col:58>
|       | `-VarDecl 0x55948b0d6aa0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55948b0d6c80 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55948b0d6c50 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55948b0d6c38 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55948b0d6c18 <col:26, col:58> 'String' (CXXTemporary 0x55948b0d6c18)
|       |           `-CXXMemberCallExpr 0x55948b0d6ba8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55948b0d6b18 <col:26> '<bound member function type>' ->find 0x55948b0cce28
|       |             | `-CXXThisExpr 0x55948b0d6b08 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55948b0d6be0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55948b0d6b48 <col:31> 'const char *' lvalue ParmVar 0x55948b0acf38 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55948b0d6bf8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55948b0d6b68 <col:40> 'int' lvalue ParmVar 0x55948b0acfb8 'flags' 'int'
|       |             `-DeclRefExpr 0x55948b0d6b88 <col:47> 'Args::Slot *' lvalue Var 0x55948b0d6a10 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55948b0d6d38 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55948b0d6d20 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55948b0d6d00 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55948b0d6cd0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55948adc7888
|       |       `-ImplicitCastExpr 0x55948b0d6cb8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55948b0d6c98 <col:20> 'String' lvalue Var 0x55948b0d6aa0 'str' 'String'
|       `-CompoundStmt 0x55948b0d7570 <col:61, line:753:9>
|         |-DeclStmt 0x55948b0d7110 <line:751:13, col:63>
|         | `-VarDecl 0x55948b0d6d88 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55948b0d70e0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55948b0d7050 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55948b0d7098 <col:47> 'T' lvalue ParmVar 0x55948b0ad0d8 'variable' 'T &'
|         |     `-UnaryOperator 0x55948b0d70c8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55948b0d70b8 <col:58> 'Args *' this
|         `-CallExpr 0x55948b0d7540 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55948b0d7138 <col:13> '<bound member function type>' ->postparse 0x55948b0cd038
|           | `-CXXThisExpr 0x55948b0d7128 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55948b0d7500 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55948b0d7168 <col:23> 'T *' lvalue Var 0x55948b0d6d88 's' 'T *'
|           | `-CallExpr 0x55948b0d74c0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55948b0d7350 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55948b0d7398 <col:56> 'P' lvalue ParmVar 0x55948b0ad030 'parser' 'P'
|           |   |-DeclRefExpr 0x55948b0d73b8 <col:64> 'String' lvalue Var 0x55948b0d6aa0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55948b0d7468 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55948b0d73f8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55948afbb9b8 0x55948afbb5d8 0x55948afbb208 0x55948afbae28 0x55948afbaa48 0x55948afba678
|           |   | `-DeclRefExpr 0x55948b0d73d8 <col:70> 'T *' lvalue Var 0x55948b0d6d88 's' 'T *'
|           |   `-UnaryOperator 0x55948b0d74a8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55948b0d7498 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55948b0d7520 <col:81> 'Args::Slot *' lvalue Var 0x55948b0d6a10 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55948b0ad918 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55948b0ad330 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55948b0ad3a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55948b0ad428 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55948b0ad878 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55948b0ad4f0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0ad570 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55948b0ad5e8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55948b0ad688 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55948b0ad728 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55948b0d8358 <col:98, line:762:5>
|     |-DeclStmt 0x55948b0d7660 <line:758:9, col:26>
|     | `-VarDecl 0x55948b0d75f8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55948b0d7880 <line:759:9, col:55>
|     | `-VarDecl 0x55948b0d7688 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55948b0d7868 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55948b0d7838 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55948b0d7820 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55948b0d7800 <col:22, col:54> 'String' (CXXTemporary 0x55948b0d7800)
|     |           `-CXXMemberCallExpr 0x55948b0d7790 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55948b0d7700 <col:22> '<bound member function type>' ->find 0x55948b0cce28
|     |             | `-CXXThisExpr 0x55948b0d76f0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55948b0d77c8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55948b0d7730 <col:27> 'const char *' lvalue ParmVar 0x55948b0ad4f0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55948b0d77e0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55948b0d7750 <col:36> 'int' lvalue ParmVar 0x55948b0ad570 'flags' 'int'
|     |             `-DeclRefExpr 0x55948b0d7770 <col:43> 'Args::Slot *' lvalue Var 0x55948b0d75f8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55948b0d7ca0 <line:760:9, col:59>
|     | `-VarDecl 0x55948b0d78d8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55948b0d7c70 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55948b0d7be0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55948b0d7c28 <col:43> 'T' lvalue ParmVar 0x55948b0ad688 'variable' 'T &'
|     |     `-UnaryOperator 0x55948b0d7c58 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55948b0d7c48 <col:54> 'Args *' this
|     `-CallExpr 0x55948b0d8328 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55948b0d7cc8 <col:9> '<bound member function type>' ->postparse 0x55948b0cd038
|       | `-CXXThisExpr 0x55948b0d7cb8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55948b0d82e8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55948b0d7cf8 <col:19> 'T *' lvalue Var 0x55948b0d78d8 's' 'T *'
|       | `-ParenExpr 0x55948b0d82c8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55948b0d8298 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55948b0d8280 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55948b0d8268 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55948b0d8248 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55948b0d8218 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55948adc7888
|       |     |       `-ImplicitCastExpr 0x55948b0d8200 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55948b0d7d18 <col:25> 'String' lvalue Var 0x55948b0d7688 'str' 'String'
|       |     |-CallExpr 0x55948b0d8070 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55948b0d7f00 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55948b0d7f48 <col:59> 'P' lvalue ParmVar 0x55948b0ad5e8 'parser' 'P'
|       |     | |-DeclRefExpr 0x55948b0d7f68 <col:67> 'String' lvalue Var 0x55948b0d7688 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55948b0d8018 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55948b0d7fa8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55948afbb9b8 0x55948afbb5d8 0x55948afbb208 0x55948afbae28 0x55948afbaa48 0x55948afba678
|       |     | | `-DeclRefExpr 0x55948b0d7f88 <col:73> 'T *' lvalue Var 0x55948b0d78d8 's' 'T *'
|       |     | `-UnaryOperator 0x55948b0d8058 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55948b0d8048 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55948b0d81e0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55948b0d81c0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55948b0d8190 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55948b0d8140 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55948b0d80d0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55948afbb9b8 0x55948afbb5d8 0x55948afbb208 0x55948afbae28 0x55948afbaa48 0x55948afba678
|       |         | | `-DeclRefExpr 0x55948b0d80b0 <col:87> 'T *' lvalue Var 0x55948b0d78d8 's' 'T *'
|       |         | `-DeclRefExpr 0x55948b0d8170 <col:91> 'const V' lvalue ParmVar 0x55948b0ad728 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55948b0d81b0 <col:98> 'bool' true
|       `-DeclRefExpr 0x55948b0d8308 <col:106> 'Args::Slot *' lvalue Var 0x55948b0d75f8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55948b0adf88 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55948b0ad998 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55948b0ada18 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55948b0ada98 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55948b0adee8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55948b0adb60 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0adbe0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55948b0adc58 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55948b0adcf8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55948b0add98 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55948b0d9338 <col:60, line:773:5>
|     |-DeclStmt 0x55948b0d8400 <line:767:9, col:26>
|     | `-VarDecl 0x55948b0d8398 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55948b0d9300 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55948b0d9320 <line:768:13, col:58>
|       | `-VarDecl 0x55948b0d8428 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55948b0d8608 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55948b0d85d8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55948b0d85c0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55948b0d85a0 <col:26, col:58> 'String' (CXXTemporary 0x55948b0d85a0)
|       |           `-CXXMemberCallExpr 0x55948b0d8530 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55948b0d84a0 <col:26> '<bound member function type>' ->find 0x55948b0cce28
|       |             | `-CXXThisExpr 0x55948b0d8490 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55948b0d8568 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55948b0d84d0 <col:31> 'const char *' lvalue ParmVar 0x55948b0adb60 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55948b0d8580 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55948b0d84f0 <col:40> 'int' lvalue ParmVar 0x55948b0adbe0 'flags' 'int'
|       |             `-DeclRefExpr 0x55948b0d8510 <col:47> 'Args::Slot *' lvalue Var 0x55948b0d8398 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55948b0d86c0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55948b0d86a8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55948b0d8688 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55948b0d8658 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55948adc7888
|       |       `-ImplicitCastExpr 0x55948b0d8640 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55948b0d8620 <col:20> 'String' lvalue Var 0x55948b0d8428 'str' 'String'
|       `-CompoundStmt 0x55948b0d92d8 <col:61, line:772:9>
|         |-DeclStmt 0x55948b0d8a00 <line:769:13, col:66>
|         | `-VarDecl 0x55948b0d8718 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55948b0d89d0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55948b0d8940 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55948b0d8988 <col:49> 'T1' lvalue ParmVar 0x55948b0adcf8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55948b0d89b8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55948b0d89a8 <col:61> 'Args *' this
|         |-DeclStmt 0x55948b0d8d70 <line:770:13, col:66>
|         | `-VarDecl 0x55948b0d8a88 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55948b0d8d40 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55948b0d8cb0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55948b0d8cf8 <col:49> 'T2' lvalue ParmVar 0x55948b0add98 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55948b0d8d28 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55948b0d8d18 <col:61> 'Args *' this
|         `-CallExpr 0x55948b0d92a8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55948b0d8d98 <col:13> '<bound member function type>' ->postparse 0x55948b0cd038
|           | `-CXXThisExpr 0x55948b0d8d88 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55948b0d9268 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55948b0d8e08 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55948b0d8dc8 <col:23> 'T1 *' lvalue Var 0x55948b0d8718 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55948b0d8de8 <col:29> 'T2 *' lvalue Var 0x55948b0d8a88 's2' 'T2 *'
|           | `-CallExpr 0x55948b0d9220 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55948b0d8ff0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55948b0d9038 <col:63> 'P' lvalue ParmVar 0x55948b0adc58 'parser' 'P'
|           |   |-DeclRefExpr 0x55948b0d9058 <col:71> 'String' lvalue Var 0x55948b0d8428 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55948b0d9108 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55948b0d9098 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55948afbb9b8 0x55948afbb5d8 0x55948afbb208 0x55948afbae28 0x55948afbaa48 0x55948afba678
|           |   | `-DeclRefExpr 0x55948b0d9078 <col:77> 'T1 *' lvalue Var 0x55948b0d8718 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55948b0d91c8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55948b0d9158 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55948afbb9b8 0x55948afbb5d8 0x55948afbb208 0x55948afbae28 0x55948afbaa48 0x55948afba678
|           |   | `-DeclRefExpr 0x55948b0d9138 <col:82> 'T2 *' lvalue Var 0x55948b0d8a88 's2' 'T2 *'
|           |   `-UnaryOperator 0x55948b0d9208 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55948b0d91f8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55948b0d9288 <col:94> 'Args::Slot *' lvalue Var 0x55948b0d8398 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55948b0ae378 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55948b0ae008 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55948b0ae2d8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55948b0ae0c0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0ae140 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55948b0ae1b8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55948b0db548 <col:67, line:780:5>
|     |-DeclStmt 0x55948b0db0c8 <line:777:9, col:26>
|     | `-VarDecl 0x55948b0db060 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55948b0db510 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55948b0db530 <line:778:13, col:58>
|       | `-VarDecl 0x55948b0db0f0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55948b0db2d0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55948b0db2a0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55948b0db288 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55948b0db268 <col:26, col:58> 'String' (CXXTemporary 0x55948b0db268)
|       |           `-CXXMemberCallExpr 0x55948b0db1f8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55948b0db168 <col:26> '<bound member function type>' ->find 0x55948b0cce28
|       |             | `-CXXThisExpr 0x55948b0db158 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55948b0db230 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55948b0db198 <col:31> 'const char *' lvalue ParmVar 0x55948b0ae0c0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55948b0db248 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55948b0db1b8 <col:40> 'int' lvalue ParmVar 0x55948b0ae140 'flags' 'int'
|       |             `-DeclRefExpr 0x55948b0db1d8 <col:47> 'Args::Slot *' lvalue Var 0x55948b0db060 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55948b0db388 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55948b0db370 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55948b0db350 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55948b0db320 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55948adc7888
|       |       `-ImplicitCastExpr 0x55948b0db308 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55948b0db2e8 <col:20> 'String' lvalue Var 0x55948b0db0f0 'str' 'String'
|       `-CallExpr 0x55948b0db4e0 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55948b0db3b0 <col:13> '<bound member function type>' ->postparse 0x55948b0cd038
|         | `-CXXThisExpr 0x55948b0db3a0 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55948b0db490 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55948b0db400 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55948b0db3e0 <col:23> 'P' lvalue ParmVar 0x55948b0ae1b8 'parser' 'P'
|         | |-DeclRefExpr 0x55948b0db448 <col:36> 'String' lvalue Var 0x55948b0db0f0 'str' 'String'
|         | `-UnaryOperator 0x55948b0db478 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55948b0db468 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55948b0db4c0 <col:49> 'Args::Slot *' lvalue Var 0x55948b0db060 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55948b0ae718 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55948b0ae3e8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55948b0ae678 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55948b0ae4a0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0ae520 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55948b0ae598 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55948b0dbeb8 <col:71, line:792:5>
|     |-DeclStmt 0x55948b0db5e0 <line:784:9, col:26>
|     | `-VarDecl 0x55948b0db578 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55948b0db6b0 <line:785:9, col:29>
|     | `-VarDecl 0x55948b0db610 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55948b0db698 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55948b0db678 <col:28> 'int' 1
|     |-WhileStmt 0x55948b0dbd68 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55948b0dbd88 <line:786:16, col:61>
|     | | `-VarDecl 0x55948b0db6d8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55948b0db8b8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55948b0db888 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55948b0db870 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55948b0db850 <col:29, col:61> 'String' (CXXTemporary 0x55948b0db850)
|     | |           `-CXXMemberCallExpr 0x55948b0db7e0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55948b0db750 <col:29> '<bound member function type>' ->find 0x55948b0cce28
|     | |             | `-CXXThisExpr 0x55948b0db740 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55948b0db818 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55948b0db780 <col:34> 'const char *' lvalue ParmVar 0x55948b0ae4a0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55948b0db830 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55948b0db7a0 <col:43> 'int' lvalue ParmVar 0x55948b0ae520 'flags' 'int'
|     | |             `-DeclRefExpr 0x55948b0db7c0 <col:50> 'Args::Slot *' lvalue Var 0x55948b0db578 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55948b0db970 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55948b0db958 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55948b0db938 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55948b0db908 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55948adc7888
|     | |       `-ImplicitCastExpr 0x55948b0db8f0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55948b0db8d0 <col:23> 'String' lvalue Var 0x55948b0db6d8 'str' 'String'
|     | `-CompoundStmt 0x55948b0dbd40 <col:64, line:790:9>
|     |   |-CallExpr 0x55948b0dbac8 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55948b0db998 <col:13> '<bound member function type>' ->postparse 0x55948b0cd038
|     |   | | `-CXXThisExpr 0x55948b0db988 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55948b0dba78 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55948b0db9e8 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55948b0db9c8 <col:23> 'P' lvalue ParmVar 0x55948b0ae598 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55948b0dba30 <col:36> 'String' lvalue Var 0x55948b0db6d8 'str' 'String'
|     |   | | `-UnaryOperator 0x55948b0dba60 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55948b0dba50 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55948b0dbaa8 <col:49> 'Args::Slot *' lvalue Var 0x55948b0db578 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55948b0dbc60 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55948b0dbaf8 <col:13> 'int' lvalue Var 0x55948b0db610 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55948b0dbc48 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55948b0dbc28 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55948b0dbb90 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55948b0dbb70 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55948b0dbb58 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55948b0dbb18 <col:28> 'int' lvalue Var 0x55948b0db610 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55948b0dbb38 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55948b0dbc10 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55948b0dbbe0 <col:49> 'bool' lvalue ->_read_status 0x55948b096030
|     |   |         `-ImplicitCastExpr 0x55948b0dbbc0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55948b0dbbb0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55948b0dbd10 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55948b0dbc80 <col:13> 'int' lvalue ParmVar 0x55948b0ae520 'flags' 'int'
|     |     `-UnaryOperator 0x55948b0dbcf8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55948b0dbce0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55948b0dbcc0 <col:23> 'const int' lvalue Var 0x55948b09d578 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55948b0dbe98 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55948b0dbdd0 <col:9> 'bool' lvalue ->_read_status 0x55948b096030
|       | `-ImplicitCastExpr 0x55948b0dbdb0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55948b0dbda0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55948b0dbe78 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55948b0dbe58 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55948b0dbe40 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55948b0dbe00 <col:25> 'int' lvalue Var 0x55948b0db610 'read_status' 'int'
|           `-IntegerLiteral 0x55948b0dbe20 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55948b0aebf8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55948b0ae788 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55948b0ae808 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55948b0aeb58 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55948b0ae8c8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0ae948 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55948b0ae9c0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55948b0aea68 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55948b0dce50 <col:84, line:805:5>
|     |-DeclStmt 0x55948b0dbf60 <line:796:9, col:26>
|     | `-VarDecl 0x55948b0dbef8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55948b0dc030 <line:797:9, col:29>
|     | `-VarDecl 0x55948b0dbf90 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55948b0dc018 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55948b0dbff8 <col:28> 'int' 1
|     |-DeclStmt 0x55948b0dc370 <line:798:9, col:71>
|     | `-VarDecl 0x55948b0dc088 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55948b0dc340 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55948b0dc2b0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55948b0dc2f8 <col:55> 'T' lvalue ParmVar 0x55948b0aea68 'variable' 'T &'
|     |     `-UnaryOperator 0x55948b0dc328 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55948b0dc318 <col:66> 'Args *' this
|     |-WhileStmt 0x55948b0dcd00 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55948b0dcd20 <line:799:16, col:61>
|     | | `-VarDecl 0x55948b0dc398 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55948b0dc578 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55948b0dc548 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55948b0dc530 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55948b0dc510 <col:29, col:61> 'String' (CXXTemporary 0x55948b0dc510)
|     | |           `-CXXMemberCallExpr 0x55948b0dc4a0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55948b0dc410 <col:29> '<bound member function type>' ->find 0x55948b0cce28
|     | |             | `-CXXThisExpr 0x55948b0dc400 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55948b0dc4d8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55948b0dc440 <col:34> 'const char *' lvalue ParmVar 0x55948b0ae8c8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55948b0dc4f0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55948b0dc460 <col:43> 'int' lvalue ParmVar 0x55948b0ae948 'flags' 'int'
|     | |             `-DeclRefExpr 0x55948b0dc480 <col:50> 'Args::Slot *' lvalue Var 0x55948b0dbef8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55948b0dc630 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55948b0dc618 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55948b0dc5f8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55948b0dc5c8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55948adc7888
|     | |       `-ImplicitCastExpr 0x55948b0dc5b0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55948b0dc590 <col:23> 'String' lvalue Var 0x55948b0dc398 'str' 'String'
|     | `-CompoundStmt 0x55948b0dccd8 <col:64, line:803:9>
|     |   |-CallExpr 0x55948b0dca60 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55948b0dc658 <col:13> '<bound member function type>' ->postparse 0x55948b0cd038
|     |   | | `-CXXThisExpr 0x55948b0dc648 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55948b0dca20 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55948b0dc688 <col:23> 'T *' lvalue Var 0x55948b0dc088 's' 'T *'
|     |   | | `-CallExpr 0x55948b0dc9e0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55948b0dc870 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55948b0dc8b8 <col:56> 'P' lvalue ParmVar 0x55948b0ae9c0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55948b0dc8d8 <col:64> 'String' lvalue Var 0x55948b0dc398 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55948b0dc988 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55948b0dc918 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55948afbb9b8 0x55948afbb5d8 0x55948afbb208 0x55948afbae28 0x55948afbaa48 0x55948afba678
|     |   | |   | `-DeclRefExpr 0x55948b0dc8f8 <col:70> 'T *' lvalue Var 0x55948b0dc088 's' 'T *'
|     |   | |   `-UnaryOperator 0x55948b0dc9c8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55948b0dc9b8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55948b0dca40 <col:81> 'Args::Slot *' lvalue Var 0x55948b0dbef8 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55948b0dcbf8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55948b0dca90 <col:13> 'int' lvalue Var 0x55948b0dbf90 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55948b0dcbe0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55948b0dcbc0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55948b0dcb28 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55948b0dcb08 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55948b0dcaf0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55948b0dcab0 <col:28> 'int' lvalue Var 0x55948b0dbf90 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55948b0dcad0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55948b0dcba8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55948b0dcb78 <col:49> 'bool' lvalue ->_read_status 0x55948b096030
|     |   |         `-ImplicitCastExpr 0x55948b0dcb58 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55948b0dcb48 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55948b0dcca8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55948b0dcc18 <col:13> 'int' lvalue ParmVar 0x55948b0ae948 'flags' 'int'
|     |     `-UnaryOperator 0x55948b0dcc90 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55948b0dcc78 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55948b0dcc58 <col:23> 'const int' lvalue Var 0x55948b09d578 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55948b0dce30 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55948b0dcd68 <col:9> 'bool' lvalue ->_read_status 0x55948b096030
|       | `-ImplicitCastExpr 0x55948b0dcd48 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55948b0dcd38 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55948b0dce10 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55948b0dcdf0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55948b0dcdd8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55948b0dcd98 <col:25> 'int' lvalue Var 0x55948b0dbf90 'read_status' 'int'
|           `-IntegerLiteral 0x55948b0dcdb8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55948b0b9bf8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55948b0aec70 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55948b0aece8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55948b0b9b58 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55948b0aeda8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55948b0aee28 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55948b0aeea0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55948b0aeff0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55948b0ddc58 <col:87, line:821:5>
|     |-DeclStmt 0x55948b0dcf00 <line:809:9, col:26>
|     | `-VarDecl 0x55948b0dce98 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55948b0dcfd0 <line:810:9, col:29>
|     | `-VarDecl 0x55948b0dcf30 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55948b0dcfb8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55948b0dcf98 <col:28> 'int' 1
|     |-DeclStmt 0x55948b0dd218 <line:811:9, col:38>
|     | `-VarDecl 0x55948b0dd100 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55948b0dd1f0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55948b0dd178 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55948b0dd1d0 <col:29> 'Vector<T>' lvalue ParmVar 0x55948b0aeff0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55948b0ddb08 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55948b0ddb28 <line:812:16, col:61>
|     | | `-VarDecl 0x55948b0dd240 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55948b0dd420 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55948b0dd3f0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55948b0dd3d8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55948b0dd3b8 <col:29, col:61> 'String' (CXXTemporary 0x55948b0dd3b8)
|     | |           `-CXXMemberCallExpr 0x55948b0dd348 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55948b0dd2b8 <col:29> '<bound member function type>' ->find 0x55948b0cce28
|     | |             | `-CXXThisExpr 0x55948b0dd2a8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55948b0dd380 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55948b0dd2e8 <col:34> 'const char *' lvalue ParmVar 0x55948b0aeda8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55948b0dd398 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55948b0dd308 <col:43> 'int' lvalue ParmVar 0x55948b0aee28 'flags' 'int'
|     | |             `-DeclRefExpr 0x55948b0dd328 <col:50> 'Args::Slot *' lvalue Var 0x55948b0dce98 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55948b0dd4d8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55948b0dd4c0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55948b0dd4a0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55948b0dd470 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55948adc7888
|     | |       `-ImplicitCastExpr 0x55948b0dd458 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55948b0dd438 <col:23> 'String' lvalue Var 0x55948b0dd240 'str' 'String'
|     | `-CompoundStmt 0x55948b0ddad0 <col:64, line:819:9>
|     |   |-DeclStmt 0x55948b0dd598 <line:813:13, col:23>
|     |   | `-VarDecl 0x55948b0dd500 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55948b0dd578 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55948b0dd718 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55948b0dd5c0 <col:13> '<bound member function type>' ->postparse 0x55948b0cd038
|     |   | | `-CXXThisExpr 0x55948b0dd5b0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55948b0dd6c0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55948b0dd610 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55948b0dd5f0 <col:23> 'P' lvalue ParmVar 0x55948b0aeea0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55948b0dd658 <col:36> 'String' lvalue Var 0x55948b0dd240 'str' 'String'
|     |   | | |-DeclRefExpr 0x55948b0dd678 <col:41> 'T' lvalue Var 0x55948b0dd500 'sx' 'T'
|     |   | | `-UnaryOperator 0x55948b0dd6a8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55948b0dd698 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55948b0dd6f8 <col:53> 'Args::Slot *' lvalue Var 0x55948b0dce98 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55948b0dd870 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55948b0dd7a8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55948b0dd778 <col:17> 'bool' lvalue ->_read_status 0x55948b096030
|     |   | |   `-ImplicitCastExpr 0x55948b0dd758 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55948b0dd748 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55948b0dd848 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55948b0dd7e0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55948b0dd7c0 <col:17> 'Vector<T> *' lvalue Var 0x55948b0dd100 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55948b0dd828 <col:30> 'T' lvalue Var 0x55948b0dd500 'sx' 'T'
|     |   |-BinaryOperator 0x55948b0dd9f0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55948b0dd888 <col:13> 'int' lvalue Var 0x55948b0dcf30 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55948b0dd9d8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55948b0dd9b8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55948b0dd920 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55948b0dd900 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55948b0dd8e8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55948b0dd8a8 <col:28> 'int' lvalue Var 0x55948b0dcf30 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55948b0dd8c8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55948b0dd9a0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55948b0dd970 <col:49> 'bool' lvalue ->_read_status 0x55948b096030
|     |   |         `-ImplicitCastExpr 0x55948b0dd950 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55948b0dd940 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55948b0ddaa0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55948b0dda10 <col:13> 'int' lvalue ParmVar 0x55948b0aee28 'flags' 'int'
|     |     `-UnaryOperator 0x55948b0dda88 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55948b0dda70 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55948b0dda50 <col:23> 'const int' lvalue Var 0x55948b09d578 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55948b0ddc38 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55948b0ddb70 <col:9> 'bool' lvalue ->_read_status 0x55948b096030
|       | `-ImplicitCastExpr 0x55948b0ddb50 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55948b0ddb40 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55948b0ddc18 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55948b0ddbf8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55948b0ddbe0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55948b0ddba0 <col:25> 'int' lvalue Var 0x55948b0dcf30 'read_status' 'int'
|           `-IntegerLiteral 0x55948b0ddbc0 <col:40> 'int' 1
|-AccessSpecDecl 0x55948b0b9c70 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55948b0b9c98 prev 0x55948b09b840 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55948b0b9d90 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55948b0b9e80 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55948b0ddc90 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55948b0b9f70 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55948b0ddca0 <col:25, line:830:9>
| |-CXXMethodDecl 0x55948b0ba070 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55948b0ba120 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55948b0ba1c8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55948b0ba1c8
| | `-ParmVarDecl 0x55948b0ba2d8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55948b0baa98 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55948b0baa98
|   `-ParmVarDecl 0x55948b0baba8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55948b0ba348 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55948b0ba4a8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55948b0ba6a0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55948b0ba550 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55948b0ba5c8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55948b0dde80 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55948b0ba958 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55948b0ddcf0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55948b0ddcb0 <col:20> 'void *' lvalue ParmVar 0x55948b0ba550 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55948b0ba9c0 '_slot' 'char *'
| | | `-CXXNewExpr 0x55948b0ddd78 <col:32, col:45> 'char *' array Function 0x55948abea2d8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55948b0ddd60 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55948b0ddd30 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55948b0ba5c8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55948b0baa20 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55948b0dde40 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55948b0dde00 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55948b0ba5c8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55948b0ddf00 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55948b0ba7a0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55948b0b9f70 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55948b0ddf88 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55948b0ddf68 <line:840:13, col:22> 'void' array Function 0x55948abea638 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55948b0ddf50 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55948b0ddf20 <col:22> 'char *' lvalue ->_slot 0x55948b0ba9c0
| |         `-CXXThisExpr 0x55948b0ddf10 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55948b0ba8a0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55948b0ba070 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55948b0de178 <col:22, line:844:9>
| |   `-CallExpr 0x55948b0de0e0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55948b0de0c8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55948b0de0a8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55948acf62d8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55948b0de118 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55948b0ddff8 <col:20> 'void *' lvalue ->_ptr 0x55948b0ba958
| |     |   `-CXXThisExpr 0x55948b0ddfe8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55948b0de148 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55948b0de130 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55948b0de038 <col:26> 'char *' lvalue ->_slot 0x55948b0ba9c0
| |     |     `-CXXThisExpr 0x55948b0de028 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55948b0de160 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55948b0de078 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55948b0baa20
| |         `-CXXThisExpr 0x55948b0de068 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55948b0ba958 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55948b0ba9c0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55948b0baa20 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55948b0bac18 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55948b0bac18
| | `-ParmVarDecl 0x55948b0bad28 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55948b0badc8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55948b0badc8
|   `-ParmVarDecl 0x55948b0baed8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55948b0bb078 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55948b0baf48 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55948b0bafe8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55948b0bb310 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55948b0bb508 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55948b0bb3d8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55948b0bb688 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55948b0de1b0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55948b0de190 <col:20> 'T *' lvalue ParmVar 0x55948b0bb3d8 'ptr' 'T *'
|   | `-CompoundStmt 0x55948b0de200 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55948b0bb5d8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55948b0ba070 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55948b0de3b0 <col:22, line:857:9>
|   |   `-CallExpr 0x55948b0de380 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55948b0de210 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55948adaea08 0x55948ad58d38
|   |     |-CXXOperatorCallExpr 0x55948b0de310 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55948b0de2a0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55948afbb9b8 0x55948afbb5d8 0x55948afbb208 0x55948afbae28 0x55948afbaa48 0x55948afba678
|   |     | `-MemberExpr 0x55948b0de270 <col:29> 'T *' lvalue ->_ptr 0x55948b0bb688
|   |     |   `-CXXThisExpr 0x55948b0de260 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55948b0de350 <col:35> 'T' lvalue ->_slot 0x55948b0bb6e8
|   |       `-CXXThisExpr 0x55948b0de340 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55948b0bb688 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55948b0bb6e8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55948b0bb750 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55948b0bb850 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55948b0bb8a0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55948b0bb830 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55948b0bb810 <col:31> 'int' 48
|-FieldDecl 0x55948b0bb8c8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55948b0bb928 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55948b0bb988 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55948b0bbac0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55948b0cc6d0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55948b0cc730 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55948b0cc7e0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55948b0cca08 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55948b0cc910 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55948b0ccb58 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55948b0ccac8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55948b0cce28 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55948b0ccc18 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55948b0ccc98 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55948b0ccd40 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55948b0cd038 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55948b0ccef0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55948b0ccf68 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55948b0cd108 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55948b0cd258 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55948b0cd1c0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55948b0cd5e8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55948b0cd318 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55948b0cd398 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55948b0cd440 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55948b0cd4f8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55948b0cd810 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55948b0cd6c0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55948b0cd738 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55948b0cdb28 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55948b0cd8c0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55948b0cda88 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55948b0cd998 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55948adb7730 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55948adb7848 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55948adb78d8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55948adb79a8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55948adb7a90 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55948adb7ca8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55948adb7b50 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55948adb7e58 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55948adb7d60 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55948adb7fa0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55948adb7f10 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55948adb80e8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55948adb8058 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55948adb8230 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55948adb81a0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55948adb82f8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55948adb8440 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55948adb83b0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55948adb8508 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55948adb8650 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55948adb85c0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55948adb87c8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55948adb8708 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55948adb8910 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55948adb8880 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55948adb89d8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55948adb8b98 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55948adb8a88 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55948adb8b00 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55948adb8de8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55948adb8c58 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55948adb8cd0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55948adb8e98 <col:86> "" ""
|-CXXMethodDecl 0x55948adb9108 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55948adb8f78 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55948adb8ff0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55948adb92b8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55948adb91c8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55948adb9468 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55948adb9370 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55948adb9738 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55948adb9520 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55948adb9598 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55948adb9610 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55948adb9a18 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55948adb9800 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55948adb9878 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55948adb98f0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55948adb9ad0 <col:115> "" ""
|-AccessSpecDecl 0x55948adb9b40 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55948adb9b78 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55948adbb090 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55948adbb090
| `-ParmVarDecl 0x55948adbb198 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55948adbb238 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55948adbb238
| `-ParmVarDecl 0x55948adbb348 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55948adf0978 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55948afe2770 <col:7>
|-CXXConstructorDecl 0x55948adf0a50 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55948adf0a50
| `-ParmVarDecl 0x55948adf0b68 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55948adf0bd8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55948adf0bd8
| `-ParmVarDecl 0x55948adf0ce8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55948afe5170 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55948afd1318 prev 0x55948afc6520 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55948afd1410 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55948afd1500 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55948afd1628 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55948afd17a8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55948afd1928 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55948afd1aa8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55948afe28d8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55948afe3148 <col:11>
|-CXXDestructorDecl 0x55948afe29b0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55948afe2ae8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55948afe2ae8
| `-ParmVarDecl 0x55948afe2bf8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55948afe2c98 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55948afe2c98
| `-ParmVarDecl 0x55948afe2da8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55948afe5b68 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55948afe5c78 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55948afe5ef8 <col:11>
|   `-ReturnStmt 0x55948afe5ee8 <col:11>
|     `-UnaryOperator 0x55948afe5ed0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55948afe5ec0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55948afe5ce8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55948afe5ce8
  `-ParmVarDecl 0x55948afe5df8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55948afd1b10 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55948afd1c28 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55948afd1cc8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55948afd1d30 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55948afd1d98 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55948afd1e00 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55948afd1e60 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55948afd1f20 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55948afd1f80 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55948afd1fe0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55948afe27e8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55948afd1cc8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55948afe3158 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55948afe31b0 <col:12>
|-CXXConstructorDecl 0x55948afe2e18 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55948afe2e18
| `-ParmVarDecl 0x55948afe2f28 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55948afe2fc8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55948afe2fc8
| `-ParmVarDecl 0x55948afe30d8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55948afe5250 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55948afbfc30 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55948afbfd48 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55948afbfdd8 <col:16, col:22> col:16 public
|-EnumDecl 0x55948afbfe00 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55948afbff00 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55948afbffe0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948afbfee0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55948afbfec0 <col:21> 'int' 28
| `-EnumConstantDecl 0x55948afbff90 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55948afbfff8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55948afbff70 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55948afbff50 <col:22> 'int' 64
|-CXXMethodDecl 0x55948afc0338 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55948afc0020 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55948afc00a0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55948afc0118 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55948afc0190 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55948afc03f8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55948afc05f8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55948afc0470 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55948afc04e8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55948afc06a8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55948afc0808 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55948afc0718 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55948afc08b0 <col:72> warn_unused_result ""
|-TypedefDecl 0x55948afc0c10 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55948afc0ba0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55948afc0b40 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55948afc0b00 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55948aa964e0 'void'
|       |-PointerType 0x55948ad3ffd0 'unsigned char *'
|       | `-BuiltinType 0x55948aa965e0 'unsigned char'
|       |-TypedefType 0x55948ab3c380 'size_t' sugar
|       | |-Typedef 0x55948ab06be0 'size_t'
|       | `-BuiltinType 0x55948aa96640 'unsigned long'
|       `-PointerType 0x55948aa96ce0 'void *'
|         `-BuiltinType 0x55948aa964e0 'void'
|-CXXMethodDecl 0x55948afc1088 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55948afc0c80 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55948afc0cf8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55948afc0d90 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55948afc0e10 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55948afdb780 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55948afdb768 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55948afdb730 <col:58> 'int' 0
| |-ParmVarDecl 0x55948afc0e90 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55948afdb7a8 <col:76> 'int' 0
| |-ParmVarDecl 0x55948afc0f10 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55948afdb7c8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55948afc1158 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55948afc11d8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55948afc1298 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55948afc1338 <col:20>
| `-OptimizeNoneAttr 0x55948afc1390 <col:30>
|-CXXMethodDecl 0x55948afc1408 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55948afc14a8 <col:20>
| `-OptimizeNoneAttr 0x55948afc1500 <col:30>
|-CXXMethodDecl 0x55948afc1578 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55948afc1618 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55948afc16c8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55948afc1768 <col:20>
| |-OptimizeNoneAttr 0x55948afc17c0 <col:30>
| `-WarnUnusedResultAttr 0x55948afc17e8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55948afc1840 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55948afc18e0 <col:20>
| `-OptimizeNoneAttr 0x55948afc1938 <col:30>
|-CXXMethodDecl 0x55948afc1988 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55948afc1a28 <col:20>
| `-OptimizeNoneAttr 0x55948afc1a80 <col:30>
|-CXXMethodDecl 0x55948afc1ac8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55948afc1b68 <col:20>
| `-OptimizeNoneAttr 0x55948afc1bc0 <col:30>
|-CXXMethodDecl 0x55948afc1c08 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55948afc1cc8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55948afc1d90 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55948afc1e58 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55948afc1f18 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55948afc2038 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55948afdb890 <col:54, line:99:5>
|   `-ReturnStmt 0x55948afdb880 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55948afdb868 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55948afdb838 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55948afd2318
|         `-CXXThisExpr 0x55948afdb828 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55948afc21d8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55948afc20e8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55948afdb940 <col:67, line:103:5>
|   `-BinaryOperator 0x55948afdb920 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55948afdb8b8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55948afd2318
|     | `-CXXThisExpr 0x55948afdb8a8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55948afdb908 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55948afdb8e8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55948afc20e8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55948afc22d0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55948afdb9c0 <col:33, line:107:5>
|   `-ReturnStmt 0x55948afdb9b0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55948afdb998 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55948afdb968 <col:16> 'void *' lvalue ->_destructor_argument 0x55948afd2380
|         `-CXXThisExpr 0x55948afdb958 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55948afc2390 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55948afdbff0 <col:25, line:113:5>
|   |-ParenExpr 0x55948afdbd38 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55948afdbd08 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55948afdba78 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55948afdba50 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55948afdba18 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55948afdb9e8 <col:24> '<bound member function type>' ->shared 0x55948afc1408
|   |   |       `-ImplicitCastExpr 0x55948afdba38 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55948afdb9d8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55948afdbad8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55948afdbab8 <col:42> 'int' 0
|   |   `-CallExpr 0x55948afdbc68 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55948afdbc50 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55948afdbc30 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55948ab330e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55948afdbca8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55948afdbb48 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55948afdbcc0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55948afdbb70 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55948afdbcd8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55948afdbba8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55948afdbcf0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55948afdbc18 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55948afdbc00 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55948afdbbc8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55948afdbf38 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55948afdbd68 <col:2> 'unsigned char *' lvalue ->_head 0x55948afd2120
|   | | `-CXXThisExpr 0x55948afdbd58 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55948afdbf20 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55948afdbf00 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55948afdbda8 <col:10> 'unsigned char *' lvalue ->_data 0x55948afd2188
|   |     | `-CXXThisExpr 0x55948afdbd98 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55948afdbee8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55948afdbec8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55948afdbde8 <col:18> 'unsigned char *' lvalue ->_tail 0x55948afd21f0
|   |         | `-CXXThisExpr 0x55948afdbdd8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55948afdbeb0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55948afdbe90 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55948afdbe28 <col:26> 'unsigned char *' lvalue ->_end 0x55948afd2258
|   |             | `-CXXThisExpr 0x55948afdbe18 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55948afdbe78 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55948afdbe58 <col:33> 'int' 0
|   `-BinaryOperator 0x55948afdbfd0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55948afdbf68 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55948afd2318
|     | `-CXXThisExpr 0x55948afdbf58 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55948afdbfb8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55948afdbf98 <col:16> 'int' 0
|-CXXMethodDecl 0x55948afc24d0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55948afc2440 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55948afc2578 <col:20>
| |-OptimizeNoneAttr 0x55948afc25d0 <col:30>
| `-WarnUnusedResultAttr 0x55948afc25f8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55948afc26c8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55948afc2638 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55948afc2770 <col:20>
| |-OptimizeNoneAttr 0x55948afc27c8 <col:30>
| `-WarnUnusedResultAttr 0x55948afc27f0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55948afc2928 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55948afc2830 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55948afc29d0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55948afc2ad0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55948afc2a40 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55948afc2b78 <col:20>
| `-OptimizeNoneAttr 0x55948afc2bd0 <col:30>
|-CXXMethodDecl 0x55948afc2c98 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55948afc2c08 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55948afc2d40 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55948afc2e40 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55948afc2db0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55948afc2ee8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55948afc2fe8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55948afc2f58 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55948afc3090 <col:20>
| `-OptimizeNoneAttr 0x55948afc30e8 <col:30>
|-CXXMethodDecl 0x55948afc3278 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55948afc3128 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55948afc31a0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55948afdb7e8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55948afc3328 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55948afc3528 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55948afc33a0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55948afc3418 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55948afc3738 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55948afc35e8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55948afc3660 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55948afc3948 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55948afc37f8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55948afc3878 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55948afdb7f8 <col:39> 'int' 0
|-CXXMethodDecl 0x55948afc3a18 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55948afc3ae0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55948afc3ba8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55948afc3c68 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55948afc3d30 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55948afc3e78 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55948afc3de8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55948afc4048 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55948afc3f38 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55948afc3fb0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55948afc4118 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55948afc41d8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55948afc4278 <col:20>
| `-OptimizeNoneAttr 0x55948afc42d0 <col:30>
|-CXXMethodDecl 0x55948afc4320 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55948afc43c0 <col:20>
| `-OptimizeNoneAttr 0x55948afc4418 <col:30>
|-CXXMethodDecl 0x55948afc4468 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55948afc4528 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55948afc45f0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55948afc4690 <col:20>
| `-OptimizeNoneAttr 0x55948afc46e8 <col:30>
|-CXXMethodDecl 0x55948afc4838 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55948afc4728 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55948afc47a0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55948afc4988 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55948afc48f8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55948afc4a60 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55948afc4b20 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55948afc4bc0 <col:20>
| `-OptimizeNoneAttr 0x55948afc4c18 <col:30>
|-CXXMethodDecl 0x55948afc4c68 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55948afc4d08 <col:20>
| `-OptimizeNoneAttr 0x55948afc4d60 <col:30>
|-CXXMethodDecl 0x55948afc4db0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55948afc4e78 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55948afc4f18 <col:20>
| `-OptimizeNoneAttr 0x55948afc4f70 <col:30>
|-CXXMethodDecl 0x55948afc4fb8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55948afc50d8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55948afc5248 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55948afc5188 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55948afc5338 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55948afc53d8 <col:20>
| `-OptimizeNoneAttr 0x55948afc5430 <col:30>
|-CXXMethodDecl 0x55948afc5480 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55948afc5540 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55948afc5778 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55948afc55f0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55948afc5668 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55948afc5828 <col:20>
| `-OptimizeNoneAttr 0x55948afc5880 <col:30>
|-CXXMethodDecl 0x55948afc5928 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55948afc59c8 <col:20>
| `-OptimizeNoneAttr 0x55948afc5a20 <col:30>
|-CXXMethodDecl 0x55948afc5a70 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55948afc5b10 <col:20>
| `-OptimizeNoneAttr 0x55948afc5b68 <col:30>
|-CXXMethodDecl 0x55948afc5bb0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55948afc5c50 <col:20>
| `-OptimizeNoneAttr 0x55948afc5ca8 <col:30>
|-CXXMethodDecl 0x55948afc5da8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55948afc5ce0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55948afc5e50 <col:20>
| `-OptimizeNoneAttr 0x55948afc5ea8 <col:30>
|-CXXMethodDecl 0x55948afc6068 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55948afc5ee0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55948afc5f58 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55948afc6118 <col:20>
| `-OptimizeNoneAttr 0x55948afc6170 <col:30>
|-CXXMethodDecl 0x55948afc6218 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55948afc6338 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55948afc6458 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55948afc64f8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55948afc6520 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55948afc6648 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55948afc66e8 <col:20>
| `-OptimizeNoneAttr 0x55948afc6740 <col:30>
|-CXXMethodDecl 0x55948afc67e8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55948afc6888 <col:20>
| `-OptimizeNoneAttr 0x55948afc68e0 <col:30>
|-AccessSpecDecl 0x55948afc6908 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55948afc6930 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55948afc6a30 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55948afc6a80 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55948afc6a10 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55948afc69f0 <col:14> 'int' 48
|-CXXMethodDecl 0x55948afc6ae8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55948afc6b88 <col:20>
| `-OptimizeNoneAttr 0x55948afc6be0 <col:30>
|-CXXMethodDecl 0x55948afc6c58 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55948afc6cf8 <col:20>
| `-OptimizeNoneAttr 0x55948afc6d50 <col:30>
|-CXXMethodDecl 0x55948afc6e18 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55948afc6d88 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55948afc6fb8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55948afc7158 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55948afc7068 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55948afc7200 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55948afc7300 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55948afc76b0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948afc72e0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55948afc72c0 <col:9> 'int' 0
| |-EnumConstantDecl 0x55948afc7390 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55948afc76c8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948afc7370 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55948afc7350 <col:14> 'int' 1
| |-EnumConstantDecl 0x55948afc7420 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55948afc76e0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948afc7400 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55948afc73e0 <col:14> 'int' 2
| |-EnumConstantDecl 0x55948afc74b0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55948afc76f8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948afc7490 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55948afc7470 <col:14> 'int' 3
| |-EnumConstantDecl 0x55948afc7540 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55948afc7710 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948afc7520 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55948afc7500 <col:13> 'int' 4
| |-EnumConstantDecl 0x55948afc75d0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55948afc7728 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948afc75b0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55948afc7590 <col:13> 'int' 5
| `-EnumConstantDecl 0x55948afc7660 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55948afc7740 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55948afc7640 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55948afc7620 <col:14> 'int' 6
|-CXXMethodDecl 0x55948afc77a8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55948afc7848 <col:20>
| `-OptimizeNoneAttr 0x55948afc78a0 <col:30>
|-CXXMethodDecl 0x55948afc7998 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55948afc78d8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55948afc7a40 <col:20>
| `-OptimizeNoneAttr 0x55948afc7a98 <col:30>
|-CXXMethodDecl 0x55948afc7b08 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55948afc7c30 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55948afc7da8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55948afc7ce0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55948afc7e70 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55948afc7f38 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55948afc8078 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55948afc7fe8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55948afc8120 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55948afc8220 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55948afc8420 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948afc8200 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55948afc81e0 <col:23> 'int' 0
| |-EnumConstantDecl 0x55948afc82b0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55948afc8438 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948afc8290 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55948afc8270 <col:45> 'int' 4
| |-EnumConstantDecl 0x55948afc8340 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55948afc8450 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948afc8320 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55948afc8300 <col:24> 'int' 0
| `-EnumConstantDecl 0x55948afc83d0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55948afc8468 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55948afc83b0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55948afc8390 <col:47> 'int' 16
|-CXXMethodDecl 0x55948afc84c8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55948afc8638 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55948afc8578 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55948afc86e0 <col:20>
| `-OptimizeNoneAttr 0x55948afc8738 <col:30>
|-CXXMethodDecl 0x55948afc8788 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55948afdc110 <col:18, col:36>
|   `-ReturnStmt 0x55948afdc100 <col:20, col:33>
|     `-ImplicitCastExpr 0x55948afdc0e8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55948afdc0c8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55948afdc098 <col:27> '<bound member function type>' ->xanno 0x55948afc67e8
|           `-CXXThisExpr 0x55948afdc088 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55948afc8880 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55948afdc220 <col:30, col:48>
|   `-ReturnStmt 0x55948afdc210 <col:32, col:45>
|     `-ImplicitCastExpr 0x55948afdc1f8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55948afdc1d8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55948afdc1a8 <col:39> '<bound member function type>' ->xanno 0x55948afc6648
|           `-CXXThisExpr 0x55948afdc198 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55948afc8968 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55948afdc3b8 <col:24, col:50>
|   `-ReturnStmt 0x55948afdc3a8 <col:26, col:47>
|     `-UnaryOperator 0x55948afdc390 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55948afdc370 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55948afdc358 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55948afdc308 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55948afd1628
|         |   `-CXXMemberCallExpr 0x55948afdc2e8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55948afdc2b8 <col:34> '<bound member function type>' ->xanno 0x55948afc67e8
|         |       `-CXXThisExpr 0x55948afdc2a8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55948afdc338 <col:46> 'int' 0
|-CXXMethodDecl 0x55948afc8a70 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55948afdc588 <col:36, col:62>
|   `-ReturnStmt 0x55948afdc578 <col:38, col:59>
|     `-UnaryOperator 0x55948afdc560 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55948afdc540 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55948afdc528 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55948afdc4a0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55948afd1628
|         |   `-CXXMemberCallExpr 0x55948afdc480 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55948afdc450 <col:46> '<bound member function type>' ->xanno 0x55948afc6648
|         |       `-CXXThisExpr 0x55948afdc440 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55948afdc4d0 <col:58> 'int' 0
|-CXXMethodDecl 0x55948afc8b88 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55948afdc720 <col:26, col:53>
|   `-ReturnStmt 0x55948afdc710 <col:28, col:50>
|     `-UnaryOperator 0x55948afdc6f8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55948afdc6d8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55948afdc6c0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55948afdc670 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55948afd1928
|         |   `-CXXMemberCallExpr 0x55948afdc650 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55948afdc620 <col:36> '<bound member function type>' ->xanno 0x55948afc67e8
|         |       `-CXXThisExpr 0x55948afdc610 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55948afdc6a0 <col:49> 'int' 0
|-CXXMethodDecl 0x55948afc8ca8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55948afdc8f8 <col:38, col:65>
|   `-ReturnStmt 0x55948afdc8e8 <col:40, col:62>
|     `-UnaryOperator 0x55948afdc8d0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55948afdc8b0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55948afdc898 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55948afdc808 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55948afd1928
|         |   `-CXXMemberCallExpr 0x55948afdc7e8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55948afdc7b8 <col:48> '<bound member function type>' ->xanno 0x55948afc6648
|         |       `-CXXThisExpr 0x55948afdc7a8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55948afdc838 <col:61> 'int' 0
|-CXXMethodDecl 0x55948afc8e58 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55948afc8d60 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55948afdcfc8 <col:34, line:463:5>
|   |-ParenExpr 0x55948afdce10 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55948afdcde0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55948afdca48 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55948afdca18 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55948afdc968 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55948afdc950 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55948afdc910 <col:23> 'int' lvalue ParmVar 0x55948afc8d60 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55948afdc930 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55948afdc9f8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55948afdc9c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55948afdc988 <col:33> 'int' lvalue ParmVar 0x55948afc8d60 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55948afdc9e0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55948afdc9a8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55948afc6a30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55948afdcaa8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55948afdca88 <col:56> 'int' 0
|   |   `-CallExpr 0x55948afdcd40 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55948afdcd28 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55948afdcd08 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55948ab330e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55948afdcd80 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55948afdcb98 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55948afdcd98 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55948afdcbc8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55948afdcdb0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55948afdcc00 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55948afdcdc8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55948afdccf0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55948afdccd8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55948afdcc98 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55948afdcfb8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55948afdcfa0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55948afdcf80 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55948afdcf50 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55948afdcf00 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55948afd1628
|         |   `-CXXMemberCallExpr 0x55948afdcee0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55948afdceb0 <col:9> '<bound member function type>' ->xanno 0x55948afc6648
|         |       `-CXXThisExpr 0x55948afdcea0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55948afdcf68 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55948afdcf30 <col:21> 'int' lvalue ParmVar 0x55948afc8d60 'i' 'int'
|-CXXMethodDecl 0x55948afc90a8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55948afc8f18 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55948afc8f90 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55948afdd658 <col:40, line:472:5>
|   |-ParenExpr 0x55948afdd470 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55948afdd440 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55948afdd120 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55948afdd0f0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55948afdd040 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55948afdd028 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55948afdcfe8 <col:23> 'int' lvalue ParmVar 0x55948afc8f18 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55948afdd008 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55948afdd0d0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55948afdd0a0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55948afdd060 <col:33> 'int' lvalue ParmVar 0x55948afc8f18 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55948afdd0b8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55948afdd080 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55948afc6a30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55948afdd180 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55948afdd160 <col:56> 'int' 0
|   |   `-CallExpr 0x55948afdd3a0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55948afdd388 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55948afdd368 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55948ab330e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55948afdd3e0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55948afdd1f0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55948afdd3f8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55948afdd220 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55948afdd410 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55948afdd258 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55948afdd428 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55948afdd350 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55948afdd338 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55948afdd2f8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55948afdd638 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55948afdd5e0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55948afdd5b0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55948afdd560 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55948afd1628
|     | |   `-CXXMemberCallExpr 0x55948afdd540 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55948afdd510 <col:2> '<bound member function type>' ->xanno 0x55948afc67e8
|     | |       `-CXXThisExpr 0x55948afdd500 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55948afdd5c8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55948afdd590 <col:14> 'int' lvalue ParmVar 0x55948afc8f18 'i' 'int'
|     `-ImplicitCastExpr 0x55948afdd620 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55948afdd600 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55948afc8f90 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55948afc9268 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55948afc9170 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55948afdddd8 <col:36, line:485:5>
|   |-ParenExpr 0x55948afddb40 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55948afddb10 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55948afdd7f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55948afdd7c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55948afdd6d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55948afdd6b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55948afdd678 <col:23> 'int' lvalue ParmVar 0x55948afc9170 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55948afdd698 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55948afdd7a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55948afdd788 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55948afdd6f0 <col:33> 'int' lvalue ParmVar 0x55948afc9170 'i' 'int'
|   |   |     `-BinaryOperator 0x55948afdd768 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55948afdd750 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55948afdd710 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55948afc6a30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55948afdd730 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55948afdd850 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55948afdd830 <col:60> 'int' 0
|   |   `-CallExpr 0x55948afdda70 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55948afdda58 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55948afdda38 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55948ab330e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55948afddab0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55948afdd8c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55948afddac8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55948afdd8f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55948afddae0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55948afdd930 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55948afddaf8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55948afdda20 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55948afdda08 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55948afdd9c8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55948afdddc8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55948afdddb0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55948afddd98 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55948afddd68 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55948afddd08 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55948afddcd8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55948afddc50 <col:61, col:70> 'char const[48]' lvalue ->c 0x55948afd1500
|             |   `-CXXMemberCallExpr 0x55948afddc30 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55948afddc00 <col:61> '<bound member function type>' ->xanno 0x55948afc6648
|             |       `-CXXThisExpr 0x55948afddbf0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55948afddcf0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55948afddc80 <col:74> 'int' lvalue ParmVar 0x55948afc9170 'i' 'int'
|-CXXMethodDecl 0x55948afc94b8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55948afc9328 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55948afc93a0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55948afde528 <col:42, line:500:5>
|   |-ParenExpr 0x55948afde2c0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55948afde290 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55948afddf70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55948afddf40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55948afdde50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55948afdde38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55948afdddf8 <col:23> 'int' lvalue ParmVar 0x55948afc9328 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55948afdde18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55948afddf20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55948afddf08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55948afdde70 <col:33> 'int' lvalue ParmVar 0x55948afc9328 'i' 'int'
|   |   |     `-BinaryOperator 0x55948afddee8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55948afdded0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55948afdde90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55948afc6a30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55948afddeb0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55948afddfd0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55948afddfb0 <col:60> 'int' 0
|   |   `-CallExpr 0x55948afde1f0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55948afde1d8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55948afde1b8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55948ab330e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55948afde230 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55948afde040 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55948afde248 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55948afde078 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55948afde260 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55948afde0b0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55948afde278 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55948afde1a0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55948afde188 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55948afde148 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55948afde508 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55948afde4b8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55948afde488 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55948afde430 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55948afde400 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55948afde3b0 <col:48, col:57> 'char [48]' lvalue ->c 0x55948afd1500
|     |     |   `-CXXMemberCallExpr 0x55948afde390 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55948afde360 <col:48> '<bound member function type>' ->xanno 0x55948afc67e8
|     |     |       `-CXXThisExpr 0x55948afde350 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55948afde418 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55948afde3e0 <col:61> 'int' lvalue ParmVar 0x55948afc9328 'i' 'int'
|     `-ImplicitCastExpr 0x55948afde4f0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55948afde4d0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55948afc93a0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55948afc9678 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55948afc9580 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55948afdec88 <col:35, line:513:5>
|   |-ParenExpr 0x55948afde998 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55948afde968 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55948afde6c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55948afde690 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55948afde5a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55948afde588 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55948afde548 <col:23> 'int' lvalue ParmVar 0x55948afc9580 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55948afde568 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55948afde670 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55948afde658 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55948afde5c0 <col:33> 'int' lvalue ParmVar 0x55948afc9580 'i' 'int'
|   |   |     `-BinaryOperator 0x55948afde638 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55948afde620 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55948afde5e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55948afc6a30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55948afde600 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55948afde720 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55948afde700 <col:60> 'int' 0
|   |   `-CallExpr 0x55948afde8c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55948afde8b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55948afde890 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55948ab330e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55948afde908 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55948afde790 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55948afde920 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55948afde7c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55948afde938 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55948afde800 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55948afde950 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55948afde878 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55948afde860 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55948afde820 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55948afdec78 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55948afdec60 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55948afdec48 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55948afdec18 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55948afdeb90 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55948afdeb60 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55948afdeb10 <col:60, col:69> 'char const[48]' lvalue ->c 0x55948afd1500
|             |   `-CXXMemberCallExpr 0x55948afdeaf0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55948afdeac0 <col:60> '<bound member function type>' ->xanno 0x55948afc6648
|             |       `-CXXThisExpr 0x55948afdeab0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55948afdeb78 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55948afdeb40 <col:73> 'int' lvalue ParmVar 0x55948afc9580 'i' 'int'
|-CXXMethodDecl 0x55948afc98c8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55948afc9738 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55948afc97b0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55948afdf3a8 <col:41, line:528:5>
|   |-ParenExpr 0x55948afdf130 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55948afdf100 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55948afdee20 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55948afdedf0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55948afded00 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55948afdece8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55948afdeca8 <col:23> 'int' lvalue ParmVar 0x55948afc9738 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55948afdecc8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55948afdedd0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55948afdedb8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55948afded20 <col:33> 'int' lvalue ParmVar 0x55948afc9738 'i' 'int'
|   |   |     `-BinaryOperator 0x55948afded98 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55948afded80 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55948afded40 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55948afc6a30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55948afded60 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55948afdee80 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55948afdee60 <col:60> 'int' 0
|   |   `-CallExpr 0x55948afdf060 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55948afdf048 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55948afdf028 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55948ab330e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55948afdf0a0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55948afdeef0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55948afdf0b8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55948afdef28 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55948afdf0d0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55948afdef60 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55948afdf0e8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55948afdf010 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55948afdeff8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55948afdefb8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55948afdf388 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55948afdf338 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55948afdf308 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55948afdf2b0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55948afdf270 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55948afdf220 <col:47, col:56> 'char [48]' lvalue ->c 0x55948afd1500
|     |     |   `-CXXMemberCallExpr 0x55948afdf200 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55948afdf1d0 <col:47> '<bound member function type>' ->xanno 0x55948afc67e8
|     |     |       `-CXXThisExpr 0x55948afdf1c0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55948afdf288 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55948afdf250 <col:60> 'int' lvalue ParmVar 0x55948afc9738 'i' 'int'
|     `-ImplicitCastExpr 0x55948afdf370 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55948afdf350 <col:65> 'int16_t':'short' lvalue ParmVar 0x55948afc97b0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55948afc9a88 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55948afc9990 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55948afdfa78 <col:36, line:541:5>
|   |-ParenExpr 0x55948afdf818 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55948afdf7e8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55948afdf540 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55948afdf510 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55948afdf420 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55948afdf408 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55948afdf3c8 <col:23> 'int' lvalue ParmVar 0x55948afc9990 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55948afdf3e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55948afdf4f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55948afdf4d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55948afdf440 <col:33> 'int' lvalue ParmVar 0x55948afc9990 'i' 'int'
|   |   |     `-BinaryOperator 0x55948afdf4b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55948afdf4a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55948afdf460 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55948afc6a30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55948afdf480 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55948afdf5a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55948afdf580 <col:60> 'int' 0
|   |   `-CallExpr 0x55948afdf748 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55948afdf730 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55948afdf710 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55948ab330e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55948afdf788 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55948afdf610 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55948afdf7a0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55948afdf648 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55948afdf7b8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55948afdf680 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55948afdf7d0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55948afdf6f8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55948afdf6e0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55948afdf6a0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55948afdfa68 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55948afdfa50 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55948afdfa38 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55948afdfa08 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55948afdf9b0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55948afdf980 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55948afdf930 <col:61, col:70> 'char const[48]' lvalue ->c 0x55948afd1500
|             |   `-CXXMemberCallExpr 0x55948afdf910 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55948afdf8e0 <col:61> '<bound member function type>' ->xanno 0x55948afc6648
|             |       `-CXXThisExpr 0x55948afdf8d0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55948afdf998 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55948afdf960 <col:74> 'int' lvalue ParmVar 0x55948afc9990 'i' 'int'
|-CXXMethodDecl 0x55948afc9c58 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55948afc9b48 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55948afc9bc0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55948afc9d08 <col:20>
| `-OptimizeNoneAttr 0x55948afc9d60 <col:30>
|-CXXMethodDecl 0x55948afc9e98 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55948afc9da0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55948afe0148 <col:35, line:562:5>
|   |-ParenExpr 0x55948afdfee8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55948afdfeb8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55948afdfc10 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55948afdfbe0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55948afdfaf0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55948afdfad8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55948afdfa98 <col:23> 'int' lvalue ParmVar 0x55948afc9da0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55948afdfab8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55948afdfbc0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55948afdfba8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55948afdfb10 <col:33> 'int' lvalue ParmVar 0x55948afc9da0 'i' 'int'
|   |   |     `-BinaryOperator 0x55948afdfb88 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55948afdfb70 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55948afdfb30 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55948afc6a30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55948afdfb50 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55948afdfc70 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55948afdfc50 <col:60> 'int' 0
|   |   `-CallExpr 0x55948afdfe18 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55948afdfe00 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55948afdfde0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55948ab330e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55948afdfe58 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55948afdfce0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55948afdfe70 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55948afdfd18 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55948afdfe88 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55948afdfd50 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55948afdfea0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55948afdfdc8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55948afdfdb0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55948afdfd70 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55948afe0138 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55948afe0120 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55948afe0108 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55948afe00d8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55948afe0080 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55948afe0050 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55948afe0000 <col:60, col:69> 'char const[48]' lvalue ->c 0x55948afd1500
|             |   `-CXXMemberCallExpr 0x55948afdffe0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55948afdffb0 <col:60> '<bound member function type>' ->xanno 0x55948afc6648
|             |       `-CXXThisExpr 0x55948afdffa0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55948afe0068 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55948afe0030 <col:73> 'int' lvalue ParmVar 0x55948afc9da0 'i' 'int'
|-CXXMethodDecl 0x55948afca0a8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55948afc9f58 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55948afc9fd0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55948afe0828 <col:41, line:577:5>
|   |-ParenExpr 0x55948afe05b8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55948afe0588 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55948afe02e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55948afe02b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55948afe01c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55948afe01a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55948afe0168 <col:23> 'int' lvalue ParmVar 0x55948afc9f58 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55948afe0188 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55948afe0290 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55948afe0278 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55948afe01e0 <col:33> 'int' lvalue ParmVar 0x55948afc9f58 'i' 'int'
|   |   |     `-BinaryOperator 0x55948afe0258 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55948afe0240 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55948afe0200 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55948afc6a30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55948afe0220 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55948afe0340 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55948afe0320 <col:60> 'int' 0
|   |   `-CallExpr 0x55948afe04e8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55948afe04d0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55948afe04b0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55948ab330e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55948afe0528 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55948afe03b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55948afe0540 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55948afe03e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55948afe0558 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55948afe0420 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55948afe0570 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55948afe0498 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55948afe0480 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55948afe0440 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55948afe0808 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55948afe07b8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55948afe0788 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55948afe0728 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55948afe06f8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55948afe06a8 <col:47, col:56> 'char [48]' lvalue ->c 0x55948afd1500
|     |     |   `-CXXMemberCallExpr 0x55948afe0688 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55948afe0658 <col:47> '<bound member function type>' ->xanno 0x55948afc67e8
|     |     |       `-CXXThisExpr 0x55948afe0648 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55948afe0710 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55948afe06d8 <col:60> 'int' lvalue ParmVar 0x55948afc9f58 'i' 'int'
|     `-ImplicitCastExpr 0x55948afe07f0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55948afe07d0 <col:65> 'int32_t':'int' lvalue ParmVar 0x55948afc9fd0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55948afca268 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55948afca170 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55948afe0f58 <col:36, line:591:5>
|   |-ParenExpr 0x55948afe0c98 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55948afe0c68 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55948afe09c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55948afe0990 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55948afe08a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55948afe0888 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55948afe0848 <col:23> 'int' lvalue ParmVar 0x55948afca170 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55948afe0868 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55948afe0970 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55948afe0958 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55948afe08c0 <col:33> 'int' lvalue ParmVar 0x55948afca170 'i' 'int'
|   |   |     `-BinaryOperator 0x55948afe0938 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55948afe0920 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55948afe08e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55948afc6a30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55948afe0900 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55948afe0a20 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55948afe0a00 <col:60> 'int' 0
|   |   `-CallExpr 0x55948afe0bc8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55948afe0bb0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55948afe0b90 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55948ab330e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55948afe0c08 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55948afe0a90 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55948afe0c20 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55948afe0ac8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55948afe0c38 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55948afe0b00 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55948afe0c50 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55948afe0b78 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55948afe0b60 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55948afe0b20 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55948afe0f48 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55948afe0f30 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55948afe0f18 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55948afe0ee8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55948afe0e60 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55948afe0e30 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55948afe0de0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55948afd1500
|             |   `-CXXMemberCallExpr 0x55948afe0dc0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55948afe0d90 <col:61> '<bound member function type>' ->xanno 0x55948afc6648
|             |       `-CXXThisExpr 0x55948afe0d80 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55948afe0e48 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55948afe0e10 <col:74> 'int' lvalue ParmVar 0x55948afca170 'i' 'int'
|-CXXMethodDecl 0x55948afca4b8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55948afca328 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55948afca3a0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55948afe1638 <col:42, line:606:5>
|   |-ParenExpr 0x55948afe13c8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55948afe1398 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55948afe10f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55948afe10c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55948afe0fd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55948afe0fb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55948afe0f78 <col:23> 'int' lvalue ParmVar 0x55948afca328 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55948afe0f98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55948afe10a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55948afe1088 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55948afe0ff0 <col:33> 'int' lvalue ParmVar 0x55948afca328 'i' 'int'
|   |   |     `-BinaryOperator 0x55948afe1068 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55948afe1050 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55948afe1010 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55948afc6a30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55948afe1030 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55948afe1150 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55948afe1130 <col:60> 'int' 0
|   |   `-CallExpr 0x55948afe12f8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55948afe12e0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55948afe12c0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55948ab330e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55948afe1338 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55948afe11c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55948afe1350 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55948afe11f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55948afe1368 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55948afe1230 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55948afe1380 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55948afe12a8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55948afe1290 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55948afe1250 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55948afe1618 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55948afe15c8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55948afe1598 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55948afe1538 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55948afe1508 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55948afe14b8 <col:48, col:57> 'char [48]' lvalue ->c 0x55948afd1500
|     |     |   `-CXXMemberCallExpr 0x55948afe1498 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55948afe1468 <col:48> '<bound member function type>' ->xanno 0x55948afc67e8
|     |     |       `-CXXThisExpr 0x55948afe1458 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55948afe1520 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55948afe14e8 <col:61> 'int' lvalue ParmVar 0x55948afca328 'i' 'int'
|     `-ImplicitCastExpr 0x55948afe1600 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55948afe15e0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55948afca3a0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55948afca650 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55948afca580 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55948afe1ea8 <col:33, line:620:5>
|   |-ParenExpr 0x55948afe1c20 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55948afe1bf0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55948afe1840 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55948afe1810 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55948afe16b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55948afe1698 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55948afe1658 <col:23> 'int' lvalue ParmVar 0x55948afca580 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55948afe1678 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55948afe17f0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55948afe17d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55948afe16d0 <col:33> 'int' lvalue ParmVar 0x55948afca580 'i' 'int'
|   |   |     `-BinaryOperator 0x55948afe17b8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55948afe17a0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55948afe16f0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55948afc6a30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55948afe1778 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55948afe1760 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55948afe1728 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55948afe18a0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55948afe1880 <col:79> 'int' 0
|   |   `-CallExpr 0x55948afe1b50 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55948afe1b38 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55948afe1b18 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55948ab330e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55948afe1b90 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55948afe1988 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55948afe1ba8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55948afe19d0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55948afe1bc0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55948afe1a08 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55948afe1bd8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55948afe1b00 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55948afe1ae8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55948afe1aa8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55948afe1e98 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55948afe1e80 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55948afe1e68 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55948afe1e38 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55948afe1db0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55948afe1d80 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55948afe1d30 <col:67, col:76> 'char const[48]' lvalue ->c 0x55948afd1500
|             |   `-CXXMemberCallExpr 0x55948afe1d10 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55948afe1ce0 <col:67> '<bound member function type>' ->xanno 0x55948afc6648
|             |       `-CXXThisExpr 0x55948afe1cd0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55948afe1d98 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55948afe1d60 <col:80> 'int' lvalue ParmVar 0x55948afca580 'i' 'int'
|-CXXMethodDecl 0x55948afca868 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55948afca710 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55948afca790 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55948afe26d0 <col:45, line:635:5>
|   |-ParenExpr 0x55948afe2418 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55948afe23e8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55948afe20b0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55948afe2080 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55948afe1f20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55948afe1f08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55948afe1ec8 <col:23> 'int' lvalue ParmVar 0x55948afca710 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55948afe1ee8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55948afe2060 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55948afe2048 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55948afe1f40 <col:33> 'int' lvalue ParmVar 0x55948afca710 'i' 'int'
|   |   |     `-BinaryOperator 0x55948afe2028 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55948afe2010 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55948afe1f60 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55948afc6a30 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55948afe1fe8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55948afe1fd0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55948afe1f98 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55948afe2110 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55948afe20f0 <col:79> 'int' 0
|   |   `-CallExpr 0x55948afe2348 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55948afe2330 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55948afe2310 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55948ab330e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55948afe2388 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55948afe2180 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55948afe23a0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55948afe21c8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55948afe23b8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55948afe2200 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55948afe23d0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55948afe22f8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55948afe22e0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55948afe2298 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55948afe26b0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55948afe2618 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55948afe25e8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55948afe2588 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55948afe2558 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55948afe2508 <col:54, col:63> 'char [48]' lvalue ->c 0x55948afd1500
|     |     |   `-CXXMemberCallExpr 0x55948afe24e8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55948afe24b8 <col:54> '<bound member function type>' ->xanno 0x55948afc67e8
|     |     |       `-CXXThisExpr 0x55948afe24a8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55948afe2570 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55948afe2538 <col:67> 'int' lvalue ParmVar 0x55948afca710 'i' 'int'
|     `-CXXConstCastExpr 0x55948afe2680 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55948afe2668 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55948afe2630 <col:91> 'const void *' lvalue ParmVar 0x55948afca790 'x' 'const void *'
|-CXXMethodDecl 0x55948afca938 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55948afe2758 <col:34, line:640:5>
|   `-ReturnStmt 0x55948afe2748 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55948afe2730 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55948afe2700 <col:16> 'Packet *' lvalue ->_data_packet 0x55948afd20b8
|         `-CXXThisExpr 0x55948afe26f0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55948afcaa78 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55948afca9e8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55948afdb818 <col:46> 'bool' true
|-CXXMethodDecl 0x55948afcabf8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55948afcab30 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55948afcaca0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55948afcb450 <line:660:22> "" ""
| |-EnumConstantDecl 0x55948afcada0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55948afcb4c0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948afcad80 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55948afcad60 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55948afbff00 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55948afcae30 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55948afcb4d8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948afcae10 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55948afcadf0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55948afbff90 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55948afcaec0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55948afcb4f0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948afcaea0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55948afcae80 <col:21> 'int' 0
| |-EnumConstantDecl 0x55948afcaf50 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55948afcb508 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948afcaf30 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55948afcaf10 <col:19> 'int' 16
| |-EnumConstantDecl 0x55948afcafe0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55948afcb520 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948afcafc0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55948afcafa0 <col:21> 'int' 16
| |-EnumConstantDecl 0x55948afcb070 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55948afcb538 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948afcb050 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55948afcb030 <col:19> 'int' 32
| |-EnumConstantDecl 0x55948afcb100 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55948afcb550 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948afcb0e0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55948afcb0c0 <col:19> 'int' EnumConstant 0x55948afcaf50 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55948afcb190 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55948afcb568 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948afcb170 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55948afcb150 <col:19> 'int' EnumConstant 0x55948afcb070 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55948afcb260 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55948afcb580 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948afcb240 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55948afcb220 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55948afcb1e0 <col:23> 'int' EnumConstant 0x55948afcb190 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55948afcb200 <col:40> 'int' 2
| |-EnumConstantDecl 0x55948afcb330 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55948afcb598 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55948afcb310 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55948afcb2f0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55948afcb2b0 <col:23> 'int' EnumConstant 0x55948afcb190 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55948afcb2d0 <col:40> 'int' 4
| `-EnumConstantDecl 0x55948afcb400 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55948afcb5b0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55948afcb3e0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55948afcb3c0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55948afcb380 <col:23> 'int' EnumConstant 0x55948afcb190 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55948afcb3a0 <col:40> 'int' 8
|-CXXMethodDecl 0x55948afcb5f0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55948afcb690 <col:68> "" ""
|-CXXMethodDecl 0x55948afcb728 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55948afcb7c8 <col:45> "" ""
|-CXXMethodDecl 0x55948afcb860 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55948afcb900 <col:57> "" ""
|-CXXMethodDecl 0x55948afcb998 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55948afcba38 <col:45> "" ""
|-CXXMethodDecl 0x55948afcbad0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55948afcbb70 <col:57> "" ""
|-CXXMethodDecl 0x55948afcbc00 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55948afcbca0 <col:51> "" ""
|-CXXMethodDecl 0x55948afcbd30 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55948afcbdd0 <col:63> "" ""
|-CXXMethodDecl 0x55948afcbe60 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55948afcbf00 <col:53> "" ""
|-CXXMethodDecl 0x55948afcbf90 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55948afcc030 <col:65> "" ""
|-CXXMethodDecl 0x55948afcc148 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55948afcc0b8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55948afcc1f0 <col:61> "" ""
|-CXXMethodDecl 0x55948afcc388 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55948afcc278 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55948afcc2f0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55948afcc438 <col:67> "" ""
|-CXXMethodDecl 0x55948afcc550 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55948afcc4c0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55948afcc5f8 <col:63> "" ""
|-CXXMethodDecl 0x55948afcc790 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55948afcc680 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55948afcc6f8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55948afcc840 <col:69> "" ""
|-CXXMethodDecl 0x55948afcc958 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55948afcc8c8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55948afcca00 <col:63> "" ""
|-CXXMethodDecl 0x55948afcf0d8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55948afcefc8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55948afcf040 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55948afcf188 <col:69> "" ""
|-CXXMethodDecl 0x55948afcf2a0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55948afcf210 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55948afcf348 <col:62> "" ""
|-CXXMethodDecl 0x55948afcf4e0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55948afcf3d0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55948afcf448 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55948afcf590 <col:68> "" ""
|-CXXMethodDecl 0x55948afcf6a8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55948afcf618 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55948afcf750 <col:63> "" ""
|-CXXMethodDecl 0x55948afcf8e8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55948afcf7d8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55948afcf850 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55948afcf998 <col:69> "" ""
|-CXXMethodDecl 0x55948afcfa28 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55948afcfac8 <col:64> "" ""
|-CXXMethodDecl 0x55948afcfb58 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55948afcfbf8 <col:52> "" ""
|-CXXMethodDecl 0x55948afcfc88 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55948afcfd28 <col:67> "" ""
|-CXXMethodDecl 0x55948afcfdb8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55948afcfe58 <col:55> "" ""
|-CXXMethodDecl 0x55948afcff70 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55948afcfee0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55948afd0018 <col:58> "" ""
|-CXXMethodDecl 0x55948afd01b0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55948afd00a0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55948afd0118 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55948afd0260 <col:62> "" ""
|-CXXMethodDecl 0x55948afd0378 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55948afd02e8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55948afd0420 <col:58> "" ""
|-CXXMethodDecl 0x55948afd05b8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55948afd04a8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55948afd0520 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55948afd0668 <col:62> "" ""
|-CXXMethodDecl 0x55948afd0780 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55948afd06f0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55948afd0828 <col:60> "" ""
|-CXXMethodDecl 0x55948afd09c0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55948afd08b0 <col:34> col:37 'int'
| |-ParmVarDecl 0x55948afd0928 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55948afd0a70 <col:64> "" ""
|-CXXMethodDecl 0x55948afd0b88 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55948afd0af8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55948afd0c30 <col:58> "" ""
|-CXXMethodDecl 0x55948afd0dc8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55948afd0cb8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55948afd0d30 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55948afd0e78 <col:62> "" ""
|-CXXMethodDecl 0x55948afd0f90 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55948afd0f00 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55948afd1038 <col:59> "" ""
|-CXXMethodDecl 0x55948afd11d0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55948afd10c0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55948afd1138 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55948afd1280 <col:63> "" ""
|-AccessSpecDecl 0x55948afd12f0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55948afd1318 prev 0x55948afc6520 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55948afd1410 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55948afd1500 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55948afd1628 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55948afd17a8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55948afd1928 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55948afd1aa8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55948afe28d8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55948afe3148 <col:11>
| |-CXXDestructorDecl 0x55948afe29b0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55948afe2ae8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55948afe2ae8
| | `-ParmVarDecl 0x55948afe2bf8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55948afe2c98 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55948afe2c98
| | `-ParmVarDecl 0x55948afe2da8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55948afe5b68 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55948afe5c78 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55948afe5ef8 <col:11>
| |   `-ReturnStmt 0x55948afe5ee8 <col:11>
| |     `-UnaryOperator 0x55948afe5ed0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55948afe5ec0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55948afe5ce8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55948afe5ce8
|   `-ParmVarDecl 0x55948afe5df8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55948afd1b10 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55948afd1c28 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55948afd1cc8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55948afd1d30 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55948afd1d98 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55948afd1e00 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55948afd1e60 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55948afd1f20 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55948afd1f80 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55948afd1fe0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55948afe27e8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55948afd1cc8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55948afe3158 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55948afe31b0 <col:12>
| |-CXXConstructorDecl 0x55948afe2e18 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55948afe2e18
| | `-ParmVarDecl 0x55948afe2f28 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55948afe2fc8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55948afe2fc8
| | `-ParmVarDecl 0x55948afe30d8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55948afe5250 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55948afd2058 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55948afd20b8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55948afd2120 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55948afd2188 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55948afd21f0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55948afd2258 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55948afd22b8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55948afd2318 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55948afd2380 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55948afd2408 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55948afd2058 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55948afe2780 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55948afd22b8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55948afe31c0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55948afe3220 <col:21, line:755:5>
|-CXXConstructorDecl 0x55948afd25a8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55948afd24e8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55948afd26a0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55948afd2888 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55948afd2790 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55948afd2b58 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55948afd2940 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55948afd29b8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55948afd2a30 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55948afd2d78 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55948afd2c28 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55948afd2ca0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55948afdb358 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55948afd2e38 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55948afd2eb0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55948afd2f28 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55948afdb4b0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55948afdb420 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55948afdb5f8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55948afdb568 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55948afdb6f0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class IPAddress>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class IPAddress * _ptr
        24 |   class IPAddress _slot
        24 |     uint32_t _addr
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct uninitialized_type (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55948abec2a8 <../dummy_inc/click/config.h:317:1, line:318:1> line:317:8 referenced struct uninitialized_type definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55948abec3c8 <col:1, col:8> col:8 implicit struct uninitialized_type
|-CXXConstructorDecl 0x55948adfe460 <col:8> col:8 implicit referenced constexpr uninitialized_type 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55948adfe540 <col:8> col:8 implicit constexpr uninitialized_type 'void (const uninitialized_type &)' inline default trivial noexcept-unevaluated 0x55948adfe540
| `-ParmVarDecl 0x55948adfe628 <col:8> col:8 'const uninitialized_type &'
|-CXXConstructorDecl 0x55948adfe6c8 <col:8> col:8 implicit constexpr uninitialized_type 'void (uninitialized_type &&)' inline default trivial noexcept-unevaluated 0x55948adfe6c8
| `-ParmVarDecl 0x55948adfe7d8 <col:8> col:8 'uninitialized_type &&'
`-CXXDestructorDecl 0x55948af9b4c0 <col:8> col:8 implicit referenced ~uninitialized_type 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.uninitialized_type = type { i8 }
  NonVirtualBaseLLVMType:%struct.uninitialized_type = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPAddressArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class IPAddress> (empty)
         0 |   class IPAddressArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55948ae06620 prev 0x55948adf9a18 <../dummy_inc/click/ipaddress.hh:367:1, line:378:1> line:367:7 referenced class IPAddressArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55948ae06718 <col:1, col:7> col:7 implicit class IPAddressArg
|-AccessSpecDecl 0x55948ae067a8 <col:22, col:28> col:22 public
|-CXXMethodDecl 0x55948ae06bd0 <line:368:5, line:369:43> line:368:24 basic_parse 'const char *(const char *, const char *, unsigned char *, int &)' static
| |-ParmVarDecl 0x55948ae067e8 <col:36, col:48> col:48 begin 'const char *'
| |-ParmVarDecl 0x55948ae06868 <col:55, col:67> col:67 end 'const char *'
| |-ParmVarDecl 0x55948ae069a0 <line:369:8, col:29> col:22 value 'unsigned char *':'unsigned char *'
| `-ParmVarDecl 0x55948ae06a50 <col:32, col:37> col:37 nbytes 'int &'
|-CXXMethodDecl 0x55948ae06e98 <line:370:5, line:371:44> line:370:17 used parse 'bool (const String &, IPAddress &, const ArgContext &)' static
| |-ParmVarDecl 0x55948ae06ca0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55948ae06d18 <col:42, col:53> col:53 result 'IPAddress &'
| `-ParmVarDecl 0x55948ae06db8 <line:371:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55948ae0b838 <col:34> 'const ArgContext' lvalue Var 0x55948adf99b0 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55948ae0b290 <line:372:5, line:375:5> line:372:17 parse 'bool (const String &, struct in_addr &, const ArgContext &)' static
| |-ParmVarDecl 0x55948ae06f60 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55948ae07050 <col:42, col:58> col:58 used result 'struct in_addr &'
| |-ParmVarDecl 0x55948ae070c8 <line:373:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55948ae0b858 <col:34> 'const ArgContext' lvalue Var 0x55948adf99b0 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55948ae0ba38 <col:46, line:375:5>
|   `-ReturnStmt 0x55948ae0ba28 <line:374:2, col:63>
|     `-CallExpr 0x55948ae0b9f0 <col:9, col:63> 'bool'
|       |-ImplicitCastExpr 0x55948ae0b9d8 <col:9> 'bool (*)(const String &, IPAddress &, const ArgContext &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55948ae0b990 <col:9> 'bool (const String &, IPAddress &, const ArgContext &)' lvalue CXXMethod 0x55948ae06e98 'parse' 'bool (const String &, IPAddress &, const ArgContext &)'
|       |-DeclRefExpr 0x55948ae0b8f0 <col:15> 'const String' lvalue ParmVar 0x55948ae06f60 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x55948ae0b940 <col:20, col:56> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x55948ae0b910 <col:50> 'struct in_addr':'in_addr' lvalue ParmVar 0x55948ae07050 'result' 'struct in_addr &'
|       `-DeclRefExpr 0x55948ae0b970 <col:59> 'const ArgContext' lvalue ParmVar 0x55948ae070c8 'args' 'const ArgContext &'
|-CXXMethodDecl 0x55948ae0b768 <line:376:5, line:377:44> line:376:17 parse 'bool (const String &, Vector<IPAddress> &, const ArgContext &)' static
| |-ParmVarDecl 0x55948ae0b358 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55948ae0b5d0 <col:42, col:61> col:61 result 'Vector<IPAddress> &'
| `-ParmVarDecl 0x55948ae0b648 <line:377:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55948ae0b878 <col:34> 'const ArgContext' lvalue Var 0x55948adf99b0 'blank_args' 'const ArgContext'
|-CXXConstructorDecl 0x55948afb0658 <line:367:7> col:7 implicit constexpr IPAddressArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x55948afb0730 <col:7> col:7 implicit ~IPAddressArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55948afb0868 <col:7> col:7 implicit constexpr IPAddressArg 'void (const IPAddressArg &)' inline default trivial noexcept-unevaluated 0x55948afb0868
| `-ParmVarDecl 0x55948afb0978 <col:7> col:7 'const IPAddressArg &'
`-CXXConstructorDecl 0x55948afb0a18 <col:7> col:7 implicit used constexpr IPAddressArg 'void (IPAddressArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55948afb0b28 <col:7> col:7 'IPAddressArg &&'
  `-CompoundStmt 0x55948afb1780 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.IPAddressArg = type { i8 }
  NonVirtualBaseLLVMType:%class.IPAddressArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55948ae0c868 <../dummy_inc/click/ipaddress.hh:398:1, col:64> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IPAddressArg'
|-TemplateArgument type 'IPAddress'
|-CXXRecordDecl 0x55948ae0cac8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55948afb0568 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55948afb0b98 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<IPAddress> &)' inline default trivial noexcept-unevaluated 0x55948afb0b98
| `-ParmVarDecl 0x55948afb0ca8 <col:19> col:19 'const DefaultArg<IPAddress> &'
|-CXXConstructorDecl 0x55948afb0d48 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<IPAddress> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55948afb0e58 <col:19> col:19 used 'DefaultArg<IPAddress> &&'
| |-CXXCtorInitializer 'IPAddressArg'
| | `-CXXConstructExpr 0x55948afb1790 <col:19> 'IPAddressArg' 'void (IPAddressArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55948afb1760 <col:19> 'IPAddressArg' xvalue <UncheckedDerivedToBase (IPAddressArg)>
| |     `-CXXStaticCastExpr 0x55948afb1730 <col:19> 'DefaultArg<IPAddress>' xvalue static_cast<struct DefaultArg<class IPAddress> &&> <NoOp>
| |       `-DeclRefExpr 0x55948afb1700 <col:19> 'DefaultArg<IPAddress>' lvalue ParmVar 0x55948afb0e58 '' 'DefaultArg<IPAddress> &&'
| `-CompoundStmt 0x55948afb1800 <col:19>
`-CXXDestructorDecl 0x55948afb0ef8 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class EtherAddressArg
         0 |   int flags_
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class EtherAddress>
         0 |   class EtherAddressArg (base)
         0 |     int flags_
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55948b035948 <../dummy_inc/click/etheraddress.hh:205:1, line:224:1> line:205:7 referenced class EtherAddressArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55948b035a68 <col:1, col:7> col:7 implicit referenced class EtherAddressArg
|-AccessSpecDecl 0x55948b035af8 <col:25, col:31> col:25 public
|-TypedefDecl 0x55948b035b30 <line:206:5, col:18> col:18 referenced enable_direct_parse 'void'
| `-BuiltinType 0x55948aa964e0 'void'
|-CXXConstructorDecl 0x55948b035c78 <line:207:5, col:53> col:5 used EtherAddressArg 'void (int)'
| |-ParmVarDecl 0x55948b035ba0 <col:21, col:33> col:25 used flags 'int' cinit
| | `-IntegerLiteral 0x55948b036f00 <col:33> 'int' 0
| |-CXXCtorInitializer Field 0x55948b036830 'flags_' 'int'
| | `-ImplicitCastExpr 0x55948b036fa0 <col:45> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55948b036f60 <col:45> 'int' lvalue ParmVar 0x55948b035ba0 'flags' 'int'
| `-CompoundStmt 0x55948b036fe8 <col:52, col:53>
|-CXXMethodDecl 0x55948b035f38 <line:208:5, line:210:5> line:208:17 used parse 'bool (const String &, EtherAddress &, const ArgContext &)' inline
| |-ParmVarDecl 0x55948b035d38 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55948b035dd8 <col:42, col:56> col:56 used value 'EtherAddress &'
| |-ParmVarDecl 0x55948b035e50 <col:63, col:88> col:81 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55948b036f20 <col:88> 'const ArgContext' lvalue Var 0x55948b0358e0 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55948b0371c8 <col:100, line:210:5>
|   `-ReturnStmt 0x55948b0371b8 <line:209:9, col:46>
|     `-CallExpr 0x55948b037160 <col:16, col:46> 'bool'
|       |-ImplicitCastExpr 0x55948b037148 <col:16> 'bool (*)(const String &, EtherAddress &, const ArgContext &, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55948b037100 <col:16> 'bool (const String &, EtherAddress &, const ArgContext &, int)' lvalue CXXMethod 0x55948b036af8 'parse' 'bool (const String &, EtherAddress &, const ArgContext &, int)'
|       |-DeclRefExpr 0x55948b037060 <col:22> 'const String' lvalue ParmVar 0x55948b035d38 'str' 'const String &'
|       |-DeclRefExpr 0x55948b037080 <col:27> 'EtherAddress' lvalue ParmVar 0x55948b035dd8 'value' 'EtherAddress &'
|       |-DeclRefExpr 0x55948b0370a0 <col:34> 'const ArgContext' lvalue ParmVar 0x55948b035e50 'args' 'const ArgContext &'
|       `-ImplicitCastExpr 0x55948b0371a0 <col:40> 'int' <LValueToRValue>
|         `-MemberExpr 0x55948b0370d0 <col:40> 'int' lvalue ->flags_ 0x55948b036830
|           `-CXXThisExpr 0x55948b0370c0 <col:40> 'EtherAddressArg *' implicit this
|-CXXMethodDecl 0x55948b0361d8 <line:211:5, line:213:5> line:211:17 parse 'bool (const String &, unsigned char *, const ArgContext &)' inline
| |-ParmVarDecl 0x55948b036000 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55948b036080 <col:42, col:57> col:57 used value 'unsigned char *'
| |-ParmVarDecl 0x55948b0360f8 <col:64, col:89> col:82 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55948b036f40 <col:89> 'const ArgContext' lvalue Var 0x55948b0358e0 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55948b0373a0 <col:101, line:213:5>
|   `-ReturnStmt 0x55948b037390 <line:212:2, col:66>
|     `-CXXMemberCallExpr 0x55948b037358 <col:9, col:66> 'bool'
|       |-MemberExpr 0x55948b037328 <col:9> '<bound member function type>' ->parse 0x55948b035f38
|       | `-CXXThisExpr 0x55948b037318 <col:9> 'EtherAddressArg *' implicit this
|       |-DeclRefExpr 0x55948b037248 <col:15> 'const String' lvalue ParmVar 0x55948b036000 'str' 'const String &'
|       |-UnaryOperator 0x55948b0372e0 <col:20, col:59> 'EtherAddress' lvalue prefix '*' cannot overflow
|       | `-CXXReinterpretCastExpr 0x55948b0372b0 <col:21, col:59> 'EtherAddress *' reinterpret_cast<class EtherAddress *> <BitCast>
|       |   `-ImplicitCastExpr 0x55948b037298 <col:54> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|       |     `-DeclRefExpr 0x55948b037268 <col:54> 'unsigned char *' lvalue ParmVar 0x55948b036080 'value' 'unsigned char *'
|       `-DeclRefExpr 0x55948b0372f8 <col:62> 'const ArgContext' lvalue ParmVar 0x55948b0360f8 'args' 'const ArgContext &'
|-CXXMethodDecl 0x55948b036498 <line:214:5, line:216:5> line:214:17 used direct_parse 'bool (const String &, EtherAddress &, Args &)' inline
| |-ParmVarDecl 0x55948b0362a0 <col:30, col:44> col:44 used str 'const String &'
| |-ParmVarDecl 0x55948b036318 <col:49, col:63> col:63 used value 'EtherAddress &'
| |-ParmVarDecl 0x55948b0363b8 <col:70, col:76> col:76 used args 'Args &'
| `-CompoundStmt 0x55948b037588 <col:82, line:216:5>
|   `-ReturnStmt 0x55948b037578 <line:215:9, col:53>
|     `-CallExpr 0x55948b037520 <col:16, col:53> 'bool'
|       |-ImplicitCastExpr 0x55948b037508 <col:16> 'bool (*)(const String &, EtherAddress &, Args &, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55948b0374c0 <col:16> 'bool (const String &, EtherAddress &, Args &, int)' lvalue CXXMethod 0x55948b036e28 'direct_parse' 'bool (const String &, EtherAddress &, Args &, int)'
|       |-DeclRefExpr 0x55948b037420 <col:29> 'const String' lvalue ParmVar 0x55948b0362a0 'str' 'const String &'
|       |-DeclRefExpr 0x55948b037440 <col:34> 'EtherAddress' lvalue ParmVar 0x55948b036318 'value' 'EtherAddress &'
|       |-DeclRefExpr 0x55948b037460 <col:41> 'Args' lvalue ParmVar 0x55948b0363b8 'args' 'Args &'
|       `-ImplicitCastExpr 0x55948b037560 <col:47> 'int' <LValueToRValue>
|         `-MemberExpr 0x55948b037490 <col:47> 'int' lvalue ->flags_ 0x55948b036830
|           `-CXXThisExpr 0x55948b037480 <col:47> 'EtherAddressArg *' implicit this
|-CXXMethodDecl 0x55948b036738 <line:217:5, line:219:5> line:217:17 direct_parse 'bool (const String &, unsigned char *, Args &)' inline
| |-ParmVarDecl 0x55948b036560 <col:30, col:44> col:44 used str 'const String &'
| |-ParmVarDecl 0x55948b0365e0 <col:49, col:64> col:64 used value 'unsigned char *'
| |-ParmVarDecl 0x55948b036658 <col:71, col:77> col:77 used args 'Args &'
| `-CompoundStmt 0x55948b037760 <col:83, line:219:5>
|   `-ReturnStmt 0x55948b037750 <line:218:2, col:73>
|     `-CXXMemberCallExpr 0x55948b037718 <col:9, col:73> 'bool'
|       |-MemberExpr 0x55948b0376e8 <col:9> '<bound member function type>' ->direct_parse 0x55948b036498
|       | `-CXXThisExpr 0x55948b0376d8 <col:9> 'EtherAddressArg *' implicit this
|       |-DeclRefExpr 0x55948b037608 <col:22> 'const String' lvalue ParmVar 0x55948b036560 'str' 'const String &'
|       |-UnaryOperator 0x55948b0376a0 <col:27, col:66> 'EtherAddress' lvalue prefix '*' cannot overflow
|       | `-CXXReinterpretCastExpr 0x55948b037670 <col:28, col:66> 'EtherAddress *' reinterpret_cast<class EtherAddress *> <BitCast>
|       |   `-ImplicitCastExpr 0x55948b037658 <col:61> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|       |     `-DeclRefExpr 0x55948b037628 <col:61> 'unsigned char *' lvalue ParmVar 0x55948b0365e0 'value' 'unsigned char *'
|       `-DeclRefExpr 0x55948b0376b8 <col:69> 'Args' lvalue ParmVar 0x55948b036658 'args' 'Args &'
|-AccessSpecDecl 0x55948b0367f0 <line:220:3, col:10> col:3 private
|-FieldDecl 0x55948b036830 <line:221:5, col:9> col:9 referenced flags_ 'int'
|-CXXMethodDecl 0x55948b036af8 <line:222:5, col:96> col:17 used parse 'bool (const String &, EtherAddress &, const ArgContext &, int)' static
| |-ParmVarDecl 0x55948b036890 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55948b036908 <col:42, col:56> col:56 value 'EtherAddress &'
| |-ParmVarDecl 0x55948b036980 <col:63, col:81> col:81 args 'const ArgContext &'
| `-ParmVarDecl 0x55948b036a00 <col:87, col:91> col:91 flags 'int'
|-CXXMethodDecl 0x55948b036e28 <line:223:5, col:91> col:17 used direct_parse 'bool (const String &, EtherAddress &, Args &, int)' static
| |-ParmVarDecl 0x55948b036bc8 <col:30, col:44> col:44 str 'const String &'
| |-ParmVarDecl 0x55948b036c40 <col:49, col:63> col:63 value 'EtherAddress &'
| |-ParmVarDecl 0x55948b036cb8 <col:70, col:76> col:76 args 'Args &'
| `-ParmVarDecl 0x55948b036d38 <col:82, col:86> col:86 flags 'int'
|-CXXDestructorDecl 0x55948b1687d0 <line:205:7> col:7 implicit ~EtherAddressArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55948b168908 <col:7> col:7 implicit constexpr EtherAddressArg 'void (const EtherAddressArg &)' inline default trivial noexcept-unevaluated 0x55948b168908
| `-ParmVarDecl 0x55948b168a18 <col:7> col:7 'const EtherAddressArg &'
`-CXXConstructorDecl 0x55948b168ab8 <col:7> col:7 implicit used constexpr EtherAddressArg 'void (EtherAddressArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55948b168bc8 <col:7> col:7 used 'EtherAddressArg &&'
  |-CXXCtorInitializer Field 0x55948b036830 'flags_' 'int'
  | `-ImplicitCastExpr 0x55948b1699a8 <col:7> 'int' <LValueToRValue>
  |   `-MemberExpr 0x55948b169960 <col:7> 'int' xvalue .flags_ 0x55948b036830
  |     `-CXXStaticCastExpr 0x55948b169930 <col:7> 'EtherAddressArg' xvalue static_cast<class EtherAddressArg &&> <NoOp>
  |       `-DeclRefExpr 0x55948b169900 <col:7> 'EtherAddressArg' lvalue ParmVar 0x55948b168bc8 '' 'EtherAddressArg &&'
  `-CompoundStmt 0x55948b1699f0 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.EtherAddressArg = type { i32 }
  NonVirtualBaseLLVMType:%class.EtherAddressArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55948b0377a0 <../dummy_inc/click/etheraddress.hh:226:1, col:70> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'EtherAddressArg'
|-TemplateArgument type 'EtherAddress'
|-CXXRecordDecl 0x55948b0379f8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55948b1686f8 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'EtherAddressArg'
| | `-CXXConstructExpr 0x55948b168fd0 <col:19> 'EtherAddressArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55948b168fb0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55948b169040 <col:19>
|-CXXConstructorDecl 0x55948b168c38 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<EtherAddress> &)' inline default trivial noexcept-unevaluated 0x55948b168c38
| `-ParmVarDecl 0x55948b168d48 <col:19> col:19 'const DefaultArg<EtherAddress> &'
|-CXXConstructorDecl 0x55948b168de8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<EtherAddress> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55948b168ef8 <col:19> col:19 used 'DefaultArg<EtherAddress> &&'
| |-CXXCtorInitializer 'EtherAddressArg'
| | `-CXXConstructExpr 0x55948b169a00 <col:19> 'EtherAddressArg' 'void (EtherAddressArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55948b1698e0 <col:19> 'EtherAddressArg' xvalue <UncheckedDerivedToBase (EtherAddressArg)>
| |     `-CXXStaticCastExpr 0x55948b1698b0 <col:19> 'DefaultArg<EtherAddress>' xvalue static_cast<struct DefaultArg<class EtherAddress> &&> <NoOp>
| |       `-DeclRefExpr 0x55948b169880 <col:19> 'DefaultArg<EtherAddress>' lvalue ParmVar 0x55948b168ef8 '' 'DefaultArg<EtherAddress> &&'
| `-CompoundStmt 0x55948b169a70 <col:19>
`-CXXDestructorDecl 0x55948b169080 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.2 = type { %class.EtherAddressArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg.2 = type { %class.EtherAddressArg }
  IsZeroInitializable:1
  BitFields:[
]>
