
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | struct StringAccum::rep_t
         0 |   unsigned char * s
         8 |   int len
        12 |   int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558bb1a394b8 prev 0x558bb1a30c58 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558bb1a395b0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x558bb1a39640 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x558bb1a396b8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x558bb1a39778 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x558bb1a39840 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x558bb1a399b8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x558bb1a398f0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x558bb1a39a60 <col:24>
| `-OptimizeNoneAttr 0x558bb1a39ab8 <col:34>
|-CXXMethodDecl 0x558bb1a39b00 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x558bb1a39db8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x558bb1a39bb0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x558bb1a39c28 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x558bb1a39ca8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x558bb1a39e70 <line:229:7, col:14> col:7 private
|-FieldDecl 0x558bb1a39ea8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x558bb1a39f10 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x558bb1a39f98 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x558bb1a3a2b8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x558bb1a3a050 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x558bb1a3a0c8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x558bb1a3a140 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x558bb1a3a1c0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x558bb1a3a3d0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x558bb1a41d48 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x558bb1a41d48
| `-ParmVarDecl 0x558bb1a41e58 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x558bb1a41ef8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x558bb1a41ef8
| `-ParmVarDecl 0x558bb1a42008 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x558bb1b30da0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558bb1a2c4d0 prev 0x558bb1a2c250 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x558bb1a2c5c8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x558bb1a2c658 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x558bb1a2c6b8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x558bb1a2c7a8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x558bb1a2c8a8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x558bb1a2ca78 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x558bb1a2c928 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x558bb1a2c9a0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x558bb1a2cc08 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x558bb1a2cb40 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x558bb1a2ccb0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x558bb1a2cde8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x558bb1a2cd20 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x558bb1a2cf88 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x558bb1a2cec8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x558bb1a2d128 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x558bb1a2d068 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x558bb1a2d1d0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x558bb1a2d2d0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x558bb1a2d3b0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb1a2d2b0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x558bb1a2d290 <col:26> 'int' 1
| `-EnumConstantDecl 0x558bb1a2d360 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x558bb1a2d3c8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558bb1a2d340 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x558bb1a2d320 <col:44> 'int' 2
|-CXXMethodDecl 0x558bb1a2d510 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x558bb1a2d3f8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x558bb1a2d478 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x558bb1a2d668 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x558bb1a2d5d8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x558bb1a2d8a8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x558bb1a2d728 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x558bb1a2d7a0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x558bb1a2d958 <col:20>
| `-OptimizeNoneAttr 0x558bb1a2d9b0 <col:30>
|-CXXMethodDecl 0x558bb1a2dab8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x558bb1a2d9f0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x558bb1a2db60 <col:20>
| `-OptimizeNoneAttr 0x558bb1a2dbb8 <col:30>
|-CXXMethodDecl 0x558bb1a2dc08 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x558bb1a2dcd0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x558bb1a2dde8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x558bb1a2de70 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x558bb1a2def8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x558bb1a2df80 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x558bb1a2e008 <line:59:5, col:35> col:23 used PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x558bb1a2e098 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x558bb1a2e158 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x558bb1a2e1e0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x558bb1a2e268 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x558bb1a2e2f0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x558bb1a2e378 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x558bb1a2e400 <line:67:5, col:39> col:23 used PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x558bb1a2e490 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x558bb1a2e550 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x558bb1a2e5e0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x558bb1a2e730 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x558bb1a2e698 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x558bb1a2e8c0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x558bb1a2e7f0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x558bb1a2eb70 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x558bb1a2e978 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x558bb1a2e9f8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x558bb1a2ea78 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x558bb1a2ec28 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x558bb1a2ed30 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x558bb1a2efc0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb1a2ed10 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x558bb1a2ecf0 <col:33> 'int' 0
| |-EnumConstantDecl 0x558bb1a2edc0 <line:81:9, col:32> col:9 referenced CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x558bb1a2efd8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb1a2eda0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x558bb1a2ed80 <col:32> 'int' 20
| |-EnumConstantDecl 0x558bb1a2ee50 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x558bb1a2eff0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb1a2ee30 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x558bb1a2ee10 <col:38> 'int' 90
| |-EnumConstantDecl 0x558bb1a2eee0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x558bb1a2f008 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb1a2eec0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x558bb1a2eea0 <col:35> 'int' 100
| `-EnumConstantDecl 0x558bb1a2ef70 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x558bb1a2f020 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558bb1a2ef50 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x558bb1a2ef30 <col:32> 'int' 2000
|-CXXMethodDecl 0x558bb1a2f060 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x558bb1a2f4a0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x558bb1a2f310 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x558bb1a2f388 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x558bb1a2f570 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x558bb1a2f6f0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x558bb1a2f620 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x558bb1a2f8f8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x558bb1a2f7a8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x558bb1a2f820 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x558bb1a2f9f8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x558bb1a2fa98 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x558bb1a2fb60 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x558bb1a2fbf0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x558bb1a2fe20 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb1a2fbd0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x558bb1a2fbb0 <col:36> 'int' EnumConstant 0x558bb1a2fb60 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x558bb1a2fc40 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x558bb1a2fc90 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x558bb1a2fce0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x558bb1a2fd30 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x558bb1a2fd80 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x558bb1a2fdd0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x558bb1a2ff08 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x558bb1a2fe48 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x558bb1a2ffd0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x558bb1a30090 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x558bb1a30150 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x558bb1a30210 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x558bb1a30328 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x558bb1a303f0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x558bb1a30570 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x558bb1a304a0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x558bb1a30698 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x558bb1a30898 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x558bb1a30748 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x558bb1a307c8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x558bb1a3e1e8 <col:54, line:127:5>
|   |-ParenExpr 0x558bb1a3e098 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x558bb1a3e068 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x558bb1a3dd58 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x558bb1a3dd30 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x558bb1a3dd18 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x558bb1a3dd00 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x558bb1a3dcd0 <col:31> 'Router *' lvalue ->_router 0x558bb1a3bbb0
|   |   |         `-CXXThisExpr 0x558bb1a3dcc0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x558bb1a3ddb8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558bb1a3dd98 <col:48> 'int' 0
|   |   `-CallExpr 0x558bb1a3dfc8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x558bb1a3dfb0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558bb1a3df90 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558bb1566bb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558bb1a3e008 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558bb1a3de28 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x558bb1a3e020 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558bb1a3de48 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x558bb1a3e038 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558bb1a3de80 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x558bb1a3e050 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558bb1a3df78 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558bb1a3df60 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558bb1a3df18 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x558bb1a3e130 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x558bb1a3e0c8 <col:9> 'Router *' lvalue ->_router 0x558bb1a3bbb0
|   | | `-CXXThisExpr 0x558bb1a3e0b8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x558bb1a3e118 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x558bb1a3e0f8 <col:19> 'Router *' lvalue ParmVar 0x558bb1a30748 'r' 'Router *'
|   `-BinaryOperator 0x558bb1a3e1c8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x558bb1a3e160 <col:9> 'int' lvalue ->_eindex 0x558bb1a3bc18
|     | `-CXXThisExpr 0x558bb1a3e150 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x558bb1a3e1b0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x558bb1a3e190 <col:19> 'int' lvalue ParmVar 0x558bb1a307c8 'eindex' 'int'
|-CXXMethodDecl 0x558bb1a30a20 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x558bb1a30958 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x558bb1a30af0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x558bb1a30bb8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x558bb1a30c58 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x558bb1a30ea8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x558bb1a30d20 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x558bb1a30da0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x558bb1a30f58 <col:20>
| `-OptimizeNoneAttr 0x558bb1a30fb0 <col:30>
|-CXXMethodDecl 0x558bb1a310b8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x558bb1a30ff0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x558bb1a31160 <col:20>
| `-OptimizeNoneAttr 0x558bb1a311b8 <col:30>
|-CXXMethodDecl 0x558bb1a31288 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x558bb1a311f8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x558bb1a31330 <col:20>
| `-OptimizeNoneAttr 0x558bb1a31388 <col:30>
|-CXXMethodDecl 0x558bb1a31518 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x558bb1a313c0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x558bb1a31440 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x558bb1a316a8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x558bb1a315e0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x558bb1a317f8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x558bb1a31768 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x558bb1a31948 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x558bb1a318b8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x558bb1a31a98 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x558bb1a31a08 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x558bb1a31d58 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x558bb1a31b50 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x558bb1a31bd0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x558bb1a31c78 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x558bb1a31e30 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x558bb1a31ef0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x558bb1a321c0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x558bb1a32070 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x558bb1a320e8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x558bb1a322e8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x558bb1a324c0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x558bb1a323a0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x558bb1a32420 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x558bb1a326a8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x558bb1a32588 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x558bb1a32608 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x558bb1a32a18 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x558bb1a32768 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x558bb1a327e0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x558bb1a32860 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x558bb1a3d7d0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x558bb1a3d7b0 <col:106> 'int' 0
| `-ParmVarDecl 0x558bb1a328d8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x558bb1a3d808 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558bb1a3d7e8 <col:126> 'int' 0
|-CXXMethodDecl 0x558bb1a32db8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x558bb1a32ae8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x558bb1a32b80 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x558bb1a32c00 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x558bb1a32c78 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x558bb1a3d840 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558bb1a3d820 <col:114> 'int' 0
|-CXXMethodDecl 0x558bb1a33148 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x558bb1a32e90 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x558bb1a32f08 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x558bb1a32f88 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x558bb1a3d858 <col:96> 'int' 0
| `-ParmVarDecl 0x558bb1a33000 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x558bb1a3d898 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558bb1a3d878 <col:116> 'int' 0
|-CXXMethodDecl 0x558bb1a334c8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x558bb1a33218 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x558bb1a33290 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x558bb1a33310 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x558bb1a3d8d0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x558bb1a3d8b0 <col:109> 'int' 0
| `-ParmVarDecl 0x558bb1a33388 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x558bb1a3d908 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558bb1a3d8e8 <col:129> 'int' 0
|-CXXMethodDecl 0x558bb1a33848 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x558bb1a33598 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x558bb1a33610 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x558bb1a33690 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x558bb1a33708 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x558bb1a3d940 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558bb1a3d920 <col:117> 'int' 0
|-CXXMethodDecl 0x558bb1a33bd8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x558bb1a33920 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558bb1a33998 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x558bb1a33a18 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x558bb1a3d958 <col:99> 'int' 0
| `-ParmVarDecl 0x558bb1a33a90 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x558bb1a3d998 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x558bb1a3d978 <col:119> 'int' 0
|-CXXMethodDecl 0x558bb1a33ff8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x558bb1a33ca8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x558bb1a33d28 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x558bb1a33da0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x558bb1a33e20 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x558bb1a3d9d0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x558bb1a3d9b0 <col:108> 'int' 0
| `-ParmVarDecl 0x558bb1a33ea0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x558bb1a3da08 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x558bb1a3d9e8 <col:141> 'int' 0
|-CXXMethodDecl 0x558bb1a34418 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x558bb1a340d0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x558bb1a34150 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x558bb1a341c8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x558bb1a34248 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x558bb1a342c8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x558bb1a3da20 <col:121> 'int' 0
|-CXXMethodDecl 0x558bb1a34848 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x558bb1a344f8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x558bb1a34578 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x558bb1a345f0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x558bb1a34670 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x558bb1a3da40 <col:98> 'int' 0
| `-ParmVarDecl 0x558bb1a346f0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x558bb1a3da60 <col:123> 'int' 0
|-CXXMethodDecl 0x558bb1a34b10 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x558bb1a34920 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x558bb1a349a0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x558bb1a34a20 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x558bb1a3da80 <col:80> 'int' 0
|-EnumDecl 0x558bb1a34bc8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x558bb1a34cd0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x558bb1a34f60 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb1a34cb0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x558bb1a34c90 <col:42> 'int' 1
| |-EnumConstantDecl 0x558bb1a34d60 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x558bb1a34f78 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb1a34d40 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x558bb1a34d20 <col:40> 'int' 2
| |-EnumConstantDecl 0x558bb1a34df0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x558bb1a34f90 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb1a34dd0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x558bb1a34db0 <col:44> 'int' 4
| |-EnumConstantDecl 0x558bb1a34e80 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x558bb1a34fa8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb1a34e60 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x558bb1a34e40 <col:36> 'int' 7
| `-EnumConstantDecl 0x558bb1a34f10 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x558bb1a34fc0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558bb1a34ef0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x558bb1a34ed0 <col:34> 'int' 6
|-CXXMethodDecl 0x558bb1a35278 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x558bb1a34fe8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x558bb1a35088 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x558bb1a35108 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x558bb1a35180 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x558bb1a3db38 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x558bb1a3db20 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x558bb1a3db08 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x558bb1a3dae8 <col:98, col:105> 'String' (CXXTemporary 0x558bb1a3dae8)
|           `-CXXTemporaryObjectExpr 0x558bb1a3dab0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x558bb1a35518 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x558bb1a35348 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x558bb1a353c0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x558bb1a35438 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x558bb1a3dbe8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x558bb1a3dbd0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x558bb1a3dbb8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x558bb1a3db98 <col:94, col:101> 'String' (CXXTemporary 0x558bb1a3db98)
| |         `-CXXTemporaryObjectExpr 0x558bb1a3db60 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x558bb1a3e3d0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x558bb1a3e348 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x558bb1a3e318 <col:9> '<bound member function type>' ->add_task_handlers 0x558bb1a35278
|     | `-CXXThisExpr 0x558bb1a3e308 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x558bb1a3e388 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x558bb1a3e288 <col:27> 'Task *' lvalue ParmVar 0x558bb1a35348 'task' 'Task *'
|     |-ImplicitCastExpr 0x558bb1a3e3a0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x558bb1a3e2a8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x558bb1a353c0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x558bb1a3e3b8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x558bb1a3e2c8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x558bb1a34f10 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x558bb1a3e2e8 <col:62> 'const String' lvalue ParmVar 0x558bb1a35438 'prefix' 'const String &'
|-CXXMethodDecl 0x558bb1a35728 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x558bb1a355e0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x558bb1a35658 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x558bb1a3dc98 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x558bb1a3dc80 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x558bb1a3dc68 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x558bb1a3dc48 <col:70, col:77> 'String' (CXXTemporary 0x558bb1a3dc48)
| |         `-CXXTemporaryObjectExpr 0x558bb1a3dc10 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x558bb1a3e5a8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x558bb1a3e520 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x558bb1a3e4f0 <col:9> '<bound member function type>' ->add_task_handlers 0x558bb1a35278
|     | `-CXXThisExpr 0x558bb1a3e4e0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x558bb1a3e560 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x558bb1a3e460 <col:27> 'Task *' lvalue ParmVar 0x558bb1a355e0 'task' 'Task *'
|     |-ImplicitCastExpr 0x558bb1a3e578 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x558bb1a3e480 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x558bb1a3e590 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x558bb1a3e4a0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x558bb1a34f10 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x558bb1a3e4c0 <col:57> 'const String' lvalue ParmVar 0x558bb1a35658 'prefix' 'const String &'
|-CXXMethodDecl 0x558bb1a35a08 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x558bb1a357f0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558bb1a35870 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558bb1a358e8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x558bb1a35cb8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x558bb1a35ad8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558bb1a35b58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558bb1a35bd8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x558bb1a35fa8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x558bb1a35d88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558bb1a35e08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558bb1a35e80 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x558bb1a36258 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x558bb1a36078 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558bb1a360f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558bb1a36178 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x558bb1a36508 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x558bb1a36328 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558bb1a363a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558bb1a36428 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x558bb1a367b8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x558bb1a365d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558bb1a36658 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558bb1a366d0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x558bb1a36a68 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x558bb1a36888 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558bb1a36908 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558bb1a36988 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x558bb1a36d78 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x558bb1a36b90 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558bb1a36c10 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558bb1a36c90 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x558bb1a37058 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x558bb1a36e48 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558bb1a36ec8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558bb1a36f70 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x558bb1a37338 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x558bb1a37128 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558bb1a371a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558bb1a37250 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x558bb1a375a0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x558bb1a37408 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x558bb1a37488 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x558bb1a37500 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x558bb1a37848 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x558bb1a37670 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x558bb1a376f0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x558bb1a37768 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x558bb1a37af8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x558bb1a37918 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558bb1a37998 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558bb1a37a18 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x558bb1a37da8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x558bb1a37bc8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558bb1a37c48 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558bb1a37cc0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x558bb1a38058 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x558bb1a37e78 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558bb1a37ef8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558bb1a37f70 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x558bb1a38328 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x558bb1a38128 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558bb1a381a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x558bb1a38248 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x558bb1a38658 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x558bb1a383f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x558bb1a38478 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x558bb1a384f0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x558bb1a38568 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x558bb1a3dcb0 <col:93> 'bool' false
|-CXXMethodDecl 0x558bb1a38840 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x558bb1a38728 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x558bb1a387a8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x558bb1a38a18 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x558bb1a38900 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x558bb1a38980 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x558bb1a38cf8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x558bb1a38ad8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x558bb1a38b50 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x558bb1a38bd0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x558bb1a38c48 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x558bb1a38fe8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x558bb1a38dc8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x558bb1a38e40 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x558bb1a38ec0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x558bb1a38f38 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x558bb1a39220 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x558bb1a390c0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x558bb1a39140 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x558bb1a39408 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x558bb1a392e8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x558bb1a39368 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x558bb1a394b8 prev 0x558bb1a30c58 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x558bb1a395b0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x558bb1a39640 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x558bb1a396b8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x558bb1a39778 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x558bb1a39840 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x558bb1a399b8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x558bb1a398f0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x558bb1a39a60 <col:24>
| | `-OptimizeNoneAttr 0x558bb1a39ab8 <col:34>
| |-CXXMethodDecl 0x558bb1a39b00 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x558bb1a39db8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x558bb1a39bb0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x558bb1a39c28 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x558bb1a39ca8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x558bb1a39e70 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x558bb1a39ea8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x558bb1a39f10 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x558bb1a39f98 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x558bb1a3a2b8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x558bb1a3a050 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x558bb1a3a0c8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x558bb1a3a140 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x558bb1a3a1c0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x558bb1a3a3d0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x558bb1a41d48 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x558bb1a41d48
| | `-ParmVarDecl 0x558bb1a41e58 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x558bb1a41ef8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x558bb1a41ef8
| | `-ParmVarDecl 0x558bb1a42008 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x558bb1b30da0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x558bb1a3a448 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x558bb1a3a4e8 <col:38> "" ""
|-CXXMethodDecl 0x558bb1a3a578 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x558bb1a3a618 <col:44> "" ""
|-AccessSpecDecl 0x558bb1a3a688 <line:260:3, col:10> col:3 private
|-EnumDecl 0x558bb1a3a6b0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x558bb1a3a7b0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x558bb1a3a800 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558bb1a3a790 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x558bb1a3a770 <col:27> 'int' 4
|-FieldDecl 0x558bb1a3a8b8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x558bb1a3aa68 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x558bb1a3ab20 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x558bb1a3bbb0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x558bb1a3bc18 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x558bb1a3bd68 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x558bb1a3bca8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x558bb1a3bf18 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x558bb1a3be28 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x558bb1a3c0f8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x558bb1a3bfd8 <col:20> col:23 'int'
| `-ParmVarDecl 0x558bb1a3c058 <col:25> col:28 'int'
|-CXXMethodDecl 0x558bb1a3c3a0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x558bb1a3c1c0 <col:23> col:26 'int'
| |-ParmVarDecl 0x558bb1a3c240 <col:28> col:31 'int'
| `-ParmVarDecl 0x558bb1a3c2b8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x558bb1a3c458 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x558bb1a3c520 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x558bb1a3c570 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x558bb1a3c5c0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x558bb1a3c7a0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x558bb1a3c650 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x558bb1a3c6c8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x558bb1a3ca48 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x558bb1a3c868 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x558bb1a3c8e8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x558bb1a3c960 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x558bb1a3cc68 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x558bb1a3cb18 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x558bb1a3cb98 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x558bb1a3cfa0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x558bb1a3cd28 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x558bb1a3cda8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x558bb1a3ce20 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x558bb1a3cea0 <col:57> col:60 'int'
|-CXXMethodDecl 0x558bb1a3d188 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x558bb1a3d070 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x558bb1a3d0f0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x558bb1a3d2d8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x558bb1a3d248 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x558bb1a3d658 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x558bb1a3d398 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x558bb1a3d418 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x558bb1a3d490 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x558bb1a3d510 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x558bb1a3d770 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | class CheckARPHeader
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   unsigned int _offset
   112:0-0 |   _Bool _verbose
       116 |   class atomic_uint32_t _drops
       116 |     uint32_t _val
       120 |   class atomic_uint32_t * _reason_drops
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558bb17eaf80 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558bb17eb098 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x558bb17eb128 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x558bb17eb1f8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x558bb17eb2e0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x558bb17eb4f8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x558bb17eb3a0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558bb17eb6a8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x558bb17eb5b0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x558bb17eb7f0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x558bb17eb760 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x558bb17eb938 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x558bb17eb8a8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558bb17eba80 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x558bb17eb9f0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558bb17ebb48 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x558bb17ebc90 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x558bb17ebc00 <col:28> col:31 'int'
|-CXXMethodDecl 0x558bb17ebd58 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x558bb17ebea0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x558bb17ebe10 <col:28> col:31 'int'
|-CXXMethodDecl 0x558bb17ec018 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x558bb17ebf58 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558bb17ec160 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x558bb17ec0d0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558bb17ec228 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x558bb17ec3e8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x558bb17ec2d8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x558bb17ec350 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558bb17ec638 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x558bb17ec4a8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x558bb17ec520 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x558bb17ec6e8 <col:86> "" ""
|-CXXMethodDecl 0x558bb17ec958 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x558bb17ec7c8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x558bb17ec840 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558bb17ecb08 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x558bb17eca18 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x558bb17eccb8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x558bb17ecbc0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x558bb17ecf88 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x558bb17ecd70 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x558bb17ecde8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x558bb17ece60 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558bb17ed268 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x558bb17ed050 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x558bb17ed0c8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x558bb17ed140 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x558bb17ed320 <col:115> "" ""
|-AccessSpecDecl 0x558bb17ed390 <line:84:3, col:10> col:3 private
|-FieldDecl 0x558bb17ed3c8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558bb17ee8e0 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x558bb17ee8e0
| `-ParmVarDecl 0x558bb17ee9e8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x558bb17eea88 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x558bb17eea88
| `-ParmVarDecl 0x558bb17eeb98 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x558bb18241c8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x558bb1a15fc0 <col:7>
|-CXXConstructorDecl 0x558bb18242a0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x558bb18242a0
| `-ParmVarDecl 0x558bb18243b8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x558bb1824428 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x558bb1824428
| `-ParmVarDecl 0x558bb1824538 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x558bb1a189c0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558bb1a44eb8 <../elements/ethernet/checkarpheader.hh:65:1, line:100:1> line:65:7 class CheckARPHeader definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x558bb1a45018 <col:1, col:7> col:7 implicit referenced class CheckARPHeader
|-AccessSpecDecl 0x558bb1a450a8 <col:41, col:47> col:41 public
|-CXXConstructorDecl 0x558bb1a45130 <line:67:3, col:18> col:3 CheckARPHeader 'void ()'
|-CXXDestructorDecl 0x558bb1a45220 <line:68:3, col:19> col:3 ~CheckARPHeader 'void ()' noexcept-unevaluated 0x558bb1a45220
| `-Overrides: [ 0x558bb1a2c7a8 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x558bb1a45350 <line:70:5, col:63> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x558bb1a2dc08 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x558bb1a46788 <col:36, col:63>
|   `-ReturnStmt 0x558bb1a46778 <col:38, col:45>
|     `-ImplicitCastExpr 0x558bb1a46760 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x558bb1a46738 <col:45> 'const char [15]' lvalue "CheckARPHeader"
|-CXXMethodDecl 0x558bb1a45418 <line:71:5, col:58> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x558bb1a2dcd0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x558bb1a467e8 <col:36, col:58>
|   `-ReturnStmt 0x558bb1a467d8 <col:38, col:45>
|     `-ImplicitCastExpr 0x558bb1a467c0 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x558bb1a467a0 <col:45> 'const char []' lvalue Var 0x558bb1a2e008 'PORTS_1_1X2' 'const char []'
|-CXXMethodDecl 0x558bb1a454e0 <line:72:5, col:62> col:17 processing 'const char *() const'
| |-Overrides: [ 0x558bb1a2e098 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x558bb1a46848 <col:36, col:62>
|   `-ReturnStmt 0x558bb1a46838 <col:38, col:45>
|     `-ImplicitCastExpr 0x558bb1a46820 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x558bb1a46800 <col:45> 'const char []' lvalue Var 0x558bb1a2e400 'PROCESSING_A_AH' 'const char []'
|-CXXMethodDecl 0x558bb1a457b0 <line:74:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x558bb1a2f4a0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x558bb1a45660 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x558bb1a456d8 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x558bb1a45880 <line:75:3, col:21> col:8 add_handlers 'void ()'
| `-Overrides: [ 0x558bb1a2f570 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x558bb1a459c0 <line:77:3, col:33> col:11 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x558bb1a2cde8 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x558bb1a45930 <col:25, col:32> col:33 'Packet *'
|-AccessSpecDecl 0x558bb1a45a68 <line:79:2, col:9> col:2 private
|-FieldDecl 0x558bb1a45aa8 <line:81:3, col:12> col:12 _offset 'unsigned int'
|-FieldDecl 0x558bb1a45b48 <line:83:3, col:19> col:8 _verbose 'bool'
| `-ConstantExpr 0x558bb1a45b28 <col:19> 'int' Int: 1
|   `-IntegerLiteral 0x558bb1a45af8 <col:19> 'int' 1
|-FieldDecl 0x558bb1a45ba8 <line:85:3, col:19> col:19 referenced _drops 'atomic_uint32_t'
|-FieldDecl 0x558bb1a45c08 <line:86:3, col:20> col:20 _reason_drops 'atomic_uint32_t *'
|-EnumDecl 0x558bb1a45c58 <line:88:3, line:94:3> line:88:8 referenced Reason
| |-EnumConstantDecl 0x558bb1a45d20 <line:89:5> col:5 MINISCULE_PACKET 'CheckARPHeader::Reason'
| |-EnumConstantDecl 0x558bb1a45d70 <line:90:5> col:5 BAD_LENGTH 'CheckARPHeader::Reason'
| |-EnumConstantDecl 0x558bb1a45dc0 <line:91:5> col:5 BAD_HRD 'CheckARPHeader::Reason'
| |-EnumConstantDecl 0x558bb1a45e10 <line:92:5> col:5 BAD_PRO 'CheckARPHeader::Reason'
| `-EnumConstantDecl 0x558bb1a45e60 <line:93:5> col:5 referenced NREASONS 'CheckARPHeader::Reason'
|-VarDecl 0x558bb1a45f90 <line:95:3, col:50> col:29 reason_texts 'const char *const [4]' static
|-CXXMethodDecl 0x558bb1a46158 <line:97:3, col:32> col:11 drop 'Packet *(CheckARPHeader::Reason, Packet *)'
| |-ParmVarDecl 0x558bb1a46008 <col:16> col:22 'CheckARPHeader::Reason'
| `-ParmVarDecl 0x558bb1a46080 <col:24, col:31> col:32 'Packet *'
|-CXXMethodDecl 0x558bb1a46330 <line:98:3, col:47> col:17 read_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x558bb1a46218 <col:30, col:38> col:39 'Element *'
| `-ParmVarDecl 0x558bb1a46298 <col:41, col:46> col:47 'void *'
|-CXXConstructorDecl 0x558bb1a46408 <line:65:7> col:7 implicit CheckARPHeader 'void (const CheckARPHeader &)' inline default_delete noexcept-unevaluated 0x558bb1a46408
| `-ParmVarDecl 0x558bb1a46518 <col:7> col:7 'const CheckARPHeader &'
`-CXXMethodDecl 0x558bb1a465b8 <col:7> col:7 implicit operator= 'CheckARPHeader &(const CheckARPHeader &)' inline default_delete noexcept-unevaluated 0x558bb1a465b8
  `-ParmVarDecl 0x558bb1a466c8 <col:7> col:7 'const CheckARPHeader &'

Layout: <CGRecordLayout
  LLVMType:%class.CheckARPHeader = type { %class.Element.base, i32, i8, %class.atomic_uint32_t, %class.atomic_uint32_t* }
  NonVirtualBaseLLVMType:%class.CheckARPHeader = type { %class.Element.base, i32, i8, %class.atomic_uint32_t, %class.atomic_uint32_t* }
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:1 IsSigned:0 StorageSize:8 StorageOffset:112>
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558bb1800370 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x558bb1800488 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x558bb1800528 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x558bb1800588 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x558bb18005e8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x558bb1800698 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558bb18009a0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558bb1800ab8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x558bb1800b60 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x558bb1800bc8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x558bb1800c58 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x558bb1806cf0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x558bb1807128 <col:12>
|-CXXConstructorDecl 0x558bb1806df8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x558bb1806f08 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x558bb1800b60 'data' 'const char *'
| | `-ImplicitCastExpr 0x558bb18096b0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x558bb1809680 <col:12> 'const char *const' lvalue .data 0x558bb1800b60
| |     `-DeclRefExpr 0x558bb1809660 <col:12> 'const String::rep_t' lvalue ParmVar 0x558bb1806f08 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x558bb1800bc8 'length' 'int'
| | `-ImplicitCastExpr 0x558bb1809740 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x558bb1809710 <col:12> 'const int' lvalue .length 0x558bb1800bc8
| |     `-DeclRefExpr 0x558bb18096f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x558bb1806f08 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x558bb1800c58 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x558bb18097d0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x558bb18097a0 <col:12> 'String::memo_t *const' lvalue .memo 0x558bb1800c58
| |     `-DeclRefExpr 0x558bb1809780 <col:12> 'const String::rep_t' lvalue ParmVar 0x558bb1806f08 '' 'const String::rep_t &'
| `-CompoundStmt 0x558bb1809828 <col:12>
|-CXXConstructorDecl 0x558bb1806fa8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x558bb1806fa8
| `-ParmVarDecl 0x558bb18070b8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x558bb180c610 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x558bb1818028 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x558bb1818138 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x558bb1818650 <col:12>
|   |-BinaryOperator 0x558bb1818468 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x558bb1818420 <col:12> 'const char *' lvalue ->data 0x558bb1800b60
|   | | `-CXXThisExpr 0x558bb1818410 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x558bb1818450 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x558bb18183e0 <col:12> 'const char *const' lvalue .data 0x558bb1800b60
|   |     `-DeclRefExpr 0x558bb18183c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x558bb1818138 '' 'const String::rep_t &'
|   |-BinaryOperator 0x558bb1818530 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x558bb18184e8 <col:12> 'int' lvalue ->length 0x558bb1800bc8
|   | | `-CXXThisExpr 0x558bb18184d8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x558bb1818518 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x558bb18184a8 <col:12> 'const int' lvalue .length 0x558bb1800bc8
|   |     `-DeclRefExpr 0x558bb1818488 <col:12> 'const String::rep_t' lvalue ParmVar 0x558bb1818138 '' 'const String::rep_t &'
|   |-BinaryOperator 0x558bb18185f8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x558bb18185b0 <col:12> 'String::memo_t *' lvalue ->memo 0x558bb1800c58
|   | | `-CXXThisExpr 0x558bb18185a0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x558bb18185e0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x558bb1818570 <col:12> 'String::memo_t *const' lvalue .memo 0x558bb1800c58
|   |     `-DeclRefExpr 0x558bb1818550 <col:12> 'const String::rep_t' lvalue ParmVar 0x558bb1818138 '' 'const String::rep_t &'
|   `-ReturnStmt 0x558bb1818640 <col:12>
|     `-UnaryOperator 0x558bb1818628 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558bb1818618 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x558bb18181a8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x558bb18181a8
  `-ParmVarDecl 0x558bb18182b8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558bb17f78e0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x558bb17f79f8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x558bb17f7a88 <col:16, col:22> col:16 public
|-TypedefDecl 0x558bb17f7ac8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x558bb14cae00 'const char *'
|   `-QualType 0x558bb14ca351 'const char' const
|     `-BuiltinType 0x558bb14ca350 'char'
|-TypedefDecl 0x558bb17f7b50 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x558bb17f7b20 'String::const_iterator' sugar
|   |-Typedef 0x558bb17f7ac8 'const_iterator'
|   `-PointerType 0x558bb14cae00 'const char *'
|     `-QualType 0x558bb14ca351 'const char' const
|       `-BuiltinType 0x558bb14ca350 'char'
|-TypedefDecl 0x558bb17f7cc0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x558bb17f7c30 'int (String::*)() const'
|   |-RecordType 0x558bb17f7970 'String'
|   | `-CXXRecord 0x558bb17f78e0 'String'
|   `-ParenType 0x558bb17f7bd0 'int () const' sugar
|     `-FunctionProtoType 0x558bb17cb760 'int () const' const cdecl
|       `-BuiltinType 0x558bb14ca3b0 'int'
|-TypedefDecl 0x558bb17f7d28 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x558bb1620340 'int64_t' sugar
|   |-Typedef 0x558bb15332a0 'int64_t'
|   `-TypedefType 0x558bb150c510 '__int64_t' sugar
|     |-Typedef 0x558bb150c0e8 '__int64_t'
|     `-BuiltinType 0x558bb14ca3d0 'long'
|-TypedefDecl 0x558bb17f7d90 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x558bb1620260 'uint64_t' sugar
|   |-Typedef 0x558bb1533440 'uint64_t'
|   `-TypedefType 0x558bb150c5a0 '__uint64_t' sugar
|     |-Typedef 0x558bb150c158 '__uint64_t'
|     `-BuiltinType 0x558bb14ca470 'unsigned long'
|-TypedefDecl 0x558bb17f7e20 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x558bb17f7df0 'String::intmax_t' sugar
|   |-Typedef 0x558bb17f7d28 'intmax_t'
|   `-TypedefType 0x558bb1620340 'int64_t' sugar
|     |-Typedef 0x558bb15332a0 'int64_t'
|     `-TypedefType 0x558bb150c510 '__int64_t' sugar
|       |-Typedef 0x558bb150c0e8 '__int64_t'
|       `-BuiltinType 0x558bb14ca3d0 'long'
|-TypedefDecl 0x558bb17f7eb0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x558bb17f7e80 'String::uintmax_t' sugar
|   |-Typedef 0x558bb17f7d90 'uintmax_t'
|   `-TypedefType 0x558bb1620260 'uint64_t' sugar
|     |-Typedef 0x558bb1533440 'uint64_t'
|     `-TypedefType 0x558bb150c5a0 '__uint64_t' sugar
|       |-Typedef 0x558bb150c158 '__uint64_t'
|       `-BuiltinType 0x558bb14ca470 'unsigned long'
|-CXXConstructorDecl 0x558bb17f7f70 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x558bb17f8118 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x558bb17f8058 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x558bb17f82c8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x558bb17f8208 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x558bb17f8420 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x558bb17f8390 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x558bb17f8638 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x558bb17f84e8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x558bb17f8568 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x558bb17f8858 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x558bb17f8708 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x558bb17f8788 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x558bb17f8a78 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x558bb17f8928 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x558bb17f89a8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x558bb17f8c98 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x558bb17f8b48 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x558bb17f8bc8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x558bb17f8e28 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x558bb17f8d60 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x558bb17f8fa8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x558bb17f8ee8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x558bb17f9138 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x558bb17f9070 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x558bb17f9290 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x558bb17f9200 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x558bb17f93e8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x558bb17f9358 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x558bb17f9540 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x558bb17f94b0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x558bb17f96c8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x558bb17f9608 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x558bb17f9858 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x558bb17f9790 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x558bb17f99e8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x558bb17f9920 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x558bb17f9b78 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x558bb17f9ab0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x558bb17f9c70 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x558bb17f9d98 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x558bb17f9f18 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x558bb17f9e50 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x558bb17fa068 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x558bb17f9fd8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x558bb17fa120 <col:63> "" ""
|-CXXMethodDecl 0x558bb17fa268 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x558bb17fa1a8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x558bb17fa478 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x558bb17fa328 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x558bb17fa3a8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x558bb17fa698 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x558bb17fa540 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x558bb17fa5c0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x558bb17fa978 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x558bb17fa758 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x558bb17fa7d8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x558bb18067c0 <col:55> 'int' 10
| `-ParmVarDecl 0x558bb17fa850 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x558bb18067e0 <col:76> 'bool' true
|-CXXMethodDecl 0x558bb17fac58 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x558bb17faa40 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x558bb17faac0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x558bb18067f0 <col:56> 'int' 10
| `-ParmVarDecl 0x558bb17fab38 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x558bb1806810 <col:77> 'bool' true
|-CXXMethodDecl 0x558bb17fad60 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x558bb17fae28 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x558bb17faef0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x558bb17faf90 <col:20>
| `-OptimizeNoneAttr 0x558bb17fafe8 <col:30>
|-CXXConversionDecl 0x558bb17fb0d8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x558bb17fb1a8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x558bb17fb268 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x558bb17fb358 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x558bb17fb418 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x558bb17fb598 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x558bb17fb4d0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x558bb17fb6e8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x558bb17fb658 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x558bb17fb7d8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x558bb17fb898 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x558bb17fbae8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x558bb17fb950 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x558bb17fb9d0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x558bb17fbd48 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x558bb17fbbb0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x558bb17fbc30 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x558bb17fbe18 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x558bb17fc028 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x558bb17fbed0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x558bb17fbf50 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x558bb17fc248 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x558bb17fc0f0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x558bb17fc170 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x558bb17fc3d8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x558bb17fc310 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x558bb17fc4c8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x558bb17fc638 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x558bb17fc578 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x558bb17fc848 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x558bb17fc6f8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x558bb17fc778 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x558bb17fca60 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x558bb17fc908 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x558bb17fc980 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x558bb17fcbf0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x558bb17fcb20 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x558bb17fce10 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x558bb17fccb0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x558bb17fcd30 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x558bb17fcf60 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x558bb17fced0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x558bb17fd138 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x558bb17fd020 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x558bb17fd0a0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x558bb17fd288 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x558bb17fd1f8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x558bb17fd4a0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x558bb17fd340 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x558bb17fd3c0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x558bb1806820 <col:39> 'int' 0
|-CXXMethodDecl 0x558bb17fd6c0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x558bb17fd560 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x558bb17fd5e0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x558bb1806840 <col:48> 'int' 0
|-CXXMethodDecl 0x558bb17fd8a0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x558bb17fd780 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x558bb17fd800 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x558bb1806860 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x558bb17fd970 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x558bb17fda30 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x558bb17fdaf0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x558bb17fdbb0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x558bb17fdc70 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x558bb17fde18 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x558bb17fdd20 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x558bb17fdf98 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x558bb17fded0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x558bb17fe170 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x558bb17fe058 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x558bb17fe2e8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x558bb17fe228 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x558bb17fe430 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x558bb17fe3a0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x558bb17fe580 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x558bb17fe4f0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x558bb17fe758 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x558bb17fe640 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x558bb17fe6c0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x558bb17fe938 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x558bb17fe820 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x558bb17fe8a0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x558bb17fea88 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x558bb17fe9f8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x558bb17fec98 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x558bb17feb48 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x558bb17febc8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x558bb17fedf8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x558bb17fed60 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x558bb17fef50 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x558bb17feeb8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x558bb17feff8 <col:57> "" ""
|-CXXMethodDecl 0x558bb17ff108 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x558bb17ff078 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x558bb17ff258 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x558bb17ff1c8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x558bb17ff3d8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x558bb17ff310 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x558bb17ff4a0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x558bb17ff560 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x558bb17ff620 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x558bb17ff6c0 <col:49> "" ""
|-CXXMethodDecl 0x558bb17ff750 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x558bb17ff810 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x558bb17ff900 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x558bb17ff9c8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x558bb17ffa88 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x558bb17ffb48 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x558bb17ffc40 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x558bb17ffd08 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x558bb17ffdd0 <line:174:5, col:42> col:31 used empty_data 'const char *()' static inline
|-CXXMethodDecl 0x558bb17fffa8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x558bb17ffe88 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x558bb17fff08 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x558bb18001d0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x558bb1800070 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x558bb18000f0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x558bb18002e0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x558bb1800348 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x558bb1800370 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x558bb1800488 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x558bb1800528 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x558bb1800588 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x558bb18005e8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x558bb1800698 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x558bb1800700 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x558bb1800938 <line:201:2, col:32> col:2 referenced MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x558bb1800988 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558bb1800918 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x558bb1800828 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x558bb18007d0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x558bb1800810 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x558bb18007f0 <col:32> 'int' 8
|-CXXRecordDecl 0x558bb18009a0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x558bb1800ab8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x558bb1800b60 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x558bb1800bc8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x558bb1800c58 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x558bb1806cf0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x558bb1807128 <col:12>
| |-CXXConstructorDecl 0x558bb1806df8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x558bb1806f08 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x558bb1800b60 'data' 'const char *'
| | | `-ImplicitCastExpr 0x558bb18096b0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x558bb1809680 <col:12> 'const char *const' lvalue .data 0x558bb1800b60
| | |     `-DeclRefExpr 0x558bb1809660 <col:12> 'const String::rep_t' lvalue ParmVar 0x558bb1806f08 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x558bb1800bc8 'length' 'int'
| | | `-ImplicitCastExpr 0x558bb1809740 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x558bb1809710 <col:12> 'const int' lvalue .length 0x558bb1800bc8
| | |     `-DeclRefExpr 0x558bb18096f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x558bb1806f08 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x558bb1800c58 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x558bb18097d0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x558bb18097a0 <col:12> 'String::memo_t *const' lvalue .memo 0x558bb1800c58
| | |     `-DeclRefExpr 0x558bb1809780 <col:12> 'const String::rep_t' lvalue ParmVar 0x558bb1806f08 '' 'const String::rep_t &'
| | `-CompoundStmt 0x558bb1809828 <col:12>
| |-CXXConstructorDecl 0x558bb1806fa8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x558bb1806fa8
| | `-ParmVarDecl 0x558bb18070b8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x558bb180c610 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x558bb1818028 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x558bb1818138 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x558bb1818650 <col:12>
| |   |-BinaryOperator 0x558bb1818468 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x558bb1818420 <col:12> 'const char *' lvalue ->data 0x558bb1800b60
| |   | | `-CXXThisExpr 0x558bb1818410 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x558bb1818450 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x558bb18183e0 <col:12> 'const char *const' lvalue .data 0x558bb1800b60
| |   |     `-DeclRefExpr 0x558bb18183c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x558bb1818138 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x558bb1818530 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x558bb18184e8 <col:12> 'int' lvalue ->length 0x558bb1800bc8
| |   | | `-CXXThisExpr 0x558bb18184d8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x558bb1818518 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x558bb18184a8 <col:12> 'const int' lvalue .length 0x558bb1800bc8
| |   |     `-DeclRefExpr 0x558bb1818488 <col:12> 'const String::rep_t' lvalue ParmVar 0x558bb1818138 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x558bb18185f8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x558bb18185b0 <col:12> 'String::memo_t *' lvalue ->memo 0x558bb1800c58
| |   | | `-CXXThisExpr 0x558bb18185a0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x558bb18185e0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x558bb1818570 <col:12> 'String::memo_t *const' lvalue .memo 0x558bb1800c58
| |   |     `-DeclRefExpr 0x558bb1818550 <col:12> 'const String::rep_t' lvalue ParmVar 0x558bb1818138 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x558bb1818640 <col:12>
| |     `-UnaryOperator 0x558bb1818628 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x558bb1818618 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x558bb18181a8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x558bb18181a8
|   `-ParmVarDecl 0x558bb18182b8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x558bb1800cd0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x558bb1800f18 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x558bb1800d38 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x558bb1800db8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x558bb1800e30 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x558bb1806cb0 <col:79, line:261:5>
|   |-BinaryOperator 0x558bb1806928 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x558bb18068c0 <col:2, col:5> 'const char *' lvalue .data 0x558bb1800b60
|   | | `-MemberExpr 0x558bb1806890 <col:2> 'String::rep_t' lvalue ->_r 0x558bb1800cd0
|   | |   `-CXXThisExpr 0x558bb1806880 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x558bb1806910 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x558bb18068f0 <col:12> 'const char *' lvalue ParmVar 0x558bb1800d38 'data' 'const char *'
|   |-BinaryOperator 0x558bb18069f0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x558bb1806988 <col:2, col:5> 'int' lvalue .length 0x558bb1800bc8
|   | | `-MemberExpr 0x558bb1806958 <col:2> 'String::rep_t' lvalue ->_r 0x558bb1800cd0
|   | |   `-CXXThisExpr 0x558bb1806948 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x558bb18069d8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x558bb18069b8 <col:14> 'int' lvalue ParmVar 0x558bb1800db8 'length' 'int'
|   `-IfStmt 0x558bb1806c98 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x558bb1806b10 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x558bb1806af8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x558bb1806ad8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x558bb1806ab8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x558bb1806a50 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x558bb1800c58
|     |       | `-MemberExpr 0x558bb1806a20 <col:7> 'String::rep_t' lvalue ->_r 0x558bb1800cd0
|     |       |   `-CXXThisExpr 0x558bb1806a10 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x558bb1806aa0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x558bb1806a80 <col:17> 'String::memo_t *' lvalue ParmVar 0x558bb1800e30 'memo' 'String::memo_t *'
|     `-CallExpr 0x558bb1806c70 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x558bb1806c58 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x558bb1806b60 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x558bb17ef948 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x558bb1806bc8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x558bb1800528
|         `-ImplicitCastExpr 0x558bb1806bb0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x558bb1806b90 <col:27> 'String::memo_t *' lvalue ParmVar 0x558bb1800e30 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x558bb18011c8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x558bb1800fe8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x558bb1801068 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x558bb18010e0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x558bb1800cd0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x558bb1807138 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x558bb18072c8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x558bb1807230 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x558bb18071a0 <col:2> '<bound member function type>' ->assign_memo 0x558bb1800f18
|     | `-ImplicitCastExpr 0x558bb1807268 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x558bb1807190 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x558bb1807280 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x558bb18071d0 <col:14> 'const char *' lvalue ParmVar 0x558bb1800fe8 'data' 'const char *'
|     |-ImplicitCastExpr 0x558bb1807298 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x558bb18071f0 <col:20> 'int' lvalue ParmVar 0x558bb1801068 'length' 'int'
|     `-ImplicitCastExpr 0x558bb18072b0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x558bb1807210 <col:28> 'String::memo_t *' lvalue ParmVar 0x558bb18010e0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x558bb1801358 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x558bb1801298 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x558bb1807520 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x558bb18074a0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x558bb18072f0 <col:2> '<bound member function type>' ->assign_memo 0x558bb1800f18
|     | `-CXXThisExpr 0x558bb18072e0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x558bb18074d8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x558bb1807370 <col:14, col:19> 'const char *' lvalue .data 0x558bb1800b60
|     |   `-MemberExpr 0x558bb1807340 <col:14, col:16> 'String::rep_t' lvalue ._r 0x558bb1800cd0
|     |     `-DeclRefExpr 0x558bb1807320 <col:14> 'const String' lvalue ParmVar 0x558bb1801298 'x' 'const String &'
|     |-ImplicitCastExpr 0x558bb18074f0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x558bb18073f0 <col:25, col:30> 'int' lvalue .length 0x558bb1800bc8
|     |   `-MemberExpr 0x558bb18073c0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x558bb1800cd0
|     |     `-DeclRefExpr 0x558bb18073a0 <col:25> 'const String' lvalue ParmVar 0x558bb1801298 'x' 'const String &'
|     `-ImplicitCastExpr 0x558bb1807508 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x558bb1807470 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x558bb1800c58
|         `-MemberExpr 0x558bb1807440 <col:38, col:40> 'String::rep_t' lvalue ._r 0x558bb1800cd0
|           `-DeclRefExpr 0x558bb1807420 <col:38> 'const String' lvalue ParmVar 0x558bb1801298 'x' 'const String &'
|-CXXMethodDecl 0x558bb1801420 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x558bb1807ee0 <col:31, line:278:5>
|   `-IfStmt 0x558bb1807ec8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x558bb18075c0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x558bb18075a8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x558bb1807578 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x558bb1800c58
|     |     `-MemberExpr 0x558bb1807548 <col:6> 'String::rep_t' lvalue ->_r 0x558bb1800cd0
|     |       `-CXXThisExpr 0x558bb1807538 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x558bb1807ea0 <col:15, line:277:2>
|       |-ParenExpr 0x558bb1807a70 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x558bb1807a40 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x558bb18076d0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x558bb18076b8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x558bb18076a0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x558bb1807660 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x558bb1800528
|       |   |       `-ImplicitCastExpr 0x558bb1807648 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x558bb1807618 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x558bb1800c58
|       |   |           `-MemberExpr 0x558bb18075e8 <col:27> 'String::rep_t' lvalue ->_r 0x558bb1800cd0
|       |   |             `-CXXThisExpr 0x558bb18075d8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x558bb1807730 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x558bb1807710 <col:54> 'int' 0
|       |   `-CallExpr 0x558bb18079a0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x558bb1807988 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x558bb1807908 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558bb1566bb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x558bb18079e0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x558bb1807818 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x558bb18079f8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x558bb1807848 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x558bb1807a10 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x558bb1807880 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x558bb1807a28 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x558bb18078f0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x558bb18078d8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x558bb18078a0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x558bb1807dc0 <line:274:6, line:275:22>
|       | |-CallExpr 0x558bb1807c80 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x558bb1807c68 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x558bb1807be0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x558bb17f0d90 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x558bb1807bb0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x558bb1800528
|       | |   `-ImplicitCastExpr 0x558bb1807b98 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x558bb1807b68 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x558bb1800c58
|       | |       `-MemberExpr 0x558bb1807b38 <col:40> 'String::rep_t' lvalue ->_r 0x558bb1800cd0
|       | |         `-CXXThisExpr 0x558bb1807b28 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x558bb1807d80 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x558bb1807d68 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x558bb1807ca8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x558bb1805c00 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x558bb1807da8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x558bb1807d08 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x558bb1800c58
|       |       `-MemberExpr 0x558bb1807cd8 <col:15> 'String::rep_t' lvalue ->_r 0x558bb1800cd0
|       |         `-CXXThisExpr 0x558bb1807cc8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x558bb1807e80 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x558bb1807e18 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x558bb1800c58
|         | `-MemberExpr 0x558bb1807de8 <col:6> 'String::rep_t' lvalue ->_r 0x558bb1800cd0
|         |   `-CXXThisExpr 0x558bb1807dd8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x558bb1807e68 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x558bb1807e48 <col:16> 'int' 0
|-CXXMethodDecl 0x558bb18016b8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x558bb18014d8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x558bb1801558 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x558bb18015d0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x558bb1801790 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x558bb18019e0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x558bb1801848 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x558bb18018c8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x558bb1801940 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x558bb1801bc8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x558bb1801ab0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x558bb1801b30 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x558bb1801cc8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x558bb1807fb8 <col:41, line:286:5>
|   `-ReturnStmt 0x558bb1807fa8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x558bb1807f78 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x558bb1807f40 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x558bb1807f28 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x558bb1807f08 <col:46> 'int' 1
|-CXXMethodDecl 0x558bb1801f68 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x558bb1801d80 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x558bb1801e00 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x558bb1801e80 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x558bb1805c00 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x558bb1802030 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x558bb1805cd0 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x558bb1805ea0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x558bb1805d88 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x558bb1805e08 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x558bb1805f60 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x558bb1806028 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x558bb1806128 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x558bb18061a0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x558bb1806218 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x558bb1806280 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x558bb1806380 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x558bb18063d0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558bb1806360 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x558bb1806340 <col:22> 'int' 14
|-CXXMethodDecl 0x558bb18065e8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x558bb1806400 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x558bb1806480 <col:38> col:41 'int'
| `-ParmVarDecl 0x558bb1806500 <col:43> col:46 'int'
|-FriendDecl 0x558bb18066f0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x558bb1806780 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x558bb1a78400 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x558bb1a785d8 prev 0x558bb1a78400 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x558bb1a78668 <col:46, col:52> col:46 public
|-TypedefDecl 0x558bb1a78690 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x558bb14ca3b0 'int'
|-TypedefDecl 0x558bb1a79ff0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x558bb1a79fa0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x558bb1a79f80 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x558bb1a788a8 'type'
|     `-SubstTemplateTypeParmType 0x558bb1a78870 'String' sugar
|       |-TemplateTypeParmType 0x558bb17bb180 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558bb17bb130 'T'
|       `-RecordType 0x558bb17f7970 'String'
|         `-CXXRecord 0x558bb17f78e0 'String'
|-TypedefDecl 0x558bb1a7a0a8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x558bb1a7a070 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x558bb1a7a050 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x558bb1a79ff0 'type'
|     `-ElaboratedType 0x558bb1a79fa0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x558bb1a79f80 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x558bb1a788a8 'type'
|         `-SubstTemplateTypeParmType 0x558bb1a78870 'String' sugar
|           |-TemplateTypeParmType 0x558bb17bb180 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x558bb17bb130 'T'
|           `-RecordType 0x558bb17f7970 'String'
|             `-CXXRecord 0x558bb17f78e0 'String'
|-CXXMethodDecl 0x558bb1a7a228 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x558bb1a7a138 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x558bb1a7a318 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x558bb1a7a3f8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x558bb1a7a3f8
|-CXXMethodDecl 0x558bb1a7a6c8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x558bb1a7a5d0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x558bb1a7a908 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x558bb1a7a780 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x558bb1a7a7f8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558bb1a7aad8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x558bb1a7a9c8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x558bb1a7aa40 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558bb1a7ac38 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x558bb1a7ad08 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x558bb1a7af58 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x558bb1a7adc8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x558bb1a7ae40 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558bb1a7b1b8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x558bb1a7b028 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x558bb1a7b0a0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558bb1a7b378 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x558bb1a7b288 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558bb1a7b538 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x558bb1a7b440 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558bb1a7b5f0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x558bb1a7b6a0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x558bb1a7b8d8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x558bb1a7b750 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x558bb1a7b7c8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x558bb1a7bb78 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x558bb1a7ba80 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x558bb1a7bc40 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x558bb1a7bc90 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x558bb1a7bce0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x558bb1a2f110 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x558bb1a76e38 prev 0x558bb1a2f110 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x558bb1a78370 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x558bb1a78320 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x558bb1a78300 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x558bb1a781b0 'type'
|     `-SubstTemplateTypeParmType 0x558bb1a78040 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x558bb1790f30 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x558bb1790ed8 'F'
|       `-RecordType 0x558bb1a77c70 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x558bb1a77b90 'typed_array_memory'
|-FieldDecl 0x558bb1a7bd30 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x558bb1a7bd80 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x558bb1a7bdb8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x558bb1a76ed0 'String' sugar
|   |-TemplateTypeParmType 0x558bb17c84a0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x558bb17c8448 'T'
|   `-RecordType 0x558bb17f7970 'String'
|     `-CXXRecord 0x558bb17f78e0 'String'
|-TypedefDecl 0x558bb1a7be48 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x558bb1a7be10 'String &'
|   `-SubstTemplateTypeParmType 0x558bb1a76ed0 'String' sugar
|     |-TemplateTypeParmType 0x558bb17c84a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558bb17c8448 'T'
|     `-RecordType 0x558bb17f7970 'String'
|       `-CXXRecord 0x558bb17f78e0 'String'
|-TypedefDecl 0x558bb1a7bed8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x558bb1a7bea0 'const String &'
|   `-QualType 0x558bb1a76ed1 'const String' const
|     `-SubstTemplateTypeParmType 0x558bb1a76ed0 'String' sugar
|       |-TemplateTypeParmType 0x558bb17c84a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558bb17c8448 'T'
|       `-RecordType 0x558bb17f7970 'String'
|         `-CXXRecord 0x558bb17f78e0 'String'
|-TypedefDecl 0x558bb1a7bf68 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x558bb1a7bf30 'String *'
|   `-SubstTemplateTypeParmType 0x558bb1a76ed0 'String' sugar
|     |-TemplateTypeParmType 0x558bb17c84a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558bb17c8448 'T'
|     `-RecordType 0x558bb17f7970 'String'
|       `-CXXRecord 0x558bb17f78e0 'String'
|-TypedefDecl 0x558bb1a7bff8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x558bb1a7bfc0 'const String *'
|   `-QualType 0x558bb1a76ed1 'const String' const
|     `-SubstTemplateTypeParmType 0x558bb1a76ed0 'String' sugar
|       |-TemplateTypeParmType 0x558bb17c84a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558bb17c8448 'T'
|       `-RecordType 0x558bb17f7970 'String'
|         `-CXXRecord 0x558bb17f78e0 'String'
|-TypedefDecl 0x558bb1a7cc50 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x558bb1a7cc00 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x558bb1a7cbe0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x558bb1a7cb18 'type'
|     `-LValueReferenceType 0x558bb1a7cae0 'const String &'
|       `-QualType 0x558bb1a7c881 'const String' const
|         `-SubstTemplateTypeParmType 0x558bb1a7c880 'String' sugar
|           |-TemplateTypeParmType 0x558bb179ae80 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x558bb179ae28 'T'
|           `-RecordType 0x558bb17f7970 'String'
|             `-CXXRecord 0x558bb17f78e0 'String'
|-TypedefDecl 0x558bb1a7ccb8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x558bb1a7bea0 'const String &'
|   `-QualType 0x558bb1a76ed1 'const String' const
|     `-SubstTemplateTypeParmType 0x558bb1a76ed0 'String' sugar
|       |-TemplateTypeParmType 0x558bb17c84a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558bb17c8448 'T'
|       `-RecordType 0x558bb17f7970 'String'
|         `-CXXRecord 0x558bb17f78e0 'String'
|-TypedefDecl 0x558bb1a7cd10 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x558bb14ca3b0 'int'
|-TypedefDecl 0x558bb1a7cd78 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x558bb1a7bf30 'String *'
|   `-SubstTemplateTypeParmType 0x558bb1a76ed0 'String' sugar
|     |-TemplateTypeParmType 0x558bb17c84a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558bb17c8448 'T'
|     `-RecordType 0x558bb17f7970 'String'
|       `-CXXRecord 0x558bb17f78e0 'String'
|-TypedefDecl 0x558bb1a7cde0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x558bb1a7bfc0 'const String *'
|   `-QualType 0x558bb1a76ed1 'const String' const
|     `-SubstTemplateTypeParmType 0x558bb1a76ed0 'String' sugar
|       |-TemplateTypeParmType 0x558bb17c84a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558bb17c8448 'T'
|       `-RecordType 0x558bb17f7970 'String'
|         `-CXXRecord 0x558bb17f78e0 'String'
|-EnumDecl 0x558bb1a7ce38 <line:134:5> col:5
| `-EnumConstantDecl 0x558bb1a7cf30 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x558bb1a7cf10 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x558bb17c9b28 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x558bb17c9b00 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x558bb17c9ae0 <col:40> 'int' 1
|-CXXConstructorDecl 0x558bb1a7cfb8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x558bb1a7d248 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x558bb1a7d070 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x558bb1a7d110 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x558bb1a7d4d8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x558bb1a7d3c0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x558bb1a7d798 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x558bb1a7d680 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x558bb1a7dab0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x558bb1a7d990 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x558bb1a7ddc0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x558bb1a7dca0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x558bb1a7e0b0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x558bb1a7def8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x558bb1a7df70 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x558bb1a7e1d8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x558bb1a7e288 <col:20> Inherited
| `-OptimizeNoneAttr 0x558bb1a7e2e0 <col:30> Inherited
|-CXXMethodDecl 0x558bb1a7e328 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x558bb1a7e3d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x558bb1a7e430 <col:30> Inherited
|-CXXMethodDecl 0x558bb1a7e4f8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x558bb1a7e5a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x558bb1a7e600 <col:30> Inherited
|-CXXMethodDecl 0x558bb1a7e648 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x558bb1a7e6f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x558bb1a7e750 <col:30> Inherited
|-CXXMethodDecl 0x558bb1a7e798 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x558bb1a7e848 <col:20> Inherited
| `-OptimizeNoneAttr 0x558bb1a7e8a0 <col:30> Inherited
|-CXXMethodDecl 0x558bb1a7e8e8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x558bb1a7e998 <col:20> Inherited
| `-OptimizeNoneAttr 0x558bb1a7e9f0 <col:30> Inherited
|-CXXMethodDecl 0x558bb1a7ea18 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x558bb1a7eac8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x558bb1a7eb78 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x558bb1a7ed38 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x558bb1a7ec28 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x558bb1a7eca0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x558bb1a7ee88 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x558bb1a7edf8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x558bb1a7f038 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x558bb1a7ef40 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x558bb1a7f0f0 <col:20>
| `-OptimizeNoneAttr 0x558bb1a7f148 <col:30>
|-CXXMethodDecl 0x558bb1a7f268 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x558bb1a7f170 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x558bb1a7f320 <col:20>
| `-OptimizeNoneAttr 0x558bb1a7f378 <col:30>
|-CXXMethodDecl 0x558bb1a7f430 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x558bb1a7f3a0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558bb1a7f578 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x558bb1a7f4e8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558bb1a7f6a8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x558bb1a7f7a8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x558bb1a7f878 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x558bb1a7f948 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x558bb1a7fa88 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x558bb1a7f9f8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558bb1a7fbd0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x558bb1a7fb40 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558bb1a7fd18 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x558bb1a7fc88 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x558bb1a7fdd0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x558bb1a7fed0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x558bb1a7fe40 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x558bb1a7ff88 <col:60> Inherited "" ""
|-CXXMethodDecl 0x558bb1a84080 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x558bb1a84178 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x558bb1a842f8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x558bb1a84238 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x558bb1a84ab8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x558bb1a843b0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x558bb1a84a18 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x558bb1a84918 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x558bb1a84b98 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x558bb1a84ce8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x558bb1a84c58 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x558bb1a84da0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x558bb1a84fe8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x558bb1a84e60 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x558bb1a84ed8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x558bb1a85178 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x558bb1a850b8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x558bb1a85388 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x558bb1a85240 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x558bb1a852b8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x558bb1a85448 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x558bb1a856a8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x558bb1a855b0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x558bb1a85778 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x558bb1a85778

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558bb1b1bda8 prev 0x558bb19af948 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x558bb1b1bea0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x558bb1b1bf30 <col:22, col:28> col:22 public
|-EnumDecl 0x558bb1b1bf58 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x558bb1b1c078 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x558bb1b1c058 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x558bb1b1c040 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x558bb1b1c020 <col:14> 'int' 999
| |-EnumConstantDecl 0x558bb1b1c120 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x558bb1b1c100 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x558bb1b1c0e8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x558bb1b1c0c8 <col:14> 'int' 1
| |-EnumConstantDecl 0x558bb1b1c1b0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x558bb1b1c190 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x558bb1b1c170 <col:17> 'int' 0
| |-EnumConstantDecl 0x558bb1b1c240 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x558bb1b1c220 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x558bb1b1c200 <col:13> 'int' 1
| |-EnumConstantDecl 0x558bb1b1c2d0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x558bb1b1c2b0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x558bb1b1c290 <col:16> 'int' 2
| |-EnumConstantDecl 0x558bb1b1c360 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x558bb1b1c340 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x558bb1b1c320 <col:13> 'int' 3
| |-EnumConstantDecl 0x558bb1b1c3f0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x558bb1b1c3d0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x558bb1b1c3b0 <col:15> 'int' 4
| |-EnumConstantDecl 0x558bb1b1c480 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x558bb1b1c460 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x558bb1b1c440 <col:14> 'int' 5
| |-EnumConstantDecl 0x558bb1b1c510 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x558bb1b1c4f0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x558bb1b1c4d0 <col:12> 'int' 6
| `-EnumConstantDecl 0x558bb1b1c5a0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x558bb1b1c580 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x558bb1b1c560 <col:13> 'int' 7
|-VarDecl 0x558bb1b1c610 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x558bb1b1c698 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x558bb1b1c720 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x558bb1b1c7a8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x558bb1b1c830 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x558bb1b1c8b8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x558bb1b1c940 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x558bb1b1c9c8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x558bb1b1ca50 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x558bb1b1cad8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x558bb1b1cb60 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x558bb1b1cc60 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x558bb1b21f88 '_nerrors' 'int'
| | `-IntegerLiteral 0x558bb1b22718 <line:128:13> 'int' 0
| `-CompoundStmt 0x558bb1b22788 <col:16, line:129:5>
|-CXXDestructorDecl 0x558bb1b1cd50 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x558bb1b22798 <col:29, line:132:5>
|-CXXMethodDecl 0x558bb1b1cf08 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x558bb1b1ce40 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x558bb1b1cfd0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x558bb1b1d0b8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x558bb1b227f0 <col:44, line:161:5>
|   `-ReturnStmt 0x558bb1b227e0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x558bb1b227c8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x558bb1b227a8 <col:9> 'ErrorHandler *' lvalue Var 0x558bb1b21fe8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x558bb1b1d1f8 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x558bb1b1d168 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x558bb1b1d2c0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x558bb1b22850 <col:43, line:173:5>
|   `-ReturnStmt 0x558bb1b22840 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x558bb1b22828 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x558bb1b22808 <col:9> 'ErrorHandler *' lvalue Var 0x558bb1b22060 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x558bb1b1d378 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x558bb1b1d3f8 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x558bb1b1d508 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x558bb1b1d478 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x558bb1b1d658 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x558bb1b1d5c8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x558bb1b1d7b0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x558bb1b1d718 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x558bb1b1d908 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x558bb1b1d870 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x558bb1b1da60 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x558bb1b1d9c8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x558bb1b1dcb0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x558bb1b1db18 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x558bb1b1db98 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x558bb1b1de88 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x558bb1b1dd70 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x558bb1b1ddf0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x558bb1b1e0a8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x558bb1b1df48 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x558bb1b1dfc8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x558bb1b1e288 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x558bb1b1e168 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x558bb1b1e1e8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x558bb1b1e468 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x558bb1b1e348 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x558bb1b1e3c8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x558bb1b1e5f0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x558bb1b1e528 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x558bb1b1e7c0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x558bb1b1e6a8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x558bb1b1e720 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x558bb1b22aa8 <col:57, line:234:5>
|   `-ReturnStmt 0x558bb1b22a98 <line:233:2, col:41>
|     `-ExprWithCleanups 0x558bb1b22a80 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x558bb1b22a28 <col:9, col:41> 'int'
|         |-MemberExpr 0x558bb1b229f8 <col:9> '<bound member function type>' ->xmessage 0x558bb1b1e5f0
|         | `-CXXThisExpr 0x558bb1b229e8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x558bb1b22a68 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x558bb1b22a50 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x558bb1b229c8 <col:18, col:40> 'String' (CXXTemporary 0x558bb1b229c8)
|               `-CallExpr 0x558bb1b22990 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x558bb1b22978 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x558bb1b228f0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x558bb1b207b8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x558bb1b22910 <col:31> 'const String' lvalue ParmVar 0x558bb1b1e720 'str' 'const String &'
|                 `-DeclRefExpr 0x558bb1b22930 <col:36> 'const String' lvalue ParmVar 0x558bb1b1e6a8 'anno' 'const String &'
|-CXXMethodDecl 0x558bb1b1eaa0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x558bb1b1e880 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x558bb1b1e900 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x558bb1b1e978 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x558bb1b22d38 <col:68, line:243:5>
|   `-ReturnStmt 0x558bb1b22d28 <line:242:2, col:41>
|     `-ExprWithCleanups 0x558bb1b22d10 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x558bb1b22cb0 <col:9, col:41> 'int'
|         |-MemberExpr 0x558bb1b22c80 <col:9> '<bound member function type>' ->xmessage 0x558bb1b1e7c0
|         | `-CXXThisExpr 0x558bb1b22c70 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x558bb1b22b48 <col:18> 'const String' lvalue ParmVar 0x558bb1b1e880 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x558bb1b22cf8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x558bb1b22ce0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x558bb1b22c50 <col:24, col:40> 'String' (CXXTemporary 0x558bb1b22c50)
|               `-CXXMemberCallExpr 0x558bb1b22be8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x558bb1b22b78 <col:24> '<bound member function type>' ->vformat 0x558bb1b1fc80
|                 | `-CXXThisExpr 0x558bb1b22b68 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x558bb1b22c18 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x558bb1b22ba8 <col:32> 'const char *' lvalue ParmVar 0x558bb1b1e900 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x558bb1b22c30 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x558bb1b22bc8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x558bb1b1e978 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x558bb1b1ed40 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x558bb1b1eb68 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x558bb1b1ebe0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x558bb1b1ec58 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x558bb1b23078 <col:23, line:254:5>
|   `-ReturnStmt 0x558bb1b23068 <line:253:2, col:71>
|     `-ExprWithCleanups 0x558bb1b23050 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x558bb1b22ff0 <col:9, col:71> 'int'
|         |-MemberExpr 0x558bb1b22fc0 <col:9> '<bound member function type>' ->xmessage 0x558bb1b1e7c0
|         | `-CXXThisExpr 0x558bb1b22fb0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x558bb1b23038 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x558bb1b23020 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x558bb1b22f70 <col:18, col:65> 'String' (CXXTemporary 0x558bb1b22f70)
|         |     `-CallExpr 0x558bb1b22f08 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x558bb1b22ef0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x558bb1b22dd8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x558bb1b207b8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x558bb1b22df8 <col:31> 'const String' lvalue ParmVar 0x558bb1b1ebe0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x558bb1b22f50 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x558bb1b22f38 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x558bb1b22ed0 <col:37, col:64> 'String' (CXXTemporary 0x558bb1b22ed0)
|         |             `-CallExpr 0x558bb1b22ea0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x558bb1b22e88 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x558bb1b22e18 <col:37> 'String (const String &)' lvalue CXXMethod 0x558bb1b20e08 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x558bb1b22e38 <col:56> 'const String' lvalue ParmVar 0x558bb1b1eb68 'landmark' 'const String &'
|         `-DeclRefExpr 0x558bb1b22f90 <col:68> 'const String' lvalue ParmVar 0x558bb1b1ec58 'str' 'const String &'
|-CXXMethodDecl 0x558bb1b1f0c0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x558bb1b1ee08 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x558bb1b1ee80 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x558bb1b1ef00 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x558bb1b1ef78 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x558bb1b23330 <col:34, line:267:5>
|   `-ReturnStmt 0x558bb1b23320 <line:266:2, col:51>
|     `-ExprWithCleanups 0x558bb1b23308 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x558bb1b232a0 <col:9, col:51> 'int'
|         |-MemberExpr 0x558bb1b23270 <col:9> '<bound member function type>' ->xmessage 0x558bb1b1ed40
|         | `-CXXThisExpr 0x558bb1b23260 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x558bb1b23118 <col:18> 'const String' lvalue ParmVar 0x558bb1b1ee08 'landmark' 'const String &'
|         |-DeclRefExpr 0x558bb1b23138 <col:28> 'const String' lvalue ParmVar 0x558bb1b1ee80 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x558bb1b232f0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x558bb1b232d8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x558bb1b23240 <col:34, col:50> 'String' (CXXTemporary 0x558bb1b23240)
|               `-CXXMemberCallExpr 0x558bb1b231d8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x558bb1b23168 <col:34> '<bound member function type>' ->vformat 0x558bb1b1fc80
|                 | `-CXXThisExpr 0x558bb1b23158 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x558bb1b23208 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x558bb1b23198 <col:42> 'const char *' lvalue ParmVar 0x558bb1b1ef00 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x558bb1b23220 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x558bb1b231b8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x558bb1b1ef78 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x558bb1b1f1d0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x558bb1b233b0 <col:25, line:288:5>
|   `-ReturnStmt 0x558bb1b233a0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x558bb1b23388 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x558bb1b23358 <col:9> 'const int' lvalue ->_nerrors 0x558bb1b21f88
|         `-CXXThisExpr 0x558bb1b23348 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x558bb1b1f3e0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x558bb1b1f288 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x558bb1b1f308 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x558bb1b1f6c8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x558bb1b1f4a8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x558bb1b1f528 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x558bb1b1f5a0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x558bb1b1f860 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x558bb1b1f798 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x558bb1b1faa8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x558bb1b1f920 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x558bb1b1f998 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x558bb1b23610 <col:58, line:357:5>
|   `-ReturnStmt 0x558bb1b23600 <line:356:2, col:29>
|     `-ExprWithCleanups 0x558bb1b235e8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x558bb1b235b8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x558bb1b235a0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x558bb1b23580 <col:9, col:29> 'String' (CXXTemporary 0x558bb1b23580)
|             `-CallExpr 0x558bb1b23510 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x558bb1b234f8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x558bb1b23478 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x558bb1b1f6c8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x558bb1b23418 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x558bb1b23548 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x558bb1b23438 <col:21> 'const char *' lvalue ParmVar 0x558bb1b1f920 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x558bb1b23560 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x558bb1b23458 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x558bb1b1f998 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x558bb1b1fc80 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x558bb1b1fb70 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x558bb1b1fbe8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x558bb1b1fdd8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x558bb1b1fd48 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x558bb1b1ff20 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x558bb1b1fe90 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x558bb1b201c0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x558bb1b1ffd8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x558bb1b20058 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x558bb1b200d0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x558bb1b20320 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x558bb1b20290 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x558bb1b23728 <col:37, line:441:5>
|   `-IfStmt 0x558bb1b23710 <line:439:2, line:440:8>
|     |-BinaryOperator 0x558bb1b23698 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x558bb1b23668 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x558bb1b23628 <col:6> 'int' lvalue ParmVar 0x558bb1b20290 'level' 'int'
|     | `-ImplicitCastExpr 0x558bb1b23680 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x558bb1b23648 <col:15> 'ErrorHandler::Level' EnumConstant 0x558bb1b1c360 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x558bb1b236f8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x558bb1b236c8 <col:8> 'int' lvalue ->_nerrors 0x558bb1b21f88
|         `-CXXThisExpr 0x558bb1b236b8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x558bb1b203e8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x558bb1b237c0 <col:26, line:448:5>
|   `-BinaryOperator 0x558bb1b237a0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x558bb1b23750 <col:2> 'int' lvalue ->_nerrors 0x558bb1b21f88
|     | `-CXXThisExpr 0x558bb1b23740 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x558bb1b23780 <col:13> 'int' 0
|-CXXMethodDecl 0x558bb1b205b0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x558bb1b204a0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x558bb1b20518 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x558bb1b207b8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x558bb1b20670 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x558bb1b206e8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x558bb1b20a68 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x558bb1b20878 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x558bb1b208f8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x558bb1b20978 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x558bb1b20b20 <col:59> 0 0
|-CXXMethodDecl 0x558bb1b20cb8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x558bb1b20b98 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x558bb1b20c18 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x558bb1b23e30 <col:70, line:534:5>
|   |-DeclStmt 0x558bb1b23930 <line:528:2, col:20>
|   | |-VarDecl 0x558bb1b237e8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x558bb1b23850 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x558bb1b23888 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x558bb1b238f0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x558bb1b23a00 <line:529:2, col:23>
|   | `-VarDecl 0x558bb1b23960 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x558bb1b239e8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x558bb1b239c8 <col:18> 'const char *' lvalue ParmVar 0x558bb1b20b98 'begin' 'const char *'
|   |-DoStmt 0x558bb1b23dc8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x558bb1b23cf8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x558bb1b23ce0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x558bb1b23cc0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x558bb1b23a18 <col:6> 'const char *' lvalue Var 0x558bb1b23960 'x' 'const char *'
|   | |     `-CallExpr 0x558bb1b23c10 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x558bb1b23bf8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x558bb1b23bb0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x558bb1b22460 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x558bb1b23c78 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x558bb1b23c60 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x558bb1b23ad0 <col:20, col:27> 'String' (CXXTemporary 0x558bb1b23ad0)
|   | |       |     `-CXXTemporaryObjectExpr 0x558bb1b23a98 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x558bb1b23c90 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x558bb1b23af0 <col:30> 'const char *' lvalue Var 0x558bb1b23960 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x558bb1b23ca8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x558bb1b23b10 <col:33> 'const char *' lvalue ParmVar 0x558bb1b20c18 'end' 'const char *'
|   | |       |-UnaryOperator 0x558bb1b23b50 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x558bb1b23b30 <col:39> 'String' lvalue Var 0x558bb1b237e8 'name' 'String'
|   | |       |-UnaryOperator 0x558bb1b23b88 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x558bb1b23b68 <col:46> 'String' lvalue Var 0x558bb1b23888 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x558bb1b23ba0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x558bb1b23db0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x558bb1b23d98 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x558bb1b23d78 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x558bb1b23d48 <col:11> '<bound member function type>' .operator int (String::*)() const 0x558bb17fb0d8
|   |         `-ImplicitCastExpr 0x558bb1b23d30 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x558bb1b23d10 <col:11> 'String' lvalue Var 0x558bb1b237e8 'name' 'String'
|   `-ReturnStmt 0x558bb1b23e20 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x558bb1b23e08 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x558bb1b23de8 <col:9> 'const char *' lvalue Var 0x558bb1b23960 'x' 'const char *'
|-CXXMethodDecl 0x558bb1b20e08 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x558bb1b20d78 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x558bb1b24438 <col:55, line:550:5>
|   `-IfStmt 0x558bb1b24410 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x558bb1b24070 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x558bb1b24058 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x558bb1b24040 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x558bb1b24020 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x558bb1b23ff0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x558bb17fb0d8
|     | |       `-DeclRefExpr 0x558bb1b23e90 <col:6> 'const String' lvalue ParmVar 0x558bb1b20d78 'x' 'const String &'
|     | `-BinaryOperator 0x558bb1b23fd0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x558bb1b23fa0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x558bb1b23f50 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x558bb1b23f38 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x558bb1b23ef0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x558bb1814910 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x558bb1b23eb0 <col:11> 'const String' lvalue ParmVar 0x558bb1b20d78 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x558bb1b23ed0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x558bb1b23fb8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x558bb1b23f88 <col:19> 'char' 123
|     |-ReturnStmt 0x558bb1b240e0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x558bb1b240b0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x558bb1b24090 <col:13> 'const String' lvalue ParmVar 0x558bb1b20d78 'x' 'const String &'
|     `-IfStmt 0x558bb1b243e8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x558bb1b24178 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x558bb1b24160 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x558bb1b24140 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x558bb1b24110 <col:11> '<bound member function type>' .operator int (String::*)() const 0x558bb17fb0d8
|       |       `-DeclRefExpr 0x558bb1b240f0 <col:11> 'const String' lvalue ParmVar 0x558bb1b20d78 'x' 'const String &'
|       |-ReturnStmt 0x558bb1b24300 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x558bb1b242e8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x558bb1b242b8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x558bb1b242a0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x558bb1b24280 <col:13, col:29> 'String' (CXXTemporary 0x558bb1b24280)
|       |         `-CallExpr 0x558bb1b24230 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x558bb1b24218 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x558bb1b24190 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x558bb1b205b0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x558bb1b24260 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x558bb1b241b0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x558bb1b241d0 <col:28> 'const String' lvalue ParmVar 0x558bb1b20d78 'x' 'const String &'
|       `-ReturnStmt 0x558bb1b243d8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x558bb1b243c0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x558bb1b24390 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x558bb1b24378 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x558bb1b24358 <col:13, col:20> 'String' (CXXTemporary 0x558bb1b24358)
|                 `-CXXTemporaryObjectExpr 0x558bb1b24320 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x558bb1b20fd0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x558bb1b20ec0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x558bb1b20f38 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x558bb1b22708 <col:71> 'bool' false
|-CXXRecordDecl 0x558bb1b21080 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x558bb1b21378 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x558bb1b21310 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x558bb1b212b0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x558bb1b21270 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x558bb17f7970 'String'
|       | `-CXXRecord 0x558bb17f78e0 'String'
|       |-BuiltinType 0x558bb14ca3b0 'int'
|       `-DecayedType 0x558bb19b0990 '__va_list_tag *' sugar
|         |-TypedefType 0x558bb19b0960 'va_list' sugar
|         | |-Typedef 0x558bb16e8a20 'va_list'
|         | `-TypedefType 0x558bb16e89d0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x558bb16205f8 '__gnuc_va_list'
|         |   `-TypedefType 0x558bb1620560 '__builtin_va_list' sugar
|         |     |-Typedef 0x558bb150bc18 '__builtin_va_list'
|         |     `-ConstantArrayType 0x558bb150bbc0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x558bb14cb100 '__va_list_tag'
|         |         `-CXXRecord 0x558bb14cb068 '__va_list_tag'
|         `-PointerType 0x558bb16ee2c0 '__va_list_tag *'
|           `-RecordType 0x558bb14cb100 '__va_list_tag'
|             `-CXXRecord 0x558bb14cb068 '__va_list_tag'
|-EnumDecl 0x558bb1b213d0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x558bb1b214d0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558bb1b21a30 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb1b214b0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x558bb1b21490 <col:16> 'int' 1
| |-EnumConstantDecl 0x558bb1b21560 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558bb1b21a48 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb1b21540 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x558bb1b21520 <col:21> 'int' 2
| |-EnumConstantDecl 0x558bb1b215f0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558bb1b21a60 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb1b215d0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x558bb1b215b0 <col:22> 'int' 4
| |-EnumConstantDecl 0x558bb1b21680 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558bb1b21a78 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb1b21660 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x558bb1b21640 <col:17> 'int' 8
| |-EnumConstantDecl 0x558bb1b21710 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558bb1b21a90 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb1b216f0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x558bb1b216d0 <col:22> 'int' 16
| |-EnumConstantDecl 0x558bb1b217a0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558bb1b21aa8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb1b21780 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x558bb1b21760 <col:19> 'int' 32
| |-EnumConstantDecl 0x558bb1b21830 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558bb1b21ac0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb1b21810 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x558bb1b217f0 <col:17> 'int' 64
| |-EnumConstantDecl 0x558bb1b218c0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558bb1b21ad8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb1b218a0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x558bb1b21880 <col:14> 'int' 128
| |-EnumConstantDecl 0x558bb1b21950 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x558bb1b21af0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb1b21930 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x558bb1b21910 <col:16> 'int' 256
| `-EnumConstantDecl 0x558bb1b219e0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x558bb1b21b08 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558bb1b219c0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x558bb1b219a0 <col:12> 'int' 1024
|-CXXMethodDecl 0x558bb1b21d18 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x558bb1b21b30 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x558bb1b21bd0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x558bb1b21ea0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x558bb1b21dd8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x558bb1b21f48 <line:580:3, col:10> col:3 private
|-FieldDecl 0x558bb1b21f88 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x558bb1b21fe8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x558bb1b22060 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x558bb1b22460 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x558bb1b220d8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x558bb1b22158 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x558bb1b221d8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x558bb1b22250 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x558bb1b222c8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x558bb1b22340 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x558bb1b22588 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x558bb1b22588
| `-ParmVarDecl 0x558bb1b22698 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x558bb1b24798 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x558bb1b24798
  `-ParmVarDecl 0x558bb1b248a8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558bb19af9d8 prev 0x558bb19f1bb8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558bb19afad0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x558bb19afb60 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x558bb19afc98 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x558bb19afb98 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x558bb19b10c0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x558bb19b10a0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x558bb19b0c38 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x558bb19b1150 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x558bb19b1110 <col:17> 'ErrorHandler *' lvalue ParmVar 0x558bb19afb98 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x558bb19b0ca0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x558bb19b11d0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x558bb19b1190 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x558bb19b0d00 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x558bb19b1210 <col:54> 'bool' false
| `-CompoundStmt 0x558bb19b1318 <col:61, line:38:5>
|   `-BinaryOperator 0x558bb19b12f8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x558bb19b1290 <col:9> 'const Element *' lvalue ->_context 0x558bb19b0bd8
|     | `-CXXThisExpr 0x558bb19b1280 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x558bb19b12e0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x558bb19b12c0 <col:20> 'int' 0
|-CXXConstructorDecl 0x558bb19afea8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x558bb19afd58 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x558bb19afdd0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x558bb19b10f8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x558bb19b10d8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x558bb19b0bd8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x558bb19b1370 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x558bb19b1330 <col:20> 'const Element *' lvalue ParmVar 0x558bb19afd58 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x558bb19b0c38 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x558bb19b13f0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x558bb19b13b0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x558bb19afdd0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x558bb19b0ca0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x558bb19b1470 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x558bb19b1430 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x558bb19b0d00 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x558bb19b14b0 <col:73> 'bool' false
| `-CompoundStmt 0x558bb19b1528 <col:80, line:46:5>
|-CXXMethodDecl 0x558bb19affd8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x558bb19b15a0 <col:36, line:51:5>
|   `-ReturnStmt 0x558bb19b1590 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x558bb19b1578 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x558bb19b1548 <col:16> 'const Element *const' lvalue ->_context 0x558bb19b0bd8
|         `-CXXThisExpr 0x558bb19b1538 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x558bb19b00c8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x558bb19b1620 <col:32, line:57:5>
|   `-ReturnStmt 0x558bb19b1610 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x558bb19b15f8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x558bb19b15c8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x558bb19b0c38
|         `-CXXThisExpr 0x558bb19b15b8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x558bb19b0188 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x558bb19b0310 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x558bb19b0240 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x558bb19b0460 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x558bb19b03d0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x558bb19b05b0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x558bb19b0520 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x558bb19b07b8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x558bb19b0668 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x558bb19b06e0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x558bb19b0ae8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x558bb19b0878 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x558bb19b08f8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x558bb19b09c0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x558bb19b0ba0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x558bb19b0bd8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x558bb19b0c38 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x558bb19b0ca0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x558bb19b0d00 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x558bb19b0d50 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x558bb19b0d50
| `-ParmVarDecl 0x558bb19b0e68 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x558bb19b0f08 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x558bb19b0f08
| `-ParmVarDecl 0x558bb19b1018 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x558bb1b31c20 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x558bb1aba7a0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x558bb1aba978 prev 0x558bb1aba7a0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x558bb1abaa08 <col:46, col:52> col:46 public
|-TypedefDecl 0x558bb1abaa30 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x558bb14ca3b0 'int'
|-TypedefDecl 0x558bb1ac9180 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x558bb1ac9130 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x558bb1abaee0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x558bb1abade0 'type'
|     `-TemplateSpecializationType 0x558bb1abad70 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x558bb1abac50 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x558bb1abac30 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x558bb1abac10 <col:24> 'unsigned long' 4
|       `-RecordType 0x558bb1abad50 'char_array<4>'
|         `-ClassTemplateSpecialization 0x558bb1abac70 'char_array'
|-TypedefDecl 0x558bb1ac9238 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x558bb1ac9200 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x558bb1ac91e0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x558bb1ac9180 'type'
|     `-ElaboratedType 0x558bb1ac9130 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x558bb1abaee0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x558bb1abade0 'type'
|         `-TemplateSpecializationType 0x558bb1abad70 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x558bb1abac50 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x558bb1abac30 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x558bb1abac10 <col:24> 'unsigned long' 4
|           `-RecordType 0x558bb1abad50 'char_array<4>'
|             `-ClassTemplateSpecialization 0x558bb1abac70 'char_array'
|-CXXMethodDecl 0x558bb1ac93b8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x558bb1ac92c8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x558bb1ac94a8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x558bb1ac9588 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x558bb1ac9858 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x558bb1ac9760 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x558bb1ac9a98 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x558bb1ac9910 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x558bb1ac9988 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x558bb1ac9c68 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x558bb1ac9b58 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x558bb1ac9bd0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x558bb1ac9dc8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x558bb1ac9e98 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x558bb1aca0e8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x558bb1ac9f58 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x558bb1ac9fd0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x558bb1aca348 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x558bb1aca1b8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x558bb1aca230 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x558bb1aca508 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x558bb1aca418 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x558bb1aca6c8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x558bb1aca5d0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x558bb1aca780 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x558bb1aca830 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x558bb1acaa68 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x558bb1aca8e0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x558bb1aca958 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x558bb1acad08 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x558bb1acac10 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x558bb1acadd0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x558bb1acae20 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x558bb1acae70 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x558bb1ab91a8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x558bb1ab93b8 prev 0x558bb1ab91a8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x558bb1aba710 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x558bb1aba6c0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x558bb1aba6a0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x558bb1aba550 'type'
|     `-SubstTemplateTypeParmType 0x558bb1aba370 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x558bb17907b0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558bb1790758 'T'
|       `-RecordType 0x558bb1ab9ec0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x558bb1ab9dd8 'sized_array_memory'
|-FieldDecl 0x558bb1acaec0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x558bb1acaf10 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x558bb1acaf48 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x558bb1ab9450 'int' sugar
|   |-TemplateTypeParmType 0x558bb17c84a0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x558bb17c8448 'T'
|   `-BuiltinType 0x558bb14ca3b0 'int'
|-TypedefDecl 0x558bb1acafd8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x558bb1acafa0 'int &'
|   `-SubstTemplateTypeParmType 0x558bb1ab9450 'int' sugar
|     |-TemplateTypeParmType 0x558bb17c84a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558bb17c8448 'T'
|     `-BuiltinType 0x558bb14ca3b0 'int'
|-TypedefDecl 0x558bb1acb098 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x558bb1acb060 'const int &'
|   `-QualType 0x558bb1ab9451 'const int' const
|     `-SubstTemplateTypeParmType 0x558bb1ab9450 'int' sugar
|       |-TemplateTypeParmType 0x558bb17c84a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558bb17c8448 'T'
|       `-BuiltinType 0x558bb14ca3b0 'int'
|-TypedefDecl 0x558bb1acb128 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x558bb1acb0f0 'int *'
|   `-SubstTemplateTypeParmType 0x558bb1ab9450 'int' sugar
|     |-TemplateTypeParmType 0x558bb17c84a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558bb17c8448 'T'
|     `-BuiltinType 0x558bb14ca3b0 'int'
|-TypedefDecl 0x558bb1acb1b8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x558bb1acb180 'const int *'
|   `-QualType 0x558bb1ab9451 'const int' const
|     `-SubstTemplateTypeParmType 0x558bb1ab9450 'int' sugar
|       |-TemplateTypeParmType 0x558bb17c84a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558bb17c8448 'T'
|       `-BuiltinType 0x558bb14ca3b0 'int'
|-TypedefDecl 0x558bb1acbda0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x558bb1acbd50 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x558bb1acbd30 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x558bb1acbcc0 'type'
|     `-SubstTemplateTypeParmType 0x558bb1acba80 'int' sugar
|       |-TemplateTypeParmType 0x558bb179b5b0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558bb179b560 'T'
|       `-BuiltinType 0x558bb14ca3b0 'int'
|-TypedefDecl 0x558bb1acbe08 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x558bb1acb060 'const int &'
|   `-QualType 0x558bb1ab9451 'const int' const
|     `-SubstTemplateTypeParmType 0x558bb1ab9450 'int' sugar
|       |-TemplateTypeParmType 0x558bb17c84a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558bb17c8448 'T'
|       `-BuiltinType 0x558bb14ca3b0 'int'
|-TypedefDecl 0x558bb1acbe60 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x558bb14ca3b0 'int'
|-TypedefDecl 0x558bb1acbec8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x558bb1acb0f0 'int *'
|   `-SubstTemplateTypeParmType 0x558bb1ab9450 'int' sugar
|     |-TemplateTypeParmType 0x558bb17c84a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x558bb17c8448 'T'
|     `-BuiltinType 0x558bb14ca3b0 'int'
|-TypedefDecl 0x558bb1acbf30 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x558bb1acb180 'const int *'
|   `-QualType 0x558bb1ab9451 'const int' const
|     `-SubstTemplateTypeParmType 0x558bb1ab9450 'int' sugar
|       |-TemplateTypeParmType 0x558bb17c84a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x558bb17c8448 'T'
|       `-BuiltinType 0x558bb14ca3b0 'int'
|-EnumDecl 0x558bb1acbf88 <line:134:5> col:5
| `-EnumConstantDecl 0x558bb1acc080 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x558bb1acc060 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x558bb17c9b28 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x558bb17c9b00 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x558bb17c9ae0 <col:40> 'int' 1
|-CXXConstructorDecl 0x558bb1acc108 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x558bb1acc358 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x558bb1acc1c0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x558bb1acc260 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x558bb1acc618 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x558bb1acc500 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x558bb1acc8d8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x558bb1acc7c0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x558bb1accc20 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x558bb1accb00 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x558bb1accf30 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x558bb1acce10 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x558bb1acd220 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x558bb1acd068 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x558bb1acd0e0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x558bb1acd348 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x558bb1acd428 <col:20> Inherited
| `-OptimizeNoneAttr 0x558bb1acd480 <col:30> Inherited
|-CXXMethodDecl 0x558bb1acd4c8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x558bb1acd578 <col:20> Inherited
| `-OptimizeNoneAttr 0x558bb1acd5d0 <col:30> Inherited
|-CXXMethodDecl 0x558bb1acd698 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x558bb1acd748 <col:20> Inherited
| `-OptimizeNoneAttr 0x558bb1acd7a0 <col:30> Inherited
|-CXXMethodDecl 0x558bb1acd7e8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x558bb1acd898 <col:20> Inherited
| `-OptimizeNoneAttr 0x558bb1acd8f0 <col:30> Inherited
|-CXXMethodDecl 0x558bb1acd938 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x558bb1acd9e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x558bb1acda40 <col:30> Inherited
|-CXXMethodDecl 0x558bb1acda88 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x558bb1acdb38 <col:20> Inherited
| `-OptimizeNoneAttr 0x558bb1acdb90 <col:30> Inherited
|-CXXMethodDecl 0x558bb1acdbb8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x558bb1acdc68 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x558bb1acdd18 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x558bb1acded8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x558bb1acddc8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x558bb1acde40 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x558bb1ace028 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x558bb1acdf98 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x558bb1ace1d8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x558bb1ace0e0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x558bb1ace290 <col:20>
| `-OptimizeNoneAttr 0x558bb1ace2e8 <col:30>
|-CXXMethodDecl 0x558bb1ace408 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x558bb1ace310 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x558bb1ace4c0 <col:20>
| `-OptimizeNoneAttr 0x558bb1ace518 <col:30>
|-CXXMethodDecl 0x558bb1ace5d0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x558bb1ace540 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558bb1ace718 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x558bb1ace688 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558bb1ace848 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x558bb1ace978 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x558bb1acea48 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x558bb1aceb18 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x558bb1acec58 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x558bb1acebc8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558bb1aceda0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x558bb1aced10 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x558bb1aceee8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x558bb1acee58 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x558bb1acefa0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x558bb1acf0a0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x558bb1acf010 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x558bb1acf158 <col:60> Inherited "" ""
|-CXXMethodDecl 0x558bb1acf218 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x558bb1acf318 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x558bb1acf498 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x558bb1acf3d8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x558bb1acfc58 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x558bb1acf550 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x558bb1acfbb8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x558bb1acfab8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x558bb1ad12f8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x558bb1ad1448 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x558bb1ad13b8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x558bb1ad1500 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x558bb1ad1748 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x558bb1ad15c0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x558bb1ad1638 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x558bb1ad1908 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x558bb1ad1818 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x558bb1ad1b58 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x558bb1ad19d0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x558bb1ad1a48 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x558bb1ad1c18 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x558bb1ad1e78 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x558bb1ad1d80 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x558bb1ad1f48 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558bb1ab7318 prev 0x558bb1aa0f78 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x558bb1ab7410 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x558bb1ab7500 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x558bb1ae2980 <col:16, line:828:9>
|-CXXDestructorDecl 0x558bb1ab75f0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x558bb1ae2990 <col:25, line:830:9>
|-CXXMethodDecl 0x558bb1ab76f0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x558bb1ab77a0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x558bb1ab7848 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x558bb1ab7848
| `-ParmVarDecl 0x558bb1ab7958 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x558bb1ab8118 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x558bb1ab8118
  `-ParmVarDecl 0x558bb1ab8228 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558bb1aa0d88 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x558bb1aa0ee8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x558bb1aa0f78 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x558bb1aa1030 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x558bb1aa1138 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x558bb1aa1068 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x558bb1ad3508 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x558bb1ad34e8 <col:31> 'int' 0
|-CXXConstructorDecl 0x558bb1aa1458 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x558bb1aa12d0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x558bb1aa1348 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x558bb1ad3540 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x558bb1ad3520 <col:59> 'int' 0
|-CXXConstructorDecl 0x558bb1aa1630 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x558bb1aa1520 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x558bb1aa1598 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x558bb1ad3578 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x558bb1ad3558 <col:55> 'int' 0
|-CXXConstructorDecl 0x558bb1aa19e8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x558bb1aa17d0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x558bb1aa1848 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x558bb1aa18c0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x558bb1ad35b0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x558bb1ad3590 <col:31> 'int' 0
|-CXXConstructorDecl 0x558bb1aa1ba8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x558bb1aa1ae8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x558bb1aa1ca0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x558bb1aa1e88 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x558bb1aa1d90 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x558bb1aa1f78 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x558bb1ad3960 <col:24, line:291:5>
|   `-ReturnStmt 0x558bb1ad3950 <line:290:9, col:79>
|     `-BinaryOperator 0x558bb1ad3930 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x558bb1ad3808 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x558bb1ad3760 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x558bb1ad3740 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x558bb1ad3638 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x558bb1ad3620 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x558bb1ad3608 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x558bb1ad35d8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x558bb1ab9140
|       | |   |       `-CXXThisExpr 0x558bb1ad35c8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x558bb1ad3728 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x558bb1ad3710 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x558bb1ad36d8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x558bb1ad36a8 <col:28, col:35> '<bound member function type>' ->size 0x558bb1a7ea18
|       | |           `-ImplicitCastExpr 0x558bb1ad36f8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x558bb1ad3690 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x558bb1ad3660 <col:28> 'Vector<String> *const' lvalue ->_conf 0x558bb1ab9140
|       | |                 `-CXXThisExpr 0x558bb1ad3650 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x558bb1ad37f0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x558bb1ad37d8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x558bb1ad37c0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x558bb1ad3790 <col:47> 'Args::Slot *const' lvalue ->_slots 0x558bb1ad2090
|       |         `-CXXThisExpr 0x558bb1ad3780 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x558bb1ad3910 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x558bb1ad38f8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x558bb1ad38e0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x558bb1ad38a0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x558bb1ad3888 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x558bb1ad3838 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x558bb1ad2140
|         |     |   `-CXXThisExpr 0x558bb1ad3828 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x558bb1ad3868 <col:73> 'int' 0
|         `-IntegerLiteral 0x558bb1ad38c0 <col:79> 'int' 0
|-CXXMethodDecl 0x558bb1aa2038 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x558bb1ad3b38 <col:32, line:296:5>
|   `-ReturnStmt 0x558bb1ad3b28 <line:295:9, col:49>
|     `-BinaryOperator 0x558bb1ad3b08 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x558bb1ad39e8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x558bb1ad39d0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x558bb1ad39b8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x558bb1ad3988 <col:17> 'Args::Slot *const' lvalue ->_slots 0x558bb1ad2090
|       |       `-CXXThisExpr 0x558bb1ad3978 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x558bb1ad3ae8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x558bb1ad3ad0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x558bb1ad3ab8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x558bb1ad3a78 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x558bb1ad3a60 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x558bb1ad3a10 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x558bb1ad2140
|         |     |   `-CXXThisExpr 0x558bb1ad3a00 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x558bb1ad3a40 <col:43> 'int' 0
|         `-IntegerLiteral 0x558bb1ad3a98 <col:49> 'int' 0
|-CXXMethodDecl 0x558bb1aa2128 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x558bb1ad3d48 <col:19, line:306:5>
|   |-IfStmt 0x558bb1ad3c68 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x558bb1ad3ba8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x558bb1ad3b90 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x558bb1ad3b60 <col:13> 'Vector<String> *' lvalue ->_conf 0x558bb1ab9140
|   | |     `-CXXThisExpr 0x558bb1ad3b50 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x558bb1ad3c48 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x558bb1ad3c18 <col:13, col:20> '<bound member function type>' ->clear 0x558bb1a85448
|   |     `-ImplicitCastExpr 0x558bb1ad3c00 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x558bb1ad3bd0 <col:13> 'Vector<String> *' lvalue ->_conf 0x558bb1ab9140
|   |         `-CXXThisExpr 0x558bb1ad3bc0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x558bb1ad3cf0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x558bb1ad3cc0 <col:9, col:16> '<bound member function type>' .clear 0x558bb1ad1c18
|   |   `-MemberExpr 0x558bb1ad3c90 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x558bb1ad2030
|   |     `-CXXThisExpr 0x558bb1ad3c80 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x558bb1ad3d38 <line:305:9, col:17>
|     `-UnaryOperator 0x558bb1ad3d20 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558bb1ad3d10 <col:17> 'Args *' this
|-CXXMethodDecl 0x558bb1aa23a8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x558bb1aa22b0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x558bb1aa2528 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x558bb1aa2460 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x558bb1aa28a8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x558bb1aa25d0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x558bb1aa2808 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x558bb1aa2678 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x558bb1aa26f0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x558bb1ad4068 <col:67, line:327:5>
|     |-WhileStmt 0x558bb1ad4018 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x558bb1ad3e30 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x558bb1ad3db0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x558bb19ea088 0x558bb1833668 0x558bb1833340 0x558bb1824b20 0x558bb18247d0 0x558bb18240c0 0x558bb17f6a30 0x558bb1782ef0
|     | | |-DeclRefExpr 0x558bb1ad3d70 <col:16> 'Iter' lvalue ParmVar 0x558bb1aa2678 'begin' 'Iter'
|     | | `-DeclRefExpr 0x558bb1ad3d90 <col:25> 'Iter' lvalue ParmVar 0x558bb1aa26f0 'end' 'Iter'
|     | `-CompoundStmt 0x558bb1ad3ff8 <col:30, line:325:9>
|     |   |-CallExpr 0x558bb1ad3f98 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x558bb1ad3e78 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x558bb1ad3f68 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x558bb1ad3ef8 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558bb19ef208 0x558bb19eee28 0x558bb19eea58 0x558bb19ee678 0x558bb19ee298 0x558bb19edec8
|     |   |   `-DeclRefExpr 0x558bb1ad3ed8 <col:24> 'Iter' lvalue ParmVar 0x558bb1aa2678 'begin' 'Iter'
|     |   `-UnaryOperator 0x558bb1ad3fe0 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x558bb1ad3fc0 <col:15> 'Iter' lvalue ParmVar 0x558bb1aa2678 'begin' 'Iter'
|     `-ReturnStmt 0x558bb1ad4058 <line:326:9, col:17>
|       `-UnaryOperator 0x558bb1ad4040 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558bb1ad4030 <col:17> 'Args *' this
|-CXXMethodDecl 0x558bb1aa29b0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x558bb1aa2920 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x558bb1aa2af8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x558bb1aa2a68 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x558bb1aa2bc0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x558bb1ad4148 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x558bb1ad40e8 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x558bb1ad4098 <col:9> '<bound member function type>' ->reset_from 0x558bb1ad24b8
|   | | `-CXXThisExpr 0x558bb1ad4088 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x558bb1ad40c8 <col:20> 'int' 0
|   `-ReturnStmt 0x558bb1ad4138 <line:352:9, col:17>
|     `-UnaryOperator 0x558bb1ad4120 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558bb1ad4110 <col:17> 'Args *' this
|-VarDecl 0x558bb1aa2c78 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x558bb1aa2ce0 <col:38> 'int' 1
|-VarDecl 0x558bb1aa2d70 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x558bb1aa2dd8 <col:39> 'int' 2
|-VarDecl 0x558bb1aa2e68 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x558bb1aa2ed0 <col:39> 'int' 4
|-VarDecl 0x558bb1aa2f60 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x558bb1aa2fc8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x558bb1aa3348 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x558bb1aa3040 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x558bb1aa32a8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x558bb1aa30f0 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x558bb1aa3198 <col:37, col:40> col:40 referenced x 'T &'
| | `-CompoundStmt 0x558bb1ad42a0 <col:43, line:371:5>
| |   `-ReturnStmt 0x558bb1ad4290 <line:370:9, col:34>
| |     `-CallExpr 0x558bb1ad4258 <col:16, col:34> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x558bb1ad4178 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x558bb1ad41f8 <col:21> 'const char *' lvalue ParmVar 0x558bb1aa30f0 'keyword' 'const char *'
| |       |-IntegerLiteral 0x558bb1ad4218 <col:30> 'int' 0
| |       `-DeclRefExpr 0x558bb1ad4238 <col:33> 'T' lvalue ParmVar 0x558bb1aa3198 'x' 'T &'
| `-CXXMethodDecl 0x558bb1b32598 <line:369:5, line:371:5> line:369:11 used read 'Args &(const char *, bool &)'
|   |-TemplateArgument type 'bool'
|   |-ParmVarDecl 0x558bb1b323b8 <col:16, col:28> col:28 keyword 'const char *'
|   `-ParmVarDecl 0x558bb1b32488 <col:37, col:40> col:40 x 'bool &'
|-FunctionTemplateDecl 0x558bb1aa3678 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x558bb1aa33b0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558bb1aa35d8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x558bb1aa3460 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aa3508 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x558bb1ad43f0 <col:45, line:375:5>
|     `-ReturnStmt 0x558bb1ad43e0 <line:374:9, col:42>
|       `-CallExpr 0x558bb1ad43a8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558bb1ad42c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558bb1ad4348 <col:21> 'const char *' lvalue ParmVar 0x558bb1aa3460 'keyword' 'const char *'
|         |-DeclRefExpr 0x558bb1ad4368 <col:30> 'const int' lvalue Var 0x558bb1aa2c78 'mandatory' 'const int'
|         `-DeclRefExpr 0x558bb1ad4388 <col:41> 'T' lvalue ParmVar 0x558bb1aa3508 'x' 'T &'
|-FunctionTemplateDecl 0x558bb1aa39a8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x558bb1aa36e0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x558bb1aa3908 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x558bb1aa3790 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x558bb1aa3838 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x558bb1ad4540 <col:45, line:379:5>
| |   `-ReturnStmt 0x558bb1ad4530 <line:378:9, col:43>
| |     `-CallExpr 0x558bb1ad44f8 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x558bb1ad4418 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x558bb1ad4498 <col:21> 'const char *' lvalue ParmVar 0x558bb1aa3790 'keyword' 'const char *'
| |       |-DeclRefExpr 0x558bb1ad44b8 <col:30> 'const int' lvalue Var 0x558bb1aa2d70 'positional' 'const int'
| |       `-DeclRefExpr 0x558bb1ad44d8 <col:42> 'T' lvalue ParmVar 0x558bb1aa3838 'x' 'T &'
| `-CXXMethodDecl 0x558bb1b320a8 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, unsigned int &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x558bb1b31ec8 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x558bb1b31f98 <col:39, col:42> col:42 x 'unsigned int &'
|-FunctionTemplateDecl 0x558bb1aa3cd8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x558bb1aa3a10 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558bb1aa3c38 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x558bb1aa3ac0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aa3b68 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x558bb1ad4740 <col:46, line:383:5>
|     `-ReturnStmt 0x558bb1ad4730 <line:382:9, col:55>
|       `-CallExpr 0x558bb1ad46f8 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558bb1ad4568 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558bb1ad45e8 <col:21> 'const char *' lvalue ParmVar 0x558bb1aa3ac0 'keyword' 'const char *'
|         |-BinaryOperator 0x558bb1ad46b8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x558bb1ad4668 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x558bb1ad4648 <col:30> 'const int' lvalue Var 0x558bb1aa2c78 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x558bb1ad46a0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x558bb1ad4680 <col:42> 'const int' lvalue Var 0x558bb1aa2d70 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x558bb1ad46d8 <col:54> 'T' lvalue ParmVar 0x558bb1aa3b68 'x' 'T &'
|-FunctionTemplateDecl 0x558bb1aa40d8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x558bb1aa3d40 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558bb1aa4038 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x558bb1aa3df0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aa3e70 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x558bb1aa3f18 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x558bb1ad4880 <col:54, line:388:5>
|     |-CallExpr 0x558bb1ad4808 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558bb1ad4758 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x558bb1ad4798 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x558bb1ad47a8 <col:30> 'const char *' lvalue ParmVar 0x558bb1aa3df0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x558bb1ad47c8 <col:39> 'int' lvalue ParmVar 0x558bb1aa3e70 'flags' 'int'
|     | `-DeclRefExpr 0x558bb1ad47e8 <col:46> 'T' lvalue ParmVar 0x558bb1aa3f18 'x' 'T &'
|     `-ReturnStmt 0x558bb1ad4870 <line:387:9, col:17>
|       `-UnaryOperator 0x558bb1ad4858 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558bb1ad4848 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558bb1aa4588 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x558bb1aa4148 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x558bb1aa41c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x558bb1aa44e8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x558bb1aa4288 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aa4328 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x558bb1aa43c8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x558bb1ad49f0 <col:74, line:403:5>
|     `-ReturnStmt 0x558bb1ad49e0 <line:402:9, col:56>
|       `-CallExpr 0x558bb1ad49a0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558bb1ad48b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558bb1ad4920 <col:28> 'const char *' lvalue ParmVar 0x558bb1aa4288 'keyword' 'const char *'
|         |-IntegerLiteral 0x558bb1ad4940 <col:37> 'int' 0
|         |-DeclRefExpr 0x558bb1ad4960 <col:40> 'T' lvalue ParmVar 0x558bb1aa4328 'x' 'T &'
|         `-DeclRefExpr 0x558bb1ad4980 <col:43> 'const V' lvalue ParmVar 0x558bb1aa43c8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x558bb1aa49f8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x558bb1aa45f8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x558bb1aa4678 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x558bb1aa4958 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x558bb1aa4738 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aa47d8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x558bb1aa4878 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x558bb1ad4b58 <col:76, line:407:5>
|     `-ReturnStmt 0x558bb1ad4b48 <line:406:9, col:65>
|       `-CallExpr 0x558bb1ad4b08 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558bb1ad4a18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558bb1ad4a88 <col:28> 'const char *' lvalue ParmVar 0x558bb1aa4738 'keyword' 'const char *'
|         |-DeclRefExpr 0x558bb1ad4aa8 <col:37> 'const int' lvalue Var 0x558bb1aa2d70 'positional' 'const int'
|         |-DeclRefExpr 0x558bb1ad4ac8 <col:49> 'T' lvalue ParmVar 0x558bb1aa47d8 'x' 'T &'
|         `-DeclRefExpr 0x558bb1ad4ae8 <col:52> 'const V' lvalue ParmVar 0x558bb1aa4878 'default_value' 'const V &'
|-FunctionTemplateDecl 0x558bb1aa4f48 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x558bb1aa4a68 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x558bb1aa4ae8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x558bb1aa4ea8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x558bb1aa4ba8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aa4c28 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x558bb1aa4cc8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x558bb1aa4d68 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x558bb1ad4cc0 <col:85, line:412:5>
|     |-CallExpr 0x558bb1ad4c40 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558bb1ad4b70 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x558bb1ad4bb0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x558bb1ad4bc0 <col:37> 'const char *' lvalue ParmVar 0x558bb1aa4ba8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x558bb1ad4be0 <col:46> 'int' lvalue ParmVar 0x558bb1aa4c28 'flags' 'int'
|     | |-DeclRefExpr 0x558bb1ad4c00 <col:53> 'T' lvalue ParmVar 0x558bb1aa4cc8 'x' 'T &'
|     | `-DeclRefExpr 0x558bb1ad4c20 <col:56> 'const V' lvalue ParmVar 0x558bb1aa4d68 'default_value' 'const V &'
|     `-ReturnStmt 0x558bb1ad4cb0 <line:411:9, col:17>
|       `-UnaryOperator 0x558bb1ad4c98 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558bb1ad4c88 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558bb1aa53d8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x558bb1aa4fc0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558bb1aa5038 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558bb1aa5338 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558bb1aa50f8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aa5170 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x558bb1aa5218 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x558bb1ad4e40 <col:53, line:425:5>
|     `-ReturnStmt 0x558bb1ad4e30 <line:424:9, col:42>
|       `-CallExpr 0x558bb1ad4df0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558bb1ad4cf0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558bb1ad4d70 <col:21> 'const char *' lvalue ParmVar 0x558bb1aa50f8 'keyword' 'const char *'
|         |-IntegerLiteral 0x558bb1ad4d90 <col:30> 'int' 0
|         |-DeclRefExpr 0x558bb1ad4db0 <col:33> 'P' lvalue ParmVar 0x558bb1aa5170 'parser' 'P'
|         `-DeclRefExpr 0x558bb1ad4dd0 <col:41> 'T' lvalue ParmVar 0x558bb1aa5218 'x' 'T &'
|-FunctionTemplateDecl 0x558bb1aa5828 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x558bb1aa5448 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558bb1aa54c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558bb1aa5788 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558bb1aa5588 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aa5600 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x558bb1aa56a8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x558bb1ad4fb8 <col:55, line:429:5>
|     `-ReturnStmt 0x558bb1ad4fa8 <line:428:9, col:50>
|       `-CallExpr 0x558bb1ad4f68 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558bb1ad4e68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558bb1ad4ee8 <col:21> 'const char *' lvalue ParmVar 0x558bb1aa5588 'keyword' 'const char *'
|         |-DeclRefExpr 0x558bb1ad4f08 <col:30> 'const int' lvalue Var 0x558bb1aa2c78 'mandatory' 'const int'
|         |-DeclRefExpr 0x558bb1ad4f28 <col:41> 'P' lvalue ParmVar 0x558bb1aa5600 'parser' 'P'
|         `-DeclRefExpr 0x558bb1ad4f48 <col:49> 'T' lvalue ParmVar 0x558bb1aa56a8 'x' 'T &'
|-FunctionTemplateDecl 0x558bb1aa5c78 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x558bb1aa5898 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558bb1aa5918 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558bb1aa5bd8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558bb1aa59d8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aa5a50 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x558bb1aa5af8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x558bb1ad5130 <col:55, line:433:5>
|     `-ReturnStmt 0x558bb1ad5120 <line:432:9, col:51>
|       `-CallExpr 0x558bb1ad50e0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558bb1ad4fe0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558bb1ad5060 <col:21> 'const char *' lvalue ParmVar 0x558bb1aa59d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x558bb1ad5080 <col:30> 'const int' lvalue Var 0x558bb1aa2d70 'positional' 'const int'
|         |-DeclRefExpr 0x558bb1ad50a0 <col:42> 'P' lvalue ParmVar 0x558bb1aa5a50 'parser' 'P'
|         `-DeclRefExpr 0x558bb1ad50c0 <col:50> 'T' lvalue ParmVar 0x558bb1aa5af8 'x' 'T &'
|-FunctionTemplateDecl 0x558bb1aa6150 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x558bb1aa5ce8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558bb1aa5d68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558bb1aa60b0 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558bb1aa5e28 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aa5ea0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x558bb1aa5f48 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x558bb1ad5358 <col:56, line:437:5>
|     `-ReturnStmt 0x558bb1ad5348 <line:436:9, col:63>
|       `-CallExpr 0x558bb1ad5308 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558bb1ad5158 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558bb1ad51d8 <col:21> 'const char *' lvalue ParmVar 0x558bb1aa5e28 'keyword' 'const char *'
|         |-BinaryOperator 0x558bb1ad52a8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x558bb1ad5258 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x558bb1ad5238 <col:30> 'const int' lvalue Var 0x558bb1aa2c78 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x558bb1ad5290 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x558bb1ad5270 <col:42> 'const int' lvalue Var 0x558bb1aa2d70 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x558bb1ad52c8 <col:54> 'P' lvalue ParmVar 0x558bb1aa5ea0 'parser' 'P'
|         `-DeclRefExpr 0x558bb1ad52e8 <col:62> 'T' lvalue ParmVar 0x558bb1aa5f48 'x' 'T &'
|-FunctionTemplateDecl 0x558bb1aa6678 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x558bb1aa61c0 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558bb1aa6238 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558bb1aa65d8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x558bb1aa62f8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aa6378 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x558bb1aa63f0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x558bb1aa6498 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x558bb1ad54c0 <col:64, line:442:5>
|     |-CallExpr 0x558bb1ad5440 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558bb1ad5370 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x558bb1ad53b0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x558bb1ad53c0 <col:30> 'const char *' lvalue ParmVar 0x558bb1aa62f8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x558bb1ad53e0 <col:39> 'int' lvalue ParmVar 0x558bb1aa6378 'flags' 'int'
|     | |-DeclRefExpr 0x558bb1ad5400 <col:46> 'P' lvalue ParmVar 0x558bb1aa63f0 'parser' 'P'
|     | `-DeclRefExpr 0x558bb1ad5420 <col:54> 'T' lvalue ParmVar 0x558bb1aa6498 'x' 'T &'
|     `-ReturnStmt 0x558bb1ad54b0 <line:441:9, col:17>
|       `-UnaryOperator 0x558bb1ad5498 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558bb1ad5488 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558bb1aa6c78 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x558bb1aa66f0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558bb1aa6768 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x558bb1aa67e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x558bb1aa6bd8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x558bb1aa68b0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aa6928 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x558bb1aa69c8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x558bb1aa6a98 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x558bb1ad5658 <col:84, line:458:5>
|     `-ReturnStmt 0x558bb1ad5648 <line:457:9, col:64>
|       `-CallExpr 0x558bb1ad5600 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558bb1ad54f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558bb1ad5560 <col:28> 'const char *' lvalue ParmVar 0x558bb1aa68b0 'keyword' 'const char *'
|         |-IntegerLiteral 0x558bb1ad5580 <col:37> 'int' 0
|         |-DeclRefExpr 0x558bb1ad55a0 <col:40> 'P' lvalue ParmVar 0x558bb1aa6928 'parser' 'P'
|         |-DeclRefExpr 0x558bb1ad55c0 <col:48> 'T' lvalue ParmVar 0x558bb1aa69c8 'x' 'T &'
|         `-DeclRefExpr 0x558bb1ad55e0 <col:51> 'const V' lvalue ParmVar 0x558bb1aa6a98 'default_value' 'const V &'
|-FunctionTemplateDecl 0x558bb1aa71f8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x558bb1aa6cf0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558bb1aa6d68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x558bb1aa6de8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x558bb1aa7158 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x558bb1aa6eb0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aa6f28 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x558bb1aa6fc8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x558bb1aa7068 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x558bb1ad57e8 <col:86, line:462:5>
|     `-ReturnStmt 0x558bb1ad57d8 <line:461:9, col:73>
|       `-CallExpr 0x558bb1ad5790 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558bb1ad5680 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558bb1ad56f0 <col:28> 'const char *' lvalue ParmVar 0x558bb1aa6eb0 'keyword' 'const char *'
|         |-DeclRefExpr 0x558bb1ad5710 <col:37> 'const int' lvalue Var 0x558bb1aa2d70 'positional' 'const int'
|         |-DeclRefExpr 0x558bb1ad5730 <col:49> 'P' lvalue ParmVar 0x558bb1aa6f28 'parser' 'P'
|         |-DeclRefExpr 0x558bb1ad5750 <col:57> 'T' lvalue ParmVar 0x558bb1aa6fc8 'x' 'T &'
|         `-DeclRefExpr 0x558bb1ad5770 <col:60> 'const V' lvalue ParmVar 0x558bb1aa7068 'default_value' 'const V &'
|-FunctionTemplateDecl 0x558bb1aa7858 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x558bb1aa7270 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558bb1aa72e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x558bb1aa7368 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x558bb1aa77b8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x558bb1aa7430 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aa74b0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x558bb1aa7528 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x558bb1aa75c8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x558bb1aa7668 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x558bb1ad5978 <col:95, line:467:5>
|     |-CallExpr 0x558bb1ad58f0 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558bb1ad5800 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x558bb1ad5840 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x558bb1ad5850 <col:37> 'const char *' lvalue ParmVar 0x558bb1aa7430 'keyword' 'const char *'
|     | |-DeclRefExpr 0x558bb1ad5870 <col:46> 'int' lvalue ParmVar 0x558bb1aa74b0 'flags' 'int'
|     | |-DeclRefExpr 0x558bb1ad5890 <col:53> 'P' lvalue ParmVar 0x558bb1aa7528 'parser' 'P'
|     | |-DeclRefExpr 0x558bb1ad58b0 <col:61> 'T' lvalue ParmVar 0x558bb1aa75c8 'x' 'T &'
|     | `-DeclRefExpr 0x558bb1ad58d0 <col:64> 'const V' lvalue ParmVar 0x558bb1aa7668 'default_value' 'const V &'
|     `-ReturnStmt 0x558bb1ad5968 <line:466:9, col:17>
|       `-UnaryOperator 0x558bb1ad5950 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558bb1ad5940 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558bb1aa7e38 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x558bb1aa78d8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558bb1aa7958 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x558bb1aa79d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x558bb1aa7d98 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x558bb1aa7aa0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aa7b18 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x558bb1aa7bb8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x558bb1aa7c58 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x558bb1ad5b20 <col:63, line:481:5>
|     `-ReturnStmt 0x558bb1ad5b10 <line:480:9, col:47>
|       `-CallExpr 0x558bb1ad5ac8 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558bb1ad59a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558bb1ad5a28 <col:21> 'const char *' lvalue ParmVar 0x558bb1aa7aa0 'keyword' 'const char *'
|         |-IntegerLiteral 0x558bb1ad5a48 <col:30> 'int' 0
|         |-DeclRefExpr 0x558bb1ad5a68 <col:33> 'P' lvalue ParmVar 0x558bb1aa7b18 'parser' 'P'
|         |-DeclRefExpr 0x558bb1ad5a88 <col:41> 'T1' lvalue ParmVar 0x558bb1aa7bb8 'x1' 'T1 &'
|         `-DeclRefExpr 0x558bb1ad5aa8 <col:45> 'T2' lvalue ParmVar 0x558bb1aa7c58 'x2' 'T2 &'
|-FunctionTemplateDecl 0x558bb1aa83b8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x558bb1aa7eb0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558bb1aa7f28 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x558bb1aa7fa8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x558bb1aa8318 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x558bb1aa8070 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aa80e8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x558bb1aa8188 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x558bb1aa8228 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x558bb1ad5cc0 <col:65, line:485:5>
|     `-ReturnStmt 0x558bb1ad5cb0 <line:484:9, col:55>
|       `-CallExpr 0x558bb1ad5c68 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558bb1ad5b48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558bb1ad5bc8 <col:21> 'const char *' lvalue ParmVar 0x558bb1aa8070 'keyword' 'const char *'
|         |-DeclRefExpr 0x558bb1ad5be8 <col:30> 'const int' lvalue Var 0x558bb1aa2c78 'mandatory' 'const int'
|         |-DeclRefExpr 0x558bb1ad5c08 <col:41> 'P' lvalue ParmVar 0x558bb1aa80e8 'parser' 'P'
|         |-DeclRefExpr 0x558bb1ad5c28 <col:49> 'T1' lvalue ParmVar 0x558bb1aa8188 'x1' 'T1 &'
|         `-DeclRefExpr 0x558bb1ad5c48 <col:53> 'T2' lvalue ParmVar 0x558bb1aa8228 'x2' 'T2 &'
|-FunctionTemplateDecl 0x558bb1aa8938 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x558bb1aa8430 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558bb1aa84a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x558bb1aa8528 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x558bb1aa8898 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x558bb1aa85f0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aa8668 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x558bb1aa8708 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x558bb1aa87a8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x558bb1ad5e60 <col:65, line:489:5>
|     `-ReturnStmt 0x558bb1ad5e50 <line:488:9, col:56>
|       `-CallExpr 0x558bb1ad5e08 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558bb1ad5ce8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558bb1ad5d68 <col:21> 'const char *' lvalue ParmVar 0x558bb1aa85f0 'keyword' 'const char *'
|         |-DeclRefExpr 0x558bb1ad5d88 <col:30> 'const int' lvalue Var 0x558bb1aa2d70 'positional' 'const int'
|         |-DeclRefExpr 0x558bb1ad5da8 <col:42> 'P' lvalue ParmVar 0x558bb1aa8668 'parser' 'P'
|         |-DeclRefExpr 0x558bb1ad5dc8 <col:50> 'T1' lvalue ParmVar 0x558bb1aa8708 'x1' 'T1 &'
|         `-DeclRefExpr 0x558bb1ad5de8 <col:54> 'T2' lvalue ParmVar 0x558bb1aa87a8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x558bb1aa8eb8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x558bb1aa89b0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558bb1aa8a28 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x558bb1aa8aa8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x558bb1aa8e18 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x558bb1aa8b70 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aa8be8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x558bb1aa8c88 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x558bb1aa8d28 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x558bb1ad60b0 <col:66, line:493:5>
|     `-ReturnStmt 0x558bb1ad60a0 <line:492:9, col:68>
|       `-CallExpr 0x558bb1ad6058 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558bb1ad5e88 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558bb1ad5f08 <col:21> 'const char *' lvalue ParmVar 0x558bb1aa8b70 'keyword' 'const char *'
|         |-BinaryOperator 0x558bb1ad5fd8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x558bb1ad5f88 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x558bb1ad5f68 <col:30> 'const int' lvalue Var 0x558bb1aa2c78 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x558bb1ad5fc0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x558bb1ad5fa0 <col:42> 'const int' lvalue Var 0x558bb1aa2d70 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x558bb1ad5ff8 <col:54> 'P' lvalue ParmVar 0x558bb1aa8be8 'parser' 'P'
|         |-DeclRefExpr 0x558bb1ad6018 <col:62> 'T1' lvalue ParmVar 0x558bb1aa8c88 'x1' 'T1 &'
|         `-DeclRefExpr 0x558bb1ad6038 <col:66> 'T2' lvalue ParmVar 0x558bb1aa8d28 'x2' 'T2 &'
|-FunctionTemplateDecl 0x558bb1aa9518 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x558bb1aa8f30 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558bb1aa8fa8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x558bb1aa9028 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x558bb1aa9478 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x558bb1aa90f0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aa9170 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x558bb1aa91e8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x558bb1aa9288 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x558bb1aa9328 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x558bb1ad6240 <col:74, line:498:5>
|     |-CallExpr 0x558bb1ad61b8 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558bb1ad60c8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x558bb1ad6108 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x558bb1ad6118 <col:30> 'const char *' lvalue ParmVar 0x558bb1aa90f0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x558bb1ad6138 <col:39> 'int' lvalue ParmVar 0x558bb1aa9170 'flags' 'int'
|     | |-DeclRefExpr 0x558bb1ad6158 <col:46> 'P' lvalue ParmVar 0x558bb1aa91e8 'parser' 'P'
|     | |-DeclRefExpr 0x558bb1ad6178 <col:54> 'T1' lvalue ParmVar 0x558bb1aa9288 'x1' 'T1 &'
|     | `-DeclRefExpr 0x558bb1ad6198 <col:58> 'T2' lvalue ParmVar 0x558bb1aa9328 'x2' 'T2 &'
|     `-ReturnStmt 0x558bb1ad6230 <line:497:9, col:17>
|       `-UnaryOperator 0x558bb1ad6218 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558bb1ad6208 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558bb1aa9878 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x558bb1aa9598 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558bb1aa97d8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x558bb1aa9650 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aa96c8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x558bb1ad6388 <col:52, line:509:5>
|     `-ReturnStmt 0x558bb1ad6378 <line:508:9, col:44>
|       `-CallExpr 0x558bb1ad6340 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558bb1ad6270 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558bb1ad62e0 <col:26> 'const char *' lvalue ParmVar 0x558bb1aa9650 'keyword' 'const char *'
|         |-IntegerLiteral 0x558bb1ad6300 <col:35> 'int' 0
|         `-DeclRefExpr 0x558bb1ad6320 <col:38> 'P' lvalue ParmVar 0x558bb1aa96c8 'parser' 'P'
|-FunctionTemplateDecl 0x558bb1aa9b78 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x558bb1aa98e0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558bb1aa9ad8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x558bb1aa9990 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aa9a08 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x558bb1ad64c8 <col:54, line:513:5>
|     `-ReturnStmt 0x558bb1ad64b8 <line:512:9, col:52>
|       `-CallExpr 0x558bb1ad6480 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558bb1ad63b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558bb1ad6420 <col:26> 'const char *' lvalue ParmVar 0x558bb1aa9990 'keyword' 'const char *'
|         |-DeclRefExpr 0x558bb1ad6440 <col:35> 'const int' lvalue Var 0x558bb1aa2c78 'mandatory' 'const int'
|         `-DeclRefExpr 0x558bb1ad6460 <col:46> 'P' lvalue ParmVar 0x558bb1aa9a08 'parser' 'P'
|-FunctionTemplateDecl 0x558bb1aa9e78 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x558bb1aa9be0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558bb1aa9dd8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x558bb1aa9c90 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aa9d08 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x558bb1ad6608 <col:54, line:517:5>
|     `-ReturnStmt 0x558bb1ad65f8 <line:516:9, col:53>
|       `-CallExpr 0x558bb1ad65c0 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558bb1ad64f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558bb1ad6560 <col:26> 'const char *' lvalue ParmVar 0x558bb1aa9c90 'keyword' 'const char *'
|         |-DeclRefExpr 0x558bb1ad6580 <col:35> 'const int' lvalue Var 0x558bb1aa2d70 'positional' 'const int'
|         `-DeclRefExpr 0x558bb1ad65a0 <col:47> 'P' lvalue ParmVar 0x558bb1aa9d08 'parser' 'P'
|-FunctionTemplateDecl 0x558bb1aaa178 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x558bb1aa9ee0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558bb1aaa0d8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x558bb1aa9f90 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aaa008 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x558bb1ad67f8 <col:55, line:521:5>
|     `-ReturnStmt 0x558bb1ad67e8 <line:520:9, col:65>
|       `-CallExpr 0x558bb1ad67b0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558bb1ad6630 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558bb1ad66a0 <col:26> 'const char *' lvalue ParmVar 0x558bb1aa9f90 'keyword' 'const char *'
|         |-BinaryOperator 0x558bb1ad6770 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x558bb1ad6720 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x558bb1ad6700 <col:35> 'const int' lvalue Var 0x558bb1aa2c78 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x558bb1ad6758 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x558bb1ad6738 <col:47> 'const int' lvalue Var 0x558bb1aa2d70 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x558bb1ad6790 <col:59> 'P' lvalue ParmVar 0x558bb1aaa008 'parser' 'P'
|-FunctionTemplateDecl 0x558bb1aaa548 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x558bb1aaa1e0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558bb1aaa4a8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x558bb1aaa290 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aaa310 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x558bb1aaa388 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x558bb1ad6938 <col:63, line:526:5>
|     |-CallExpr 0x558bb1ad68c0 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558bb1ad6810 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x558bb1ad6850 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x558bb1ad6860 <col:35> 'const char *' lvalue ParmVar 0x558bb1aaa290 'keyword' 'const char *'
|     | |-DeclRefExpr 0x558bb1ad6880 <col:44> 'int' lvalue ParmVar 0x558bb1aaa310 'flags' 'int'
|     | `-DeclRefExpr 0x558bb1ad68a0 <col:51> 'P' lvalue ParmVar 0x558bb1aaa388 'parser' 'P'
|     `-ReturnStmt 0x558bb1ad6928 <line:525:9, col:17>
|       `-UnaryOperator 0x558bb1ad6910 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558bb1ad6900 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558bb1aaa998 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x558bb1aaa5b8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558bb1aaa638 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558bb1aaa8f8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558bb1aaa6f8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aaa770 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x558bb1aaa818 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x558bb1ad6a90 <col:58, line:541:5>
|     `-ReturnStmt 0x558bb1ad6a80 <line:540:9, col:39>
|       `-CallExpr 0x558bb1ad6a48 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558bb1ad6968 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558bb1ad69e8 <col:21> 'const char *' lvalue ParmVar 0x558bb1aaa6f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x558bb1ad6a08 <col:30> 'P' lvalue ParmVar 0x558bb1aaa770 'parser' 'P'
|         `-DeclRefExpr 0x558bb1ad6a28 <col:38> 'T' lvalue ParmVar 0x558bb1aaa818 'x' 'T &'
|-FunctionTemplateDecl 0x558bb1aaade8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x558bb1aaaa08 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558bb1aaaa88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558bb1aaad48 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558bb1aaab48 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aaabc0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x558bb1aaac68 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x558bb1ad6bc8 <col:60, line:545:5>
|     `-ReturnStmt 0x558bb1ad6bb8 <line:544:9, col:41>
|       `-CallExpr 0x558bb1ad6b80 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558bb1ad6ab8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558bb1ad6b20 <col:23> 'const char *' lvalue ParmVar 0x558bb1aaab48 'keyword' 'const char *'
|         |-DeclRefExpr 0x558bb1ad6b40 <col:32> 'P' lvalue ParmVar 0x558bb1aaabc0 'parser' 'P'
|         `-DeclRefExpr 0x558bb1ad6b60 <col:40> 'T' lvalue ParmVar 0x558bb1aaac68 'x' 'T &'
|-FunctionTemplateDecl 0x558bb1aab238 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x558bb1aaae58 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558bb1aaaed8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558bb1aab198 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558bb1aaaf98 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aab010 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x558bb1aab0b8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x558bb1ad6d00 <col:60, line:549:5>
|     `-ReturnStmt 0x558bb1ad6cf0 <line:548:9, col:41>
|       `-CallExpr 0x558bb1ad6cb8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558bb1ad6bf0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558bb1ad6c58 <col:23> 'const char *' lvalue ParmVar 0x558bb1aaaf98 'keyword' 'const char *'
|         |-DeclRefExpr 0x558bb1ad6c78 <col:32> 'P' lvalue ParmVar 0x558bb1aab010 'parser' 'P'
|         `-DeclRefExpr 0x558bb1ad6c98 <col:40> 'T' lvalue ParmVar 0x558bb1aab0b8 'x' 'T &'
|-FunctionTemplateDecl 0x558bb1aab688 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x558bb1aab2a8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558bb1aab328 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558bb1aab5e8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558bb1aab3e8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aab460 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x558bb1aab508 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x558bb1ad6e38 <col:61, line:553:5>
|     `-ReturnStmt 0x558bb1ad6e28 <line:552:9, col:42>
|       `-CallExpr 0x558bb1ad6df0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558bb1ad6d28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558bb1ad6d90 <col:24> 'const char *' lvalue ParmVar 0x558bb1aab3e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x558bb1ad6db0 <col:33> 'P' lvalue ParmVar 0x558bb1aab460 'parser' 'P'
|         `-DeclRefExpr 0x558bb1ad6dd0 <col:41> 'T' lvalue ParmVar 0x558bb1aab508 'x' 'T &'
|-FunctionTemplateDecl 0x558bb1aabb68 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x558bb1aab6f8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558bb1aab778 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558bb1aabac8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x558bb1aab838 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aab8b8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x558bb1aab930 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x558bb1aab9d8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x558bb1ad6fb0 <col:69, line:557:5>
|     `-ReturnStmt 0x558bb1ad6fa0 <line:556:9, col:46>
|       `-CallExpr 0x558bb1ad6f60 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558bb1ad6e60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558bb1ad6ee0 <col:21> 'const char *' lvalue ParmVar 0x558bb1aab838 'keyword' 'const char *'
|         |-DeclRefExpr 0x558bb1ad6f00 <col:30> 'int' lvalue ParmVar 0x558bb1aab8b8 'flags' 'int'
|         |-DeclRefExpr 0x558bb1ad6f20 <col:37> 'P' lvalue ParmVar 0x558bb1aab930 'parser' 'P'
|         `-DeclRefExpr 0x558bb1ad6f40 <col:45> 'T' lvalue ParmVar 0x558bb1aab9d8 'x' 'T &'
|-FunctionTemplateDecl 0x558bb1aabe78 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x558bb1aabbe0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558bb1aabdd8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x558bb1aabc90 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aabd08 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x558bb1ad70f0 <col:56, line:571:5>
|     `-ReturnStmt 0x558bb1ad70e0 <line:570:9, col:48>
|       `-CallExpr 0x558bb1ad70a8 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558bb1ad6fd8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558bb1ad7048 <col:30> 'const char *' lvalue ParmVar 0x558bb1aabc90 'keyword' 'const char *'
|         |-IntegerLiteral 0x558bb1ad7068 <col:39> 'int' 0
|         `-DeclRefExpr 0x558bb1ad7088 <col:42> 'P' lvalue ParmVar 0x558bb1aabd08 'parser' 'P'
|-FunctionTemplateDecl 0x558bb1aac208 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x558bb1aabee0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558bb1aac168 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x558bb1aabf90 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aac010 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x558bb1aac088 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x558bb1ad72c0 <col:67, line:576:5>
|     |-CallExpr 0x558bb1ad7248 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558bb1ad7108 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x558bb1ad7148 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x558bb1ad7158 <col:39> 'const char *' lvalue ParmVar 0x558bb1aabf90 'keyword' 'const char *'
|     | |-BinaryOperator 0x558bb1ad7208 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x558bb1ad71b8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x558bb1ad7178 <col:48> 'int' lvalue ParmVar 0x558bb1aac010 'flags' 'int'
|     | | `-ImplicitCastExpr 0x558bb1ad71f0 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x558bb1ad71d0 <col:56> 'const int' lvalue Var 0x558bb1aa2f60 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x558bb1ad7228 <col:68> 'P' lvalue ParmVar 0x558bb1aac088 'parser' 'P'
|     `-ReturnStmt 0x558bb1ad72b0 <line:575:9, col:17>
|       `-UnaryOperator 0x558bb1ad7298 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558bb1ad7288 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558bb1aac658 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x558bb1aac278 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558bb1aac2f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558bb1aac5b8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x558bb1aac3b8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aac430 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x558bb1aac4d8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x558bb1ad7430 <col:62, line:592:5>
|     `-ReturnStmt 0x558bb1ad7420 <line:591:9, col:51>
|       `-CallExpr 0x558bb1ad73e0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558bb1ad72f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558bb1ad7360 <col:30> 'const char *' lvalue ParmVar 0x558bb1aac3b8 'keyword' 'const char *'
|         |-IntegerLiteral 0x558bb1ad7380 <col:39> 'int' 0
|         |-DeclRefExpr 0x558bb1ad73a0 <col:42> 'P' lvalue ParmVar 0x558bb1aac430 'parser' 'P'
|         `-DeclRefExpr 0x558bb1ad73c0 <col:50> 'T' lvalue ParmVar 0x558bb1aac4d8 'x' 'T &'
|-FunctionTemplateDecl 0x558bb1aacb38 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x558bb1aac6c8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558bb1aac748 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558bb1aaca98 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x558bb1aac808 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aac888 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x558bb1aac900 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x558bb1aac9a8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x558bb1ad7628 <col:73, line:597:5>
|     |-CallExpr 0x558bb1ad75a8 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558bb1ad7448 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x558bb1ad7488 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x558bb1ad7498 <col:39> 'const char *' lvalue ParmVar 0x558bb1aac808 'keyword' 'const char *'
|     | |-BinaryOperator 0x558bb1ad7548 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x558bb1ad74f8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x558bb1ad74b8 <col:48> 'int' lvalue ParmVar 0x558bb1aac888 'flags' 'int'
|     | | `-ImplicitCastExpr 0x558bb1ad7530 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x558bb1ad7510 <col:56> 'const int' lvalue Var 0x558bb1aa2f60 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x558bb1ad7568 <col:68> 'P' lvalue ParmVar 0x558bb1aac900 'parser' 'P'
|     | `-DeclRefExpr 0x558bb1ad7588 <col:76> 'T' lvalue ParmVar 0x558bb1aac9a8 'x' 'T &'
|     `-ReturnStmt 0x558bb1ad7618 <line:596:9, col:17>
|       `-UnaryOperator 0x558bb1ad7600 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558bb1ad75f0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558bb1aad0e8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x558bb1aacbb0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558bb1aacc28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558bb1aad048 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x558bb1aacce8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aacd60 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x558bb1aacf20 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x558bb1ad7798 <col:65, line:614:5>
|     `-ReturnStmt 0x558bb1ad7788 <line:613:9, col:46>
|       `-CallExpr 0x558bb1ad7748 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558bb1ad7658 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558bb1ad76c8 <col:25> 'const char *' lvalue ParmVar 0x558bb1aacce8 'keyword' 'const char *'
|         |-IntegerLiteral 0x558bb1ad76e8 <col:34> 'int' 0
|         |-DeclRefExpr 0x558bb1ad7708 <col:37> 'P' lvalue ParmVar 0x558bb1aacd60 'parser' 'P'
|         `-DeclRefExpr 0x558bb1ad7728 <col:45> 'Vector<T>' lvalue ParmVar 0x558bb1aacf20 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x558bb1aad518 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x558bb1aad158 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558bb1aad478 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x558bb1aad210 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aad360 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x558bb1ad79b0 <col:55, line:618:5>
|     `-ReturnStmt 0x558bb1ad79a0 <line:617:9, col:55>
|       `-CallExpr 0x558bb1ad7960 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558bb1ad77c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558bb1ad7830 <col:25> 'const char *' lvalue ParmVar 0x558bb1aad210 'keyword' 'const char *'
|         |-IntegerLiteral 0x558bb1ad7850 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x558bb1ad7920 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x558bb1ad7940 <col:54> 'Vector<T>' lvalue ParmVar 0x558bb1aad360 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x558bb1aadae8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x558bb1aad580 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558bb1aad5f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558bb1aada48 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x558bb1aad6b8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aad738 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x558bb1aad7b0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x558bb1aad900 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x558bb1ad7ba8 <col:76, line:623:5>
|     |-CallExpr 0x558bb1ad7b28 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x558bb1ad79c8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x558bb1ad7a08 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x558bb1ad7a18 <col:34> 'const char *' lvalue ParmVar 0x558bb1aad6b8 'keyword' 'const char *'
|     | |-BinaryOperator 0x558bb1ad7ac8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x558bb1ad7a78 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x558bb1ad7a38 <col:43> 'int' lvalue ParmVar 0x558bb1aad738 'flags' 'int'
|     | | `-ImplicitCastExpr 0x558bb1ad7ab0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x558bb1ad7a90 <col:51> 'const int' lvalue Var 0x558bb1aa2f60 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x558bb1ad7ae8 <col:63> 'P' lvalue ParmVar 0x558bb1aad7b0 'parser' 'P'
|     | `-DeclRefExpr 0x558bb1ad7b08 <col:71> 'Vector<T>' lvalue ParmVar 0x558bb1aad900 'x' 'Vector<T> &'
|     `-ReturnStmt 0x558bb1ad7b98 <line:622:9, col:17>
|       `-UnaryOperator 0x558bb1ad7b80 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558bb1ad7b70 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558bb1aae028 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x558bb1aadb60 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558bb1aadbd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558bb1aadf88 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x558bb1aadc98 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1aadd18 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x558bb1aade60 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x558bb1ad7e10 <col:66, line:627:5>
|     `-ReturnStmt 0x558bb1ad7e00 <line:626:9, col:59>
|       `-CallExpr 0x558bb1ad7dc0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x558bb1ad7bd8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x558bb1ad7c48 <col:25> 'const char *' lvalue ParmVar 0x558bb1aadc98 'keyword' 'const char *'
|         |-DeclRefExpr 0x558bb1ad7c68 <col:34> 'int' lvalue ParmVar 0x558bb1aadd18 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x558bb1ad7d80 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x558bb1ad7da0 <col:58> 'Vector<T>' lvalue ParmVar 0x558bb1aade60 'x' 'Vector<T> &'
|-CXXMethodDecl 0x558bb1ab3170 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x558bb1ad7e90 <col:25, line:633:5>
|   `-ReturnStmt 0x558bb1ad7e80 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x558bb1ad7e68 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x558bb1ad7e38 <col:16> 'const bool' lvalue ->_status 0x558bb1ab8fa8
|         `-CXXThisExpr 0x558bb1ad7e28 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x558bb1ab32e8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x558bb1ab3228 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x558bb1ad7f78 <col:27, line:639:5>
|   |-BinaryOperator 0x558bb1ad7f20 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x558bb1ad7ea8 <col:9> 'bool' lvalue ParmVar 0x558bb1ab3228 'x' 'bool &'
|   | `-ImplicitCastExpr 0x558bb1ad7f08 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x558bb1ad7ed8 <col:13> 'bool' lvalue ->_status 0x558bb1ab8fa8
|   |     `-CXXThisExpr 0x558bb1ad7ec8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x558bb1ad7f68 <line:638:9, col:17>
|     `-UnaryOperator 0x558bb1ad7f50 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558bb1ad7f40 <col:17> 'Args *' this
|-CXXMethodDecl 0x558bb1ab3468 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x558bb1ab33a8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x558bb1ad8068 <col:39, line:644:5>
|   |-BinaryOperator 0x558bb1ad8010 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x558bb1ad7f98 <col:9> 'bool' lvalue ParmVar 0x558bb1ab33a8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x558bb1ad7ff8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x558bb1ad7fc8 <col:13> 'const bool' lvalue ->_status 0x558bb1ab8fa8
|   |     `-CXXThisExpr 0x558bb1ad7fb8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x558bb1ad8058 <line:643:9, col:17>
|     `-UnaryOperator 0x558bb1ad8040 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558bb1ad8030 <col:17> 'const Args *' this
|-CXXMethodDecl 0x558bb1ab3530 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x558bb1ad8110 <col:30, line:651:5>
|   `-ReturnStmt 0x558bb1ad8100 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x558bb1ad80e8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x558bb1ad80b8 <col:16> 'bool' lvalue ->_read_status 0x558bb19b0d00
|         `-ImplicitCastExpr 0x558bb1ad8098 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x558bb1ad8088 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x558bb1ab3678 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x558bb1ab35e8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x558bb1ad8218 <col:32, line:658:5>
|   |-BinaryOperator 0x558bb1ad81c0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x558bb1ad8128 <col:9> 'bool' lvalue ParmVar 0x558bb1ab35e8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x558bb1ad81a8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x558bb1ad8178 <col:13> 'bool' lvalue ->_read_status 0x558bb19b0d00
|   |     `-ImplicitCastExpr 0x558bb1ad8158 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x558bb1ad8148 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x558bb1ad8208 <line:657:9, col:17>
|     `-UnaryOperator 0x558bb1ad81f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558bb1ad81e0 <col:17> 'Args *' this
|-CXXMethodDecl 0x558bb1ab37c8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x558bb1ab3738 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x558bb1ad8328 <col:44, line:663:5>
|   |-BinaryOperator 0x558bb1ad82d0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x558bb1ad8238 <col:9> 'bool' lvalue ParmVar 0x558bb1ab3738 'x' 'bool &'
|   | `-ImplicitCastExpr 0x558bb1ad82b8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x558bb1ad8288 <col:13> 'bool' lvalue ->_read_status 0x558bb19b0d00
|   |     `-ImplicitCastExpr 0x558bb1ad8268 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x558bb1ad8258 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x558bb1ad8318 <line:662:9, col:17>
|     `-UnaryOperator 0x558bb1ad8300 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558bb1ad82f0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x558bb1ab3890 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x558bb1ab3958 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x558bb1ab3a20 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x558bb1ab3ae8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x558bb1ab3df8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x558bb1ab3b88 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558bb1ab3d58 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x558bb1ab3c68 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x558bb1ad86e0 <col:19, line:706:5>
|     `-IfStmt 0x558bb1ad86b8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x558bb1ad8428 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x558bb1ad85e8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x558bb1ad85b8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x558bb1ad8578 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x558bb1ad8480 <col:42> '<bound member function type>' ->simple_slot 0x558bb1ad3170
|       |     | `-CXXThisExpr 0x558bb1ad8470 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x558bb1ad8518 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x558bb1ad84d0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x558bb1838108
|       |     | `-DeclRefExpr 0x558bb1ad84b0 <col:55> 'T' lvalue ParmVar 0x558bb1ab3c68 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x558bb1ad8558 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x558bb1ad86a8 <line:705:13, col:34>
|         `-CallExpr 0x558bb1ad8680 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x558bb1ad8608 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x558bb1ad8660 <col:33> 'T' lvalue ParmVar 0x558bb1ab3c68 'x' 'T &'
|-FunctionTemplateDecl 0x558bb1ab40c8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x558bb1ab3e58 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558bb1ab4028 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x558bb1ab3f38 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x558bb1ad8ac0 <col:31, line:717:5>
|     |-DeclStmt 0x558bb1ad8820 <line:713:9, col:23>
|     | `-VarDecl 0x558bb1ad8708 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x558bb1ad87f8 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x558bb1ad8780 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x558bb1ad87d8 <col:21> 'T' lvalue ParmVar 0x558bb1ab3f38 'x' 'T &'
|     |-IfStmt 0x558bb1ad8a70 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x558bb1ad8918 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x558bb1ad8a50 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x558bb1ad89f0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x558bb1ad8980 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558bb19ef208 0x558bb19eee28 0x558bb19eea58 0x558bb19ee678 0x558bb19ee298 0x558bb19edec8
|     |   | `-DeclRefExpr 0x558bb1ad8960 <col:14> 'T *' lvalue Var 0x558bb1ad8708 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x558bb1ad8a30 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x558bb1ad8aa8 <line:716:9, col:16>
|       `-DeclRefExpr 0x558bb1ad8a88 <col:16> 'T *' lvalue Var 0x558bb1ad8708 's' 'T *'
|-FunctionTemplateDecl 0x558bb1ab44d8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x558bb1ab4128 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x558bb1ab41a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x558bb1ab4438 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x558bb1ab4288 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x558bb1ab4328 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x558bb1ad8dd0 <col:37, line:726:5>
|     |-IfStmt 0x558bb1ad8d60 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x558bb1ad8d80 <line:723:13, col:26>
|     | | `-VarDecl 0x558bb1ad8b28 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x558bb1ad8c18 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x558bb1ad8ba0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x558bb1ad8bf8 <col:25> 'T' lvalue ParmVar 0x558bb1ab4288 'x' 'T &'
|     | |-DeclRefExpr 0x558bb1ad8c40 <col:16> 'T *' lvalue Var 0x558bb1ad8b28 's' 'T *'
|     | `-BinaryOperator 0x558bb1ad8d40 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x558bb1ad8cf0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x558bb1ad8c80 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558bb19ef208 0x558bb19eee28 0x558bb19eea58 0x558bb19ee678 0x558bb19ee298 0x558bb19edec8
|     |   | `-DeclRefExpr 0x558bb1ad8c60 <col:14> 'T *' lvalue Var 0x558bb1ad8b28 's' 'T *'
|     |   `-DeclRefExpr 0x558bb1ad8d20 <col:18> 'const V' lvalue ParmVar 0x558bb1ab4328 'value' 'const V &'
|     `-ReturnStmt 0x558bb1ad8dc0 <line:725:9, col:17>
|       `-UnaryOperator 0x558bb1ad8da8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x558bb1ad8d98 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x558bb1ab48d8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x558bb1ab4540 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x558bb1ab4838 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x558bb1ab45f0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1ab4670 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x558bb1ab4718 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x558bb1adc520 <col:65, line:737:5>
|     |-DeclStmt 0x558bb1ad8e68 <line:732:9, col:26>
|     | `-VarDecl 0x558bb1ad8e00 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x558bb1adc4e8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x558bb1adc508 <line:733:13, col:58>
|       | `-VarDecl 0x558bb1ad8e90 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x558bb1ad9070 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x558bb1ad9040 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x558bb1ad9028 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x558bb1ad9008 <col:26, col:58> 'String' (CXXTemporary 0x558bb1ad9008)
|       |           `-CXXMemberCallExpr 0x558bb1ad8f98 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x558bb1ad8f08 <col:26> '<bound member function type>' ->find 0x558bb1ad2788
|       |             | `-CXXThisExpr 0x558bb1ad8ef8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x558bb1ad8fd0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558bb1ad8f38 <col:31> 'const char *' lvalue ParmVar 0x558bb1ab45f0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x558bb1ad8fe8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558bb1ad8f58 <col:40> 'int' lvalue ParmVar 0x558bb1ab4670 'flags' 'int'
|       |             `-DeclRefExpr 0x558bb1ad8f78 <col:47> 'Args::Slot *' lvalue Var 0x558bb1ad8e00 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x558bb1ad9128 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x558bb1ad9110 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x558bb1ad90f0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x558bb1ad90c0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x558bb17fb0d8
|       |       `-ImplicitCastExpr 0x558bb1ad90a8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x558bb1ad9088 <col:20> 'String' lvalue Var 0x558bb1ad8e90 'str' 'String'
|       `-CompoundStmt 0x558bb1adc4c8 <col:61, line:736:9>
|         |-DeclStmt 0x558bb1adbf10 <line:734:13, col:76>
|         | `-VarDecl 0x558bb1ad9178 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x558bb1adbee0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x558bb1adbe50 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x558bb1adbe98 <col:60> 'T' lvalue ParmVar 0x558bb1ab4718 'variable' 'T &'
|         |     `-UnaryOperator 0x558bb1adbec8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x558bb1adbeb8 <col:71> 'Args *' this
|         `-CallExpr 0x558bb1adc498 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x558bb1adbf38 <col:13> '<bound member function type>' ->postparse 0x558bb1ad2998
|           | `-CXXThisExpr 0x558bb1adbf28 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x558bb1adc458 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x558bb1adbf68 <col:23> 'T *' lvalue Var 0x558bb1ad9178 's' 'T *'
|           | `-CallExpr 0x558bb1adc418 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x558bb1adc1f0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x558bb1adc2f0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x558bb1adc310 <col:86> 'String' lvalue Var 0x558bb1ad8e90 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x558bb1adc3c0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x558bb1adc350 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558bb19ef208 0x558bb19eee28 0x558bb19eea58 0x558bb19ee678 0x558bb19ee298 0x558bb19edec8
|           |   | `-DeclRefExpr 0x558bb1adc330 <col:92> 'T *' lvalue Var 0x558bb1ad9178 's' 'T *'
|           |   `-UnaryOperator 0x558bb1adc400 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x558bb1adc3f0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x558bb1adc478 <col:103> 'Args::Slot *' lvalue Var 0x558bb1ad8e00 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x558bb1ab4e28 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x558bb1ab4948 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x558bb1ab49c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x558bb1ab4d88 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x558bb1ab4a88 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1ab4b08 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x558bb1ab4ba8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x558bb1ab4c48 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x558bb1add3c0 <col:88, line:745:5>
|     |-DeclStmt 0x558bb1adc5b8 <line:741:9, col:26>
|     | `-VarDecl 0x558bb1adc550 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x558bb1adc7d8 <line:742:9, col:55>
|     | `-VarDecl 0x558bb1adc5e0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x558bb1adc7c0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x558bb1adc790 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x558bb1adc778 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x558bb1adc758 <col:22, col:54> 'String' (CXXTemporary 0x558bb1adc758)
|     |           `-CXXMemberCallExpr 0x558bb1adc6e8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x558bb1adc658 <col:22> '<bound member function type>' ->find 0x558bb1ad2788
|     |             | `-CXXThisExpr 0x558bb1adc648 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x558bb1adc720 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x558bb1adc688 <col:27> 'const char *' lvalue ParmVar 0x558bb1ab4a88 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x558bb1adc738 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x558bb1adc6a8 <col:36> 'int' lvalue ParmVar 0x558bb1ab4b08 'flags' 'int'
|     |             `-DeclRefExpr 0x558bb1adc6c8 <col:43> 'Args::Slot *' lvalue Var 0x558bb1adc550 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x558bb1adcbb0 <line:743:9, col:72>
|     | `-VarDecl 0x558bb1adc828 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x558bb1adcb80 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x558bb1adcaf0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x558bb1adcb38 <col:56> 'T' lvalue ParmVar 0x558bb1ab4ba8 'variable' 'T &'
|     |     `-UnaryOperator 0x558bb1adcb68 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x558bb1adcb58 <col:67> 'Args *' this
|     `-CallExpr 0x558bb1add390 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x558bb1adcbd8 <col:9> '<bound member function type>' ->postparse 0x558bb1ad2998
|       | `-CXXThisExpr 0x558bb1adcbc8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x558bb1add350 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x558bb1adcc08 <col:19> 'T *' lvalue Var 0x558bb1adc828 's' 'T *'
|       | `-ParenExpr 0x558bb1add330 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x558bb1add300 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x558bb1add2e8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x558bb1add2d0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x558bb1add2b0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x558bb1add280 <col:25> '<bound member function type>' .operator int (String::*)() const 0x558bb17fb0d8
|       |     |       `-ImplicitCastExpr 0x558bb1add268 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x558bb1adcc28 <col:25> 'String' lvalue Var 0x558bb1adc5e0 'str' 'String'
|       |     |-CallExpr 0x558bb1add0d8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x558bb1adceb0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x558bb1adcfb0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x558bb1adcfd0 <col:89> 'String' lvalue Var 0x558bb1adc5e0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x558bb1add080 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x558bb1add010 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558bb19ef208 0x558bb19eee28 0x558bb19eea58 0x558bb19ee678 0x558bb19ee298 0x558bb19edec8
|       |     | | `-DeclRefExpr 0x558bb1adcff0 <col:95> 'T *' lvalue Var 0x558bb1adc828 's' 'T *'
|       |     | `-UnaryOperator 0x558bb1add0c0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x558bb1add0b0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x558bb1add248 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x558bb1add228 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x558bb1add1f8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x558bb1add1a8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x558bb1add138 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558bb19ef208 0x558bb19eee28 0x558bb19eea58 0x558bb19ee678 0x558bb19ee298 0x558bb19edec8
|       |         | | `-DeclRefExpr 0x558bb1add118 <col:109> 'T *' lvalue Var 0x558bb1adc828 's' 'T *'
|       |         | `-DeclRefExpr 0x558bb1add1d8 <col:113> 'const V' lvalue ParmVar 0x558bb1ab4c48 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x558bb1add218 <col:120> 'bool' true
|       `-DeclRefExpr 0x558bb1add370 <col:128> 'Args::Slot *' lvalue Var 0x558bb1adc550 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x558bb1ab5358 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x558bb1ab4ea0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558bb1ab4f18 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558bb1ab52b8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x558bb1ab4fd8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1ab5058 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x558bb1ab50d0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x558bb1ab5178 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x558bb1addfb8 <col:75, line:754:5>
|     |-DeclStmt 0x558bb1add468 <line:749:9, col:26>
|     | `-VarDecl 0x558bb1add400 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x558bb1addf80 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x558bb1addfa0 <line:750:13, col:58>
|       | `-VarDecl 0x558bb1add490 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x558bb1add670 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x558bb1add640 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x558bb1add628 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x558bb1add608 <col:26, col:58> 'String' (CXXTemporary 0x558bb1add608)
|       |           `-CXXMemberCallExpr 0x558bb1add598 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x558bb1add508 <col:26> '<bound member function type>' ->find 0x558bb1ad2788
|       |             | `-CXXThisExpr 0x558bb1add4f8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x558bb1add5d0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558bb1add538 <col:31> 'const char *' lvalue ParmVar 0x558bb1ab4fd8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x558bb1add5e8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558bb1add558 <col:40> 'int' lvalue ParmVar 0x558bb1ab5058 'flags' 'int'
|       |             `-DeclRefExpr 0x558bb1add578 <col:47> 'Args::Slot *' lvalue Var 0x558bb1add400 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x558bb1add728 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x558bb1add710 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x558bb1add6f0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x558bb1add6c0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x558bb17fb0d8
|       |       `-ImplicitCastExpr 0x558bb1add6a8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x558bb1add688 <col:20> 'String' lvalue Var 0x558bb1add490 'str' 'String'
|       `-CompoundStmt 0x558bb1addf60 <col:61, line:753:9>
|         |-DeclStmt 0x558bb1addb00 <line:751:13, col:63>
|         | `-VarDecl 0x558bb1add778 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x558bb1addad0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x558bb1adda40 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x558bb1adda88 <col:47> 'T' lvalue ParmVar 0x558bb1ab5178 'variable' 'T &'
|         |     `-UnaryOperator 0x558bb1addab8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x558bb1addaa8 <col:58> 'Args *' this
|         `-CallExpr 0x558bb1addf30 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x558bb1addb28 <col:13> '<bound member function type>' ->postparse 0x558bb1ad2998
|           | `-CXXThisExpr 0x558bb1addb18 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x558bb1addef0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x558bb1addb58 <col:23> 'T *' lvalue Var 0x558bb1add778 's' 'T *'
|           | `-CallExpr 0x558bb1addeb0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x558bb1addd40 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x558bb1addd88 <col:56> 'P' lvalue ParmVar 0x558bb1ab50d0 'parser' 'P'
|           |   |-DeclRefExpr 0x558bb1addda8 <col:64> 'String' lvalue Var 0x558bb1add490 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x558bb1adde58 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x558bb1addde8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558bb19ef208 0x558bb19eee28 0x558bb19eea58 0x558bb19ee678 0x558bb19ee298 0x558bb19edec8
|           |   | `-DeclRefExpr 0x558bb1adddc8 <col:70> 'T *' lvalue Var 0x558bb1add778 's' 'T *'
|           |   `-UnaryOperator 0x558bb1adde98 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x558bb1adde88 <col:74> 'Args *' this
|           `-DeclRefExpr 0x558bb1addf10 <col:81> 'Args::Slot *' lvalue Var 0x558bb1add400 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x558bb1ab59b8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x558bb1ab53d0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x558bb1ab5448 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x558bb1ab54c8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x558bb1ab5918 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x558bb1ab5590 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1ab5610 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x558bb1ab5688 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x558bb1ab5728 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x558bb1ab57c8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x558bb1aded48 <col:98, line:762:5>
|     |-DeclStmt 0x558bb1ade050 <line:758:9, col:26>
|     | `-VarDecl 0x558bb1addfe8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x558bb1ade270 <line:759:9, col:55>
|     | `-VarDecl 0x558bb1ade078 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x558bb1ade258 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x558bb1ade228 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x558bb1ade210 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x558bb1ade1f0 <col:22, col:54> 'String' (CXXTemporary 0x558bb1ade1f0)
|     |           `-CXXMemberCallExpr 0x558bb1ade180 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x558bb1ade0f0 <col:22> '<bound member function type>' ->find 0x558bb1ad2788
|     |             | `-CXXThisExpr 0x558bb1ade0e0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x558bb1ade1b8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x558bb1ade120 <col:27> 'const char *' lvalue ParmVar 0x558bb1ab5590 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x558bb1ade1d0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x558bb1ade140 <col:36> 'int' lvalue ParmVar 0x558bb1ab5610 'flags' 'int'
|     |             `-DeclRefExpr 0x558bb1ade160 <col:43> 'Args::Slot *' lvalue Var 0x558bb1addfe8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x558bb1ade690 <line:760:9, col:59>
|     | `-VarDecl 0x558bb1ade2c8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x558bb1ade660 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x558bb1ade5d0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x558bb1ade618 <col:43> 'T' lvalue ParmVar 0x558bb1ab5728 'variable' 'T &'
|     |     `-UnaryOperator 0x558bb1ade648 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x558bb1ade638 <col:54> 'Args *' this
|     `-CallExpr 0x558bb1aded18 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x558bb1ade6b8 <col:9> '<bound member function type>' ->postparse 0x558bb1ad2998
|       | `-CXXThisExpr 0x558bb1ade6a8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x558bb1adecd8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x558bb1ade6e8 <col:19> 'T *' lvalue Var 0x558bb1ade2c8 's' 'T *'
|       | `-ParenExpr 0x558bb1adecb8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x558bb1adec88 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x558bb1adec70 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x558bb1adec58 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x558bb1adec38 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x558bb1adec08 <col:25> '<bound member function type>' .operator int (String::*)() const 0x558bb17fb0d8
|       |     |       `-ImplicitCastExpr 0x558bb1adebf0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x558bb1ade708 <col:25> 'String' lvalue Var 0x558bb1ade078 'str' 'String'
|       |     |-CallExpr 0x558bb1adea60 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x558bb1ade8f0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x558bb1ade938 <col:59> 'P' lvalue ParmVar 0x558bb1ab5688 'parser' 'P'
|       |     | |-DeclRefExpr 0x558bb1ade958 <col:67> 'String' lvalue Var 0x558bb1ade078 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x558bb1adea08 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x558bb1ade998 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558bb19ef208 0x558bb19eee28 0x558bb19eea58 0x558bb19ee678 0x558bb19ee298 0x558bb19edec8
|       |     | | `-DeclRefExpr 0x558bb1ade978 <col:73> 'T *' lvalue Var 0x558bb1ade2c8 's' 'T *'
|       |     | `-UnaryOperator 0x558bb1adea48 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x558bb1adea38 <col:77> 'Args *' this
|       |     `-ParenExpr 0x558bb1adebd0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x558bb1adebb0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x558bb1adeb80 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x558bb1adeb30 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x558bb1adeac0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558bb19ef208 0x558bb19eee28 0x558bb19eea58 0x558bb19ee678 0x558bb19ee298 0x558bb19edec8
|       |         | | `-DeclRefExpr 0x558bb1adeaa0 <col:87> 'T *' lvalue Var 0x558bb1ade2c8 's' 'T *'
|       |         | `-DeclRefExpr 0x558bb1adeb60 <col:91> 'const V' lvalue ParmVar 0x558bb1ab57c8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x558bb1adeba0 <col:98> 'bool' true
|       `-DeclRefExpr 0x558bb1adecf8 <col:106> 'Args::Slot *' lvalue Var 0x558bb1addfe8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x558bb1ab6028 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x558bb1ab5a38 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558bb1ab5ab8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x558bb1ab5b38 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x558bb1ab5f88 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x558bb1ab5c00 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1ab5c80 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x558bb1ab5cf8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x558bb1ab5d98 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x558bb1ab5e38 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x558bb1adfd28 <col:60, line:773:5>
|     |-DeclStmt 0x558bb1adedf0 <line:767:9, col:26>
|     | `-VarDecl 0x558bb1aded88 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x558bb1adfcf0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x558bb1adfd10 <line:768:13, col:58>
|       | `-VarDecl 0x558bb1adee18 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x558bb1adeff8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x558bb1adefc8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x558bb1adefb0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x558bb1adef90 <col:26, col:58> 'String' (CXXTemporary 0x558bb1adef90)
|       |           `-CXXMemberCallExpr 0x558bb1adef20 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x558bb1adee90 <col:26> '<bound member function type>' ->find 0x558bb1ad2788
|       |             | `-CXXThisExpr 0x558bb1adee80 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x558bb1adef58 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558bb1adeec0 <col:31> 'const char *' lvalue ParmVar 0x558bb1ab5c00 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x558bb1adef70 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558bb1adeee0 <col:40> 'int' lvalue ParmVar 0x558bb1ab5c80 'flags' 'int'
|       |             `-DeclRefExpr 0x558bb1adef00 <col:47> 'Args::Slot *' lvalue Var 0x558bb1aded88 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x558bb1adf0b0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x558bb1adf098 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x558bb1adf078 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x558bb1adf048 <col:20> '<bound member function type>' .operator int (String::*)() const 0x558bb17fb0d8
|       |       `-ImplicitCastExpr 0x558bb1adf030 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x558bb1adf010 <col:20> 'String' lvalue Var 0x558bb1adee18 'str' 'String'
|       `-CompoundStmt 0x558bb1adfcc8 <col:61, line:772:9>
|         |-DeclStmt 0x558bb1adf3f0 <line:769:13, col:66>
|         | `-VarDecl 0x558bb1adf108 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x558bb1adf3c0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x558bb1adf330 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x558bb1adf378 <col:49> 'T1' lvalue ParmVar 0x558bb1ab5d98 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x558bb1adf3a8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x558bb1adf398 <col:61> 'Args *' this
|         |-DeclStmt 0x558bb1adf760 <line:770:13, col:66>
|         | `-VarDecl 0x558bb1adf478 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x558bb1adf730 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x558bb1adf6a0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x558bb1adf6e8 <col:49> 'T2' lvalue ParmVar 0x558bb1ab5e38 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x558bb1adf718 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x558bb1adf708 <col:61> 'Args *' this
|         `-CallExpr 0x558bb1adfc98 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x558bb1adf788 <col:13> '<bound member function type>' ->postparse 0x558bb1ad2998
|           | `-CXXThisExpr 0x558bb1adf778 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x558bb1adfc58 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x558bb1adf7f8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x558bb1adf7b8 <col:23> 'T1 *' lvalue Var 0x558bb1adf108 's1' 'T1 *'
|           | | `-DeclRefExpr 0x558bb1adf7d8 <col:29> 'T2 *' lvalue Var 0x558bb1adf478 's2' 'T2 *'
|           | `-CallExpr 0x558bb1adfc10 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x558bb1adf9e0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x558bb1adfa28 <col:63> 'P' lvalue ParmVar 0x558bb1ab5cf8 'parser' 'P'
|           |   |-DeclRefExpr 0x558bb1adfa48 <col:71> 'String' lvalue Var 0x558bb1adee18 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x558bb1adfaf8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x558bb1adfa88 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558bb19ef208 0x558bb19eee28 0x558bb19eea58 0x558bb19ee678 0x558bb19ee298 0x558bb19edec8
|           |   | `-DeclRefExpr 0x558bb1adfa68 <col:77> 'T1 *' lvalue Var 0x558bb1adf108 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x558bb1adfbb8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x558bb1adfb48 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558bb19ef208 0x558bb19eee28 0x558bb19eea58 0x558bb19ee678 0x558bb19ee298 0x558bb19edec8
|           |   | `-DeclRefExpr 0x558bb1adfb28 <col:82> 'T2 *' lvalue Var 0x558bb1adf478 's2' 'T2 *'
|           |   `-UnaryOperator 0x558bb1adfbf8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x558bb1adfbe8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x558bb1adfc78 <col:94> 'Args::Slot *' lvalue Var 0x558bb1aded88 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x558bb1ab6418 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x558bb1ab60a8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558bb1ab6378 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x558bb1ab6160 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1ab61e0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x558bb1ab6258 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x558bb1ae0240 <col:67, line:780:5>
|     |-DeclStmt 0x558bb1adfdc0 <line:777:9, col:26>
|     | `-VarDecl 0x558bb1adfd58 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x558bb1ae0208 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x558bb1ae0228 <line:778:13, col:58>
|       | `-VarDecl 0x558bb1adfde8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x558bb1adffc8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x558bb1adff98 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x558bb1adff80 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x558bb1adff60 <col:26, col:58> 'String' (CXXTemporary 0x558bb1adff60)
|       |           `-CXXMemberCallExpr 0x558bb1adfef0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x558bb1adfe60 <col:26> '<bound member function type>' ->find 0x558bb1ad2788
|       |             | `-CXXThisExpr 0x558bb1adfe50 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x558bb1adff28 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558bb1adfe90 <col:31> 'const char *' lvalue ParmVar 0x558bb1ab6160 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x558bb1adff40 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x558bb1adfeb0 <col:40> 'int' lvalue ParmVar 0x558bb1ab61e0 'flags' 'int'
|       |             `-DeclRefExpr 0x558bb1adfed0 <col:47> 'Args::Slot *' lvalue Var 0x558bb1adfd58 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x558bb1ae0080 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x558bb1ae0068 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x558bb1ae0048 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x558bb1ae0018 <col:20> '<bound member function type>' .operator int (String::*)() const 0x558bb17fb0d8
|       |       `-ImplicitCastExpr 0x558bb1ae0000 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x558bb1adffe0 <col:20> 'String' lvalue Var 0x558bb1adfde8 'str' 'String'
|       `-CallExpr 0x558bb1ae01d8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x558bb1ae00a8 <col:13> '<bound member function type>' ->postparse 0x558bb1ad2998
|         | `-CXXThisExpr 0x558bb1ae0098 <col:13> 'Args *' implicit this
|         |-CallExpr 0x558bb1ae0188 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x558bb1ae00f8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x558bb1ae00d8 <col:23> 'P' lvalue ParmVar 0x558bb1ab6258 'parser' 'P'
|         | |-DeclRefExpr 0x558bb1ae0140 <col:36> 'String' lvalue Var 0x558bb1adfde8 'str' 'String'
|         | `-UnaryOperator 0x558bb1ae0170 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x558bb1ae0160 <col:42> 'Args *' this
|         `-DeclRefExpr 0x558bb1ae01b8 <col:49> 'Args::Slot *' lvalue Var 0x558bb1adfd58 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x558bb1ab67b8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x558bb1ab6488 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x558bb1ab6718 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x558bb1ab6540 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1ab65c0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x558bb1ab6638 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x558bb1ae0bb0 <col:71, line:792:5>
|     |-DeclStmt 0x558bb1ae02d8 <line:784:9, col:26>
|     | `-VarDecl 0x558bb1ae0270 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x558bb1ae03a8 <line:785:9, col:29>
|     | `-VarDecl 0x558bb1ae0308 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x558bb1ae0390 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x558bb1ae0370 <col:28> 'int' 1
|     |-WhileStmt 0x558bb1ae0a60 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x558bb1ae0a80 <line:786:16, col:61>
|     | | `-VarDecl 0x558bb1ae03d0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x558bb1ae05b0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x558bb1ae0580 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x558bb1ae0568 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x558bb1ae0548 <col:29, col:61> 'String' (CXXTemporary 0x558bb1ae0548)
|     | |           `-CXXMemberCallExpr 0x558bb1ae04d8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x558bb1ae0448 <col:29> '<bound member function type>' ->find 0x558bb1ad2788
|     | |             | `-CXXThisExpr 0x558bb1ae0438 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x558bb1ae0510 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x558bb1ae0478 <col:34> 'const char *' lvalue ParmVar 0x558bb1ab6540 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x558bb1ae0528 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x558bb1ae0498 <col:43> 'int' lvalue ParmVar 0x558bb1ab65c0 'flags' 'int'
|     | |             `-DeclRefExpr 0x558bb1ae04b8 <col:50> 'Args::Slot *' lvalue Var 0x558bb1ae0270 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x558bb1ae0668 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x558bb1ae0650 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x558bb1ae0630 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x558bb1ae0600 <col:23> '<bound member function type>' .operator int (String::*)() const 0x558bb17fb0d8
|     | |       `-ImplicitCastExpr 0x558bb1ae05e8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x558bb1ae05c8 <col:23> 'String' lvalue Var 0x558bb1ae03d0 'str' 'String'
|     | `-CompoundStmt 0x558bb1ae0a38 <col:64, line:790:9>
|     |   |-CallExpr 0x558bb1ae07c0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x558bb1ae0690 <col:13> '<bound member function type>' ->postparse 0x558bb1ad2998
|     |   | | `-CXXThisExpr 0x558bb1ae0680 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x558bb1ae0770 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x558bb1ae06e0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x558bb1ae06c0 <col:23> 'P' lvalue ParmVar 0x558bb1ab6638 'parser' 'P'
|     |   | | |-DeclRefExpr 0x558bb1ae0728 <col:36> 'String' lvalue Var 0x558bb1ae03d0 'str' 'String'
|     |   | | `-UnaryOperator 0x558bb1ae0758 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x558bb1ae0748 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x558bb1ae07a0 <col:49> 'Args::Slot *' lvalue Var 0x558bb1ae0270 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x558bb1ae0958 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x558bb1ae07f0 <col:13> 'int' lvalue Var 0x558bb1ae0308 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x558bb1ae0940 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x558bb1ae0920 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x558bb1ae0888 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x558bb1ae0868 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x558bb1ae0850 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x558bb1ae0810 <col:28> 'int' lvalue Var 0x558bb1ae0308 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x558bb1ae0830 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x558bb1ae0908 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x558bb1ae08d8 <col:49> 'bool' lvalue ->_read_status 0x558bb19b0d00
|     |   |         `-ImplicitCastExpr 0x558bb1ae08b8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x558bb1ae08a8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x558bb1ae0a08 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x558bb1ae0978 <col:13> 'int' lvalue ParmVar 0x558bb1ab65c0 'flags' 'int'
|     |     `-UnaryOperator 0x558bb1ae09f0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x558bb1ae09d8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x558bb1ae09b8 <col:23> 'const int' lvalue Var 0x558bb1aa2c78 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x558bb1ae0b90 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x558bb1ae0ac8 <col:9> 'bool' lvalue ->_read_status 0x558bb19b0d00
|       | `-ImplicitCastExpr 0x558bb1ae0aa8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x558bb1ae0a98 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x558bb1ae0b70 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x558bb1ae0b50 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x558bb1ae0b38 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x558bb1ae0af8 <col:25> 'int' lvalue Var 0x558bb1ae0308 'read_status' 'int'
|           `-IntegerLiteral 0x558bb1ae0b18 <col:40> 'int' 1
|-FunctionTemplateDecl 0x558bb1ab6c98 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x558bb1ab6828 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558bb1ab68a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558bb1ab6bf8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x558bb1ab6968 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1ab69e8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x558bb1ab6a60 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x558bb1ab6b08 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x558bb1ae1b40 <col:84, line:805:5>
|     |-DeclStmt 0x558bb1ae0c58 <line:796:9, col:26>
|     | `-VarDecl 0x558bb1ae0bf0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x558bb1ae0d28 <line:797:9, col:29>
|     | `-VarDecl 0x558bb1ae0c88 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x558bb1ae0d10 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x558bb1ae0cf0 <col:28> 'int' 1
|     |-DeclStmt 0x558bb1ae1060 <line:798:9, col:71>
|     | `-VarDecl 0x558bb1ae0d78 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x558bb1ae1030 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x558bb1ae0fa0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x558bb1ae0fe8 <col:55> 'T' lvalue ParmVar 0x558bb1ab6b08 'variable' 'T &'
|     |     `-UnaryOperator 0x558bb1ae1018 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x558bb1ae1008 <col:66> 'Args *' this
|     |-WhileStmt 0x558bb1ae19f0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x558bb1ae1a10 <line:799:16, col:61>
|     | | `-VarDecl 0x558bb1ae1088 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x558bb1ae1268 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x558bb1ae1238 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x558bb1ae1220 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x558bb1ae1200 <col:29, col:61> 'String' (CXXTemporary 0x558bb1ae1200)
|     | |           `-CXXMemberCallExpr 0x558bb1ae1190 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x558bb1ae1100 <col:29> '<bound member function type>' ->find 0x558bb1ad2788
|     | |             | `-CXXThisExpr 0x558bb1ae10f0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x558bb1ae11c8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x558bb1ae1130 <col:34> 'const char *' lvalue ParmVar 0x558bb1ab6968 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x558bb1ae11e0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x558bb1ae1150 <col:43> 'int' lvalue ParmVar 0x558bb1ab69e8 'flags' 'int'
|     | |             `-DeclRefExpr 0x558bb1ae1170 <col:50> 'Args::Slot *' lvalue Var 0x558bb1ae0bf0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x558bb1ae1320 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x558bb1ae1308 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x558bb1ae12e8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x558bb1ae12b8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x558bb17fb0d8
|     | |       `-ImplicitCastExpr 0x558bb1ae12a0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x558bb1ae1280 <col:23> 'String' lvalue Var 0x558bb1ae1088 'str' 'String'
|     | `-CompoundStmt 0x558bb1ae19c8 <col:64, line:803:9>
|     |   |-CallExpr 0x558bb1ae1750 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x558bb1ae1348 <col:13> '<bound member function type>' ->postparse 0x558bb1ad2998
|     |   | | `-CXXThisExpr 0x558bb1ae1338 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x558bb1ae1710 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x558bb1ae1378 <col:23> 'T *' lvalue Var 0x558bb1ae0d78 's' 'T *'
|     |   | | `-CallExpr 0x558bb1ae16d0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x558bb1ae1560 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x558bb1ae15a8 <col:56> 'P' lvalue ParmVar 0x558bb1ab6a60 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x558bb1ae15c8 <col:64> 'String' lvalue Var 0x558bb1ae1088 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x558bb1ae1678 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x558bb1ae1608 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558bb19ef208 0x558bb19eee28 0x558bb19eea58 0x558bb19ee678 0x558bb19ee298 0x558bb19edec8
|     |   | |   | `-DeclRefExpr 0x558bb1ae15e8 <col:70> 'T *' lvalue Var 0x558bb1ae0d78 's' 'T *'
|     |   | |   `-UnaryOperator 0x558bb1ae16b8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x558bb1ae16a8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x558bb1ae1730 <col:81> 'Args::Slot *' lvalue Var 0x558bb1ae0bf0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x558bb1ae18e8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x558bb1ae1780 <col:13> 'int' lvalue Var 0x558bb1ae0c88 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x558bb1ae18d0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x558bb1ae18b0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x558bb1ae1818 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x558bb1ae17f8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x558bb1ae17e0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x558bb1ae17a0 <col:28> 'int' lvalue Var 0x558bb1ae0c88 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x558bb1ae17c0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x558bb1ae1898 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x558bb1ae1868 <col:49> 'bool' lvalue ->_read_status 0x558bb19b0d00
|     |   |         `-ImplicitCastExpr 0x558bb1ae1848 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x558bb1ae1838 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x558bb1ae1998 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x558bb1ae1908 <col:13> 'int' lvalue ParmVar 0x558bb1ab69e8 'flags' 'int'
|     |     `-UnaryOperator 0x558bb1ae1980 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x558bb1ae1968 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x558bb1ae1948 <col:23> 'const int' lvalue Var 0x558bb1aa2c78 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x558bb1ae1b20 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x558bb1ae1a58 <col:9> 'bool' lvalue ->_read_status 0x558bb19b0d00
|       | `-ImplicitCastExpr 0x558bb1ae1a38 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x558bb1ae1a28 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x558bb1ae1b00 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x558bb1ae1ae0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x558bb1ae1ac8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x558bb1ae1a88 <col:25> 'int' lvalue Var 0x558bb1ae0c88 'read_status' 'int'
|           `-IntegerLiteral 0x558bb1ae1aa8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x558bb1ab7278 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x558bb1ab6d10 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x558bb1ab6d88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x558bb1ab71d8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x558bb1ab6e48 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x558bb1ab6ec8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x558bb1ab6f40 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x558bb1ab7090 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x558bb1ae2948 <col:87, line:821:5>
|     |-DeclStmt 0x558bb1ae1bf0 <line:809:9, col:26>
|     | `-VarDecl 0x558bb1ae1b88 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x558bb1ae1cc0 <line:810:9, col:29>
|     | `-VarDecl 0x558bb1ae1c20 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x558bb1ae1ca8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x558bb1ae1c88 <col:28> 'int' 1
|     |-DeclStmt 0x558bb1ae1f08 <line:811:9, col:38>
|     | `-VarDecl 0x558bb1ae1df0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x558bb1ae1ee0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x558bb1ae1e68 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x558bb1ae1ec0 <col:29> 'Vector<T>' lvalue ParmVar 0x558bb1ab7090 'variable' 'Vector<T> &'
|     |-WhileStmt 0x558bb1ae27f8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x558bb1ae2818 <line:812:16, col:61>
|     | | `-VarDecl 0x558bb1ae1f30 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x558bb1ae2110 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x558bb1ae20e0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x558bb1ae20c8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x558bb1ae20a8 <col:29, col:61> 'String' (CXXTemporary 0x558bb1ae20a8)
|     | |           `-CXXMemberCallExpr 0x558bb1ae2038 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x558bb1ae1fa8 <col:29> '<bound member function type>' ->find 0x558bb1ad2788
|     | |             | `-CXXThisExpr 0x558bb1ae1f98 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x558bb1ae2070 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x558bb1ae1fd8 <col:34> 'const char *' lvalue ParmVar 0x558bb1ab6e48 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x558bb1ae2088 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x558bb1ae1ff8 <col:43> 'int' lvalue ParmVar 0x558bb1ab6ec8 'flags' 'int'
|     | |             `-DeclRefExpr 0x558bb1ae2018 <col:50> 'Args::Slot *' lvalue Var 0x558bb1ae1b88 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x558bb1ae21c8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x558bb1ae21b0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x558bb1ae2190 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x558bb1ae2160 <col:23> '<bound member function type>' .operator int (String::*)() const 0x558bb17fb0d8
|     | |       `-ImplicitCastExpr 0x558bb1ae2148 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x558bb1ae2128 <col:23> 'String' lvalue Var 0x558bb1ae1f30 'str' 'String'
|     | `-CompoundStmt 0x558bb1ae27c0 <col:64, line:819:9>
|     |   |-DeclStmt 0x558bb1ae2288 <line:813:13, col:23>
|     |   | `-VarDecl 0x558bb1ae21f0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x558bb1ae2268 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x558bb1ae2408 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x558bb1ae22b0 <col:13> '<bound member function type>' ->postparse 0x558bb1ad2998
|     |   | | `-CXXThisExpr 0x558bb1ae22a0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x558bb1ae23b0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x558bb1ae2300 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x558bb1ae22e0 <col:23> 'P' lvalue ParmVar 0x558bb1ab6f40 'parser' 'P'
|     |   | | |-DeclRefExpr 0x558bb1ae2348 <col:36> 'String' lvalue Var 0x558bb1ae1f30 'str' 'String'
|     |   | | |-DeclRefExpr 0x558bb1ae2368 <col:41> 'T' lvalue Var 0x558bb1ae21f0 'sx' 'T'
|     |   | | `-UnaryOperator 0x558bb1ae2398 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x558bb1ae2388 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x558bb1ae23e8 <col:53> 'Args::Slot *' lvalue Var 0x558bb1ae1b88 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x558bb1ae2560 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x558bb1ae2498 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x558bb1ae2468 <col:17> 'bool' lvalue ->_read_status 0x558bb19b0d00
|     |   | |   `-ImplicitCastExpr 0x558bb1ae2448 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x558bb1ae2438 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x558bb1ae2538 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x558bb1ae24d0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x558bb1ae24b0 <col:17> 'Vector<T> *' lvalue Var 0x558bb1ae1df0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x558bb1ae2518 <col:30> 'T' lvalue Var 0x558bb1ae21f0 'sx' 'T'
|     |   |-BinaryOperator 0x558bb1ae26e0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x558bb1ae2578 <col:13> 'int' lvalue Var 0x558bb1ae1c20 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x558bb1ae26c8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x558bb1ae26a8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x558bb1ae2610 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x558bb1ae25f0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x558bb1ae25d8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x558bb1ae2598 <col:28> 'int' lvalue Var 0x558bb1ae1c20 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x558bb1ae25b8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x558bb1ae2690 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x558bb1ae2660 <col:49> 'bool' lvalue ->_read_status 0x558bb19b0d00
|     |   |         `-ImplicitCastExpr 0x558bb1ae2640 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x558bb1ae2630 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x558bb1ae2790 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x558bb1ae2700 <col:13> 'int' lvalue ParmVar 0x558bb1ab6ec8 'flags' 'int'
|     |     `-UnaryOperator 0x558bb1ae2778 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x558bb1ae2760 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x558bb1ae2740 <col:23> 'const int' lvalue Var 0x558bb1aa2c78 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x558bb1ae2928 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x558bb1ae2860 <col:9> 'bool' lvalue ->_read_status 0x558bb19b0d00
|       | `-ImplicitCastExpr 0x558bb1ae2840 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x558bb1ae2830 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x558bb1ae2908 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x558bb1ae28e8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x558bb1ae28d0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x558bb1ae2890 <col:25> 'int' lvalue Var 0x558bb1ae1c20 'read_status' 'int'
|           `-IntegerLiteral 0x558bb1ae28b0 <col:40> 'int' 1
|-AccessSpecDecl 0x558bb1ab72f0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x558bb1ab7318 prev 0x558bb1aa0f78 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x558bb1ab7410 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x558bb1ab7500 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x558bb1ae2980 <col:16, line:828:9>
| |-CXXDestructorDecl 0x558bb1ab75f0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x558bb1ae2990 <col:25, line:830:9>
| |-CXXMethodDecl 0x558bb1ab76f0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x558bb1ab77a0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x558bb1ab7848 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x558bb1ab7848
| | `-ParmVarDecl 0x558bb1ab7958 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x558bb1ab8118 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x558bb1ab8118
|   `-ParmVarDecl 0x558bb1ab8228 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x558bb1ab79c8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x558bb1ab7b28 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x558bb1ab7d20 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x558bb1ab7bd0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x558bb1ab7c48 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x558bb1ae2b70 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x558bb1ab7fd8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x558bb1ae29e0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x558bb1ae29a0 <col:20> 'void *' lvalue ParmVar 0x558bb1ab7bd0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x558bb1ab8040 '_slot' 'char *'
| | | `-CXXNewExpr 0x558bb1ae2a68 <col:32, col:45> 'char *' array Function 0x558bb161dd48 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x558bb1ae2a50 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x558bb1ae2a20 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x558bb1ab7c48 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x558bb1ab80a0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x558bb1ae2b30 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x558bb1ae2af0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x558bb1ab7c48 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x558bb1ae2bf0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x558bb1ab7e20 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x558bb1ab75f0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x558bb1ae2c78 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x558bb1ae2c58 <line:840:13, col:22> 'void' array Function 0x558bb161e0a8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x558bb1ae2c40 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x558bb1ae2c10 <col:22> 'char *' lvalue ->_slot 0x558bb1ab8040
| |         `-CXXThisExpr 0x558bb1ae2c00 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x558bb1ab7f20 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x558bb1ab76f0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x558bb1ae2e68 <col:22, line:844:9>
| |   `-CallExpr 0x558bb1ae2dd0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x558bb1ae2db8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x558bb1ae2d98 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x558bb1729b28 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x558bb1ae2e08 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x558bb1ae2ce8 <col:20> 'void *' lvalue ->_ptr 0x558bb1ab7fd8
| |     |   `-CXXThisExpr 0x558bb1ae2cd8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x558bb1ae2e38 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x558bb1ae2e20 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x558bb1ae2d28 <col:26> 'char *' lvalue ->_slot 0x558bb1ab8040
| |     |     `-CXXThisExpr 0x558bb1ae2d18 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x558bb1ae2e50 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x558bb1ae2d68 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x558bb1ab80a0
| |         `-CXXThisExpr 0x558bb1ae2d58 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x558bb1ab7fd8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x558bb1ab8040 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x558bb1ab80a0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x558bb1ab8298 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x558bb1ab8298
| | `-ParmVarDecl 0x558bb1ab83a8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x558bb1ab8448 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x558bb1ab8448
|   `-ParmVarDecl 0x558bb1ab8558 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x558bb1ab86f8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x558bb1ab85c8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x558bb1ab8668 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x558bb1ab8990 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x558bb1ab8b88 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x558bb1ab8a58 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x558bb1ab8d08 '_ptr' 'T *'
|   | | `-ParenListExpr 0x558bb1ae2ea0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x558bb1ae2e80 <col:20> 'T *' lvalue ParmVar 0x558bb1ab8a58 'ptr' 'T *'
|   | `-CompoundStmt 0x558bb1ae2ef0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x558bb1ab8c58 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x558bb1ab76f0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x558bb1ae30a0 <col:22, line:857:9>
|   |   `-CallExpr 0x558bb1ae3070 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x558bb1ae2f00 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x558bb17e2258 0x558bb178c588
|   |     |-CXXOperatorCallExpr 0x558bb1ae3000 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x558bb1ae2f90 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x558bb19ef208 0x558bb19eee28 0x558bb19eea58 0x558bb19ee678 0x558bb19ee298 0x558bb19edec8
|   |     | `-MemberExpr 0x558bb1ae2f60 <col:29> 'T *' lvalue ->_ptr 0x558bb1ab8d08
|   |     |   `-CXXThisExpr 0x558bb1ae2f50 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x558bb1ae3040 <col:35> 'T' lvalue ->_slot 0x558bb1ab8d68
|   |       `-CXXThisExpr 0x558bb1ae3030 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x558bb1ab8d08 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x558bb1ab8d68 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x558bb1ab8dd0 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x558bb1ab8ed0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x558bb1ab8f20 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558bb1ab8eb0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x558bb1ab8e90 <col:31> 'int' 48
|-FieldDecl 0x558bb1ab8f48 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x558bb1ab8fa8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x558bb1ab9008 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x558bb1ab9140 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x558bb1ad2030 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x558bb1ad2090 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x558bb1ad2140 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x558bb1ad2368 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x558bb1ad2270 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x558bb1ad24b8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x558bb1ad2428 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x558bb1ad2788 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x558bb1ad2578 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x558bb1ad25f8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x558bb1ad26a0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x558bb1ad2998 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x558bb1ad2850 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x558bb1ad28c8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x558bb1ad2a68 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x558bb1ad2bb8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x558bb1ad2b20 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x558bb1ad2f48 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x558bb1ad2c78 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x558bb1ad2cf8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x558bb1ad2da0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x558bb1ad2e58 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x558bb1ad3170 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x558bb1ad3020 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x558bb1ad3098 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x558bb1ad3488 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x558bb1ad3220 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x558bb1ad33e8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x558bb1ad32f8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558bb1a04b68 prev 0x558bb19f9d70 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558bb1a04c60 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x558bb1a04d50 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x558bb1a04e78 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x558bb1a04ff8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x558bb1a05178 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x558bb1a052f8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x558bb1a16128 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x558bb1a16998 <col:11>
|-CXXDestructorDecl 0x558bb1a16200 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x558bb1a16338 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x558bb1a16338
| `-ParmVarDecl 0x558bb1a16448 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x558bb1a164e8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x558bb1a164e8
| `-ParmVarDecl 0x558bb1a165f8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x558bb1a193b8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x558bb1a194c8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x558bb1a19748 <col:11>
|   `-ReturnStmt 0x558bb1a19738 <col:11>
|     `-UnaryOperator 0x558bb1a19720 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x558bb1a19710 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x558bb1a19538 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x558bb1a19538
  `-ParmVarDecl 0x558bb1a19648 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558bb1a05360 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558bb1a05478 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x558bb1a05518 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x558bb1a05580 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x558bb1a055e8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x558bb1a05650 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x558bb1a056b0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x558bb1a05770 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x558bb1a057d0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x558bb1a05830 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x558bb1a16038 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x558bb1a05518 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x558bb1a169a8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x558bb1a16a00 <col:12>
|-CXXConstructorDecl 0x558bb1a16668 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x558bb1a16668
| `-ParmVarDecl 0x558bb1a16778 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x558bb1a16818 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x558bb1a16818
| `-ParmVarDecl 0x558bb1a16928 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x558bb1a18aa0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558bb19f3480 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x558bb19f3598 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x558bb19f3628 <col:16, col:22> col:16 public
|-EnumDecl 0x558bb19f3650 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x558bb19f3750 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x558bb19f3830 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb19f3730 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x558bb19f3710 <col:21> 'int' 28
| `-EnumConstantDecl 0x558bb19f37e0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x558bb19f3848 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558bb19f37c0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x558bb19f37a0 <col:22> 'int' 64
|-CXXMethodDecl 0x558bb19f3b88 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x558bb19f3870 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x558bb19f38f0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x558bb19f3968 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x558bb19f39e0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x558bb19f3c48 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x558bb19f3e48 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x558bb19f3cc0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x558bb19f3d38 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x558bb19f3ef8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x558bb19f4058 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x558bb19f3f68 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x558bb19f4100 <col:72> warn_unused_result ""
|-TypedefDecl 0x558bb19f4460 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x558bb19f43f0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x558bb19f4390 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x558bb19f4350 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x558bb14ca310 'void'
|       |-PointerType 0x558bb1773820 'unsigned char *'
|       | `-BuiltinType 0x558bb14ca410 'unsigned char'
|       |-TypedefType 0x558bb156fdf0 'size_t' sugar
|       | |-Typedef 0x558bb153aaf0 'size_t'
|       | `-BuiltinType 0x558bb14ca470 'unsigned long'
|       `-PointerType 0x558bb14cab10 'void *'
|         `-BuiltinType 0x558bb14ca310 'void'
|-CXXMethodDecl 0x558bb19f48d8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x558bb19f44d0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x558bb19f4548 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x558bb19f45e0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x558bb19f4660 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x558bb1a0efd0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x558bb1a0efb8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x558bb1a0ef80 <col:58> 'int' 0
| |-ParmVarDecl 0x558bb19f46e0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x558bb1a0eff8 <col:76> 'int' 0
| |-ParmVarDecl 0x558bb19f4760 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x558bb1a0f018 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x558bb19f49a8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x558bb19f4a28 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x558bb19f4ae8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x558bb19f4b88 <col:20>
| `-OptimizeNoneAttr 0x558bb19f4be0 <col:30>
|-CXXMethodDecl 0x558bb19f4c58 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x558bb19f4cf8 <col:20>
| `-OptimizeNoneAttr 0x558bb19f4d50 <col:30>
|-CXXMethodDecl 0x558bb19f4dc8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x558bb19f4e68 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x558bb19f4f18 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x558bb19f4fb8 <col:20>
| |-OptimizeNoneAttr 0x558bb19f5010 <col:30>
| `-WarnUnusedResultAttr 0x558bb19f5038 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x558bb19f5090 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x558bb19f5130 <col:20>
| `-OptimizeNoneAttr 0x558bb19f5188 <col:30>
|-CXXMethodDecl 0x558bb19f51d8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x558bb19f5278 <col:20>
| `-OptimizeNoneAttr 0x558bb19f52d0 <col:30>
|-CXXMethodDecl 0x558bb19f5318 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x558bb19f53b8 <col:20>
| `-OptimizeNoneAttr 0x558bb19f5410 <col:30>
|-CXXMethodDecl 0x558bb19f5458 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x558bb19f5518 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x558bb19f55e0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x558bb19f56a8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x558bb19f5768 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x558bb19f5888 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x558bb1a0f0e0 <col:54, line:99:5>
|   `-ReturnStmt 0x558bb1a0f0d0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x558bb1a0f0b8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x558bb1a0f088 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x558bb1a05b68
|         `-CXXThisExpr 0x558bb1a0f078 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x558bb19f5a28 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x558bb19f5938 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x558bb1a0f190 <col:67, line:103:5>
|   `-BinaryOperator 0x558bb1a0f170 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x558bb1a0f108 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x558bb1a05b68
|     | `-CXXThisExpr 0x558bb1a0f0f8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x558bb1a0f158 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x558bb1a0f138 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x558bb19f5938 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x558bb19f5b20 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x558bb1a0f210 <col:33, line:107:5>
|   `-ReturnStmt 0x558bb1a0f200 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x558bb1a0f1e8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x558bb1a0f1b8 <col:16> 'void *' lvalue ->_destructor_argument 0x558bb1a05bd0
|         `-CXXThisExpr 0x558bb1a0f1a8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x558bb19f5be0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x558bb1a0f840 <col:25, line:113:5>
|   |-ParenExpr 0x558bb1a0f588 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x558bb1a0f558 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x558bb1a0f2c8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x558bb1a0f2a0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x558bb1a0f268 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x558bb1a0f238 <col:24> '<bound member function type>' ->shared 0x558bb19f4c58
|   |   |       `-ImplicitCastExpr 0x558bb1a0f288 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x558bb1a0f228 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x558bb1a0f328 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558bb1a0f308 <col:42> 'int' 0
|   |   `-CallExpr 0x558bb1a0f4b8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x558bb1a0f4a0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558bb1a0f480 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558bb1566bb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558bb1a0f4f8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558bb1a0f398 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x558bb1a0f510 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558bb1a0f3c0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558bb1a0f528 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558bb1a0f3f8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x558bb1a0f540 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558bb1a0f468 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558bb1a0f450 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558bb1a0f418 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x558bb1a0f788 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x558bb1a0f5b8 <col:2> 'unsigned char *' lvalue ->_head 0x558bb1a05970
|   | | `-CXXThisExpr 0x558bb1a0f5a8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x558bb1a0f770 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x558bb1a0f750 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x558bb1a0f5f8 <col:10> 'unsigned char *' lvalue ->_data 0x558bb1a059d8
|   |     | `-CXXThisExpr 0x558bb1a0f5e8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x558bb1a0f738 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x558bb1a0f718 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x558bb1a0f638 <col:18> 'unsigned char *' lvalue ->_tail 0x558bb1a05a40
|   |         | `-CXXThisExpr 0x558bb1a0f628 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x558bb1a0f700 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x558bb1a0f6e0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x558bb1a0f678 <col:26> 'unsigned char *' lvalue ->_end 0x558bb1a05aa8
|   |             | `-CXXThisExpr 0x558bb1a0f668 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x558bb1a0f6c8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x558bb1a0f6a8 <col:33> 'int' 0
|   `-BinaryOperator 0x558bb1a0f820 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x558bb1a0f7b8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x558bb1a05b68
|     | `-CXXThisExpr 0x558bb1a0f7a8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x558bb1a0f808 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x558bb1a0f7e8 <col:16> 'int' 0
|-CXXMethodDecl 0x558bb19f5d20 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x558bb19f5c90 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558bb19f5dc8 <col:20>
| |-OptimizeNoneAttr 0x558bb19f5e20 <col:30>
| `-WarnUnusedResultAttr 0x558bb19f5e48 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x558bb19f5f18 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x558bb19f5e88 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558bb19f5fc0 <col:20>
| |-OptimizeNoneAttr 0x558bb19f6018 <col:30>
| `-WarnUnusedResultAttr 0x558bb19f6040 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x558bb19f6178 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x558bb19f6080 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x558bb19f6220 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x558bb19f6320 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x558bb19f6290 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558bb19f63c8 <col:20>
| `-OptimizeNoneAttr 0x558bb19f6420 <col:30>
|-CXXMethodDecl 0x558bb19f64e8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x558bb19f6458 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x558bb19f6590 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x558bb19f6690 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x558bb19f6600 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x558bb19f6738 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x558bb19f6838 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x558bb19f67a8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558bb19f68e0 <col:20>
| `-OptimizeNoneAttr 0x558bb19f6938 <col:30>
|-CXXMethodDecl 0x558bb19f6ac8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x558bb19f6978 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x558bb19f69f0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x558bb1a0f038 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x558bb19f6b78 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x558bb19f6d78 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x558bb19f6bf0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x558bb19f6c68 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558bb19f6f88 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x558bb19f6e38 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x558bb19f6eb0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558bb19f7198 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x558bb19f7048 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x558bb19f70c8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x558bb1a0f048 <col:39> 'int' 0
|-CXXMethodDecl 0x558bb19f7268 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x558bb19f7330 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x558bb19f73f8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x558bb19f74b8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x558bb19f7580 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x558bb19f76c8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x558bb19f7638 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x558bb19f7898 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x558bb19f7788 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x558bb19f7800 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558bb19f7968 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x558bb19f7a28 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x558bb19f7ac8 <col:20>
| `-OptimizeNoneAttr 0x558bb19f7b20 <col:30>
|-CXXMethodDecl 0x558bb19f7b70 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x558bb19f7c10 <col:20>
| `-OptimizeNoneAttr 0x558bb19f7c68 <col:30>
|-CXXMethodDecl 0x558bb19f7cb8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x558bb19f7d78 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x558bb19f7e40 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x558bb19f7ee0 <col:20>
| `-OptimizeNoneAttr 0x558bb19f7f38 <col:30>
|-CXXMethodDecl 0x558bb19f8088 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x558bb19f7f78 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x558bb19f7ff0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558bb19f81d8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x558bb19f8148 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558bb19f82b0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x558bb19f8370 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x558bb19f8410 <col:20>
| `-OptimizeNoneAttr 0x558bb19f8468 <col:30>
|-CXXMethodDecl 0x558bb19f84b8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x558bb19f8558 <col:20>
| `-OptimizeNoneAttr 0x558bb19f85b0 <col:30>
|-CXXMethodDecl 0x558bb19f8600 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x558bb19f86c8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x558bb19f8768 <col:20>
| `-OptimizeNoneAttr 0x558bb19f87c0 <col:30>
|-CXXMethodDecl 0x558bb19f8808 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x558bb19f8928 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x558bb19f8a98 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x558bb19f89d8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x558bb19f8b88 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x558bb19f8c28 <col:20>
| `-OptimizeNoneAttr 0x558bb19f8c80 <col:30>
|-CXXMethodDecl 0x558bb19f8cd0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x558bb19f8d90 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x558bb19f8fc8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x558bb19f8e40 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x558bb19f8eb8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558bb19f9078 <col:20>
| `-OptimizeNoneAttr 0x558bb19f90d0 <col:30>
|-CXXMethodDecl 0x558bb19f9178 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x558bb19f9218 <col:20>
| `-OptimizeNoneAttr 0x558bb19f9270 <col:30>
|-CXXMethodDecl 0x558bb19f92c0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x558bb19f9360 <col:20>
| `-OptimizeNoneAttr 0x558bb19f93b8 <col:30>
|-CXXMethodDecl 0x558bb19f9400 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x558bb19f94a0 <col:20>
| `-OptimizeNoneAttr 0x558bb19f94f8 <col:30>
|-CXXMethodDecl 0x558bb19f95f8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x558bb19f9530 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x558bb19f96a0 <col:20>
| `-OptimizeNoneAttr 0x558bb19f96f8 <col:30>
|-CXXMethodDecl 0x558bb19f98b8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x558bb19f9730 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x558bb19f97a8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558bb19f9968 <col:20>
| `-OptimizeNoneAttr 0x558bb19f99c0 <col:30>
|-CXXMethodDecl 0x558bb19f9a68 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x558bb19f9b88 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x558bb19f9ca8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x558bb19f9d48 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x558bb19f9d70 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x558bb19f9e98 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x558bb19f9f38 <col:20>
| `-OptimizeNoneAttr 0x558bb19f9f90 <col:30>
|-CXXMethodDecl 0x558bb19fa038 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x558bb19fa0d8 <col:20>
| `-OptimizeNoneAttr 0x558bb19fa130 <col:30>
|-AccessSpecDecl 0x558bb19fa158 <line:344:3, col:9> col:3 public
|-EnumDecl 0x558bb19fa180 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x558bb19fa280 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x558bb19fa2d0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558bb19fa260 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x558bb19fa240 <col:14> 'int' 48
|-CXXMethodDecl 0x558bb19fa338 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x558bb19fa3d8 <col:20>
| `-OptimizeNoneAttr 0x558bb19fa430 <col:30>
|-CXXMethodDecl 0x558bb19fa4a8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x558bb19fa548 <col:20>
| `-OptimizeNoneAttr 0x558bb19fa5a0 <col:30>
|-CXXMethodDecl 0x558bb19fa668 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x558bb19fa5d8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x558bb19fa808 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x558bb19fa9a8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x558bb19fa8b8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x558bb19faa50 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x558bb19fab50 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x558bb19faf00 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb19fab30 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x558bb19fab10 <col:9> 'int' 0
| |-EnumConstantDecl 0x558bb19fabe0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x558bb19faf18 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb19fabc0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x558bb19faba0 <col:14> 'int' 1
| |-EnumConstantDecl 0x558bb19fac70 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x558bb19faf30 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb19fac50 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x558bb19fac30 <col:14> 'int' 2
| |-EnumConstantDecl 0x558bb19fad00 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x558bb19faf48 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb19face0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x558bb19facc0 <col:14> 'int' 3
| |-EnumConstantDecl 0x558bb19fad90 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x558bb19faf60 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb19fad70 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x558bb19fad50 <col:13> 'int' 4
| |-EnumConstantDecl 0x558bb19fae20 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x558bb19faf78 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb19fae00 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x558bb19fade0 <col:13> 'int' 5
| `-EnumConstantDecl 0x558bb19faeb0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x558bb19faf90 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558bb19fae90 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x558bb19fae70 <col:14> 'int' 6
|-CXXMethodDecl 0x558bb19faff8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x558bb19fb098 <col:20>
| `-OptimizeNoneAttr 0x558bb19fb0f0 <col:30>
|-CXXMethodDecl 0x558bb19fb1e8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x558bb19fb128 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x558bb19fb290 <col:20>
| `-OptimizeNoneAttr 0x558bb19fb2e8 <col:30>
|-CXXMethodDecl 0x558bb19fb358 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x558bb19fb480 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x558bb19fb5f8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x558bb19fb530 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x558bb19fb6c0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x558bb19fb788 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x558bb19fb8c8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x558bb19fb838 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x558bb19fb970 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x558bb19fba70 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x558bb19fbc70 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb19fba50 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x558bb19fba30 <col:23> 'int' 0
| |-EnumConstantDecl 0x558bb19fbb00 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x558bb19fbc88 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb19fbae0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x558bb19fbac0 <col:45> 'int' 4
| |-EnumConstantDecl 0x558bb19fbb90 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x558bb19fbca0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb19fbb70 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x558bb19fbb50 <col:24> 'int' 0
| `-EnumConstantDecl 0x558bb19fbc20 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x558bb19fbcb8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558bb19fbc00 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x558bb19fbbe0 <col:47> 'int' 16
|-CXXMethodDecl 0x558bb19fbd18 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x558bb19fbe88 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x558bb19fbdc8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x558bb19fbf30 <col:20>
| `-OptimizeNoneAttr 0x558bb19fbf88 <col:30>
|-CXXMethodDecl 0x558bb19fbfd8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x558bb1a0f960 <col:18, col:36>
|   `-ReturnStmt 0x558bb1a0f950 <col:20, col:33>
|     `-ImplicitCastExpr 0x558bb1a0f938 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x558bb1a0f918 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x558bb1a0f8e8 <col:27> '<bound member function type>' ->xanno 0x558bb19fa038
|           `-CXXThisExpr 0x558bb1a0f8d8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x558bb19fc0d0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x558bb1a0fa70 <col:30, col:48>
|   `-ReturnStmt 0x558bb1a0fa60 <col:32, col:45>
|     `-ImplicitCastExpr 0x558bb1a0fa48 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x558bb1a0fa28 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x558bb1a0f9f8 <col:39> '<bound member function type>' ->xanno 0x558bb19f9e98
|           `-CXXThisExpr 0x558bb1a0f9e8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x558bb19fc1b8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x558bb1a0fc08 <col:24, col:50>
|   `-ReturnStmt 0x558bb1a0fbf8 <col:26, col:47>
|     `-UnaryOperator 0x558bb1a0fbe0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x558bb1a0fbc0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x558bb1a0fba8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x558bb1a0fb58 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x558bb1a04e78
|         |   `-CXXMemberCallExpr 0x558bb1a0fb38 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x558bb1a0fb08 <col:34> '<bound member function type>' ->xanno 0x558bb19fa038
|         |       `-CXXThisExpr 0x558bb1a0faf8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x558bb1a0fb88 <col:46> 'int' 0
|-CXXMethodDecl 0x558bb19fc2c0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x558bb1a0fdd8 <col:36, col:62>
|   `-ReturnStmt 0x558bb1a0fdc8 <col:38, col:59>
|     `-UnaryOperator 0x558bb1a0fdb0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x558bb1a0fd90 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x558bb1a0fd78 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x558bb1a0fcf0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x558bb1a04e78
|         |   `-CXXMemberCallExpr 0x558bb1a0fcd0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x558bb1a0fca0 <col:46> '<bound member function type>' ->xanno 0x558bb19f9e98
|         |       `-CXXThisExpr 0x558bb1a0fc90 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x558bb1a0fd20 <col:58> 'int' 0
|-CXXMethodDecl 0x558bb19fc3d8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x558bb1a0ff70 <col:26, col:53>
|   `-ReturnStmt 0x558bb1a0ff60 <col:28, col:50>
|     `-UnaryOperator 0x558bb1a0ff48 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x558bb1a0ff28 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x558bb1a0ff10 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x558bb1a0fec0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x558bb1a05178
|         |   `-CXXMemberCallExpr 0x558bb1a0fea0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x558bb1a0fe70 <col:36> '<bound member function type>' ->xanno 0x558bb19fa038
|         |       `-CXXThisExpr 0x558bb1a0fe60 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x558bb1a0fef0 <col:49> 'int' 0
|-CXXMethodDecl 0x558bb19fc4f8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x558bb1a10148 <col:38, col:65>
|   `-ReturnStmt 0x558bb1a10138 <col:40, col:62>
|     `-UnaryOperator 0x558bb1a10120 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x558bb1a10100 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x558bb1a100e8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x558bb1a10058 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x558bb1a05178
|         |   `-CXXMemberCallExpr 0x558bb1a10038 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x558bb1a10008 <col:48> '<bound member function type>' ->xanno 0x558bb19f9e98
|         |       `-CXXThisExpr 0x558bb1a0fff8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x558bb1a10088 <col:61> 'int' 0
|-CXXMethodDecl 0x558bb19fc6a8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x558bb19fc5b0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x558bb1a10818 <col:34, line:463:5>
|   |-ParenExpr 0x558bb1a10660 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x558bb1a10630 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x558bb1a10298 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558bb1a10268 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558bb1a101b8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558bb1a101a0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558bb1a10160 <col:23> 'int' lvalue ParmVar 0x558bb19fc5b0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558bb1a10180 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558bb1a10248 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558bb1a10218 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558bb1a101d8 <col:33> 'int' lvalue ParmVar 0x558bb19fc5b0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x558bb1a10230 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x558bb1a101f8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558bb19fa280 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x558bb1a102f8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558bb1a102d8 <col:56> 'int' 0
|   |   `-CallExpr 0x558bb1a10590 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x558bb1a10578 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558bb1a10558 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558bb1566bb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558bb1a105d0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558bb1a103e8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x558bb1a105e8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558bb1a10418 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558bb1a10600 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558bb1a10450 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x558bb1a10618 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558bb1a10540 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558bb1a10528 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558bb1a104e8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x558bb1a10808 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x558bb1a107f0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x558bb1a107d0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x558bb1a107a0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x558bb1a10750 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x558bb1a04e78
|         |   `-CXXMemberCallExpr 0x558bb1a10730 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x558bb1a10700 <col:9> '<bound member function type>' ->xanno 0x558bb19f9e98
|         |       `-CXXThisExpr 0x558bb1a106f0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x558bb1a107b8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x558bb1a10780 <col:21> 'int' lvalue ParmVar 0x558bb19fc5b0 'i' 'int'
|-CXXMethodDecl 0x558bb19fc8f8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x558bb19fc768 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x558bb19fc7e0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x558bb1a10ea8 <col:40, line:472:5>
|   |-ParenExpr 0x558bb1a10cc0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x558bb1a10c90 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x558bb1a10970 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558bb1a10940 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558bb1a10890 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558bb1a10878 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558bb1a10838 <col:23> 'int' lvalue ParmVar 0x558bb19fc768 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558bb1a10858 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558bb1a10920 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558bb1a108f0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558bb1a108b0 <col:33> 'int' lvalue ParmVar 0x558bb19fc768 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x558bb1a10908 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x558bb1a108d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558bb19fa280 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x558bb1a109d0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558bb1a109b0 <col:56> 'int' 0
|   |   `-CallExpr 0x558bb1a10bf0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x558bb1a10bd8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558bb1a10bb8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558bb1566bb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558bb1a10c30 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558bb1a10a40 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x558bb1a10c48 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558bb1a10a70 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558bb1a10c60 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558bb1a10aa8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x558bb1a10c78 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558bb1a10ba0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558bb1a10b88 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558bb1a10b48 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x558bb1a10e88 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x558bb1a10e30 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x558bb1a10e00 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x558bb1a10db0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x558bb1a04e78
|     | |   `-CXXMemberCallExpr 0x558bb1a10d90 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x558bb1a10d60 <col:2> '<bound member function type>' ->xanno 0x558bb19fa038
|     | |       `-CXXThisExpr 0x558bb1a10d50 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x558bb1a10e18 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x558bb1a10de0 <col:14> 'int' lvalue ParmVar 0x558bb19fc768 'i' 'int'
|     `-ImplicitCastExpr 0x558bb1a10e70 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x558bb1a10e50 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x558bb19fc7e0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x558bb19fcab8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x558bb19fc9c0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x558bb1a11628 <col:36, line:485:5>
|   |-ParenExpr 0x558bb1a11390 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x558bb1a11360 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558bb1a11040 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558bb1a11010 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558bb1a10f20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558bb1a10f08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558bb1a10ec8 <col:23> 'int' lvalue ParmVar 0x558bb19fc9c0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558bb1a10ee8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558bb1a10ff0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558bb1a10fd8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558bb1a10f40 <col:33> 'int' lvalue ParmVar 0x558bb19fc9c0 'i' 'int'
|   |   |     `-BinaryOperator 0x558bb1a10fb8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558bb1a10fa0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558bb1a10f60 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558bb19fa280 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558bb1a10f80 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x558bb1a110a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558bb1a11080 <col:60> 'int' 0
|   |   `-CallExpr 0x558bb1a112c0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558bb1a112a8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558bb1a11288 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558bb1566bb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558bb1a11300 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558bb1a11110 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x558bb1a11318 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558bb1a11148 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558bb1a11330 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558bb1a11180 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x558bb1a11348 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558bb1a11270 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558bb1a11258 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558bb1a11218 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x558bb1a11618 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x558bb1a11600 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x558bb1a115e8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x558bb1a115b8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x558bb1a11558 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x558bb1a11528 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x558bb1a114a0 <col:61, col:70> 'char const[48]' lvalue ->c 0x558bb1a04d50
|             |   `-CXXMemberCallExpr 0x558bb1a11480 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x558bb1a11450 <col:61> '<bound member function type>' ->xanno 0x558bb19f9e98
|             |       `-CXXThisExpr 0x558bb1a11440 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x558bb1a11540 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x558bb1a114d0 <col:74> 'int' lvalue ParmVar 0x558bb19fc9c0 'i' 'int'
|-CXXMethodDecl 0x558bb19fcd08 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x558bb19fcb78 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x558bb19fcbf0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x558bb1a11d78 <col:42, line:500:5>
|   |-ParenExpr 0x558bb1a11b10 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x558bb1a11ae0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558bb1a117c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558bb1a11790 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558bb1a116a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558bb1a11688 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558bb1a11648 <col:23> 'int' lvalue ParmVar 0x558bb19fcb78 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558bb1a11668 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558bb1a11770 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558bb1a11758 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558bb1a116c0 <col:33> 'int' lvalue ParmVar 0x558bb19fcb78 'i' 'int'
|   |   |     `-BinaryOperator 0x558bb1a11738 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558bb1a11720 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558bb1a116e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558bb19fa280 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558bb1a11700 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x558bb1a11820 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558bb1a11800 <col:60> 'int' 0
|   |   `-CallExpr 0x558bb1a11a40 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558bb1a11a28 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558bb1a11a08 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558bb1566bb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558bb1a11a80 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558bb1a11890 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x558bb1a11a98 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558bb1a118c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558bb1a11ab0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558bb1a11900 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x558bb1a11ac8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558bb1a119f0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558bb1a119d8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558bb1a11998 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x558bb1a11d58 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x558bb1a11d08 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x558bb1a11cd8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x558bb1a11c80 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x558bb1a11c50 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x558bb1a11c00 <col:48, col:57> 'char [48]' lvalue ->c 0x558bb1a04d50
|     |     |   `-CXXMemberCallExpr 0x558bb1a11be0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x558bb1a11bb0 <col:48> '<bound member function type>' ->xanno 0x558bb19fa038
|     |     |       `-CXXThisExpr 0x558bb1a11ba0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x558bb1a11c68 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x558bb1a11c30 <col:61> 'int' lvalue ParmVar 0x558bb19fcb78 'i' 'int'
|     `-ImplicitCastExpr 0x558bb1a11d40 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x558bb1a11d20 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x558bb19fcbf0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x558bb19fcec8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x558bb19fcdd0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x558bb1a124d8 <col:35, line:513:5>
|   |-ParenExpr 0x558bb1a121e8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x558bb1a121b8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558bb1a11f10 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558bb1a11ee0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558bb1a11df0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558bb1a11dd8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558bb1a11d98 <col:23> 'int' lvalue ParmVar 0x558bb19fcdd0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558bb1a11db8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558bb1a11ec0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558bb1a11ea8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558bb1a11e10 <col:33> 'int' lvalue ParmVar 0x558bb19fcdd0 'i' 'int'
|   |   |     `-BinaryOperator 0x558bb1a11e88 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558bb1a11e70 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558bb1a11e30 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558bb19fa280 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558bb1a11e50 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x558bb1a11f70 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558bb1a11f50 <col:60> 'int' 0
|   |   `-CallExpr 0x558bb1a12118 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558bb1a12100 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558bb1a120e0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558bb1566bb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558bb1a12158 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558bb1a11fe0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x558bb1a12170 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558bb1a12018 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558bb1a12188 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558bb1a12050 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x558bb1a121a0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558bb1a120c8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558bb1a120b0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558bb1a12070 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x558bb1a124c8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x558bb1a124b0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x558bb1a12498 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x558bb1a12468 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x558bb1a123e0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x558bb1a123b0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x558bb1a12360 <col:60, col:69> 'char const[48]' lvalue ->c 0x558bb1a04d50
|             |   `-CXXMemberCallExpr 0x558bb1a12340 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x558bb1a12310 <col:60> '<bound member function type>' ->xanno 0x558bb19f9e98
|             |       `-CXXThisExpr 0x558bb1a12300 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x558bb1a123c8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x558bb1a12390 <col:73> 'int' lvalue ParmVar 0x558bb19fcdd0 'i' 'int'
|-CXXMethodDecl 0x558bb19fd118 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x558bb19fcf88 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x558bb19fd000 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x558bb1a12bf8 <col:41, line:528:5>
|   |-ParenExpr 0x558bb1a12980 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x558bb1a12950 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558bb1a12670 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558bb1a12640 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558bb1a12550 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558bb1a12538 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558bb1a124f8 <col:23> 'int' lvalue ParmVar 0x558bb19fcf88 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558bb1a12518 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558bb1a12620 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558bb1a12608 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558bb1a12570 <col:33> 'int' lvalue ParmVar 0x558bb19fcf88 'i' 'int'
|   |   |     `-BinaryOperator 0x558bb1a125e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558bb1a125d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558bb1a12590 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558bb19fa280 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558bb1a125b0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x558bb1a126d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558bb1a126b0 <col:60> 'int' 0
|   |   `-CallExpr 0x558bb1a128b0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558bb1a12898 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558bb1a12878 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558bb1566bb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558bb1a128f0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558bb1a12740 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x558bb1a12908 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558bb1a12778 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558bb1a12920 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558bb1a127b0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x558bb1a12938 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558bb1a12860 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558bb1a12848 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558bb1a12808 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x558bb1a12bd8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x558bb1a12b88 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x558bb1a12b58 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x558bb1a12b00 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x558bb1a12ac0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x558bb1a12a70 <col:47, col:56> 'char [48]' lvalue ->c 0x558bb1a04d50
|     |     |   `-CXXMemberCallExpr 0x558bb1a12a50 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x558bb1a12a20 <col:47> '<bound member function type>' ->xanno 0x558bb19fa038
|     |     |       `-CXXThisExpr 0x558bb1a12a10 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x558bb1a12ad8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x558bb1a12aa0 <col:60> 'int' lvalue ParmVar 0x558bb19fcf88 'i' 'int'
|     `-ImplicitCastExpr 0x558bb1a12bc0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x558bb1a12ba0 <col:65> 'int16_t':'short' lvalue ParmVar 0x558bb19fd000 'x' 'int16_t':'short'
|-CXXMethodDecl 0x558bb19fd2d8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x558bb19fd1e0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x558bb1a132c8 <col:36, line:541:5>
|   |-ParenExpr 0x558bb1a13068 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x558bb1a13038 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558bb1a12d90 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558bb1a12d60 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558bb1a12c70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558bb1a12c58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558bb1a12c18 <col:23> 'int' lvalue ParmVar 0x558bb19fd1e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558bb1a12c38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558bb1a12d40 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558bb1a12d28 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558bb1a12c90 <col:33> 'int' lvalue ParmVar 0x558bb19fd1e0 'i' 'int'
|   |   |     `-BinaryOperator 0x558bb1a12d08 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558bb1a12cf0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558bb1a12cb0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558bb19fa280 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558bb1a12cd0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x558bb1a12df0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558bb1a12dd0 <col:60> 'int' 0
|   |   `-CallExpr 0x558bb1a12f98 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558bb1a12f80 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558bb1a12f60 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558bb1566bb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558bb1a12fd8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558bb1a12e60 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x558bb1a12ff0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558bb1a12e98 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558bb1a13008 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558bb1a12ed0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x558bb1a13020 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558bb1a12f48 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558bb1a12f30 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558bb1a12ef0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x558bb1a132b8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x558bb1a132a0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x558bb1a13288 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x558bb1a13258 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x558bb1a13200 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x558bb1a131d0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x558bb1a13180 <col:61, col:70> 'char const[48]' lvalue ->c 0x558bb1a04d50
|             |   `-CXXMemberCallExpr 0x558bb1a13160 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x558bb1a13130 <col:61> '<bound member function type>' ->xanno 0x558bb19f9e98
|             |       `-CXXThisExpr 0x558bb1a13120 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x558bb1a131e8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x558bb1a131b0 <col:74> 'int' lvalue ParmVar 0x558bb19fd1e0 'i' 'int'
|-CXXMethodDecl 0x558bb19fd4a8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x558bb19fd398 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x558bb19fd410 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x558bb19fd558 <col:20>
| `-OptimizeNoneAttr 0x558bb19fd5b0 <col:30>
|-CXXMethodDecl 0x558bb19fd6e8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x558bb19fd5f0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x558bb1a13998 <col:35, line:562:5>
|   |-ParenExpr 0x558bb1a13738 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x558bb1a13708 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558bb1a13460 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558bb1a13430 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558bb1a13340 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558bb1a13328 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558bb1a132e8 <col:23> 'int' lvalue ParmVar 0x558bb19fd5f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558bb1a13308 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558bb1a13410 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558bb1a133f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558bb1a13360 <col:33> 'int' lvalue ParmVar 0x558bb19fd5f0 'i' 'int'
|   |   |     `-BinaryOperator 0x558bb1a133d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558bb1a133c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558bb1a13380 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558bb19fa280 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558bb1a133a0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x558bb1a134c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558bb1a134a0 <col:60> 'int' 0
|   |   `-CallExpr 0x558bb1a13668 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558bb1a13650 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558bb1a13630 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558bb1566bb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558bb1a136a8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558bb1a13530 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x558bb1a136c0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558bb1a13568 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558bb1a136d8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558bb1a135a0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x558bb1a136f0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558bb1a13618 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558bb1a13600 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558bb1a135c0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x558bb1a13988 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x558bb1a13970 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x558bb1a13958 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x558bb1a13928 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x558bb1a138d0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x558bb1a138a0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x558bb1a13850 <col:60, col:69> 'char const[48]' lvalue ->c 0x558bb1a04d50
|             |   `-CXXMemberCallExpr 0x558bb1a13830 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x558bb1a13800 <col:60> '<bound member function type>' ->xanno 0x558bb19f9e98
|             |       `-CXXThisExpr 0x558bb1a137f0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x558bb1a138b8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x558bb1a13880 <col:73> 'int' lvalue ParmVar 0x558bb19fd5f0 'i' 'int'
|-CXXMethodDecl 0x558bb19fd8f8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x558bb19fd7a8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x558bb19fd820 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x558bb1a14078 <col:41, line:577:5>
|   |-ParenExpr 0x558bb1a13e08 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x558bb1a13dd8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558bb1a13b30 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558bb1a13b00 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558bb1a13a10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558bb1a139f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558bb1a139b8 <col:23> 'int' lvalue ParmVar 0x558bb19fd7a8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558bb1a139d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558bb1a13ae0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558bb1a13ac8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558bb1a13a30 <col:33> 'int' lvalue ParmVar 0x558bb19fd7a8 'i' 'int'
|   |   |     `-BinaryOperator 0x558bb1a13aa8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558bb1a13a90 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558bb1a13a50 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558bb19fa280 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558bb1a13a70 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x558bb1a13b90 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558bb1a13b70 <col:60> 'int' 0
|   |   `-CallExpr 0x558bb1a13d38 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558bb1a13d20 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558bb1a13d00 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558bb1566bb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558bb1a13d78 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558bb1a13c00 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x558bb1a13d90 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558bb1a13c38 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558bb1a13da8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558bb1a13c70 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x558bb1a13dc0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558bb1a13ce8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558bb1a13cd0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558bb1a13c90 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x558bb1a14058 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x558bb1a14008 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x558bb1a13fd8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x558bb1a13f78 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x558bb1a13f48 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x558bb1a13ef8 <col:47, col:56> 'char [48]' lvalue ->c 0x558bb1a04d50
|     |     |   `-CXXMemberCallExpr 0x558bb1a13ed8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x558bb1a13ea8 <col:47> '<bound member function type>' ->xanno 0x558bb19fa038
|     |     |       `-CXXThisExpr 0x558bb1a13e98 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x558bb1a13f60 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x558bb1a13f28 <col:60> 'int' lvalue ParmVar 0x558bb19fd7a8 'i' 'int'
|     `-ImplicitCastExpr 0x558bb1a14040 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x558bb1a14020 <col:65> 'int32_t':'int' lvalue ParmVar 0x558bb19fd820 'x' 'int32_t':'int'
|-CXXMethodDecl 0x558bb19fdab8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x558bb19fd9c0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x558bb1a147a8 <col:36, line:591:5>
|   |-ParenExpr 0x558bb1a144e8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x558bb1a144b8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558bb1a14210 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558bb1a141e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558bb1a140f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558bb1a140d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558bb1a14098 <col:23> 'int' lvalue ParmVar 0x558bb19fd9c0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558bb1a140b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558bb1a141c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558bb1a141a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558bb1a14110 <col:33> 'int' lvalue ParmVar 0x558bb19fd9c0 'i' 'int'
|   |   |     `-BinaryOperator 0x558bb1a14188 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558bb1a14170 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558bb1a14130 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558bb19fa280 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558bb1a14150 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x558bb1a14270 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558bb1a14250 <col:60> 'int' 0
|   |   `-CallExpr 0x558bb1a14418 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558bb1a14400 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558bb1a143e0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558bb1566bb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558bb1a14458 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558bb1a142e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x558bb1a14470 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558bb1a14318 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558bb1a14488 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558bb1a14350 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x558bb1a144a0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558bb1a143c8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558bb1a143b0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558bb1a14370 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x558bb1a14798 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x558bb1a14780 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x558bb1a14768 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x558bb1a14738 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x558bb1a146b0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x558bb1a14680 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x558bb1a14630 <col:61, col:70> 'char const[48]' lvalue ->c 0x558bb1a04d50
|             |   `-CXXMemberCallExpr 0x558bb1a14610 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x558bb1a145e0 <col:61> '<bound member function type>' ->xanno 0x558bb19f9e98
|             |       `-CXXThisExpr 0x558bb1a145d0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x558bb1a14698 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x558bb1a14660 <col:74> 'int' lvalue ParmVar 0x558bb19fd9c0 'i' 'int'
|-CXXMethodDecl 0x558bb19fdd08 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x558bb19fdb78 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x558bb19fdbf0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x558bb1a14e88 <col:42, line:606:5>
|   |-ParenExpr 0x558bb1a14c18 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x558bb1a14be8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x558bb1a14940 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558bb1a14910 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558bb1a14820 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558bb1a14808 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558bb1a147c8 <col:23> 'int' lvalue ParmVar 0x558bb19fdb78 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558bb1a147e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558bb1a148f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x558bb1a148d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558bb1a14840 <col:33> 'int' lvalue ParmVar 0x558bb19fdb78 'i' 'int'
|   |   |     `-BinaryOperator 0x558bb1a148b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558bb1a148a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558bb1a14860 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558bb19fa280 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x558bb1a14880 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x558bb1a149a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558bb1a14980 <col:60> 'int' 0
|   |   `-CallExpr 0x558bb1a14b48 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x558bb1a14b30 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558bb1a14b10 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558bb1566bb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558bb1a14b88 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558bb1a14a10 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x558bb1a14ba0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558bb1a14a48 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558bb1a14bb8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558bb1a14a80 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x558bb1a14bd0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558bb1a14af8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558bb1a14ae0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558bb1a14aa0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x558bb1a14e68 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x558bb1a14e18 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x558bb1a14de8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x558bb1a14d88 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x558bb1a14d58 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x558bb1a14d08 <col:48, col:57> 'char [48]' lvalue ->c 0x558bb1a04d50
|     |     |   `-CXXMemberCallExpr 0x558bb1a14ce8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x558bb1a14cb8 <col:48> '<bound member function type>' ->xanno 0x558bb19fa038
|     |     |       `-CXXThisExpr 0x558bb1a14ca8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x558bb1a14d70 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x558bb1a14d38 <col:61> 'int' lvalue ParmVar 0x558bb19fdb78 'i' 'int'
|     `-ImplicitCastExpr 0x558bb1a14e50 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x558bb1a14e30 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x558bb19fdbf0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x558bb19fdea0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x558bb19fddd0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x558bb1a156f8 <col:33, line:620:5>
|   |-ParenExpr 0x558bb1a15470 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x558bb1a15440 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x558bb1a15090 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558bb1a15060 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558bb1a14f00 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558bb1a14ee8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558bb1a14ea8 <col:23> 'int' lvalue ParmVar 0x558bb19fddd0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558bb1a14ec8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558bb1a15040 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x558bb1a15028 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558bb1a14f20 <col:33> 'int' lvalue ParmVar 0x558bb19fddd0 'i' 'int'
|   |   |     `-BinaryOperator 0x558bb1a15008 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558bb1a14ff0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558bb1a14f40 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558bb19fa280 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x558bb1a14fc8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x558bb1a14fb0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x558bb1a14f78 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x558bb1a150f0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558bb1a150d0 <col:79> 'int' 0
|   |   `-CallExpr 0x558bb1a153a0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x558bb1a15388 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558bb1a15368 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558bb1566bb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558bb1a153e0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558bb1a151d8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x558bb1a153f8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558bb1a15220 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558bb1a15410 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558bb1a15258 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x558bb1a15428 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558bb1a15350 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558bb1a15338 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558bb1a152f8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x558bb1a156e8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x558bb1a156d0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x558bb1a156b8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x558bb1a15688 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x558bb1a15600 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x558bb1a155d0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x558bb1a15580 <col:67, col:76> 'char const[48]' lvalue ->c 0x558bb1a04d50
|             |   `-CXXMemberCallExpr 0x558bb1a15560 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x558bb1a15530 <col:67> '<bound member function type>' ->xanno 0x558bb19f9e98
|             |       `-CXXThisExpr 0x558bb1a15520 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x558bb1a155e8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x558bb1a155b0 <col:80> 'int' lvalue ParmVar 0x558bb19fddd0 'i' 'int'
|-CXXMethodDecl 0x558bb19fe0b8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x558bb19fdf60 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x558bb19fdfe0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x558bb1a15f20 <col:45, line:635:5>
|   |-ParenExpr 0x558bb1a15c68 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x558bb1a15c38 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x558bb1a15900 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x558bb1a158d0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x558bb1a15770 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x558bb1a15758 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x558bb1a15718 <col:23> 'int' lvalue ParmVar 0x558bb19fdf60 'i' 'int'
|   |   |   | `-IntegerLiteral 0x558bb1a15738 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x558bb1a158b0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x558bb1a15898 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x558bb1a15790 <col:33> 'int' lvalue ParmVar 0x558bb19fdf60 'i' 'int'
|   |   |     `-BinaryOperator 0x558bb1a15878 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x558bb1a15860 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x558bb1a157b0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x558bb19fa280 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x558bb1a15838 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x558bb1a15820 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x558bb1a157e8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x558bb1a15960 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x558bb1a15940 <col:79> 'int' 0
|   |   `-CallExpr 0x558bb1a15b98 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x558bb1a15b80 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x558bb1a15b60 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x558bb1566bb0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x558bb1a15bd8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558bb1a159d0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x558bb1a15bf0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x558bb1a15a18 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x558bb1a15c08 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x558bb1a15a50 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x558bb1a15c20 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x558bb1a15b48 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x558bb1a15b30 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x558bb1a15ae8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x558bb1a15f00 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x558bb1a15e68 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x558bb1a15e38 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x558bb1a15dd8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x558bb1a15da8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x558bb1a15d58 <col:54, col:63> 'char [48]' lvalue ->c 0x558bb1a04d50
|     |     |   `-CXXMemberCallExpr 0x558bb1a15d38 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x558bb1a15d08 <col:54> '<bound member function type>' ->xanno 0x558bb19fa038
|     |     |       `-CXXThisExpr 0x558bb1a15cf8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x558bb1a15dc0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x558bb1a15d88 <col:67> 'int' lvalue ParmVar 0x558bb19fdf60 'i' 'int'
|     `-CXXConstCastExpr 0x558bb1a15ed0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x558bb1a15eb8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x558bb1a15e80 <col:91> 'const void *' lvalue ParmVar 0x558bb19fdfe0 'x' 'const void *'
|-CXXMethodDecl 0x558bb19fe188 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x558bb1a15fa8 <col:34, line:640:5>
|   `-ReturnStmt 0x558bb1a15f98 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x558bb1a15f80 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x558bb1a15f50 <col:16> 'Packet *' lvalue ->_data_packet 0x558bb1a05908
|         `-CXXThisExpr 0x558bb1a15f40 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x558bb19fe2c8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x558bb19fe238 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x558bb1a0f068 <col:46> 'bool' true
|-CXXMethodDecl 0x558bb19fe448 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x558bb19fe380 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x558bb19fe4f0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x558bb19feca0 <line:660:22> "" ""
| |-EnumConstantDecl 0x558bb19fe5f0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558bb19fed10 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb19fe5d0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x558bb19fe5b0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x558bb19f3750 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x558bb19fe680 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558bb19fed28 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb19fe660 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x558bb19fe640 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x558bb19f37e0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x558bb19fe710 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558bb19fed40 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb19fe6f0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x558bb19fe6d0 <col:21> 'int' 0
| |-EnumConstantDecl 0x558bb19fe7a0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558bb19fed58 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb19fe780 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x558bb19fe760 <col:19> 'int' 16
| |-EnumConstantDecl 0x558bb19fe830 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558bb19fed70 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb19fe810 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x558bb19fe7f0 <col:21> 'int' 16
| |-EnumConstantDecl 0x558bb19fe8c0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558bb19fed88 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb19fe8a0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x558bb19fe880 <col:19> 'int' 32
| |-EnumConstantDecl 0x558bb19fe950 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558bb19feda0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb19fe930 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x558bb19fe910 <col:19> 'int' EnumConstant 0x558bb19fe7a0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x558bb19fe9e0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558bb19fedb8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb19fe9c0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x558bb19fe9a0 <col:19> 'int' EnumConstant 0x558bb19fe8c0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x558bb19feab0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558bb19fedd0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb19fea90 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x558bb19fea70 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x558bb19fea30 <col:23> 'int' EnumConstant 0x558bb19fe9e0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x558bb19fea50 <col:40> 'int' 2
| |-EnumConstantDecl 0x558bb19feb80 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x558bb19fede8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb19feb60 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x558bb19feb40 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x558bb19feb00 <col:23> 'int' EnumConstant 0x558bb19fe9e0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x558bb19feb20 <col:40> 'int' 4
| `-EnumConstantDecl 0x558bb19fec50 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x558bb19fee00 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558bb19fec30 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x558bb19fec10 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x558bb19febd0 <col:23> 'int' EnumConstant 0x558bb19fe9e0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x558bb19febf0 <col:40> 'int' 8
|-CXXMethodDecl 0x558bb19fee40 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x558bb19feee0 <col:68> "" ""
|-CXXMethodDecl 0x558bb19fef78 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x558bb19ff018 <col:45> "" ""
|-CXXMethodDecl 0x558bb19ff0b0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x558bb19ff150 <col:57> "" ""
|-CXXMethodDecl 0x558bb19ff1e8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x558bb19ff288 <col:45> "" ""
|-CXXMethodDecl 0x558bb19ff320 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x558bb19ff3c0 <col:57> "" ""
|-CXXMethodDecl 0x558bb19ff450 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x558bb19ff4f0 <col:51> "" ""
|-CXXMethodDecl 0x558bb19ff580 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x558bb19ff620 <col:63> "" ""
|-CXXMethodDecl 0x558bb19ff6b0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x558bb19ff750 <col:53> "" ""
|-CXXMethodDecl 0x558bb19ff7e0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x558bb19ff880 <col:65> "" ""
|-CXXMethodDecl 0x558bb19ff998 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x558bb19ff908 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x558bb19ffa40 <col:61> "" ""
|-CXXMethodDecl 0x558bb19ffbd8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x558bb19ffac8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x558bb19ffb40 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x558bb19ffc88 <col:67> "" ""
|-CXXMethodDecl 0x558bb19ffda0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x558bb19ffd10 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x558bb19ffe48 <col:63> "" ""
|-CXXMethodDecl 0x558bb19fffe0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x558bb19ffed0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x558bb19fff48 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x558bb1a00090 <col:69> "" ""
|-CXXMethodDecl 0x558bb1a001a8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x558bb1a00118 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x558bb1a00250 <col:63> "" ""
|-CXXMethodDecl 0x558bb1a02928 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x558bb1a02818 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x558bb1a02890 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x558bb1a029d8 <col:69> "" ""
|-CXXMethodDecl 0x558bb1a02af0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x558bb1a02a60 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x558bb1a02b98 <col:62> "" ""
|-CXXMethodDecl 0x558bb1a02d30 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x558bb1a02c20 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x558bb1a02c98 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x558bb1a02de0 <col:68> "" ""
|-CXXMethodDecl 0x558bb1a02ef8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x558bb1a02e68 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x558bb1a02fa0 <col:63> "" ""
|-CXXMethodDecl 0x558bb1a03138 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x558bb1a03028 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x558bb1a030a0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x558bb1a031e8 <col:69> "" ""
|-CXXMethodDecl 0x558bb1a03278 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x558bb1a03318 <col:64> "" ""
|-CXXMethodDecl 0x558bb1a033a8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x558bb1a03448 <col:52> "" ""
|-CXXMethodDecl 0x558bb1a034d8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x558bb1a03578 <col:67> "" ""
|-CXXMethodDecl 0x558bb1a03608 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x558bb1a036a8 <col:55> "" ""
|-CXXMethodDecl 0x558bb1a037c0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x558bb1a03730 <col:32> col:35 'int'
| `-DeprecatedAttr 0x558bb1a03868 <col:58> "" ""
|-CXXMethodDecl 0x558bb1a03a00 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x558bb1a038f0 <col:33> col:36 'int'
| |-ParmVarDecl 0x558bb1a03968 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x558bb1a03ab0 <col:62> "" ""
|-CXXMethodDecl 0x558bb1a03bc8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x558bb1a03b38 <col:32> col:35 'int'
| `-DeprecatedAttr 0x558bb1a03c70 <col:58> "" ""
|-CXXMethodDecl 0x558bb1a03e08 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x558bb1a03cf8 <col:33> col:36 'int'
| |-ParmVarDecl 0x558bb1a03d70 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x558bb1a03eb8 <col:62> "" ""
|-CXXMethodDecl 0x558bb1a03fd0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x558bb1a03f40 <col:34> col:37 'int'
| `-DeprecatedAttr 0x558bb1a04078 <col:60> "" ""
|-CXXMethodDecl 0x558bb1a04210 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x558bb1a04100 <col:34> col:37 'int'
| |-ParmVarDecl 0x558bb1a04178 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x558bb1a042c0 <col:64> "" ""
|-CXXMethodDecl 0x558bb1a043d8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x558bb1a04348 <col:32> col:35 'int'
| `-DeprecatedAttr 0x558bb1a04480 <col:58> "" ""
|-CXXMethodDecl 0x558bb1a04618 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x558bb1a04508 <col:33> col:36 'int'
| |-ParmVarDecl 0x558bb1a04580 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x558bb1a046c8 <col:62> "" ""
|-CXXMethodDecl 0x558bb1a047e0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x558bb1a04750 <col:33> col:36 'int'
| `-DeprecatedAttr 0x558bb1a04888 <col:59> "" ""
|-CXXMethodDecl 0x558bb1a04a20 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x558bb1a04910 <col:33> col:36 'int'
| |-ParmVarDecl 0x558bb1a04988 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x558bb1a04ad0 <col:63> "" ""
|-AccessSpecDecl 0x558bb1a04b40 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x558bb1a04b68 prev 0x558bb19f9d70 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x558bb1a04c60 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x558bb1a04d50 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x558bb1a04e78 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x558bb1a04ff8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x558bb1a05178 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x558bb1a052f8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x558bb1a16128 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x558bb1a16998 <col:11>
| |-CXXDestructorDecl 0x558bb1a16200 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x558bb1a16338 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x558bb1a16338
| | `-ParmVarDecl 0x558bb1a16448 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x558bb1a164e8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x558bb1a164e8
| | `-ParmVarDecl 0x558bb1a165f8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x558bb1a193b8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x558bb1a194c8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x558bb1a19748 <col:11>
| |   `-ReturnStmt 0x558bb1a19738 <col:11>
| |     `-UnaryOperator 0x558bb1a19720 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x558bb1a19710 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x558bb1a19538 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x558bb1a19538
|   `-ParmVarDecl 0x558bb1a19648 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x558bb1a05360 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x558bb1a05478 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x558bb1a05518 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x558bb1a05580 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x558bb1a055e8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x558bb1a05650 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x558bb1a056b0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x558bb1a05770 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x558bb1a057d0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x558bb1a05830 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x558bb1a16038 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x558bb1a05518 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x558bb1a169a8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x558bb1a16a00 <col:12>
| |-CXXConstructorDecl 0x558bb1a16668 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x558bb1a16668
| | `-ParmVarDecl 0x558bb1a16778 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x558bb1a16818 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x558bb1a16818
| | `-ParmVarDecl 0x558bb1a16928 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x558bb1a18aa0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x558bb1a058a8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x558bb1a05908 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x558bb1a05970 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x558bb1a059d8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x558bb1a05a40 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x558bb1a05aa8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x558bb1a05b08 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x558bb1a05b68 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x558bb1a05bd0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x558bb1a05c58 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x558bb1a058a8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x558bb1a15fd0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x558bb1a05b08 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x558bb1a16a10 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x558bb1a16a70 <col:21, line:755:5>
|-CXXConstructorDecl 0x558bb1a05df8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x558bb1a05d38 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x558bb1a05ef0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x558bb1a060d8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x558bb1a05fe0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x558bb1a063a8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x558bb1a06190 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x558bb1a06208 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x558bb1a06280 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558bb1a065c8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x558bb1a06478 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x558bb1a064f0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x558bb1a0eba8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x558bb1a06688 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x558bb1a06700 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x558bb1a06778 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x558bb1a0ed00 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x558bb1a0ec70 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x558bb1a0ee48 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x558bb1a0edb8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x558bb1a0ef40 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_arp
         0 |   uint16_t ar_hrd
         2 |   uint16_t ar_pro
         4 |   uint8_t ar_hln
         5 |   uint8_t ar_pln
         6 |   uint16_t ar_op
           | [sizeof=8, dsize=8, align=2,
           |  nvsize=8, nvalign=2]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558bb1a46c98 <../dummy_inc/clicknet/ether.h:33:1, line:52:1> line:33:8 referenced struct click_arp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x558bb1a46db8 <col:1, col:8> col:8 implicit struct click_arp
|-FieldDecl 0x558bb1a46e58 <line:34:5, col:14> col:14 referenced ar_hrd 'uint16_t':'unsigned short'
|-FieldDecl 0x558bb1a46eb8 <line:42:5, col:14> col:14 referenced ar_pro 'uint16_t':'unsigned short'
|-FieldDecl 0x558bb1a46f18 <line:43:5, col:13> col:13 referenced ar_hln 'uint8_t':'unsigned char'
|-FieldDecl 0x558bb1a46f78 <line:44:5, col:13> col:13 referenced ar_pln 'uint8_t':'unsigned char'
`-FieldDecl 0x558bb1a46fd8 <line:45:5, col:14> col:14 ar_op 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_arp = type { i16, i16, i8, i8, i16 }
  NonVirtualBaseLLVMType:%struct.click_arp = type { i16, i16, i8, i8, i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class StringAccum
         0 |   struct StringAccum::rep_t r_
         0 |     unsigned char * s
         8 |     int len
        12 |     int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558bb1b07810 <../dummy_inc/click/straccum.hh:112:5, line:122:5> line:112:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558bb1b07928 <col:5, col:12> col:12 implicit referenced struct rep_t
|-FieldDecl 0x558bb1b079d0 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
|-FieldDecl 0x558bb1b07a38 <line:114:2, col:6> col:6 referenced len 'int'
|-FieldDecl 0x558bb1b07aa0 <line:115:2, col:6> col:6 referenced cap 'int'
|-CXXConstructorDecl 0x558bb1b07b50 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| |-CXXCtorInitializer Field 0x558bb1b079d0 's' 'unsigned char *'
| | `-CXXReinterpretCastExpr 0x558bb1b089d0 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| |   `-CXXConstCastExpr 0x558bb1b08988 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| |     `-CallExpr 0x558bb1b08950 <col:63, col:82> 'const char *'
| |       `-ImplicitCastExpr 0x558bb1b08938 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| |         `-DeclRefExpr 0x558bb1b088e0 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x558bb181dbc0 'empty_data' 'const char *()'
| |-CXXCtorInitializer Field 0x558bb1b07a38 'len' 'int'
| | `-IntegerLiteral 0x558bb1b08a48 <line:118:12> 'int' 0
| |-CXXCtorInitializer Field 0x558bb1b07aa0 'cap' 'int'
| | `-IntegerLiteral 0x558bb1b08ab0 <col:20> 'int' 0
| `-CompoundStmt 0x558bb1b08b30 <col:23, line:119:2>
|-CXXConstructorDecl 0x558bb1b07cc8 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| |-ParmVarDecl 0x558bb1b07c08 <col:17> col:35 'uninitialized_type'
| `-CompoundStmt 0x558bb1b08b40 <col:37, line:121:2>
|-CXXConstructorDecl 0x558bb1b0ad58 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x558bb1b0ae68 <col:12> col:12 used 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x558bb1b079d0 's' 'unsigned char *'
| | `-ImplicitCastExpr 0x558bb1b0c820 <col:12> 'unsigned char *' <LValueToRValue>
| |   `-MemberExpr 0x558bb1b0c7f0 <col:12> 'unsigned char *const' lvalue .s 0x558bb1b079d0
| |     `-DeclRefExpr 0x558bb1b0c7d0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x558bb1b0ae68 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x558bb1b07a38 'len' 'int'
| | `-ImplicitCastExpr 0x558bb1b0c8b0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x558bb1b0c880 <col:12> 'const int' lvalue .len 0x558bb1b07a38
| |     `-DeclRefExpr 0x558bb1b0c860 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x558bb1b0ae68 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x558bb1b07aa0 'cap' 'int'
| | `-ImplicitCastExpr 0x558bb1b0c940 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x558bb1b0c910 <col:12> 'const int' lvalue .cap 0x558bb1b07aa0
| |     `-DeclRefExpr 0x558bb1b0c8f0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x558bb1b0ae68 '' 'const StringAccum::rep_t &'
| `-CompoundStmt 0x558bb1b0c998 <col:12>
|-CXXConstructorDecl 0x558bb1b0af08 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x558bb1b0af08
| `-ParmVarDecl 0x558bb1b0b018 <col:12> col:12 'StringAccum::rep_t &&'
`-CXXDestructorDecl 0x558bb1b0cc50 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  NonVirtualBaseLLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558bb1b02fa8 prev 0x558bb1a49030 <../dummy_inc/click/straccum.hh:28:1, line:137:1> line:28:7 referenced class StringAccum definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x558bb1b030a0 <col:1, col:7> col:7 implicit referenced class StringAccum
|-AccessSpecDecl 0x558bb1b03130 <col:21, col:27> col:21 public
|-TypedefDecl 0x558bb1b03170 <line:30:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x558bb14cae00 'const char *'
|   `-QualType 0x558bb14ca351 'const char' const
|     `-BuiltinType 0x558bb14ca350 'char'
|-TypedefDecl 0x558bb1b031e0 <line:31:5, col:19> col:19 referenced iterator 'char *'
| `-PointerType 0x558bb14cafd0 'char *'
|   `-BuiltinType 0x558bb14ca350 'char'
|-TypedefDecl 0x558bb1b03320 <line:33:5, col:57> col:32 referenced unspecified_bool_type 'int (StringAccum::*)() const'
| `-MemberPointerType 0x558bb1b03290 'int (StringAccum::*)() const'
|   |-RecordType 0x558bb1788480 'StringAccum'
|   | `-CXXRecord 0x558bb1b02fa8 'StringAccum'
|   `-ParenType 0x558bb17f7bd0 'int () const' sugar
|     `-FunctionProtoType 0x558bb17cb760 'int () const' const cdecl
|       `-BuiltinType 0x558bb14ca3b0 'int'
|-CXXConstructorDecl 0x558bb1b033e0 <line:35:5, col:24> col:12 used StringAccum 'void ()' inline
|-CXXConstructorDecl 0x558bb1b03530 <line:36:5, col:45> col:21 StringAccum 'void (int)' inline
| `-ParmVarDecl 0x558bb1b034a0 <col:33, col:37> col:37 capacity 'int'
|-CXXConstructorDecl 0x558bb1b03680 <line:37:5, col:41> col:12 StringAccum 'void (const String &)' inline
| `-ParmVarDecl 0x558bb1b035f0 <col:24, col:38> col:38 str 'const String &'
|-CXXConstructorDecl 0x558bb1b03828 <line:38:5, col:44> col:12 StringAccum 'void (const StringAccum &)' inline
| `-ParmVarDecl 0x558bb1b03768 <col:24, col:43> col:43 x 'const StringAccum &'
|-CXXConstructorDecl 0x558bb1b039d8 <line:40:5, col:39> col:12 StringAccum 'void (StringAccum &&)' inline
| `-ParmVarDecl 0x558bb1b03918 <col:24, col:38> col:38 x 'StringAccum &&'
|-CXXDestructorDecl 0x558bb1b03ad0 <line:42:5, col:25> col:12 used ~StringAccum 'void () noexcept' inline
|-CXXMethodDecl 0x558bb1b03c88 <line:44:5, col:55> col:25 operator= 'StringAccum &(const StringAccum &)' inline
| `-ParmVarDecl 0x558bb1b03bc0 <col:35, col:54> col:54 x 'const StringAccum &'
|-CXXMethodDecl 0x558bb1b03e08 <line:46:5, col:50> col:25 operator= 'StringAccum &(StringAccum &&)' inline
| `-ParmVarDecl 0x558bb1b03d40 <col:35, col:49> col:49 x 'StringAccum &&'
|-CXXMethodDecl 0x558bb1b03f00 <line:49:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x558bb1b03fc8 <line:50:5, col:23> col:18 data 'char *()' inline
|-CXXMethodDecl 0x558bb1b04090 <line:51:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x558bb1b04158 <line:52:5, col:27> col:16 used capacity 'int () const' inline
|-CXXMethodDecl 0x558bb1b04220 <line:54:5, col:23> col:17 c_str 'const char *()'
|-CXXConversionDecl 0x558bb1b04388 <line:56:5, col:45> col:12 operator int (StringAccum::*)() const 'StringAccum::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x558bb1b04458 <line:57:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x558bb1b04518 <line:58:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x558bb1b04628 <line:60:5, col:35> col:27 used begin 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x558bb1b04738 <line:61:5, col:27> col:21 begin 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x558bb1b047f8 <line:62:5, col:33> col:27 used end 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x558bb1b048b8 <line:63:5, col:25> col:21 end 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x558bb1b04a00 <line:65:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x558bb1b04970 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x558bb1b04b90 <line:66:5, col:34> col:18 operator[] 'char &(int)' inline
| `-ParmVarDecl 0x558bb1b04ac0 <col:29, col:33> col:33 i 'int'
|-CXXMethodDecl 0x558bb1b04c58 <line:67:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x558bb1b04d50 <line:68:5, col:24> col:18 front 'char &()' inline
|-CXXMethodDecl 0x558bb1b04e10 <line:69:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x558bb1b04ed8 <line:70:5, col:23> col:18 back 'char &()' inline
|-CXXMethodDecl 0x558bb1b04f98 <line:72:5, col:33> col:17 used out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x558bb1b05058 <line:73:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x558bb1b05118 <line:75:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x558bb1b05268 <line:76:5, col:31> col:18 reserve 'char *(int)' inline
| `-ParmVarDecl 0x558bb1b051d0 <col:26, col:30> col:30 n 'int'
|-CXXMethodDecl 0x558bb1b053b8 <line:77:5, col:35> col:17 set_length 'void (int)' inline
| `-ParmVarDecl 0x558bb1b05328 <col:28, col:32> col:32 len 'int'
|-CXXMethodDecl 0x558bb1b05510 <line:78:5, col:23> col:9 resize 'int (int)'
| `-ParmVarDecl 0x558bb1b05478 <col:16, col:20> col:20 len 'int'
|-CXXMethodDecl 0x558bb1b05660 <line:79:5, col:40> col:17 used adjust_length 'void (int)' inline
| `-ParmVarDecl 0x558bb1b055d0 <col:31, col:35> col:35 delta 'int'
|-CXXMethodDecl 0x558bb1b05880 <line:80:5, col:54> col:18 extend 'char *(int, int)' inline
| |-ParmVarDecl 0x558bb1b05720 <col:25, col:29> col:29 nadjust 'int'
| `-ParmVarDecl 0x558bb1b057a0 <col:38, col:53> col:42 nreserve 'int' cinit
|   `-IntegerLiteral 0x558bb1b08808 <col:53> 'int' 0
|-CXXMethodDecl 0x558bb1b059d8 <line:82:5, col:35> col:17 pop_back 'void (int)' inline
| `-ParmVarDecl 0x558bb1b05948 <col:26, col:34> col:30 n 'int' cinit
|   `-IntegerLiteral 0x558bb1b08828 <col:34> 'int' 1
|-CXXMethodDecl 0x558bb1b05b20 <line:84:5, col:30> col:17 used append 'void (char)' inline
| `-ParmVarDecl 0x558bb1b05a90 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x558bb1b05c80 <line:85:5, col:39> col:17 used append 'void (unsigned char)' inline
| `-ParmVarDecl 0x558bb1b05be0 <col:24, col:38> col:38 c 'unsigned char'
|-CXXMethodDecl 0x558bb1b05dd0 <line:86:5, col:35> col:17 append_utf8 'bool (int)' inline
| `-ParmVarDecl 0x558bb1b05d40 <col:29, col:33> col:33 ch 'int'
|-CXXMethodDecl 0x558bb1b05f20 <line:87:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x558bb1b05e90 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x558bb1b060f8 <line:88:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x558bb1b05fe0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x558bb1b06060 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x558bb1b062d8 <line:89:5, col:55> col:17 used append 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x558bb1b061c0 <col:24, col:45> col:45 s 'const unsigned char *'
| `-ParmVarDecl 0x558bb1b06240 <col:48, col:52> col:52 len 'int'
|-CXXMethodDecl 0x558bb1b064b8 <line:90:5, col:59> col:17 used append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x558bb1b063a0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x558bb1b06420 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x558bb1b06698 <line:91:5, col:77> col:17 append 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x558bb1b06580 <col:24, col:45> col:45 first 'const unsigned char *'
| `-ParmVarDecl 0x558bb1b06600 <col:52, col:73> col:73 last 'const unsigned char *'
|-CXXMethodDecl 0x558bb1b06878 <line:92:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x558bb1b06760 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x558bb1b067e0 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x558bb1b06bd8 <line:93:5, col:81> col:10 used append_numeric 'void (String::intmax_t, int, bool)'
| |-ParmVarDecl 0x558bb1b069c0 <col:25, col:42> col:42 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x558bb1b06a40 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x558bb1b08848 <col:56> 'int' 10
| `-ParmVarDecl 0x558bb1b06ab8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x558bb1b08868 <col:77> 'bool' true
|-CXXMethodDecl 0x558bb1b06f38 <line:94:5, col:82> col:10 used append_numeric 'void (String::uintmax_t, int, bool)'
| |-ParmVarDecl 0x558bb1b06d20 <col:25, col:43> col:43 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x558bb1b06da0 <col:46, col:57> col:50 base 'int' cinit
| | `-IntegerLiteral 0x558bb1b08878 <col:57> 'int' 10
| `-ParmVarDecl 0x558bb1b06e18 <col:61, col:78> col:66 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x558bb1b08898 <col:78> 'bool' true
|-CXXMethodDecl 0x558bb1b07160 <line:96:5, col:57> col:18 snprintf 'StringAccum &(int, const char *, ...)'
| |-ParmVarDecl 0x558bb1b07008 <col:27, col:31> col:31 n 'int'
| `-ParmVarDecl 0x558bb1b07088 <col:34, col:46> col:46 format 'const char *'
|-CXXMethodDecl 0x558bb1b07258 <line:98:5, col:24> col:12 used take_string 'String ()'
|-CXXMethodDecl 0x558bb1b073c8 <line:100:5, col:29> col:10 used swap 'void (StringAccum &)'
| `-ParmVarDecl 0x558bb1b07308 <col:15, col:28> col:28 x 'StringAccum &'
|-CXXMethodDecl 0x558bb1b07518 <line:104:5, col:62> col:17 forward 'void (int)' inline
| |-ParmVarDecl 0x558bb1b07488 <col:25, col:29> col:29 delta 'int'
| `-DeprecatedAttr 0x558bb1b075c0 <col:51> "" ""
|-AccessSpecDecl 0x558bb1b07630 <line:106:3, col:10> col:3 private
|-EnumDecl 0x558bb1b07658 <line:108:5, line:110:5> line:108:5
| `-EnumConstantDecl 0x558bb1b077a8 <line:109:2, col:23> col:2 referenced MEMO_SPACE 'StringAccum::(anonymous enum at ../dummy_inc/click/straccum.hh:108:5)'
|   `-ImplicitCastExpr 0x558bb1b077f8 <col:15, col:23> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x558bb1b07788 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' Int: 12
|       `-DeclRefExpr 0x558bb1b07758 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' EnumConstant 0x558bb1800938 'MEMO_SPACE' 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|-CXXRecordDecl 0x558bb1b07810 <line:112:5, line:122:5> line:112:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x558bb1b07928 <col:5, col:12> col:12 implicit referenced struct rep_t
| |-FieldDecl 0x558bb1b079d0 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
| |-FieldDecl 0x558bb1b07a38 <line:114:2, col:6> col:6 referenced len 'int'
| |-FieldDecl 0x558bb1b07aa0 <line:115:2, col:6> col:6 referenced cap 'int'
| |-CXXConstructorDecl 0x558bb1b07b50 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| | |-CXXCtorInitializer Field 0x558bb1b079d0 's' 'unsigned char *'
| | | `-CXXReinterpretCastExpr 0x558bb1b089d0 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| | |   `-CXXConstCastExpr 0x558bb1b08988 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| | |     `-CallExpr 0x558bb1b08950 <col:63, col:82> 'const char *'
| | |       `-ImplicitCastExpr 0x558bb1b08938 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| | |         `-DeclRefExpr 0x558bb1b088e0 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x558bb181dbc0 'empty_data' 'const char *()'
| | |-CXXCtorInitializer Field 0x558bb1b07a38 'len' 'int'
| | | `-IntegerLiteral 0x558bb1b08a48 <line:118:12> 'int' 0
| | |-CXXCtorInitializer Field 0x558bb1b07aa0 'cap' 'int'
| | | `-IntegerLiteral 0x558bb1b08ab0 <col:20> 'int' 0
| | `-CompoundStmt 0x558bb1b08b30 <col:23, line:119:2>
| |-CXXConstructorDecl 0x558bb1b07cc8 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| | |-ParmVarDecl 0x558bb1b07c08 <col:17> col:35 'uninitialized_type'
| | `-CompoundStmt 0x558bb1b08b40 <col:37, line:121:2>
| |-CXXConstructorDecl 0x558bb1b0ad58 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x558bb1b0ae68 <col:12> col:12 used 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x558bb1b079d0 's' 'unsigned char *'
| | | `-ImplicitCastExpr 0x558bb1b0c820 <col:12> 'unsigned char *' <LValueToRValue>
| | |   `-MemberExpr 0x558bb1b0c7f0 <col:12> 'unsigned char *const' lvalue .s 0x558bb1b079d0
| | |     `-DeclRefExpr 0x558bb1b0c7d0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x558bb1b0ae68 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x558bb1b07a38 'len' 'int'
| | | `-ImplicitCastExpr 0x558bb1b0c8b0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x558bb1b0c880 <col:12> 'const int' lvalue .len 0x558bb1b07a38
| | |     `-DeclRefExpr 0x558bb1b0c860 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x558bb1b0ae68 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x558bb1b07aa0 'cap' 'int'
| | | `-ImplicitCastExpr 0x558bb1b0c940 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x558bb1b0c910 <col:12> 'const int' lvalue .cap 0x558bb1b07aa0
| | |     `-DeclRefExpr 0x558bb1b0c8f0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x558bb1b0ae68 '' 'const StringAccum::rep_t &'
| | `-CompoundStmt 0x558bb1b0c998 <col:12>
| |-CXXConstructorDecl 0x558bb1b0af08 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x558bb1b0af08
| | `-ParmVarDecl 0x558bb1b0b018 <col:12> col:12 'StringAccum::rep_t &&'
| `-CXXDestructorDecl 0x558bb1b0cc50 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-FieldDecl 0x558bb1b07da0 <line:124:5, col:11> col:11 referenced r_ 'StringAccum::rep_t'
|-CXXMethodDecl 0x558bb1b07ea0 <line:126:5, col:19> col:11 used grow 'char *(int)'
| `-ParmVarDecl 0x558bb1b07e08 <col:16> col:19 'int'
|-CXXMethodDecl 0x558bb1b08080 <line:127:5, col:48> col:11 used hard_extend 'char *(int, int)'
| |-ParmVarDecl 0x558bb1b07f60 <col:23, col:27> col:27 nadjust 'int'
| `-ParmVarDecl 0x558bb1b07fe0 <col:36, col:40> col:40 nreserve 'int'
|-CXXMethodDecl 0x558bb1b08260 <line:128:5, col:44> col:10 used hard_append 'void (const char *, int)'
| |-ParmVarDecl 0x558bb1b08148 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x558bb1b081c8 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x558bb1b083b8 <line:129:5, col:43> col:10 used hard_append_cstr 'void (const char *)'
| `-ParmVarDecl 0x558bb1b08328 <col:27, col:39> col:39 cstr 'const char *'
|-CXXMethodDecl 0x558bb1b08508 <line:130:5, col:33> col:10 used append_utf8_hard 'bool (int)'
| `-ParmVarDecl 0x558bb1b08478 <col:27, col:31> col:31 ch 'int'
`-FriendDecl 0x558bb1b087c8 <line:132:5, col:70> col:25
  `-FunctionDecl 0x558bb1b08708 parent 0x558bb14ca2b8 <col:5, col:70> col:25 operator<< 'StringAccum &(StringAccum &, const String &)'
    |-ParmVarDecl 0x558bb1b085c0 <col:36, col:49> col:49 sa 'StringAccum &'
    `-ParmVarDecl 0x558bb1b08638 <col:53, col:67> col:67 str 'const String &'

Layout: <CGRecordLayout
  LLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  NonVirtualBaseLLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558bb1aed890 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558bb1aed9a8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x558bb1aeda38 <col:16, col:22> col:16 public
|-EnumDecl 0x558bb1aeda60 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x558bb1aedb60 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x558bb1aeddc0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb1aedb40 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x558bb1aedb20 <col:21> 'int' 0
| |-EnumConstantDecl 0x558bb1aedbf0 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x558bb1aeddd8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb1aedbd0 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x558bb1aedbb0 <col:24> 'int' 22
| |-EnumConstantDecl 0x558bb1aedc90 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x558bb1aeddf0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb1aedc70 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x558bb1aedc50 <col:24> 'int' 34
| |-EnumConstantDecl 0x558bb1aedd20 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x558bb1aede08 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x558bb1aedd00 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x558bb1aedce0 <col:25> 'int' 95
| `-EnumConstantDecl 0x558bb1aedd70 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x558bb1aef780 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x558bb1aefbb8 <col:7>
|-CXXConstructorDecl 0x558bb1aef888 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x558bb1aef888
| `-ParmVarDecl 0x558bb1aef998 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x558bb1aefa38 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x558bb1aefb48 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x558bb1b835e0 <col:7>
`-CXXDestructorDecl 0x558bb1af1cb8 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558bb1aede38 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x558bb1aedf98 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x558bb1aee028 <col:32, col:38> col:32 public
|-TypedefDecl 0x558bb1aee060 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x558bb16200a0 'uint32_t' sugar
|   |-Typedef 0x558bb15333d8 'uint32_t'
|   `-TypedefType 0x558bb150c480 '__uint32_t' sugar
|     |-Typedef 0x558bb150c078 '__uint32_t'
|     `-BuiltinType 0x558bb14ca450 'unsigned int'
|-CXXConstructorDecl 0x558bb1aee1a8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x558bb1aee0d0 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x558bb1aef688 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x558bb1aefbc8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x558bb1aeef40 'base' 'int'
| | `-ImplicitCastExpr 0x558bb1aef728 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x558bb1aef6e8 <col:16> 'int' lvalue ParmVar 0x558bb1aee0d0 'b' 'int'
| `-CompoundStmt 0x558bb1aefc38 <col:19, line:1046:5>
|-CXXMethodDecl 0x558bb1aee6a0 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x558bb1aee270 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x558bb1aee2f0 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x558bb1aee368 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x558bb1aee3e8 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x558bb1aee4a8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x558bb1aee528 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x558bb1aeeaf8 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x558bb1aee770 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x558bb1aeea58 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x558bb1aee818 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x558bb1aee8b8 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x558bb1aee930 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x558bb1aef6a8 <col:82> 'const ArgContext' lvalue Var 0x558bb1ae30c8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x558bb1af0b68 <col:94, line:1067:5>
| |   |-DeclStmt 0x558bb1aefdc8 <line:1054:9, col:64>
| |   | `-VarDecl 0x558bb1aefc58 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x558bb1aefd80 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x558bb1aeffe8 <line:1055:9, col:91>
| |   | `-VarDecl 0x558bb1aefdf8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x558bb1aeffc0 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x558bb1aeffa0 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x558bb1aeff50 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x558bb1aeff30 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x558bb1aefed8 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x558bb1aefe88 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x558bb1aefeb8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x558bb1aeff18 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x558bb1aefef8 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x558bb1aeff80 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x558bb1af0148 <line:1056:9, col:27>
| |   | `-VarDecl 0x558bb1af00e0 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x558bb1af0590 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x558bb1af04c0 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x558bb1af0440 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x558bb19ea088 0x558bb1833668 0x558bb1833340 0x558bb1824b20 0x558bb18247d0 0x558bb18240c0 0x558bb17f6a30 0x558bb1782ef0
| |   | | |-CallExpr 0x558bb1af0380 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x558bb1af0170 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x558bb1af0220 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x558bb1af01f0 <col:19, col:23> '<bound member function type>' .begin 0x558bb1813d28
| |   | | | |   `-DeclRefExpr 0x558bb1af01d0 <col:19> 'const String' lvalue ParmVar 0x558bb1aee818 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x558bb1af0290 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x558bb1af0260 <col:32, col:36> '<bound member function type>' .end 0x558bb1813f40
| |   | | | |   `-DeclRefExpr 0x558bb1af0240 <col:32> 'const String' lvalue ParmVar 0x558bb1aee818 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x558bb1af02b0 <col:43> 'const bool' lvalue Var 0x558bb1aefc58 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x558bb1af0318 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x558bb1af02f8 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x558bb1af0340 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x558bb1af00e0 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x558bb1af0360 <col:73> 'const int' lvalue Var 0x558bb1aefdf8 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x558bb1af0420 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x558bb1af03f0 <col:16, col:20> '<bound member function type>' .end 0x558bb1813f40
| |   | |     `-DeclRefExpr 0x558bb1af03d0 <col:16> 'const String' lvalue ParmVar 0x558bb1aee818 'str' 'const String &'
| |   | `-BinaryOperator 0x558bb1af0570 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x558bb1af0508 <col:13> 'int' lvalue ->status 0x558bb1aeefa8
| |   |   | `-CXXThisExpr 0x558bb1af04f8 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x558bb1af0558 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x558bb1af0538 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x558bb1aedbf0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x558bb1af07e0 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x558bb1af06c8 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x558bb1af06b0 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x558bb1af0698 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x558bb1af05b8 <col:13> 'int' lvalue ->status 0x558bb1aeefa8
| |   | | |     `-CXXThisExpr 0x558bb1af05a8 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x558bb1af0678 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x558bb1af0648 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x558bb1af05f8 <col:23> 'int' lvalue ->status 0x558bb1aeefa8
| |   | |   |   `-CXXThisExpr 0x558bb1af05e8 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x558bb1af0660 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x558bb1af0628 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x558bb1aedc90 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x558bb1af07c0 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x558bb1af0760 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x558bb1af0708 <col:13, col:18> '<bound member function type>' .error 0x558bb19b0310
| |   |   | | `-DeclRefExpr 0x558bb1af06e8 <col:13> 'const ArgContext' lvalue ParmVar 0x558bb1aee930 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x558bb1af0788 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x558bb1af0738 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x558bb1af07b0 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x558bb1af07a0 <col:20> 'bool' false
| |   |-DeclStmt 0x558bb1af09b8 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x558bb1af0960 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x558bb1af08f0 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x558bb1af0b18 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x558bb1af09d0 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x558bb17b6eb8
| |   | |-DeclRefExpr 0x558bb1af0a18 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x558bb1af00e0 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x558bb1af0ae8 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x558bb1af0a60 <col:64> 'V' lvalue ParmVar 0x558bb1aee8b8 'result' 'V &'
| |   `-ReturnStmt 0x558bb1af0b58 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x558bb1af0b48 <col:16> 'bool' true
| `-CXXMethodDecl 0x558bb1b8af78 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x558bb1b8ad50 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x558bb1b8ae28 <col:46, col:49> col:49 used result 'unsigned int &'
|   |-ParmVarDecl 0x558bb1b8ae90 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x558bb1b8cd10 <col:94, line:1067:5>
|     |-DeclStmt 0x558bb1b8b788 <line:1054:9, col:64>
|     | `-VarDecl 0x558bb1b8b5a8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x558bb1b8b718 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x558bb1b8b6e8 <col:36, col:55> 'const bool' lvalue Var 0x558bb17a60d0 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x558bb1b8b968 <line:1055:9, col:91>
|     | `-VarDecl 0x558bb1b8b7a0 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x558bb1b8b8e8 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x558bb1b8b8d0 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x558bb1b8b8b0 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x558bb1b8b890 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x558bb1b8b870 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x558bb1b8b838 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x558bb1b8b818 <col:36, col:44> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x558bb1aefeb8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x558bb1b8b858 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x558bb1aefef8 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x558bb1aeff80 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x558bb1b8bb00 <line:1056:9, col:27>
|     | `-VarDecl 0x558bb1b8ba98 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x558bb1b8bf88 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x558bb1b8bf30 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x558bb1b8bde8 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x558bb1b8bdb8 <col:13> '<bound member function type>' ->parse 0x558bb1aee6a0
|     | | | | `-CXXThisExpr 0x558bb1b8bda8 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x558bb1b8bc48 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x558bb1b8bc18 <col:19, col:23> '<bound member function type>' .begin 0x558bb1813d28
|     | | | |   `-DeclRefExpr 0x558bb1b8bbf8 <col:19> 'const String' lvalue ParmVar 0x558bb1b8ad50 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x558bb1b8bcb8 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x558bb1b8bc88 <col:32, col:36> '<bound member function type>' .end 0x558bb1813f40
|     | | | |   `-DeclRefExpr 0x558bb1b8bc68 <col:32> 'const String' lvalue ParmVar 0x558bb1b8ad50 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x558bb1b8be58 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x558bb1b8be38 <col:43> 'const bool' lvalue Var 0x558bb1b8b5a8 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x558bb1b8bd40 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x558bb1b8bd28 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x558bb1b8bd08 <col:58, col:66> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     | | | |-ImplicitCastExpr 0x558bb1b8be70 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x558bb1b8bd68 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x558bb1b8ba98 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x558bb1b8bea8 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x558bb1b8be88 <col:73> 'const int' lvalue Var 0x558bb1b8b7a0 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x558bb1b8bf10 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x558bb1b8bee0 <col:16, col:20> '<bound member function type>' .end 0x558bb1813f40
|     | |     `-DeclRefExpr 0x558bb1b8bec0 <col:16> 'const String' lvalue ParmVar 0x558bb1b8ad50 'str' 'const String &'
|     | `-BinaryOperator 0x558bb1b8bf68 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x558bb1af0508 <col:13> 'int' lvalue ->status 0x558bb1aeefa8
|     |   | `-CXXThisExpr 0x558bb1af04f8 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x558bb1b8bf50 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x558bb1af0538 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x558bb1aedbf0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x558bb1b8c100 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x558bb1b8c020 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x558bb1b8c008 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x558bb1b8bff0 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x558bb1af05b8 <col:13> 'int' lvalue ->status 0x558bb1aeefa8
|     | | |     `-CXXThisExpr 0x558bb1af05a8 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x558bb1b8bfd0 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x558bb1b8bfa0 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x558bb1af05f8 <col:23> 'int' lvalue ->status 0x558bb1aeefa8
|     | |   |   `-CXXThisExpr 0x558bb1af05e8 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x558bb1b8bfb8 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x558bb1af0628 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x558bb1aedc90 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x558bb1b8c0e0 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x558bb1b8c090 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x558bb1b8c060 <col:13, col:18> '<bound member function type>' .error 0x558bb19b0310
|     |   | | `-DeclRefExpr 0x558bb1b8c040 <col:13> 'const ArgContext' lvalue ParmVar 0x558bb1b8ae90 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x558bb1b8c0b8 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x558bb1af0738 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x558bb1b8c0d0 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x558bb1af07a0 <col:20> 'bool' false
|     |-DeclStmt 0x558bb1b8c648 <line:1064:9, col:64>
|     | `-TypedefDecl 0x558bb1b8c5f0 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned int>::type':'unsigned int'
|     |   `-ElaboratedType 0x558bb1b8c5a0 'typename make_unsigned<unsigned int>::type' sugar
|     |     `-TypedefType 0x558bb1b8c580 'make_unsigned<unsigned int>::type' sugar
|     |       |-Typedef 0x558bb1b8c510 'type'
|     |       `-ElaboratedType 0x558bb1b8c4c0 'typename integer_traits<unsigned int>::unsigned_type' sugar
|     |         `-TypedefType 0x558bb1b8c4a0 'integer_traits<unsigned int>::unsigned_type' sugar
|     |           |-Typedef 0x558bb17a6228 'unsigned_type'
|     |           `-BuiltinType 0x558bb14ca450 'unsigned int'
|     |-CallExpr 0x558bb1b8cca0 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x558bb1b8cc88 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x558bb1b8cc08 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x558bb1b8cae8 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x558bb17b6eb8 'extract_integer')
|     | |-ImplicitCastExpr 0x558bb1b8cce8 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x558bb1b8ccd0 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x558bb1b8c6a8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x558bb1b8ba98 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x558bb1b8c778 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x558bb1b8c728 <col:64> 'unsigned int':'unsigned int' lvalue ParmVar 0x558bb1b8ae28 'result' 'unsigned int &'
|     `-ReturnStmt 0x558bb1b8cd00 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x558bb1af0b48 <col:16> 'bool' true
|-FunctionTemplateDecl 0x558bb1aeeeb8 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x558bb1aeeb68 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x558bb1aeee18 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x558bb1aeec18 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x558bb1aeecb8 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x558bb1aeed30 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x558bb1aef6c8 <col:71> 'const ArgContext' lvalue Var 0x558bb1ae30c8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x558bb1af12d8 <col:83, line:1083:5>
| |   |-DeclStmt 0x558bb1af0c30 <line:1071:9, col:12>
| |   | `-VarDecl 0x558bb1af0bc8 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x558bb1af12b0 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x558bb1af0ec0 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x558bb1af0d48 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x558bb1af0d10 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x558bb1af0c58 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x558bb1af0cb0 <col:31> 'const String' lvalue ParmVar 0x558bb1aeec18 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x558bb1af0cd0 <col:36> 'V' lvalue Var 0x558bb1af0bc8 'x' 'V'
| |     | |   `-DeclRefExpr 0x558bb1af0cf0 <col:39> 'const ArgContext' lvalue ParmVar 0x558bb1aeed30 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x558bb1af0ea0 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x558bb1af0e80 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x558bb1af0e68 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x558bb1af0e50 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x558bb1af0d70 <col:17> 'int' lvalue ->status 0x558bb1aeefa8
| |     |     |     `-CXXThisExpr 0x558bb1af0d60 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x558bb1af0e30 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x558bb1af0e00 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x558bb1af0db0 <col:27> 'int' lvalue ->status 0x558bb1aeefa8
| |     |       |   `-CXXThisExpr 0x558bb1af0da0 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x558bb1af0e18 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x558bb1af0de0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x558bb1aedc90 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x558bb1af0ef0 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x558bb1af0ee0 <col:20> 'bool' false
| |     `-IfStmt 0x558bb1af1288 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x558bb1af0f90 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x558bb1af0f60 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x558bb1af0f10 <col:18> 'int' lvalue ->status 0x558bb1aeefa8
| |       | |   `-CXXThisExpr 0x558bb1af0f00 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x558bb1af0f78 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x558bb1af0f40 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x558bb1aedc90 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x558bb1af11c8 <col:42, line:1079:9>
| |       | |-CallExpr 0x558bb1af1170 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x558bb1af0fc0 <line:1076:13> '<bound member function type>' ->range_error 0x558bb1aef5b8
| |       | | | `-CXXThisExpr 0x558bb1af0fb0 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x558bb1af0ff0 <col:25> 'const ArgContext' lvalue ParmVar 0x558bb1aeed30 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x558bb1af10d0 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x558bb1af1148 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x558bb1af1128 <col:43> 'V' lvalue Var 0x558bb1af0bc8 'x' 'V'
| |       | `-ReturnStmt 0x558bb1af11b8 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x558bb1af11a8 <col:20> 'bool' false
| |       `-CompoundStmt 0x558bb1af1268 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x558bb1af1228 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x558bb1af11e8 <col:13> 'V' lvalue ParmVar 0x558bb1aeecb8 'result' 'V &'
| |         | `-DeclRefExpr 0x558bb1af1208 <col:22> 'V' lvalue Var 0x558bb1af0bc8 'x' 'V'
| |         `-ReturnStmt 0x558bb1af1258 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x558bb1af1248 <col:20> 'bool' true
| `-CXXMethodDecl 0x558bb1b8a938 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x558bb1b8a710 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x558bb1b8a7e8 <col:35, col:38> col:38 used result 'unsigned int &'
|   |-ParmVarDecl 0x558bb1b8a850 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x558bb1b8b588 <col:83, line:1083:5>
|     |-DeclStmt 0x558bb1b8abc0 <line:1071:9, col:12>
|     | `-VarDecl 0x558bb1b8ab58 <col:9, col:11> col:11 used x 'unsigned int':'unsigned int'
|     `-IfStmt 0x558bb1b8b560 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x558bb1b8b1f0 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x558bb1b8b118 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x558bb1b8b0e0 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x558bb1b8b098 <col:14> '<bound member function type>' ->parse_saturating 0x558bb1b8af78
|       | |   | `-CXXThisExpr 0x558bb1b8b088 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x558bb1b8ac30 <col:31> 'const String' lvalue ParmVar 0x558bb1b8a710 'str' 'const String &'
|       | |   |-DeclRefExpr 0x558bb1b8ac50 <col:36> 'unsigned int':'unsigned int' lvalue Var 0x558bb1b8ab58 'x' 'unsigned int':'unsigned int'
|       | |   `-DeclRefExpr 0x558bb1b8ac70 <col:39> 'const ArgContext' lvalue ParmVar 0x558bb1b8a850 'args' 'const ArgContext &'
|       | `-ParenExpr 0x558bb1b8b1d0 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x558bb1b8b1b0 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x558bb1b8b198 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x558bb1b8b180 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x558bb1af0d70 <col:17> 'int' lvalue ->status 0x558bb1aeefa8
|       |     |     `-CXXThisExpr 0x558bb1af0d60 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x558bb1b8b160 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x558bb1b8b130 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x558bb1af0db0 <col:27> 'int' lvalue ->status 0x558bb1aeefa8
|       |       |   `-CXXThisExpr 0x558bb1af0da0 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x558bb1b8b148 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x558bb1af0de0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x558bb1aedc90 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x558bb1b8b210 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x558bb1af0ee0 <col:20> 'bool' false
|       `-IfStmt 0x558bb1b8b538 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x558bb1b8b250 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x558bb1b8b220 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x558bb1af0f10 <col:18> 'int' lvalue ->status 0x558bb1aeefa8
|         | |   `-CXXThisExpr 0x558bb1af0f00 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x558bb1b8b238 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x558bb1af0f40 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x558bb1aedc90 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x558bb1b8b470 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x558bb1b8b3e0 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x558bb1af0fc0 <line:1076:13> '<bound member function type>' ->range_error 0x558bb1aef5b8
|         | | | `-CXXThisExpr 0x558bb1af0fb0 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x558bb1b8b270 <col:25> 'const ArgContext' lvalue ParmVar 0x558bb1b8a850 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x558bb1b8b448 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x558bb1b8b418 <col:31, col:50> 'const bool' lvalue Var 0x558bb17a60d0 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x558bb1b8b3b8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x558bb1b8b3a0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x558bb1b8b388 <col:43> 'unsigned int':'unsigned int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x558bb1b8b368 <col:43> 'unsigned int':'unsigned int' lvalue Var 0x558bb1b8ab58 'x' 'unsigned int':'unsigned int'
|         | `-ReturnStmt 0x558bb1b8b460 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x558bb1af11a8 <col:20> 'bool' false
|         `-CompoundStmt 0x558bb1b8b518 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x558bb1b8b4e8 <line:1080:13, col:22> 'unsigned int':'unsigned int' lvalue '='
|           | |-DeclRefExpr 0x558bb1b8b490 <col:13> 'unsigned int':'unsigned int' lvalue ParmVar 0x558bb1b8a7e8 'result' 'unsigned int &'
|           | `-ImplicitCastExpr 0x558bb1b8b4d0 <col:22> 'unsigned int':'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x558bb1b8b4b0 <col:22> 'unsigned int':'unsigned int' lvalue Var 0x558bb1b8ab58 'x' 'unsigned int':'unsigned int'
|           `-ReturnStmt 0x558bb1b8b508 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x558bb1af1248 <col:20> 'bool' true
|-FieldDecl 0x558bb1aeef40 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x558bb1aeefa8 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x558bb1aeeff8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x558bb1aef2b0 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x558bb1aef038 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x558bb1aef0b8 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x558bb1aef130 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x558bb1aef1b0 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x558bb1aef5b8 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x558bb1aef380 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x558bb1aef3f8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x558bb1aef490 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x558bb1af1b38 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x558bb1af1b38
| `-ParmVarDecl 0x558bb1af1c48 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x558bb1af1dc8 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x558bb1af1ed8 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x558bb1b835f0 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x558bb1b835c0 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x558bb1b83590 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x558bb1b83560 <col:7> 'IntArg' lvalue ParmVar 0x558bb1af1ed8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x558bb1aeef40 'base' 'int'
| | `-ImplicitCastExpr 0x558bb1b836e8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x558bb1b836b8 <col:7> 'int' xvalue .base 0x558bb1aeef40
| |     `-CXXStaticCastExpr 0x558bb1b83688 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x558bb1b83658 <col:7> 'IntArg' lvalue ParmVar 0x558bb1af1ed8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x558bb1aeefa8 'status' 'int'
| | `-ImplicitCastExpr 0x558bb1b837b8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x558bb1b83788 <col:7> 'int' xvalue .status 0x558bb1aeefa8
| |     `-CXXStaticCastExpr 0x558bb1b83758 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x558bb1b83728 <col:7> 'IntArg' lvalue ParmVar 0x558bb1af1ed8 '' 'IntArg &&'
| `-CompoundStmt 0x558bb1b83810 <col:7>
`-CXXDestructorDecl 0x558bb1b82750 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x558bb1af6110 <../dummy_inc/click/args.hh:1182:1, col:61> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x558bb1af6368 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x558bb1b82678 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x558bb1b82bf0 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x558bb1b82bd0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x558bb1b82c60 <col:19>
|-CXXConstructorDecl 0x558bb1b82858 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned int> &)' inline default trivial noexcept-unevaluated 0x558bb1b82858
| `-ParmVarDecl 0x558bb1b82968 <col:19> col:19 'const DefaultArg<unsigned int> &'
|-CXXConstructorDecl 0x558bb1b82a08 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x558bb1b82b18 <col:19> col:19 used 'DefaultArg<unsigned int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x558bb1b83820 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x558bb1b83540 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x558bb1b83510 <col:19> 'DefaultArg<unsigned int>' xvalue static_cast<struct DefaultArg<unsigned int> &&> <NoOp>
| |       `-DeclRefExpr 0x558bb1b834e0 <col:19> 'DefaultArg<unsigned int>' lvalue ParmVar 0x558bb1b82b18 '' 'DefaultArg<unsigned int> &&'
| `-CompoundStmt 0x558bb1b83890 <col:19>
`-CXXDestructorDecl 0x558bb1b82ca0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x558bb1afb4d0 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x558bb1afb5e8 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x558bb1afb678 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x558bb1afb8b8 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x558bb1afb6b0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x558bb1afb730 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x558bb1afb7a8 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x558bb1afbad0 <col:81> 'const ArgContext' lvalue Var 0x558bb1ae30c8 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x558bb1afba10 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x558bb1afb980 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x558bb1afbc28 <col:35, line:1261:5>
|   `-ReturnStmt 0x558bb1afbc18 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x558bb1afbc00 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x558bb1afbbd0 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x558bb1afbbb8 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x558bb1afbb90 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x558bb1afbb70 <col:16, col:24> 'String' (CXXTemporary 0x558bb1afbb70)
|               `-CXXConstructExpr 0x558bb1afbb38 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x558bb1afbb20 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x558bb1afbb00 <col:23> 'bool' lvalue ParmVar 0x558bb1afb980 'x' 'bool'
|-CXXConstructorDecl 0x558bb1ba22b8 <line:1257:7> col:7 implicit constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x558bb1ba2390 <col:7> col:7 implicit ~BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x558bb1ba24c8 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x558bb1ba24c8
| `-ParmVarDecl 0x558bb1ba25d8 <col:7> col:7 'const BoolArg &'
`-CXXConstructorDecl 0x558bb1ba2678 <col:7> col:7 implicit used constexpr BoolArg 'void (BoolArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x558bb1ba2788 <col:7> col:7 'BoolArg &&'
  `-CompoundStmt 0x558bb1ba33e0 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x558bb1afbc68 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x558bb1afbec8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x558bb1ba21c8 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x558bb1ba27f8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x558bb1ba27f8
| `-ParmVarDecl 0x558bb1ba2908 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x558bb1ba29a8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x558bb1ba2ab8 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x558bb1ba33f0 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x558bb1ba33c0 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x558bb1ba3390 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x558bb1ba3360 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x558bb1ba2ab8 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x558bb1ba3460 <col:19>
`-CXXDestructorDecl 0x558bb1ba2b58 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.2 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.2 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
