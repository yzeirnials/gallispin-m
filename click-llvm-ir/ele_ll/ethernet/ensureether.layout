
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562020b88df8 prev 0x562020b80598 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x562020b88ef0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x562020b88f80 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x562020b88ff8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x562020b890b8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x562020b89180 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x562020b892f8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x562020b89230 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x562020b893a0 <col:24>
| `-OptimizeNoneAttr 0x562020b893f8 <col:34>
|-CXXMethodDecl 0x562020b89440 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x562020b896f8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x562020b894f0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x562020b89568 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x562020b895e8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x562020b897b0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x562020b897e8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x562020b89850 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x562020b898d8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x562020b89bf8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x562020b89990 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x562020b89a08 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x562020b89a80 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x562020b89b00 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x562020b89d10 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x562020b91688 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x562020b91688
| `-ParmVarDecl 0x562020b91798 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x562020b91838 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x562020b91838
| `-ParmVarDecl 0x562020b91948 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x562020c6d718 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562020b7be10 prev 0x562020b7bb90 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x562020b7bf08 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x562020b7bf98 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x562020b7bff8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x562020b7c0e8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x562020b7c1e8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x562020b7c3b8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x562020b7c268 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x562020b7c2e0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x562020b7c548 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x562020b7c480 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x562020b7c5f0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x562020b7c728 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x562020b7c660 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x562020b7c8c8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x562020b7c808 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x562020b7ca68 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x562020b7c9a8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x562020b7cb10 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x562020b7cc10 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x562020b7ccf0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020b7cbf0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x562020b7cbd0 <col:26> 'int' 1
| `-EnumConstantDecl 0x562020b7cca0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x562020b7cd08 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562020b7cc80 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x562020b7cc60 <col:44> 'int' 2
|-CXXMethodDecl 0x562020b7ce50 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x562020b7cd38 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x562020b7cdb8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x562020b7cfa8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x562020b7cf18 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x562020b7d1e8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x562020b7d068 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x562020b7d0e0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x562020b7d298 <col:20>
| `-OptimizeNoneAttr 0x562020b7d2f0 <col:30>
|-CXXMethodDecl 0x562020b7d3f8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x562020b7d330 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x562020b7d4a0 <col:20>
| `-OptimizeNoneAttr 0x562020b7d4f8 <col:30>
|-CXXMethodDecl 0x562020b7d548 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x562020b7d610 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x562020b7d728 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x562020b7d7b0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x562020b7d838 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x562020b7d8c0 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x562020b7d948 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x562020b7d9d8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x562020b7da98 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x562020b7db20 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x562020b7dba8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x562020b7dc30 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x562020b7dcb8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x562020b7dd40 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x562020b7ddd0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x562020b7de90 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x562020b7df20 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x562020b7e070 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x562020b7dfd8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x562020b7e200 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x562020b7e130 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x562020b7e4b0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x562020b7e2b8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x562020b7e338 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x562020b7e3b8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x562020b7e568 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x562020b7e670 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x562020b7e900 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020b7e650 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x562020b7e630 <col:33> 'int' 0
| |-EnumConstantDecl 0x562020b7e700 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x562020b7e918 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020b7e6e0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x562020b7e6c0 <col:32> 'int' 20
| |-EnumConstantDecl 0x562020b7e790 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x562020b7e930 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020b7e770 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x562020b7e750 <col:38> 'int' 90
| |-EnumConstantDecl 0x562020b7e820 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x562020b7e948 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020b7e800 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x562020b7e7e0 <col:35> 'int' 100
| `-EnumConstantDecl 0x562020b7e8b0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x562020b7e960 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562020b7e890 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x562020b7e870 <col:32> 'int' 2000
|-CXXMethodDecl 0x562020b7e9a0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x562020b7ede0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x562020b7ec50 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x562020b7ecc8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x562020b7eeb0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x562020b7f030 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x562020b7ef60 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x562020b7f238 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x562020b7f0e8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x562020b7f160 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x562020b7f338 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x562020b7f3d8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x562020b7f4a0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x562020b7f530 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x562020b7f760 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020b7f510 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x562020b7f4f0 <col:36> 'int' EnumConstant 0x562020b7f4a0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x562020b7f580 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x562020b7f5d0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x562020b7f620 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x562020b7f670 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x562020b7f6c0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x562020b7f710 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x562020b7f848 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x562020b7f788 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x562020b7f910 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x562020b7f9d0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x562020b7fa90 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x562020b7fb50 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x562020b7fc68 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x562020b7fd30 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x562020b7feb0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x562020b7fde0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x562020b7ffd8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x562020b801d8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x562020b80088 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x562020b80108 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x562020b8db28 <col:54, line:127:5>
|   |-ParenExpr 0x562020b8d9d8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x562020b8d9a8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x562020b8d698 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x562020b8d670 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x562020b8d658 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x562020b8d640 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x562020b8d610 <col:31> 'Router *' lvalue ->_router 0x562020b8b4f0
|   |   |         `-CXXThisExpr 0x562020b8d600 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x562020b8d6f8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562020b8d6d8 <col:48> 'int' 0
|   |   `-CallExpr 0x562020b8d908 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x562020b8d8f0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562020b8d8d0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5620206b64e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562020b8d948 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562020b8d768 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x562020b8d960 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562020b8d788 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x562020b8d978 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562020b8d7c0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x562020b8d990 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562020b8d8b8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562020b8d8a0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562020b8d858 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x562020b8da70 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x562020b8da08 <col:9> 'Router *' lvalue ->_router 0x562020b8b4f0
|   | | `-CXXThisExpr 0x562020b8d9f8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x562020b8da58 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x562020b8da38 <col:19> 'Router *' lvalue ParmVar 0x562020b80088 'r' 'Router *'
|   `-BinaryOperator 0x562020b8db08 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x562020b8daa0 <col:9> 'int' lvalue ->_eindex 0x562020b8b558
|     | `-CXXThisExpr 0x562020b8da90 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x562020b8daf0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x562020b8dad0 <col:19> 'int' lvalue ParmVar 0x562020b80108 'eindex' 'int'
|-CXXMethodDecl 0x562020b80360 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x562020b80298 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x562020b80430 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x562020b804f8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x562020b80598 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x562020b807e8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x562020b80660 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x562020b806e0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x562020b80898 <col:20>
| `-OptimizeNoneAttr 0x562020b808f0 <col:30>
|-CXXMethodDecl 0x562020b809f8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x562020b80930 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x562020b80aa0 <col:20>
| `-OptimizeNoneAttr 0x562020b80af8 <col:30>
|-CXXMethodDecl 0x562020b80bc8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x562020b80b38 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x562020b80c70 <col:20>
| `-OptimizeNoneAttr 0x562020b80cc8 <col:30>
|-CXXMethodDecl 0x562020b80e58 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x562020b80d00 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x562020b80d80 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x562020b80fe8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x562020b80f20 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x562020b81138 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x562020b810a8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x562020b81288 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x562020b811f8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x562020b813d8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x562020b81348 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x562020b81698 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x562020b81490 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x562020b81510 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x562020b815b8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x562020b81770 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x562020b81830 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x562020b81b00 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x562020b819b0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x562020b81a28 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x562020b81c28 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x562020b81e00 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x562020b81ce0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x562020b81d60 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x562020b81fe8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x562020b81ec8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x562020b81f48 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x562020b82358 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x562020b820a8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x562020b82120 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x562020b821a0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x562020b8d110 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x562020b8d0f0 <col:106> 'int' 0
| `-ParmVarDecl 0x562020b82218 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x562020b8d148 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x562020b8d128 <col:126> 'int' 0
|-CXXMethodDecl 0x562020b826f8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x562020b82428 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x562020b824c0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x562020b82540 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x562020b825b8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x562020b8d180 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x562020b8d160 <col:114> 'int' 0
|-CXXMethodDecl 0x562020b82a88 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x562020b827d0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x562020b82848 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x562020b828c8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x562020b8d198 <col:96> 'int' 0
| `-ParmVarDecl 0x562020b82940 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x562020b8d1d8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x562020b8d1b8 <col:116> 'int' 0
|-CXXMethodDecl 0x562020b82e08 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x562020b82b58 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x562020b82bd0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x562020b82c50 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x562020b8d210 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x562020b8d1f0 <col:109> 'int' 0
| `-ParmVarDecl 0x562020b82cc8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x562020b8d248 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x562020b8d228 <col:129> 'int' 0
|-CXXMethodDecl 0x562020b83188 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x562020b82ed8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x562020b82f50 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x562020b82fd0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x562020b83048 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x562020b8d280 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x562020b8d260 <col:117> 'int' 0
|-CXXMethodDecl 0x562020b83518 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x562020b83260 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562020b832d8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x562020b83358 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x562020b8d298 <col:99> 'int' 0
| `-ParmVarDecl 0x562020b833d0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x562020b8d2d8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x562020b8d2b8 <col:119> 'int' 0
|-CXXMethodDecl 0x562020b83938 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x562020b835e8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x562020b83668 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x562020b836e0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x562020b83760 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x562020b8d310 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x562020b8d2f0 <col:108> 'int' 0
| `-ParmVarDecl 0x562020b837e0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x562020b8d348 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x562020b8d328 <col:141> 'int' 0
|-CXXMethodDecl 0x562020b83d58 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x562020b83a10 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x562020b83a90 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x562020b83b08 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x562020b83b88 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x562020b83c08 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x562020b8d360 <col:121> 'int' 0
|-CXXMethodDecl 0x562020b84188 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x562020b83e38 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x562020b83eb8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x562020b83f30 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x562020b83fb0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x562020b8d380 <col:98> 'int' 0
| `-ParmVarDecl 0x562020b84030 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x562020b8d3a0 <col:123> 'int' 0
|-CXXMethodDecl 0x562020b84450 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x562020b84260 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x562020b842e0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x562020b84360 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x562020b8d3c0 <col:80> 'int' 0
|-EnumDecl 0x562020b84508 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x562020b84610 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x562020b848a0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020b845f0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x562020b845d0 <col:42> 'int' 1
| |-EnumConstantDecl 0x562020b846a0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x562020b848b8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020b84680 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x562020b84660 <col:40> 'int' 2
| |-EnumConstantDecl 0x562020b84730 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x562020b848d0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020b84710 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x562020b846f0 <col:44> 'int' 4
| |-EnumConstantDecl 0x562020b847c0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x562020b848e8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020b847a0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x562020b84780 <col:36> 'int' 7
| `-EnumConstantDecl 0x562020b84850 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x562020b84900 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562020b84830 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x562020b84810 <col:34> 'int' 6
|-CXXMethodDecl 0x562020b84bb8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x562020b84928 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x562020b849c8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x562020b84a48 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x562020b84ac0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x562020b8d478 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x562020b8d460 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x562020b8d448 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x562020b8d428 <col:98, col:105> 'String' (CXXTemporary 0x562020b8d428)
|           `-CXXTemporaryObjectExpr 0x562020b8d3f0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x562020b84e58 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x562020b84c88 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x562020b84d00 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x562020b84d78 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x562020b8d528 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x562020b8d510 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x562020b8d4f8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x562020b8d4d8 <col:94, col:101> 'String' (CXXTemporary 0x562020b8d4d8)
| |         `-CXXTemporaryObjectExpr 0x562020b8d4a0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x562020b8dd10 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x562020b8dc88 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x562020b8dc58 <col:9> '<bound member function type>' ->add_task_handlers 0x562020b84bb8
|     | `-CXXThisExpr 0x562020b8dc48 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x562020b8dcc8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x562020b8dbc8 <col:27> 'Task *' lvalue ParmVar 0x562020b84c88 'task' 'Task *'
|     |-ImplicitCastExpr 0x562020b8dce0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x562020b8dbe8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x562020b84d00 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x562020b8dcf8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x562020b8dc08 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x562020b84850 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x562020b8dc28 <col:62> 'const String' lvalue ParmVar 0x562020b84d78 'prefix' 'const String &'
|-CXXMethodDecl 0x562020b85068 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x562020b84f20 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x562020b84f98 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x562020b8d5d8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x562020b8d5c0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x562020b8d5a8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x562020b8d588 <col:70, col:77> 'String' (CXXTemporary 0x562020b8d588)
| |         `-CXXTemporaryObjectExpr 0x562020b8d550 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x562020b8dee8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x562020b8de60 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x562020b8de30 <col:9> '<bound member function type>' ->add_task_handlers 0x562020b84bb8
|     | `-CXXThisExpr 0x562020b8de20 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x562020b8dea0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x562020b8dda0 <col:27> 'Task *' lvalue ParmVar 0x562020b84f20 'task' 'Task *'
|     |-ImplicitCastExpr 0x562020b8deb8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x562020b8ddc0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x562020b8ded0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x562020b8dde0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x562020b84850 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x562020b8de00 <col:57> 'const String' lvalue ParmVar 0x562020b84f98 'prefix' 'const String &'
|-CXXMethodDecl 0x562020b85348 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x562020b85130 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562020b851b0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562020b85228 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x562020b855f8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x562020b85418 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562020b85498 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562020b85518 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x562020b858e8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x562020b856c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562020b85748 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562020b857c0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x562020b85b98 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x562020b859b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562020b85a38 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562020b85ab8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x562020b85e48 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x562020b85c68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562020b85ce8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562020b85d68 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x562020b860f8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x562020b85f18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562020b85f98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562020b86010 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x562020b863a8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x562020b861c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562020b86248 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562020b862c8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x562020b866b8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x562020b864d0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562020b86550 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562020b865d0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x562020b86998 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x562020b86788 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562020b86808 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562020b868b0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x562020b86c78 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x562020b86a68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562020b86ae8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562020b86b90 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x562020b86ee0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x562020b86d48 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x562020b86dc8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x562020b86e40 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x562020b87188 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x562020b86fb0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x562020b87030 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x562020b870a8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x562020b87438 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x562020b87258 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562020b872d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562020b87358 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x562020b876e8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x562020b87508 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562020b87588 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562020b87600 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x562020b87998 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x562020b877b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562020b87838 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562020b878b0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x562020b87c68 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x562020b87a68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562020b87ae8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x562020b87b88 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x562020b87f98 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x562020b87d38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x562020b87db8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x562020b87e30 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x562020b87ea8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x562020b8d5f0 <col:93> 'bool' false
|-CXXMethodDecl 0x562020b88180 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x562020b88068 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x562020b880e8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x562020b88358 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x562020b88240 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x562020b882c0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x562020b88638 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x562020b88418 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x562020b88490 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x562020b88510 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x562020b88588 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x562020b88928 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x562020b88708 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x562020b88780 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x562020b88800 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x562020b88878 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x562020b88b60 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x562020b88a00 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x562020b88a80 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x562020b88d48 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x562020b88c28 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x562020b88ca8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x562020b88df8 prev 0x562020b80598 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x562020b88ef0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x562020b88f80 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x562020b88ff8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x562020b890b8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x562020b89180 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x562020b892f8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x562020b89230 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x562020b893a0 <col:24>
| | `-OptimizeNoneAttr 0x562020b893f8 <col:34>
| |-CXXMethodDecl 0x562020b89440 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x562020b896f8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x562020b894f0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x562020b89568 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x562020b895e8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x562020b897b0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x562020b897e8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x562020b89850 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x562020b898d8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x562020b89bf8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x562020b89990 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x562020b89a08 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x562020b89a80 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x562020b89b00 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x562020b89d10 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x562020b91688 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x562020b91688
| | `-ParmVarDecl 0x562020b91798 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x562020b91838 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x562020b91838
| | `-ParmVarDecl 0x562020b91948 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x562020c6d718 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x562020b89d88 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x562020b89e28 <col:38> "" ""
|-CXXMethodDecl 0x562020b89eb8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x562020b89f58 <col:44> "" ""
|-AccessSpecDecl 0x562020b89fc8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x562020b89ff0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x562020b8a0f0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x562020b8a140 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562020b8a0d0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x562020b8a0b0 <col:27> 'int' 4
|-FieldDecl 0x562020b8a1f8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x562020b8a3a8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x562020b8a460 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x562020b8b4f0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x562020b8b558 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x562020b8b6a8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x562020b8b5e8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x562020b8b858 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x562020b8b768 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x562020b8ba38 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x562020b8b918 <col:20> col:23 'int'
| `-ParmVarDecl 0x562020b8b998 <col:25> col:28 'int'
|-CXXMethodDecl 0x562020b8bce0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x562020b8bb00 <col:23> col:26 'int'
| |-ParmVarDecl 0x562020b8bb80 <col:28> col:31 'int'
| `-ParmVarDecl 0x562020b8bbf8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x562020b8bd98 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x562020b8be60 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x562020b8beb0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x562020b8bf00 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x562020b8c0e0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x562020b8bf90 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x562020b8c008 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x562020b8c388 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x562020b8c1a8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x562020b8c228 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x562020b8c2a0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x562020b8c5a8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x562020b8c458 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x562020b8c4d8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x562020b8c8e0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x562020b8c668 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x562020b8c6e8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x562020b8c760 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x562020b8c7e0 <col:57> col:60 'int'
|-CXXMethodDecl 0x562020b8cac8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x562020b8c9b0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x562020b8ca30 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x562020b8cc18 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x562020b8cb88 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x562020b8cf98 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x562020b8ccd8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x562020b8cd58 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x562020b8cdd0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x562020b8ce50 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x562020b8d0b0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ether
         0 |   uint8_t [6] ether_dhost
         6 |   uint8_t [6] ether_shost
        12 |   uint16_t ether_type
           | [sizeof=14, dsize=14, align=1,
           |  nvsize=14, nvalign=1]

*** Dumping AST Record Layout
         0 | class EnsureEther
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   struct click_ether _ethh
       108 |     uint8_t [6] ether_dhost
       114 |     uint8_t [6] ether_shost
       120 |     uint16_t ether_type
           | [sizeof=128, dsize=122, align=8,
           |  nvsize=122, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562020b947f8 prev 0x562020b42860 <../dummy_inc/clicknet/ether.h:17:1, line:21:1> line:17:8 referenced struct click_ether definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-PackedAttr 0x562020b94bb8 <line:21:18>
|-CXXRecordDecl 0x562020b948f0 <line:17:1, col:8> col:8 implicit struct click_ether
|-FieldDecl 0x562020b94a58 <line:18:5, col:26> col:13 ether_dhost 'uint8_t [6]'
|-FieldDecl 0x562020b94b08 <line:19:5, col:26> col:13 ether_shost 'uint8_t [6]'
|-FieldDecl 0x562020b94b68 <line:20:5, col:14> col:14 ether_type 'uint16_t':'unsigned short'
|-CXXConstructorDecl 0x562020c6d270 <line:17:8> col:8 implicit used click_ether 'void () noexcept' inline default trivial
| `-CompoundStmt 0x562020c6d6a8 <col:8>
|-CXXConstructorDecl 0x562020c6d378 <col:8> col:8 implicit constexpr click_ether 'void (const click_ether &)' inline default trivial noexcept-unevaluated 0x562020c6d378
| `-ParmVarDecl 0x562020c6d488 <col:8> col:8 'const click_ether &'
`-CXXConstructorDecl 0x562020c6d528 <col:8> col:8 implicit constexpr click_ether 'void (click_ether &&)' inline default trivial noexcept-unevaluated 0x562020c6d528
  `-ParmVarDecl 0x562020c6d638 <col:8> col:8 'click_ether &&'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ether = type { [6 x i8], [6 x i8], i16 }
  NonVirtualBaseLLVMType:%struct.click_ether = type { [6 x i8], [6 x i8], i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562020b96e10 <../elements/ethernet/ensureether.hh:37:1, line:55:1> line:37:7 class EnsureEther definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x562020b96f68 <col:1, col:7> col:7 implicit referenced class EnsureEther
|-AccessSpecDecl 0x562020b96ff8 <col:38, col:44> col:38 public
|-CXXConstructorDecl 0x562020b97080 <line:39:3, col:15> col:3 EnsureEther 'void ()'
|-CXXDestructorDecl 0x562020b97170 <line:40:3, col:16> col:3 ~EnsureEther 'void ()' noexcept-unevaluated 0x562020b97170
| `-Overrides: [ 0x562020b7c0e8 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x562020b972a0 <line:42:3, col:58> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x562020b7d548 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x562020b97f98 <col:34, col:58>
|   `-ReturnStmt 0x562020b97f88 <col:36, col:43>
|     `-ImplicitCastExpr 0x562020b97f70 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x562020b97f48 <col:43> 'const char [12]' lvalue "EnsureEther"
|-CXXMethodDecl 0x562020b97368 <line:43:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x562020b7d610 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x562020b97ff8 <col:34, col:54>
|   `-ReturnStmt 0x562020b97fe8 <col:36, col:43>
|     `-ImplicitCastExpr 0x562020b97fd0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x562020b97fb0 <col:43> 'const char []' lvalue Var 0x562020b7d8c0 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x562020b97640 <line:45:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x562020b7ede0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x562020b974f0 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x562020b97568 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x562020b97790 <line:47:3, col:28> col:11 smaction 'Packet *(Packet *)'
| `-ParmVarDecl 0x562020b97700 <col:20, col:27> col:28 'Packet *'
|-CXXMethodDecl 0x562020b97960 <line:48:3, col:26> col:8 push 'void (int, Packet *)'
| |-Overrides: [ 0x562020b7c3b8 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x562020b97850 <col:13> col:16 'int'
| `-ParmVarDecl 0x562020b978c8 <col:18, col:25> col:26 'Packet *'
|-CXXMethodDecl 0x562020b97ab8 <line:49:3, col:19> col:11 pull 'Packet *(int)'
| |-Overrides: [ 0x562020b7c548 Element::pull 'Packet *(int)' ]
| `-ParmVarDecl 0x562020b97a28 <col:16> col:19 'int'
|-AccessSpecDecl 0x562020b97b60 <line:51:2, col:9> col:2 private
|-FieldDecl 0x562020b97b98 <line:53:3, col:15> col:15 _ethh 'click_ether'
|-CXXConstructorDecl 0x562020b97c18 <line:37:7> col:7 implicit EnsureEther 'void (const EnsureEther &)' inline default_delete noexcept-unevaluated 0x562020b97c18
| `-ParmVarDecl 0x562020b97d28 <col:7> col:7 'const EnsureEther &'
`-CXXMethodDecl 0x562020b97dc8 <col:7> col:7 implicit operator= 'EnsureEther &(const EnsureEther &)' inline default_delete noexcept-unevaluated 0x562020b97dc8
  `-ParmVarDecl 0x562020b97ed8 <col:7> col:7 'const EnsureEther &'

Layout: <CGRecordLayout
  LLVMType:%class.EnsureEther = type { %class.Element.base, %struct.click_ether, [6 x i8] }
  NonVirtualBaseLLVMType:%class.EnsureEther.base = type { %class.Element.base, %struct.click_ether }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56202094fcb0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x56202094fdc8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x56202094fe68 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x56202094fec8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x56202094ff28 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x56202094ffd8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5620209502e0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5620209503f8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x5620209504a0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x562020950508 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x562020950598 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x562020956630 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x562020956a68 <col:12>
|-CXXConstructorDecl 0x562020956738 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x562020956848 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5620209504a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x562020958ff0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x562020958fc0 <col:12> 'const char *const' lvalue .data 0x5620209504a0
| |     `-DeclRefExpr 0x562020958fa0 <col:12> 'const String::rep_t' lvalue ParmVar 0x562020956848 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x562020950508 'length' 'int'
| | `-ImplicitCastExpr 0x562020959080 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x562020959050 <col:12> 'const int' lvalue .length 0x562020950508
| |     `-DeclRefExpr 0x562020959030 <col:12> 'const String::rep_t' lvalue ParmVar 0x562020956848 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x562020950598 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x562020959110 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5620209590e0 <col:12> 'String::memo_t *const' lvalue .memo 0x562020950598
| |     `-DeclRefExpr 0x5620209590c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x562020956848 '' 'const String::rep_t &'
| `-CompoundStmt 0x562020959168 <col:12>
|-CXXConstructorDecl 0x5620209568e8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5620209568e8
| `-ParmVarDecl 0x5620209569f8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x56202095bf50 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x562020967968 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x562020967a78 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x562020967f90 <col:12>
|   |-BinaryOperator 0x562020967da8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x562020967d60 <col:12> 'const char *' lvalue ->data 0x5620209504a0
|   | | `-CXXThisExpr 0x562020967d50 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x562020967d90 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x562020967d20 <col:12> 'const char *const' lvalue .data 0x5620209504a0
|   |     `-DeclRefExpr 0x562020967d00 <col:12> 'const String::rep_t' lvalue ParmVar 0x562020967a78 '' 'const String::rep_t &'
|   |-BinaryOperator 0x562020967e70 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x562020967e28 <col:12> 'int' lvalue ->length 0x562020950508
|   | | `-CXXThisExpr 0x562020967e18 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x562020967e58 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x562020967de8 <col:12> 'const int' lvalue .length 0x562020950508
|   |     `-DeclRefExpr 0x562020967dc8 <col:12> 'const String::rep_t' lvalue ParmVar 0x562020967a78 '' 'const String::rep_t &'
|   |-BinaryOperator 0x562020967f38 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x562020967ef0 <col:12> 'String::memo_t *' lvalue ->memo 0x562020950598
|   | | `-CXXThisExpr 0x562020967ee0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x562020967f20 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x562020967eb0 <col:12> 'String::memo_t *const' lvalue .memo 0x562020950598
|   |     `-DeclRefExpr 0x562020967e90 <col:12> 'const String::rep_t' lvalue ParmVar 0x562020967a78 '' 'const String::rep_t &'
|   `-ReturnStmt 0x562020967f80 <col:12>
|     `-UnaryOperator 0x562020967f68 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x562020967f58 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x562020967ae8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x562020967ae8
  `-ParmVarDecl 0x562020967bf8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562020947220 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x562020947338 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x5620209473c8 <col:16, col:22> col:16 public
|-TypedefDecl 0x562020947408 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x56202061adc0 'const char *'
|   `-QualType 0x56202061a311 'const char' const
|     `-BuiltinType 0x56202061a310 'char'
|-TypedefDecl 0x562020947490 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x562020947460 'String::const_iterator' sugar
|   |-Typedef 0x562020947408 'const_iterator'
|   `-PointerType 0x56202061adc0 'const char *'
|     `-QualType 0x56202061a311 'const char' const
|       `-BuiltinType 0x56202061a310 'char'
|-TypedefDecl 0x562020947600 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x562020947570 'int (String::*)() const'
|   |-RecordType 0x5620209472b0 'String'
|   | `-CXXRecord 0x562020947220 'String'
|   `-ParenType 0x562020947510 'int () const' sugar
|     `-FunctionProtoType 0x56202091b0a0 'int () const' const cdecl
|       `-BuiltinType 0x56202061a370 'int'
|-TypedefDecl 0x562020947668 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x56202076fc80 'int64_t' sugar
|   |-Typedef 0x5620206832d0 'int64_t'
|   `-TypedefType 0x56202065c4d0 '__int64_t' sugar
|     |-Typedef 0x56202065c0a8 '__int64_t'
|     `-BuiltinType 0x56202061a390 'long'
|-TypedefDecl 0x5620209476d0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x56202076fba0 'uint64_t' sugar
|   |-Typedef 0x562020683470 'uint64_t'
|   `-TypedefType 0x56202065c560 '__uint64_t' sugar
|     |-Typedef 0x56202065c118 '__uint64_t'
|     `-BuiltinType 0x56202061a430 'unsigned long'
|-TypedefDecl 0x562020947760 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x562020947730 'String::intmax_t' sugar
|   |-Typedef 0x562020947668 'intmax_t'
|   `-TypedefType 0x56202076fc80 'int64_t' sugar
|     |-Typedef 0x5620206832d0 'int64_t'
|     `-TypedefType 0x56202065c4d0 '__int64_t' sugar
|       |-Typedef 0x56202065c0a8 '__int64_t'
|       `-BuiltinType 0x56202061a390 'long'
|-TypedefDecl 0x5620209477f0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x5620209477c0 'String::uintmax_t' sugar
|   |-Typedef 0x5620209476d0 'uintmax_t'
|   `-TypedefType 0x56202076fba0 'uint64_t' sugar
|     |-Typedef 0x562020683470 'uint64_t'
|     `-TypedefType 0x56202065c560 '__uint64_t' sugar
|       |-Typedef 0x56202065c118 '__uint64_t'
|       `-BuiltinType 0x56202061a430 'unsigned long'
|-CXXConstructorDecl 0x5620209478b0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x562020947a58 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x562020947998 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x562020947c08 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x562020947b48 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x562020947d60 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x562020947cd0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x562020947f78 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x562020947e28 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x562020947ea8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x562020948198 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x562020948048 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5620209480c8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x5620209483b8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x562020948268 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x5620209482e8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x5620209485d8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x562020948488 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x562020948508 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x562020948768 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x5620209486a0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x5620209488e8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x562020948828 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x562020948a78 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5620209489b0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x562020948bd0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x562020948b40 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x562020948d28 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x562020948c98 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x562020948e80 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x562020948df0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x562020949008 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x562020948f48 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x562020949198 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x5620209490d0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x562020949328 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x562020949260 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x5620209494b8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x5620209493f0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x5620209495b0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x5620209496d8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x562020949858 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x562020949790 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x5620209499a8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x562020949918 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x562020949a60 <col:63> "" ""
|-CXXMethodDecl 0x562020949ba8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x562020949ae8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x562020949db8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x562020949c68 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x562020949ce8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x562020949fd8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x562020949e80 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x562020949f00 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x56202094a2b8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x56202094a098 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x56202094a118 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x562020956100 <col:55> 'int' 10
| `-ParmVarDecl 0x56202094a190 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x562020956120 <col:76> 'bool' true
|-CXXMethodDecl 0x56202094a598 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x56202094a380 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x56202094a400 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x562020956130 <col:56> 'int' 10
| `-ParmVarDecl 0x56202094a478 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x562020956150 <col:77> 'bool' true
|-CXXMethodDecl 0x56202094a6a0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x56202094a768 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x56202094a830 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x56202094a8d0 <col:20>
| `-OptimizeNoneAttr 0x56202094a928 <col:30>
|-CXXConversionDecl 0x56202094aa18 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x56202094aae8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x56202094aba8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x56202094ac98 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x56202094ad58 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x56202094aed8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x56202094ae10 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x56202094b028 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x56202094af98 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x56202094b118 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x56202094b1d8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x56202094b428 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x56202094b290 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x56202094b310 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x56202094b688 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x56202094b4f0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x56202094b570 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x56202094b758 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x56202094b968 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x56202094b810 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x56202094b890 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x56202094bb88 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x56202094ba30 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x56202094bab0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x56202094bd18 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x56202094bc50 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x56202094be08 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x56202094bf78 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x56202094beb8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x56202094c188 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x56202094c038 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x56202094c0b8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x56202094c3a0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x56202094c248 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x56202094c2c0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x56202094c530 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x56202094c460 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x56202094c750 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x56202094c5f0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x56202094c670 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x56202094c8a0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x56202094c810 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x56202094ca78 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x56202094c960 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x56202094c9e0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x56202094cbc8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x56202094cb38 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x56202094cde0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x56202094cc80 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x56202094cd00 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x562020956160 <col:39> 'int' 0
|-CXXMethodDecl 0x56202094d000 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x56202094cea0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x56202094cf20 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x562020956180 <col:48> 'int' 0
|-CXXMethodDecl 0x56202094d1e0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x56202094d0c0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x56202094d140 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x5620209561a0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x56202094d2b0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x56202094d370 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x56202094d430 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x56202094d4f0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x56202094d5b0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x56202094d758 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x56202094d660 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x56202094d8d8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x56202094d810 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x56202094dab0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x56202094d998 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x56202094dc28 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x56202094db68 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x56202094dd70 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x56202094dce0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x56202094dec0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x56202094de30 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x56202094e098 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x56202094df80 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x56202094e000 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x56202094e278 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x56202094e160 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x56202094e1e0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x56202094e3c8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x56202094e338 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x56202094e5d8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x56202094e488 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x56202094e508 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x56202094e738 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x56202094e6a0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x56202094e890 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x56202094e7f8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x56202094e938 <col:57> "" ""
|-CXXMethodDecl 0x56202094ea48 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x56202094e9b8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x56202094eb98 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x56202094eb08 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x56202094ed18 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x56202094ec50 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x56202094ede0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x56202094eea0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x56202094ef60 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x56202094f000 <col:49> "" ""
|-CXXMethodDecl 0x56202094f090 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x56202094f150 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x56202094f240 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x56202094f308 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x56202094f3c8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x56202094f488 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x56202094f580 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x56202094f648 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x56202094f710 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x56202094f8e8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x56202094f7c8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x56202094f848 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x56202094fb10 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x56202094f9b0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x56202094fa30 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x56202094fc20 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x56202094fc88 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x56202094fcb0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x56202094fdc8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x56202094fe68 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x56202094fec8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x56202094ff28 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x56202094ffd8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x562020950040 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x562020950278 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x5620209502c8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562020950258 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x562020950168 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x562020950110 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x562020950150 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x562020950130 <col:32> 'int' 8
|-CXXRecordDecl 0x5620209502e0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5620209503f8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x5620209504a0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x562020950508 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x562020950598 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x562020956630 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x562020956a68 <col:12>
| |-CXXConstructorDecl 0x562020956738 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x562020956848 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5620209504a0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x562020958ff0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x562020958fc0 <col:12> 'const char *const' lvalue .data 0x5620209504a0
| | |     `-DeclRefExpr 0x562020958fa0 <col:12> 'const String::rep_t' lvalue ParmVar 0x562020956848 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x562020950508 'length' 'int'
| | | `-ImplicitCastExpr 0x562020959080 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x562020959050 <col:12> 'const int' lvalue .length 0x562020950508
| | |     `-DeclRefExpr 0x562020959030 <col:12> 'const String::rep_t' lvalue ParmVar 0x562020956848 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x562020950598 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x562020959110 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5620209590e0 <col:12> 'String::memo_t *const' lvalue .memo 0x562020950598
| | |     `-DeclRefExpr 0x5620209590c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x562020956848 '' 'const String::rep_t &'
| | `-CompoundStmt 0x562020959168 <col:12>
| |-CXXConstructorDecl 0x5620209568e8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5620209568e8
| | `-ParmVarDecl 0x5620209569f8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x56202095bf50 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x562020967968 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x562020967a78 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x562020967f90 <col:12>
| |   |-BinaryOperator 0x562020967da8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x562020967d60 <col:12> 'const char *' lvalue ->data 0x5620209504a0
| |   | | `-CXXThisExpr 0x562020967d50 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x562020967d90 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x562020967d20 <col:12> 'const char *const' lvalue .data 0x5620209504a0
| |   |     `-DeclRefExpr 0x562020967d00 <col:12> 'const String::rep_t' lvalue ParmVar 0x562020967a78 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x562020967e70 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x562020967e28 <col:12> 'int' lvalue ->length 0x562020950508
| |   | | `-CXXThisExpr 0x562020967e18 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x562020967e58 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x562020967de8 <col:12> 'const int' lvalue .length 0x562020950508
| |   |     `-DeclRefExpr 0x562020967dc8 <col:12> 'const String::rep_t' lvalue ParmVar 0x562020967a78 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x562020967f38 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x562020967ef0 <col:12> 'String::memo_t *' lvalue ->memo 0x562020950598
| |   | | `-CXXThisExpr 0x562020967ee0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x562020967f20 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x562020967eb0 <col:12> 'String::memo_t *const' lvalue .memo 0x562020950598
| |   |     `-DeclRefExpr 0x562020967e90 <col:12> 'const String::rep_t' lvalue ParmVar 0x562020967a78 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x562020967f80 <col:12>
| |     `-UnaryOperator 0x562020967f68 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x562020967f58 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x562020967ae8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x562020967ae8
|   `-ParmVarDecl 0x562020967bf8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x562020950610 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x562020950858 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x562020950678 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x5620209506f8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x562020950770 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5620209565f0 <col:79, line:261:5>
|   |-BinaryOperator 0x562020956268 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x562020956200 <col:2, col:5> 'const char *' lvalue .data 0x5620209504a0
|   | | `-MemberExpr 0x5620209561d0 <col:2> 'String::rep_t' lvalue ->_r 0x562020950610
|   | |   `-CXXThisExpr 0x5620209561c0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x562020956250 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x562020956230 <col:12> 'const char *' lvalue ParmVar 0x562020950678 'data' 'const char *'
|   |-BinaryOperator 0x562020956330 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x5620209562c8 <col:2, col:5> 'int' lvalue .length 0x562020950508
|   | | `-MemberExpr 0x562020956298 <col:2> 'String::rep_t' lvalue ->_r 0x562020950610
|   | |   `-CXXThisExpr 0x562020956288 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x562020956318 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5620209562f8 <col:14> 'int' lvalue ParmVar 0x5620209506f8 'length' 'int'
|   `-IfStmt 0x5620209565d8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x562020956450 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x562020956438 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x562020956418 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5620209563f8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x562020956390 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x562020950598
|     |       | `-MemberExpr 0x562020956360 <col:7> 'String::rep_t' lvalue ->_r 0x562020950610
|     |       |   `-CXXThisExpr 0x562020956350 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5620209563e0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5620209563c0 <col:17> 'String::memo_t *' lvalue ParmVar 0x562020950770 'memo' 'String::memo_t *'
|     `-CallExpr 0x5620209565b0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x562020956598 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5620209564a0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x56202093f288 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x562020956508 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x56202094fe68
|         `-ImplicitCastExpr 0x5620209564f0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5620209564d0 <col:27> 'String::memo_t *' lvalue ParmVar 0x562020950770 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x562020950b08 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x562020950928 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x5620209509a8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x562020950a20 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x562020950610 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x562020956a78 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x562020956c08 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x562020956b70 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x562020956ae0 <col:2> '<bound member function type>' ->assign_memo 0x562020950858
|     | `-ImplicitCastExpr 0x562020956ba8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x562020956ad0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x562020956bc0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x562020956b10 <col:14> 'const char *' lvalue ParmVar 0x562020950928 'data' 'const char *'
|     |-ImplicitCastExpr 0x562020956bd8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x562020956b30 <col:20> 'int' lvalue ParmVar 0x5620209509a8 'length' 'int'
|     `-ImplicitCastExpr 0x562020956bf0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x562020956b50 <col:28> 'String::memo_t *' lvalue ParmVar 0x562020950a20 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x562020950c98 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x562020950bd8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x562020956e60 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x562020956de0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x562020956c30 <col:2> '<bound member function type>' ->assign_memo 0x562020950858
|     | `-CXXThisExpr 0x562020956c20 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x562020956e18 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x562020956cb0 <col:14, col:19> 'const char *' lvalue .data 0x5620209504a0
|     |   `-MemberExpr 0x562020956c80 <col:14, col:16> 'String::rep_t' lvalue ._r 0x562020950610
|     |     `-DeclRefExpr 0x562020956c60 <col:14> 'const String' lvalue ParmVar 0x562020950bd8 'x' 'const String &'
|     |-ImplicitCastExpr 0x562020956e30 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x562020956d30 <col:25, col:30> 'int' lvalue .length 0x562020950508
|     |   `-MemberExpr 0x562020956d00 <col:25, col:27> 'String::rep_t' lvalue ._r 0x562020950610
|     |     `-DeclRefExpr 0x562020956ce0 <col:25> 'const String' lvalue ParmVar 0x562020950bd8 'x' 'const String &'
|     `-ImplicitCastExpr 0x562020956e48 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x562020956db0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x562020950598
|         `-MemberExpr 0x562020956d80 <col:38, col:40> 'String::rep_t' lvalue ._r 0x562020950610
|           `-DeclRefExpr 0x562020956d60 <col:38> 'const String' lvalue ParmVar 0x562020950bd8 'x' 'const String &'
|-CXXMethodDecl 0x562020950d60 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x562020957820 <col:31, line:278:5>
|   `-IfStmt 0x562020957808 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x562020956f00 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x562020956ee8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x562020956eb8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x562020950598
|     |     `-MemberExpr 0x562020956e88 <col:6> 'String::rep_t' lvalue ->_r 0x562020950610
|     |       `-CXXThisExpr 0x562020956e78 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x5620209577e0 <col:15, line:277:2>
|       |-ParenExpr 0x5620209573b0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x562020957380 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x562020957010 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x562020956ff8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x562020956fe0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x562020956fa0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x56202094fe68
|       |   |       `-ImplicitCastExpr 0x562020956f88 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x562020956f58 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x562020950598
|       |   |           `-MemberExpr 0x562020956f28 <col:27> 'String::rep_t' lvalue ->_r 0x562020950610
|       |   |             `-CXXThisExpr 0x562020956f18 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x562020957070 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x562020957050 <col:54> 'int' 0
|       |   `-CallExpr 0x5620209572e0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x5620209572c8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x562020957248 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5620206b64e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x562020957320 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x562020957158 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x562020957338 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x562020957188 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x562020957350 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5620209571c0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x562020957368 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x562020957230 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x562020957218 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5620209571e0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x562020957700 <line:274:6, line:275:22>
|       | |-CallExpr 0x5620209575c0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x5620209575a8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x562020957520 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x5620209406d0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5620209574f0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x56202094fe68
|       | |   `-ImplicitCastExpr 0x5620209574d8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x5620209574a8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x562020950598
|       | |       `-MemberExpr 0x562020957478 <col:40> 'String::rep_t' lvalue ->_r 0x562020950610
|       | |         `-CXXThisExpr 0x562020957468 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x5620209576c0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x5620209576a8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5620209575e8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x562020955540 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x5620209576e8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x562020957648 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x562020950598
|       |       `-MemberExpr 0x562020957618 <col:15> 'String::rep_t' lvalue ->_r 0x562020950610
|       |         `-CXXThisExpr 0x562020957608 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x5620209577c0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x562020957758 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x562020950598
|         | `-MemberExpr 0x562020957728 <col:6> 'String::rep_t' lvalue ->_r 0x562020950610
|         |   `-CXXThisExpr 0x562020957718 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x5620209577a8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x562020957788 <col:16> 'int' 0
|-CXXMethodDecl 0x562020950ff8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x562020950e18 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x562020950e98 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x562020950f10 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x5620209510d0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x562020951320 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x562020951188 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x562020951208 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x562020951280 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x562020951508 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x5620209513f0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x562020951470 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x562020951608 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x5620209578f8 <col:41, line:286:5>
|   `-ReturnStmt 0x5620209578e8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x5620209578b8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x562020957880 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x562020957868 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x562020957848 <col:46> 'int' 1
|-CXXMethodDecl 0x5620209518a8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x5620209516c0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x562020951740 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x5620209517c0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x562020955540 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x562020951970 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x562020955610 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x5620209557e0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x5620209556c8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x562020955748 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x5620209558a0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x562020955968 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x562020955a68 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x562020955ae0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x562020955b58 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x562020955bc0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x562020955cc0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x562020955d10 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562020955ca0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x562020955c80 <col:22> 'int' 14
|-CXXMethodDecl 0x562020955f28 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x562020955d40 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x562020955dc0 <col:38> col:41 'int'
| `-ParmVarDecl 0x562020955e40 <col:43> col:46 'int'
|-FriendDecl 0x562020956030 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x5620209560c0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x562020bd9350 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x562020bd9528 prev 0x562020bd9350 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x562020bd95b8 <col:46, col:52> col:46 public
|-TypedefDecl 0x562020bd95e0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56202061a370 'int'
|-TypedefDecl 0x562020bdaf60 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x562020bdaf10 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x562020bdaef0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x562020bd97f8 'type'
|     `-SubstTemplateTypeParmType 0x562020bd97c0 'String' sugar
|       |-TemplateTypeParmType 0x56202090aac0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56202090aa70 'T'
|       `-RecordType 0x5620209472b0 'String'
|         `-CXXRecord 0x562020947220 'String'
|-TypedefDecl 0x562020bdb018 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x562020bdafe0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x562020bdafc0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x562020bdaf60 'type'
|     `-ElaboratedType 0x562020bdaf10 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x562020bdaef0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x562020bd97f8 'type'
|         `-SubstTemplateTypeParmType 0x562020bd97c0 'String' sugar
|           |-TemplateTypeParmType 0x56202090aac0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x56202090aa70 'T'
|           `-RecordType 0x5620209472b0 'String'
|             `-CXXRecord 0x562020947220 'String'
|-CXXMethodDecl 0x562020bdb198 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x562020bdb0a8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x562020bdb288 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x562020bdb368 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x562020bdb368
|-CXXMethodDecl 0x562020bdb638 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x562020bdb540 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x562020bdb878 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x562020bdb6f0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x562020bdb768 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x562020bdba48 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x562020bdb938 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x562020bdb9b0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x562020bdbba8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x562020bdbc78 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x562020bdbec8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x562020bdbd38 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x562020bdbdb0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x562020bdc128 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x562020bdbf98 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x562020bdc010 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x562020bdc2e8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x562020bdc1f8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x562020bdc4a8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x562020bdc3b0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x562020bdc560 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x562020bdc610 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x562020bdc848 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x562020bdc6c0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x562020bdc738 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x562020bdcae8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x562020bdc9f0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x562020bdcbb0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x562020bdcc00 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x562020bdcc50 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x562020b7ea50 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x562020bd7db8 prev 0x562020b7ea50 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x562020bd92c0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x562020bd9270 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x562020bd9250 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x562020bd9100 'type'
|     `-SubstTemplateTypeParmType 0x562020bd8f90 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x5620208e0870 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x5620208e0818 'F'
|       `-RecordType 0x562020bd8bf0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x562020bd8b10 'typed_array_memory'
|-FieldDecl 0x562020bdcca0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x562020bdccf0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x562020bdcd28 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x562020bd7e50 'String' sugar
|   |-TemplateTypeParmType 0x562020917de0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x562020917d88 'T'
|   `-RecordType 0x5620209472b0 'String'
|     `-CXXRecord 0x562020947220 'String'
|-TypedefDecl 0x562020bdcdb8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x562020bdcd80 'String &'
|   `-SubstTemplateTypeParmType 0x562020bd7e50 'String' sugar
|     |-TemplateTypeParmType 0x562020917de0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x562020917d88 'T'
|     `-RecordType 0x5620209472b0 'String'
|       `-CXXRecord 0x562020947220 'String'
|-TypedefDecl 0x562020bdce48 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x562020bdce10 'const String &'
|   `-QualType 0x562020bd7e51 'const String' const
|     `-SubstTemplateTypeParmType 0x562020bd7e50 'String' sugar
|       |-TemplateTypeParmType 0x562020917de0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562020917d88 'T'
|       `-RecordType 0x5620209472b0 'String'
|         `-CXXRecord 0x562020947220 'String'
|-TypedefDecl 0x562020bdced8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x562020bdcea0 'String *'
|   `-SubstTemplateTypeParmType 0x562020bd7e50 'String' sugar
|     |-TemplateTypeParmType 0x562020917de0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x562020917d88 'T'
|     `-RecordType 0x5620209472b0 'String'
|       `-CXXRecord 0x562020947220 'String'
|-TypedefDecl 0x562020bdcf68 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x562020bdcf30 'const String *'
|   `-QualType 0x562020bd7e51 'const String' const
|     `-SubstTemplateTypeParmType 0x562020bd7e50 'String' sugar
|       |-TemplateTypeParmType 0x562020917de0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562020917d88 'T'
|       `-RecordType 0x5620209472b0 'String'
|         `-CXXRecord 0x562020947220 'String'
|-TypedefDecl 0x562020bddbc0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x562020bddb70 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x562020bddb50 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x562020bdda88 'type'
|     `-LValueReferenceType 0x562020bdda50 'const String &'
|       `-QualType 0x562020bdd7f1 'const String' const
|         `-SubstTemplateTypeParmType 0x562020bdd7f0 'String' sugar
|           |-TemplateTypeParmType 0x5620208ea7c0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5620208ea768 'T'
|           `-RecordType 0x5620209472b0 'String'
|             `-CXXRecord 0x562020947220 'String'
|-TypedefDecl 0x562020bddc28 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x562020bdce10 'const String &'
|   `-QualType 0x562020bd7e51 'const String' const
|     `-SubstTemplateTypeParmType 0x562020bd7e50 'String' sugar
|       |-TemplateTypeParmType 0x562020917de0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562020917d88 'T'
|       `-RecordType 0x5620209472b0 'String'
|         `-CXXRecord 0x562020947220 'String'
|-TypedefDecl 0x562020bddc80 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56202061a370 'int'
|-TypedefDecl 0x562020bddce8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x562020bdcea0 'String *'
|   `-SubstTemplateTypeParmType 0x562020bd7e50 'String' sugar
|     |-TemplateTypeParmType 0x562020917de0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x562020917d88 'T'
|     `-RecordType 0x5620209472b0 'String'
|       `-CXXRecord 0x562020947220 'String'
|-TypedefDecl 0x562020bddd50 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x562020bdcf30 'const String *'
|   `-QualType 0x562020bd7e51 'const String' const
|     `-SubstTemplateTypeParmType 0x562020bd7e50 'String' sugar
|       |-TemplateTypeParmType 0x562020917de0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562020917d88 'T'
|       `-RecordType 0x5620209472b0 'String'
|         `-CXXRecord 0x562020947220 'String'
|-EnumDecl 0x562020bddda8 <line:134:5> col:5
| `-EnumConstantDecl 0x562020bddea0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x562020bdde80 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x562020919468 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x562020919440 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x562020919420 <col:40> 'int' 1
|-CXXConstructorDecl 0x562020bddf28 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x562020bde1b8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x562020bddfe0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x562020bde080 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x562020bde448 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x562020bde330 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x562020bde708 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x562020bde5f0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x562020bdea20 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x562020bde900 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x562020bded30 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x562020bdec10 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x562020bdf020 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x562020bdee68 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x562020bdeee0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x562020bdf148 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x562020bdf1f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x562020bdf250 <col:30> Inherited
|-CXXMethodDecl 0x562020bdf298 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x562020bdf348 <col:20> Inherited
| `-OptimizeNoneAttr 0x562020bdf3a0 <col:30> Inherited
|-CXXMethodDecl 0x562020bdf468 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x562020bdf518 <col:20> Inherited
| `-OptimizeNoneAttr 0x562020bdf570 <col:30> Inherited
|-CXXMethodDecl 0x562020bdf5b8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x562020bdf668 <col:20> Inherited
| `-OptimizeNoneAttr 0x562020bdf6c0 <col:30> Inherited
|-CXXMethodDecl 0x562020bdf708 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x562020bdf7b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x562020bdf810 <col:30> Inherited
|-CXXMethodDecl 0x562020bdf858 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x562020bdf908 <col:20> Inherited
| `-OptimizeNoneAttr 0x562020bdf960 <col:30> Inherited
|-CXXMethodDecl 0x562020bdf988 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x562020bdfa38 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x562020bdfae8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x562020bdfca8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x562020bdfb98 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x562020bdfc10 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x562020bdfdf8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x562020bdfd68 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x562020bdffa8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x562020bdfeb0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x562020be0060 <col:20>
| `-OptimizeNoneAttr 0x562020be00b8 <col:30>
|-CXXMethodDecl 0x562020be01d8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x562020be00e0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x562020be0290 <col:20>
| `-OptimizeNoneAttr 0x562020be02e8 <col:30>
|-CXXMethodDecl 0x562020be03a0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x562020be0310 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x562020be04e8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x562020be0458 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x562020be0618 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x562020be0718 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x562020be07e8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x562020be08b8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x562020be09f8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x562020be0968 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x562020be0b40 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x562020be0ab0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x562020be0c88 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x562020be0bf8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x562020be0d40 <col:48> Inherited "" ""
|-CXXMethodDecl 0x562020be0e40 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x562020be0db0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x562020be0ef8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x562020be0fb8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x562020be10b8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x562020be1238 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x562020be1178 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x562020be19f8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x562020be12f0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x562020be1958 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x562020be1858 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x562020be1ad8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x562020be1cc0 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x562020be1b98 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x562020be1d78 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x562020be1fc8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x562020be1e38 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x562020be1eb0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x562020be2158 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x562020be2098 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x562020be2368 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x562020be2220 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x562020be2298 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x562020be2428 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x562020be2688 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x562020be2590 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x562020be2758 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x562020be2758

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562020c5c7b8 prev 0x562020bed6e8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x562020c5c8b0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x562020c5c940 <col:22, col:28> col:22 public
|-EnumDecl 0x562020c5c968 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x562020c5ca88 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x562020c5ca68 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x562020c5ca50 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x562020c5ca30 <col:14> 'int' 999
| |-EnumConstantDecl 0x562020c5cb30 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x562020c5cb10 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x562020c5caf8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x562020c5cad8 <col:14> 'int' 1
| |-EnumConstantDecl 0x562020c5cbc0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x562020c5cba0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x562020c5cb80 <col:17> 'int' 0
| |-EnumConstantDecl 0x562020c5cc50 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x562020c5cc30 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x562020c5cc10 <col:13> 'int' 1
| |-EnumConstantDecl 0x562020c5cce0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x562020c5ccc0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x562020c5cca0 <col:16> 'int' 2
| |-EnumConstantDecl 0x562020c5cd70 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x562020c5cd50 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x562020c5cd30 <col:13> 'int' 3
| |-EnumConstantDecl 0x562020c5ce00 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x562020c5cde0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x562020c5cdc0 <col:15> 'int' 4
| |-EnumConstantDecl 0x562020c5ce90 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x562020c5ce70 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x562020c5ce50 <col:14> 'int' 5
| |-EnumConstantDecl 0x562020c5cf20 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x562020c5cf00 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x562020c5cee0 <col:12> 'int' 6
| `-EnumConstantDecl 0x562020c5cfb0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x562020c5cf90 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x562020c5cf70 <col:13> 'int' 7
|-VarDecl 0x562020c5d020 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x562020c5d0a8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x562020c5d130 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x562020c5d1b8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x562020c5d240 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x562020c5d2c8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x562020c5d350 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x562020c5d3d8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x562020c5d460 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x562020c5d4e8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x562020c5d570 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x562020c5d670 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x562020c62998 '_nerrors' 'int'
| | `-IntegerLiteral 0x562020c63128 <line:128:13> 'int' 0
| `-CompoundStmt 0x562020c63198 <col:16, line:129:5>
|-CXXDestructorDecl 0x562020c5d760 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x562020c631a8 <col:29, line:132:5>
|-CXXMethodDecl 0x562020c5d918 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x562020c5d850 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x562020c5d9e0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x562020c5dac8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x562020c63200 <col:44, line:161:5>
|   `-ReturnStmt 0x562020c631f0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x562020c631d8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x562020c631b8 <col:9> 'ErrorHandler *' lvalue Var 0x562020c629f8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x562020c5dc08 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x562020c5db78 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x562020c5dcd0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x562020c63260 <col:43, line:173:5>
|   `-ReturnStmt 0x562020c63250 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x562020c63238 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x562020c63218 <col:9> 'ErrorHandler *' lvalue Var 0x562020c62a70 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x562020c5dd88 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x562020c5de08 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x562020c5df18 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x562020c5de88 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x562020c5e068 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x562020c5dfd8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x562020c5e1c0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x562020c5e128 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x562020c5e318 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x562020c5e280 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x562020c5e470 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x562020c5e3d8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x562020c5e680 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x562020c5e528 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x562020c5e5a8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x562020c5e858 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x562020c5e740 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x562020c5e7c0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x562020c5ea78 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x562020c5e918 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x562020c5e998 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x562020c5ec58 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x562020c5eb38 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x562020c5ebb8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x562020c5ee38 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x562020c5ed18 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x562020c5ed98 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x562020c5efc0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x562020c5eef8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x562020c5f190 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x562020c5f078 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x562020c5f0f0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x562020c634b8 <col:57, line:234:5>
|   `-ReturnStmt 0x562020c634a8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x562020c63490 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x562020c63438 <col:9, col:41> 'int'
|         |-MemberExpr 0x562020c63408 <col:9> '<bound member function type>' ->xmessage 0x562020c5efc0
|         | `-CXXThisExpr 0x562020c633f8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x562020c63478 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x562020c63460 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x562020c633d8 <col:18, col:40> 'String' (CXXTemporary 0x562020c633d8)
|               `-CallExpr 0x562020c633a0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x562020c63388 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x562020c63300 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x562020c611c8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x562020c63320 <col:31> 'const String' lvalue ParmVar 0x562020c5f0f0 'str' 'const String &'
|                 `-DeclRefExpr 0x562020c63340 <col:36> 'const String' lvalue ParmVar 0x562020c5f078 'anno' 'const String &'
|-CXXMethodDecl 0x562020c5f470 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x562020c5f250 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x562020c5f2d0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x562020c5f348 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x562020c63748 <col:68, line:243:5>
|   `-ReturnStmt 0x562020c63738 <line:242:2, col:41>
|     `-ExprWithCleanups 0x562020c63720 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x562020c636c0 <col:9, col:41> 'int'
|         |-MemberExpr 0x562020c63690 <col:9> '<bound member function type>' ->xmessage 0x562020c5f190
|         | `-CXXThisExpr 0x562020c63680 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x562020c63558 <col:18> 'const String' lvalue ParmVar 0x562020c5f250 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x562020c63708 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x562020c636f0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x562020c63660 <col:24, col:40> 'String' (CXXTemporary 0x562020c63660)
|               `-CXXMemberCallExpr 0x562020c635f8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x562020c63588 <col:24> '<bound member function type>' ->vformat 0x562020c60690
|                 | `-CXXThisExpr 0x562020c63578 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x562020c63628 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x562020c635b8 <col:32> 'const char *' lvalue ParmVar 0x562020c5f2d0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x562020c63640 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x562020c635d8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x562020c5f348 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x562020c5f710 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x562020c5f538 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x562020c5f5b0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x562020c5f628 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x562020c63a88 <col:23, line:254:5>
|   `-ReturnStmt 0x562020c63a78 <line:253:2, col:71>
|     `-ExprWithCleanups 0x562020c63a60 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x562020c63a00 <col:9, col:71> 'int'
|         |-MemberExpr 0x562020c639d0 <col:9> '<bound member function type>' ->xmessage 0x562020c5f190
|         | `-CXXThisExpr 0x562020c639c0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x562020c63a48 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x562020c63a30 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x562020c63980 <col:18, col:65> 'String' (CXXTemporary 0x562020c63980)
|         |     `-CallExpr 0x562020c63918 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x562020c63900 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x562020c637e8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x562020c611c8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x562020c63808 <col:31> 'const String' lvalue ParmVar 0x562020c5f5b0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x562020c63960 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x562020c63948 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x562020c638e0 <col:37, col:64> 'String' (CXXTemporary 0x562020c638e0)
|         |             `-CallExpr 0x562020c638b0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x562020c63898 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x562020c63828 <col:37> 'String (const String &)' lvalue CXXMethod 0x562020c61818 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x562020c63848 <col:56> 'const String' lvalue ParmVar 0x562020c5f538 'landmark' 'const String &'
|         `-DeclRefExpr 0x562020c639a0 <col:68> 'const String' lvalue ParmVar 0x562020c5f628 'str' 'const String &'
|-CXXMethodDecl 0x562020c5fa90 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x562020c5f7d8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x562020c5f850 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x562020c5f8d0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x562020c5f948 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x562020c63d40 <col:34, line:267:5>
|   `-ReturnStmt 0x562020c63d30 <line:266:2, col:51>
|     `-ExprWithCleanups 0x562020c63d18 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x562020c63cb0 <col:9, col:51> 'int'
|         |-MemberExpr 0x562020c63c80 <col:9> '<bound member function type>' ->xmessage 0x562020c5f710
|         | `-CXXThisExpr 0x562020c63c70 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x562020c63b28 <col:18> 'const String' lvalue ParmVar 0x562020c5f7d8 'landmark' 'const String &'
|         |-DeclRefExpr 0x562020c63b48 <col:28> 'const String' lvalue ParmVar 0x562020c5f850 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x562020c63d00 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x562020c63ce8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x562020c63c50 <col:34, col:50> 'String' (CXXTemporary 0x562020c63c50)
|               `-CXXMemberCallExpr 0x562020c63be8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x562020c63b78 <col:34> '<bound member function type>' ->vformat 0x562020c60690
|                 | `-CXXThisExpr 0x562020c63b68 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x562020c63c18 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x562020c63ba8 <col:42> 'const char *' lvalue ParmVar 0x562020c5f8d0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x562020c63c30 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x562020c63bc8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x562020c5f948 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x562020c5fba0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x562020c63dc0 <col:25, line:288:5>
|   `-ReturnStmt 0x562020c63db0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x562020c63d98 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x562020c63d68 <col:9> 'const int' lvalue ->_nerrors 0x562020c62998
|         `-CXXThisExpr 0x562020c63d58 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x562020c5fdb0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x562020c5fc58 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x562020c5fcd8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x562020c600d0 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x562020c5fe78 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x562020c5fef8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x562020c5ff70 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x562020c60270 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x562020c601a0 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x562020c604b8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x562020c60330 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x562020c603a8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x562020c64020 <col:58, line:357:5>
|   `-ReturnStmt 0x562020c64010 <line:356:2, col:29>
|     `-ExprWithCleanups 0x562020c63ff8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x562020c63fc8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x562020c63fb0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x562020c63f90 <col:9, col:29> 'String' (CXXTemporary 0x562020c63f90)
|             `-CallExpr 0x562020c63f20 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x562020c63f08 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x562020c63e88 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x562020c600d0 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x562020c63e28 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x562020c63f58 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x562020c63e48 <col:21> 'const char *' lvalue ParmVar 0x562020c60330 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x562020c63f70 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x562020c63e68 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x562020c603a8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x562020c60690 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x562020c60580 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x562020c605f8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x562020c607e8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x562020c60758 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x562020c60930 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x562020c608a0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x562020c60bd0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x562020c609e8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x562020c60a68 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x562020c60ae0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x562020c60d30 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x562020c60ca0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x562020c64138 <col:37, line:441:5>
|   `-IfStmt 0x562020c64120 <line:439:2, line:440:8>
|     |-BinaryOperator 0x562020c640a8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x562020c64078 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x562020c64038 <col:6> 'int' lvalue ParmVar 0x562020c60ca0 'level' 'int'
|     | `-ImplicitCastExpr 0x562020c64090 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x562020c64058 <col:15> 'ErrorHandler::Level' EnumConstant 0x562020c5cd70 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x562020c64108 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x562020c640d8 <col:8> 'int' lvalue ->_nerrors 0x562020c62998
|         `-CXXThisExpr 0x562020c640c8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x562020c60df8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x562020c641d0 <col:26, line:448:5>
|   `-BinaryOperator 0x562020c641b0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x562020c64160 <col:2> 'int' lvalue ->_nerrors 0x562020c62998
|     | `-CXXThisExpr 0x562020c64150 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x562020c64190 <col:13> 'int' 0
|-CXXMethodDecl 0x562020c60fc0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x562020c60eb0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x562020c60f28 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x562020c611c8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x562020c61080 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x562020c610f8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x562020c61478 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x562020c61288 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x562020c61308 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x562020c61388 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x562020c61530 <col:59> 0 0
|-CXXMethodDecl 0x562020c616c8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x562020c615a8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x562020c61628 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x562020c64840 <col:70, line:534:5>
|   |-DeclStmt 0x562020c64340 <line:528:2, col:20>
|   | |-VarDecl 0x562020c641f8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x562020c64260 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x562020c64298 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x562020c64300 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x562020c64410 <line:529:2, col:23>
|   | `-VarDecl 0x562020c64370 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x562020c643f8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x562020c643d8 <col:18> 'const char *' lvalue ParmVar 0x562020c615a8 'begin' 'const char *'
|   |-DoStmt 0x562020c647d8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x562020c64708 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x562020c646f0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x562020c646d0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x562020c64428 <col:6> 'const char *' lvalue Var 0x562020c64370 'x' 'const char *'
|   | |     `-CallExpr 0x562020c64620 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x562020c64608 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x562020c645c0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x562020c62e70 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x562020c64688 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x562020c64670 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x562020c644e0 <col:20, col:27> 'String' (CXXTemporary 0x562020c644e0)
|   | |       |     `-CXXTemporaryObjectExpr 0x562020c644a8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x562020c646a0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x562020c64500 <col:30> 'const char *' lvalue Var 0x562020c64370 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x562020c646b8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x562020c64520 <col:33> 'const char *' lvalue ParmVar 0x562020c61628 'end' 'const char *'
|   | |       |-UnaryOperator 0x562020c64560 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x562020c64540 <col:39> 'String' lvalue Var 0x562020c641f8 'name' 'String'
|   | |       |-UnaryOperator 0x562020c64598 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x562020c64578 <col:46> 'String' lvalue Var 0x562020c64298 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x562020c645b0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x562020c647c0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x562020c647a8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x562020c64788 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x562020c64758 <col:11> '<bound member function type>' .operator int (String::*)() const 0x56202094aa18
|   |         `-ImplicitCastExpr 0x562020c64740 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x562020c64720 <col:11> 'String' lvalue Var 0x562020c641f8 'name' 'String'
|   `-ReturnStmt 0x562020c64830 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x562020c64818 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x562020c647f8 <col:9> 'const char *' lvalue Var 0x562020c64370 'x' 'const char *'
|-CXXMethodDecl 0x562020c61818 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x562020c61788 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x562020c64e48 <col:55, line:550:5>
|   `-IfStmt 0x562020c64e20 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x562020c64a80 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x562020c64a68 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x562020c64a50 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x562020c64a30 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x562020c64a00 <col:6> '<bound member function type>' .operator int (String::*)() const 0x56202094aa18
|     | |       `-DeclRefExpr 0x562020c648a0 <col:6> 'const String' lvalue ParmVar 0x562020c61788 'x' 'const String &'
|     | `-BinaryOperator 0x562020c649e0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x562020c649b0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x562020c64960 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x562020c64948 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x562020c64900 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x562020964250 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x562020c648c0 <col:11> 'const String' lvalue ParmVar 0x562020c61788 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x562020c648e0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x562020c649c8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x562020c64998 <col:19> 'char' 123
|     |-ReturnStmt 0x562020c64af0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x562020c64ac0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x562020c64aa0 <col:13> 'const String' lvalue ParmVar 0x562020c61788 'x' 'const String &'
|     `-IfStmt 0x562020c64df8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x562020c64b88 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x562020c64b70 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x562020c64b50 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x562020c64b20 <col:11> '<bound member function type>' .operator int (String::*)() const 0x56202094aa18
|       |       `-DeclRefExpr 0x562020c64b00 <col:11> 'const String' lvalue ParmVar 0x562020c61788 'x' 'const String &'
|       |-ReturnStmt 0x562020c64d10 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x562020c64cf8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x562020c64cc8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x562020c64cb0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x562020c64c90 <col:13, col:29> 'String' (CXXTemporary 0x562020c64c90)
|       |         `-CallExpr 0x562020c64c40 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x562020c64c28 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x562020c64ba0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x562020c60fc0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x562020c64c70 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x562020c64bc0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x562020c64be0 <col:28> 'const String' lvalue ParmVar 0x562020c61788 'x' 'const String &'
|       `-ReturnStmt 0x562020c64de8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x562020c64dd0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x562020c64da0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x562020c64d88 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x562020c64d68 <col:13, col:20> 'String' (CXXTemporary 0x562020c64d68)
|                 `-CXXTemporaryObjectExpr 0x562020c64d30 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x562020c619e0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x562020c618d0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x562020c61948 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x562020c63118 <col:71> 'bool' false
|-CXXRecordDecl 0x562020c61a90 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x562020c61d88 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x562020c61d20 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x562020c61cc0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x562020c61c80 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x5620209472b0 'String'
|       | `-CXXRecord 0x562020947220 'String'
|       |-BuiltinType 0x56202061a370 'int'
|       `-DecayedType 0x562020bee730 '__va_list_tag *' sugar
|         |-TypedefType 0x562020bee700 'va_list' sugar
|         | |-Typedef 0x562020838360 'va_list'
|         | `-TypedefType 0x562020838310 '__gnuc_va_list' sugar
|         |   |-Typedef 0x56202076ff38 '__gnuc_va_list'
|         |   `-TypedefType 0x56202076fea0 '__builtin_va_list' sugar
|         |     |-Typedef 0x56202065bbd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x56202065bb80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x56202061b0c0 '__va_list_tag'
|         |         `-CXXRecord 0x56202061b028 '__va_list_tag'
|         `-PointerType 0x56202083dc00 '__va_list_tag *'
|           `-RecordType 0x56202061b0c0 '__va_list_tag'
|             `-CXXRecord 0x56202061b028 '__va_list_tag'
|-EnumDecl 0x562020c61de0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x562020c61ee0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562020c62440 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020c61ec0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x562020c61ea0 <col:16> 'int' 1
| |-EnumConstantDecl 0x562020c61f70 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562020c62458 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020c61f50 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x562020c61f30 <col:21> 'int' 2
| |-EnumConstantDecl 0x562020c62000 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562020c62470 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020c61fe0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x562020c61fc0 <col:22> 'int' 4
| |-EnumConstantDecl 0x562020c62090 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562020c62488 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020c62070 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x562020c62050 <col:17> 'int' 8
| |-EnumConstantDecl 0x562020c62120 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562020c624a0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020c62100 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x562020c620e0 <col:22> 'int' 16
| |-EnumConstantDecl 0x562020c621b0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562020c624b8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020c62190 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x562020c62170 <col:19> 'int' 32
| |-EnumConstantDecl 0x562020c62240 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562020c624d0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020c62220 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x562020c62200 <col:17> 'int' 64
| |-EnumConstantDecl 0x562020c622d0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562020c624e8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020c622b0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x562020c62290 <col:14> 'int' 128
| |-EnumConstantDecl 0x562020c62360 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x562020c62500 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020c62340 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x562020c62320 <col:16> 'int' 256
| `-EnumConstantDecl 0x562020c623f0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x562020c62518 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562020c623d0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x562020c623b0 <col:12> 'int' 1024
|-CXXMethodDecl 0x562020c62728 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x562020c62540 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x562020c625e0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x562020c628b0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x562020c627e8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x562020c62958 <line:580:3, col:10> col:3 private
|-FieldDecl 0x562020c62998 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x562020c629f8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x562020c62a70 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x562020c62e70 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x562020c62ae8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x562020c62b68 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x562020c62be8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x562020c62c60 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x562020c62cd8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x562020c62d50 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x562020c62f98 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x562020c62f98
| `-ParmVarDecl 0x562020c630a8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x562020c651a8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x562020c651a8
  `-ParmVarDecl 0x562020c652b8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562020bed778 prev 0x562020ba12c8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x562020bed870 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x562020bed900 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x562020beda38 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x562020bed938 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x562020beee60 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x562020beee40 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x562020bee9d8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x562020beeef0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x562020beeeb0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x562020bed938 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x562020beea40 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x562020beef70 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x562020beef30 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x562020beeaa0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x562020beefb0 <col:54> 'bool' false
| `-CompoundStmt 0x562020bef0b8 <col:61, line:38:5>
|   `-BinaryOperator 0x562020bef098 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x562020bef030 <col:9> 'const Element *' lvalue ->_context 0x562020bee978
|     | `-CXXThisExpr 0x562020bef020 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x562020bef080 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x562020bef060 <col:20> 'int' 0
|-CXXConstructorDecl 0x562020bedc48 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x562020bedaf8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x562020bedb70 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x562020beee98 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x562020beee78 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x562020bee978 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x562020bef110 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x562020bef0d0 <col:20> 'const Element *' lvalue ParmVar 0x562020bedaf8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x562020bee9d8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x562020bef190 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x562020bef150 <col:36> 'ErrorHandler *' lvalue ParmVar 0x562020bedb70 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x562020beea40 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x562020bef210 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x562020bef1d0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x562020beeaa0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x562020bef250 <col:73> 'bool' false
| `-CompoundStmt 0x562020bef2c8 <col:80, line:46:5>
|-CXXMethodDecl 0x562020bedd78 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x562020bef340 <col:36, line:51:5>
|   `-ReturnStmt 0x562020bef330 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x562020bef318 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x562020bef2e8 <col:16> 'const Element *const' lvalue ->_context 0x562020bee978
|         `-CXXThisExpr 0x562020bef2d8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x562020bede68 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x562020bef3c0 <col:32, line:57:5>
|   `-ReturnStmt 0x562020bef3b0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x562020bef398 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x562020bef368 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x562020bee9d8
|         `-CXXThisExpr 0x562020bef358 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x562020bedf28 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x562020bee0b0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x562020bedfe0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x562020bee200 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x562020bee170 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x562020bee350 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x562020bee2c0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x562020bee558 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x562020bee408 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x562020bee480 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x562020bee888 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x562020bee618 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x562020bee698 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x562020bee760 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x562020bee940 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x562020bee978 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x562020bee9d8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x562020beea40 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x562020beeaa0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x562020beeaf0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x562020beeaf0
| `-ParmVarDecl 0x562020beec08 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x562020beeca8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x562020beeca8
| `-ParmVarDecl 0x562020beedb8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x562020c6e7c8 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x562020c14e60 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x562020c15038 prev 0x562020c14e60 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x562020c150c8 <col:46, col:52> col:46 public
|-TypedefDecl 0x562020c150f0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56202061a370 'int'
|-TypedefDecl 0x562020c220f0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x562020c220a0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x562020c155a0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x562020c154a0 'type'
|     `-TemplateSpecializationType 0x562020c15430 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x562020c15310 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x562020c152f0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x562020c152d0 <col:24> 'unsigned long' 4
|       `-RecordType 0x562020c15410 'char_array<4>'
|         `-ClassTemplateSpecialization 0x562020c15330 'char_array'
|-TypedefDecl 0x562020c221a8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x562020c22170 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x562020c22150 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x562020c220f0 'type'
|     `-ElaboratedType 0x562020c220a0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x562020c155a0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x562020c154a0 'type'
|         `-TemplateSpecializationType 0x562020c15430 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x562020c15310 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x562020c152f0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x562020c152d0 <col:24> 'unsigned long' 4
|           `-RecordType 0x562020c15410 'char_array<4>'
|             `-ClassTemplateSpecialization 0x562020c15330 'char_array'
|-CXXMethodDecl 0x562020c22328 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x562020c22238 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x562020c22418 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x562020c224f8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x562020c227c8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x562020c226d0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x562020c22a08 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x562020c22880 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x562020c228f8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x562020c22bd8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x562020c22ac8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x562020c22b40 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x562020c22d38 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x562020c22e08 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x562020c23058 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x562020c22ec8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x562020c22f40 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x562020c232b8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x562020c23128 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x562020c231a0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x562020c23478 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x562020c23388 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x562020c23638 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x562020c23540 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x562020c236f0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x562020c237a0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x562020c239d8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x562020c23850 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x562020c238c8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x562020c23c78 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x562020c23b80 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x562020c23d40 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x562020c23d90 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x562020c23de0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x562020c13868 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x562020c13a78 prev 0x562020c13868 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x562020c14dd0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x562020c14d80 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x562020c14d60 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x562020c14c10 'type'
|     `-SubstTemplateTypeParmType 0x562020c14a30 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x5620208e00f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5620208e0098 'T'
|       `-RecordType 0x562020c14580 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x562020c14498 'sized_array_memory'
|-FieldDecl 0x562020c23e30 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x562020c23e80 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x562020c23eb8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x562020c13b10 'int' sugar
|   |-TemplateTypeParmType 0x562020917de0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x562020917d88 'T'
|   `-BuiltinType 0x56202061a370 'int'
|-TypedefDecl 0x562020c23f48 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x562020c23f10 'int &'
|   `-SubstTemplateTypeParmType 0x562020c13b10 'int' sugar
|     |-TemplateTypeParmType 0x562020917de0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x562020917d88 'T'
|     `-BuiltinType 0x56202061a370 'int'
|-TypedefDecl 0x562020c24008 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x562020c23fd0 'const int &'
|   `-QualType 0x562020c13b11 'const int' const
|     `-SubstTemplateTypeParmType 0x562020c13b10 'int' sugar
|       |-TemplateTypeParmType 0x562020917de0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562020917d88 'T'
|       `-BuiltinType 0x56202061a370 'int'
|-TypedefDecl 0x562020c24098 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x562020c24060 'int *'
|   `-SubstTemplateTypeParmType 0x562020c13b10 'int' sugar
|     |-TemplateTypeParmType 0x562020917de0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x562020917d88 'T'
|     `-BuiltinType 0x56202061a370 'int'
|-TypedefDecl 0x562020c24128 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x562020c240f0 'const int *'
|   `-QualType 0x562020c13b11 'const int' const
|     `-SubstTemplateTypeParmType 0x562020c13b10 'int' sugar
|       |-TemplateTypeParmType 0x562020917de0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562020917d88 'T'
|       `-BuiltinType 0x56202061a370 'int'
|-TypedefDecl 0x562020c24d10 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x562020c24cc0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x562020c24ca0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x562020c24c30 'type'
|     `-SubstTemplateTypeParmType 0x562020c249f0 'int' sugar
|       |-TemplateTypeParmType 0x5620208eaef0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5620208eaea0 'T'
|       `-BuiltinType 0x56202061a370 'int'
|-TypedefDecl 0x562020c24d78 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x562020c23fd0 'const int &'
|   `-QualType 0x562020c13b11 'const int' const
|     `-SubstTemplateTypeParmType 0x562020c13b10 'int' sugar
|       |-TemplateTypeParmType 0x562020917de0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562020917d88 'T'
|       `-BuiltinType 0x56202061a370 'int'
|-TypedefDecl 0x562020c24dd0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56202061a370 'int'
|-TypedefDecl 0x562020c24e38 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x562020c24060 'int *'
|   `-SubstTemplateTypeParmType 0x562020c13b10 'int' sugar
|     |-TemplateTypeParmType 0x562020917de0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x562020917d88 'T'
|     `-BuiltinType 0x56202061a370 'int'
|-TypedefDecl 0x562020c24ea0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x562020c240f0 'const int *'
|   `-QualType 0x562020c13b11 'const int' const
|     `-SubstTemplateTypeParmType 0x562020c13b10 'int' sugar
|       |-TemplateTypeParmType 0x562020917de0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x562020917d88 'T'
|       `-BuiltinType 0x56202061a370 'int'
|-EnumDecl 0x562020c24ef8 <line:134:5> col:5
| `-EnumConstantDecl 0x562020c24ff0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x562020c24fd0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x562020919468 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x562020919440 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x562020919420 <col:40> 'int' 1
|-CXXConstructorDecl 0x562020c25078 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x562020c252c8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x562020c25130 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x562020c251d0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x562020c25588 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x562020c25470 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x562020c25848 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x562020c25730 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x562020c25b90 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x562020c25a70 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x562020c25ea0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x562020c25d80 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x562020c26190 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x562020c25fd8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x562020c26050 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x562020c262b8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x562020c26398 <col:20> Inherited
| `-OptimizeNoneAttr 0x562020c263f0 <col:30> Inherited
|-CXXMethodDecl 0x562020c26438 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x562020c264e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x562020c26540 <col:30> Inherited
|-CXXMethodDecl 0x562020c26608 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x562020c266b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x562020c26710 <col:30> Inherited
|-CXXMethodDecl 0x562020c26758 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x562020c26808 <col:20> Inherited
| `-OptimizeNoneAttr 0x562020c26860 <col:30> Inherited
|-CXXMethodDecl 0x562020c268a8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x562020c26958 <col:20> Inherited
| `-OptimizeNoneAttr 0x562020c269b0 <col:30> Inherited
|-CXXMethodDecl 0x562020c269f8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x562020c26aa8 <col:20> Inherited
| `-OptimizeNoneAttr 0x562020c26b00 <col:30> Inherited
|-CXXMethodDecl 0x562020c26b28 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x562020c26bd8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x562020c26c88 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x562020c26e48 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x562020c26d38 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x562020c26db0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x562020c26f98 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x562020c26f08 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x562020c27148 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x562020c27050 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x562020c27200 <col:20>
| `-OptimizeNoneAttr 0x562020c27258 <col:30>
|-CXXMethodDecl 0x562020c27378 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x562020c27280 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x562020c27430 <col:20>
| `-OptimizeNoneAttr 0x562020c27488 <col:30>
|-CXXMethodDecl 0x562020c27540 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x562020c274b0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x562020c27688 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x562020c275f8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x562020c277b8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x562020c278e8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x562020c279b8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x562020c27a88 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x562020c27bc8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x562020c27b38 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x562020c27d10 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x562020c27c80 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x562020c27e58 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x562020c27dc8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x562020c27f10 <col:48> Inherited "" ""
|-CXXMethodDecl 0x562020c28010 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x562020c27f80 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x562020c280c8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x562020c28188 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x562020c28288 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x562020c28408 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x562020c28348 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x562020c28bc8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x562020c284c0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x562020c28b28 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x562020c28a28 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x562020c28ca8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x562020c28df8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x562020c28d68 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x562020c28eb0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x562020c290f8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x562020c28f70 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x562020c28fe8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x562020c292b8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x562020c291c8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x562020c29508 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x562020c29380 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x562020c293f8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x562020c295c8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x562020c29828 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x562020c29730 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x562020c2a8f0 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562020c119d8 prev 0x562020bf75a0 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x562020c11ad0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x562020c11bc0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x562020c3b2f0 <col:16, line:828:9>
|-CXXDestructorDecl 0x562020c11cb0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x562020c3b300 <col:25, line:830:9>
|-CXXMethodDecl 0x562020c11db0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x562020c11e60 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x562020c11f08 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x562020c11f08
| `-ParmVarDecl 0x562020c12018 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x562020c127d8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x562020c127d8
  `-ParmVarDecl 0x562020c128e8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562020bf73d8 prev 0x562020ba1358 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x562020bf7510 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x562020bf75a0 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x562020bf7650 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x562020bf7758 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x562020bf7688 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x562020c2bea8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x562020c2be88 <col:31> 'int' 0
|-CXXConstructorDecl 0x562020bf7a78 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x562020bf78f0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x562020bf7968 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x562020c2bee0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x562020c2bec0 <col:59> 'int' 0
|-CXXConstructorDecl 0x562020bf7c50 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x562020bf7b40 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x562020bf7bb8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x562020c2bf18 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x562020c2bef8 <col:55> 'int' 0
|-CXXConstructorDecl 0x562020bf8008 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x562020bf7df0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x562020bf7e68 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x562020bf7ee0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x562020c2bf50 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x562020c2bf30 <col:31> 'int' 0
|-CXXConstructorDecl 0x562020bf81c8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x562020bf8108 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x562020bf82c0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x562020bf8478 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x562020bf83b0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x562020bf8568 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x562020c2c300 <col:24, line:291:5>
|   `-ReturnStmt 0x562020c2c2f0 <line:290:9, col:79>
|     `-BinaryOperator 0x562020c2c2d0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x562020c2c1a8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x562020c2c100 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x562020c2c0e0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x562020c2bfd8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x562020c2bfc0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x562020c2bfa8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x562020c2bf78 <col:18> 'Vector<String> *const' lvalue ->_conf 0x562020c13800
|       | |   |       `-CXXThisExpr 0x562020c2bf68 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x562020c2c0c8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x562020c2c0b0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x562020c2c078 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x562020c2c048 <col:28, col:35> '<bound member function type>' ->size 0x562020bdf988
|       | |           `-ImplicitCastExpr 0x562020c2c098 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x562020c2c030 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x562020c2c000 <col:28> 'Vector<String> *const' lvalue ->_conf 0x562020c13800
|       | |                 `-CXXThisExpr 0x562020c2bff0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x562020c2c190 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x562020c2c178 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x562020c2c160 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x562020c2c130 <col:47> 'Args::Slot *const' lvalue ->_slots 0x562020c2aa30
|       |         `-CXXThisExpr 0x562020c2c120 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x562020c2c2b0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x562020c2c298 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x562020c2c280 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x562020c2c240 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x562020c2c228 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x562020c2c1d8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x562020c2aae0
|         |     |   `-CXXThisExpr 0x562020c2c1c8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x562020c2c208 <col:73> 'int' 0
|         `-IntegerLiteral 0x562020c2c260 <col:79> 'int' 0
|-CXXMethodDecl 0x562020bf8628 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x562020c2c4d8 <col:32, line:296:5>
|   `-ReturnStmt 0x562020c2c4c8 <line:295:9, col:49>
|     `-BinaryOperator 0x562020c2c4a8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x562020c2c388 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x562020c2c370 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x562020c2c358 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x562020c2c328 <col:17> 'Args::Slot *const' lvalue ->_slots 0x562020c2aa30
|       |       `-CXXThisExpr 0x562020c2c318 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x562020c2c488 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x562020c2c470 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x562020c2c458 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x562020c2c418 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x562020c2c400 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x562020c2c3b0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x562020c2aae0
|         |     |   `-CXXThisExpr 0x562020c2c3a0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x562020c2c3e0 <col:43> 'int' 0
|         `-IntegerLiteral 0x562020c2c438 <col:49> 'int' 0
|-CXXMethodDecl 0x562020bf8718 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x562020c2c6e8 <col:19, line:306:5>
|   |-IfStmt 0x562020c2c608 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x562020c2c548 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x562020c2c530 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x562020c2c500 <col:13> 'Vector<String> *' lvalue ->_conf 0x562020c13800
|   | |     `-CXXThisExpr 0x562020c2c4f0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x562020c2c5e8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x562020c2c5b8 <col:13, col:20> '<bound member function type>' ->clear 0x562020be2428
|   |     `-ImplicitCastExpr 0x562020c2c5a0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x562020c2c570 <col:13> 'Vector<String> *' lvalue ->_conf 0x562020c13800
|   |         `-CXXThisExpr 0x562020c2c560 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x562020c2c690 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x562020c2c660 <col:9, col:16> '<bound member function type>' .clear 0x562020c295c8
|   |   `-MemberExpr 0x562020c2c630 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x562020c2a9d0
|   |     `-CXXThisExpr 0x562020c2c620 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x562020c2c6d8 <line:305:9, col:17>
|     `-UnaryOperator 0x562020c2c6c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x562020c2c6b0 <col:17> 'Args *' this
|-CXXMethodDecl 0x562020bf8998 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x562020bf88a0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x562020bf8b18 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x562020bf8a50 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x562020bf8e98 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x562020bf8bc0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x562020bf8df8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x562020bf8c68 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x562020bf8ce0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x562020c2ca10 <col:67, line:327:5>
|     |-WhileStmt 0x562020c2c9c0 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x562020c2c7d8 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x562020c2c750 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x562020ba0cf0 0x562020b399c8 0x562020982fa8 0x562020982c80 0x562020974460 0x562020974110 0x562020973a00 0x562020946370 0x5620208d2830
|     | | |-DeclRefExpr 0x562020c2c710 <col:16> 'Iter' lvalue ParmVar 0x562020bf8c68 'begin' 'Iter'
|     | | `-DeclRefExpr 0x562020c2c730 <col:25> 'Iter' lvalue ParmVar 0x562020bf8ce0 'end' 'Iter'
|     | `-CompoundStmt 0x562020c2c9a0 <col:30, line:325:9>
|     |   |-CallExpr 0x562020c2c940 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x562020c2c820 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x562020c2c910 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x562020c2c8a0 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562020b3eb48 0x562020b3e768 0x562020b3e398 0x562020b3dfb8 0x562020b3dbd8 0x562020b3d808
|     |   |   `-DeclRefExpr 0x562020c2c880 <col:24> 'Iter' lvalue ParmVar 0x562020bf8c68 'begin' 'Iter'
|     |   `-UnaryOperator 0x562020c2c988 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x562020c2c968 <col:15> 'Iter' lvalue ParmVar 0x562020bf8c68 'begin' 'Iter'
|     `-ReturnStmt 0x562020c2ca00 <line:326:9, col:17>
|       `-UnaryOperator 0x562020c2c9e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562020c2c9d8 <col:17> 'Args *' this
|-CXXMethodDecl 0x562020bf8fa0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x562020bf8f10 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x562020bf90e8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x562020bf9058 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x562020bf91b0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x562020c2caf0 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x562020c2ca90 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x562020c2ca40 <col:9> '<bound member function type>' ->reset_from 0x562020c2ae58
|   | | `-CXXThisExpr 0x562020c2ca30 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x562020c2ca70 <col:20> 'int' 0
|   `-ReturnStmt 0x562020c2cae0 <line:352:9, col:17>
|     `-UnaryOperator 0x562020c2cac8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x562020c2cab8 <col:17> 'Args *' this
|-VarDecl 0x562020bf9268 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x562020bf92d0 <col:38> 'int' 1
|-VarDecl 0x562020bf9360 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x562020bf93c8 <col:39> 'int' 2
|-VarDecl 0x562020bf9458 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x562020bf94c0 <col:39> 'int' 4
|-VarDecl 0x562020bf9550 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x562020bf95b8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x562020bf9938 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x562020bf9630 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x562020bf9898 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x562020bf96e0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020bf9788 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x562020c2cc48 <col:43, line:371:5>
|     `-ReturnStmt 0x562020c2cc38 <line:370:9, col:34>
|       `-CallExpr 0x562020c2cc00 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562020c2cb20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562020c2cba0 <col:21> 'const char *' lvalue ParmVar 0x562020bf96e0 'keyword' 'const char *'
|         |-IntegerLiteral 0x562020c2cbc0 <col:30> 'int' 0
|         `-DeclRefExpr 0x562020c2cbe0 <col:33> 'T' lvalue ParmVar 0x562020bf9788 'x' 'T &'
|-FunctionTemplateDecl 0x562020bf9c68 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x562020bf99a0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x562020bf9bc8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x562020bf9a50 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020bf9af8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x562020c2cd98 <col:45, line:375:5>
|     `-ReturnStmt 0x562020c2cd88 <line:374:9, col:42>
|       `-CallExpr 0x562020c2cd50 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562020c2cc70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562020c2ccf0 <col:21> 'const char *' lvalue ParmVar 0x562020bf9a50 'keyword' 'const char *'
|         |-DeclRefExpr 0x562020c2cd10 <col:30> 'const int' lvalue Var 0x562020bf9268 'mandatory' 'const int'
|         `-DeclRefExpr 0x562020c2cd30 <col:41> 'T' lvalue ParmVar 0x562020bf9af8 'x' 'T &'
|-FunctionTemplateDecl 0x562020bf9f98 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x562020bf9cd0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x562020bf9ef8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x562020bf9d80 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x562020bf9e28 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x562020c2cee8 <col:45, line:379:5>
| |   `-ReturnStmt 0x562020c2ced8 <line:378:9, col:43>
| |     `-CallExpr 0x562020c2cea0 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x562020c2cdc0 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x562020c2ce40 <col:21> 'const char *' lvalue ParmVar 0x562020bf9d80 'keyword' 'const char *'
| |       |-DeclRefExpr 0x562020c2ce60 <col:30> 'const int' lvalue Var 0x562020bf9360 'positional' 'const int'
| |       `-DeclRefExpr 0x562020c2ce80 <col:42> 'T' lvalue ParmVar 0x562020bf9e28 'x' 'T &'
| `-CXXMethodDecl 0x562020c6ec48 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, unsigned int &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x562020c6ea60 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x562020c6eb38 <col:39, col:42> col:42 x 'unsigned int &'
|-FunctionTemplateDecl 0x562020bfa2c8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x562020bfa000 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x562020bfa228 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x562020bfa0b0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020bfa158 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x562020c2d0e8 <col:46, line:383:5>
|     `-ReturnStmt 0x562020c2d0d8 <line:382:9, col:55>
|       `-CallExpr 0x562020c2d0a0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562020c2cf10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562020c2cf90 <col:21> 'const char *' lvalue ParmVar 0x562020bfa0b0 'keyword' 'const char *'
|         |-BinaryOperator 0x562020c2d060 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x562020c2d010 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x562020c2cff0 <col:30> 'const int' lvalue Var 0x562020bf9268 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x562020c2d048 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x562020c2d028 <col:42> 'const int' lvalue Var 0x562020bf9360 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x562020c2d080 <col:54> 'T' lvalue ParmVar 0x562020bfa158 'x' 'T &'
|-FunctionTemplateDecl 0x562020bfa6c8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x562020bfa330 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x562020bfa628 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x562020bfa3e0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020bfa460 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x562020bfa508 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x562020c2d228 <col:54, line:388:5>
|     |-CallExpr 0x562020c2d1b0 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x562020c2d100 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x562020c2d140 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x562020c2d150 <col:30> 'const char *' lvalue ParmVar 0x562020bfa3e0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x562020c2d170 <col:39> 'int' lvalue ParmVar 0x562020bfa460 'flags' 'int'
|     | `-DeclRefExpr 0x562020c2d190 <col:46> 'T' lvalue ParmVar 0x562020bfa508 'x' 'T &'
|     `-ReturnStmt 0x562020c2d218 <line:387:9, col:17>
|       `-UnaryOperator 0x562020c2d200 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562020c2d1f0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562020bfab78 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x562020bfa738 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x562020bfa7b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x562020bfaad8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x562020bfa878 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020bfa918 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x562020bfa9b8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x562020c2d398 <col:74, line:403:5>
|     `-ReturnStmt 0x562020c2d388 <line:402:9, col:56>
|       `-CallExpr 0x562020c2d348 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562020c2d258 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562020c2d2c8 <col:28> 'const char *' lvalue ParmVar 0x562020bfa878 'keyword' 'const char *'
|         |-IntegerLiteral 0x562020c2d2e8 <col:37> 'int' 0
|         |-DeclRefExpr 0x562020c2d308 <col:40> 'T' lvalue ParmVar 0x562020bfa918 'x' 'T &'
|         `-DeclRefExpr 0x562020c2d328 <col:43> 'const V' lvalue ParmVar 0x562020bfa9b8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x562020bfafe8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x562020bfabe8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x562020bfac68 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x562020bfaf48 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x562020bfad28 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020bfadc8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x562020bfae68 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x562020c2d500 <col:76, line:407:5>
|     `-ReturnStmt 0x562020c2d4f0 <line:406:9, col:65>
|       `-CallExpr 0x562020c2d4b0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562020c2d3c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562020c2d430 <col:28> 'const char *' lvalue ParmVar 0x562020bfad28 'keyword' 'const char *'
|         |-DeclRefExpr 0x562020c2d450 <col:37> 'const int' lvalue Var 0x562020bf9360 'positional' 'const int'
|         |-DeclRefExpr 0x562020c2d470 <col:49> 'T' lvalue ParmVar 0x562020bfadc8 'x' 'T &'
|         `-DeclRefExpr 0x562020c2d490 <col:52> 'const V' lvalue ParmVar 0x562020bfae68 'default_value' 'const V &'
|-FunctionTemplateDecl 0x562020bfb538 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x562020bfb058 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x562020bfb0d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x562020bfb498 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x562020bfb198 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020bfb218 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x562020bfb2b8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x562020bfb358 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x562020c2d668 <col:85, line:412:5>
|     |-CallExpr 0x562020c2d5e8 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x562020c2d518 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x562020c2d558 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x562020c2d568 <col:37> 'const char *' lvalue ParmVar 0x562020bfb198 'keyword' 'const char *'
|     | |-DeclRefExpr 0x562020c2d588 <col:46> 'int' lvalue ParmVar 0x562020bfb218 'flags' 'int'
|     | |-DeclRefExpr 0x562020c2d5a8 <col:53> 'T' lvalue ParmVar 0x562020bfb2b8 'x' 'T &'
|     | `-DeclRefExpr 0x562020c2d5c8 <col:56> 'const V' lvalue ParmVar 0x562020bfb358 'default_value' 'const V &'
|     `-ReturnStmt 0x562020c2d658 <line:411:9, col:17>
|       `-UnaryOperator 0x562020c2d640 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562020c2d630 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562020bfb9c8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x562020bfb5b0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562020bfb628 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562020bfb928 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x562020bfb6e8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020bfb760 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x562020bfb808 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x562020c2d7e8 <col:53, line:425:5>
|     `-ReturnStmt 0x562020c2d7d8 <line:424:9, col:42>
|       `-CallExpr 0x562020c2d798 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562020c2d698 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562020c2d718 <col:21> 'const char *' lvalue ParmVar 0x562020bfb6e8 'keyword' 'const char *'
|         |-IntegerLiteral 0x562020c2d738 <col:30> 'int' 0
|         |-DeclRefExpr 0x562020c2d758 <col:33> 'P' lvalue ParmVar 0x562020bfb760 'parser' 'P'
|         `-DeclRefExpr 0x562020c2d778 <col:41> 'T' lvalue ParmVar 0x562020bfb808 'x' 'T &'
|-FunctionTemplateDecl 0x562020bfbe18 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x562020bfba38 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562020bfbab8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562020bfbd78 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x562020bfbb78 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020bfbbf0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x562020bfbc98 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x562020c2d960 <col:55, line:429:5>
|     `-ReturnStmt 0x562020c2d950 <line:428:9, col:50>
|       `-CallExpr 0x562020c2d910 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562020c2d810 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562020c2d890 <col:21> 'const char *' lvalue ParmVar 0x562020bfbb78 'keyword' 'const char *'
|         |-DeclRefExpr 0x562020c2d8b0 <col:30> 'const int' lvalue Var 0x562020bf9268 'mandatory' 'const int'
|         |-DeclRefExpr 0x562020c2d8d0 <col:41> 'P' lvalue ParmVar 0x562020bfbbf0 'parser' 'P'
|         `-DeclRefExpr 0x562020c2d8f0 <col:49> 'T' lvalue ParmVar 0x562020bfbc98 'x' 'T &'
|-FunctionTemplateDecl 0x562020bfc268 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x562020bfbe88 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562020bfbf08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x562020bfc1c8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x562020bfbfc8 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x562020bfc040 <col:39, col:41> col:41 referenced parser 'P'
| | |-ParmVarDecl 0x562020bfc0e8 <col:49, col:52> col:52 referenced x 'T &'
| | `-CompoundStmt 0x562020c2dad8 <col:55, line:433:5>
| |   `-ReturnStmt 0x562020c2dac8 <line:432:9, col:51>
| |     `-CallExpr 0x562020c2da88 <col:16, col:51> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x562020c2d988 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x562020c2da08 <col:21> 'const char *' lvalue ParmVar 0x562020bfbfc8 'keyword' 'const char *'
| |       |-DeclRefExpr 0x562020c2da28 <col:30> 'const int' lvalue Var 0x562020bf9360 'positional' 'const int'
| |       |-DeclRefExpr 0x562020c2da48 <col:42> 'P' lvalue ParmVar 0x562020bfc040 'parser' 'P'
| |       `-DeclRefExpr 0x562020c2da68 <col:50> 'T' lvalue ParmVar 0x562020bfc0e8 'x' 'T &'
| `-CXXMethodDecl 0x562020c6f738 <line:431:5, line:433:5> line:431:11 used read_p 'Args &(const char *, EtherAddressArg, unsigned char &[6])'
|   |-TemplateArgument type 'EtherAddressArg'
|   |-TemplateArgument type 'unsigned char [6]'
|   |-ParmVarDecl 0x562020c6f478 <col:18, col:30> col:30 keyword 'const char *'
|   |-ParmVarDecl 0x562020c6f518 <col:39, col:41> col:41 parser 'EtherAddressArg':'EtherAddressArg'
|   `-ParmVarDecl 0x562020c6f618 <col:49, col:52> col:52 x 'unsigned char &[6]'
|-FunctionTemplateDecl 0x562020bfc6b8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x562020bfc2d8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562020bfc358 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562020bfc618 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x562020bfc418 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020bfc490 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x562020bfc538 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x562020c2dd00 <col:56, line:437:5>
|     `-ReturnStmt 0x562020c2dcf0 <line:436:9, col:63>
|       `-CallExpr 0x562020c2dcb0 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562020c2db00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562020c2db80 <col:21> 'const char *' lvalue ParmVar 0x562020bfc418 'keyword' 'const char *'
|         |-BinaryOperator 0x562020c2dc50 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x562020c2dc00 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x562020c2dbe0 <col:30> 'const int' lvalue Var 0x562020bf9268 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x562020c2dc38 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x562020c2dc18 <col:42> 'const int' lvalue Var 0x562020bf9360 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x562020c2dc70 <col:54> 'P' lvalue ParmVar 0x562020bfc490 'parser' 'P'
|         `-DeclRefExpr 0x562020c2dc90 <col:62> 'T' lvalue ParmVar 0x562020bfc538 'x' 'T &'
|-FunctionTemplateDecl 0x562020bfcbe8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x562020bfc728 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562020bfc7a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562020bfcb48 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x562020bfc868 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020bfc8e8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x562020bfc960 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x562020bfca08 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x562020c2de68 <col:64, line:442:5>
|     |-CallExpr 0x562020c2dde8 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x562020c2dd18 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x562020c2dd58 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x562020c2dd68 <col:30> 'const char *' lvalue ParmVar 0x562020bfc868 'keyword' 'const char *'
|     | |-DeclRefExpr 0x562020c2dd88 <col:39> 'int' lvalue ParmVar 0x562020bfc8e8 'flags' 'int'
|     | |-DeclRefExpr 0x562020c2dda8 <col:46> 'P' lvalue ParmVar 0x562020bfc960 'parser' 'P'
|     | `-DeclRefExpr 0x562020c2ddc8 <col:54> 'T' lvalue ParmVar 0x562020bfca08 'x' 'T &'
|     `-ReturnStmt 0x562020c2de58 <line:441:9, col:17>
|       `-UnaryOperator 0x562020c2de40 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562020c2de30 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562020bfd1e8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x562020bfcc60 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562020bfccd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x562020bfcd58 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x562020bfd148 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x562020bfce20 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020bfce98 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x562020bfcf38 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x562020bfd008 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x562020c2e000 <col:84, line:458:5>
|     `-ReturnStmt 0x562020c2dff0 <line:457:9, col:64>
|       `-CallExpr 0x562020c2dfa8 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562020c2de98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562020c2df08 <col:28> 'const char *' lvalue ParmVar 0x562020bfce20 'keyword' 'const char *'
|         |-IntegerLiteral 0x562020c2df28 <col:37> 'int' 0
|         |-DeclRefExpr 0x562020c2df48 <col:40> 'P' lvalue ParmVar 0x562020bfce98 'parser' 'P'
|         |-DeclRefExpr 0x562020c2df68 <col:48> 'T' lvalue ParmVar 0x562020bfcf38 'x' 'T &'
|         `-DeclRefExpr 0x562020c2df88 <col:51> 'const V' lvalue ParmVar 0x562020bfd008 'default_value' 'const V &'
|-FunctionTemplateDecl 0x562020c00de8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x562020bfd260 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562020bfd2d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x562020c009e0 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x562020c00d48 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x562020c00aa0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020c00b18 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x562020c00bb8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x562020c00c58 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x562020c2e190 <col:86, line:462:5>
|     `-ReturnStmt 0x562020c2e180 <line:461:9, col:73>
|       `-CallExpr 0x562020c2e138 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562020c2e028 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562020c2e098 <col:28> 'const char *' lvalue ParmVar 0x562020c00aa0 'keyword' 'const char *'
|         |-DeclRefExpr 0x562020c2e0b8 <col:37> 'const int' lvalue Var 0x562020bf9360 'positional' 'const int'
|         |-DeclRefExpr 0x562020c2e0d8 <col:49> 'P' lvalue ParmVar 0x562020c00b18 'parser' 'P'
|         |-DeclRefExpr 0x562020c2e0f8 <col:57> 'T' lvalue ParmVar 0x562020c00bb8 'x' 'T &'
|         `-DeclRefExpr 0x562020c2e118 <col:60> 'const V' lvalue ParmVar 0x562020c00c58 'default_value' 'const V &'
|-FunctionTemplateDecl 0x562020c01448 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x562020c00e60 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562020c00ed8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x562020c00f58 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x562020c013a8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x562020c01020 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020c010a0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x562020c01118 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x562020c011b8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x562020c01258 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x562020c2e320 <col:95, line:467:5>
|     |-CallExpr 0x562020c2e298 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x562020c2e1a8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x562020c2e1e8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x562020c2e1f8 <col:37> 'const char *' lvalue ParmVar 0x562020c01020 'keyword' 'const char *'
|     | |-DeclRefExpr 0x562020c2e218 <col:46> 'int' lvalue ParmVar 0x562020c010a0 'flags' 'int'
|     | |-DeclRefExpr 0x562020c2e238 <col:53> 'P' lvalue ParmVar 0x562020c01118 'parser' 'P'
|     | |-DeclRefExpr 0x562020c2e258 <col:61> 'T' lvalue ParmVar 0x562020c011b8 'x' 'T &'
|     | `-DeclRefExpr 0x562020c2e278 <col:64> 'const V' lvalue ParmVar 0x562020c01258 'default_value' 'const V &'
|     `-ReturnStmt 0x562020c2e310 <line:466:9, col:17>
|       `-UnaryOperator 0x562020c2e2f8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562020c2e2e8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562020c01a28 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x562020c014c8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562020c01548 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x562020c015c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x562020c01988 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x562020c01690 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020c01708 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x562020c017a8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x562020c01848 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x562020c2e4c8 <col:63, line:481:5>
|     `-ReturnStmt 0x562020c2e4b8 <line:480:9, col:47>
|       `-CallExpr 0x562020c2e470 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562020c2e350 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562020c2e3d0 <col:21> 'const char *' lvalue ParmVar 0x562020c01690 'keyword' 'const char *'
|         |-IntegerLiteral 0x562020c2e3f0 <col:30> 'int' 0
|         |-DeclRefExpr 0x562020c2e410 <col:33> 'P' lvalue ParmVar 0x562020c01708 'parser' 'P'
|         |-DeclRefExpr 0x562020c2e430 <col:41> 'T1' lvalue ParmVar 0x562020c017a8 'x1' 'T1 &'
|         `-DeclRefExpr 0x562020c2e450 <col:45> 'T2' lvalue ParmVar 0x562020c01848 'x2' 'T2 &'
|-FunctionTemplateDecl 0x562020c01fa8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x562020c01aa0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562020c01b18 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x562020c01b98 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x562020c01f08 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x562020c01c60 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020c01cd8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x562020c01d78 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x562020c01e18 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x562020c2e668 <col:65, line:485:5>
|     `-ReturnStmt 0x562020c2e658 <line:484:9, col:55>
|       `-CallExpr 0x562020c2e610 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562020c2e4f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562020c2e570 <col:21> 'const char *' lvalue ParmVar 0x562020c01c60 'keyword' 'const char *'
|         |-DeclRefExpr 0x562020c2e590 <col:30> 'const int' lvalue Var 0x562020bf9268 'mandatory' 'const int'
|         |-DeclRefExpr 0x562020c2e5b0 <col:41> 'P' lvalue ParmVar 0x562020c01cd8 'parser' 'P'
|         |-DeclRefExpr 0x562020c2e5d0 <col:49> 'T1' lvalue ParmVar 0x562020c01d78 'x1' 'T1 &'
|         `-DeclRefExpr 0x562020c2e5f0 <col:53> 'T2' lvalue ParmVar 0x562020c01e18 'x2' 'T2 &'
|-FunctionTemplateDecl 0x562020c02528 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x562020c02020 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562020c02098 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x562020c02118 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x562020c02488 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x562020c021e0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020c02258 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x562020c022f8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x562020c02398 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x562020c2e808 <col:65, line:489:5>
|     `-ReturnStmt 0x562020c2e7f8 <line:488:9, col:56>
|       `-CallExpr 0x562020c2e7b0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562020c2e690 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562020c2e710 <col:21> 'const char *' lvalue ParmVar 0x562020c021e0 'keyword' 'const char *'
|         |-DeclRefExpr 0x562020c2e730 <col:30> 'const int' lvalue Var 0x562020bf9360 'positional' 'const int'
|         |-DeclRefExpr 0x562020c2e750 <col:42> 'P' lvalue ParmVar 0x562020c02258 'parser' 'P'
|         |-DeclRefExpr 0x562020c2e770 <col:50> 'T1' lvalue ParmVar 0x562020c022f8 'x1' 'T1 &'
|         `-DeclRefExpr 0x562020c2e790 <col:54> 'T2' lvalue ParmVar 0x562020c02398 'x2' 'T2 &'
|-FunctionTemplateDecl 0x562020c02aa8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x562020c025a0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562020c02618 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x562020c02698 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x562020c02a08 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x562020c02760 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020c027d8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x562020c02878 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x562020c02918 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x562020c2ea58 <col:66, line:493:5>
|     `-ReturnStmt 0x562020c2ea48 <line:492:9, col:68>
|       `-CallExpr 0x562020c2ea00 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562020c2e830 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562020c2e8b0 <col:21> 'const char *' lvalue ParmVar 0x562020c02760 'keyword' 'const char *'
|         |-BinaryOperator 0x562020c2e980 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x562020c2e930 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x562020c2e910 <col:30> 'const int' lvalue Var 0x562020bf9268 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x562020c2e968 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x562020c2e948 <col:42> 'const int' lvalue Var 0x562020bf9360 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x562020c2e9a0 <col:54> 'P' lvalue ParmVar 0x562020c027d8 'parser' 'P'
|         |-DeclRefExpr 0x562020c2e9c0 <col:62> 'T1' lvalue ParmVar 0x562020c02878 'x1' 'T1 &'
|         `-DeclRefExpr 0x562020c2e9e0 <col:66> 'T2' lvalue ParmVar 0x562020c02918 'x2' 'T2 &'
|-FunctionTemplateDecl 0x562020c03108 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x562020c02b20 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562020c02b98 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x562020c02c18 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x562020c03068 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x562020c02ce0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020c02d60 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x562020c02dd8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x562020c02e78 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x562020c02f18 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x562020c2ebe8 <col:74, line:498:5>
|     |-CallExpr 0x562020c2eb60 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x562020c2ea70 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x562020c2eab0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x562020c2eac0 <col:30> 'const char *' lvalue ParmVar 0x562020c02ce0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x562020c2eae0 <col:39> 'int' lvalue ParmVar 0x562020c02d60 'flags' 'int'
|     | |-DeclRefExpr 0x562020c2eb00 <col:46> 'P' lvalue ParmVar 0x562020c02dd8 'parser' 'P'
|     | |-DeclRefExpr 0x562020c2eb20 <col:54> 'T1' lvalue ParmVar 0x562020c02e78 'x1' 'T1 &'
|     | `-DeclRefExpr 0x562020c2eb40 <col:58> 'T2' lvalue ParmVar 0x562020c02f18 'x2' 'T2 &'
|     `-ReturnStmt 0x562020c2ebd8 <line:497:9, col:17>
|       `-UnaryOperator 0x562020c2ebc0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562020c2ebb0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562020c03468 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x562020c03188 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x562020c033c8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x562020c03240 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020c032b8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x562020c2ed30 <col:52, line:509:5>
|     `-ReturnStmt 0x562020c2ed20 <line:508:9, col:44>
|       `-CallExpr 0x562020c2ece8 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562020c2ec18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562020c2ec88 <col:26> 'const char *' lvalue ParmVar 0x562020c03240 'keyword' 'const char *'
|         |-IntegerLiteral 0x562020c2eca8 <col:35> 'int' 0
|         `-DeclRefExpr 0x562020c2ecc8 <col:38> 'P' lvalue ParmVar 0x562020c032b8 'parser' 'P'
|-FunctionTemplateDecl 0x562020c03768 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x562020c034d0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x562020c036c8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x562020c03580 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020c035f8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x562020c2ee70 <col:54, line:513:5>
|     `-ReturnStmt 0x562020c2ee60 <line:512:9, col:52>
|       `-CallExpr 0x562020c2ee28 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562020c2ed58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562020c2edc8 <col:26> 'const char *' lvalue ParmVar 0x562020c03580 'keyword' 'const char *'
|         |-DeclRefExpr 0x562020c2ede8 <col:35> 'const int' lvalue Var 0x562020bf9268 'mandatory' 'const int'
|         `-DeclRefExpr 0x562020c2ee08 <col:46> 'P' lvalue ParmVar 0x562020c035f8 'parser' 'P'
|-FunctionTemplateDecl 0x562020c03a68 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x562020c037d0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x562020c039c8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x562020c03880 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020c038f8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x562020c2efb0 <col:54, line:517:5>
|     `-ReturnStmt 0x562020c2efa0 <line:516:9, col:53>
|       `-CallExpr 0x562020c2ef68 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562020c2ee98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562020c2ef08 <col:26> 'const char *' lvalue ParmVar 0x562020c03880 'keyword' 'const char *'
|         |-DeclRefExpr 0x562020c2ef28 <col:35> 'const int' lvalue Var 0x562020bf9360 'positional' 'const int'
|         `-DeclRefExpr 0x562020c2ef48 <col:47> 'P' lvalue ParmVar 0x562020c038f8 'parser' 'P'
|-FunctionTemplateDecl 0x562020c03d68 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x562020c03ad0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x562020c03cc8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x562020c03b80 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020c03bf8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x562020c2f1a0 <col:55, line:521:5>
|     `-ReturnStmt 0x562020c2f190 <line:520:9, col:65>
|       `-CallExpr 0x562020c2f158 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562020c2efd8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562020c2f048 <col:26> 'const char *' lvalue ParmVar 0x562020c03b80 'keyword' 'const char *'
|         |-BinaryOperator 0x562020c2f118 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x562020c2f0c8 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x562020c2f0a8 <col:35> 'const int' lvalue Var 0x562020bf9268 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x562020c2f100 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x562020c2f0e0 <col:47> 'const int' lvalue Var 0x562020bf9360 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x562020c2f138 <col:59> 'P' lvalue ParmVar 0x562020c03bf8 'parser' 'P'
|-FunctionTemplateDecl 0x562020c04138 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x562020c03dd0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x562020c04098 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x562020c03e80 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020c03f00 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x562020c03f78 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x562020c2f2e0 <col:63, line:526:5>
|     |-CallExpr 0x562020c2f268 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x562020c2f1b8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x562020c2f1f8 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x562020c2f208 <col:35> 'const char *' lvalue ParmVar 0x562020c03e80 'keyword' 'const char *'
|     | |-DeclRefExpr 0x562020c2f228 <col:44> 'int' lvalue ParmVar 0x562020c03f00 'flags' 'int'
|     | `-DeclRefExpr 0x562020c2f248 <col:51> 'P' lvalue ParmVar 0x562020c03f78 'parser' 'P'
|     `-ReturnStmt 0x562020c2f2d0 <line:525:9, col:17>
|       `-UnaryOperator 0x562020c2f2b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562020c2f2a8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562020c04588 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x562020c041a8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562020c04228 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562020c044e8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x562020c042e8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020c04360 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x562020c04408 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x562020c2f438 <col:58, line:541:5>
|     `-ReturnStmt 0x562020c2f428 <line:540:9, col:39>
|       `-CallExpr 0x562020c2f3f0 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562020c2f310 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562020c2f390 <col:21> 'const char *' lvalue ParmVar 0x562020c042e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x562020c2f3b0 <col:30> 'P' lvalue ParmVar 0x562020c04360 'parser' 'P'
|         `-DeclRefExpr 0x562020c2f3d0 <col:38> 'T' lvalue ParmVar 0x562020c04408 'x' 'T &'
|-FunctionTemplateDecl 0x562020c049d8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x562020c045f8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562020c04678 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562020c04938 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x562020c04738 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020c047b0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x562020c04858 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x562020c2f570 <col:60, line:545:5>
|     `-ReturnStmt 0x562020c2f560 <line:544:9, col:41>
|       `-CallExpr 0x562020c2f528 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562020c2f460 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562020c2f4c8 <col:23> 'const char *' lvalue ParmVar 0x562020c04738 'keyword' 'const char *'
|         |-DeclRefExpr 0x562020c2f4e8 <col:32> 'P' lvalue ParmVar 0x562020c047b0 'parser' 'P'
|         `-DeclRefExpr 0x562020c2f508 <col:40> 'T' lvalue ParmVar 0x562020c04858 'x' 'T &'
|-FunctionTemplateDecl 0x562020c04e28 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x562020c04a48 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562020c04ac8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562020c04d88 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x562020c04b88 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020c04c00 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x562020c04ca8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x562020c2f6a8 <col:60, line:549:5>
|     `-ReturnStmt 0x562020c2f698 <line:548:9, col:41>
|       `-CallExpr 0x562020c2f660 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562020c2f598 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562020c2f600 <col:23> 'const char *' lvalue ParmVar 0x562020c04b88 'keyword' 'const char *'
|         |-DeclRefExpr 0x562020c2f620 <col:32> 'P' lvalue ParmVar 0x562020c04c00 'parser' 'P'
|         `-DeclRefExpr 0x562020c2f640 <col:40> 'T' lvalue ParmVar 0x562020c04ca8 'x' 'T &'
|-FunctionTemplateDecl 0x562020c05278 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x562020c04e98 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562020c04f18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562020c051d8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x562020c04fd8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020c05050 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x562020c050f8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x562020c2f7e0 <col:61, line:553:5>
|     `-ReturnStmt 0x562020c2f7d0 <line:552:9, col:42>
|       `-CallExpr 0x562020c2f798 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562020c2f6d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562020c2f738 <col:24> 'const char *' lvalue ParmVar 0x562020c04fd8 'keyword' 'const char *'
|         |-DeclRefExpr 0x562020c2f758 <col:33> 'P' lvalue ParmVar 0x562020c05050 'parser' 'P'
|         `-DeclRefExpr 0x562020c2f778 <col:41> 'T' lvalue ParmVar 0x562020c050f8 'x' 'T &'
|-FunctionTemplateDecl 0x562020c05758 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x562020c052e8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562020c05368 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562020c056b8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x562020c05428 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020c054a8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x562020c05520 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x562020c055c8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x562020c2f958 <col:69, line:557:5>
|     `-ReturnStmt 0x562020c2f948 <line:556:9, col:46>
|       `-CallExpr 0x562020c2f908 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562020c2f808 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562020c2f888 <col:21> 'const char *' lvalue ParmVar 0x562020c05428 'keyword' 'const char *'
|         |-DeclRefExpr 0x562020c2f8a8 <col:30> 'int' lvalue ParmVar 0x562020c054a8 'flags' 'int'
|         |-DeclRefExpr 0x562020c2f8c8 <col:37> 'P' lvalue ParmVar 0x562020c05520 'parser' 'P'
|         `-DeclRefExpr 0x562020c2f8e8 <col:45> 'T' lvalue ParmVar 0x562020c055c8 'x' 'T &'
|-FunctionTemplateDecl 0x562020c05a68 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x562020c057d0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x562020c059c8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x562020c05880 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020c058f8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x562020c2fa98 <col:56, line:571:5>
|     `-ReturnStmt 0x562020c2fa88 <line:570:9, col:48>
|       `-CallExpr 0x562020c2fa50 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562020c2f980 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562020c2f9f0 <col:30> 'const char *' lvalue ParmVar 0x562020c05880 'keyword' 'const char *'
|         |-IntegerLiteral 0x562020c2fa10 <col:39> 'int' 0
|         `-DeclRefExpr 0x562020c2fa30 <col:42> 'P' lvalue ParmVar 0x562020c058f8 'parser' 'P'
|-FunctionTemplateDecl 0x562020c05df8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x562020c05ad0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x562020c05d58 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x562020c05b80 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020c05c00 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x562020c05c78 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x562020c2fc68 <col:67, line:576:5>
|     |-CallExpr 0x562020c2fbf0 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x562020c2fab0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x562020c2faf0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x562020c2fb00 <col:39> 'const char *' lvalue ParmVar 0x562020c05b80 'keyword' 'const char *'
|     | |-BinaryOperator 0x562020c2fbb0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x562020c2fb60 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x562020c2fb20 <col:48> 'int' lvalue ParmVar 0x562020c05c00 'flags' 'int'
|     | | `-ImplicitCastExpr 0x562020c2fb98 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x562020c2fb78 <col:56> 'const int' lvalue Var 0x562020bf9550 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x562020c2fbd0 <col:68> 'P' lvalue ParmVar 0x562020c05c78 'parser' 'P'
|     `-ReturnStmt 0x562020c2fc58 <line:575:9, col:17>
|       `-UnaryOperator 0x562020c2fc40 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562020c2fc30 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562020c06248 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x562020c05e68 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562020c05ee8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562020c061a8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x562020c05fa8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020c06020 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x562020c060c8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x562020c2fdd8 <col:62, line:592:5>
|     `-ReturnStmt 0x562020c2fdc8 <line:591:9, col:51>
|       `-CallExpr 0x562020c2fd88 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562020c2fc98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562020c2fd08 <col:30> 'const char *' lvalue ParmVar 0x562020c05fa8 'keyword' 'const char *'
|         |-IntegerLiteral 0x562020c2fd28 <col:39> 'int' 0
|         |-DeclRefExpr 0x562020c2fd48 <col:42> 'P' lvalue ParmVar 0x562020c06020 'parser' 'P'
|         `-DeclRefExpr 0x562020c2fd68 <col:50> 'T' lvalue ParmVar 0x562020c060c8 'x' 'T &'
|-FunctionTemplateDecl 0x562020c06728 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x562020c062b8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562020c06338 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562020c06688 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x562020c063f8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020c06478 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x562020c064f0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x562020c06598 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x562020c2ffd0 <col:73, line:597:5>
|     |-CallExpr 0x562020c2ff50 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x562020c2fdf0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x562020c2fe30 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x562020c2fe40 <col:39> 'const char *' lvalue ParmVar 0x562020c063f8 'keyword' 'const char *'
|     | |-BinaryOperator 0x562020c2fef0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x562020c2fea0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x562020c2fe60 <col:48> 'int' lvalue ParmVar 0x562020c06478 'flags' 'int'
|     | | `-ImplicitCastExpr 0x562020c2fed8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x562020c2feb8 <col:56> 'const int' lvalue Var 0x562020bf9550 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x562020c2ff10 <col:68> 'P' lvalue ParmVar 0x562020c064f0 'parser' 'P'
|     | `-DeclRefExpr 0x562020c2ff30 <col:76> 'T' lvalue ParmVar 0x562020c06598 'x' 'T &'
|     `-ReturnStmt 0x562020c2ffc0 <line:596:9, col:17>
|       `-UnaryOperator 0x562020c2ffa8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562020c2ff98 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562020c06cd8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x562020c067a0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562020c06818 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562020c06c38 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x562020c068d8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020c06950 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x562020c06b10 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x562020c30140 <col:65, line:614:5>
|     `-ReturnStmt 0x562020c30130 <line:613:9, col:46>
|       `-CallExpr 0x562020c300f0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562020c30000 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562020c30070 <col:25> 'const char *' lvalue ParmVar 0x562020c068d8 'keyword' 'const char *'
|         |-IntegerLiteral 0x562020c30090 <col:34> 'int' 0
|         |-DeclRefExpr 0x562020c300b0 <col:37> 'P' lvalue ParmVar 0x562020c06950 'parser' 'P'
|         `-DeclRefExpr 0x562020c300d0 <col:45> 'Vector<T>' lvalue ParmVar 0x562020c06b10 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x562020c07108 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x562020c06d48 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x562020c07068 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x562020c06e00 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020c06f50 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x562020c30360 <col:55, line:618:5>
|     `-ReturnStmt 0x562020c30350 <line:617:9, col:55>
|       `-CallExpr 0x562020c30310 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562020c30168 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562020c301d8 <col:25> 'const char *' lvalue ParmVar 0x562020c06e00 'keyword' 'const char *'
|         |-IntegerLiteral 0x562020c301f8 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x562020c302d0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x562020c302f0 <col:54> 'Vector<T>' lvalue ParmVar 0x562020c06f50 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x562020c076d8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x562020c07170 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562020c071e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562020c07638 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x562020c072a8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020c07328 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x562020c073a0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x562020c074f0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x562020c30558 <col:76, line:623:5>
|     |-CallExpr 0x562020c304d8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x562020c30378 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x562020c303b8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x562020c303c8 <col:34> 'const char *' lvalue ParmVar 0x562020c072a8 'keyword' 'const char *'
|     | |-BinaryOperator 0x562020c30478 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x562020c30428 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x562020c303e8 <col:43> 'int' lvalue ParmVar 0x562020c07328 'flags' 'int'
|     | | `-ImplicitCastExpr 0x562020c30460 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x562020c30440 <col:51> 'const int' lvalue Var 0x562020bf9550 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x562020c30498 <col:63> 'P' lvalue ParmVar 0x562020c073a0 'parser' 'P'
|     | `-DeclRefExpr 0x562020c304b8 <col:71> 'Vector<T>' lvalue ParmVar 0x562020c074f0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x562020c30548 <line:622:9, col:17>
|       `-UnaryOperator 0x562020c30530 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562020c30520 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562020c07c18 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x562020c07750 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562020c077c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562020c07b78 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x562020c07888 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020c07908 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x562020c07a50 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x562020c307c0 <col:66, line:627:5>
|     `-ReturnStmt 0x562020c307b0 <line:626:9, col:59>
|       `-CallExpr 0x562020c30770 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x562020c30588 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x562020c305f8 <col:25> 'const char *' lvalue ParmVar 0x562020c07888 'keyword' 'const char *'
|         |-DeclRefExpr 0x562020c30618 <col:34> 'int' lvalue ParmVar 0x562020c07908 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x562020c30730 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x562020c30750 <col:58> 'Vector<T>' lvalue ParmVar 0x562020c07a50 'x' 'Vector<T> &'
|-CXXMethodDecl 0x562020c07ca8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x562020c30840 <col:25, line:633:5>
|   `-ReturnStmt 0x562020c30830 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x562020c30818 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x562020c307e8 <col:16> 'const bool' lvalue ->_status 0x562020c13668
|         `-CXXThisExpr 0x562020c307d8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x562020c07e28 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x562020c07d60 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x562020c30928 <col:27, line:639:5>
|   |-BinaryOperator 0x562020c308d0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x562020c30858 <col:9> 'bool' lvalue ParmVar 0x562020c07d60 'x' 'bool &'
|   | `-ImplicitCastExpr 0x562020c308b8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x562020c30888 <col:13> 'bool' lvalue ->_status 0x562020c13668
|   |     `-CXXThisExpr 0x562020c30878 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x562020c30918 <line:638:9, col:17>
|     `-UnaryOperator 0x562020c30900 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x562020c308f0 <col:17> 'Args *' this
|-CXXMethodDecl 0x562020c07fa8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x562020c07ee8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x562020c30a18 <col:39, line:644:5>
|   |-BinaryOperator 0x562020c309c0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x562020c30948 <col:9> 'bool' lvalue ParmVar 0x562020c07ee8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x562020c309a8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x562020c30978 <col:13> 'const bool' lvalue ->_status 0x562020c13668
|   |     `-CXXThisExpr 0x562020c30968 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x562020c30a08 <line:643:9, col:17>
|     `-UnaryOperator 0x562020c309f0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x562020c309e0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x562020c08070 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x562020c30ac0 <col:30, line:651:5>
|   `-ReturnStmt 0x562020c30ab0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x562020c30a98 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x562020c30a68 <col:16> 'bool' lvalue ->_read_status 0x562020beeaa0
|         `-ImplicitCastExpr 0x562020c30a48 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x562020c30a38 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x562020c081b8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x562020c08128 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x562020c30bc8 <col:32, line:658:5>
|   |-BinaryOperator 0x562020c30b70 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x562020c30ad8 <col:9> 'bool' lvalue ParmVar 0x562020c08128 'x' 'bool &'
|   | `-ImplicitCastExpr 0x562020c30b58 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x562020c30b28 <col:13> 'bool' lvalue ->_read_status 0x562020beeaa0
|   |     `-ImplicitCastExpr 0x562020c30b08 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x562020c30af8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x562020c30bb8 <line:657:9, col:17>
|     `-UnaryOperator 0x562020c30ba0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x562020c30b90 <col:17> 'Args *' this
|-CXXMethodDecl 0x562020c08308 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x562020c08278 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x562020c30cd8 <col:44, line:663:5>
|   |-BinaryOperator 0x562020c30c80 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x562020c30be8 <col:9> 'bool' lvalue ParmVar 0x562020c08278 'x' 'bool &'
|   | `-ImplicitCastExpr 0x562020c30c68 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x562020c30c38 <col:13> 'bool' lvalue ->_read_status 0x562020beeaa0
|   |     `-ImplicitCastExpr 0x562020c30c18 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x562020c30c08 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x562020c30cc8 <line:662:9, col:17>
|     `-UnaryOperator 0x562020c30cb0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x562020c30ca0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x562020c083d0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x562020c08498 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x562020c08560 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x562020c08628 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x562020c08938 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x562020c086c8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x562020c08898 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x562020c087a8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x562020c31090 <col:19, line:706:5>
|     `-IfStmt 0x562020c31068 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x562020c30dd8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x562020c30f98 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x562020c30f68 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x562020c30f28 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x562020c30e30 <col:42> '<bound member function type>' ->simple_slot 0x562020c2bb10
|       |     | `-CXXThisExpr 0x562020c30e20 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x562020c30ec8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x562020c30e80 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x562020987a48
|       |     | `-DeclRefExpr 0x562020c30e60 <col:55> 'T' lvalue ParmVar 0x562020c087a8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x562020c30f08 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x562020c31058 <line:705:13, col:34>
|         `-CallExpr 0x562020c31030 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x562020c30fb8 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x562020c31010 <col:33> 'T' lvalue ParmVar 0x562020c087a8 'x' 'T &'
|-FunctionTemplateDecl 0x562020c0e788 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x562020c0e520 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x562020c0e6e8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x562020c0e5f8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x562020c31470 <col:31, line:717:5>
|     |-DeclStmt 0x562020c311d0 <line:713:9, col:23>
|     | `-VarDecl 0x562020c310b8 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x562020c311a8 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x562020c31130 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x562020c31188 <col:21> 'T' lvalue ParmVar 0x562020c0e5f8 'x' 'T &'
|     |-IfStmt 0x562020c31420 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x562020c312c8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x562020c31400 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x562020c313a0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x562020c31330 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562020b3eb48 0x562020b3e768 0x562020b3e398 0x562020b3dfb8 0x562020b3dbd8 0x562020b3d808
|     |   | `-DeclRefExpr 0x562020c31310 <col:14> 'T *' lvalue Var 0x562020c310b8 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x562020c313e0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x562020c31458 <line:716:9, col:16>
|       `-DeclRefExpr 0x562020c31438 <col:16> 'T *' lvalue Var 0x562020c310b8 's' 'T *'
|-FunctionTemplateDecl 0x562020c0eb98 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x562020c0e7e8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x562020c0e868 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x562020c0eaf8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x562020c0e948 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x562020c0e9e8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x562020c31780 <col:37, line:726:5>
|     |-IfStmt 0x562020c31710 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x562020c31730 <line:723:13, col:26>
|     | | `-VarDecl 0x562020c314d8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x562020c315c8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x562020c31550 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x562020c315a8 <col:25> 'T' lvalue ParmVar 0x562020c0e948 'x' 'T &'
|     | |-DeclRefExpr 0x562020c315f0 <col:16> 'T *' lvalue Var 0x562020c314d8 's' 'T *'
|     | `-BinaryOperator 0x562020c316f0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x562020c316a0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x562020c31630 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562020b3eb48 0x562020b3e768 0x562020b3e398 0x562020b3dfb8 0x562020b3dbd8 0x562020b3d808
|     |   | `-DeclRefExpr 0x562020c31610 <col:14> 'T *' lvalue Var 0x562020c314d8 's' 'T *'
|     |   `-DeclRefExpr 0x562020c316d0 <col:18> 'const V' lvalue ParmVar 0x562020c0e9e8 'value' 'const V &'
|     `-ReturnStmt 0x562020c31770 <line:725:9, col:17>
|       `-UnaryOperator 0x562020c31758 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x562020c31748 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x562020c0ef98 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x562020c0ec00 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x562020c0eef8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x562020c0ecb0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020c0ed30 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x562020c0edd8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x562020c325a0 <col:65, line:737:5>
|     |-DeclStmt 0x562020c31818 <line:732:9, col:26>
|     | `-VarDecl 0x562020c317b0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x562020c32568 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x562020c32588 <line:733:13, col:58>
|       | `-VarDecl 0x562020c31840 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x562020c31a20 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x562020c319f0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x562020c319d8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x562020c319b8 <col:26, col:58> 'String' (CXXTemporary 0x562020c319b8)
|       |           `-CXXMemberCallExpr 0x562020c31948 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x562020c318b8 <col:26> '<bound member function type>' ->find 0x562020c2b128
|       |             | `-CXXThisExpr 0x562020c318a8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x562020c31980 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x562020c318e8 <col:31> 'const char *' lvalue ParmVar 0x562020c0ecb0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x562020c31998 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x562020c31908 <col:40> 'int' lvalue ParmVar 0x562020c0ed30 'flags' 'int'
|       |             `-DeclRefExpr 0x562020c31928 <col:47> 'Args::Slot *' lvalue Var 0x562020c317b0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x562020c31ad8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x562020c31ac0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x562020c31aa0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x562020c31a70 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56202094aa18
|       |       `-ImplicitCastExpr 0x562020c31a58 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x562020c31a38 <col:20> 'String' lvalue Var 0x562020c31840 'str' 'String'
|       `-CompoundStmt 0x562020c32548 <col:61, line:736:9>
|         |-DeclStmt 0x562020c31f90 <line:734:13, col:76>
|         | `-VarDecl 0x562020c31b28 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x562020c31f60 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x562020c31ed0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x562020c31f18 <col:60> 'T' lvalue ParmVar 0x562020c0edd8 'variable' 'T &'
|         |     `-UnaryOperator 0x562020c31f48 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x562020c31f38 <col:71> 'Args *' this
|         `-CallExpr 0x562020c32518 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x562020c31fb8 <col:13> '<bound member function type>' ->postparse 0x562020c2b338
|           | `-CXXThisExpr 0x562020c31fa8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x562020c324d8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x562020c31fe8 <col:23> 'T *' lvalue Var 0x562020c31b28 's' 'T *'
|           | `-CallExpr 0x562020c32498 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x562020c32270 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x562020c32370 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x562020c32390 <col:86> 'String' lvalue Var 0x562020c31840 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x562020c32440 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x562020c323d0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562020b3eb48 0x562020b3e768 0x562020b3e398 0x562020b3dfb8 0x562020b3dbd8 0x562020b3d808
|           |   | `-DeclRefExpr 0x562020c323b0 <col:92> 'T *' lvalue Var 0x562020c31b28 's' 'T *'
|           |   `-UnaryOperator 0x562020c32480 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x562020c32470 <col:96> 'Args *' this
|           `-DeclRefExpr 0x562020c324f8 <col:103> 'Args::Slot *' lvalue Var 0x562020c317b0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x562020c0f4e8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x562020c0f008 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x562020c0f088 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x562020c0f448 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x562020c0f148 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020c0f1c8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x562020c0f268 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x562020c0f308 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x562020c35d30 <col:88, line:745:5>
|     |-DeclStmt 0x562020c32638 <line:741:9, col:26>
|     | `-VarDecl 0x562020c325d0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x562020c32858 <line:742:9, col:55>
|     | `-VarDecl 0x562020c32660 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x562020c32840 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x562020c32810 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x562020c327f8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x562020c327d8 <col:22, col:54> 'String' (CXXTemporary 0x562020c327d8)
|     |           `-CXXMemberCallExpr 0x562020c32768 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x562020c326d8 <col:22> '<bound member function type>' ->find 0x562020c2b128
|     |             | `-CXXThisExpr 0x562020c326c8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x562020c327a0 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x562020c32708 <col:27> 'const char *' lvalue ParmVar 0x562020c0f148 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x562020c327b8 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x562020c32728 <col:36> 'int' lvalue ParmVar 0x562020c0f1c8 'flags' 'int'
|     |             `-DeclRefExpr 0x562020c32748 <col:43> 'Args::Slot *' lvalue Var 0x562020c325d0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x562020c35520 <line:743:9, col:72>
|     | `-VarDecl 0x562020c35190 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x562020c354f0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x562020c35460 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x562020c354a8 <col:56> 'T' lvalue ParmVar 0x562020c0f268 'variable' 'T &'
|     |     `-UnaryOperator 0x562020c354d8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x562020c354c8 <col:67> 'Args *' this
|     `-CallExpr 0x562020c35d00 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x562020c35548 <col:9> '<bound member function type>' ->postparse 0x562020c2b338
|       | `-CXXThisExpr 0x562020c35538 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x562020c35cc0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x562020c35578 <col:19> 'T *' lvalue Var 0x562020c35190 's' 'T *'
|       | `-ParenExpr 0x562020c35ca0 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x562020c35c70 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x562020c35c58 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x562020c35c40 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x562020c35c20 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x562020c35bf0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x56202094aa18
|       |     |       `-ImplicitCastExpr 0x562020c35bd8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x562020c35598 <col:25> 'String' lvalue Var 0x562020c32660 'str' 'String'
|       |     |-CallExpr 0x562020c35a48 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x562020c35820 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x562020c35920 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x562020c35940 <col:89> 'String' lvalue Var 0x562020c32660 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x562020c359f0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x562020c35980 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562020b3eb48 0x562020b3e768 0x562020b3e398 0x562020b3dfb8 0x562020b3dbd8 0x562020b3d808
|       |     | | `-DeclRefExpr 0x562020c35960 <col:95> 'T *' lvalue Var 0x562020c35190 's' 'T *'
|       |     | `-UnaryOperator 0x562020c35a30 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x562020c35a20 <col:99> 'Args *' this
|       |     `-ParenExpr 0x562020c35bb8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x562020c35b98 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x562020c35b68 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x562020c35b18 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x562020c35aa8 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562020b3eb48 0x562020b3e768 0x562020b3e398 0x562020b3dfb8 0x562020b3dbd8 0x562020b3d808
|       |         | | `-DeclRefExpr 0x562020c35a88 <col:109> 'T *' lvalue Var 0x562020c35190 's' 'T *'
|       |         | `-DeclRefExpr 0x562020c35b48 <col:113> 'const V' lvalue ParmVar 0x562020c0f308 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x562020c35b88 <col:120> 'bool' true
|       `-DeclRefExpr 0x562020c35ce0 <col:128> 'Args::Slot *' lvalue Var 0x562020c325d0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x562020c0fa18 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x562020c0f560 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562020c0f5d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562020c0f978 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x562020c0f698 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020c0f718 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x562020c0f790 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x562020c0f838 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x562020c36928 <col:75, line:754:5>
|     |-DeclStmt 0x562020c35dd8 <line:749:9, col:26>
|     | `-VarDecl 0x562020c35d70 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x562020c368f0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x562020c36910 <line:750:13, col:58>
|       | `-VarDecl 0x562020c35e00 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x562020c35fe0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x562020c35fb0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x562020c35f98 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x562020c35f78 <col:26, col:58> 'String' (CXXTemporary 0x562020c35f78)
|       |           `-CXXMemberCallExpr 0x562020c35f08 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x562020c35e78 <col:26> '<bound member function type>' ->find 0x562020c2b128
|       |             | `-CXXThisExpr 0x562020c35e68 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x562020c35f40 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x562020c35ea8 <col:31> 'const char *' lvalue ParmVar 0x562020c0f698 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x562020c35f58 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x562020c35ec8 <col:40> 'int' lvalue ParmVar 0x562020c0f718 'flags' 'int'
|       |             `-DeclRefExpr 0x562020c35ee8 <col:47> 'Args::Slot *' lvalue Var 0x562020c35d70 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x562020c36098 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x562020c36080 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x562020c36060 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x562020c36030 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56202094aa18
|       |       `-ImplicitCastExpr 0x562020c36018 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x562020c35ff8 <col:20> 'String' lvalue Var 0x562020c35e00 'str' 'String'
|       `-CompoundStmt 0x562020c368d0 <col:61, line:753:9>
|         |-DeclStmt 0x562020c36470 <line:751:13, col:63>
|         | `-VarDecl 0x562020c360e8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x562020c36440 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x562020c363b0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x562020c363f8 <col:47> 'T' lvalue ParmVar 0x562020c0f838 'variable' 'T &'
|         |     `-UnaryOperator 0x562020c36428 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x562020c36418 <col:58> 'Args *' this
|         `-CallExpr 0x562020c368a0 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x562020c36498 <col:13> '<bound member function type>' ->postparse 0x562020c2b338
|           | `-CXXThisExpr 0x562020c36488 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x562020c36860 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x562020c364c8 <col:23> 'T *' lvalue Var 0x562020c360e8 's' 'T *'
|           | `-CallExpr 0x562020c36820 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x562020c366b0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x562020c366f8 <col:56> 'P' lvalue ParmVar 0x562020c0f790 'parser' 'P'
|           |   |-DeclRefExpr 0x562020c36718 <col:64> 'String' lvalue Var 0x562020c35e00 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x562020c367c8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x562020c36758 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562020b3eb48 0x562020b3e768 0x562020b3e398 0x562020b3dfb8 0x562020b3dbd8 0x562020b3d808
|           |   | `-DeclRefExpr 0x562020c36738 <col:70> 'T *' lvalue Var 0x562020c360e8 's' 'T *'
|           |   `-UnaryOperator 0x562020c36808 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x562020c367f8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x562020c36880 <col:81> 'Args::Slot *' lvalue Var 0x562020c35d70 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x562020c10078 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x562020c0fa90 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x562020c0fb08 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x562020c0fb88 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x562020c0ffd8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x562020c0fc50 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020c0fcd0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x562020c0fd48 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x562020c0fde8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x562020c0fe88 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x562020c376b8 <col:98, line:762:5>
|     |-DeclStmt 0x562020c369c0 <line:758:9, col:26>
|     | `-VarDecl 0x562020c36958 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x562020c36be0 <line:759:9, col:55>
|     | `-VarDecl 0x562020c369e8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x562020c36bc8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x562020c36b98 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x562020c36b80 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x562020c36b60 <col:22, col:54> 'String' (CXXTemporary 0x562020c36b60)
|     |           `-CXXMemberCallExpr 0x562020c36af0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x562020c36a60 <col:22> '<bound member function type>' ->find 0x562020c2b128
|     |             | `-CXXThisExpr 0x562020c36a50 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x562020c36b28 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x562020c36a90 <col:27> 'const char *' lvalue ParmVar 0x562020c0fc50 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x562020c36b40 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x562020c36ab0 <col:36> 'int' lvalue ParmVar 0x562020c0fcd0 'flags' 'int'
|     |             `-DeclRefExpr 0x562020c36ad0 <col:43> 'Args::Slot *' lvalue Var 0x562020c36958 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x562020c37000 <line:760:9, col:59>
|     | `-VarDecl 0x562020c36c38 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x562020c36fd0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x562020c36f40 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x562020c36f88 <col:43> 'T' lvalue ParmVar 0x562020c0fde8 'variable' 'T &'
|     |     `-UnaryOperator 0x562020c36fb8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x562020c36fa8 <col:54> 'Args *' this
|     `-CallExpr 0x562020c37688 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x562020c37028 <col:9> '<bound member function type>' ->postparse 0x562020c2b338
|       | `-CXXThisExpr 0x562020c37018 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x562020c37648 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x562020c37058 <col:19> 'T *' lvalue Var 0x562020c36c38 's' 'T *'
|       | `-ParenExpr 0x562020c37628 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x562020c375f8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x562020c375e0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x562020c375c8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x562020c375a8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x562020c37578 <col:25> '<bound member function type>' .operator int (String::*)() const 0x56202094aa18
|       |     |       `-ImplicitCastExpr 0x562020c37560 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x562020c37078 <col:25> 'String' lvalue Var 0x562020c369e8 'str' 'String'
|       |     |-CallExpr 0x562020c373d0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x562020c37260 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x562020c372a8 <col:59> 'P' lvalue ParmVar 0x562020c0fd48 'parser' 'P'
|       |     | |-DeclRefExpr 0x562020c372c8 <col:67> 'String' lvalue Var 0x562020c369e8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x562020c37378 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x562020c37308 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562020b3eb48 0x562020b3e768 0x562020b3e398 0x562020b3dfb8 0x562020b3dbd8 0x562020b3d808
|       |     | | `-DeclRefExpr 0x562020c372e8 <col:73> 'T *' lvalue Var 0x562020c36c38 's' 'T *'
|       |     | `-UnaryOperator 0x562020c373b8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x562020c373a8 <col:77> 'Args *' this
|       |     `-ParenExpr 0x562020c37540 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x562020c37520 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x562020c374f0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x562020c374a0 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x562020c37430 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562020b3eb48 0x562020b3e768 0x562020b3e398 0x562020b3dfb8 0x562020b3dbd8 0x562020b3d808
|       |         | | `-DeclRefExpr 0x562020c37410 <col:87> 'T *' lvalue Var 0x562020c36c38 's' 'T *'
|       |         | `-DeclRefExpr 0x562020c374d0 <col:91> 'const V' lvalue ParmVar 0x562020c0fe88 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x562020c37510 <col:98> 'bool' true
|       `-DeclRefExpr 0x562020c37668 <col:106> 'Args::Slot *' lvalue Var 0x562020c36958 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x562020c106e8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x562020c100f8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562020c10178 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x562020c101f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x562020c10648 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x562020c102c0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020c10340 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x562020c103b8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x562020c10458 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x562020c104f8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x562020c38698 <col:60, line:773:5>
|     |-DeclStmt 0x562020c37760 <line:767:9, col:26>
|     | `-VarDecl 0x562020c376f8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x562020c38660 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x562020c38680 <line:768:13, col:58>
|       | `-VarDecl 0x562020c37788 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x562020c37968 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x562020c37938 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x562020c37920 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x562020c37900 <col:26, col:58> 'String' (CXXTemporary 0x562020c37900)
|       |           `-CXXMemberCallExpr 0x562020c37890 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x562020c37800 <col:26> '<bound member function type>' ->find 0x562020c2b128
|       |             | `-CXXThisExpr 0x562020c377f0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x562020c378c8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x562020c37830 <col:31> 'const char *' lvalue ParmVar 0x562020c102c0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x562020c378e0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x562020c37850 <col:40> 'int' lvalue ParmVar 0x562020c10340 'flags' 'int'
|       |             `-DeclRefExpr 0x562020c37870 <col:47> 'Args::Slot *' lvalue Var 0x562020c376f8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x562020c37a20 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x562020c37a08 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x562020c379e8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x562020c379b8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56202094aa18
|       |       `-ImplicitCastExpr 0x562020c379a0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x562020c37980 <col:20> 'String' lvalue Var 0x562020c37788 'str' 'String'
|       `-CompoundStmt 0x562020c38638 <col:61, line:772:9>
|         |-DeclStmt 0x562020c37d60 <line:769:13, col:66>
|         | `-VarDecl 0x562020c37a78 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x562020c37d30 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x562020c37ca0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x562020c37ce8 <col:49> 'T1' lvalue ParmVar 0x562020c10458 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x562020c37d18 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x562020c37d08 <col:61> 'Args *' this
|         |-DeclStmt 0x562020c380d0 <line:770:13, col:66>
|         | `-VarDecl 0x562020c37de8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x562020c380a0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x562020c38010 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x562020c38058 <col:49> 'T2' lvalue ParmVar 0x562020c104f8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x562020c38088 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x562020c38078 <col:61> 'Args *' this
|         `-CallExpr 0x562020c38608 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x562020c380f8 <col:13> '<bound member function type>' ->postparse 0x562020c2b338
|           | `-CXXThisExpr 0x562020c380e8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x562020c385c8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x562020c38168 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x562020c38128 <col:23> 'T1 *' lvalue Var 0x562020c37a78 's1' 'T1 *'
|           | | `-DeclRefExpr 0x562020c38148 <col:29> 'T2 *' lvalue Var 0x562020c37de8 's2' 'T2 *'
|           | `-CallExpr 0x562020c38580 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x562020c38350 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x562020c38398 <col:63> 'P' lvalue ParmVar 0x562020c103b8 'parser' 'P'
|           |   |-DeclRefExpr 0x562020c383b8 <col:71> 'String' lvalue Var 0x562020c37788 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x562020c38468 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x562020c383f8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562020b3eb48 0x562020b3e768 0x562020b3e398 0x562020b3dfb8 0x562020b3dbd8 0x562020b3d808
|           |   | `-DeclRefExpr 0x562020c383d8 <col:77> 'T1 *' lvalue Var 0x562020c37a78 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x562020c38528 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x562020c384b8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562020b3eb48 0x562020b3e768 0x562020b3e398 0x562020b3dfb8 0x562020b3dbd8 0x562020b3d808
|           |   | `-DeclRefExpr 0x562020c38498 <col:82> 'T2 *' lvalue Var 0x562020c37de8 's2' 'T2 *'
|           |   `-UnaryOperator 0x562020c38568 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x562020c38558 <col:87> 'Args *' this
|           `-DeclRefExpr 0x562020c385e8 <col:94> 'Args::Slot *' lvalue Var 0x562020c376f8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x562020c10ad8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x562020c10768 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x562020c10a38 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x562020c10820 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020c108a0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x562020c10918 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x562020c38bb0 <col:67, line:780:5>
|     |-DeclStmt 0x562020c38730 <line:777:9, col:26>
|     | `-VarDecl 0x562020c386c8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x562020c38b78 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x562020c38b98 <line:778:13, col:58>
|       | `-VarDecl 0x562020c38758 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x562020c38938 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x562020c38908 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x562020c388f0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x562020c388d0 <col:26, col:58> 'String' (CXXTemporary 0x562020c388d0)
|       |           `-CXXMemberCallExpr 0x562020c38860 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x562020c387d0 <col:26> '<bound member function type>' ->find 0x562020c2b128
|       |             | `-CXXThisExpr 0x562020c387c0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x562020c38898 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x562020c38800 <col:31> 'const char *' lvalue ParmVar 0x562020c10820 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x562020c388b0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x562020c38820 <col:40> 'int' lvalue ParmVar 0x562020c108a0 'flags' 'int'
|       |             `-DeclRefExpr 0x562020c38840 <col:47> 'Args::Slot *' lvalue Var 0x562020c386c8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x562020c389f0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x562020c389d8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x562020c389b8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x562020c38988 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56202094aa18
|       |       `-ImplicitCastExpr 0x562020c38970 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x562020c38950 <col:20> 'String' lvalue Var 0x562020c38758 'str' 'String'
|       `-CallExpr 0x562020c38b48 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x562020c38a18 <col:13> '<bound member function type>' ->postparse 0x562020c2b338
|         | `-CXXThisExpr 0x562020c38a08 <col:13> 'Args *' implicit this
|         |-CallExpr 0x562020c38af8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x562020c38a68 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x562020c38a48 <col:23> 'P' lvalue ParmVar 0x562020c10918 'parser' 'P'
|         | |-DeclRefExpr 0x562020c38ab0 <col:36> 'String' lvalue Var 0x562020c38758 'str' 'String'
|         | `-UnaryOperator 0x562020c38ae0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x562020c38ad0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x562020c38b28 <col:49> 'Args::Slot *' lvalue Var 0x562020c386c8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x562020c10e78 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x562020c10b48 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x562020c10dd8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x562020c10c00 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020c10c80 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x562020c10cf8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x562020c39520 <col:71, line:792:5>
|     |-DeclStmt 0x562020c38c48 <line:784:9, col:26>
|     | `-VarDecl 0x562020c38be0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x562020c38d18 <line:785:9, col:29>
|     | `-VarDecl 0x562020c38c78 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x562020c38d00 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x562020c38ce0 <col:28> 'int' 1
|     |-WhileStmt 0x562020c393d0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x562020c393f0 <line:786:16, col:61>
|     | | `-VarDecl 0x562020c38d40 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x562020c38f20 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x562020c38ef0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x562020c38ed8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x562020c38eb8 <col:29, col:61> 'String' (CXXTemporary 0x562020c38eb8)
|     | |           `-CXXMemberCallExpr 0x562020c38e48 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x562020c38db8 <col:29> '<bound member function type>' ->find 0x562020c2b128
|     | |             | `-CXXThisExpr 0x562020c38da8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x562020c38e80 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x562020c38de8 <col:34> 'const char *' lvalue ParmVar 0x562020c10c00 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x562020c38e98 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x562020c38e08 <col:43> 'int' lvalue ParmVar 0x562020c10c80 'flags' 'int'
|     | |             `-DeclRefExpr 0x562020c38e28 <col:50> 'Args::Slot *' lvalue Var 0x562020c38be0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x562020c38fd8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x562020c38fc0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x562020c38fa0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x562020c38f70 <col:23> '<bound member function type>' .operator int (String::*)() const 0x56202094aa18
|     | |       `-ImplicitCastExpr 0x562020c38f58 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x562020c38f38 <col:23> 'String' lvalue Var 0x562020c38d40 'str' 'String'
|     | `-CompoundStmt 0x562020c393a8 <col:64, line:790:9>
|     |   |-CallExpr 0x562020c39130 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x562020c39000 <col:13> '<bound member function type>' ->postparse 0x562020c2b338
|     |   | | `-CXXThisExpr 0x562020c38ff0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x562020c390e0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x562020c39050 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x562020c39030 <col:23> 'P' lvalue ParmVar 0x562020c10cf8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x562020c39098 <col:36> 'String' lvalue Var 0x562020c38d40 'str' 'String'
|     |   | | `-UnaryOperator 0x562020c390c8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x562020c390b8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x562020c39110 <col:49> 'Args::Slot *' lvalue Var 0x562020c38be0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x562020c392c8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x562020c39160 <col:13> 'int' lvalue Var 0x562020c38c78 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x562020c392b0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x562020c39290 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x562020c391f8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x562020c391d8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x562020c391c0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x562020c39180 <col:28> 'int' lvalue Var 0x562020c38c78 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x562020c391a0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x562020c39278 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x562020c39248 <col:49> 'bool' lvalue ->_read_status 0x562020beeaa0
|     |   |         `-ImplicitCastExpr 0x562020c39228 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x562020c39218 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x562020c39378 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x562020c392e8 <col:13> 'int' lvalue ParmVar 0x562020c10c80 'flags' 'int'
|     |     `-UnaryOperator 0x562020c39360 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x562020c39348 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x562020c39328 <col:23> 'const int' lvalue Var 0x562020bf9268 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x562020c39500 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x562020c39438 <col:9> 'bool' lvalue ->_read_status 0x562020beeaa0
|       | `-ImplicitCastExpr 0x562020c39418 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x562020c39408 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x562020c394e0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x562020c394c0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x562020c394a8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x562020c39468 <col:25> 'int' lvalue Var 0x562020c38c78 'read_status' 'int'
|           `-IntegerLiteral 0x562020c39488 <col:40> 'int' 1
|-FunctionTemplateDecl 0x562020c11358 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x562020c10ee8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562020c10f68 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562020c112b8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x562020c11028 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020c110a8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x562020c11120 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x562020c111c8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x562020c3a4b0 <col:84, line:805:5>
|     |-DeclStmt 0x562020c395c8 <line:796:9, col:26>
|     | `-VarDecl 0x562020c39560 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x562020c39698 <line:797:9, col:29>
|     | `-VarDecl 0x562020c395f8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x562020c39680 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x562020c39660 <col:28> 'int' 1
|     |-DeclStmt 0x562020c399d0 <line:798:9, col:71>
|     | `-VarDecl 0x562020c396e8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x562020c399a0 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x562020c39910 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x562020c39958 <col:55> 'T' lvalue ParmVar 0x562020c111c8 'variable' 'T &'
|     |     `-UnaryOperator 0x562020c39988 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x562020c39978 <col:66> 'Args *' this
|     |-WhileStmt 0x562020c3a360 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x562020c3a380 <line:799:16, col:61>
|     | | `-VarDecl 0x562020c399f8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x562020c39bd8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x562020c39ba8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x562020c39b90 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x562020c39b70 <col:29, col:61> 'String' (CXXTemporary 0x562020c39b70)
|     | |           `-CXXMemberCallExpr 0x562020c39b00 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x562020c39a70 <col:29> '<bound member function type>' ->find 0x562020c2b128
|     | |             | `-CXXThisExpr 0x562020c39a60 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x562020c39b38 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x562020c39aa0 <col:34> 'const char *' lvalue ParmVar 0x562020c11028 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x562020c39b50 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x562020c39ac0 <col:43> 'int' lvalue ParmVar 0x562020c110a8 'flags' 'int'
|     | |             `-DeclRefExpr 0x562020c39ae0 <col:50> 'Args::Slot *' lvalue Var 0x562020c39560 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x562020c39c90 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x562020c39c78 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x562020c39c58 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x562020c39c28 <col:23> '<bound member function type>' .operator int (String::*)() const 0x56202094aa18
|     | |       `-ImplicitCastExpr 0x562020c39c10 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x562020c39bf0 <col:23> 'String' lvalue Var 0x562020c399f8 'str' 'String'
|     | `-CompoundStmt 0x562020c3a338 <col:64, line:803:9>
|     |   |-CallExpr 0x562020c3a0c0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x562020c39cb8 <col:13> '<bound member function type>' ->postparse 0x562020c2b338
|     |   | | `-CXXThisExpr 0x562020c39ca8 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x562020c3a080 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x562020c39ce8 <col:23> 'T *' lvalue Var 0x562020c396e8 's' 'T *'
|     |   | | `-CallExpr 0x562020c3a040 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x562020c39ed0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x562020c39f18 <col:56> 'P' lvalue ParmVar 0x562020c11120 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x562020c39f38 <col:64> 'String' lvalue Var 0x562020c399f8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x562020c39fe8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x562020c39f78 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562020b3eb48 0x562020b3e768 0x562020b3e398 0x562020b3dfb8 0x562020b3dbd8 0x562020b3d808
|     |   | |   | `-DeclRefExpr 0x562020c39f58 <col:70> 'T *' lvalue Var 0x562020c396e8 's' 'T *'
|     |   | |   `-UnaryOperator 0x562020c3a028 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x562020c3a018 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x562020c3a0a0 <col:81> 'Args::Slot *' lvalue Var 0x562020c39560 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x562020c3a258 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x562020c3a0f0 <col:13> 'int' lvalue Var 0x562020c395f8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x562020c3a240 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x562020c3a220 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x562020c3a188 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x562020c3a168 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x562020c3a150 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x562020c3a110 <col:28> 'int' lvalue Var 0x562020c395f8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x562020c3a130 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x562020c3a208 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x562020c3a1d8 <col:49> 'bool' lvalue ->_read_status 0x562020beeaa0
|     |   |         `-ImplicitCastExpr 0x562020c3a1b8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x562020c3a1a8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x562020c3a308 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x562020c3a278 <col:13> 'int' lvalue ParmVar 0x562020c110a8 'flags' 'int'
|     |     `-UnaryOperator 0x562020c3a2f0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x562020c3a2d8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x562020c3a2b8 <col:23> 'const int' lvalue Var 0x562020bf9268 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x562020c3a490 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x562020c3a3c8 <col:9> 'bool' lvalue ->_read_status 0x562020beeaa0
|       | `-ImplicitCastExpr 0x562020c3a3a8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x562020c3a398 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x562020c3a470 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x562020c3a450 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x562020c3a438 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x562020c3a3f8 <col:25> 'int' lvalue Var 0x562020c395f8 'read_status' 'int'
|           `-IntegerLiteral 0x562020c3a418 <col:40> 'int' 1
|-FunctionTemplateDecl 0x562020c11938 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x562020c113d0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x562020c11448 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x562020c11898 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x562020c11508 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x562020c11588 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x562020c11600 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x562020c11750 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x562020c3b2b8 <col:87, line:821:5>
|     |-DeclStmt 0x562020c3a560 <line:809:9, col:26>
|     | `-VarDecl 0x562020c3a4f8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x562020c3a630 <line:810:9, col:29>
|     | `-VarDecl 0x562020c3a590 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x562020c3a618 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x562020c3a5f8 <col:28> 'int' 1
|     |-DeclStmt 0x562020c3a878 <line:811:9, col:38>
|     | `-VarDecl 0x562020c3a760 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x562020c3a850 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x562020c3a7d8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x562020c3a830 <col:29> 'Vector<T>' lvalue ParmVar 0x562020c11750 'variable' 'Vector<T> &'
|     |-WhileStmt 0x562020c3b168 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x562020c3b188 <line:812:16, col:61>
|     | | `-VarDecl 0x562020c3a8a0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x562020c3aa80 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x562020c3aa50 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x562020c3aa38 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x562020c3aa18 <col:29, col:61> 'String' (CXXTemporary 0x562020c3aa18)
|     | |           `-CXXMemberCallExpr 0x562020c3a9a8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x562020c3a918 <col:29> '<bound member function type>' ->find 0x562020c2b128
|     | |             | `-CXXThisExpr 0x562020c3a908 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x562020c3a9e0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x562020c3a948 <col:34> 'const char *' lvalue ParmVar 0x562020c11508 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x562020c3a9f8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x562020c3a968 <col:43> 'int' lvalue ParmVar 0x562020c11588 'flags' 'int'
|     | |             `-DeclRefExpr 0x562020c3a988 <col:50> 'Args::Slot *' lvalue Var 0x562020c3a4f8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x562020c3ab38 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x562020c3ab20 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x562020c3ab00 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x562020c3aad0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x56202094aa18
|     | |       `-ImplicitCastExpr 0x562020c3aab8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x562020c3aa98 <col:23> 'String' lvalue Var 0x562020c3a8a0 'str' 'String'
|     | `-CompoundStmt 0x562020c3b130 <col:64, line:819:9>
|     |   |-DeclStmt 0x562020c3abf8 <line:813:13, col:23>
|     |   | `-VarDecl 0x562020c3ab60 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x562020c3abd8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x562020c3ad78 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x562020c3ac20 <col:13> '<bound member function type>' ->postparse 0x562020c2b338
|     |   | | `-CXXThisExpr 0x562020c3ac10 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x562020c3ad20 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x562020c3ac70 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x562020c3ac50 <col:23> 'P' lvalue ParmVar 0x562020c11600 'parser' 'P'
|     |   | | |-DeclRefExpr 0x562020c3acb8 <col:36> 'String' lvalue Var 0x562020c3a8a0 'str' 'String'
|     |   | | |-DeclRefExpr 0x562020c3acd8 <col:41> 'T' lvalue Var 0x562020c3ab60 'sx' 'T'
|     |   | | `-UnaryOperator 0x562020c3ad08 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x562020c3acf8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x562020c3ad58 <col:53> 'Args::Slot *' lvalue Var 0x562020c3a4f8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x562020c3aed0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x562020c3ae08 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x562020c3add8 <col:17> 'bool' lvalue ->_read_status 0x562020beeaa0
|     |   | |   `-ImplicitCastExpr 0x562020c3adb8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x562020c3ada8 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x562020c3aea8 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x562020c3ae40 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x562020c3ae20 <col:17> 'Vector<T> *' lvalue Var 0x562020c3a760 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x562020c3ae88 <col:30> 'T' lvalue Var 0x562020c3ab60 'sx' 'T'
|     |   |-BinaryOperator 0x562020c3b050 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x562020c3aee8 <col:13> 'int' lvalue Var 0x562020c3a590 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x562020c3b038 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x562020c3b018 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x562020c3af80 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x562020c3af60 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x562020c3af48 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x562020c3af08 <col:28> 'int' lvalue Var 0x562020c3a590 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x562020c3af28 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x562020c3b000 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x562020c3afd0 <col:49> 'bool' lvalue ->_read_status 0x562020beeaa0
|     |   |         `-ImplicitCastExpr 0x562020c3afb0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x562020c3afa0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x562020c3b100 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x562020c3b070 <col:13> 'int' lvalue ParmVar 0x562020c11588 'flags' 'int'
|     |     `-UnaryOperator 0x562020c3b0e8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x562020c3b0d0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x562020c3b0b0 <col:23> 'const int' lvalue Var 0x562020bf9268 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x562020c3b298 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x562020c3b1d0 <col:9> 'bool' lvalue ->_read_status 0x562020beeaa0
|       | `-ImplicitCastExpr 0x562020c3b1b0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x562020c3b1a0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x562020c3b278 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x562020c3b258 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x562020c3b240 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x562020c3b200 <col:25> 'int' lvalue Var 0x562020c3a590 'read_status' 'int'
|           `-IntegerLiteral 0x562020c3b220 <col:40> 'int' 1
|-AccessSpecDecl 0x562020c119b0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x562020c119d8 prev 0x562020bf75a0 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x562020c11ad0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x562020c11bc0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x562020c3b2f0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x562020c11cb0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x562020c3b300 <col:25, line:830:9>
| |-CXXMethodDecl 0x562020c11db0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x562020c11e60 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x562020c11f08 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x562020c11f08
| | `-ParmVarDecl 0x562020c12018 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x562020c127d8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x562020c127d8
|   `-ParmVarDecl 0x562020c128e8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x562020c12088 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x562020c121e8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x562020c123e0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x562020c12290 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x562020c12308 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x562020c3b4e0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x562020c12698 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x562020c3b350 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x562020c3b310 <col:20> 'void *' lvalue ParmVar 0x562020c12290 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x562020c12700 '_slot' 'char *'
| | | `-CXXNewExpr 0x562020c3b3d8 <col:32, col:45> 'char *' array Function 0x56202076d688 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x562020c3b3c0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x562020c3b390 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x562020c12308 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x562020c12760 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x562020c3b4a0 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x562020c3b460 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x562020c12308 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x562020c3b560 <col:61, line:838:9>
| |-CXXDestructorDecl 0x562020c124e0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x562020c11cb0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x562020c3b5e8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x562020c3b5c8 <line:840:13, col:22> 'void' array Function 0x56202076d9e8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x562020c3b5b0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x562020c3b580 <col:22> 'char *' lvalue ->_slot 0x562020c12700
| |         `-CXXThisExpr 0x562020c3b570 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x562020c125e0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x562020c11db0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x562020c3b7d8 <col:22, line:844:9>
| |   `-CallExpr 0x562020c3b740 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x562020c3b728 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x562020c3b708 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x562020879468 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x562020c3b778 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x562020c3b658 <col:20> 'void *' lvalue ->_ptr 0x562020c12698
| |     |   `-CXXThisExpr 0x562020c3b648 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x562020c3b7a8 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x562020c3b790 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x562020c3b698 <col:26> 'char *' lvalue ->_slot 0x562020c12700
| |     |     `-CXXThisExpr 0x562020c3b688 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x562020c3b7c0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x562020c3b6d8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x562020c12760
| |         `-CXXThisExpr 0x562020c3b6c8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x562020c12698 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x562020c12700 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x562020c12760 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x562020c12958 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x562020c12958
| | `-ParmVarDecl 0x562020c12a68 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x562020c12b08 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x562020c12b08
|   `-ParmVarDecl 0x562020c12c18 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x562020c12db8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x562020c12c88 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x562020c12d28 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x562020c13050 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x562020c13248 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x562020c13118 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x562020c133c8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x562020c3b810 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x562020c3b7f0 <col:20> 'T *' lvalue ParmVar 0x562020c13118 'ptr' 'T *'
|   | `-CompoundStmt 0x562020c3b860 <col:25, line:854:9>
|   |-CXXMethodDecl 0x562020c13318 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x562020c11db0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x562020c3ba10 <col:22, line:857:9>
|   |   `-CallExpr 0x562020c3b9e0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x562020c3b870 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x562020931b98 0x5620208dbec8
|   |     |-CXXOperatorCallExpr 0x562020c3b970 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x562020c3b900 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x562020b3eb48 0x562020b3e768 0x562020b3e398 0x562020b3dfb8 0x562020b3dbd8 0x562020b3d808
|   |     | `-MemberExpr 0x562020c3b8d0 <col:29> 'T *' lvalue ->_ptr 0x562020c133c8
|   |     |   `-CXXThisExpr 0x562020c3b8c0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x562020c3b9b0 <col:35> 'T' lvalue ->_slot 0x562020c13428
|   |       `-CXXThisExpr 0x562020c3b9a0 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x562020c133c8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x562020c13428 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x562020c13490 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x562020c13590 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x562020c135e0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562020c13570 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x562020c13550 <col:31> 'int' 48
|-FieldDecl 0x562020c13608 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x562020c13668 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x562020c136c8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x562020c13800 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x562020c2a9d0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x562020c2aa30 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x562020c2aae0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x562020c2ad08 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x562020c2ac10 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x562020c2ae58 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x562020c2adc8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x562020c2b128 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x562020c2af18 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x562020c2af98 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x562020c2b040 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x562020c2b338 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x562020c2b1f0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x562020c2b268 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x562020c2b408 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x562020c2b558 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x562020c2b4c0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x562020c2b8e8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x562020c2b618 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x562020c2b698 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x562020c2b740 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x562020c2b7f8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x562020c2bb10 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x562020c2b9c0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x562020c2ba38 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x562020c2be28 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x562020c2bbc0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x562020c2bd88 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x562020c2bc98 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class EtherAddressArg
         0 |   int flags_
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562020ba1488 <../dummy_inc/click/etheraddress.hh:205:1, line:224:1> line:205:7 referenced class EtherAddressArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x562020ba15a8 <col:1, col:7> col:7 implicit referenced class EtherAddressArg
|-AccessSpecDecl 0x562020ba1638 <col:25, col:31> col:25 public
|-TypedefDecl 0x562020ba1670 <line:206:5, col:18> col:18 enable_direct_parse 'void'
| `-BuiltinType 0x56202061a2d0 'void'
|-CXXConstructorDecl 0x562020ba17b8 <line:207:5, col:53> col:5 used EtherAddressArg 'void (int)'
| |-ParmVarDecl 0x562020ba16e0 <col:21, col:33> col:25 used flags 'int' cinit
| | `-IntegerLiteral 0x562020ba2a40 <col:33> 'int' 0
| |-CXXCtorInitializer Field 0x562020ba2370 'flags_' 'int'
| | `-ImplicitCastExpr 0x562020ba2ae0 <col:45> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x562020ba2aa0 <col:45> 'int' lvalue ParmVar 0x562020ba16e0 'flags' 'int'
| `-CompoundStmt 0x562020ba2b28 <col:52, col:53>
|-CXXMethodDecl 0x562020ba1a78 <line:208:5, line:210:5> line:208:17 used parse 'bool (const String &, EtherAddress &, const ArgContext &)' inline
| |-ParmVarDecl 0x562020ba1878 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x562020ba1918 <col:42, col:56> col:56 used value 'EtherAddress &'
| |-ParmVarDecl 0x562020ba1990 <col:63, col:88> col:81 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x562020ba2a60 <col:88> 'const ArgContext' lvalue Var 0x562020ba1420 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x562020ba2d08 <col:100, line:210:5>
|   `-ReturnStmt 0x562020ba2cf8 <line:209:9, col:46>
|     `-CallExpr 0x562020ba2ca0 <col:16, col:46> 'bool'
|       |-ImplicitCastExpr 0x562020ba2c88 <col:16> 'bool (*)(const String &, EtherAddress &, const ArgContext &, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x562020ba2c40 <col:16> 'bool (const String &, EtherAddress &, const ArgContext &, int)' lvalue CXXMethod 0x562020ba2638 'parse' 'bool (const String &, EtherAddress &, const ArgContext &, int)'
|       |-DeclRefExpr 0x562020ba2ba0 <col:22> 'const String' lvalue ParmVar 0x562020ba1878 'str' 'const String &'
|       |-DeclRefExpr 0x562020ba2bc0 <col:27> 'EtherAddress' lvalue ParmVar 0x562020ba1918 'value' 'EtherAddress &'
|       |-DeclRefExpr 0x562020ba2be0 <col:34> 'const ArgContext' lvalue ParmVar 0x562020ba1990 'args' 'const ArgContext &'
|       `-ImplicitCastExpr 0x562020ba2ce0 <col:40> 'int' <LValueToRValue>
|         `-MemberExpr 0x562020ba2c10 <col:40> 'int' lvalue ->flags_ 0x562020ba2370
|           `-CXXThisExpr 0x562020ba2c00 <col:40> 'EtherAddressArg *' implicit this
|-CXXMethodDecl 0x562020ba1d18 <line:211:5, line:213:5> line:211:17 parse 'bool (const String &, unsigned char *, const ArgContext &)' inline
| |-ParmVarDecl 0x562020ba1b40 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x562020ba1bc0 <col:42, col:57> col:57 used value 'unsigned char *'
| |-ParmVarDecl 0x562020ba1c38 <col:64, col:89> col:82 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x562020ba2a80 <col:89> 'const ArgContext' lvalue Var 0x562020ba1420 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x562020ba2ee0 <col:101, line:213:5>
|   `-ReturnStmt 0x562020ba2ed0 <line:212:2, col:66>
|     `-CXXMemberCallExpr 0x562020ba2e98 <col:9, col:66> 'bool'
|       |-MemberExpr 0x562020ba2e68 <col:9> '<bound member function type>' ->parse 0x562020ba1a78
|       | `-CXXThisExpr 0x562020ba2e58 <col:9> 'EtherAddressArg *' implicit this
|       |-DeclRefExpr 0x562020ba2d88 <col:15> 'const String' lvalue ParmVar 0x562020ba1b40 'str' 'const String &'
|       |-UnaryOperator 0x562020ba2e20 <col:20, col:59> 'EtherAddress' lvalue prefix '*' cannot overflow
|       | `-CXXReinterpretCastExpr 0x562020ba2df0 <col:21, col:59> 'EtherAddress *' reinterpret_cast<class EtherAddress *> <BitCast>
|       |   `-ImplicitCastExpr 0x562020ba2dd8 <col:54> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|       |     `-DeclRefExpr 0x562020ba2da8 <col:54> 'unsigned char *' lvalue ParmVar 0x562020ba1bc0 'value' 'unsigned char *'
|       `-DeclRefExpr 0x562020ba2e38 <col:62> 'const ArgContext' lvalue ParmVar 0x562020ba1c38 'args' 'const ArgContext &'
|-CXXMethodDecl 0x562020ba1fd8 <line:214:5, line:216:5> line:214:17 used direct_parse 'bool (const String &, EtherAddress &, Args &)' inline
| |-ParmVarDecl 0x562020ba1de0 <col:30, col:44> col:44 used str 'const String &'
| |-ParmVarDecl 0x562020ba1e58 <col:49, col:63> col:63 used value 'EtherAddress &'
| |-ParmVarDecl 0x562020ba1ef8 <col:70, col:76> col:76 used args 'Args &'
| `-CompoundStmt 0x562020ba30c8 <col:82, line:216:5>
|   `-ReturnStmt 0x562020ba30b8 <line:215:9, col:53>
|     `-CallExpr 0x562020ba3060 <col:16, col:53> 'bool'
|       |-ImplicitCastExpr 0x562020ba3048 <col:16> 'bool (*)(const String &, EtherAddress &, Args &, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x562020ba3000 <col:16> 'bool (const String &, EtherAddress &, Args &, int)' lvalue CXXMethod 0x562020ba2968 'direct_parse' 'bool (const String &, EtherAddress &, Args &, int)'
|       |-DeclRefExpr 0x562020ba2f60 <col:29> 'const String' lvalue ParmVar 0x562020ba1de0 'str' 'const String &'
|       |-DeclRefExpr 0x562020ba2f80 <col:34> 'EtherAddress' lvalue ParmVar 0x562020ba1e58 'value' 'EtherAddress &'
|       |-DeclRefExpr 0x562020ba2fa0 <col:41> 'Args' lvalue ParmVar 0x562020ba1ef8 'args' 'Args &'
|       `-ImplicitCastExpr 0x562020ba30a0 <col:47> 'int' <LValueToRValue>
|         `-MemberExpr 0x562020ba2fd0 <col:47> 'int' lvalue ->flags_ 0x562020ba2370
|           `-CXXThisExpr 0x562020ba2fc0 <col:47> 'EtherAddressArg *' implicit this
|-CXXMethodDecl 0x562020ba2278 <line:217:5, line:219:5> line:217:17 direct_parse 'bool (const String &, unsigned char *, Args &)' inline
| |-ParmVarDecl 0x562020ba20a0 <col:30, col:44> col:44 used str 'const String &'
| |-ParmVarDecl 0x562020ba2120 <col:49, col:64> col:64 used value 'unsigned char *'
| |-ParmVarDecl 0x562020ba2198 <col:71, col:77> col:77 used args 'Args &'
| `-CompoundStmt 0x562020ba32a0 <col:83, line:219:5>
|   `-ReturnStmt 0x562020ba3290 <line:218:2, col:73>
|     `-CXXMemberCallExpr 0x562020ba3258 <col:9, col:73> 'bool'
|       |-MemberExpr 0x562020ba3228 <col:9> '<bound member function type>' ->direct_parse 0x562020ba1fd8
|       | `-CXXThisExpr 0x562020ba3218 <col:9> 'EtherAddressArg *' implicit this
|       |-DeclRefExpr 0x562020ba3148 <col:22> 'const String' lvalue ParmVar 0x562020ba20a0 'str' 'const String &'
|       |-UnaryOperator 0x562020ba31e0 <col:27, col:66> 'EtherAddress' lvalue prefix '*' cannot overflow
|       | `-CXXReinterpretCastExpr 0x562020ba31b0 <col:28, col:66> 'EtherAddress *' reinterpret_cast<class EtherAddress *> <BitCast>
|       |   `-ImplicitCastExpr 0x562020ba3198 <col:61> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|       |     `-DeclRefExpr 0x562020ba3168 <col:61> 'unsigned char *' lvalue ParmVar 0x562020ba2120 'value' 'unsigned char *'
|       `-DeclRefExpr 0x562020ba31f8 <col:69> 'Args' lvalue ParmVar 0x562020ba2198 'args' 'Args &'
|-AccessSpecDecl 0x562020ba2330 <line:220:3, col:10> col:3 private
|-FieldDecl 0x562020ba2370 <line:221:5, col:9> col:9 referenced flags_ 'int'
|-CXXMethodDecl 0x562020ba2638 <line:222:5, col:96> col:17 used parse 'bool (const String &, EtherAddress &, const ArgContext &, int)' static
| |-ParmVarDecl 0x562020ba23d0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x562020ba2448 <col:42, col:56> col:56 value 'EtherAddress &'
| |-ParmVarDecl 0x562020ba24c0 <col:63, col:81> col:81 args 'const ArgContext &'
| `-ParmVarDecl 0x562020ba2540 <col:87, col:91> col:91 flags 'int'
|-CXXMethodDecl 0x562020ba2968 <line:223:5, col:91> col:17 used direct_parse 'bool (const String &, EtherAddress &, Args &, int)' static
| |-ParmVarDecl 0x562020ba2708 <col:30, col:44> col:44 str 'const String &'
| |-ParmVarDecl 0x562020ba2780 <col:49, col:63> col:63 value 'EtherAddress &'
| |-ParmVarDecl 0x562020ba27f8 <col:70, col:76> col:76 args 'Args &'
| `-ParmVarDecl 0x562020ba2878 <col:82, col:86> col:86 flags 'int'
|-CXXConstructorDecl 0x562020c6eea8 <line:205:7> col:7 implicit constexpr EtherAddressArg 'void (const EtherAddressArg &)' inline default trivial noexcept-unevaluated 0x562020c6eea8
| `-ParmVarDecl 0x562020c6efb8 <col:7> col:7 'const EtherAddressArg &'
|-CXXConstructorDecl 0x562020c6f058 <col:7> col:7 implicit used constexpr EtherAddressArg 'void (EtherAddressArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x562020c6f168 <col:7> col:7 used 'EtherAddressArg &&'
| |-CXXCtorInitializer Field 0x562020ba2370 'flags_' 'int'
| | `-ImplicitCastExpr 0x562020c6f9e8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x562020c6f9a0 <col:7> 'int' xvalue .flags_ 0x562020ba2370
| |     `-CXXStaticCastExpr 0x562020c6f970 <col:7> 'EtherAddressArg' xvalue static_cast<class EtherAddressArg &&> <NoOp>
| |       `-DeclRefExpr 0x562020c6f940 <col:7> 'EtherAddressArg' lvalue ParmVar 0x562020c6f168 '' 'EtherAddressArg &&'
| `-CompoundStmt 0x562020c6fa30 <col:7>
`-CXXDestructorDecl 0x562020c6f230 <col:7> col:7 implicit referenced ~EtherAddressArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.EtherAddressArg = type { i32 }
  NonVirtualBaseLLVMType:%class.EtherAddressArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56202093a8c0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56202093a9d8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x56202093aa68 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x56202093ab38 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x56202093ac20 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x56202093ae38 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x56202093ace0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56202093afe8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x56202093aef0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x56202093b130 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x56202093b0a0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x56202093b278 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x56202093b1e8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56202093b3c0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x56202093b330 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56202093b488 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x56202093b5d0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x56202093b540 <col:28> col:31 'int'
|-CXXMethodDecl 0x56202093b698 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x56202093b7e0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x56202093b750 <col:28> col:31 'int'
|-CXXMethodDecl 0x56202093b958 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x56202093b898 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56202093baa0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x56202093ba10 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56202093bb68 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x56202093bd28 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x56202093bc18 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56202093bc90 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56202093bf78 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x56202093bde8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56202093be60 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56202093c028 <col:86> "" ""
|-CXXMethodDecl 0x56202093c298 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x56202093c108 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x56202093c180 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56202093c448 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x56202093c358 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x56202093c5f8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x56202093c500 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x56202093c8c8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x56202093c6b0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x56202093c728 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56202093c7a0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56202093cba8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x56202093c990 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x56202093ca08 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56202093ca80 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56202093cc60 <col:115> "" ""
|-AccessSpecDecl 0x56202093ccd0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x56202093cd08 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56202093e220 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x56202093e220
| `-ParmVarDecl 0x56202093e328 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x56202093e3c8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x56202093e3c8
| `-ParmVarDecl 0x56202093e4d8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x562020973b08 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x562020b65900 <col:7>
|-CXXConstructorDecl 0x562020973be0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x562020973be0
| `-ParmVarDecl 0x562020973cf8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x562020973d68 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x562020973d68
| `-ParmVarDecl 0x562020973e78 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x562020b68300 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562020b544a8 prev 0x562020b496b0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x562020b545a0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x562020b54690 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x562020b547b8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x562020b54938 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x562020b54ab8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x562020b54c38 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x562020b65a68 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x562020b662d8 <col:11>
|-CXXDestructorDecl 0x562020b65b40 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x562020b65c78 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x562020b65c78
| `-ParmVarDecl 0x562020b65d88 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x562020b65e28 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x562020b65e28
| `-ParmVarDecl 0x562020b65f38 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x562020b68cf8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x562020b68e08 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x562020b69088 <col:11>
|   `-ReturnStmt 0x562020b69078 <col:11>
|     `-UnaryOperator 0x562020b69060 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x562020b69050 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x562020b68e78 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x562020b68e78
  `-ParmVarDecl 0x562020b68f88 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562020b54ca0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x562020b54db8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x562020b54e58 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x562020b54ec0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x562020b54f28 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x562020b54f90 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x562020b54ff0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x562020b550b0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x562020b55110 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x562020b55170 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x562020b65978 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x562020b54e58 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x562020b662e8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x562020b66340 <col:12>
|-CXXConstructorDecl 0x562020b65fa8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x562020b65fa8
| `-ParmVarDecl 0x562020b660b8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x562020b66158 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x562020b66158
| `-ParmVarDecl 0x562020b66268 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x562020b683e0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562020b42dc0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x562020b42ed8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x562020b42f68 <col:16, col:22> col:16 public
|-EnumDecl 0x562020b42f90 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x562020b43090 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x562020b43170 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020b43070 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x562020b43050 <col:21> 'int' 28
| `-EnumConstantDecl 0x562020b43120 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x562020b43188 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562020b43100 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x562020b430e0 <col:22> 'int' 64
|-CXXMethodDecl 0x562020b434c8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x562020b431b0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x562020b43230 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x562020b432a8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x562020b43320 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x562020b43588 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x562020b43788 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x562020b43600 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x562020b43678 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x562020b43838 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x562020b43998 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x562020b438a8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x562020b43a40 <col:72> warn_unused_result ""
|-TypedefDecl 0x562020b43da0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x562020b43d30 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x562020b43cd0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x562020b43c90 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x56202061a2d0 'void'
|       |-PointerType 0x5620208c3160 'unsigned char *'
|       | `-BuiltinType 0x56202061a3d0 'unsigned char'
|       |-TypedefType 0x5620206bf6d0 'size_t' sugar
|       | |-Typedef 0x56202068ab20 'size_t'
|       | `-BuiltinType 0x56202061a430 'unsigned long'
|       `-PointerType 0x56202061aad0 'void *'
|         `-BuiltinType 0x56202061a2d0 'void'
|-CXXMethodDecl 0x562020b44218 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x562020b43e10 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x562020b43e88 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x562020b43f20 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x562020b43fa0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x562020b5e910 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x562020b5e8f8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x562020b5e8c0 <col:58> 'int' 0
| |-ParmVarDecl 0x562020b44020 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x562020b5e938 <col:76> 'int' 0
| |-ParmVarDecl 0x562020b440a0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x562020b5e958 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x562020b442e8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x562020b44368 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x562020b44428 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x562020b444c8 <col:20>
| `-OptimizeNoneAttr 0x562020b44520 <col:30>
|-CXXMethodDecl 0x562020b44598 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x562020b44638 <col:20>
| `-OptimizeNoneAttr 0x562020b44690 <col:30>
|-CXXMethodDecl 0x562020b44708 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x562020b447a8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x562020b44858 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x562020b448f8 <col:20>
| |-OptimizeNoneAttr 0x562020b44950 <col:30>
| `-WarnUnusedResultAttr 0x562020b44978 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x562020b449d0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x562020b44a70 <col:20>
| `-OptimizeNoneAttr 0x562020b44ac8 <col:30>
|-CXXMethodDecl 0x562020b44b18 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x562020b44bb8 <col:20>
| `-OptimizeNoneAttr 0x562020b44c10 <col:30>
|-CXXMethodDecl 0x562020b44c58 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x562020b44cf8 <col:20>
| `-OptimizeNoneAttr 0x562020b44d50 <col:30>
|-CXXMethodDecl 0x562020b44d98 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x562020b44e58 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x562020b44f20 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x562020b44fe8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x562020b450a8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x562020b451c8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x562020b5ea20 <col:54, line:99:5>
|   `-ReturnStmt 0x562020b5ea10 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x562020b5e9f8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x562020b5e9c8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x562020b554a8
|         `-CXXThisExpr 0x562020b5e9b8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x562020b45368 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x562020b45278 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x562020b5ead0 <col:67, line:103:5>
|   `-BinaryOperator 0x562020b5eab0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x562020b5ea48 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x562020b554a8
|     | `-CXXThisExpr 0x562020b5ea38 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x562020b5ea98 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x562020b5ea78 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x562020b45278 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x562020b45460 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x562020b5eb50 <col:33, line:107:5>
|   `-ReturnStmt 0x562020b5eb40 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x562020b5eb28 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x562020b5eaf8 <col:16> 'void *' lvalue ->_destructor_argument 0x562020b55510
|         `-CXXThisExpr 0x562020b5eae8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x562020b45520 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x562020b5f180 <col:25, line:113:5>
|   |-ParenExpr 0x562020b5eec8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x562020b5ee98 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x562020b5ec08 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x562020b5ebe0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x562020b5eba8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x562020b5eb78 <col:24> '<bound member function type>' ->shared 0x562020b44598
|   |   |       `-ImplicitCastExpr 0x562020b5ebc8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x562020b5eb68 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x562020b5ec68 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562020b5ec48 <col:42> 'int' 0
|   |   `-CallExpr 0x562020b5edf8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x562020b5ede0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562020b5edc0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5620206b64e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562020b5ee38 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562020b5ecd8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x562020b5ee50 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562020b5ed00 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562020b5ee68 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562020b5ed38 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x562020b5ee80 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562020b5eda8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562020b5ed90 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562020b5ed58 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x562020b5f0c8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x562020b5eef8 <col:2> 'unsigned char *' lvalue ->_head 0x562020b552b0
|   | | `-CXXThisExpr 0x562020b5eee8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x562020b5f0b0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x562020b5f090 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x562020b5ef38 <col:10> 'unsigned char *' lvalue ->_data 0x562020b55318
|   |     | `-CXXThisExpr 0x562020b5ef28 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x562020b5f078 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x562020b5f058 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x562020b5ef78 <col:18> 'unsigned char *' lvalue ->_tail 0x562020b55380
|   |         | `-CXXThisExpr 0x562020b5ef68 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x562020b5f040 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x562020b5f020 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x562020b5efb8 <col:26> 'unsigned char *' lvalue ->_end 0x562020b553e8
|   |             | `-CXXThisExpr 0x562020b5efa8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x562020b5f008 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x562020b5efe8 <col:33> 'int' 0
|   `-BinaryOperator 0x562020b5f160 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x562020b5f0f8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x562020b554a8
|     | `-CXXThisExpr 0x562020b5f0e8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x562020b5f148 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x562020b5f128 <col:16> 'int' 0
|-CXXMethodDecl 0x562020b45660 <line:141:5, col:109> col:56 used push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x562020b455d0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x562020b45708 <col:20>
| |-OptimizeNoneAttr 0x562020b45760 <col:30>
| `-WarnUnusedResultAttr 0x562020b45788 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x562020b45858 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x562020b457c8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x562020b45900 <col:20>
| |-OptimizeNoneAttr 0x562020b45958 <col:30>
| `-WarnUnusedResultAttr 0x562020b45980 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x562020b45ab8 <line:171:5, col:76> col:13 used nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x562020b459c0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x562020b45b60 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x562020b45c60 <line:187:5, col:62> col:45 used pull 'void (uint32_t)'
| |-ParmVarDecl 0x562020b45bd0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x562020b45d08 <col:20>
| `-OptimizeNoneAttr 0x562020b45d60 <col:30>
|-CXXMethodDecl 0x562020b45e28 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x562020b45d98 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x562020b45ed0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x562020b45fd0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x562020b45f40 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x562020b46078 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x562020b46178 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x562020b460e8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x562020b46220 <col:20>
| `-OptimizeNoneAttr 0x562020b46278 <col:30>
|-CXXMethodDecl 0x562020b46408 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x562020b462b8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x562020b46330 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x562020b5e978 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x562020b464b8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x562020b466b8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x562020b46530 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x562020b465a8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562020b468c8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x562020b46778 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x562020b467f0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562020b46ad8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x562020b46988 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x562020b46a08 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x562020b5e988 <col:39> 'int' 0
|-CXXMethodDecl 0x562020b46ba8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x562020b46c70 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x562020b46d38 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x562020b46df8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x562020b46ec0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x562020b47008 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x562020b46f78 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x562020b471d8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x562020b470c8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x562020b47140 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562020b472a8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x562020b47368 <line:288:5, col:66> col:45 used has_network_header 'bool () const'
| |-NoInlineAttr 0x562020b47408 <col:20>
| `-OptimizeNoneAttr 0x562020b47460 <col:30>
|-CXXMethodDecl 0x562020b474b0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x562020b47550 <col:20>
| `-OptimizeNoneAttr 0x562020b475a8 <col:30>
|-CXXMethodDecl 0x562020b475f8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x562020b476b8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x562020b47780 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x562020b47820 <col:20>
| `-OptimizeNoneAttr 0x562020b47878 <col:30>
|-CXXMethodDecl 0x562020b479c8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x562020b478b8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x562020b47930 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562020b47b18 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x562020b47a88 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562020b47bf0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x562020b47cb0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x562020b47d50 <col:20>
| `-OptimizeNoneAttr 0x562020b47da8 <col:30>
|-CXXMethodDecl 0x562020b47df8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x562020b47e98 <col:20>
| `-OptimizeNoneAttr 0x562020b47ef0 <col:30>
|-CXXMethodDecl 0x562020b47f40 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x562020b48008 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x562020b480a8 <col:20>
| `-OptimizeNoneAttr 0x562020b48100 <col:30>
|-CXXMethodDecl 0x562020b48148 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x562020b48268 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x562020b483d8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x562020b48318 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x562020b484c8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x562020b48568 <col:20>
| `-OptimizeNoneAttr 0x562020b485c0 <col:30>
|-CXXMethodDecl 0x562020b48610 <line:308:5, col:35> col:16 used ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x562020b486d0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x562020b48908 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x562020b48780 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x562020b487f8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x562020b489b8 <col:20>
| `-OptimizeNoneAttr 0x562020b48a10 <col:30>
|-CXXMethodDecl 0x562020b48ab8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x562020b48b58 <col:20>
| `-OptimizeNoneAttr 0x562020b48bb0 <col:30>
|-CXXMethodDecl 0x562020b48c00 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x562020b48ca0 <col:20>
| `-OptimizeNoneAttr 0x562020b48cf8 <col:30>
|-CXXMethodDecl 0x562020b48d40 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x562020b48de0 <col:20>
| `-OptimizeNoneAttr 0x562020b48e38 <col:30>
|-CXXMethodDecl 0x562020b48f38 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x562020b48e70 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x562020b48fe0 <col:20>
| `-OptimizeNoneAttr 0x562020b49038 <col:30>
|-CXXMethodDecl 0x562020b491f8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x562020b49070 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x562020b490e8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x562020b492a8 <col:20>
| `-OptimizeNoneAttr 0x562020b49300 <col:30>
|-CXXMethodDecl 0x562020b493a8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x562020b494c8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x562020b495e8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x562020b49688 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x562020b496b0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x562020b497d8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x562020b49878 <col:20>
| `-OptimizeNoneAttr 0x562020b498d0 <col:30>
|-CXXMethodDecl 0x562020b49978 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x562020b49a18 <col:20>
| `-OptimizeNoneAttr 0x562020b49a70 <col:30>
|-AccessSpecDecl 0x562020b49a98 <line:344:3, col:9> col:3 public
|-EnumDecl 0x562020b49ac0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x562020b49bc0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x562020b49c10 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562020b49ba0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x562020b49b80 <col:14> 'int' 48
|-CXXMethodDecl 0x562020b49c78 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x562020b49d18 <col:20>
| `-OptimizeNoneAttr 0x562020b49d70 <col:30>
|-CXXMethodDecl 0x562020b49de8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x562020b49e88 <col:20>
| `-OptimizeNoneAttr 0x562020b49ee0 <col:30>
|-CXXMethodDecl 0x562020b49fa8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x562020b49f18 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x562020b4a148 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x562020b4a2e8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x562020b4a1f8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x562020b4a390 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x562020b4a490 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x562020b4a840 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020b4a470 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x562020b4a450 <col:9> 'int' 0
| |-EnumConstantDecl 0x562020b4a520 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x562020b4a858 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020b4a500 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x562020b4a4e0 <col:14> 'int' 1
| |-EnumConstantDecl 0x562020b4a5b0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x562020b4a870 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020b4a590 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x562020b4a570 <col:14> 'int' 2
| |-EnumConstantDecl 0x562020b4a640 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x562020b4a888 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020b4a620 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x562020b4a600 <col:14> 'int' 3
| |-EnumConstantDecl 0x562020b4a6d0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x562020b4a8a0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020b4a6b0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x562020b4a690 <col:13> 'int' 4
| |-EnumConstantDecl 0x562020b4a760 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x562020b4a8b8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020b4a740 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x562020b4a720 <col:13> 'int' 5
| `-EnumConstantDecl 0x562020b4a7f0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x562020b4a8d0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562020b4a7d0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x562020b4a7b0 <col:14> 'int' 6
|-CXXMethodDecl 0x562020b4a938 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x562020b4a9d8 <col:20>
| `-OptimizeNoneAttr 0x562020b4aa30 <col:30>
|-CXXMethodDecl 0x562020b4ab28 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x562020b4aa68 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x562020b4abd0 <col:20>
| `-OptimizeNoneAttr 0x562020b4ac28 <col:30>
|-CXXMethodDecl 0x562020b4ac98 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x562020b4adc0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x562020b4af38 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x562020b4ae70 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x562020b4b000 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x562020b4b0c8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x562020b4b208 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x562020b4b178 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x562020b4b2b0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x562020b4b3b0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x562020b4b5b0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020b4b390 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x562020b4b370 <col:23> 'int' 0
| |-EnumConstantDecl 0x562020b4b440 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x562020b4b5c8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020b4b420 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x562020b4b400 <col:45> 'int' 4
| |-EnumConstantDecl 0x562020b4b4d0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x562020b4b5e0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020b4b4b0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x562020b4b490 <col:24> 'int' 0
| `-EnumConstantDecl 0x562020b4b560 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x562020b4b5f8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562020b4b540 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x562020b4b520 <col:47> 'int' 16
|-CXXMethodDecl 0x562020b4b658 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x562020b4b7c8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x562020b4b708 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x562020b4b870 <col:20>
| `-OptimizeNoneAttr 0x562020b4b8c8 <col:30>
|-CXXMethodDecl 0x562020b4b918 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x562020b5f2a0 <col:18, col:36>
|   `-ReturnStmt 0x562020b5f290 <col:20, col:33>
|     `-ImplicitCastExpr 0x562020b5f278 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x562020b5f258 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x562020b5f228 <col:27> '<bound member function type>' ->xanno 0x562020b49978
|           `-CXXThisExpr 0x562020b5f218 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x562020b4ba10 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x562020b5f3b0 <col:30, col:48>
|   `-ReturnStmt 0x562020b5f3a0 <col:32, col:45>
|     `-ImplicitCastExpr 0x562020b5f388 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x562020b5f368 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x562020b5f338 <col:39> '<bound member function type>' ->xanno 0x562020b497d8
|           `-CXXThisExpr 0x562020b5f328 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x562020b4baf8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x562020b5f548 <col:24, col:50>
|   `-ReturnStmt 0x562020b5f538 <col:26, col:47>
|     `-UnaryOperator 0x562020b5f520 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x562020b5f500 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x562020b5f4e8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x562020b5f498 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x562020b547b8
|         |   `-CXXMemberCallExpr 0x562020b5f478 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x562020b5f448 <col:34> '<bound member function type>' ->xanno 0x562020b49978
|         |       `-CXXThisExpr 0x562020b5f438 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x562020b5f4c8 <col:46> 'int' 0
|-CXXMethodDecl 0x562020b4bc00 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x562020b5f718 <col:36, col:62>
|   `-ReturnStmt 0x562020b5f708 <col:38, col:59>
|     `-UnaryOperator 0x562020b5f6f0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x562020b5f6d0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x562020b5f6b8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x562020b5f630 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x562020b547b8
|         |   `-CXXMemberCallExpr 0x562020b5f610 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x562020b5f5e0 <col:46> '<bound member function type>' ->xanno 0x562020b497d8
|         |       `-CXXThisExpr 0x562020b5f5d0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x562020b5f660 <col:58> 'int' 0
|-CXXMethodDecl 0x562020b4bd18 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x562020b5f8b0 <col:26, col:53>
|   `-ReturnStmt 0x562020b5f8a0 <col:28, col:50>
|     `-UnaryOperator 0x562020b5f888 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x562020b5f868 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x562020b5f850 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x562020b5f800 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x562020b54ab8
|         |   `-CXXMemberCallExpr 0x562020b5f7e0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x562020b5f7b0 <col:36> '<bound member function type>' ->xanno 0x562020b49978
|         |       `-CXXThisExpr 0x562020b5f7a0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x562020b5f830 <col:49> 'int' 0
|-CXXMethodDecl 0x562020b4be38 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x562020b5fa88 <col:38, col:65>
|   `-ReturnStmt 0x562020b5fa78 <col:40, col:62>
|     `-UnaryOperator 0x562020b5fa60 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x562020b5fa40 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x562020b5fa28 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x562020b5f998 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x562020b54ab8
|         |   `-CXXMemberCallExpr 0x562020b5f978 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x562020b5f948 <col:48> '<bound member function type>' ->xanno 0x562020b497d8
|         |       `-CXXThisExpr 0x562020b5f938 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x562020b5f9c8 <col:61> 'int' 0
|-CXXMethodDecl 0x562020b4bfe8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x562020b4bef0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x562020b60158 <col:34, line:463:5>
|   |-ParenExpr 0x562020b5ffa0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x562020b5ff70 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x562020b5fbd8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562020b5fba8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562020b5faf8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562020b5fae0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562020b5faa0 <col:23> 'int' lvalue ParmVar 0x562020b4bef0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562020b5fac0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562020b5fb88 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562020b5fb58 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562020b5fb18 <col:33> 'int' lvalue ParmVar 0x562020b4bef0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x562020b5fb70 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x562020b5fb38 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562020b49bc0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x562020b5fc38 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562020b5fc18 <col:56> 'int' 0
|   |   `-CallExpr 0x562020b5fed0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x562020b5feb8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562020b5fe98 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5620206b64e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562020b5ff10 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562020b5fd28 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x562020b5ff28 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562020b5fd58 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562020b5ff40 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562020b5fd90 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x562020b5ff58 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562020b5fe80 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562020b5fe68 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562020b5fe28 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x562020b60148 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x562020b60130 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x562020b60110 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x562020b600e0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x562020b60090 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x562020b547b8
|         |   `-CXXMemberCallExpr 0x562020b60070 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x562020b60040 <col:9> '<bound member function type>' ->xanno 0x562020b497d8
|         |       `-CXXThisExpr 0x562020b60030 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x562020b600f8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x562020b600c0 <col:21> 'int' lvalue ParmVar 0x562020b4bef0 'i' 'int'
|-CXXMethodDecl 0x562020b4c238 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x562020b4c0a8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x562020b4c120 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x562020b607e8 <col:40, line:472:5>
|   |-ParenExpr 0x562020b60600 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x562020b605d0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x562020b602b0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562020b60280 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562020b601d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562020b601b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562020b60178 <col:23> 'int' lvalue ParmVar 0x562020b4c0a8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562020b60198 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562020b60260 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562020b60230 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562020b601f0 <col:33> 'int' lvalue ParmVar 0x562020b4c0a8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x562020b60248 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x562020b60210 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562020b49bc0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x562020b60310 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562020b602f0 <col:56> 'int' 0
|   |   `-CallExpr 0x562020b60530 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x562020b60518 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562020b604f8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5620206b64e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562020b60570 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562020b60380 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x562020b60588 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562020b603b0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562020b605a0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562020b603e8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x562020b605b8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562020b604e0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562020b604c8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562020b60488 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x562020b607c8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x562020b60770 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x562020b60740 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x562020b606f0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x562020b547b8
|     | |   `-CXXMemberCallExpr 0x562020b606d0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x562020b606a0 <col:2> '<bound member function type>' ->xanno 0x562020b49978
|     | |       `-CXXThisExpr 0x562020b60690 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x562020b60758 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x562020b60720 <col:14> 'int' lvalue ParmVar 0x562020b4c0a8 'i' 'int'
|     `-ImplicitCastExpr 0x562020b607b0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x562020b60790 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x562020b4c120 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x562020b4c3f8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x562020b4c300 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x562020b60f68 <col:36, line:485:5>
|   |-ParenExpr 0x562020b60cd0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x562020b60ca0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x562020b60980 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562020b60950 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562020b60860 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562020b60848 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562020b60808 <col:23> 'int' lvalue ParmVar 0x562020b4c300 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562020b60828 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562020b60930 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562020b60918 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562020b60880 <col:33> 'int' lvalue ParmVar 0x562020b4c300 'i' 'int'
|   |   |     `-BinaryOperator 0x562020b608f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562020b608e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562020b608a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562020b49bc0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x562020b608c0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x562020b609e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562020b609c0 <col:60> 'int' 0
|   |   `-CallExpr 0x562020b60c00 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x562020b60be8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562020b60bc8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5620206b64e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562020b60c40 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562020b60a50 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x562020b60c58 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562020b60a88 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562020b60c70 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562020b60ac0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x562020b60c88 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562020b60bb0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562020b60b98 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562020b60b58 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x562020b60f58 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x562020b60f40 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x562020b60f28 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x562020b60ef8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x562020b60e98 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x562020b60e68 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x562020b60de0 <col:61, col:70> 'char const[48]' lvalue ->c 0x562020b54690
|             |   `-CXXMemberCallExpr 0x562020b60dc0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x562020b60d90 <col:61> '<bound member function type>' ->xanno 0x562020b497d8
|             |       `-CXXThisExpr 0x562020b60d80 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x562020b60e80 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x562020b60e10 <col:74> 'int' lvalue ParmVar 0x562020b4c300 'i' 'int'
|-CXXMethodDecl 0x562020b4c648 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x562020b4c4b8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x562020b4c530 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x562020b616b8 <col:42, line:500:5>
|   |-ParenExpr 0x562020b61450 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x562020b61420 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x562020b61100 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562020b610d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562020b60fe0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562020b60fc8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562020b60f88 <col:23> 'int' lvalue ParmVar 0x562020b4c4b8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562020b60fa8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562020b610b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562020b61098 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562020b61000 <col:33> 'int' lvalue ParmVar 0x562020b4c4b8 'i' 'int'
|   |   |     `-BinaryOperator 0x562020b61078 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562020b61060 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562020b61020 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562020b49bc0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x562020b61040 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x562020b61160 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562020b61140 <col:60> 'int' 0
|   |   `-CallExpr 0x562020b61380 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x562020b61368 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562020b61348 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5620206b64e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562020b613c0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562020b611d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x562020b613d8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562020b61208 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562020b613f0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562020b61240 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x562020b61408 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562020b61330 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562020b61318 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562020b612d8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x562020b61698 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x562020b61648 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x562020b61618 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x562020b615c0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x562020b61590 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x562020b61540 <col:48, col:57> 'char [48]' lvalue ->c 0x562020b54690
|     |     |   `-CXXMemberCallExpr 0x562020b61520 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x562020b614f0 <col:48> '<bound member function type>' ->xanno 0x562020b49978
|     |     |       `-CXXThisExpr 0x562020b614e0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x562020b615a8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x562020b61570 <col:61> 'int' lvalue ParmVar 0x562020b4c4b8 'i' 'int'
|     `-ImplicitCastExpr 0x562020b61680 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x562020b61660 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x562020b4c530 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x562020b4c808 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x562020b4c710 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x562020b61e18 <col:35, line:513:5>
|   |-ParenExpr 0x562020b61b28 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x562020b61af8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x562020b61850 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562020b61820 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562020b61730 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562020b61718 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562020b616d8 <col:23> 'int' lvalue ParmVar 0x562020b4c710 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562020b616f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562020b61800 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562020b617e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562020b61750 <col:33> 'int' lvalue ParmVar 0x562020b4c710 'i' 'int'
|   |   |     `-BinaryOperator 0x562020b617c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562020b617b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562020b61770 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562020b49bc0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x562020b61790 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x562020b618b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562020b61890 <col:60> 'int' 0
|   |   `-CallExpr 0x562020b61a58 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x562020b61a40 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562020b61a20 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5620206b64e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562020b61a98 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562020b61920 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x562020b61ab0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562020b61958 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562020b61ac8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562020b61990 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x562020b61ae0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562020b61a08 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562020b619f0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562020b619b0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x562020b61e08 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x562020b61df0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x562020b61dd8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x562020b61da8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x562020b61d20 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x562020b61cf0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x562020b61ca0 <col:60, col:69> 'char const[48]' lvalue ->c 0x562020b54690
|             |   `-CXXMemberCallExpr 0x562020b61c80 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x562020b61c50 <col:60> '<bound member function type>' ->xanno 0x562020b497d8
|             |       `-CXXThisExpr 0x562020b61c40 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x562020b61d08 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x562020b61cd0 <col:73> 'int' lvalue ParmVar 0x562020b4c710 'i' 'int'
|-CXXMethodDecl 0x562020b4ca58 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x562020b4c8c8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x562020b4c940 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x562020b62538 <col:41, line:528:5>
|   |-ParenExpr 0x562020b622c0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x562020b62290 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x562020b61fb0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562020b61f80 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562020b61e90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562020b61e78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562020b61e38 <col:23> 'int' lvalue ParmVar 0x562020b4c8c8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562020b61e58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562020b61f60 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562020b61f48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562020b61eb0 <col:33> 'int' lvalue ParmVar 0x562020b4c8c8 'i' 'int'
|   |   |     `-BinaryOperator 0x562020b61f28 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562020b61f10 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562020b61ed0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562020b49bc0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x562020b61ef0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x562020b62010 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562020b61ff0 <col:60> 'int' 0
|   |   `-CallExpr 0x562020b621f0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x562020b621d8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562020b621b8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5620206b64e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562020b62230 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562020b62080 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x562020b62248 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562020b620b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562020b62260 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562020b620f0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x562020b62278 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562020b621a0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562020b62188 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562020b62148 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x562020b62518 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x562020b624c8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x562020b62498 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x562020b62440 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x562020b62400 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x562020b623b0 <col:47, col:56> 'char [48]' lvalue ->c 0x562020b54690
|     |     |   `-CXXMemberCallExpr 0x562020b62390 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x562020b62360 <col:47> '<bound member function type>' ->xanno 0x562020b49978
|     |     |       `-CXXThisExpr 0x562020b62350 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x562020b62418 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x562020b623e0 <col:60> 'int' lvalue ParmVar 0x562020b4c8c8 'i' 'int'
|     `-ImplicitCastExpr 0x562020b62500 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x562020b624e0 <col:65> 'int16_t':'short' lvalue ParmVar 0x562020b4c940 'x' 'int16_t':'short'
|-CXXMethodDecl 0x562020b4cc18 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x562020b4cb20 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x562020b62c08 <col:36, line:541:5>
|   |-ParenExpr 0x562020b629a8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x562020b62978 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x562020b626d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562020b626a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562020b625b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562020b62598 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562020b62558 <col:23> 'int' lvalue ParmVar 0x562020b4cb20 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562020b62578 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562020b62680 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562020b62668 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562020b625d0 <col:33> 'int' lvalue ParmVar 0x562020b4cb20 'i' 'int'
|   |   |     `-BinaryOperator 0x562020b62648 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562020b62630 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562020b625f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562020b49bc0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x562020b62610 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x562020b62730 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562020b62710 <col:60> 'int' 0
|   |   `-CallExpr 0x562020b628d8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x562020b628c0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562020b628a0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5620206b64e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562020b62918 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562020b627a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x562020b62930 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562020b627d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562020b62948 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562020b62810 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x562020b62960 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562020b62888 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562020b62870 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562020b62830 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x562020b62bf8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x562020b62be0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x562020b62bc8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x562020b62b98 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x562020b62b40 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x562020b62b10 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x562020b62ac0 <col:61, col:70> 'char const[48]' lvalue ->c 0x562020b54690
|             |   `-CXXMemberCallExpr 0x562020b62aa0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x562020b62a70 <col:61> '<bound member function type>' ->xanno 0x562020b497d8
|             |       `-CXXThisExpr 0x562020b62a60 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x562020b62b28 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x562020b62af0 <col:74> 'int' lvalue ParmVar 0x562020b4cb20 'i' 'int'
|-CXXMethodDecl 0x562020b4cde8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x562020b4ccd8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x562020b4cd50 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x562020b4ce98 <col:20>
| `-OptimizeNoneAttr 0x562020b4cef0 <col:30>
|-CXXMethodDecl 0x562020b4d028 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x562020b4cf30 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x562020b632d8 <col:35, line:562:5>
|   |-ParenExpr 0x562020b63078 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x562020b63048 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x562020b62da0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562020b62d70 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562020b62c80 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562020b62c68 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562020b62c28 <col:23> 'int' lvalue ParmVar 0x562020b4cf30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562020b62c48 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562020b62d50 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562020b62d38 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562020b62ca0 <col:33> 'int' lvalue ParmVar 0x562020b4cf30 'i' 'int'
|   |   |     `-BinaryOperator 0x562020b62d18 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562020b62d00 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562020b62cc0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562020b49bc0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x562020b62ce0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x562020b62e00 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562020b62de0 <col:60> 'int' 0
|   |   `-CallExpr 0x562020b62fa8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x562020b62f90 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562020b62f70 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5620206b64e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562020b62fe8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562020b62e70 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x562020b63000 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562020b62ea8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562020b63018 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562020b62ee0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x562020b63030 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562020b62f58 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562020b62f40 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562020b62f00 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x562020b632c8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x562020b632b0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x562020b63298 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x562020b63268 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x562020b63210 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x562020b631e0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x562020b63190 <col:60, col:69> 'char const[48]' lvalue ->c 0x562020b54690
|             |   `-CXXMemberCallExpr 0x562020b63170 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x562020b63140 <col:60> '<bound member function type>' ->xanno 0x562020b497d8
|             |       `-CXXThisExpr 0x562020b63130 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x562020b631f8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x562020b631c0 <col:73> 'int' lvalue ParmVar 0x562020b4cf30 'i' 'int'
|-CXXMethodDecl 0x562020b4d238 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x562020b4d0e8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x562020b4d160 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x562020b639b8 <col:41, line:577:5>
|   |-ParenExpr 0x562020b63748 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x562020b63718 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x562020b63470 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562020b63440 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562020b63350 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562020b63338 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562020b632f8 <col:23> 'int' lvalue ParmVar 0x562020b4d0e8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562020b63318 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562020b63420 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562020b63408 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562020b63370 <col:33> 'int' lvalue ParmVar 0x562020b4d0e8 'i' 'int'
|   |   |     `-BinaryOperator 0x562020b633e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562020b633d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562020b63390 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562020b49bc0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x562020b633b0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x562020b634d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562020b634b0 <col:60> 'int' 0
|   |   `-CallExpr 0x562020b63678 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x562020b63660 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562020b63640 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5620206b64e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562020b636b8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562020b63540 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x562020b636d0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562020b63578 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562020b636e8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562020b635b0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x562020b63700 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562020b63628 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562020b63610 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562020b635d0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x562020b63998 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x562020b63948 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x562020b63918 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x562020b638b8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x562020b63888 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x562020b63838 <col:47, col:56> 'char [48]' lvalue ->c 0x562020b54690
|     |     |   `-CXXMemberCallExpr 0x562020b63818 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x562020b637e8 <col:47> '<bound member function type>' ->xanno 0x562020b49978
|     |     |       `-CXXThisExpr 0x562020b637d8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x562020b638a0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x562020b63868 <col:60> 'int' lvalue ParmVar 0x562020b4d0e8 'i' 'int'
|     `-ImplicitCastExpr 0x562020b63980 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x562020b63960 <col:65> 'int32_t':'int' lvalue ParmVar 0x562020b4d160 'x' 'int32_t':'int'
|-CXXMethodDecl 0x562020b4d3f8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x562020b4d300 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x562020b640e8 <col:36, line:591:5>
|   |-ParenExpr 0x562020b63e28 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x562020b63df8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x562020b63b50 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562020b63b20 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562020b63a30 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562020b63a18 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562020b639d8 <col:23> 'int' lvalue ParmVar 0x562020b4d300 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562020b639f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562020b63b00 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562020b63ae8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562020b63a50 <col:33> 'int' lvalue ParmVar 0x562020b4d300 'i' 'int'
|   |   |     `-BinaryOperator 0x562020b63ac8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562020b63ab0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562020b63a70 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562020b49bc0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x562020b63a90 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x562020b63bb0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562020b63b90 <col:60> 'int' 0
|   |   `-CallExpr 0x562020b63d58 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x562020b63d40 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562020b63d20 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5620206b64e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562020b63d98 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562020b63c20 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x562020b63db0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562020b63c58 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562020b63dc8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562020b63c90 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x562020b63de0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562020b63d08 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562020b63cf0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562020b63cb0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x562020b640d8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x562020b640c0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x562020b640a8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x562020b64078 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x562020b63ff0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x562020b63fc0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x562020b63f70 <col:61, col:70> 'char const[48]' lvalue ->c 0x562020b54690
|             |   `-CXXMemberCallExpr 0x562020b63f50 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x562020b63f20 <col:61> '<bound member function type>' ->xanno 0x562020b497d8
|             |       `-CXXThisExpr 0x562020b63f10 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x562020b63fd8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x562020b63fa0 <col:74> 'int' lvalue ParmVar 0x562020b4d300 'i' 'int'
|-CXXMethodDecl 0x562020b4d648 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x562020b4d4b8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x562020b4d530 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x562020b647c8 <col:42, line:606:5>
|   |-ParenExpr 0x562020b64558 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x562020b64528 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x562020b64280 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562020b64250 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562020b64160 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562020b64148 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562020b64108 <col:23> 'int' lvalue ParmVar 0x562020b4d4b8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562020b64128 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562020b64230 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x562020b64218 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562020b64180 <col:33> 'int' lvalue ParmVar 0x562020b4d4b8 'i' 'int'
|   |   |     `-BinaryOperator 0x562020b641f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562020b641e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562020b641a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562020b49bc0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x562020b641c0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x562020b642e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562020b642c0 <col:60> 'int' 0
|   |   `-CallExpr 0x562020b64488 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x562020b64470 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562020b64450 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5620206b64e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562020b644c8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562020b64350 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x562020b644e0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562020b64388 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562020b644f8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562020b643c0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x562020b64510 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562020b64438 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562020b64420 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562020b643e0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x562020b647a8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x562020b64758 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x562020b64728 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x562020b646c8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x562020b64698 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x562020b64648 <col:48, col:57> 'char [48]' lvalue ->c 0x562020b54690
|     |     |   `-CXXMemberCallExpr 0x562020b64628 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x562020b645f8 <col:48> '<bound member function type>' ->xanno 0x562020b49978
|     |     |       `-CXXThisExpr 0x562020b645e8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x562020b646b0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x562020b64678 <col:61> 'int' lvalue ParmVar 0x562020b4d4b8 'i' 'int'
|     `-ImplicitCastExpr 0x562020b64790 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x562020b64770 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x562020b4d530 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x562020b4d7e0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x562020b4d710 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x562020b65038 <col:33, line:620:5>
|   |-ParenExpr 0x562020b64db0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x562020b64d80 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x562020b649d0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562020b649a0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562020b64840 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562020b64828 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562020b647e8 <col:23> 'int' lvalue ParmVar 0x562020b4d710 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562020b64808 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562020b64980 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x562020b64968 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562020b64860 <col:33> 'int' lvalue ParmVar 0x562020b4d710 'i' 'int'
|   |   |     `-BinaryOperator 0x562020b64948 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562020b64930 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562020b64880 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562020b49bc0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x562020b64908 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x562020b648f0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x562020b648b8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x562020b64a30 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562020b64a10 <col:79> 'int' 0
|   |   `-CallExpr 0x562020b64ce0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x562020b64cc8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562020b64ca8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5620206b64e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562020b64d20 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562020b64b18 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x562020b64d38 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562020b64b60 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562020b64d50 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562020b64b98 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x562020b64d68 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562020b64c90 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562020b64c78 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562020b64c38 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x562020b65028 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x562020b65010 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x562020b64ff8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x562020b64fc8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x562020b64f40 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x562020b64f10 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x562020b64ec0 <col:67, col:76> 'char const[48]' lvalue ->c 0x562020b54690
|             |   `-CXXMemberCallExpr 0x562020b64ea0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x562020b64e70 <col:67> '<bound member function type>' ->xanno 0x562020b497d8
|             |       `-CXXThisExpr 0x562020b64e60 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x562020b64f28 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x562020b64ef0 <col:80> 'int' lvalue ParmVar 0x562020b4d710 'i' 'int'
|-CXXMethodDecl 0x562020b4d9f8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x562020b4d8a0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x562020b4d920 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x562020b65860 <col:45, line:635:5>
|   |-ParenExpr 0x562020b655a8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x562020b65578 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x562020b65240 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x562020b65210 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x562020b650b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x562020b65098 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x562020b65058 <col:23> 'int' lvalue ParmVar 0x562020b4d8a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x562020b65078 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x562020b651f0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x562020b651d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x562020b650d0 <col:33> 'int' lvalue ParmVar 0x562020b4d8a0 'i' 'int'
|   |   |     `-BinaryOperator 0x562020b651b8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x562020b651a0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x562020b650f0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x562020b49bc0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x562020b65178 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x562020b65160 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x562020b65128 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x562020b652a0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x562020b65280 <col:79> 'int' 0
|   |   `-CallExpr 0x562020b654d8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x562020b654c0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x562020b654a0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5620206b64e0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x562020b65518 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562020b65310 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x562020b65530 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x562020b65358 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x562020b65548 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x562020b65390 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x562020b65560 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x562020b65488 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x562020b65470 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x562020b65428 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x562020b65840 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x562020b657a8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x562020b65778 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x562020b65718 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x562020b656e8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x562020b65698 <col:54, col:63> 'char [48]' lvalue ->c 0x562020b54690
|     |     |   `-CXXMemberCallExpr 0x562020b65678 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x562020b65648 <col:54> '<bound member function type>' ->xanno 0x562020b49978
|     |     |       `-CXXThisExpr 0x562020b65638 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x562020b65700 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x562020b656c8 <col:67> 'int' lvalue ParmVar 0x562020b4d8a0 'i' 'int'
|     `-CXXConstCastExpr 0x562020b65810 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x562020b657f8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x562020b657c0 <col:91> 'const void *' lvalue ParmVar 0x562020b4d920 'x' 'const void *'
|-CXXMethodDecl 0x562020b4dac8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x562020b658e8 <col:34, line:640:5>
|   `-ReturnStmt 0x562020b658d8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x562020b658c0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x562020b65890 <col:16> 'Packet *' lvalue ->_data_packet 0x562020b55248
|         `-CXXThisExpr 0x562020b65880 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x562020b4dc08 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x562020b4db78 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x562020b5e9a8 <col:46> 'bool' true
|-CXXMethodDecl 0x562020b4dd88 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x562020b4dcc0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x562020b4de30 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x562020b4e5e0 <line:660:22> "" ""
| |-EnumConstantDecl 0x562020b4df30 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562020b4e650 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020b4df10 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x562020b4def0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x562020b43090 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x562020b4dfc0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562020b4e668 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020b4dfa0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x562020b4df80 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x562020b43120 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x562020b4e050 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562020b4e680 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020b4e030 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x562020b4e010 <col:21> 'int' 0
| |-EnumConstantDecl 0x562020b4e0e0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562020b4e698 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020b4e0c0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x562020b4e0a0 <col:19> 'int' 16
| |-EnumConstantDecl 0x562020b4e170 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562020b4e6b0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020b4e150 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x562020b4e130 <col:21> 'int' 16
| |-EnumConstantDecl 0x562020b4e200 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562020b4e6c8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020b4e1e0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x562020b4e1c0 <col:19> 'int' 32
| |-EnumConstantDecl 0x562020b4e290 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562020b4e6e0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020b4e270 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x562020b4e250 <col:19> 'int' EnumConstant 0x562020b4e0e0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x562020b4e320 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562020b4e6f8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020b4e300 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x562020b4e2e0 <col:19> 'int' EnumConstant 0x562020b4e200 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x562020b4e3f0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562020b4e710 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020b4e3d0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x562020b4e3b0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x562020b4e370 <col:23> 'int' EnumConstant 0x562020b4e320 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x562020b4e390 <col:40> 'int' 2
| |-EnumConstantDecl 0x562020b4e4c0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x562020b4e728 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020b4e4a0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x562020b4e480 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x562020b4e440 <col:23> 'int' EnumConstant 0x562020b4e320 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x562020b4e460 <col:40> 'int' 4
| `-EnumConstantDecl 0x562020b4e590 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x562020b4e740 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x562020b4e570 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x562020b4e550 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x562020b4e510 <col:23> 'int' EnumConstant 0x562020b4e320 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x562020b4e530 <col:40> 'int' 8
|-CXXMethodDecl 0x562020b4e780 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x562020b4e820 <col:68> "" ""
|-CXXMethodDecl 0x562020b4e8b8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x562020b4e958 <col:45> "" ""
|-CXXMethodDecl 0x562020b4e9f0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x562020b4ea90 <col:57> "" ""
|-CXXMethodDecl 0x562020b4eb28 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x562020b4ebc8 <col:45> "" ""
|-CXXMethodDecl 0x562020b4ec60 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x562020b4ed00 <col:57> "" ""
|-CXXMethodDecl 0x562020b4ed90 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x562020b4ee30 <col:51> "" ""
|-CXXMethodDecl 0x562020b4eec0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x562020b4ef60 <col:63> "" ""
|-CXXMethodDecl 0x562020b4eff0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x562020b4f090 <col:53> "" ""
|-CXXMethodDecl 0x562020b4f120 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x562020b4f1c0 <col:65> "" ""
|-CXXMethodDecl 0x562020b4f2d8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x562020b4f248 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x562020b4f380 <col:61> "" ""
|-CXXMethodDecl 0x562020b4f518 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x562020b4f408 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x562020b4f480 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x562020b4f5c8 <col:67> "" ""
|-CXXMethodDecl 0x562020b4f6e0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x562020b4f650 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x562020b4f788 <col:63> "" ""
|-CXXMethodDecl 0x562020b4f920 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x562020b4f810 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x562020b4f888 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x562020b4f9d0 <col:69> "" ""
|-CXXMethodDecl 0x562020b4fae8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x562020b4fa58 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x562020b4fb90 <col:63> "" ""
|-CXXMethodDecl 0x562020b52268 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x562020b52158 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x562020b521d0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x562020b52318 <col:69> "" ""
|-CXXMethodDecl 0x562020b52430 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x562020b523a0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x562020b524d8 <col:62> "" ""
|-CXXMethodDecl 0x562020b52670 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x562020b52560 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x562020b525d8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x562020b52720 <col:68> "" ""
|-CXXMethodDecl 0x562020b52838 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x562020b527a8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x562020b528e0 <col:63> "" ""
|-CXXMethodDecl 0x562020b52a78 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x562020b52968 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x562020b529e0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x562020b52b28 <col:69> "" ""
|-CXXMethodDecl 0x562020b52bb8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x562020b52c58 <col:64> "" ""
|-CXXMethodDecl 0x562020b52ce8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x562020b52d88 <col:52> "" ""
|-CXXMethodDecl 0x562020b52e18 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x562020b52eb8 <col:67> "" ""
|-CXXMethodDecl 0x562020b52f48 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x562020b52fe8 <col:55> "" ""
|-CXXMethodDecl 0x562020b53100 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x562020b53070 <col:32> col:35 'int'
| `-DeprecatedAttr 0x562020b531a8 <col:58> "" ""
|-CXXMethodDecl 0x562020b53340 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x562020b53230 <col:33> col:36 'int'
| |-ParmVarDecl 0x562020b532a8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x562020b533f0 <col:62> "" ""
|-CXXMethodDecl 0x562020b53508 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x562020b53478 <col:32> col:35 'int'
| `-DeprecatedAttr 0x562020b535b0 <col:58> "" ""
|-CXXMethodDecl 0x562020b53748 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x562020b53638 <col:33> col:36 'int'
| |-ParmVarDecl 0x562020b536b0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x562020b537f8 <col:62> "" ""
|-CXXMethodDecl 0x562020b53910 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x562020b53880 <col:34> col:37 'int'
| `-DeprecatedAttr 0x562020b539b8 <col:60> "" ""
|-CXXMethodDecl 0x562020b53b50 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x562020b53a40 <col:34> col:37 'int'
| |-ParmVarDecl 0x562020b53ab8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x562020b53c00 <col:64> "" ""
|-CXXMethodDecl 0x562020b53d18 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x562020b53c88 <col:32> col:35 'int'
| `-DeprecatedAttr 0x562020b53dc0 <col:58> "" ""
|-CXXMethodDecl 0x562020b53f58 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x562020b53e48 <col:33> col:36 'int'
| |-ParmVarDecl 0x562020b53ec0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x562020b54008 <col:62> "" ""
|-CXXMethodDecl 0x562020b54120 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x562020b54090 <col:33> col:36 'int'
| `-DeprecatedAttr 0x562020b541c8 <col:59> "" ""
|-CXXMethodDecl 0x562020b54360 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x562020b54250 <col:33> col:36 'int'
| |-ParmVarDecl 0x562020b542c8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x562020b54410 <col:63> "" ""
|-AccessSpecDecl 0x562020b54480 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x562020b544a8 prev 0x562020b496b0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x562020b545a0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x562020b54690 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x562020b547b8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x562020b54938 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x562020b54ab8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x562020b54c38 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x562020b65a68 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x562020b662d8 <col:11>
| |-CXXDestructorDecl 0x562020b65b40 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x562020b65c78 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x562020b65c78
| | `-ParmVarDecl 0x562020b65d88 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x562020b65e28 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x562020b65e28
| | `-ParmVarDecl 0x562020b65f38 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x562020b68cf8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x562020b68e08 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x562020b69088 <col:11>
| |   `-ReturnStmt 0x562020b69078 <col:11>
| |     `-UnaryOperator 0x562020b69060 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x562020b69050 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x562020b68e78 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x562020b68e78
|   `-ParmVarDecl 0x562020b68f88 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x562020b54ca0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x562020b54db8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x562020b54e58 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x562020b54ec0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x562020b54f28 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x562020b54f90 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x562020b54ff0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x562020b550b0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x562020b55110 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x562020b55170 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x562020b65978 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x562020b54e58 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x562020b662e8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x562020b66340 <col:12>
| |-CXXConstructorDecl 0x562020b65fa8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x562020b65fa8
| | `-ParmVarDecl 0x562020b660b8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x562020b66158 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x562020b66158
| | `-ParmVarDecl 0x562020b66268 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x562020b683e0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x562020b551e8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x562020b55248 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x562020b552b0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x562020b55318 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x562020b55380 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x562020b553e8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x562020b55448 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x562020b554a8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x562020b55510 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x562020b55598 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x562020b551e8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x562020b65910 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x562020b55448 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x562020b66350 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x562020b663b0 <col:21, line:755:5>
|-CXXConstructorDecl 0x562020b55738 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x562020b55678 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x562020b55830 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x562020b55a18 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x562020b55920 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x562020b55ce8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x562020b55ad0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x562020b55b48 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x562020b55bc0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562020b55f08 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x562020b55db8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x562020b55e30 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x562020b5e4e8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x562020b55fc8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x562020b56040 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x562020b560b8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x562020b5e640 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x562020b5e5b0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562020b5e788 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x562020b5e6f8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x562020b5e880 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562020b66450 prev 0x562020b42d10 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x562020b66588 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x562020b66618 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x562020b666c0 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x562020b66760 <col:20>
| `-OptimizeNoneAttr 0x562020b667b8 <col:30>
|-CXXMethodDecl 0x562020b66808 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x562020b668a8 <col:20>
| `-OptimizeNoneAttr 0x562020b66900 <col:30>
|-CXXMethodDecl 0x562020b66950 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x562020b66a18 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x562020b66ae0 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x562020b66bf8 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x562020b66cc0 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x562020b66d60 <col:20>
| `-OptimizeNoneAttr 0x562020b66db8 <col:30>
|-CXXMethodDecl 0x562020b66e28 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x562020b66ec8 <col:20>
| `-OptimizeNoneAttr 0x562020b66f20 <col:30>
|-CXXMethodDecl 0x562020b66fc8 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x562020b67068 <col:20>
| `-OptimizeNoneAttr 0x562020b670c0 <col:30>
|-CXXMethodDecl 0x562020b67110 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x562020b67228 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x562020b67348 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x562020b67468 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x562020b67530 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x562020b675d0 <col:62> "" ""
|-AccessSpecDecl 0x562020b67640 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x562020b676a0 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x562020b68298 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x562020b684c0 <col:29, col:31>
|-CXXMethodDecl 0x562020b67768 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x562020b678a8 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x562020b67818 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x562020b679a0 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x562020b684d0 <col:23, col:25>
|-CXXMethodDecl 0x562020b67b58 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x562020b67a90 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x562020b67e28 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x562020b67c10 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x562020b67c88 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x562020b67d00 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x562020b67fb8 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x562020b67ef0 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x562020b680b0 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x562020b68118 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x562020b68118
  `-ParmVarDecl 0x562020b68228 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562020c47070 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x562020c47188 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x562020c47218 <col:16, col:22> col:16 public
|-EnumDecl 0x562020c47240 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x562020c47340 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x562020c47590 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020c47320 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x562020c47300 <col:21> 'int' 0
| |-EnumConstantDecl 0x562020c473d0 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x562020c475a8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020c473b0 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x562020c47390 <col:24> 'int' 22
| |-EnumConstantDecl 0x562020c47460 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x562020c475c0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020c47440 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x562020c47420 <col:24> 'int' 34
| |-EnumConstantDecl 0x562020c474f0 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x562020c475d8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x562020c474d0 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x562020c474b0 <col:25> 'int' 95
| `-EnumConstantDecl 0x562020c47540 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x562020c48f60 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x562020c49398 <col:7>
|-CXXConstructorDecl 0x562020c49068 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x562020c49068
| `-ParmVarDecl 0x562020c49178 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x562020c49218 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x562020c49328 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x562020cb5f50 <col:7>
`-CXXDestructorDecl 0x562020c4b498 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562020c47608 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x562020c47768 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x562020c477f8 <col:32, col:38> col:32 public
|-TypedefDecl 0x562020c47830 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x56202076f9e0 'uint32_t' sugar
|   |-Typedef 0x562020683408 'uint32_t'
|   `-TypedefType 0x56202065c440 '__uint32_t' sugar
|     |-Typedef 0x56202065c038 '__uint32_t'
|     `-BuiltinType 0x56202061a410 'unsigned int'
|-CXXConstructorDecl 0x562020c47978 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x562020c478a0 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x562020c48e68 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x562020c493a8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x562020c48720 'base' 'int'
| | `-ImplicitCastExpr 0x562020c48f08 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x562020c48ec8 <col:16> 'int' lvalue ParmVar 0x562020c478a0 'b' 'int'
| `-CompoundStmt 0x562020c49418 <col:19, line:1046:5>
|-CXXMethodDecl 0x562020c47e70 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x562020c47a40 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x562020c47ac0 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x562020c47b38 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x562020c47bb8 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x562020c47c78 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x562020c47cf8 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x562020c482d8 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x562020c47f40 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x562020c48238 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x562020c47fe8 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x562020c480a0 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x562020c48118 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x562020c48e88 <col:82> 'const ArgContext' lvalue Var 0x562020c3ba38 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x562020c4a348 <col:94, line:1067:5>
| |   |-DeclStmt 0x562020c495a8 <line:1054:9, col:64>
| |   | `-VarDecl 0x562020c49438 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x562020c49560 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x562020c497c8 <line:1055:9, col:91>
| |   | `-VarDecl 0x562020c495d8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x562020c497a0 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x562020c49780 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x562020c49730 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x562020c49710 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x562020c496b8 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x562020c49668 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x562020c49698 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x562020c496f8 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x562020c496d8 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x562020c49760 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x562020c49928 <line:1056:9, col:27>
| |   | `-VarDecl 0x562020c498c0 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x562020c49d78 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x562020c49ca8 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x562020c49c20 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x562020ba0cf0 0x562020b399c8 0x562020982fa8 0x562020982c80 0x562020974460 0x562020974110 0x562020973a00 0x562020946370 0x5620208d2830
| |   | | |-CallExpr 0x562020c49b60 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x562020c49950 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x562020c49a00 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x562020c499d0 <col:19, col:23> '<bound member function type>' .begin 0x562020963668
| |   | | | |   `-DeclRefExpr 0x562020c499b0 <col:19> 'const String' lvalue ParmVar 0x562020c47fe8 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x562020c49a70 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x562020c49a40 <col:32, col:36> '<bound member function type>' .end 0x562020963880
| |   | | | |   `-DeclRefExpr 0x562020c49a20 <col:32> 'const String' lvalue ParmVar 0x562020c47fe8 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x562020c49a90 <col:43> 'const bool' lvalue Var 0x562020c49438 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x562020c49af8 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x562020c49ad8 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x562020c49b20 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x562020c498c0 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x562020c49b40 <col:73> 'const int' lvalue Var 0x562020c495d8 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x562020c49c00 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x562020c49bd0 <col:16, col:20> '<bound member function type>' .end 0x562020963880
| |   | |     `-DeclRefExpr 0x562020c49bb0 <col:16> 'const String' lvalue ParmVar 0x562020c47fe8 'str' 'const String &'
| |   | `-BinaryOperator 0x562020c49d58 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x562020c49cf0 <col:13> 'int' lvalue ->status 0x562020c48788
| |   |   | `-CXXThisExpr 0x562020c49ce0 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x562020c49d40 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x562020c49d20 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x562020c473d0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x562020c49fc8 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x562020c49eb0 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x562020c49e98 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x562020c49e80 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x562020c49da0 <col:13> 'int' lvalue ->status 0x562020c48788
| |   | | |     `-CXXThisExpr 0x562020c49d90 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x562020c49e60 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x562020c49e30 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x562020c49de0 <col:23> 'int' lvalue ->status 0x562020c48788
| |   | |   |   `-CXXThisExpr 0x562020c49dd0 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x562020c49e48 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x562020c49e10 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x562020c47460 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x562020c49fa8 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x562020c49f48 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x562020c49ef0 <col:13, col:18> '<bound member function type>' .error 0x562020bee0b0
| |   |   | | `-DeclRefExpr 0x562020c49ed0 <col:13> 'const ArgContext' lvalue ParmVar 0x562020c48118 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x562020c49f70 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x562020c49f20 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x562020c49f98 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x562020c49f88 <col:20> 'bool' false
| |   |-DeclStmt 0x562020c4a198 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x562020c4a140 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x562020c4a0d0 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x562020c4a2f8 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x562020c4a1b0 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x5620209067f8
| |   | |-DeclRefExpr 0x562020c4a1f8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x562020c498c0 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x562020c4a2c8 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x562020c4a240 <col:64> 'V' lvalue ParmVar 0x562020c480a0 'result' 'V &'
| |   `-ReturnStmt 0x562020c4a338 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x562020c4a328 <col:16> 'bool' true
| `-CXXMethodDecl 0x562020cb9ab8 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x562020cb9890 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x562020cb9968 <col:46, col:49> col:49 used result 'unsigned int &'
|   |-ParmVarDecl 0x562020cb99d0 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x562020cbb850 <col:94, line:1067:5>
|     |-DeclStmt 0x562020cba2c8 <line:1054:9, col:64>
|     | `-VarDecl 0x562020cba0e8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x562020cba258 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x562020cba228 <col:36, col:55> 'const bool' lvalue Var 0x5620208f5a10 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x562020cba4a8 <line:1055:9, col:91>
|     | `-VarDecl 0x562020cba2e0 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x562020cba428 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x562020cba410 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x562020cba3f0 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x562020cba3d0 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x562020cba3b0 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x562020cba378 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x562020cba358 <col:36, col:44> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x562020c49698 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x562020cba398 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x562020c496d8 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x562020c49760 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x562020cba640 <line:1056:9, col:27>
|     | `-VarDecl 0x562020cba5d8 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x562020cbaad0 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x562020cbaa78 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x562020cba930 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x562020cba900 <col:13> '<bound member function type>' ->parse 0x562020c47e70
|     | | | | `-CXXThisExpr 0x562020cba8f0 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x562020cba790 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x562020cba760 <col:19, col:23> '<bound member function type>' .begin 0x562020963668
|     | | | |   `-DeclRefExpr 0x562020cba740 <col:19> 'const String' lvalue ParmVar 0x562020cb9890 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x562020cba800 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x562020cba7d0 <col:32, col:36> '<bound member function type>' .end 0x562020963880
|     | | | |   `-DeclRefExpr 0x562020cba7b0 <col:32> 'const String' lvalue ParmVar 0x562020cb9890 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x562020cba9a0 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x562020cba980 <col:43> 'const bool' lvalue Var 0x562020cba0e8 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x562020cba888 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x562020cba870 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x562020cba850 <col:58, col:66> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     | | | |-ImplicitCastExpr 0x562020cba9b8 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x562020cba8b0 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x562020cba5d8 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x562020cba9f0 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x562020cba9d0 <col:73> 'const int' lvalue Var 0x562020cba2e0 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x562020cbaa58 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x562020cbaa28 <col:16, col:20> '<bound member function type>' .end 0x562020963880
|     | |     `-DeclRefExpr 0x562020cbaa08 <col:16> 'const String' lvalue ParmVar 0x562020cb9890 'str' 'const String &'
|     | `-BinaryOperator 0x562020cbaab0 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x562020c49cf0 <col:13> 'int' lvalue ->status 0x562020c48788
|     |   | `-CXXThisExpr 0x562020c49ce0 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x562020cbaa98 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x562020c49d20 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x562020c473d0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x562020cbac48 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x562020cbab68 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x562020cbab50 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x562020cbab38 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x562020c49da0 <col:13> 'int' lvalue ->status 0x562020c48788
|     | | |     `-CXXThisExpr 0x562020c49d90 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x562020cbab18 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x562020cbaae8 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x562020c49de0 <col:23> 'int' lvalue ->status 0x562020c48788
|     | |   |   `-CXXThisExpr 0x562020c49dd0 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x562020cbab00 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x562020c49e10 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x562020c47460 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x562020cbac28 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x562020cbabd8 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x562020cbaba8 <col:13, col:18> '<bound member function type>' .error 0x562020bee0b0
|     |   | | `-DeclRefExpr 0x562020cbab88 <col:13> 'const ArgContext' lvalue ParmVar 0x562020cb99d0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x562020cbac00 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x562020c49f20 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x562020cbac18 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x562020c49f88 <col:20> 'bool' false
|     |-DeclStmt 0x562020cbb188 <line:1064:9, col:64>
|     | `-TypedefDecl 0x562020cbb130 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned int>::type':'unsigned int'
|     |   `-ElaboratedType 0x562020cbb0e0 'typename make_unsigned<unsigned int>::type' sugar
|     |     `-TypedefType 0x562020cbb0c0 'make_unsigned<unsigned int>::type' sugar
|     |       |-Typedef 0x562020cbb050 'type'
|     |       `-ElaboratedType 0x562020cbb000 'typename integer_traits<unsigned int>::unsigned_type' sugar
|     |         `-TypedefType 0x562020cbafe0 'integer_traits<unsigned int>::unsigned_type' sugar
|     |           |-Typedef 0x5620208f5b68 'unsigned_type'
|     |           `-BuiltinType 0x56202061a410 'unsigned int'
|     |-CallExpr 0x562020cbb7e0 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x562020cbb7c8 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x562020cbb748 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x562020cbb628 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x5620209067f8 'extract_integer')
|     | |-ImplicitCastExpr 0x562020cbb828 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x562020cbb810 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x562020cbb1e8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x562020cba5d8 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x562020cbb2b8 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x562020cbb268 <col:64> 'unsigned int':'unsigned int' lvalue ParmVar 0x562020cb9968 'result' 'unsigned int &'
|     `-ReturnStmt 0x562020cbb840 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x562020c4a328 <col:16> 'bool' true
|-FunctionTemplateDecl 0x562020c48698 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x562020c48348 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x562020c485f8 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x562020c483f8 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x562020c48498 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x562020c48510 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x562020c48ea8 <col:71> 'const ArgContext' lvalue Var 0x562020c3ba38 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x562020c4aab8 <col:83, line:1083:5>
| |   |-DeclStmt 0x562020c4a410 <line:1071:9, col:12>
| |   | `-VarDecl 0x562020c4a3a8 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x562020c4aa90 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x562020c4a6a0 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x562020c4a528 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x562020c4a4f0 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x562020c4a438 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x562020c4a490 <col:31> 'const String' lvalue ParmVar 0x562020c483f8 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x562020c4a4b0 <col:36> 'V' lvalue Var 0x562020c4a3a8 'x' 'V'
| |     | |   `-DeclRefExpr 0x562020c4a4d0 <col:39> 'const ArgContext' lvalue ParmVar 0x562020c48510 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x562020c4a680 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x562020c4a660 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x562020c4a648 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x562020c4a630 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x562020c4a550 <col:17> 'int' lvalue ->status 0x562020c48788
| |     |     |     `-CXXThisExpr 0x562020c4a540 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x562020c4a610 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x562020c4a5e0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x562020c4a590 <col:27> 'int' lvalue ->status 0x562020c48788
| |     |       |   `-CXXThisExpr 0x562020c4a580 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x562020c4a5f8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x562020c4a5c0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x562020c47460 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x562020c4a6d0 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x562020c4a6c0 <col:20> 'bool' false
| |     `-IfStmt 0x562020c4aa68 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x562020c4a770 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x562020c4a740 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x562020c4a6f0 <col:18> 'int' lvalue ->status 0x562020c48788
| |       | |   `-CXXThisExpr 0x562020c4a6e0 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x562020c4a758 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x562020c4a720 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x562020c47460 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x562020c4a9a8 <col:42, line:1079:9>
| |       | |-CallExpr 0x562020c4a950 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x562020c4a7a0 <line:1076:13> '<bound member function type>' ->range_error 0x562020c48d98
| |       | | | `-CXXThisExpr 0x562020c4a790 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x562020c4a7d0 <col:25> 'const ArgContext' lvalue ParmVar 0x562020c48510 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x562020c4a8b0 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x562020c4a928 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x562020c4a908 <col:43> 'V' lvalue Var 0x562020c4a3a8 'x' 'V'
| |       | `-ReturnStmt 0x562020c4a998 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x562020c4a988 <col:20> 'bool' false
| |       `-CompoundStmt 0x562020c4aa48 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x562020c4aa08 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x562020c4a9c8 <col:13> 'V' lvalue ParmVar 0x562020c48498 'result' 'V &'
| |         | `-DeclRefExpr 0x562020c4a9e8 <col:22> 'V' lvalue Var 0x562020c4a3a8 'x' 'V'
| |         `-ReturnStmt 0x562020c4aa38 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x562020c4aa28 <col:20> 'bool' true
| `-CXXMethodDecl 0x562020cb9478 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x562020cb9250 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x562020cb9328 <col:35, col:38> col:38 used result 'unsigned int &'
|   |-ParmVarDecl 0x562020cb9390 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x562020cba0c8 <col:83, line:1083:5>
|     |-DeclStmt 0x562020cb9700 <line:1071:9, col:12>
|     | `-VarDecl 0x562020cb9698 <col:9, col:11> col:11 used x 'unsigned int':'unsigned int'
|     `-IfStmt 0x562020cba0a0 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x562020cb9d30 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x562020cb9c58 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x562020cb9c20 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x562020cb9bd8 <col:14> '<bound member function type>' ->parse_saturating 0x562020cb9ab8
|       | |   | `-CXXThisExpr 0x562020cb9bc8 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x562020cb9770 <col:31> 'const String' lvalue ParmVar 0x562020cb9250 'str' 'const String &'
|       | |   |-DeclRefExpr 0x562020cb9790 <col:36> 'unsigned int':'unsigned int' lvalue Var 0x562020cb9698 'x' 'unsigned int':'unsigned int'
|       | |   `-DeclRefExpr 0x562020cb97b0 <col:39> 'const ArgContext' lvalue ParmVar 0x562020cb9390 'args' 'const ArgContext &'
|       | `-ParenExpr 0x562020cb9d10 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x562020cb9cf0 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x562020cb9cd8 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x562020cb9cc0 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x562020c4a550 <col:17> 'int' lvalue ->status 0x562020c48788
|       |     |     `-CXXThisExpr 0x562020c4a540 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x562020cb9ca0 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x562020cb9c70 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x562020c4a590 <col:27> 'int' lvalue ->status 0x562020c48788
|       |       |   `-CXXThisExpr 0x562020c4a580 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x562020cb9c88 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x562020c4a5c0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x562020c47460 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x562020cb9d50 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x562020c4a6c0 <col:20> 'bool' false
|       `-IfStmt 0x562020cba078 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x562020cb9d90 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x562020cb9d60 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x562020c4a6f0 <col:18> 'int' lvalue ->status 0x562020c48788
|         | |   `-CXXThisExpr 0x562020c4a6e0 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x562020cb9d78 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x562020c4a720 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x562020c47460 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x562020cb9fb0 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x562020cb9f20 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x562020c4a7a0 <line:1076:13> '<bound member function type>' ->range_error 0x562020c48d98
|         | | | `-CXXThisExpr 0x562020c4a790 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x562020cb9db0 <col:25> 'const ArgContext' lvalue ParmVar 0x562020cb9390 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x562020cb9f88 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x562020cb9f58 <col:31, col:50> 'const bool' lvalue Var 0x5620208f5a10 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x562020cb9ef8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x562020cb9ee0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x562020cb9ec8 <col:43> 'unsigned int':'unsigned int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x562020cb9ea8 <col:43> 'unsigned int':'unsigned int' lvalue Var 0x562020cb9698 'x' 'unsigned int':'unsigned int'
|         | `-ReturnStmt 0x562020cb9fa0 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x562020c4a988 <col:20> 'bool' false
|         `-CompoundStmt 0x562020cba058 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x562020cba028 <line:1080:13, col:22> 'unsigned int':'unsigned int' lvalue '='
|           | |-DeclRefExpr 0x562020cb9fd0 <col:13> 'unsigned int':'unsigned int' lvalue ParmVar 0x562020cb9328 'result' 'unsigned int &'
|           | `-ImplicitCastExpr 0x562020cba010 <col:22> 'unsigned int':'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x562020cb9ff0 <col:22> 'unsigned int':'unsigned int' lvalue Var 0x562020cb9698 'x' 'unsigned int':'unsigned int'
|           `-ReturnStmt 0x562020cba048 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x562020c4aa28 <col:20> 'bool' true
|-FieldDecl 0x562020c48720 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x562020c48788 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x562020c487d8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x562020c48a90 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x562020c48818 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x562020c48898 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x562020c48910 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x562020c48990 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x562020c48d98 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x562020c48b60 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x562020c48bd8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x562020c48c70 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x562020c4b318 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x562020c4b318
| `-ParmVarDecl 0x562020c4b428 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x562020c4b5a8 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x562020c4b6b8 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x562020cb5f60 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x562020cb5f30 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x562020cb5f00 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x562020cb5ed0 <col:7> 'IntArg' lvalue ParmVar 0x562020c4b6b8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x562020c48720 'base' 'int'
| | `-ImplicitCastExpr 0x562020cb6058 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x562020cb6028 <col:7> 'int' xvalue .base 0x562020c48720
| |     `-CXXStaticCastExpr 0x562020cb5ff8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x562020cb5fc8 <col:7> 'IntArg' lvalue ParmVar 0x562020c4b6b8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x562020c48788 'status' 'int'
| | `-ImplicitCastExpr 0x562020cb6128 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x562020cb60f8 <col:7> 'int' xvalue .status 0x562020c48788
| |     `-CXXStaticCastExpr 0x562020cb60c8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x562020cb6098 <col:7> 'IntArg' lvalue ParmVar 0x562020c4b6b8 '' 'IntArg &&'
| `-CompoundStmt 0x562020cb6180 <col:7>
`-CXXDestructorDecl 0x562020cb50c0 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x562020c4f8b0 <../dummy_inc/click/args.hh:1182:1, col:61> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x562020c4fb08 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x562020cb4fe8 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x562020cb5560 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x562020cb5540 <<invalid sloc>> 'int'
| `-CompoundStmt 0x562020cb55d0 <col:19>
|-CXXConstructorDecl 0x562020cb51c8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned int> &)' inline default trivial noexcept-unevaluated 0x562020cb51c8
| `-ParmVarDecl 0x562020cb52d8 <col:19> col:19 'const DefaultArg<unsigned int> &'
|-CXXConstructorDecl 0x562020cb5378 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x562020cb5488 <col:19> col:19 used 'DefaultArg<unsigned int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x562020cb6190 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x562020cb5eb0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x562020cb5e80 <col:19> 'DefaultArg<unsigned int>' xvalue static_cast<struct DefaultArg<unsigned int> &&> <NoOp>
| |       `-DeclRefExpr 0x562020cb5e50 <col:19> 'DefaultArg<unsigned int>' lvalue ParmVar 0x562020cb5488 '' 'DefaultArg<unsigned int> &&'
| `-CompoundStmt 0x562020cb6200 <col:19>
`-CXXDestructorDecl 0x562020cb5610 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class EtherAddress
         0 |   uint16_t [3] _data
           | [sizeof=6, dsize=6, align=1,
           |  nvsize=6, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x562020b98010 prev 0x562020b7bd60 <../dummy_inc/click/etheraddress.hh:9:1, line:148:1> line:9:7 referenced class EtherAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-PackedAttr 0x562020b99a78 <line:148:18>
|-CXXRecordDecl 0x562020b98108 <line:9:1, col:7> col:7 implicit referenced class EtherAddress
|-AccessSpecDecl 0x562020b98198 <col:22, col:28> col:22 public
|-TypedefDecl 0x562020b981d0 <line:11:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x56202076f6f0 'uninitialized_type'
|   `-CXXRecord 0x56202076f658 'uninitialized_type'
|-CXXConstructorDecl 0x562020b98260 <line:14:5, line:16:5> line:14:12 EtherAddress 'void ()' inline
| `-CompoundStmt 0x562020b99d78 <col:27, line:16:5>
|   `-BinaryOperator 0x562020b99d58 <line:15:2, col:35> 'uint16_t':'unsigned short' lvalue '='
|     |-ArraySubscriptExpr 0x562020b99b60 <col:2, col:9> 'uint16_t':'unsigned short' lvalue
|     | |-ImplicitCastExpr 0x562020b99b48 <col:2> 'uint16_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x562020b99af8 <col:2> 'uint16_t [3]' lvalue ->_data 0x562020b99878
|     | |   `-CXXThisExpr 0x562020b99ae8 <col:2> 'EtherAddress *' implicit this
|     | `-IntegerLiteral 0x562020b99b28 <col:8> 'int' 0
|     `-ImplicitCastExpr 0x562020b99d40 <col:13, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-BinaryOperator 0x562020b99d20 <col:13, col:35> 'uint16_t':'unsigned short' lvalue '='
|         |-ArraySubscriptExpr 0x562020b99bf8 <col:13, col:20> 'uint16_t':'unsigned short' lvalue
|         | |-ImplicitCastExpr 0x562020b99be0 <col:13> 'uint16_t *' <ArrayToPointerDecay>
|         | | `-MemberExpr 0x562020b99b90 <col:13> 'uint16_t [3]' lvalue ->_data 0x562020b99878
|         | |   `-CXXThisExpr 0x562020b99b80 <col:13> 'EtherAddress *' implicit this
|         | `-IntegerLiteral 0x562020b99bc0 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x562020b99d08 <col:24, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|           `-BinaryOperator 0x562020b99ce8 <col:24, col:35> 'uint16_t':'unsigned short' lvalue '='
|             |-ArraySubscriptExpr 0x562020b99c90 <col:24, col:31> 'uint16_t':'unsigned short' lvalue
|             | |-ImplicitCastExpr 0x562020b99c78 <col:24> 'uint16_t *' <ArrayToPointerDecay>
|             | | `-MemberExpr 0x562020b99c28 <col:24> 'uint16_t [3]' lvalue ->_data 0x562020b99878
|             | |   `-CXXThisExpr 0x562020b99c18 <col:24> 'EtherAddress *' implicit this
|             | `-IntegerLiteral 0x562020b99c58 <col:30> 'int' 2
|             `-ImplicitCastExpr 0x562020b99cd0 <col:35> 'uint16_t':'unsigned short' <IntegralCast>
|               `-IntegerLiteral 0x562020b99cb0 <col:35> 'int' 0
|-CXXConstructorDecl 0x562020b983b0 <line:22:5, line:24:5> line:22:21 EtherAddress 'void (const unsigned char *)' inline
| |-ParmVarDecl 0x562020b98320 <col:34, col:55> col:55 used data 'const unsigned char *'
| `-CompoundStmt 0x562020b99f40 <col:61, line:24:5>
|   `-CallExpr 0x562020b99e90 <line:23:2, col:23> 'void *'
|     |-ImplicitCastExpr 0x562020b99e78 <col:2> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x562020b99e58 <col:2> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x562020879468 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
|     |-ImplicitCastExpr 0x562020b99ee0 <col:9> 'void *' <BitCast>
|     | `-ImplicitCastExpr 0x562020b99ec8 <col:9> 'uint16_t *' <ArrayToPointerDecay>
|     |   `-MemberExpr 0x562020b99de8 <col:9> 'uint16_t [3]' lvalue ->_data 0x562020b99878
|     |     `-CXXThisExpr 0x562020b99dd8 <col:9> 'EtherAddress *' implicit this
|     |-ImplicitCastExpr 0x562020b99f10 <col:16> 'const void *' <BitCast>
|     | `-ImplicitCastExpr 0x562020b99ef8 <col:16> 'const unsigned char *' <LValueToRValue>
|     |   `-DeclRefExpr 0x562020b99e18 <col:16> 'const unsigned char *' lvalue ParmVar 0x562020b98320 'data' 'const unsigned char *'
|     `-ImplicitCastExpr 0x562020b99f28 <col:22> 'size_t':'unsigned long' <IntegralCast>
|       `-IntegerLiteral 0x562020b99e38 <col:22> 'int' 6
|-CXXConstructorDecl 0x562020b98500 <line:27:5, line:29:5> line:27:12 EtherAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x562020b98470 <col:25, col:51> col:51 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x562020b99fb0 <col:59, line:29:5>
|   `-CStyleCastExpr 0x562020b99f88 <line:28:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x562020b99f58 <col:9> 'const uninitialized_type' lvalue ParmVar 0x562020b98470 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x562020b985f8 <line:32:5, line:34:5> line:32:25 used make_broadcast 'EtherAddress ()' static
| `-CompoundStmt 0x562020b9a6f8 <col:42, line:34:5>
|   `-ReturnStmt 0x562020b9a6e8 <line:33:2, col:28>
|     `-ExprWithCleanups 0x562020b9a6d0 <col:9, col:28> 'EtherAddress'
|       `-CXXConstructExpr 0x562020b9a6a0 <col:9, col:28> 'EtherAddress' 'void (EtherAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x562020b9a4d8 <col:9, col:28> 'EtherAddress' xvalue
|           `-CXXFunctionalCastExpr 0x562020b9a450 <col:9, col:28> 'EtherAddress' functional cast to class EtherAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x562020b9a340 <col:9, col:28> 'EtherAddress' 'void (uint16_t)'
|               `-ImplicitCastExpr 0x562020b9a328 <col:22> 'uint16_t':'unsigned short' <IntegralCast>
|                 `-IntegerLiteral 0x562020b99fd8 <col:22> 'int' 65535
|-CXXMethodDecl 0x562020b986b8 <line:36:5, col:70> col:32 broadcast 'EtherAddress ()' static inline
| `-DeprecatedAttr 0x562020b98758 <col:59> "" ""
|-TypedefDecl 0x562020b988d8 <line:39:5, col:59> col:34 referenced unspecified_bool_type 'bool (EtherAddress::*)() const'
| `-MemberPointerType 0x562020b98850 'bool (EtherAddress::*)() const'
|   |-RecordType 0x562020b7bdf0 'EtherAddress'
|   | `-CXXRecord 0x562020b98010 'EtherAddress'
|   `-ParenType 0x562020b987f0 'bool () const' sugar
|     `-FunctionProtoType 0x5620206c2410 'bool () const' const cdecl
|       `-BuiltinType 0x56202061a2f0 'bool'
|-CXXConversionDecl 0x562020b98a18 <line:41:5, line:43:5> line:41:12 operator bool (EtherAddress::*)() const 'EtherAddress::unspecified_bool_type () const' inline
| `-CompoundStmt 0x562020b9aad8 <col:51, line:43:5>
|   `-ReturnStmt 0x562020b9aac8 <line:42:2, col:70>
|     `-ConditionalOperator 0x562020b9aa98 <col:9, col:70> 'bool (EtherAddress::*)() const'
|       |-BinaryOperator 0x562020b9a9c0 <col:9, col:40> 'bool' '||'
|       | |-BinaryOperator 0x562020b9a8d8 <col:9, col:28> 'bool' '||'
|       | | |-ImplicitCastExpr 0x562020b9a890 <col:9, col:16> 'bool' <IntegralToBoolean>
|       | | | `-ImplicitCastExpr 0x562020b9a878 <col:9, col:16> 'uint16_t':'unsigned short' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x562020b9a7c0 <col:9, col:16> 'const uint16_t':'const unsigned short' lvalue
|       | | |     |-ImplicitCastExpr 0x562020b9a7a8 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       | | |     | `-MemberExpr 0x562020b9a720 <col:9> 'uint16_t const[3]' lvalue ->_data 0x562020b99878
|       | | |     |   `-CXXThisExpr 0x562020b9a710 <col:9> 'const EtherAddress *' implicit this
|       | | |     `-IntegerLiteral 0x562020b9a750 <col:15> 'int' 0
|       | | `-ImplicitCastExpr 0x562020b9a8c0 <col:21, col:28> 'bool' <IntegralToBoolean>
|       | |   `-ImplicitCastExpr 0x562020b9a8a8 <col:21, col:28> 'uint16_t':'unsigned short' <LValueToRValue>
|       | |     `-ArraySubscriptExpr 0x562020b9a858 <col:21, col:28> 'const uint16_t':'const unsigned short' lvalue
|       | |       |-ImplicitCastExpr 0x562020b9a840 <col:21> 'const uint16_t *' <ArrayToPointerDecay>
|       | |       | `-MemberExpr 0x562020b9a7f0 <col:21> 'uint16_t const[3]' lvalue ->_data 0x562020b99878
|       | |       |   `-CXXThisExpr 0x562020b9a7e0 <col:21> 'const EtherAddress *' implicit this
|       | |       `-IntegerLiteral 0x562020b9a820 <col:27> 'int' 1
|       | `-ImplicitCastExpr 0x562020b9a9a8 <col:33, col:40> 'bool' <IntegralToBoolean>
|       |   `-ImplicitCastExpr 0x562020b9a990 <col:33, col:40> 'uint16_t':'unsigned short' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x562020b9a970 <col:33, col:40> 'const uint16_t':'const unsigned short' lvalue
|       |       |-ImplicitCastExpr 0x562020b9a958 <col:33> 'const uint16_t *' <ArrayToPointerDecay>
|       |       | `-MemberExpr 0x562020b9a908 <col:33> 'uint16_t const[3]' lvalue ->_data 0x562020b99878
|       |       |   `-CXXThisExpr 0x562020b9a8f8 <col:33> 'const EtherAddress *' implicit this
|       |       `-IntegerLiteral 0x562020b9a938 <col:39> 'int' 2
|       |-UnaryOperator 0x562020b9aa48 <col:44, col:59> 'bool (EtherAddress::*)() const' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x562020b9aa18 <col:45, col:59> 'bool () const' CXXMethod 0x562020b98ae8 'is_group' 'bool () const'
|       `-ImplicitCastExpr 0x562020b9aa80 <col:70> 'bool (EtherAddress::*)() const' <NullToMemberPointer>
|         `-IntegerLiteral 0x562020b9aa60 <col:70> 'int' 0
|-CXXMethodDecl 0x562020b98ae8 <line:49:5, line:51:5> line:49:17 used is_group 'bool () const' inline
| `-CompoundStmt 0x562020b9ac98 <col:34, line:51:5>
|   `-ReturnStmt 0x562020b9ac88 <line:50:2, col:21>
|     `-ImplicitCastExpr 0x562020b9ac70 <col:9, col:21> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x562020b9ac50 <col:9, col:21> 'int' '&'
|         |-ImplicitCastExpr 0x562020b9ac38 <col:9, col:17> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x562020b9ac20 <col:9, col:17> 'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x562020b9abe0 <col:9, col:17> 'const unsigned char' lvalue
|         |     |-CXXMemberCallExpr 0x562020b9aba0 <col:9, col:14> 'const unsigned char *'
|         |     | `-MemberExpr 0x562020b9ab70 <col:9> '<bound member function type>' ->data 0x562020b98f80
|         |     |   `-CXXThisExpr 0x562020b9ab60 <col:9> 'const EtherAddress *' implicit this
|         |     `-IntegerLiteral 0x562020b9abc0 <col:16> 'int' 0
|         `-IntegerLiteral 0x562020b9ac00 <col:21> 'int' 1
|-CXXMethodDecl 0x562020b98ba8 <line:57:5, line:59:5> line:57:17 is_local 'bool () const' inline
| `-CompoundStmt 0x562020b9ae58 <col:34, line:59:5>
|   `-ReturnStmt 0x562020b9ae48 <line:58:2, col:21>
|     `-ImplicitCastExpr 0x562020b9ae30 <col:9, col:21> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x562020b9ae10 <col:9, col:21> 'int' '&'
|         |-ImplicitCastExpr 0x562020b9adf8 <col:9, col:17> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x562020b9ade0 <col:9, col:17> 'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x562020b9ada0 <col:9, col:17> 'const unsigned char' lvalue
|         |     |-CXXMemberCallExpr 0x562020b9ad60 <col:9, col:14> 'const unsigned char *'
|         |     | `-MemberExpr 0x562020b9ad30 <col:9> '<bound member function type>' ->data 0x562020b98f80
|         |     |   `-CXXThisExpr 0x562020b9ad20 <col:9> 'const EtherAddress *' implicit this
|         |     `-IntegerLiteral 0x562020b9ad80 <col:16> 'int' 0
|         `-IntegerLiteral 0x562020b9adc0 <col:21> 'int' 2
|-CXXMethodDecl 0x562020b98c68 <line:64:5, line:66:5> line:64:17 used is_broadcast 'bool () const' inline
| `-CompoundStmt 0x562020b9b158 <col:38, line:66:5>
|   `-ReturnStmt 0x562020b9b148 <line:65:2, col:43>
|     `-BinaryOperator 0x562020b9b128 <col:9, col:43> 'bool' '=='
|       |-BinaryOperator 0x562020b9b0e8 <col:9, col:38> 'int' '+'
|       | |-BinaryOperator 0x562020b9b000 <col:9, col:27> 'int' '+'
|       | | |-ImplicitCastExpr 0x562020b9afb8 <col:9, col:16> 'int' <IntegralCast>
|       | | | `-ImplicitCastExpr 0x562020b9afa0 <col:9, col:16> 'uint16_t':'unsigned short' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x562020b9aee8 <col:9, col:16> 'const uint16_t':'const unsigned short' lvalue
|       | | |     |-ImplicitCastExpr 0x562020b9aed0 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       | | |     | `-MemberExpr 0x562020b9ae80 <col:9> 'uint16_t const[3]' lvalue ->_data 0x562020b99878
|       | | |     |   `-CXXThisExpr 0x562020b9ae70 <col:9> 'const EtherAddress *' implicit this
|       | | |     `-IntegerLiteral 0x562020b9aeb0 <col:15> 'int' 0
|       | | `-ImplicitCastExpr 0x562020b9afe8 <col:20, col:27> 'int' <IntegralCast>
|       | |   `-ImplicitCastExpr 0x562020b9afd0 <col:20, col:27> 'uint16_t':'unsigned short' <LValueToRValue>
|       | |     `-ArraySubscriptExpr 0x562020b9af80 <col:20, col:27> 'const uint16_t':'const unsigned short' lvalue
|       | |       |-ImplicitCastExpr 0x562020b9af68 <col:20> 'const uint16_t *' <ArrayToPointerDecay>
|       | |       | `-MemberExpr 0x562020b9af18 <col:20> 'uint16_t const[3]' lvalue ->_data 0x562020b99878
|       | |       |   `-CXXThisExpr 0x562020b9af08 <col:20> 'const EtherAddress *' implicit this
|       | |       `-IntegerLiteral 0x562020b9af48 <col:26> 'int' 1
|       | `-ImplicitCastExpr 0x562020b9b0d0 <col:31, col:38> 'int' <IntegralCast>
|       |   `-ImplicitCastExpr 0x562020b9b0b8 <col:31, col:38> 'uint16_t':'unsigned short' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x562020b9b098 <col:31, col:38> 'const uint16_t':'const unsigned short' lvalue
|       |       |-ImplicitCastExpr 0x562020b9b080 <col:31> 'const uint16_t *' <ArrayToPointerDecay>
|       |       | `-MemberExpr 0x562020b9b030 <col:31> 'uint16_t const[3]' lvalue ->_data 0x562020b99878
|       |       |   `-CXXThisExpr 0x562020b9b020 <col:31> 'const EtherAddress *' implicit this
|       |       `-IntegerLiteral 0x562020b9b060 <col:37> 'int' 2
|       `-IntegerLiteral 0x562020b9b108 <col:43> 'int' 196605
|-CXXMethodDecl 0x562020b98de8 <line:69:5, line:75:5> line:69:24 is_broadcast 'bool (const unsigned char *)' static inline
| |-ParmVarDecl 0x562020b98d20 <col:37, col:58> col:58 used data 'const unsigned char *'
| `-CompoundStmt 0x562020b9b2a8 <col:64, line:75:5>
|   `-ReturnStmt 0x562020b9b298 <line:71:2, col:68>
|     `-CXXMemberCallExpr 0x562020b9b278 <col:9, col:68> 'bool'
|       `-MemberExpr 0x562020b9b248 <col:9, col:55> '<bound member function type>' ->is_broadcast 0x562020b98c68
|         `-CXXReinterpretCastExpr 0x562020b9b1b8 <col:9, col:52> 'const EtherAddress *' reinterpret_cast<const class EtherAddress *> <BitCast>
|           `-ImplicitCastExpr 0x562020b9b1a0 <col:48> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|             `-DeclRefExpr 0x562020b9b170 <col:48> 'const unsigned char *' lvalue ParmVar 0x562020b98d20 'data' 'const unsigned char *'
|-CXXMethodDecl 0x562020b98eb8 <line:78:5, line:80:5> line:78:27 data 'unsigned char *()' inline
| `-CompoundStmt 0x562020b9b370 <col:34, line:80:5>
|   `-ReturnStmt 0x562020b9b360 <line:79:2, col:48>
|     `-CXXReinterpretCastExpr 0x562020b9b330 <col:9, col:48> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
|       `-ImplicitCastExpr 0x562020b9b318 <col:43> 'uint16_t *' <ArrayToPointerDecay> part_of_explicit_cast
|         `-MemberExpr 0x562020b9b2d0 <col:43> 'uint16_t [3]' lvalue ->_data 0x562020b99878
|           `-CXXThisExpr 0x562020b9b2c0 <col:43> 'EtherAddress *' implicit this
|-CXXMethodDecl 0x562020b98f80 <line:83:5, line:85:5> line:83:33 used data 'const unsigned char *() const' inline
| `-CompoundStmt 0x562020b9b438 <col:46, line:85:5>
|   `-ReturnStmt 0x562020b9b428 <line:84:2, col:54>
|     `-CXXReinterpretCastExpr 0x562020b9b3f8 <col:9, col:54> 'const unsigned char *' reinterpret_cast<const unsigned char *> <BitCast>
|       `-ImplicitCastExpr 0x562020b9b3e0 <col:49> 'const uint16_t *' <ArrayToPointerDecay> part_of_explicit_cast
|         `-MemberExpr 0x562020b9b398 <col:49> 'uint16_t const[3]' lvalue ->_data 0x562020b99878
|           `-CXXThisExpr 0x562020b9b388 <col:49> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x562020b990c8 <line:89:5, line:91:5> line:89:28 used sdata 'const uint16_t *() const' inline
| `-CompoundStmt 0x562020b9b4b8 <col:42, line:91:5>
|   `-ReturnStmt 0x562020b9b4a8 <line:90:2, col:9>
|     `-ImplicitCastExpr 0x562020b9b490 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       `-MemberExpr 0x562020b9b460 <col:9> 'uint16_t const[3]' lvalue ->_data 0x562020b99878
|         `-CXXThisExpr 0x562020b9b450 <col:9> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x562020b991b8 <line:94:5, line:97:5> line:94:19 hashcode 'size_t () const' inline
| `-CompoundStmt 0x562020b9f7e8 <col:36, line:97:5>
|   `-ReturnStmt 0x562020b9f7d8 <line:95:2, line:96:31>
|     `-BinaryOperator 0x562020b9f7b8 <line:95:9, line:96:31> 'unsigned long' '^'
|       |-ParenExpr 0x562020b9f638 <line:95:9, col:46> 'unsigned long'
|       | `-BinaryOperator 0x562020b9f618 <col:10, col:45> 'unsigned long' '|'
|       |   |-ImplicitCastExpr 0x562020b9f600 <col:10, col:17> 'unsigned long' <IntegralCast>
|       |   | `-ImplicitCastExpr 0x562020b9f5e8 <col:10, col:17> 'uint16_t':'unsigned short' <LValueToRValue>
|       |   |   `-ArraySubscriptExpr 0x562020b9f468 <col:10, col:17> 'const uint16_t':'const unsigned short' lvalue
|       |   |     |-ImplicitCastExpr 0x562020b9f450 <col:10> 'const uint16_t *' <ArrayToPointerDecay>
|       |   |     | `-MemberExpr 0x562020b9b4e0 <col:10> 'uint16_t const[3]' lvalue ->_data 0x562020b99878
|       |   |     |   `-CXXThisExpr 0x562020b9b4d0 <col:10> 'const EtherAddress *' implicit this
|       |   |     `-IntegerLiteral 0x562020b9f430 <col:16> 'int' 2
|       |   `-ParenExpr 0x562020b9f5c8 <col:21, col:45> 'size_t':'unsigned long'
|       |     `-BinaryOperator 0x562020b9f5a8 <col:22, col:43> 'size_t':'unsigned long' '<<'
|       |       |-CStyleCastExpr 0x562020b9f560 <col:22, col:38> 'size_t':'unsigned long' <NoOp>
|       |       | `-ImplicitCastExpr 0x562020b9f548 <col:31, col:38> 'size_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|       |       |   `-ImplicitCastExpr 0x562020b9f530 <col:31, col:38> 'uint16_t':'unsigned short' <LValueToRValue> part_of_explicit_cast
|       |       |     `-ArraySubscriptExpr 0x562020b9f500 <col:31, col:38> 'const uint16_t':'const unsigned short' lvalue
|       |       |       |-ImplicitCastExpr 0x562020b9f4e8 <col:31> 'const uint16_t *' <ArrayToPointerDecay>
|       |       |       | `-MemberExpr 0x562020b9f498 <col:31> 'uint16_t const[3]' lvalue ->_data 0x562020b99878
|       |       |       |   `-CXXThisExpr 0x562020b9f488 <col:31> 'const EtherAddress *' implicit this
|       |       |       `-IntegerLiteral 0x562020b9f4c8 <col:37> 'int' 1
|       |       `-IntegerLiteral 0x562020b9f588 <col:43> 'int' 16
|       `-ParenExpr 0x562020b9f798 <line:96:8, col:31> 'size_t':'unsigned long'
|         `-BinaryOperator 0x562020b9f778 <col:9, col:30> 'size_t':'unsigned long' '<<'
|           |-CStyleCastExpr 0x562020b9f730 <col:9, col:25> 'size_t':'unsigned long' <NoOp>
|           | `-ImplicitCastExpr 0x562020b9f718 <col:18, col:25> 'size_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           |   `-ImplicitCastExpr 0x562020b9f700 <col:18, col:25> 'uint16_t':'unsigned short' <LValueToRValue> part_of_explicit_cast
|           |     `-ArraySubscriptExpr 0x562020b9f6d0 <col:18, col:25> 'const uint16_t':'const unsigned short' lvalue
|           |       |-ImplicitCastExpr 0x562020b9f6b8 <col:18> 'const uint16_t *' <ArrayToPointerDecay>
|           |       | `-MemberExpr 0x562020b9f668 <col:18> 'uint16_t const[3]' lvalue ->_data 0x562020b99878
|           |       |   `-CXXThisExpr 0x562020b9f658 <col:18> 'const EtherAddress *' implicit this
|           |       `-IntegerLiteral 0x562020b9f698 <col:24> 'int' 0
|           `-IntegerLiteral 0x562020b9f758 <col:30> 'int' 9
|-CXXMethodDecl 0x562020b99278 <line:109:5, line:111:5> line:109:19 used unparse 'String () const' inline
| `-CompoundStmt 0x562020b9f8f8 <col:35, line:111:5>
|   `-ReturnStmt 0x562020b9f8e8 <line:110:2, col:22>
|     `-ExprWithCleanups 0x562020b9f8d0 <col:9, col:22> 'String'
|       `-CXXConstructExpr 0x562020b9f8a0 <col:9, col:22> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x562020b9f888 <col:9, col:22> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x562020b9f868 <col:9, col:22> 'String' (CXXTemporary 0x562020b9f868)
|             `-CXXMemberCallExpr 0x562020b9f840 <col:9, col:22> 'String'
|               `-MemberExpr 0x562020b9f810 <col:9> '<bound member function type>' ->unparse_dash 0x562020b993f8
|                 `-CXXThisExpr 0x562020b9f800 <col:9> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x562020b99338 <line:118:5, col:28> col:12 unparse_colon 'String () const'
|-CXXMethodDecl 0x562020b993f8 <line:126:5, col:27> col:12 used unparse_dash 'String () const'
|-CXXMethodDecl 0x562020b994b8 <line:131:5, col:55> col:19 s 'String () const' inline
| `-DeprecatedAttr 0x562020b99558 <col:44> "" ""
|-CXXConversionDecl 0x562020b995f8 <line:136:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x562020b996a0 <col:51> "" ""
|-TypedefDecl 0x562020b99758 <line:138:5, col:33> col:33 parameter_type 'const EtherAddress &'
| `-LValueReferenceType 0x562020b99720 'const EtherAddress &'
|   `-QualType 0x562020b7bdf1 'const EtherAddress' const
|     `-RecordType 0x562020b7bdf0 'EtherAddress'
|       `-CXXRecord 0x562020b98010 'EtherAddress'
|-AccessSpecDecl 0x562020b997b0 <line:140:2, col:9> col:2 private
|-FieldDecl 0x562020b99878 <line:142:5, col:21> col:14 referenced _data 'uint16_t [3]'
|-CXXConstructorDecl 0x562020b999c8 <line:144:5, line:146:5> line:144:5 used EtherAddress 'void (uint16_t)'
| |-ParmVarDecl 0x562020b998d8 <col:18, col:27> col:27 used m 'uint16_t':'unsigned short'
| `-CompoundStmt 0x562020b9fba0 <col:30, line:146:5>
|   `-BinaryOperator 0x562020b9fb80 <line:145:2, col:35> 'uint16_t':'unsigned short' lvalue '='
|     |-ArraySubscriptExpr 0x562020b9f988 <col:2, col:9> 'uint16_t':'unsigned short' lvalue
|     | |-ImplicitCastExpr 0x562020b9f970 <col:2> 'uint16_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x562020b9f920 <col:2> 'uint16_t [3]' lvalue ->_data 0x562020b99878
|     | |   `-CXXThisExpr 0x562020b9f910 <col:2> 'EtherAddress *' implicit this
|     | `-IntegerLiteral 0x562020b9f950 <col:8> 'int' 0
|     `-ImplicitCastExpr 0x562020b9fb68 <col:13, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-BinaryOperator 0x562020b9fb48 <col:13, col:35> 'uint16_t':'unsigned short' lvalue '='
|         |-ArraySubscriptExpr 0x562020b9fa20 <col:13, col:20> 'uint16_t':'unsigned short' lvalue
|         | |-ImplicitCastExpr 0x562020b9fa08 <col:13> 'uint16_t *' <ArrayToPointerDecay>
|         | | `-MemberExpr 0x562020b9f9b8 <col:13> 'uint16_t [3]' lvalue ->_data 0x562020b99878
|         | |   `-CXXThisExpr 0x562020b9f9a8 <col:13> 'EtherAddress *' implicit this
|         | `-IntegerLiteral 0x562020b9f9e8 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x562020b9fb30 <col:24, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|           `-BinaryOperator 0x562020b9fb10 <col:24, col:35> 'uint16_t':'unsigned short' lvalue '='
|             |-ArraySubscriptExpr 0x562020b9fab8 <col:24, col:31> 'uint16_t':'unsigned short' lvalue
|             | |-ImplicitCastExpr 0x562020b9faa0 <col:24> 'uint16_t *' <ArrayToPointerDecay>
|             | | `-MemberExpr 0x562020b9fa50 <col:24> 'uint16_t [3]' lvalue ->_data 0x562020b99878
|             | |   `-CXXThisExpr 0x562020b9fa40 <col:24> 'EtherAddress *' implicit this
|             | `-IntegerLiteral 0x562020b9fa80 <col:30> 'int' 2
|             `-ImplicitCastExpr 0x562020b9faf8 <col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|               `-DeclRefExpr 0x562020b9fad8 <col:35> 'uint16_t':'unsigned short' lvalue ParmVar 0x562020b998d8 'm' 'uint16_t':'unsigned short'
|-CXXConstructorDecl 0x562020b99ff8 <line:9:7> col:7 implicit constexpr EtherAddress 'void (const EtherAddress &)' inline default trivial noexcept-unevaluated 0x562020b99ff8
| `-ParmVarDecl 0x562020b9a108 <col:7> col:7 'const EtherAddress &'
|-CXXConstructorDecl 0x562020b9a1a8 <col:7> col:7 implicit used constexpr EtherAddress 'void (EtherAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x562020b9a2b8 <col:7> col:7 used 'EtherAddress &&'
| |-CXXCtorInitializer Field 0x562020b99878 '_data' 'uint16_t [3]'
| | `-ArrayInitLoopExpr 0x562020b9a640 <col:7> 'uint16_t [3]'
| |   |-OpaqueValueExpr 0x562020b9a5c8 <col:7> 'uint16_t [3]' xvalue
| |   | `-MemberExpr 0x562020b9a580 <col:7> 'uint16_t [3]' xvalue ._data 0x562020b99878
| |   |   `-CXXStaticCastExpr 0x562020b9a550 <col:7> 'EtherAddress' xvalue static_cast<class EtherAddress &&> <NoOp>
| |   |     `-DeclRefExpr 0x562020b9a520 <col:7> 'EtherAddress' lvalue ParmVar 0x562020b9a2b8 '' 'EtherAddress &&'
| |   `-ImplicitCastExpr 0x562020b9a628 <col:7> 'uint16_t':'unsigned short' <LValueToRValue>
| |     `-ArraySubscriptExpr 0x562020b9a608 <col:7> 'uint16_t':'unsigned short' xvalue
| |       |-ImplicitCastExpr 0x562020b9a5f0 <col:7> 'uint16_t *' <ArrayToPointerDecay>
| |       | `-OpaqueValueExpr 0x562020b9a5c8 <col:7> 'uint16_t [3]' xvalue
| |       |   `-MemberExpr 0x562020b9a580 <col:7> 'uint16_t [3]' xvalue ._data 0x562020b99878
| |       |     `-CXXStaticCastExpr 0x562020b9a550 <col:7> 'EtherAddress' xvalue static_cast<class EtherAddress &&> <NoOp>
| |       |       `-DeclRefExpr 0x562020b9a520 <col:7> 'EtherAddress' lvalue ParmVar 0x562020b9a2b8 '' 'EtherAddress &&'
| |       `-ArrayInitIndexExpr 0x562020b9a5e0 <<invalid sloc>> 'unsigned long'
| `-CompoundStmt 0x562020b9a690 <col:7>
`-CXXDestructorDecl 0x562020b9a370 <col:7> col:7 implicit referenced ~EtherAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.EtherAddress = type { [3 x i16] }
  NonVirtualBaseLLVMType:%class.EtherAddress = type { [3 x i16] }
  IsZeroInitializable:1
  BitFields:[
]>
